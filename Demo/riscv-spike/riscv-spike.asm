
riscv-spike.elf:     file format elf32-littleriscv


Disassembly of section .text:

80000000 <boot>:
# define LOAD     lw
# define REGBYTES 4
#endif

boot:
    li t6, 0x1800
80000000:	00002fb7          	lui	t6,0x2
80000004:	800f8f93          	addi	t6,t6,-2048 # 1800 <_HEAP_SIZE+0x800>
    csrw mstatus, t6
80000008:	300f9073          	csrw	mstatus,t6
    j _mstart
8000000c:	0340006f          	j	80000040 <_mstart>
80000010:	00000013          	nop
80000014:	00000013          	nop
80000018:	00000013          	nop
8000001c:	00000013          	nop
80000020:	00000013          	nop
80000024:	00000013          	nop
80000028:	00000013          	nop
8000002c:	00000013          	nop
80000030:	00000013          	nop
80000034:	00000013          	nop
80000038:	00000013          	nop
8000003c:	00000013          	nop

80000040 <_mstart>:
	.section .text,"ax",@progbits
	.globl _mstart

/* Startup code */
_mstart:
    la t0, trap_entry
80000040:	00000297          	auipc	t0,0x0
80000044:	11428293          	addi	t0,t0,276 # 80000154 <trap_entry>
    csrw mtvec, t0
80000048:	30529073          	csrw	mtvec,t0
    li	x1, 0
8000004c:	00000093          	li	ra,0
    li	x2, 0
80000050:	00000113          	li	sp,0
    li	x3, 0
80000054:	00000193          	li	gp,0
    li	x4, 0
80000058:	00000213          	li	tp,0
    li	x5, 0
8000005c:	00000293          	li	t0,0
	li	x6, 0
80000060:	00000313          	li	t1,0
    li	x7, 0
80000064:	00000393          	li	t2,0
    li	x8, 0
80000068:	00000413          	li	s0,0
    li	x9, 0
8000006c:	00000493          	li	s1,0
    li	x10, 0
80000070:	00000513          	li	a0,0
    li	x11, 0
80000074:	00000593          	li	a1,0
    li	x12, 0
80000078:	00000613          	li	a2,0
    li	x13, 0
8000007c:	00000693          	li	a3,0
    li	x14, 0
80000080:	00000713          	li	a4,0
    li	x15, 0
80000084:	00000793          	li	a5,0
    li	x16, 0
80000088:	00000813          	li	a6,0
    li	x17, 0
8000008c:	00000893          	li	a7,0
    li	x18, 0
80000090:	00000913          	li	s2,0
    li	x19, 0
80000094:	00000993          	li	s3,0
    li	x20, 0
80000098:	00000a13          	li	s4,0
    li	x21, 0
8000009c:	00000a93          	li	s5,0
    li	x22, 0
800000a0:	00000b13          	li	s6,0
    li	x23, 0
800000a4:	00000b93          	li	s7,0
    li	x24, 0
800000a8:	00000c13          	li	s8,0
    li	x25, 0
800000ac:	00000c93          	li	s9,0
    li	x26, 0
800000b0:	00000d13          	li	s10,0
    li	x27, 0
800000b4:	00000d93          	li	s11,0
    li	x28, 0
800000b8:	00000e13          	li	t3,0
    li	x29, 0
800000bc:	00000e93          	li	t4,0
    li	x30, 0
800000c0:	00000f13          	li	t5,0
    li	x31, 0
800000c4:	00000f93          	li	t6,0

    /* initialize global pointer */
    la	gp, _gp
800000c8:	00021197          	auipc	gp,0x21
800000cc:	56818193          	addi	gp,gp,1384 # 80021630 <_gp>

800000d0 <init_bss>:

init_bss:
    /* init bss section */
    la	a0, __bss_start
800000d0:	00021517          	auipc	a0,0x21
800000d4:	77050513          	addi	a0,a0,1904 # 80021840 <__bss_start>
    la	a1, __bss_end-4 /* section end is actually the start of the next section */
800000d8:	0003b597          	auipc	a1,0x3b
800000dc:	9f058593          	addi	a1,a1,-1552 # 8003aac8 <errno>
    li	a2, 0x0
800000e0:	00000613          	li	a2,0
    jal	fill_block
800000e4:	1a0000ef          	jal	ra,80000284 <fill_block>

800000e8 <init_sbss>:

init_sbss:
    /* init bss section */
    la	a0, __sbss_start
800000e8:	00021517          	auipc	a0,0x21
800000ec:	d3450513          	addi	a0,a0,-716 # 80020e1c <pxCurrentTCB>
    la	a1, __sbss_end-4 /* section end is actually the start of the next section */
800000f0:	00021597          	auipc	a1,0x21
800000f4:	d3c58593          	addi	a1,a1,-708 # 80020e2c <__malloc_top_pad>
    li	a2, 0x0
800000f8:	00000613          	li	a2,0
    jal	fill_block
800000fc:	188000ef          	jal	ra,80000284 <fill_block>

80000100 <write_stack_pattern>:

write_stack_pattern:
    /* init bss section */
    la	a0, _stack_end  /* note the stack grows from top to bottom */
80000100:	0003c517          	auipc	a0,0x3c
80000104:	9cc50513          	addi	a0,a0,-1588 # 8003bacc <_heap_end>
    la	a1, __stack-4   /* section end is actually the start of the next section */
80000108:	0003d597          	auipc	a1,0x3d
8000010c:	9c058593          	addi	a1,a1,-1600 # 8003cac8 <_heap_end+0xffc>
    li	a2, 0xABABABAB
80000110:	ababb637          	lui	a2,0xababb
80000114:	bab60613          	addi	a2,a2,-1109 # abababab <__stack+0x2ba7e0df>
    jal	fill_block
80000118:	16c000ef          	jal	ra,80000284 <fill_block>

8000011c <init_stack>:

init_stack:
    /* set stack pointer */
    la	sp, _stack
8000011c:	0003d117          	auipc	sp,0x3d
80000120:	9b010113          	addi	sp,sp,-1616 # 8003cacc <__stack>

	j	main
80000124:	70d0606f          	j	80007030 <main>

80000128 <interrupt>:

/* When trap is an interrupt, this function is called */
interrupt:
	slli    t0,t0,1
80000128:	00129293          	slli	t0,t0,0x1
	srli    t0,t0,1
8000012c:	0012d293          	srli	t0,t0,0x1
	addi    t0,t0,-3
80000130:	ffd28293          	addi	t0,t0,-3
	beq	t0,x0,softwareInterrupt
80000134:	00028a63          	beqz	t0,80000148 <softwareInterrupt>
	LOAD	t0, 0x0(sp)
80000138:	00012283          	lw	t0,0(sp)
	addi	sp, sp, REGBYTES
8000013c:	00410113          	addi	sp,sp,4

	/* Interupt is timer interrupt */
	j	TIMER_CMP_INT
80000140:	1740006f          	j	800002b4 <TIMER_CMP_INT>
	mret
80000144:	30200073          	mret

80000148 <softwareInterrupt>:

softwareInterrupt:
	/* Interupt is software interrupt */
	LOAD  t0, 0x0(sp)
80000148:	00012283          	lw	t0,0(sp)
	addi  sp, sp, REGBYTES
8000014c:	00410113          	addi	sp,sp,4
	mret
80000150:	30200073          	mret

80000154 <trap_entry>:

/* For when a trap is fired */
.align 2
trap_entry:
	/* Check for interrupt */
	addi	sp, sp, -REGBYTES
80000154:	ffc10113          	addi	sp,sp,-4
	STORE	t0, 0x0(sp)
80000158:	00512023          	sw	t0,0(sp)
	csrr	t0, mcause
8000015c:	342022f3          	csrr	t0,mcause
	blt	t0,x0,interrupt
80000160:	fc02c4e3          	bltz	t0,80000128 <interrupt>
	LOAD	t0, 0x0(sp)
80000164:	00012283          	lw	t0,0(sp)
	addi	sp, sp, REGBYTES
80000168:	00410113          	addi	sp,sp,4

	/* System call and other traps */
	addi sp, sp, -REGBYTES*32
8000016c:	f8010113          	addi	sp,sp,-128
	STORE x1, 1*REGBYTES(sp)
80000170:	00112223          	sw	ra,4(sp)
	STORE x2, 2*REGBYTES(sp)
80000174:	00212423          	sw	sp,8(sp)
	STORE x3, 3*REGBYTES(sp)
80000178:	00312623          	sw	gp,12(sp)
	STORE x4, 4*REGBYTES(sp)
8000017c:	00412823          	sw	tp,16(sp)
	STORE x5, 5*REGBYTES(sp)
80000180:	00512a23          	sw	t0,20(sp)
	STORE x6, 6*REGBYTES(sp)
80000184:	00612c23          	sw	t1,24(sp)
	STORE x7, 7*REGBYTES(sp)
80000188:	00712e23          	sw	t2,28(sp)
	STORE x8, 8*REGBYTES(sp)
8000018c:	02812023          	sw	s0,32(sp)
	STORE x9, 9*REGBYTES(sp)
80000190:	02912223          	sw	s1,36(sp)
	STORE x10, 10*REGBYTES(sp)
80000194:	02a12423          	sw	a0,40(sp)
	STORE x11, 11*REGBYTES(sp)
80000198:	02b12623          	sw	a1,44(sp)
	STORE x12, 12*REGBYTES(sp)
8000019c:	02c12823          	sw	a2,48(sp)
	STORE x13, 13*REGBYTES(sp)
800001a0:	02d12a23          	sw	a3,52(sp)
	STORE x14, 14*REGBYTES(sp)
800001a4:	02e12c23          	sw	a4,56(sp)
	STORE x15, 15*REGBYTES(sp)
800001a8:	02f12e23          	sw	a5,60(sp)
	STORE x16, 16*REGBYTES(sp)
800001ac:	05012023          	sw	a6,64(sp)
	STORE x17, 17*REGBYTES(sp)
800001b0:	05112223          	sw	a7,68(sp)
	STORE x18, 18*REGBYTES(sp)
800001b4:	05212423          	sw	s2,72(sp)
	STORE x19, 19*REGBYTES(sp)
800001b8:	05312623          	sw	s3,76(sp)
	STORE x20, 20*REGBYTES(sp)
800001bc:	05412823          	sw	s4,80(sp)
	STORE x21, 21*REGBYTES(sp)
800001c0:	05512a23          	sw	s5,84(sp)
	STORE x22, 22*REGBYTES(sp)
800001c4:	05612c23          	sw	s6,88(sp)
	STORE x23, 23*REGBYTES(sp)
800001c8:	05712e23          	sw	s7,92(sp)
	STORE x24, 24*REGBYTES(sp)
800001cc:	07812023          	sw	s8,96(sp)
	STORE x25, 25*REGBYTES(sp)
800001d0:	07912223          	sw	s9,100(sp)
	STORE x26, 26*REGBYTES(sp)
800001d4:	07a12423          	sw	s10,104(sp)
	STORE x27, 27*REGBYTES(sp)
800001d8:	07b12623          	sw	s11,108(sp)
	STORE x28, 28*REGBYTES(sp)
800001dc:	07c12823          	sw	t3,112(sp)
	STORE x29, 29*REGBYTES(sp)
800001e0:	07d12a23          	sw	t4,116(sp)
	STORE x30, 30*REGBYTES(sp)
800001e4:	07e12c23          	sw	t5,120(sp)
	STORE x31, 31*REGBYTES(sp)
800001e8:	07f12e23          	sw	t6,124(sp)

	csrr a0, mcause
800001ec:	34202573          	csrr	a0,mcause
	csrr a1, mepc
800001f0:	341025f3          	csrr	a1,mepc


	mv a2, sp
800001f4:	00010613          	mv	a2,sp
	jal ulSyscallTrap
800001f8:	3f9060ef          	jal	ra,80006df0 <ulSyscallTrap>
	csrw mepc, a0
800001fc:	34151073          	csrw	mepc,a0

	LOAD x1, 1*REGBYTES(sp)
80000200:	00412083          	lw	ra,4(sp)
	LOAD x2, 2*REGBYTES(sp)
80000204:	00812103          	lw	sp,8(sp)
	LOAD x3, 3*REGBYTES(sp)
80000208:	00c12183          	lw	gp,12(sp)
	LOAD x4, 4*REGBYTES(sp)
8000020c:	01012203          	lw	tp,16(sp)
	LOAD x5, 5*REGBYTES(sp)
80000210:	01412283          	lw	t0,20(sp)
	LOAD x6, 6*REGBYTES(sp)
80000214:	01812303          	lw	t1,24(sp)
	LOAD x7, 7*REGBYTES(sp)
80000218:	01c12383          	lw	t2,28(sp)
	LOAD x8, 8*REGBYTES(sp)
8000021c:	02012403          	lw	s0,32(sp)
	LOAD x9, 9*REGBYTES(sp)
80000220:	02412483          	lw	s1,36(sp)
	LOAD x10, 10*REGBYTES(sp)
80000224:	02812503          	lw	a0,40(sp)
	LOAD x11, 11*REGBYTES(sp)
80000228:	02c12583          	lw	a1,44(sp)
	LOAD x12, 12*REGBYTES(sp)
8000022c:	03012603          	lw	a2,48(sp)
	LOAD x13, 13*REGBYTES(sp)
80000230:	03412683          	lw	a3,52(sp)
	LOAD x14, 14*REGBYTES(sp)
80000234:	03812703          	lw	a4,56(sp)
	LOAD x15, 15*REGBYTES(sp)
80000238:	03c12783          	lw	a5,60(sp)
	LOAD x16, 16*REGBYTES(sp)
8000023c:	04012803          	lw	a6,64(sp)
	LOAD x17, 17*REGBYTES(sp)
80000240:	04412883          	lw	a7,68(sp)
	LOAD x18, 18*REGBYTES(sp)
80000244:	04812903          	lw	s2,72(sp)
	LOAD x19, 19*REGBYTES(sp)
80000248:	04c12983          	lw	s3,76(sp)
	LOAD x20, 20*REGBYTES(sp)
8000024c:	05012a03          	lw	s4,80(sp)
	LOAD x21, 21*REGBYTES(sp)
80000250:	05412a83          	lw	s5,84(sp)
	LOAD x22, 22*REGBYTES(sp)
80000254:	05812b03          	lw	s6,88(sp)
	LOAD x23, 23*REGBYTES(sp)
80000258:	05c12b83          	lw	s7,92(sp)
	LOAD x24, 24*REGBYTES(sp)
8000025c:	06012c03          	lw	s8,96(sp)
	LOAD x25, 25*REGBYTES(sp)
80000260:	06412c83          	lw	s9,100(sp)
	LOAD x26, 26*REGBYTES(sp)
80000264:	06812d03          	lw	s10,104(sp)
	LOAD x27, 27*REGBYTES(sp)
80000268:	06c12d83          	lw	s11,108(sp)
	LOAD x28, 28*REGBYTES(sp)
8000026c:	07012e03          	lw	t3,112(sp)
	LOAD x29, 29*REGBYTES(sp)
80000270:	07412e83          	lw	t4,116(sp)
	LOAD x30, 30*REGBYTES(sp)
80000274:	07812f03          	lw	t5,120(sp)
	LOAD x31, 31*REGBYTES(sp)
80000278:	07c12f83          	lw	t6,124(sp)

	addi sp, sp, REGBYTES*32
8000027c:	08010113          	addi	sp,sp,128

	mret
80000280:	30200073          	mret

80000284 <fill_block>:

/* Fills memory blocks */
fill_block:
    sw		a2, 0(a0)
80000284:	00c52023          	sw	a2,0(a0)
    bgeu	a0, a1, fb_end
80000288:	00b57663          	bleu	a1,a0,80000294 <fb_end>
    addi	a0, a0, 4
8000028c:	00450513          	addi	a0,a0,4
    j		fill_block
80000290:	ff5ff06f          	j	80000284 <fill_block>

80000294 <fb_end>:
fb_end:
    ret
80000294:	00008067          	ret
	...

800002b4 <TIMER_CMP_INT>:
	mret
	.endm

/* Macro for restoring task context */
TIMER_CMP_INT:
	portSAVE_CONTEXT
800002b4:	f8010113          	addi	sp,sp,-128
800002b8:	00112023          	sw	ra,0(sp)
800002bc:	00212223          	sw	sp,4(sp)
800002c0:	00312423          	sw	gp,8(sp)
800002c4:	00412623          	sw	tp,12(sp)
800002c8:	00512823          	sw	t0,16(sp)
800002cc:	00612a23          	sw	t1,20(sp)
800002d0:	00712c23          	sw	t2,24(sp)
800002d4:	00812e23          	sw	s0,28(sp)
800002d8:	02912023          	sw	s1,32(sp)
800002dc:	02a12223          	sw	a0,36(sp)
800002e0:	02b12423          	sw	a1,40(sp)
800002e4:	02c12623          	sw	a2,44(sp)
800002e8:	02d12823          	sw	a3,48(sp)
800002ec:	02e12a23          	sw	a4,52(sp)
800002f0:	02f12c23          	sw	a5,56(sp)
800002f4:	03012e23          	sw	a6,60(sp)
800002f8:	05112023          	sw	a7,64(sp)
800002fc:	05212223          	sw	s2,68(sp)
80000300:	05312423          	sw	s3,72(sp)
80000304:	05412623          	sw	s4,76(sp)
80000308:	05512823          	sw	s5,80(sp)
8000030c:	05612a23          	sw	s6,84(sp)
80000310:	05712c23          	sw	s7,88(sp)
80000314:	05812e23          	sw	s8,92(sp)
80000318:	07912023          	sw	s9,96(sp)
8000031c:	07a12223          	sw	s10,100(sp)
80000320:	07b12423          	sw	s11,104(sp)
80000324:	07c12623          	sw	t3,108(sp)
80000328:	07d12823          	sw	t4,112(sp)
8000032c:	07e12a23          	sw	t5,116(sp)
80000330:	07f12c23          	sw	t6,120(sp)
80000334:	00021297          	auipc	t0,0x21
80000338:	ae82a283          	lw	t0,-1304(t0) # 80020e1c <pxCurrentTCB>
8000033c:	0022a023          	sw	sp,0(t0)
	portSAVE_EPC
80000340:	341022f3          	csrr	t0,mepc
80000344:	06512e23          	sw	t0,124(sp)
	jal	vPortSysTickHandler
80000348:	42c000ef          	jal	ra,80000774 <vPortSysTickHandler>
	portRESTORE_CONTEXT
8000034c:	00021117          	auipc	sp,0x21
80000350:	ad012103          	lw	sp,-1328(sp) # 80020e1c <pxCurrentTCB>
80000354:	00012103          	lw	sp,0(sp)
80000358:	07c12283          	lw	t0,124(sp)
8000035c:	34129073          	csrw	mepc,t0
80000360:	000022b7          	lui	t0,0x2
80000364:	88028293          	addi	t0,t0,-1920 # 1880 <_HEAP_SIZE+0x880>
80000368:	3002a073          	csrs	mstatus,t0
8000036c:	00012083          	lw	ra,0(sp)
80000370:	00c12203          	lw	tp,12(sp)
80000374:	01012283          	lw	t0,16(sp)
80000378:	01412303          	lw	t1,20(sp)
8000037c:	01812383          	lw	t2,24(sp)
80000380:	01c12403          	lw	s0,28(sp)
80000384:	02012483          	lw	s1,32(sp)
80000388:	02412503          	lw	a0,36(sp)
8000038c:	02812583          	lw	a1,40(sp)
80000390:	02c12603          	lw	a2,44(sp)
80000394:	03012683          	lw	a3,48(sp)
80000398:	03412703          	lw	a4,52(sp)
8000039c:	03812783          	lw	a5,56(sp)
800003a0:	03c12803          	lw	a6,60(sp)
800003a4:	04012883          	lw	a7,64(sp)
800003a8:	04412903          	lw	s2,68(sp)
800003ac:	04812983          	lw	s3,72(sp)
800003b0:	04c12a03          	lw	s4,76(sp)
800003b4:	05012a83          	lw	s5,80(sp)
800003b8:	05412b03          	lw	s6,84(sp)
800003bc:	05812b83          	lw	s7,88(sp)
800003c0:	05c12c03          	lw	s8,92(sp)
800003c4:	06012c83          	lw	s9,96(sp)
800003c8:	06412d03          	lw	s10,100(sp)
800003cc:	06812d83          	lw	s11,104(sp)
800003d0:	06c12e03          	lw	t3,108(sp)
800003d4:	07012e83          	lw	t4,112(sp)
800003d8:	07412f03          	lw	t5,116(sp)
800003dc:	07812f83          	lw	t6,120(sp)
800003e0:	08010113          	addi	sp,sp,128
800003e4:	30200073          	mret

800003e8 <xPortStartScheduler>:
	STORE	x28, 27 * REGBYTES(t0)
	STORE	x29, 28 * REGBYTES(t0)
	STORE	x30, 29 * REGBYTES(t0)
	STORE	x31, 30 * REGBYTES(t0)
#endif
	jal		vPortSetupTimer
800003e8:	244000ef          	jal	ra,8000062c <vPortSetupTimer>
	portRESTORE_CONTEXT
800003ec:	00021117          	auipc	sp,0x21
800003f0:	a3012103          	lw	sp,-1488(sp) # 80020e1c <pxCurrentTCB>
800003f4:	00012103          	lw	sp,0(sp)
800003f8:	07c12283          	lw	t0,124(sp)
800003fc:	34129073          	csrw	mepc,t0
80000400:	000022b7          	lui	t0,0x2
80000404:	88028293          	addi	t0,t0,-1920 # 1880 <_HEAP_SIZE+0x880>
80000408:	3002a073          	csrs	mstatus,t0
8000040c:	00012083          	lw	ra,0(sp)
80000410:	00c12203          	lw	tp,12(sp)
80000414:	01012283          	lw	t0,16(sp)
80000418:	01412303          	lw	t1,20(sp)
8000041c:	01812383          	lw	t2,24(sp)
80000420:	01c12403          	lw	s0,28(sp)
80000424:	02012483          	lw	s1,32(sp)
80000428:	02412503          	lw	a0,36(sp)
8000042c:	02812583          	lw	a1,40(sp)
80000430:	02c12603          	lw	a2,44(sp)
80000434:	03012683          	lw	a3,48(sp)
80000438:	03412703          	lw	a4,52(sp)
8000043c:	03812783          	lw	a5,56(sp)
80000440:	03c12803          	lw	a6,60(sp)
80000444:	04012883          	lw	a7,64(sp)
80000448:	04412903          	lw	s2,68(sp)
8000044c:	04812983          	lw	s3,72(sp)
80000450:	04c12a03          	lw	s4,76(sp)
80000454:	05012a83          	lw	s5,80(sp)
80000458:	05412b03          	lw	s6,84(sp)
8000045c:	05812b83          	lw	s7,88(sp)
80000460:	05c12c03          	lw	s8,92(sp)
80000464:	06012c83          	lw	s9,96(sp)
80000468:	06412d03          	lw	s10,100(sp)
8000046c:	06812d83          	lw	s11,104(sp)
80000470:	06c12e03          	lw	t3,108(sp)
80000474:	07012e83          	lw	t4,112(sp)
80000478:	07412f03          	lw	t5,116(sp)
8000047c:	07812f83          	lw	t6,120(sp)
80000480:	08010113          	addi	sp,sp,128
80000484:	30200073          	mret

80000488 <vPortEndScheduler>:
	LOAD	x28, 27 * REGBYTES(t0)
	LOAD	x29, 28 * REGBYTES(t0)
	LOAD	x30, 39 * REGBYTES(t0)
	LOAD	x31, 30 * REGBYTES(t0)
#endif
	ret
80000488:	00008067          	ret

8000048c <vPortYield>:
	*  stack. However, "mepc" will be overwritten by the interrupt handler if a timer
	*  interrupt happens during the yield. To avoid this, prevent interrupts before starting.
	*  The write to mstatus in the restore context routine will enable interrupts after the
	*  mret. A more fine-grain lock may be possible.
	*/  
	csrci mstatus, 8
8000048c:	30047073          	csrci	mstatus,8

	portSAVE_CONTEXT
80000490:	f8010113          	addi	sp,sp,-128
80000494:	00112023          	sw	ra,0(sp)
80000498:	00212223          	sw	sp,4(sp)
8000049c:	00312423          	sw	gp,8(sp)
800004a0:	00412623          	sw	tp,12(sp)
800004a4:	00512823          	sw	t0,16(sp)
800004a8:	00612a23          	sw	t1,20(sp)
800004ac:	00712c23          	sw	t2,24(sp)
800004b0:	00812e23          	sw	s0,28(sp)
800004b4:	02912023          	sw	s1,32(sp)
800004b8:	02a12223          	sw	a0,36(sp)
800004bc:	02b12423          	sw	a1,40(sp)
800004c0:	02c12623          	sw	a2,44(sp)
800004c4:	02d12823          	sw	a3,48(sp)
800004c8:	02e12a23          	sw	a4,52(sp)
800004cc:	02f12c23          	sw	a5,56(sp)
800004d0:	03012e23          	sw	a6,60(sp)
800004d4:	05112023          	sw	a7,64(sp)
800004d8:	05212223          	sw	s2,68(sp)
800004dc:	05312423          	sw	s3,72(sp)
800004e0:	05412623          	sw	s4,76(sp)
800004e4:	05512823          	sw	s5,80(sp)
800004e8:	05612a23          	sw	s6,84(sp)
800004ec:	05712c23          	sw	s7,88(sp)
800004f0:	05812e23          	sw	s8,92(sp)
800004f4:	07912023          	sw	s9,96(sp)
800004f8:	07a12223          	sw	s10,100(sp)
800004fc:	07b12423          	sw	s11,104(sp)
80000500:	07c12623          	sw	t3,108(sp)
80000504:	07d12823          	sw	t4,112(sp)
80000508:	07e12a23          	sw	t5,116(sp)
8000050c:	07f12c23          	sw	t6,120(sp)
80000510:	00021297          	auipc	t0,0x21
80000514:	90c2a283          	lw	t0,-1780(t0) # 80020e1c <pxCurrentTCB>
80000518:	0022a023          	sw	sp,0(t0)
	portSAVE_RA
8000051c:	06112e23          	sw	ra,124(sp)
	jal	vTaskSwitchContext
80000520:	0e4030ef          	jal	ra,80003604 <vTaskSwitchContext>
	portRESTORE_CONTEXT
80000524:	00021117          	auipc	sp,0x21
80000528:	8f812103          	lw	sp,-1800(sp) # 80020e1c <pxCurrentTCB>
8000052c:	00012103          	lw	sp,0(sp)
80000530:	07c12283          	lw	t0,124(sp)
80000534:	34129073          	csrw	mepc,t0
80000538:	000022b7          	lui	t0,0x2
8000053c:	88028293          	addi	t0,t0,-1920 # 1880 <_HEAP_SIZE+0x880>
80000540:	3002a073          	csrs	mstatus,t0
80000544:	00012083          	lw	ra,0(sp)
80000548:	00c12203          	lw	tp,12(sp)
8000054c:	01012283          	lw	t0,16(sp)
80000550:	01412303          	lw	t1,20(sp)
80000554:	01812383          	lw	t2,24(sp)
80000558:	01c12403          	lw	s0,28(sp)
8000055c:	02012483          	lw	s1,32(sp)
80000560:	02412503          	lw	a0,36(sp)
80000564:	02812583          	lw	a1,40(sp)
80000568:	02c12603          	lw	a2,44(sp)
8000056c:	03012683          	lw	a3,48(sp)
80000570:	03412703          	lw	a4,52(sp)
80000574:	03812783          	lw	a5,56(sp)
80000578:	03c12803          	lw	a6,60(sp)
8000057c:	04012883          	lw	a7,64(sp)
80000580:	04412903          	lw	s2,68(sp)
80000584:	04812983          	lw	s3,72(sp)
80000588:	04c12a03          	lw	s4,76(sp)
8000058c:	05012a83          	lw	s5,80(sp)
80000590:	05412b03          	lw	s6,84(sp)
80000594:	05812b83          	lw	s7,88(sp)
80000598:	05c12c03          	lw	s8,92(sp)
8000059c:	06012c83          	lw	s9,96(sp)
800005a0:	06412d03          	lw	s10,100(sp)
800005a4:	06812d83          	lw	s11,104(sp)
800005a8:	06c12e03          	lw	t3,108(sp)
800005ac:	07012e83          	lw	t4,112(sp)
800005b0:	07412f03          	lw	t5,116(sp)
800005b4:	07812f83          	lw	t6,120(sp)
800005b8:	08010113          	addi	sp,sp,128
800005bc:	30200073          	mret

800005c0 <prvSetNextTimerInterrupt>:
 * 
 * TODO: we should disable timer irq justa fter entering this handler, 
 * and re-enable the irq right before leaving this handler
 */
static void prvSetNextTimerInterrupt(void)
{
800005c0:	ff010113          	addi	sp,sp,-16
800005c4:	00812623          	sw	s0,12(sp)
800005c8:	01010413          	addi	s0,sp,16
		*timecmp = *mtime + (configTICK_CLOCK_HZ / configTICK_RATE_HZ);
800005cc:	00021797          	auipc	a5,0x21
800005d0:	88078793          	addi	a5,a5,-1920 # 80020e4c <mtime>
800005d4:	0007a783          	lw	a5,0(a5)
800005d8:	0047a803          	lw	a6,4(a5)
800005dc:	0007a783          	lw	a5,0(a5)
800005e0:	00021717          	auipc	a4,0x21
800005e4:	87070713          	addi	a4,a4,-1936 # 80020e50 <timecmp>
800005e8:	00072503          	lw	a0,0(a4)
800005ec:	3e800593          	li	a1,1000
800005f0:	00000613          	li	a2,0
800005f4:	00b786b3          	add	a3,a5,a1
800005f8:	00068893          	mv	a7,a3
800005fc:	00f8b8b3          	sltu	a7,a7,a5
80000600:	00c80733          	add	a4,a6,a2
80000604:	00e887b3          	add	a5,a7,a4
80000608:	00078713          	mv	a4,a5
8000060c:	00068793          	mv	a5,a3
80000610:	00070813          	mv	a6,a4
80000614:	00f52023          	sw	a5,0(a0)
80000618:	01052223          	sw	a6,4(a0)
}
8000061c:	00000013          	nop
80000620:	00c12403          	lw	s0,12(sp)
80000624:	01010113          	addi	sp,sp,16
80000628:	00008067          	ret

8000062c <vPortSetupTimer>:
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
8000062c:	ff010113          	addi	sp,sp,-16
80000630:	00112623          	sw	ra,12(sp)
80000634:	00812423          	sw	s0,8(sp)
80000638:	01010413          	addi	s0,sp,16
    /* reuse existing routine */
    prvSetNextTimerInterrupt();
8000063c:	f85ff0ef          	jal	ra,800005c0 <prvSetNextTimerInterrupt>

	/* Enable timer interupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80000640:	08000793          	li	a5,128
80000644:	3047a073          	csrs	mie,a5
}
80000648:	00000013          	nop
8000064c:	00c12083          	lw	ra,12(sp)
80000650:	00812403          	lw	s0,8(sp)
80000654:	01010113          	addi	sp,sp,16
80000658:	00008067          	ret

8000065c <prvTaskExitError>:
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
8000065c:	ff010113          	addi	sp,sp,-16
80000660:	00812623          	sw	s0,12(sp)
80000664:	01010413          	addi	s0,sp,16
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
80000668:	00020797          	auipc	a5,0x20
8000066c:	7e078793          	addi	a5,a5,2016 # 80020e48 <uxCriticalNesting>
80000670:	0007a703          	lw	a4,0(a5)
80000674:	fff00793          	li	a5,-1
80000678:	00f70663          	beq	a4,a5,80000684 <prvTaskExitError+0x28>
8000067c:	30007073          	csrci	mstatus,0
80000680:	0000006f          	j	80000680 <prvTaskExitError+0x24>
	portDISABLE_INTERRUPTS();
80000684:	30007073          	csrci	mstatus,0
	for( ;; );
80000688:	0000006f          	j	80000688 <prvTaskExitError+0x2c>

8000068c <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

/* Clear current interrupt mask and set given mask */
void vPortClearInterruptMask(int mask)
{
8000068c:	fe010113          	addi	sp,sp,-32
80000690:	00812e23          	sw	s0,28(sp)
80000694:	02010413          	addi	s0,sp,32
80000698:	fea42623          	sw	a0,-20(s0)
	__asm volatile("csrw mie, %0"::"r"(mask));
8000069c:	fec42783          	lw	a5,-20(s0)
800006a0:	30479073          	csrw	mie,a5
}
800006a4:	00000013          	nop
800006a8:	01c12403          	lw	s0,28(sp)
800006ac:	02010113          	addi	sp,sp,32
800006b0:	00008067          	ret

800006b4 <vPortSetInterruptMask>:
/*-----------------------------------------------------------*/

/* Set interrupt mask and return current interrupt enable register */
int vPortSetInterruptMask(void)
{
800006b4:	fe010113          	addi	sp,sp,-32
800006b8:	00812e23          	sw	s0,28(sp)
800006bc:	02010413          	addi	s0,sp,32
	int ret;
	__asm volatile("csrr %0,mie":"=r"(ret));
800006c0:	304027f3          	csrr	a5,mie
800006c4:	fef42623          	sw	a5,-20(s0)
	__asm volatile("csrc mie,%0"::"i"(7));
800006c8:	3043f073          	csrci	mie,7
	return ret;
800006cc:	fec42783          	lw	a5,-20(s0)
}
800006d0:	00078513          	mv	a0,a5
800006d4:	01c12403          	lw	s0,28(sp)
800006d8:	02010113          	addi	sp,sp,32
800006dc:	00008067          	ret

800006e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
800006e0:	fe010113          	addi	sp,sp,-32
800006e4:	00812e23          	sw	s0,28(sp)
800006e8:	02010413          	addi	s0,sp,32
800006ec:	fea42623          	sw	a0,-20(s0)
800006f0:	feb42423          	sw	a1,-24(s0)
800006f4:	fec42223          	sw	a2,-28(s0)
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
800006f8:	fec42783          	lw	a5,-20(s0)
800006fc:	ffc78793          	addi	a5,a5,-4
80000700:	fef42623          	sw	a5,-20(s0)
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
80000704:	fe842703          	lw	a4,-24(s0)
80000708:	fec42783          	lw	a5,-20(s0)
8000070c:	00e7a023          	sw	a4,0(a5)
	pxTopOfStack -= 22;
80000710:	fec42783          	lw	a5,-20(s0)
80000714:	fa878793          	addi	a5,a5,-88
80000718:	fef42623          	sw	a5,-20(s0)
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
8000071c:	fe442703          	lw	a4,-28(s0)
80000720:	fec42783          	lw	a5,-20(s0)
80000724:	00e7a023          	sw	a4,0(a5)
	pxTopOfStack -= 6;
80000728:	fec42783          	lw	a5,-20(s0)
8000072c:	fe878793          	addi	a5,a5,-24
80000730:	fef42623          	sw	a5,-20(s0)
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
80000734:	00018793          	mv	a5,gp
80000738:	00078713          	mv	a4,a5
8000073c:	fec42783          	lw	a5,-20(s0)
80000740:	00e7a023          	sw	a4,0(a5)
	pxTopOfStack -= 3;
80000744:	fec42783          	lw	a5,-20(s0)
80000748:	ff478793          	addi	a5,a5,-12
8000074c:	fef42623          	sw	a5,-20(s0)
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
80000750:	00000717          	auipc	a4,0x0
80000754:	f0c70713          	addi	a4,a4,-244 # 8000065c <prvTaskExitError>
80000758:	fec42783          	lw	a5,-20(s0)
8000075c:	00e7a023          	sw	a4,0(a5)
	
	return pxTopOfStack;
80000760:	fec42783          	lw	a5,-20(s0)
}
80000764:	00078513          	mv	a0,a5
80000768:	01c12403          	lw	s0,28(sp)
8000076c:	02010113          	addi	sp,sp,32
80000770:	00008067          	ret

80000774 <vPortSysTickHandler>:
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
80000774:	ff010113          	addi	sp,sp,-16
80000778:	00112623          	sw	ra,12(sp)
8000077c:	00812423          	sw	s0,8(sp)
80000780:	01010413          	addi	s0,sp,16
	prvSetNextTimerInterrupt();
80000784:	e3dff0ef          	jal	ra,800005c0 <prvSetNextTimerInterrupt>

	/* Increment the RTOS tick. */
	if( xTaskIncrementTick() != pdFALSE )
80000788:	3d9020ef          	jal	ra,80003360 <xTaskIncrementTick>
8000078c:	00050793          	mv	a5,a0
80000790:	00078463          	beqz	a5,80000798 <vPortSysTickHandler+0x24>
	{
		vTaskSwitchContext();
80000794:	671020ef          	jal	ra,80003604 <vTaskSwitchContext>
	}
}
80000798:	00000013          	nop
8000079c:	00c12083          	lw	ra,12(sp)
800007a0:	00812403          	lw	s0,8(sp)
800007a4:	01010113          	addi	sp,sp,16
800007a8:	00008067          	ret

800007ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
800007ac:	fe010113          	addi	sp,sp,-32
800007b0:	00812e23          	sw	s0,28(sp)
800007b4:	02010413          	addi	s0,sp,32
800007b8:	fea42623          	sw	a0,-20(s0)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
800007bc:	fec42783          	lw	a5,-20(s0)
800007c0:	00878713          	addi	a4,a5,8
800007c4:	fec42783          	lw	a5,-20(s0)
800007c8:	00e7a223          	sw	a4,4(a5)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
800007cc:	fec42783          	lw	a5,-20(s0)
800007d0:	fff00713          	li	a4,-1
800007d4:	00e7a423          	sw	a4,8(a5)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
800007d8:	fec42783          	lw	a5,-20(s0)
800007dc:	00878713          	addi	a4,a5,8
800007e0:	fec42783          	lw	a5,-20(s0)
800007e4:	00e7a623          	sw	a4,12(a5)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
800007e8:	fec42783          	lw	a5,-20(s0)
800007ec:	00878713          	addi	a4,a5,8
800007f0:	fec42783          	lw	a5,-20(s0)
800007f4:	00e7a823          	sw	a4,16(a5)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
800007f8:	fec42783          	lw	a5,-20(s0)
800007fc:	0007a023          	sw	zero,0(a5)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
80000800:	00000013          	nop
80000804:	01c12403          	lw	s0,28(sp)
80000808:	02010113          	addi	sp,sp,32
8000080c:	00008067          	ret

80000810 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
80000810:	fe010113          	addi	sp,sp,-32
80000814:	00812e23          	sw	s0,28(sp)
80000818:	02010413          	addi	s0,sp,32
8000081c:	fea42623          	sw	a0,-20(s0)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80000820:	fec42783          	lw	a5,-20(s0)
80000824:	0007a823          	sw	zero,16(a5)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
80000828:	00000013          	nop
8000082c:	01c12403          	lw	s0,28(sp)
80000830:	02010113          	addi	sp,sp,32
80000834:	00008067          	ret

80000838 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80000838:	fd010113          	addi	sp,sp,-48
8000083c:	02812623          	sw	s0,44(sp)
80000840:	03010413          	addi	s0,sp,48
80000844:	fca42e23          	sw	a0,-36(s0)
80000848:	fcb42c23          	sw	a1,-40(s0)
ListItem_t * const pxIndex = pxList->pxIndex;
8000084c:	fdc42783          	lw	a5,-36(s0)
80000850:	0047a783          	lw	a5,4(a5)
80000854:	fef42623          	sw	a5,-20(s0)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
80000858:	fd842783          	lw	a5,-40(s0)
8000085c:	fec42703          	lw	a4,-20(s0)
80000860:	00e7a223          	sw	a4,4(a5)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
80000864:	fec42783          	lw	a5,-20(s0)
80000868:	0087a703          	lw	a4,8(a5)
8000086c:	fd842783          	lw	a5,-40(s0)
80000870:	00e7a423          	sw	a4,8(a5)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
80000874:	fec42783          	lw	a5,-20(s0)
80000878:	0087a783          	lw	a5,8(a5)
8000087c:	fd842703          	lw	a4,-40(s0)
80000880:	00e7a223          	sw	a4,4(a5)
	pxIndex->pxPrevious = pxNewListItem;
80000884:	fec42783          	lw	a5,-20(s0)
80000888:	fd842703          	lw	a4,-40(s0)
8000088c:	00e7a423          	sw	a4,8(a5)

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80000890:	fd842783          	lw	a5,-40(s0)
80000894:	fdc42703          	lw	a4,-36(s0)
80000898:	00e7a823          	sw	a4,16(a5)

	( pxList->uxNumberOfItems )++;
8000089c:	fdc42783          	lw	a5,-36(s0)
800008a0:	0007a783          	lw	a5,0(a5)
800008a4:	00178713          	addi	a4,a5,1
800008a8:	fdc42783          	lw	a5,-36(s0)
800008ac:	00e7a023          	sw	a4,0(a5)
}
800008b0:	00000013          	nop
800008b4:	02c12403          	lw	s0,44(sp)
800008b8:	03010113          	addi	sp,sp,48
800008bc:	00008067          	ret

800008c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
800008c0:	fd010113          	addi	sp,sp,-48
800008c4:	02812623          	sw	s0,44(sp)
800008c8:	03010413          	addi	s0,sp,48
800008cc:	fca42e23          	sw	a0,-36(s0)
800008d0:	fcb42c23          	sw	a1,-40(s0)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
800008d4:	fd842783          	lw	a5,-40(s0)
800008d8:	0007a783          	lw	a5,0(a5)
800008dc:	fef42423          	sw	a5,-24(s0)
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
800008e0:	fe842703          	lw	a4,-24(s0)
800008e4:	fff00793          	li	a5,-1
800008e8:	00f71a63          	bne	a4,a5,800008fc <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
800008ec:	fdc42783          	lw	a5,-36(s0)
800008f0:	0107a783          	lw	a5,16(a5)
800008f4:	fef42623          	sw	a5,-20(s0)
800008f8:	0340006f          	j	8000092c <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
800008fc:	fdc42783          	lw	a5,-36(s0)
80000900:	00878793          	addi	a5,a5,8
80000904:	fef42623          	sw	a5,-20(s0)
80000908:	0100006f          	j	80000918 <vListInsert+0x58>
8000090c:	fec42783          	lw	a5,-20(s0)
80000910:	0047a783          	lw	a5,4(a5)
80000914:	fef42623          	sw	a5,-20(s0)
80000918:	fec42783          	lw	a5,-20(s0)
8000091c:	0047a783          	lw	a5,4(a5)
80000920:	0007a783          	lw	a5,0(a5)
80000924:	fe842703          	lw	a4,-24(s0)
80000928:	fef772e3          	bleu	a5,a4,8000090c <vListInsert+0x4c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
8000092c:	fec42783          	lw	a5,-20(s0)
80000930:	0047a703          	lw	a4,4(a5)
80000934:	fd842783          	lw	a5,-40(s0)
80000938:	00e7a223          	sw	a4,4(a5)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
8000093c:	fd842783          	lw	a5,-40(s0)
80000940:	0047a783          	lw	a5,4(a5)
80000944:	fd842703          	lw	a4,-40(s0)
80000948:	00e7a423          	sw	a4,8(a5)
	pxNewListItem->pxPrevious = pxIterator;
8000094c:	fd842783          	lw	a5,-40(s0)
80000950:	fec42703          	lw	a4,-20(s0)
80000954:	00e7a423          	sw	a4,8(a5)
	pxIterator->pxNext = pxNewListItem;
80000958:	fec42783          	lw	a5,-20(s0)
8000095c:	fd842703          	lw	a4,-40(s0)
80000960:	00e7a223          	sw	a4,4(a5)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80000964:	fd842783          	lw	a5,-40(s0)
80000968:	fdc42703          	lw	a4,-36(s0)
8000096c:	00e7a823          	sw	a4,16(a5)

	( pxList->uxNumberOfItems )++;
80000970:	fdc42783          	lw	a5,-36(s0)
80000974:	0007a783          	lw	a5,0(a5)
80000978:	00178713          	addi	a4,a5,1
8000097c:	fdc42783          	lw	a5,-36(s0)
80000980:	00e7a023          	sw	a4,0(a5)
}
80000984:	00000013          	nop
80000988:	02c12403          	lw	s0,44(sp)
8000098c:	03010113          	addi	sp,sp,48
80000990:	00008067          	ret

80000994 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
80000994:	fd010113          	addi	sp,sp,-48
80000998:	02812623          	sw	s0,44(sp)
8000099c:	03010413          	addi	s0,sp,48
800009a0:	fca42e23          	sw	a0,-36(s0)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
800009a4:	fdc42783          	lw	a5,-36(s0)
800009a8:	0107a783          	lw	a5,16(a5)
800009ac:	fef42623          	sw	a5,-20(s0)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
800009b0:	fdc42783          	lw	a5,-36(s0)
800009b4:	0047a783          	lw	a5,4(a5)
800009b8:	fdc42703          	lw	a4,-36(s0)
800009bc:	00872703          	lw	a4,8(a4)
800009c0:	00e7a423          	sw	a4,8(a5)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
800009c4:	fdc42783          	lw	a5,-36(s0)
800009c8:	0087a783          	lw	a5,8(a5)
800009cc:	fdc42703          	lw	a4,-36(s0)
800009d0:	00472703          	lw	a4,4(a4)
800009d4:	00e7a223          	sw	a4,4(a5)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
800009d8:	fec42783          	lw	a5,-20(s0)
800009dc:	0047a783          	lw	a5,4(a5)
800009e0:	fdc42703          	lw	a4,-36(s0)
800009e4:	00f71a63          	bne	a4,a5,800009f8 <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
800009e8:	fdc42783          	lw	a5,-36(s0)
800009ec:	0087a703          	lw	a4,8(a5)
800009f0:	fec42783          	lw	a5,-20(s0)
800009f4:	00e7a223          	sw	a4,4(a5)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
800009f8:	fdc42783          	lw	a5,-36(s0)
800009fc:	0007a823          	sw	zero,16(a5)
	( pxList->uxNumberOfItems )--;
80000a00:	fec42783          	lw	a5,-20(s0)
80000a04:	0007a783          	lw	a5,0(a5)
80000a08:	fff78713          	addi	a4,a5,-1
80000a0c:	fec42783          	lw	a5,-20(s0)
80000a10:	00e7a023          	sw	a4,0(a5)

	return pxList->uxNumberOfItems;
80000a14:	fec42783          	lw	a5,-20(s0)
80000a18:	0007a783          	lw	a5,0(a5)
}
80000a1c:	00078513          	mv	a0,a5
80000a20:	02c12403          	lw	s0,44(sp)
80000a24:	03010113          	addi	sp,sp,48
80000a28:	00008067          	ret

80000a2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
80000a2c:	fd010113          	addi	sp,sp,-48
80000a30:	02112623          	sw	ra,44(sp)
80000a34:	02812423          	sw	s0,40(sp)
80000a38:	03010413          	addi	s0,sp,48
80000a3c:	fca42e23          	sw	a0,-36(s0)
80000a40:	fcb42c23          	sw	a1,-40(s0)
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
80000a44:	fdc42783          	lw	a5,-36(s0)
80000a48:	fef42623          	sw	a5,-20(s0)

	configASSERT( pxQueue );
80000a4c:	fec42783          	lw	a5,-20(s0)
80000a50:	00079663          	bnez	a5,80000a5c <xQueueGenericReset+0x30>
80000a54:	30007073          	csrci	mstatus,0
80000a58:	0000006f          	j	80000a58 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
80000a5c:	781030ef          	jal	ra,800049dc <vTaskEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
80000a60:	fec42783          	lw	a5,-20(s0)
80000a64:	0007a703          	lw	a4,0(a5)
80000a68:	fec42783          	lw	a5,-20(s0)
80000a6c:	03c7a683          	lw	a3,60(a5)
80000a70:	fec42783          	lw	a5,-20(s0)
80000a74:	0407a783          	lw	a5,64(a5)
80000a78:	02f687b3          	mul	a5,a3,a5
80000a7c:	00f70733          	add	a4,a4,a5
80000a80:	fec42783          	lw	a5,-20(s0)
80000a84:	00e7a223          	sw	a4,4(a5)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
80000a88:	fec42783          	lw	a5,-20(s0)
80000a8c:	0207ac23          	sw	zero,56(a5)
		pxQueue->pcWriteTo = pxQueue->pcHead;
80000a90:	fec42783          	lw	a5,-20(s0)
80000a94:	0007a703          	lw	a4,0(a5)
80000a98:	fec42783          	lw	a5,-20(s0)
80000a9c:	00e7a423          	sw	a4,8(a5)
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
80000aa0:	fec42783          	lw	a5,-20(s0)
80000aa4:	0007a703          	lw	a4,0(a5)
80000aa8:	fec42783          	lw	a5,-20(s0)
80000aac:	03c7a783          	lw	a5,60(a5)
80000ab0:	fff78693          	addi	a3,a5,-1
80000ab4:	fec42783          	lw	a5,-20(s0)
80000ab8:	0407a783          	lw	a5,64(a5)
80000abc:	02f687b3          	mul	a5,a3,a5
80000ac0:	00f70733          	add	a4,a4,a5
80000ac4:	fec42783          	lw	a5,-20(s0)
80000ac8:	00e7a623          	sw	a4,12(a5)
		pxQueue->xRxLock = queueUNLOCKED;
80000acc:	fec42783          	lw	a5,-20(s0)
80000ad0:	fff00713          	li	a4,-1
80000ad4:	04e7a223          	sw	a4,68(a5)
		pxQueue->xTxLock = queueUNLOCKED;
80000ad8:	fec42783          	lw	a5,-20(s0)
80000adc:	fff00713          	li	a4,-1
80000ae0:	04e7a423          	sw	a4,72(a5)

		if( xNewQueue == pdFALSE )
80000ae4:	fd842783          	lw	a5,-40(s0)
80000ae8:	02079a63          	bnez	a5,80000b1c <xQueueGenericReset+0xf0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
80000aec:	fec42783          	lw	a5,-20(s0)
80000af0:	0107a783          	lw	a5,16(a5)
80000af4:	04078463          	beqz	a5,80000b3c <xQueueGenericReset+0x110>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
80000af8:	fec42783          	lw	a5,-20(s0)
80000afc:	01078793          	addi	a5,a5,16
80000b00:	00078513          	mv	a0,a5
80000b04:	74d020ef          	jal	ra,80003a50 <xTaskRemoveFromEventList>
80000b08:	00050713          	mv	a4,a0
80000b0c:	00100793          	li	a5,1
80000b10:	02f71663          	bne	a4,a5,80000b3c <xQueueGenericReset+0x110>
				{
					queueYIELD_IF_USING_PREEMPTION();
80000b14:	979ff0ef          	jal	ra,8000048c <vPortYield>
80000b18:	0240006f          	j	80000b3c <xQueueGenericReset+0x110>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
80000b1c:	fec42783          	lw	a5,-20(s0)
80000b20:	01078793          	addi	a5,a5,16
80000b24:	00078513          	mv	a0,a5
80000b28:	c85ff0ef          	jal	ra,800007ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
80000b2c:	fec42783          	lw	a5,-20(s0)
80000b30:	02478793          	addi	a5,a5,36
80000b34:	00078513          	mv	a0,a5
80000b38:	c75ff0ef          	jal	ra,800007ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
80000b3c:	6f5030ef          	jal	ra,80004a30 <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
80000b40:	00100793          	li	a5,1
}
80000b44:	00078513          	mv	a0,a5
80000b48:	02c12083          	lw	ra,44(sp)
80000b4c:	02812403          	lw	s0,40(sp)
80000b50:	03010113          	addi	sp,sp,48
80000b54:	00008067          	ret

80000b58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
80000b58:	fd010113          	addi	sp,sp,-48
80000b5c:	02112623          	sw	ra,44(sp)
80000b60:	02812423          	sw	s0,40(sp)
80000b64:	03010413          	addi	s0,sp,48
80000b68:	fca42e23          	sw	a0,-36(s0)
80000b6c:	fcb42c23          	sw	a1,-40(s0)
80000b70:	00060793          	mv	a5,a2
80000b74:	fcf40ba3          	sb	a5,-41(s0)
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
80000b78:	fe042423          	sw	zero,-24(s0)

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
80000b7c:	fdc42783          	lw	a5,-36(s0)
80000b80:	00079663          	bnez	a5,80000b8c <xQueueGenericCreate+0x34>
80000b84:	30007073          	csrci	mstatus,0
80000b88:	0000006f          	j	80000b88 <xQueueGenericCreate+0x30>

	if( uxItemSize == ( UBaseType_t ) 0 )
80000b8c:	fd842783          	lw	a5,-40(s0)
80000b90:	00079663          	bnez	a5,80000b9c <xQueueGenericCreate+0x44>
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
80000b94:	fe042623          	sw	zero,-20(s0)
80000b98:	0180006f          	j	80000bb0 <xQueueGenericCreate+0x58>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80000b9c:	fdc42703          	lw	a4,-36(s0)
80000ba0:	fd842783          	lw	a5,-40(s0)
80000ba4:	02f707b3          	mul	a5,a4,a5
80000ba8:	00178793          	addi	a5,a5,1
80000bac:	fef42623          	sw	a5,-20(s0)
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
80000bb0:	fec42783          	lw	a5,-20(s0)
80000bb4:	05478793          	addi	a5,a5,84
80000bb8:	00078513          	mv	a0,a5
80000bbc:	435050ef          	jal	ra,800067f0 <pvPortMalloc>
80000bc0:	fea42223          	sw	a0,-28(s0)

	if( pxNewQueue != NULL )
80000bc4:	fe442783          	lw	a5,-28(s0)
80000bc8:	06078263          	beqz	a5,80000c2c <xQueueGenericCreate+0xd4>
	{
		if( uxItemSize == ( UBaseType_t ) 0 )
80000bcc:	fd842783          	lw	a5,-40(s0)
80000bd0:	00079a63          	bnez	a5,80000be4 <xQueueGenericCreate+0x8c>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
80000bd4:	fe442783          	lw	a5,-28(s0)
80000bd8:	fe442703          	lw	a4,-28(s0)
80000bdc:	00e7a023          	sw	a4,0(a5)
80000be0:	0140006f          	j	80000bf4 <xQueueGenericCreate+0x9c>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
80000be4:	fe442783          	lw	a5,-28(s0)
80000be8:	05478713          	addi	a4,a5,84
80000bec:	fe442783          	lw	a5,-28(s0)
80000bf0:	00e7a023          	sw	a4,0(a5)
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
80000bf4:	fe442783          	lw	a5,-28(s0)
80000bf8:	fdc42703          	lw	a4,-36(s0)
80000bfc:	02e7ae23          	sw	a4,60(a5)
		pxNewQueue->uxItemSize = uxItemSize;
80000c00:	fe442783          	lw	a5,-28(s0)
80000c04:	fd842703          	lw	a4,-40(s0)
80000c08:	04e7a023          	sw	a4,64(a5)
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
80000c0c:	00100593          	li	a1,1
80000c10:	fe442503          	lw	a0,-28(s0)
80000c14:	e19ff0ef          	jal	ra,80000a2c <xQueueGenericReset>

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
80000c18:	fe442783          	lw	a5,-28(s0)
80000c1c:	fd744703          	lbu	a4,-41(s0)
80000c20:	04e78823          	sb	a4,80(a5)
			pxNewQueue->pxQueueSetContainer = NULL;
		}
		#endif /* configUSE_QUEUE_SETS */

		traceQUEUE_CREATE( pxNewQueue );
		xReturn = pxNewQueue;
80000c24:	fe442783          	lw	a5,-28(s0)
80000c28:	fef42423          	sw	a5,-24(s0)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
80000c2c:	fe842783          	lw	a5,-24(s0)
80000c30:	00079663          	bnez	a5,80000c3c <xQueueGenericCreate+0xe4>
80000c34:	30007073          	csrci	mstatus,0
80000c38:	0000006f          	j	80000c38 <xQueueGenericCreate+0xe0>

	return xReturn;
80000c3c:	fe842783          	lw	a5,-24(s0)
}
80000c40:	00078513          	mv	a0,a5
80000c44:	02c12083          	lw	ra,44(sp)
80000c48:	02812403          	lw	s0,40(sp)
80000c4c:	03010113          	addi	sp,sp,48
80000c50:	00008067          	ret

80000c54 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
80000c54:	fd010113          	addi	sp,sp,-48
80000c58:	02112623          	sw	ra,44(sp)
80000c5c:	02812423          	sw	s0,40(sp)
80000c60:	03010413          	addi	s0,sp,48
80000c64:	00050793          	mv	a5,a0
80000c68:	fcf40fa3          	sb	a5,-33(s0)
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
80000c6c:	05400513          	li	a0,84
80000c70:	381050ef          	jal	ra,800067f0 <pvPortMalloc>
80000c74:	fea42623          	sw	a0,-20(s0)
		if( pxNewQueue != NULL )
80000c78:	fec42783          	lw	a5,-20(s0)
80000c7c:	08078c63          	beqz	a5,80000d14 <xQueueCreateMutex+0xc0>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
80000c80:	fec42783          	lw	a5,-20(s0)
80000c84:	0007a223          	sw	zero,4(a5)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
80000c88:	fec42783          	lw	a5,-20(s0)
80000c8c:	0007a023          	sw	zero,0(a5)

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
80000c90:	fec42783          	lw	a5,-20(s0)
80000c94:	0007a423          	sw	zero,8(a5)
			pxNewQueue->u.pcReadFrom = NULL;
80000c98:	fec42783          	lw	a5,-20(s0)
80000c9c:	0007a623          	sw	zero,12(a5)

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
80000ca0:	fec42783          	lw	a5,-20(s0)
80000ca4:	0207ac23          	sw	zero,56(a5)
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
80000ca8:	fec42783          	lw	a5,-20(s0)
80000cac:	00100713          	li	a4,1
80000cb0:	02e7ae23          	sw	a4,60(a5)
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
80000cb4:	fec42783          	lw	a5,-20(s0)
80000cb8:	0407a023          	sw	zero,64(a5)
			pxNewQueue->xRxLock = queueUNLOCKED;
80000cbc:	fec42783          	lw	a5,-20(s0)
80000cc0:	fff00713          	li	a4,-1
80000cc4:	04e7a223          	sw	a4,68(a5)
			pxNewQueue->xTxLock = queueUNLOCKED;
80000cc8:	fec42783          	lw	a5,-20(s0)
80000ccc:	fff00713          	li	a4,-1
80000cd0:	04e7a423          	sw	a4,72(a5)

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
80000cd4:	fec42783          	lw	a5,-20(s0)
80000cd8:	fdf44703          	lbu	a4,-33(s0)
80000cdc:	04e78823          	sb	a4,80(a5)
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
80000ce0:	fec42783          	lw	a5,-20(s0)
80000ce4:	01078793          	addi	a5,a5,16
80000ce8:	00078513          	mv	a0,a5
80000cec:	ac1ff0ef          	jal	ra,800007ac <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
80000cf0:	fec42783          	lw	a5,-20(s0)
80000cf4:	02478793          	addi	a5,a5,36
80000cf8:	00078513          	mv	a0,a5
80000cfc:	ab1ff0ef          	jal	ra,800007ac <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
80000d00:	00000693          	li	a3,0
80000d04:	00000613          	li	a2,0
80000d08:	00000593          	li	a1,0
80000d0c:	fec42503          	lw	a0,-20(s0)
80000d10:	208000ef          	jal	ra,80000f18 <xQueueGenericSend>
		else
		{
			traceCREATE_MUTEX_FAILED();
		}

		return pxNewQueue;
80000d14:	fec42783          	lw	a5,-20(s0)
	}
80000d18:	00078513          	mv	a0,a5
80000d1c:	02c12083          	lw	ra,44(sp)
80000d20:	02812403          	lw	s0,40(sp)
80000d24:	03010113          	addi	sp,sp,48
80000d28:	00008067          	ret

80000d2c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
80000d2c:	fd010113          	addi	sp,sp,-48
80000d30:	02112623          	sw	ra,44(sp)
80000d34:	02812423          	sw	s0,40(sp)
80000d38:	02912223          	sw	s1,36(sp)
80000d3c:	03010413          	addi	s0,sp,48
80000d40:	fca42e23          	sw	a0,-36(s0)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
80000d44:	fdc42783          	lw	a5,-36(s0)
80000d48:	fef42423          	sw	a5,-24(s0)

		configASSERT( pxMutex );
80000d4c:	fe842783          	lw	a5,-24(s0)
80000d50:	00079663          	bnez	a5,80000d5c <xQueueGiveMutexRecursive+0x30>
80000d54:	30007073          	csrci	mstatus,0
80000d58:	0000006f          	j	80000d58 <xQueueGiveMutexRecursive+0x2c>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
80000d5c:	fe842783          	lw	a5,-24(s0)
80000d60:	0047a483          	lw	s1,4(a5)
80000d64:	13d030ef          	jal	ra,800046a0 <xTaskGetCurrentTaskHandle>
80000d68:	00050793          	mv	a5,a0
80000d6c:	04f49263          	bne	s1,a5,80000db0 <xQueueGiveMutexRecursive+0x84>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
80000d70:	fe842783          	lw	a5,-24(s0)
80000d74:	00c7a783          	lw	a5,12(a5)
80000d78:	fff78713          	addi	a4,a5,-1
80000d7c:	fe842783          	lw	a5,-24(s0)
80000d80:	00e7a623          	sw	a4,12(a5)

			/* Have we unwound the call count? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
80000d84:	fe842783          	lw	a5,-24(s0)
80000d88:	00c7a783          	lw	a5,12(a5)
80000d8c:	00079c63          	bnez	a5,80000da4 <xQueueGiveMutexRecursive+0x78>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
80000d90:	00000693          	li	a3,0
80000d94:	00000613          	li	a2,0
80000d98:	00000593          	li	a1,0
80000d9c:	fe842503          	lw	a0,-24(s0)
80000da0:	178000ef          	jal	ra,80000f18 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
80000da4:	00100793          	li	a5,1
80000da8:	fef42623          	sw	a5,-20(s0)
80000dac:	0080006f          	j	80000db4 <xQueueGiveMutexRecursive+0x88>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
80000db0:	fe042623          	sw	zero,-20(s0)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
80000db4:	fec42783          	lw	a5,-20(s0)
	}
80000db8:	00078513          	mv	a0,a5
80000dbc:	02c12083          	lw	ra,44(sp)
80000dc0:	02812403          	lw	s0,40(sp)
80000dc4:	02412483          	lw	s1,36(sp)
80000dc8:	03010113          	addi	sp,sp,48
80000dcc:	00008067          	ret

80000dd0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
80000dd0:	fd010113          	addi	sp,sp,-48
80000dd4:	02112623          	sw	ra,44(sp)
80000dd8:	02812423          	sw	s0,40(sp)
80000ddc:	02912223          	sw	s1,36(sp)
80000de0:	03010413          	addi	s0,sp,48
80000de4:	fca42e23          	sw	a0,-36(s0)
80000de8:	fcb42c23          	sw	a1,-40(s0)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
80000dec:	fdc42783          	lw	a5,-36(s0)
80000df0:	fef42423          	sw	a5,-24(s0)

		configASSERT( pxMutex );
80000df4:	fe842783          	lw	a5,-24(s0)
80000df8:	00079663          	bnez	a5,80000e04 <xQueueTakeMutexRecursive+0x34>
80000dfc:	30007073          	csrci	mstatus,0
80000e00:	0000006f          	j	80000e00 <xQueueTakeMutexRecursive+0x30>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
80000e04:	fe842783          	lw	a5,-24(s0)
80000e08:	0047a483          	lw	s1,4(a5)
80000e0c:	095030ef          	jal	ra,800046a0 <xTaskGetCurrentTaskHandle>
80000e10:	00050793          	mv	a5,a0
80000e14:	02f49263          	bne	s1,a5,80000e38 <xQueueTakeMutexRecursive+0x68>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
80000e18:	fe842783          	lw	a5,-24(s0)
80000e1c:	00c7a783          	lw	a5,12(a5)
80000e20:	00178713          	addi	a4,a5,1
80000e24:	fe842783          	lw	a5,-24(s0)
80000e28:	00e7a623          	sw	a4,12(a5)
			xReturn = pdPASS;
80000e2c:	00100793          	li	a5,1
80000e30:	fef42623          	sw	a5,-20(s0)
80000e34:	03c0006f          	j	80000e70 <xQueueTakeMutexRecursive+0xa0>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
80000e38:	00000693          	li	a3,0
80000e3c:	fd842603          	lw	a2,-40(s0)
80000e40:	00000593          	li	a1,0
80000e44:	fe842503          	lw	a0,-24(s0)
80000e48:	5c0000ef          	jal	ra,80001408 <xQueueGenericReceive>
80000e4c:	fea42623          	sw	a0,-20(s0)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn == pdPASS )
80000e50:	fec42703          	lw	a4,-20(s0)
80000e54:	00100793          	li	a5,1
80000e58:	00f71c63          	bne	a4,a5,80000e70 <xQueueTakeMutexRecursive+0xa0>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
80000e5c:	fe842783          	lw	a5,-24(s0)
80000e60:	00c7a783          	lw	a5,12(a5)
80000e64:	00178713          	addi	a4,a5,1
80000e68:	fe842783          	lw	a5,-24(s0)
80000e6c:	00e7a623          	sw	a4,12(a5)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
80000e70:	fec42783          	lw	a5,-20(s0)
	}
80000e74:	00078513          	mv	a0,a5
80000e78:	02c12083          	lw	ra,44(sp)
80000e7c:	02812403          	lw	s0,40(sp)
80000e80:	02412483          	lw	s1,36(sp)
80000e84:	03010113          	addi	sp,sp,48
80000e88:	00008067          	ret

80000e8c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
80000e8c:	fd010113          	addi	sp,sp,-48
80000e90:	02112623          	sw	ra,44(sp)
80000e94:	02812423          	sw	s0,40(sp)
80000e98:	03010413          	addi	s0,sp,48
80000e9c:	fca42e23          	sw	a0,-36(s0)
80000ea0:	fcb42c23          	sw	a1,-40(s0)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
80000ea4:	fdc42783          	lw	a5,-36(s0)
80000ea8:	00079663          	bnez	a5,80000eb4 <xQueueCreateCountingSemaphore+0x28>
80000eac:	30007073          	csrci	mstatus,0
80000eb0:	0000006f          	j	80000eb0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
80000eb4:	fd842703          	lw	a4,-40(s0)
80000eb8:	fdc42783          	lw	a5,-36(s0)
80000ebc:	00e7f663          	bleu	a4,a5,80000ec8 <xQueueCreateCountingSemaphore+0x3c>
80000ec0:	30007073          	csrci	mstatus,0
80000ec4:	0000006f          	j	80000ec4 <xQueueCreateCountingSemaphore+0x38>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
80000ec8:	00200613          	li	a2,2
80000ecc:	00000593          	li	a1,0
80000ed0:	fdc42503          	lw	a0,-36(s0)
80000ed4:	c85ff0ef          	jal	ra,80000b58 <xQueueGenericCreate>
80000ed8:	fea42623          	sw	a0,-20(s0)

		if( xHandle != NULL )
80000edc:	fec42783          	lw	a5,-20(s0)
80000ee0:	00078863          	beqz	a5,80000ef0 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
80000ee4:	fec42783          	lw	a5,-20(s0)
80000ee8:	fd842703          	lw	a4,-40(s0)
80000eec:	02e7ac23          	sw	a4,56(a5)
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( xHandle );
80000ef0:	fec42783          	lw	a5,-20(s0)
80000ef4:	00079663          	bnez	a5,80000f00 <xQueueCreateCountingSemaphore+0x74>
80000ef8:	30007073          	csrci	mstatus,0
80000efc:	0000006f          	j	80000efc <xQueueCreateCountingSemaphore+0x70>
		return xHandle;
80000f00:	fec42783          	lw	a5,-20(s0)
	}
80000f04:	00078513          	mv	a0,a5
80000f08:	02c12083          	lw	ra,44(sp)
80000f0c:	02812403          	lw	s0,40(sp)
80000f10:	03010113          	addi	sp,sp,48
80000f14:	00008067          	ret

80000f18 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
80000f18:	fc010113          	addi	sp,sp,-64
80000f1c:	02112e23          	sw	ra,60(sp)
80000f20:	02812c23          	sw	s0,56(sp)
80000f24:	04010413          	addi	s0,sp,64
80000f28:	fca42623          	sw	a0,-52(s0)
80000f2c:	fcb42423          	sw	a1,-56(s0)
80000f30:	fcc42223          	sw	a2,-60(s0)
80000f34:	fcd42023          	sw	a3,-64(s0)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
80000f38:	fe042623          	sw	zero,-20(s0)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
80000f3c:	fcc42783          	lw	a5,-52(s0)
80000f40:	fef42423          	sw	a5,-24(s0)

	configASSERT( pxQueue );
80000f44:	fe842783          	lw	a5,-24(s0)
80000f48:	00079663          	bnez	a5,80000f54 <xQueueGenericSend+0x3c>
80000f4c:	30007073          	csrci	mstatus,0
80000f50:	0000006f          	j	80000f50 <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
80000f54:	fc842783          	lw	a5,-56(s0)
80000f58:	00079863          	bnez	a5,80000f68 <xQueueGenericSend+0x50>
80000f5c:	fe842783          	lw	a5,-24(s0)
80000f60:	0407a783          	lw	a5,64(a5)
80000f64:	00079663          	bnez	a5,80000f70 <xQueueGenericSend+0x58>
80000f68:	00100793          	li	a5,1
80000f6c:	0080006f          	j	80000f74 <xQueueGenericSend+0x5c>
80000f70:	00000793          	li	a5,0
80000f74:	00079663          	bnez	a5,80000f80 <xQueueGenericSend+0x68>
80000f78:	30007073          	csrci	mstatus,0
80000f7c:	0000006f          	j	80000f7c <xQueueGenericSend+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
80000f80:	fc042703          	lw	a4,-64(s0)
80000f84:	00200793          	li	a5,2
80000f88:	00f71a63          	bne	a4,a5,80000f9c <xQueueGenericSend+0x84>
80000f8c:	fe842783          	lw	a5,-24(s0)
80000f90:	03c7a703          	lw	a4,60(a5)
80000f94:	00100793          	li	a5,1
80000f98:	00f71663          	bne	a4,a5,80000fa4 <xQueueGenericSend+0x8c>
80000f9c:	00100793          	li	a5,1
80000fa0:	0080006f          	j	80000fa8 <xQueueGenericSend+0x90>
80000fa4:	00000793          	li	a5,0
80000fa8:	00079663          	bnez	a5,80000fb4 <xQueueGenericSend+0x9c>
80000fac:	30007073          	csrci	mstatus,0
80000fb0:	0000006f          	j	80000fb0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
80000fb4:	71c030ef          	jal	ra,800046d0 <xTaskGetSchedulerState>
80000fb8:	00050793          	mv	a5,a0
80000fbc:	00079663          	bnez	a5,80000fc8 <xQueueGenericSend+0xb0>
80000fc0:	fc442783          	lw	a5,-60(s0)
80000fc4:	00079663          	bnez	a5,80000fd0 <xQueueGenericSend+0xb8>
80000fc8:	00100793          	li	a5,1
80000fcc:	0080006f          	j	80000fd4 <xQueueGenericSend+0xbc>
80000fd0:	00000793          	li	a5,0
80000fd4:	00079663          	bnez	a5,80000fe0 <xQueueGenericSend+0xc8>
80000fd8:	30007073          	csrci	mstatus,0
80000fdc:	0000006f          	j	80000fdc <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
80000fe0:	1fd030ef          	jal	ra,800049dc <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
80000fe4:	fe842783          	lw	a5,-24(s0)
80000fe8:	0387a703          	lw	a4,56(a5)
80000fec:	fe842783          	lw	a5,-24(s0)
80000ff0:	03c7a783          	lw	a5,60(a5)
80000ff4:	00f76863          	bltu	a4,a5,80001004 <xQueueGenericSend+0xec>
80000ff8:	fc042703          	lw	a4,-64(s0)
80000ffc:	00200793          	li	a5,2
80001000:	06f71063          	bne	a4,a5,80001060 <xQueueGenericSend+0x148>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
80001004:	fc042603          	lw	a2,-64(s0)
80001008:	fc842583          	lw	a1,-56(s0)
8000100c:	fe842503          	lw	a0,-24(s0)
80001010:	255000ef          	jal	ra,80001a64 <prvCopyDataToQueue>
80001014:	fea42223          	sw	a0,-28(s0)
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80001018:	fe842783          	lw	a5,-24(s0)
8000101c:	0247a783          	lw	a5,36(a5)
80001020:	02078463          	beqz	a5,80001048 <xQueueGenericSend+0x130>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
80001024:	fe842783          	lw	a5,-24(s0)
80001028:	02478793          	addi	a5,a5,36
8000102c:	00078513          	mv	a0,a5
80001030:	221020ef          	jal	ra,80003a50 <xTaskRemoveFromEventList>
80001034:	00050713          	mv	a4,a0
80001038:	00100793          	li	a5,1
8000103c:	00f71c63          	bne	a4,a5,80001054 <xQueueGenericSend+0x13c>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
80001040:	c4cff0ef          	jal	ra,8000048c <vPortYield>
80001044:	0100006f          	j	80001054 <xQueueGenericSend+0x13c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
80001048:	fe442783          	lw	a5,-28(s0)
8000104c:	00078463          	beqz	a5,80001054 <xQueueGenericSend+0x13c>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
80001050:	c3cff0ef          	jal	ra,8000048c <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
80001054:	1dd030ef          	jal	ra,80004a30 <vTaskExitCritical>
				return pdPASS;
80001058:	00100793          	li	a5,1
8000105c:	0f40006f          	j	80001150 <xQueueGenericSend+0x238>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
80001060:	fc442783          	lw	a5,-60(s0)
80001064:	00079863          	bnez	a5,80001074 <xQueueGenericSend+0x15c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
80001068:	1c9030ef          	jal	ra,80004a30 <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
8000106c:	00000793          	li	a5,0
80001070:	0e00006f          	j	80001150 <xQueueGenericSend+0x238>
				}
				else if( xEntryTimeSet == pdFALSE )
80001074:	fec42783          	lw	a5,-20(s0)
80001078:	00079c63          	bnez	a5,80001090 <xQueueGenericSend+0x178>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
8000107c:	fdc40793          	addi	a5,s0,-36
80001080:	00078513          	mv	a0,a5
80001084:	435020ef          	jal	ra,80003cb8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
80001088:	00100793          	li	a5,1
8000108c:	fef42623          	sw	a5,-20(s0)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
80001090:	1a1030ef          	jal	ra,80004a30 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
80001094:	651010ef          	jal	ra,80002ee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
80001098:	145030ef          	jal	ra,800049dc <vTaskEnterCritical>
8000109c:	fe842783          	lw	a5,-24(s0)
800010a0:	0447a703          	lw	a4,68(a5)
800010a4:	fff00793          	li	a5,-1
800010a8:	00f71663          	bne	a4,a5,800010b4 <xQueueGenericSend+0x19c>
800010ac:	fe842783          	lw	a5,-24(s0)
800010b0:	0407a223          	sw	zero,68(a5)
800010b4:	fe842783          	lw	a5,-24(s0)
800010b8:	0487a703          	lw	a4,72(a5)
800010bc:	fff00793          	li	a5,-1
800010c0:	00f71663          	bne	a4,a5,800010cc <xQueueGenericSend+0x1b4>
800010c4:	fe842783          	lw	a5,-24(s0)
800010c8:	0407a423          	sw	zero,72(a5)
800010cc:	165030ef          	jal	ra,80004a30 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
800010d0:	fc440713          	addi	a4,s0,-60
800010d4:	fdc40793          	addi	a5,s0,-36
800010d8:	00070593          	mv	a1,a4
800010dc:	00078513          	mv	a0,a5
800010e0:	431020ef          	jal	ra,80003d10 <xTaskCheckForTimeOut>
800010e4:	00050793          	mv	a5,a0
800010e8:	04079c63          	bnez	a5,80001140 <xQueueGenericSend+0x228>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
800010ec:	fe842503          	lw	a0,-24(s0)
800010f0:	535000ef          	jal	ra,80001e24 <prvIsQueueFull>
800010f4:	00050793          	mv	a5,a0
800010f8:	02078c63          	beqz	a5,80001130 <xQueueGenericSend+0x218>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
800010fc:	fe842783          	lw	a5,-24(s0)
80001100:	01078793          	addi	a5,a5,16
80001104:	fc442703          	lw	a4,-60(s0)
80001108:	00070593          	mv	a1,a4
8000110c:	00078513          	mv	a0,a5
80001110:	6c4020ef          	jal	ra,800037d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
80001114:	fe842503          	lw	a0,-24(s0)
80001118:	375000ef          	jal	ra,80001c8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
8000111c:	601010ef          	jal	ra,80002f1c <xTaskResumeAll>
80001120:	00050793          	mv	a5,a0
80001124:	ea079ee3          	bnez	a5,80000fe0 <xQueueGenericSend+0xc8>
				{
					portYIELD_WITHIN_API();
80001128:	b64ff0ef          	jal	ra,8000048c <vPortYield>
8000112c:	eb5ff06f          	j	80000fe0 <xQueueGenericSend+0xc8>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
80001130:	fe842503          	lw	a0,-24(s0)
80001134:	359000ef          	jal	ra,80001c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
80001138:	5e5010ef          	jal	ra,80002f1c <xTaskResumeAll>
8000113c:	ea5ff06f          	j	80000fe0 <xQueueGenericSend+0xc8>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
80001140:	fe842503          	lw	a0,-24(s0)
80001144:	349000ef          	jal	ra,80001c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
80001148:	5d5010ef          	jal	ra,80002f1c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
8000114c:	00000793          	li	a5,0
		}
	}
}
80001150:	00078513          	mv	a0,a5
80001154:	03c12083          	lw	ra,60(sp)
80001158:	03812403          	lw	s0,56(sp)
8000115c:	04010113          	addi	sp,sp,64
80001160:	00008067          	ret

80001164 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
80001164:	fd010113          	addi	sp,sp,-48
80001168:	02112623          	sw	ra,44(sp)
8000116c:	02812423          	sw	s0,40(sp)
80001170:	03010413          	addi	s0,sp,48
80001174:	fca42e23          	sw	a0,-36(s0)
80001178:	fcb42c23          	sw	a1,-40(s0)
8000117c:	fcc42a23          	sw	a2,-44(s0)
80001180:	fcd42823          	sw	a3,-48(s0)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
80001184:	fdc42783          	lw	a5,-36(s0)
80001188:	fef42423          	sw	a5,-24(s0)

	configASSERT( pxQueue );
8000118c:	fe842783          	lw	a5,-24(s0)
80001190:	00079663          	bnez	a5,8000119c <xQueueGenericSendFromISR+0x38>
80001194:	30007073          	csrci	mstatus,0
80001198:	0000006f          	j	80001198 <xQueueGenericSendFromISR+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
8000119c:	fd842783          	lw	a5,-40(s0)
800011a0:	00079863          	bnez	a5,800011b0 <xQueueGenericSendFromISR+0x4c>
800011a4:	fe842783          	lw	a5,-24(s0)
800011a8:	0407a783          	lw	a5,64(a5)
800011ac:	00079663          	bnez	a5,800011b8 <xQueueGenericSendFromISR+0x54>
800011b0:	00100793          	li	a5,1
800011b4:	0080006f          	j	800011bc <xQueueGenericSendFromISR+0x58>
800011b8:	00000793          	li	a5,0
800011bc:	00079663          	bnez	a5,800011c8 <xQueueGenericSendFromISR+0x64>
800011c0:	30007073          	csrci	mstatus,0
800011c4:	0000006f          	j	800011c4 <xQueueGenericSendFromISR+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
800011c8:	fd042703          	lw	a4,-48(s0)
800011cc:	00200793          	li	a5,2
800011d0:	00f71a63          	bne	a4,a5,800011e4 <xQueueGenericSendFromISR+0x80>
800011d4:	fe842783          	lw	a5,-24(s0)
800011d8:	03c7a703          	lw	a4,60(a5)
800011dc:	00100793          	li	a5,1
800011e0:	00f71663          	bne	a4,a5,800011ec <xQueueGenericSendFromISR+0x88>
800011e4:	00100793          	li	a5,1
800011e8:	0080006f          	j	800011f0 <xQueueGenericSendFromISR+0x8c>
800011ec:	00000793          	li	a5,0
800011f0:	00079663          	bnez	a5,800011fc <xQueueGenericSendFromISR+0x98>
800011f4:	30007073          	csrci	mstatus,0
800011f8:	0000006f          	j	800011f8 <xQueueGenericSendFromISR+0x94>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
800011fc:	cb8ff0ef          	jal	ra,800006b4 <vPortSetInterruptMask>
80001200:	00050793          	mv	a5,a0
80001204:	fef42223          	sw	a5,-28(s0)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
80001208:	fe842783          	lw	a5,-24(s0)
8000120c:	0387a703          	lw	a4,56(a5)
80001210:	fe842783          	lw	a5,-24(s0)
80001214:	03c7a783          	lw	a5,60(a5)
80001218:	00f76863          	bltu	a4,a5,80001228 <xQueueGenericSendFromISR+0xc4>
8000121c:	fd042703          	lw	a4,-48(s0)
80001220:	00200793          	li	a5,2
80001224:	08f71063          	bne	a4,a5,800012a4 <xQueueGenericSendFromISR+0x140>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
80001228:	fd042603          	lw	a2,-48(s0)
8000122c:	fd842583          	lw	a1,-40(s0)
80001230:	fe842503          	lw	a0,-24(s0)
80001234:	031000ef          	jal	ra,80001a64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
80001238:	fe842783          	lw	a5,-24(s0)
8000123c:	0487a703          	lw	a4,72(a5)
80001240:	fff00793          	li	a5,-1
80001244:	04f71063          	bne	a4,a5,80001284 <xQueueGenericSendFromISR+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80001248:	fe842783          	lw	a5,-24(s0)
8000124c:	0247a783          	lw	a5,36(a5)
80001250:	04078463          	beqz	a5,80001298 <xQueueGenericSendFromISR+0x134>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80001254:	fe842783          	lw	a5,-24(s0)
80001258:	02478793          	addi	a5,a5,36
8000125c:	00078513          	mv	a0,a5
80001260:	7f0020ef          	jal	ra,80003a50 <xTaskRemoveFromEventList>
80001264:	00050793          	mv	a5,a0
80001268:	02078863          	beqz	a5,80001298 <xQueueGenericSendFromISR+0x134>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
8000126c:	fd442783          	lw	a5,-44(s0)
80001270:	02078463          	beqz	a5,80001298 <xQueueGenericSendFromISR+0x134>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
80001274:	fd442783          	lw	a5,-44(s0)
80001278:	00100713          	li	a4,1
8000127c:	00e7a023          	sw	a4,0(a5)
80001280:	0180006f          	j	80001298 <xQueueGenericSendFromISR+0x134>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
80001284:	fe842783          	lw	a5,-24(s0)
80001288:	0487a783          	lw	a5,72(a5)
8000128c:	00178713          	addi	a4,a5,1
80001290:	fe842783          	lw	a5,-24(s0)
80001294:	04e7a423          	sw	a4,72(a5)
			}

			xReturn = pdPASS;
80001298:	00100793          	li	a5,1
8000129c:	fef42623          	sw	a5,-20(s0)
800012a0:	0080006f          	j	800012a8 <xQueueGenericSendFromISR+0x144>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
800012a4:	fe042623          	sw	zero,-20(s0)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
800012a8:	fe442783          	lw	a5,-28(s0)
800012ac:	00078513          	mv	a0,a5
800012b0:	bdcff0ef          	jal	ra,8000068c <vPortClearInterruptMask>

	return xReturn;
800012b4:	fec42783          	lw	a5,-20(s0)
}
800012b8:	00078513          	mv	a0,a5
800012bc:	02c12083          	lw	ra,44(sp)
800012c0:	02812403          	lw	s0,40(sp)
800012c4:	03010113          	addi	sp,sp,48
800012c8:	00008067          	ret

800012cc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
800012cc:	fd010113          	addi	sp,sp,-48
800012d0:	02112623          	sw	ra,44(sp)
800012d4:	02812423          	sw	s0,40(sp)
800012d8:	03010413          	addi	s0,sp,48
800012dc:	fca42e23          	sw	a0,-36(s0)
800012e0:	fcb42c23          	sw	a1,-40(s0)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
800012e4:	fdc42783          	lw	a5,-36(s0)
800012e8:	fef42423          	sw	a5,-24(s0)
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
800012ec:	fe842783          	lw	a5,-24(s0)
800012f0:	00079663          	bnez	a5,800012fc <xQueueGiveFromISR+0x30>
800012f4:	30007073          	csrci	mstatus,0
800012f8:	0000006f          	j	800012f8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
800012fc:	fe842783          	lw	a5,-24(s0)
80001300:	0407a783          	lw	a5,64(a5)
80001304:	00078663          	beqz	a5,80001310 <xQueueGiveFromISR+0x44>
80001308:	30007073          	csrci	mstatus,0
8000130c:	0000006f          	j	8000130c <xQueueGiveFromISR+0x40>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
80001310:	fe842783          	lw	a5,-24(s0)
80001314:	0007a783          	lw	a5,0(a5)
80001318:	00079863          	bnez	a5,80001328 <xQueueGiveFromISR+0x5c>
8000131c:	fe842783          	lw	a5,-24(s0)
80001320:	0047a783          	lw	a5,4(a5)
80001324:	00079663          	bnez	a5,80001330 <xQueueGiveFromISR+0x64>
80001328:	00100793          	li	a5,1
8000132c:	0080006f          	j	80001334 <xQueueGiveFromISR+0x68>
80001330:	00000793          	li	a5,0
80001334:	00079663          	bnez	a5,80001340 <xQueueGiveFromISR+0x74>
80001338:	30007073          	csrci	mstatus,0
8000133c:	0000006f          	j	8000133c <xQueueGiveFromISR+0x70>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80001340:	b74ff0ef          	jal	ra,800006b4 <vPortSetInterruptMask>
80001344:	00050793          	mv	a5,a0
80001348:	fef42223          	sw	a5,-28(s0)
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
8000134c:	fe842783          	lw	a5,-24(s0)
80001350:	0387a703          	lw	a4,56(a5)
80001354:	fe842783          	lw	a5,-24(s0)
80001358:	03c7a783          	lw	a5,60(a5)
8000135c:	08f77263          	bleu	a5,a4,800013e0 <xQueueGiveFromISR+0x114>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
80001360:	fe842783          	lw	a5,-24(s0)
80001364:	0387a783          	lw	a5,56(a5)
80001368:	00178713          	addi	a4,a5,1
8000136c:	fe842783          	lw	a5,-24(s0)
80001370:	02e7ac23          	sw	a4,56(a5)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
80001374:	fe842783          	lw	a5,-24(s0)
80001378:	0487a703          	lw	a4,72(a5)
8000137c:	fff00793          	li	a5,-1
80001380:	04f71063          	bne	a4,a5,800013c0 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80001384:	fe842783          	lw	a5,-24(s0)
80001388:	0247a783          	lw	a5,36(a5)
8000138c:	04078463          	beqz	a5,800013d4 <xQueueGiveFromISR+0x108>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80001390:	fe842783          	lw	a5,-24(s0)
80001394:	02478793          	addi	a5,a5,36
80001398:	00078513          	mv	a0,a5
8000139c:	6b4020ef          	jal	ra,80003a50 <xTaskRemoveFromEventList>
800013a0:	00050793          	mv	a5,a0
800013a4:	02078863          	beqz	a5,800013d4 <xQueueGiveFromISR+0x108>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
800013a8:	fd842783          	lw	a5,-40(s0)
800013ac:	02078463          	beqz	a5,800013d4 <xQueueGiveFromISR+0x108>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
800013b0:	fd842783          	lw	a5,-40(s0)
800013b4:	00100713          	li	a4,1
800013b8:	00e7a023          	sw	a4,0(a5)
800013bc:	0180006f          	j	800013d4 <xQueueGiveFromISR+0x108>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
800013c0:	fe842783          	lw	a5,-24(s0)
800013c4:	0487a783          	lw	a5,72(a5)
800013c8:	00178713          	addi	a4,a5,1
800013cc:	fe842783          	lw	a5,-24(s0)
800013d0:	04e7a423          	sw	a4,72(a5)
			}

			xReturn = pdPASS;
800013d4:	00100793          	li	a5,1
800013d8:	fef42623          	sw	a5,-20(s0)
800013dc:	0080006f          	j	800013e4 <xQueueGiveFromISR+0x118>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
800013e0:	fe042623          	sw	zero,-20(s0)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
800013e4:	fe442783          	lw	a5,-28(s0)
800013e8:	00078513          	mv	a0,a5
800013ec:	aa0ff0ef          	jal	ra,8000068c <vPortClearInterruptMask>

	return xReturn;
800013f0:	fec42783          	lw	a5,-20(s0)
}
800013f4:	00078513          	mv	a0,a5
800013f8:	02c12083          	lw	ra,44(sp)
800013fc:	02812403          	lw	s0,40(sp)
80001400:	03010113          	addi	sp,sp,48
80001404:	00008067          	ret

80001408 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
80001408:	fc010113          	addi	sp,sp,-64
8000140c:	02112e23          	sw	ra,60(sp)
80001410:	02812c23          	sw	s0,56(sp)
80001414:	04010413          	addi	s0,sp,64
80001418:	fca42623          	sw	a0,-52(s0)
8000141c:	fcb42423          	sw	a1,-56(s0)
80001420:	fcc42223          	sw	a2,-60(s0)
80001424:	fcd42023          	sw	a3,-64(s0)
BaseType_t xEntryTimeSet = pdFALSE;
80001428:	fe042623          	sw	zero,-20(s0)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
8000142c:	fcc42783          	lw	a5,-52(s0)
80001430:	fef42423          	sw	a5,-24(s0)

	configASSERT( pxQueue );
80001434:	fe842783          	lw	a5,-24(s0)
80001438:	00079663          	bnez	a5,80001444 <xQueueGenericReceive+0x3c>
8000143c:	30007073          	csrci	mstatus,0
80001440:	0000006f          	j	80001440 <xQueueGenericReceive+0x38>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
80001444:	fc842783          	lw	a5,-56(s0)
80001448:	00079863          	bnez	a5,80001458 <xQueueGenericReceive+0x50>
8000144c:	fe842783          	lw	a5,-24(s0)
80001450:	0407a783          	lw	a5,64(a5)
80001454:	00079663          	bnez	a5,80001460 <xQueueGenericReceive+0x58>
80001458:	00100793          	li	a5,1
8000145c:	0080006f          	j	80001464 <xQueueGenericReceive+0x5c>
80001460:	00000793          	li	a5,0
80001464:	00079663          	bnez	a5,80001470 <xQueueGenericReceive+0x68>
80001468:	30007073          	csrci	mstatus,0
8000146c:	0000006f          	j	8000146c <xQueueGenericReceive+0x64>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
80001470:	260030ef          	jal	ra,800046d0 <xTaskGetSchedulerState>
80001474:	00050793          	mv	a5,a0
80001478:	00079663          	bnez	a5,80001484 <xQueueGenericReceive+0x7c>
8000147c:	fc442783          	lw	a5,-60(s0)
80001480:	00079663          	bnez	a5,8000148c <xQueueGenericReceive+0x84>
80001484:	00100793          	li	a5,1
80001488:	0080006f          	j	80001490 <xQueueGenericReceive+0x88>
8000148c:	00000793          	li	a5,0
80001490:	00079663          	bnez	a5,8000149c <xQueueGenericReceive+0x94>
80001494:	30007073          	csrci	mstatus,0
80001498:	0000006f          	j	80001498 <xQueueGenericReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
8000149c:	540030ef          	jal	ra,800049dc <vTaskEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
800014a0:	fe842783          	lw	a5,-24(s0)
800014a4:	0387a783          	lw	a5,56(a5)
800014a8:	0c078263          	beqz	a5,8000156c <xQueueGenericReceive+0x164>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
800014ac:	fe842783          	lw	a5,-24(s0)
800014b0:	00c7a783          	lw	a5,12(a5)
800014b4:	fef42223          	sw	a5,-28(s0)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
800014b8:	fc842583          	lw	a1,-56(s0)
800014bc:	fe842503          	lw	a0,-24(s0)
800014c0:	734000ef          	jal	ra,80001bf4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
800014c4:	fc042783          	lw	a5,-64(s0)
800014c8:	06079263          	bnez	a5,8000152c <xQueueGenericReceive+0x124>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
800014cc:	fe842783          	lw	a5,-24(s0)
800014d0:	0387a783          	lw	a5,56(a5)
800014d4:	fff78713          	addi	a4,a5,-1
800014d8:	fe842783          	lw	a5,-24(s0)
800014dc:	02e7ac23          	sw	a4,56(a5)

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
800014e0:	fe842783          	lw	a5,-24(s0)
800014e4:	0007a783          	lw	a5,0(a5)
800014e8:	00079a63          	bnez	a5,800014fc <xQueueGenericReceive+0xf4>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
800014ec:	610030ef          	jal	ra,80004afc <pvTaskIncrementMutexHeldCount>
800014f0:	00050713          	mv	a4,a0
800014f4:	fe842783          	lw	a5,-24(s0)
800014f8:	00e7a223          	sw	a4,4(a5)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
800014fc:	fe842783          	lw	a5,-24(s0)
80001500:	0107a783          	lw	a5,16(a5)
80001504:	04078e63          	beqz	a5,80001560 <xQueueGenericReceive+0x158>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
80001508:	fe842783          	lw	a5,-24(s0)
8000150c:	01078793          	addi	a5,a5,16
80001510:	00078513          	mv	a0,a5
80001514:	53c020ef          	jal	ra,80003a50 <xTaskRemoveFromEventList>
80001518:	00050713          	mv	a4,a0
8000151c:	00100793          	li	a5,1
80001520:	04f71063          	bne	a4,a5,80001560 <xQueueGenericReceive+0x158>
						{
							queueYIELD_IF_USING_PREEMPTION();
80001524:	f69fe0ef          	jal	ra,8000048c <vPortYield>
80001528:	0380006f          	j	80001560 <xQueueGenericReceive+0x158>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
8000152c:	fe842783          	lw	a5,-24(s0)
80001530:	fe442703          	lw	a4,-28(s0)
80001534:	00e7a623          	sw	a4,12(a5)

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80001538:	fe842783          	lw	a5,-24(s0)
8000153c:	0247a783          	lw	a5,36(a5)
80001540:	02078063          	beqz	a5,80001560 <xQueueGenericReceive+0x158>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80001544:	fe842783          	lw	a5,-24(s0)
80001548:	02478793          	addi	a5,a5,36
8000154c:	00078513          	mv	a0,a5
80001550:	500020ef          	jal	ra,80003a50 <xTaskRemoveFromEventList>
80001554:	00050793          	mv	a5,a0
80001558:	00078463          	beqz	a5,80001560 <xQueueGenericReceive+0x158>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
8000155c:	f31fe0ef          	jal	ra,8000048c <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
80001560:	4d0030ef          	jal	ra,80004a30 <vTaskExitCritical>
				return pdPASS;
80001564:	00100793          	li	a5,1
80001568:	1180006f          	j	80001680 <xQueueGenericReceive+0x278>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
8000156c:	fc442783          	lw	a5,-60(s0)
80001570:	00079863          	bnez	a5,80001580 <xQueueGenericReceive+0x178>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
80001574:	4bc030ef          	jal	ra,80004a30 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
80001578:	00000793          	li	a5,0
8000157c:	1040006f          	j	80001680 <xQueueGenericReceive+0x278>
				}
				else if( xEntryTimeSet == pdFALSE )
80001580:	fec42783          	lw	a5,-20(s0)
80001584:	00079c63          	bnez	a5,8000159c <xQueueGenericReceive+0x194>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
80001588:	fdc40793          	addi	a5,s0,-36
8000158c:	00078513          	mv	a0,a5
80001590:	728020ef          	jal	ra,80003cb8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
80001594:	00100793          	li	a5,1
80001598:	fef42623          	sw	a5,-20(s0)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
8000159c:	494030ef          	jal	ra,80004a30 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
800015a0:	145010ef          	jal	ra,80002ee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
800015a4:	438030ef          	jal	ra,800049dc <vTaskEnterCritical>
800015a8:	fe842783          	lw	a5,-24(s0)
800015ac:	0447a703          	lw	a4,68(a5)
800015b0:	fff00793          	li	a5,-1
800015b4:	00f71663          	bne	a4,a5,800015c0 <xQueueGenericReceive+0x1b8>
800015b8:	fe842783          	lw	a5,-24(s0)
800015bc:	0407a223          	sw	zero,68(a5)
800015c0:	fe842783          	lw	a5,-24(s0)
800015c4:	0487a703          	lw	a4,72(a5)
800015c8:	fff00793          	li	a5,-1
800015cc:	00f71663          	bne	a4,a5,800015d8 <xQueueGenericReceive+0x1d0>
800015d0:	fe842783          	lw	a5,-24(s0)
800015d4:	0407a423          	sw	zero,72(a5)
800015d8:	458030ef          	jal	ra,80004a30 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
800015dc:	fc440713          	addi	a4,s0,-60
800015e0:	fdc40793          	addi	a5,s0,-36
800015e4:	00070593          	mv	a1,a4
800015e8:	00078513          	mv	a0,a5
800015ec:	724020ef          	jal	ra,80003d10 <xTaskCheckForTimeOut>
800015f0:	00050793          	mv	a5,a0
800015f4:	06079e63          	bnez	a5,80001670 <xQueueGenericReceive+0x268>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
800015f8:	fe842503          	lw	a0,-24(s0)
800015fc:	788000ef          	jal	ra,80001d84 <prvIsQueueEmpty>
80001600:	00050793          	mv	a5,a0
80001604:	04078e63          	beqz	a5,80001660 <xQueueGenericReceive+0x258>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
80001608:	fe842783          	lw	a5,-24(s0)
8000160c:	0007a783          	lw	a5,0(a5)
80001610:	00079e63          	bnez	a5,8000162c <xQueueGenericReceive+0x224>
					{
						taskENTER_CRITICAL();
80001614:	3c8030ef          	jal	ra,800049dc <vTaskEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
80001618:	fe842783          	lw	a5,-24(s0)
8000161c:	0047a783          	lw	a5,4(a5)
80001620:	00078513          	mv	a0,a5
80001624:	108030ef          	jal	ra,8000472c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
80001628:	408030ef          	jal	ra,80004a30 <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
8000162c:	fe842783          	lw	a5,-24(s0)
80001630:	02478793          	addi	a5,a5,36
80001634:	fc442703          	lw	a4,-60(s0)
80001638:	00070593          	mv	a1,a4
8000163c:	00078513          	mv	a0,a5
80001640:	194020ef          	jal	ra,800037d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
80001644:	fe842503          	lw	a0,-24(s0)
80001648:	644000ef          	jal	ra,80001c8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
8000164c:	0d1010ef          	jal	ra,80002f1c <xTaskResumeAll>
80001650:	00050793          	mv	a5,a0
80001654:	e40794e3          	bnez	a5,8000149c <xQueueGenericReceive+0x94>
				{
					portYIELD_WITHIN_API();
80001658:	e35fe0ef          	jal	ra,8000048c <vPortYield>
8000165c:	e41ff06f          	j	8000149c <xQueueGenericReceive+0x94>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
80001660:	fe842503          	lw	a0,-24(s0)
80001664:	628000ef          	jal	ra,80001c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
80001668:	0b5010ef          	jal	ra,80002f1c <xTaskResumeAll>
8000166c:	e31ff06f          	j	8000149c <xQueueGenericReceive+0x94>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
80001670:	fe842503          	lw	a0,-24(s0)
80001674:	618000ef          	jal	ra,80001c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
80001678:	0a5010ef          	jal	ra,80002f1c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
8000167c:	00000793          	li	a5,0
		}
	}
}
80001680:	00078513          	mv	a0,a5
80001684:	03c12083          	lw	ra,60(sp)
80001688:	03812403          	lw	s0,56(sp)
8000168c:	04010113          	addi	sp,sp,64
80001690:	00008067          	ret

80001694 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
80001694:	fd010113          	addi	sp,sp,-48
80001698:	02112623          	sw	ra,44(sp)
8000169c:	02812423          	sw	s0,40(sp)
800016a0:	03010413          	addi	s0,sp,48
800016a4:	fca42e23          	sw	a0,-36(s0)
800016a8:	fcb42c23          	sw	a1,-40(s0)
800016ac:	fcc42a23          	sw	a2,-44(s0)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
800016b0:	fdc42783          	lw	a5,-36(s0)
800016b4:	fef42423          	sw	a5,-24(s0)

	configASSERT( pxQueue );
800016b8:	fe842783          	lw	a5,-24(s0)
800016bc:	00079663          	bnez	a5,800016c8 <xQueueReceiveFromISR+0x34>
800016c0:	30007073          	csrci	mstatus,0
800016c4:	0000006f          	j	800016c4 <xQueueReceiveFromISR+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
800016c8:	fd842783          	lw	a5,-40(s0)
800016cc:	00079863          	bnez	a5,800016dc <xQueueReceiveFromISR+0x48>
800016d0:	fe842783          	lw	a5,-24(s0)
800016d4:	0407a783          	lw	a5,64(a5)
800016d8:	00079663          	bnez	a5,800016e4 <xQueueReceiveFromISR+0x50>
800016dc:	00100793          	li	a5,1
800016e0:	0080006f          	j	800016e8 <xQueueReceiveFromISR+0x54>
800016e4:	00000793          	li	a5,0
800016e8:	00079663          	bnez	a5,800016f4 <xQueueReceiveFromISR+0x60>
800016ec:	30007073          	csrci	mstatus,0
800016f0:	0000006f          	j	800016f0 <xQueueReceiveFromISR+0x5c>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
800016f4:	fc1fe0ef          	jal	ra,800006b4 <vPortSetInterruptMask>
800016f8:	00050793          	mv	a5,a0
800016fc:	fef42223          	sw	a5,-28(s0)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
80001700:	fe842783          	lw	a5,-24(s0)
80001704:	0387a783          	lw	a5,56(a5)
80001708:	08078863          	beqz	a5,80001798 <xQueueReceiveFromISR+0x104>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
8000170c:	fd842583          	lw	a1,-40(s0)
80001710:	fe842503          	lw	a0,-24(s0)
80001714:	4e0000ef          	jal	ra,80001bf4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
80001718:	fe842783          	lw	a5,-24(s0)
8000171c:	0387a783          	lw	a5,56(a5)
80001720:	fff78713          	addi	a4,a5,-1
80001724:	fe842783          	lw	a5,-24(s0)
80001728:	02e7ac23          	sw	a4,56(a5)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
8000172c:	fe842783          	lw	a5,-24(s0)
80001730:	0447a703          	lw	a4,68(a5)
80001734:	fff00793          	li	a5,-1
80001738:	04f71063          	bne	a4,a5,80001778 <xQueueReceiveFromISR+0xe4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
8000173c:	fe842783          	lw	a5,-24(s0)
80001740:	0107a783          	lw	a5,16(a5)
80001744:	04078463          	beqz	a5,8000178c <xQueueReceiveFromISR+0xf8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
80001748:	fe842783          	lw	a5,-24(s0)
8000174c:	01078793          	addi	a5,a5,16
80001750:	00078513          	mv	a0,a5
80001754:	2fc020ef          	jal	ra,80003a50 <xTaskRemoveFromEventList>
80001758:	00050793          	mv	a5,a0
8000175c:	02078863          	beqz	a5,8000178c <xQueueReceiveFromISR+0xf8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
80001760:	fd442783          	lw	a5,-44(s0)
80001764:	02078463          	beqz	a5,8000178c <xQueueReceiveFromISR+0xf8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
80001768:	fd442783          	lw	a5,-44(s0)
8000176c:	00100713          	li	a4,1
80001770:	00e7a023          	sw	a4,0(a5)
80001774:	0180006f          	j	8000178c <xQueueReceiveFromISR+0xf8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
80001778:	fe842783          	lw	a5,-24(s0)
8000177c:	0447a783          	lw	a5,68(a5)
80001780:	00178713          	addi	a4,a5,1
80001784:	fe842783          	lw	a5,-24(s0)
80001788:	04e7a223          	sw	a4,68(a5)
			}

			xReturn = pdPASS;
8000178c:	00100793          	li	a5,1
80001790:	fef42623          	sw	a5,-20(s0)
80001794:	0080006f          	j	8000179c <xQueueReceiveFromISR+0x108>
		}
		else
		{
			xReturn = pdFAIL;
80001798:	fe042623          	sw	zero,-20(s0)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
8000179c:	fe442783          	lw	a5,-28(s0)
800017a0:	00078513          	mv	a0,a5
800017a4:	ee9fe0ef          	jal	ra,8000068c <vPortClearInterruptMask>

	return xReturn;
800017a8:	fec42783          	lw	a5,-20(s0)
}
800017ac:	00078513          	mv	a0,a5
800017b0:	02c12083          	lw	ra,44(sp)
800017b4:	02812403          	lw	s0,40(sp)
800017b8:	03010113          	addi	sp,sp,48
800017bc:	00008067          	ret

800017c0 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
800017c0:	fd010113          	addi	sp,sp,-48
800017c4:	02112623          	sw	ra,44(sp)
800017c8:	02812423          	sw	s0,40(sp)
800017cc:	03010413          	addi	s0,sp,48
800017d0:	fca42e23          	sw	a0,-36(s0)
800017d4:	fcb42c23          	sw	a1,-40(s0)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
800017d8:	fdc42783          	lw	a5,-36(s0)
800017dc:	fef42423          	sw	a5,-24(s0)

	configASSERT( pxQueue );
800017e0:	fe842783          	lw	a5,-24(s0)
800017e4:	00079663          	bnez	a5,800017f0 <xQueuePeekFromISR+0x30>
800017e8:	30007073          	csrci	mstatus,0
800017ec:	0000006f          	j	800017ec <xQueuePeekFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
800017f0:	fd842783          	lw	a5,-40(s0)
800017f4:	00079863          	bnez	a5,80001804 <xQueuePeekFromISR+0x44>
800017f8:	fe842783          	lw	a5,-24(s0)
800017fc:	0407a783          	lw	a5,64(a5)
80001800:	00079663          	bnez	a5,8000180c <xQueuePeekFromISR+0x4c>
80001804:	00100793          	li	a5,1
80001808:	0080006f          	j	80001810 <xQueuePeekFromISR+0x50>
8000180c:	00000793          	li	a5,0
80001810:	00079663          	bnez	a5,8000181c <xQueuePeekFromISR+0x5c>
80001814:	30007073          	csrci	mstatus,0
80001818:	0000006f          	j	80001818 <xQueuePeekFromISR+0x58>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
8000181c:	fe842783          	lw	a5,-24(s0)
80001820:	0407a783          	lw	a5,64(a5)
80001824:	00079663          	bnez	a5,80001830 <xQueuePeekFromISR+0x70>
80001828:	30007073          	csrci	mstatus,0
8000182c:	0000006f          	j	8000182c <xQueuePeekFromISR+0x6c>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80001830:	e85fe0ef          	jal	ra,800006b4 <vPortSetInterruptMask>
80001834:	00050793          	mv	a5,a0
80001838:	fef42223          	sw	a5,-28(s0)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
8000183c:	fe842783          	lw	a5,-24(s0)
80001840:	0387a783          	lw	a5,56(a5)
80001844:	02078a63          	beqz	a5,80001878 <xQueuePeekFromISR+0xb8>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
80001848:	fe842783          	lw	a5,-24(s0)
8000184c:	00c7a783          	lw	a5,12(a5)
80001850:	fef42023          	sw	a5,-32(s0)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
80001854:	fd842583          	lw	a1,-40(s0)
80001858:	fe842503          	lw	a0,-24(s0)
8000185c:	398000ef          	jal	ra,80001bf4 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
80001860:	fe842783          	lw	a5,-24(s0)
80001864:	fe042703          	lw	a4,-32(s0)
80001868:	00e7a623          	sw	a4,12(a5)

			xReturn = pdPASS;
8000186c:	00100793          	li	a5,1
80001870:	fef42623          	sw	a5,-20(s0)
80001874:	0080006f          	j	8000187c <xQueuePeekFromISR+0xbc>
		}
		else
		{
			xReturn = pdFAIL;
80001878:	fe042623          	sw	zero,-20(s0)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
8000187c:	fe442783          	lw	a5,-28(s0)
80001880:	00078513          	mv	a0,a5
80001884:	e09fe0ef          	jal	ra,8000068c <vPortClearInterruptMask>

	return xReturn;
80001888:	fec42783          	lw	a5,-20(s0)
}
8000188c:	00078513          	mv	a0,a5
80001890:	02c12083          	lw	ra,44(sp)
80001894:	02812403          	lw	s0,40(sp)
80001898:	03010113          	addi	sp,sp,48
8000189c:	00008067          	ret

800018a0 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
800018a0:	fd010113          	addi	sp,sp,-48
800018a4:	02112623          	sw	ra,44(sp)
800018a8:	02812423          	sw	s0,40(sp)
800018ac:	03010413          	addi	s0,sp,48
800018b0:	fca42e23          	sw	a0,-36(s0)
UBaseType_t uxReturn;

	configASSERT( xQueue );
800018b4:	fdc42783          	lw	a5,-36(s0)
800018b8:	00079663          	bnez	a5,800018c4 <uxQueueMessagesWaiting+0x24>
800018bc:	30007073          	csrci	mstatus,0
800018c0:	0000006f          	j	800018c0 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
800018c4:	118030ef          	jal	ra,800049dc <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
800018c8:	fdc42783          	lw	a5,-36(s0)
800018cc:	0387a783          	lw	a5,56(a5)
800018d0:	fef42623          	sw	a5,-20(s0)
	}
	taskEXIT_CRITICAL();
800018d4:	15c030ef          	jal	ra,80004a30 <vTaskExitCritical>

	return uxReturn;
800018d8:	fec42783          	lw	a5,-20(s0)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
800018dc:	00078513          	mv	a0,a5
800018e0:	02c12083          	lw	ra,44(sp)
800018e4:	02812403          	lw	s0,40(sp)
800018e8:	03010113          	addi	sp,sp,48
800018ec:	00008067          	ret

800018f0 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
800018f0:	fd010113          	addi	sp,sp,-48
800018f4:	02112623          	sw	ra,44(sp)
800018f8:	02812423          	sw	s0,40(sp)
800018fc:	03010413          	addi	s0,sp,48
80001900:	fca42e23          	sw	a0,-36(s0)
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
80001904:	fdc42783          	lw	a5,-36(s0)
80001908:	fef42623          	sw	a5,-20(s0)
	configASSERT( pxQueue );
8000190c:	fec42783          	lw	a5,-20(s0)
80001910:	00079663          	bnez	a5,8000191c <uxQueueSpacesAvailable+0x2c>
80001914:	30007073          	csrci	mstatus,0
80001918:	0000006f          	j	80001918 <uxQueueSpacesAvailable+0x28>

	taskENTER_CRITICAL();
8000191c:	0c0030ef          	jal	ra,800049dc <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
80001920:	fec42783          	lw	a5,-20(s0)
80001924:	03c7a703          	lw	a4,60(a5)
80001928:	fec42783          	lw	a5,-20(s0)
8000192c:	0387a783          	lw	a5,56(a5)
80001930:	40f707b3          	sub	a5,a4,a5
80001934:	fef42423          	sw	a5,-24(s0)
	}
	taskEXIT_CRITICAL();
80001938:	0f8030ef          	jal	ra,80004a30 <vTaskExitCritical>

	return uxReturn;
8000193c:	fe842783          	lw	a5,-24(s0)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
80001940:	00078513          	mv	a0,a5
80001944:	02c12083          	lw	ra,44(sp)
80001948:	02812403          	lw	s0,40(sp)
8000194c:	03010113          	addi	sp,sp,48
80001950:	00008067          	ret

80001954 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
80001954:	fd010113          	addi	sp,sp,-48
80001958:	02812623          	sw	s0,44(sp)
8000195c:	03010413          	addi	s0,sp,48
80001960:	fca42e23          	sw	a0,-36(s0)
UBaseType_t uxReturn;

	configASSERT( xQueue );
80001964:	fdc42783          	lw	a5,-36(s0)
80001968:	00079663          	bnez	a5,80001974 <uxQueueMessagesWaitingFromISR+0x20>
8000196c:	30007073          	csrci	mstatus,0
80001970:	0000006f          	j	80001970 <uxQueueMessagesWaitingFromISR+0x1c>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
80001974:	fdc42783          	lw	a5,-36(s0)
80001978:	0387a783          	lw	a5,56(a5)
8000197c:	fef42623          	sw	a5,-20(s0)

	return uxReturn;
80001980:	fec42783          	lw	a5,-20(s0)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
80001984:	00078513          	mv	a0,a5
80001988:	02c12403          	lw	s0,44(sp)
8000198c:	03010113          	addi	sp,sp,48
80001990:	00008067          	ret

80001994 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
80001994:	fd010113          	addi	sp,sp,-48
80001998:	02112623          	sw	ra,44(sp)
8000199c:	02812423          	sw	s0,40(sp)
800019a0:	03010413          	addi	s0,sp,48
800019a4:	fca42e23          	sw	a0,-36(s0)
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
800019a8:	fdc42783          	lw	a5,-36(s0)
800019ac:	fef42623          	sw	a5,-20(s0)

	configASSERT( pxQueue );
800019b0:	fec42783          	lw	a5,-20(s0)
800019b4:	00079663          	bnez	a5,800019c0 <vQueueDelete+0x2c>
800019b8:	30007073          	csrci	mstatus,0
800019bc:	0000006f          	j	800019bc <vQueueDelete+0x28>

	traceQUEUE_DELETE( pxQueue );
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
800019c0:	fec42503          	lw	a0,-20(s0)
800019c4:	5ac000ef          	jal	ra,80001f70 <vQueueUnregisterQueue>
	}
	#endif
	vPortFree( pxQueue );
800019c8:	fec42503          	lw	a0,-20(s0)
800019cc:	02c050ef          	jal	ra,800069f8 <vPortFree>
}
800019d0:	00000013          	nop
800019d4:	02c12083          	lw	ra,44(sp)
800019d8:	02812403          	lw	s0,40(sp)
800019dc:	03010113          	addi	sp,sp,48
800019e0:	00008067          	ret

800019e4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
800019e4:	fe010113          	addi	sp,sp,-32
800019e8:	00812e23          	sw	s0,28(sp)
800019ec:	02010413          	addi	s0,sp,32
800019f0:	fea42623          	sw	a0,-20(s0)
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
800019f4:	fec42783          	lw	a5,-20(s0)
800019f8:	04c7a783          	lw	a5,76(a5)
	}
800019fc:	00078513          	mv	a0,a5
80001a00:	01c12403          	lw	s0,28(sp)
80001a04:	02010113          	addi	sp,sp,32
80001a08:	00008067          	ret

80001a0c <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
80001a0c:	fe010113          	addi	sp,sp,-32
80001a10:	00812e23          	sw	s0,28(sp)
80001a14:	02010413          	addi	s0,sp,32
80001a18:	fea42623          	sw	a0,-20(s0)
80001a1c:	feb42423          	sw	a1,-24(s0)
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
80001a20:	fec42783          	lw	a5,-20(s0)
80001a24:	fe842703          	lw	a4,-24(s0)
80001a28:	04e7a623          	sw	a4,76(a5)
	}
80001a2c:	00000013          	nop
80001a30:	01c12403          	lw	s0,28(sp)
80001a34:	02010113          	addi	sp,sp,32
80001a38:	00008067          	ret

80001a3c <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
80001a3c:	fe010113          	addi	sp,sp,-32
80001a40:	00812e23          	sw	s0,28(sp)
80001a44:	02010413          	addi	s0,sp,32
80001a48:	fea42623          	sw	a0,-20(s0)
		return ( ( Queue_t * ) xQueue )->ucQueueType;
80001a4c:	fec42783          	lw	a5,-20(s0)
80001a50:	0507c783          	lbu	a5,80(a5)
	}
80001a54:	00078513          	mv	a0,a5
80001a58:	01c12403          	lw	s0,28(sp)
80001a5c:	02010113          	addi	sp,sp,32
80001a60:	00008067          	ret

80001a64 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
80001a64:	fd010113          	addi	sp,sp,-48
80001a68:	02112623          	sw	ra,44(sp)
80001a6c:	02812423          	sw	s0,40(sp)
80001a70:	03010413          	addi	s0,sp,48
80001a74:	fca42e23          	sw	a0,-36(s0)
80001a78:	fcb42c23          	sw	a1,-40(s0)
80001a7c:	fcc42a23          	sw	a2,-44(s0)
BaseType_t xReturn = pdFALSE;
80001a80:	fe042623          	sw	zero,-20(s0)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
80001a84:	fdc42783          	lw	a5,-36(s0)
80001a88:	0407a783          	lw	a5,64(a5)
80001a8c:	02079863          	bnez	a5,80001abc <prvCopyDataToQueue+0x58>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
80001a90:	fdc42783          	lw	a5,-36(s0)
80001a94:	0007a783          	lw	a5,0(a5)
80001a98:	12079863          	bnez	a5,80001bc8 <prvCopyDataToQueue+0x164>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
80001a9c:	fdc42783          	lw	a5,-36(s0)
80001aa0:	0047a783          	lw	a5,4(a5)
80001aa4:	00078513          	mv	a0,a5
80001aa8:	5ed020ef          	jal	ra,80004894 <xTaskPriorityDisinherit>
80001aac:	fea42623          	sw	a0,-20(s0)
				pxQueue->pxMutexHolder = NULL;
80001ab0:	fdc42783          	lw	a5,-36(s0)
80001ab4:	0007a223          	sw	zero,4(a5)
80001ab8:	1100006f          	j	80001bc8 <prvCopyDataToQueue+0x164>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
80001abc:	fd442783          	lw	a5,-44(s0)
80001ac0:	06079463          	bnez	a5,80001b28 <prvCopyDataToQueue+0xc4>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
80001ac4:	fdc42783          	lw	a5,-36(s0)
80001ac8:	0087a703          	lw	a4,8(a5)
80001acc:	fdc42783          	lw	a5,-36(s0)
80001ad0:	0407a783          	lw	a5,64(a5)
80001ad4:	00078613          	mv	a2,a5
80001ad8:	fd842583          	lw	a1,-40(s0)
80001adc:	00070513          	mv	a0,a4
80001ae0:	261060ef          	jal	ra,80008540 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
80001ae4:	fdc42783          	lw	a5,-36(s0)
80001ae8:	0087a703          	lw	a4,8(a5)
80001aec:	fdc42783          	lw	a5,-36(s0)
80001af0:	0407a783          	lw	a5,64(a5)
80001af4:	00f70733          	add	a4,a4,a5
80001af8:	fdc42783          	lw	a5,-36(s0)
80001afc:	00e7a423          	sw	a4,8(a5)
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
80001b00:	fdc42783          	lw	a5,-36(s0)
80001b04:	0087a703          	lw	a4,8(a5)
80001b08:	fdc42783          	lw	a5,-36(s0)
80001b0c:	0047a783          	lw	a5,4(a5)
80001b10:	0af76c63          	bltu	a4,a5,80001bc8 <prvCopyDataToQueue+0x164>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
80001b14:	fdc42783          	lw	a5,-36(s0)
80001b18:	0007a703          	lw	a4,0(a5)
80001b1c:	fdc42783          	lw	a5,-36(s0)
80001b20:	00e7a423          	sw	a4,8(a5)
80001b24:	0a40006f          	j	80001bc8 <prvCopyDataToQueue+0x164>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80001b28:	fdc42783          	lw	a5,-36(s0)
80001b2c:	00c7a703          	lw	a4,12(a5)
80001b30:	fdc42783          	lw	a5,-36(s0)
80001b34:	0407a783          	lw	a5,64(a5)
80001b38:	00078613          	mv	a2,a5
80001b3c:	fd842583          	lw	a1,-40(s0)
80001b40:	00070513          	mv	a0,a4
80001b44:	1fd060ef          	jal	ra,80008540 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
80001b48:	fdc42783          	lw	a5,-36(s0)
80001b4c:	00c7a703          	lw	a4,12(a5)
80001b50:	fdc42783          	lw	a5,-36(s0)
80001b54:	0407a783          	lw	a5,64(a5)
80001b58:	40f007b3          	neg	a5,a5
80001b5c:	00f70733          	add	a4,a4,a5
80001b60:	fdc42783          	lw	a5,-36(s0)
80001b64:	00e7a623          	sw	a4,12(a5)
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
80001b68:	fdc42783          	lw	a5,-36(s0)
80001b6c:	00c7a703          	lw	a4,12(a5)
80001b70:	fdc42783          	lw	a5,-36(s0)
80001b74:	0007a783          	lw	a5,0(a5)
80001b78:	02f77263          	bleu	a5,a4,80001b9c <prvCopyDataToQueue+0x138>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
80001b7c:	fdc42783          	lw	a5,-36(s0)
80001b80:	0047a703          	lw	a4,4(a5)
80001b84:	fdc42783          	lw	a5,-36(s0)
80001b88:	0407a783          	lw	a5,64(a5)
80001b8c:	40f007b3          	neg	a5,a5
80001b90:	00f70733          	add	a4,a4,a5
80001b94:	fdc42783          	lw	a5,-36(s0)
80001b98:	00e7a623          	sw	a4,12(a5)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
80001b9c:	fd442703          	lw	a4,-44(s0)
80001ba0:	00200793          	li	a5,2
80001ba4:	02f71263          	bne	a4,a5,80001bc8 <prvCopyDataToQueue+0x164>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
80001ba8:	fdc42783          	lw	a5,-36(s0)
80001bac:	0387a783          	lw	a5,56(a5)
80001bb0:	00078c63          	beqz	a5,80001bc8 <prvCopyDataToQueue+0x164>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
80001bb4:	fdc42783          	lw	a5,-36(s0)
80001bb8:	0387a783          	lw	a5,56(a5)
80001bbc:	fff78713          	addi	a4,a5,-1
80001bc0:	fdc42783          	lw	a5,-36(s0)
80001bc4:	02e7ac23          	sw	a4,56(a5)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
80001bc8:	fdc42783          	lw	a5,-36(s0)
80001bcc:	0387a783          	lw	a5,56(a5)
80001bd0:	00178713          	addi	a4,a5,1
80001bd4:	fdc42783          	lw	a5,-36(s0)
80001bd8:	02e7ac23          	sw	a4,56(a5)

	return xReturn;
80001bdc:	fec42783          	lw	a5,-20(s0)
}
80001be0:	00078513          	mv	a0,a5
80001be4:	02c12083          	lw	ra,44(sp)
80001be8:	02812403          	lw	s0,40(sp)
80001bec:	03010113          	addi	sp,sp,48
80001bf0:	00008067          	ret

80001bf4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
80001bf4:	fe010113          	addi	sp,sp,-32
80001bf8:	00112e23          	sw	ra,28(sp)
80001bfc:	00812c23          	sw	s0,24(sp)
80001c00:	02010413          	addi	s0,sp,32
80001c04:	fea42623          	sw	a0,-20(s0)
80001c08:	feb42423          	sw	a1,-24(s0)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
80001c0c:	fec42783          	lw	a5,-20(s0)
80001c10:	0407a783          	lw	a5,64(a5)
80001c14:	06078263          	beqz	a5,80001c78 <prvCopyDataFromQueue+0x84>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
80001c18:	fec42783          	lw	a5,-20(s0)
80001c1c:	00c7a703          	lw	a4,12(a5)
80001c20:	fec42783          	lw	a5,-20(s0)
80001c24:	0407a783          	lw	a5,64(a5)
80001c28:	00f70733          	add	a4,a4,a5
80001c2c:	fec42783          	lw	a5,-20(s0)
80001c30:	00e7a623          	sw	a4,12(a5)
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
80001c34:	fec42783          	lw	a5,-20(s0)
80001c38:	00c7a703          	lw	a4,12(a5)
80001c3c:	fec42783          	lw	a5,-20(s0)
80001c40:	0047a783          	lw	a5,4(a5)
80001c44:	00f76a63          	bltu	a4,a5,80001c58 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
80001c48:	fec42783          	lw	a5,-20(s0)
80001c4c:	0007a703          	lw	a4,0(a5)
80001c50:	fec42783          	lw	a5,-20(s0)
80001c54:	00e7a623          	sw	a4,12(a5)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
80001c58:	fec42783          	lw	a5,-20(s0)
80001c5c:	00c7a703          	lw	a4,12(a5)
80001c60:	fec42783          	lw	a5,-20(s0)
80001c64:	0407a783          	lw	a5,64(a5)
80001c68:	00078613          	mv	a2,a5
80001c6c:	00070593          	mv	a1,a4
80001c70:	fe842503          	lw	a0,-24(s0)
80001c74:	0cd060ef          	jal	ra,80008540 <memcpy>
	}
}
80001c78:	00000013          	nop
80001c7c:	01c12083          	lw	ra,28(sp)
80001c80:	01812403          	lw	s0,24(sp)
80001c84:	02010113          	addi	sp,sp,32
80001c88:	00008067          	ret

80001c8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
80001c8c:	fe010113          	addi	sp,sp,-32
80001c90:	00112e23          	sw	ra,28(sp)
80001c94:	00812c23          	sw	s0,24(sp)
80001c98:	02010413          	addi	s0,sp,32
80001c9c:	fea42623          	sw	a0,-20(s0)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
80001ca0:	53d020ef          	jal	ra,800049dc <vTaskEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
80001ca4:	0400006f          	j	80001ce4 <prvUnlockQueue+0x58>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80001ca8:	fec42783          	lw	a5,-20(s0)
80001cac:	0247a783          	lw	a5,36(a5)
80001cb0:	04078263          	beqz	a5,80001cf4 <prvUnlockQueue+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80001cb4:	fec42783          	lw	a5,-20(s0)
80001cb8:	02478793          	addi	a5,a5,36
80001cbc:	00078513          	mv	a0,a5
80001cc0:	591010ef          	jal	ra,80003a50 <xTaskRemoveFromEventList>
80001cc4:	00050793          	mv	a5,a0
80001cc8:	00078463          	beqz	a5,80001cd0 <prvUnlockQueue+0x44>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
80001ccc:	150020ef          	jal	ra,80003e1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
80001cd0:	fec42783          	lw	a5,-20(s0)
80001cd4:	0487a783          	lw	a5,72(a5)
80001cd8:	fff78713          	addi	a4,a5,-1
80001cdc:	fec42783          	lw	a5,-20(s0)
80001ce0:	04e7a423          	sw	a4,72(a5)
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
80001ce4:	fec42783          	lw	a5,-20(s0)
80001ce8:	0487a783          	lw	a5,72(a5)
80001cec:	faf04ee3          	bgtz	a5,80001ca8 <prvUnlockQueue+0x1c>
80001cf0:	0080006f          	j	80001cf8 <prvUnlockQueue+0x6c>
					break;
80001cf4:	00000013          	nop
		}

		pxQueue->xTxLock = queueUNLOCKED;
80001cf8:	fec42783          	lw	a5,-20(s0)
80001cfc:	fff00713          	li	a4,-1
80001d00:	04e7a423          	sw	a4,72(a5)
	}
	taskEXIT_CRITICAL();
80001d04:	52d020ef          	jal	ra,80004a30 <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
80001d08:	4d5020ef          	jal	ra,800049dc <vTaskEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
80001d0c:	0400006f          	j	80001d4c <prvUnlockQueue+0xc0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
80001d10:	fec42783          	lw	a5,-20(s0)
80001d14:	0107a783          	lw	a5,16(a5)
80001d18:	04078263          	beqz	a5,80001d5c <prvUnlockQueue+0xd0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
80001d1c:	fec42783          	lw	a5,-20(s0)
80001d20:	01078793          	addi	a5,a5,16
80001d24:	00078513          	mv	a0,a5
80001d28:	529010ef          	jal	ra,80003a50 <xTaskRemoveFromEventList>
80001d2c:	00050793          	mv	a5,a0
80001d30:	00078463          	beqz	a5,80001d38 <prvUnlockQueue+0xac>
				{
					vTaskMissedYield();
80001d34:	0e8020ef          	jal	ra,80003e1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
80001d38:	fec42783          	lw	a5,-20(s0)
80001d3c:	0447a783          	lw	a5,68(a5)
80001d40:	fff78713          	addi	a4,a5,-1
80001d44:	fec42783          	lw	a5,-20(s0)
80001d48:	04e7a223          	sw	a4,68(a5)
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
80001d4c:	fec42783          	lw	a5,-20(s0)
80001d50:	0447a783          	lw	a5,68(a5)
80001d54:	faf04ee3          	bgtz	a5,80001d10 <prvUnlockQueue+0x84>
80001d58:	0080006f          	j	80001d60 <prvUnlockQueue+0xd4>
			}
			else
			{
				break;
80001d5c:	00000013          	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
80001d60:	fec42783          	lw	a5,-20(s0)
80001d64:	fff00713          	li	a4,-1
80001d68:	04e7a223          	sw	a4,68(a5)
	}
	taskEXIT_CRITICAL();
80001d6c:	4c5020ef          	jal	ra,80004a30 <vTaskExitCritical>
}
80001d70:	00000013          	nop
80001d74:	01c12083          	lw	ra,28(sp)
80001d78:	01812403          	lw	s0,24(sp)
80001d7c:	02010113          	addi	sp,sp,32
80001d80:	00008067          	ret

80001d84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
80001d84:	fd010113          	addi	sp,sp,-48
80001d88:	02112623          	sw	ra,44(sp)
80001d8c:	02812423          	sw	s0,40(sp)
80001d90:	03010413          	addi	s0,sp,48
80001d94:	fca42e23          	sw	a0,-36(s0)
BaseType_t xReturn;

	taskENTER_CRITICAL();
80001d98:	445020ef          	jal	ra,800049dc <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
80001d9c:	fdc42783          	lw	a5,-36(s0)
80001da0:	0387a783          	lw	a5,56(a5)
80001da4:	00079863          	bnez	a5,80001db4 <prvIsQueueEmpty+0x30>
		{
			xReturn = pdTRUE;
80001da8:	00100793          	li	a5,1
80001dac:	fef42623          	sw	a5,-20(s0)
80001db0:	0080006f          	j	80001db8 <prvIsQueueEmpty+0x34>
		}
		else
		{
			xReturn = pdFALSE;
80001db4:	fe042623          	sw	zero,-20(s0)
		}
	}
	taskEXIT_CRITICAL();
80001db8:	479020ef          	jal	ra,80004a30 <vTaskExitCritical>

	return xReturn;
80001dbc:	fec42783          	lw	a5,-20(s0)
}
80001dc0:	00078513          	mv	a0,a5
80001dc4:	02c12083          	lw	ra,44(sp)
80001dc8:	02812403          	lw	s0,40(sp)
80001dcc:	03010113          	addi	sp,sp,48
80001dd0:	00008067          	ret

80001dd4 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
80001dd4:	fd010113          	addi	sp,sp,-48
80001dd8:	02812623          	sw	s0,44(sp)
80001ddc:	03010413          	addi	s0,sp,48
80001de0:	fca42e23          	sw	a0,-36(s0)
BaseType_t xReturn;

	configASSERT( xQueue );
80001de4:	fdc42783          	lw	a5,-36(s0)
80001de8:	00079663          	bnez	a5,80001df4 <xQueueIsQueueEmptyFromISR+0x20>
80001dec:	30007073          	csrci	mstatus,0
80001df0:	0000006f          	j	80001df0 <xQueueIsQueueEmptyFromISR+0x1c>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
80001df4:	fdc42783          	lw	a5,-36(s0)
80001df8:	0387a783          	lw	a5,56(a5)
80001dfc:	00079863          	bnez	a5,80001e0c <xQueueIsQueueEmptyFromISR+0x38>
	{
		xReturn = pdTRUE;
80001e00:	00100793          	li	a5,1
80001e04:	fef42623          	sw	a5,-20(s0)
80001e08:	0080006f          	j	80001e10 <xQueueIsQueueEmptyFromISR+0x3c>
	}
	else
	{
		xReturn = pdFALSE;
80001e0c:	fe042623          	sw	zero,-20(s0)
	}

	return xReturn;
80001e10:	fec42783          	lw	a5,-20(s0)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
80001e14:	00078513          	mv	a0,a5
80001e18:	02c12403          	lw	s0,44(sp)
80001e1c:	03010113          	addi	sp,sp,48
80001e20:	00008067          	ret

80001e24 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
80001e24:	fd010113          	addi	sp,sp,-48
80001e28:	02112623          	sw	ra,44(sp)
80001e2c:	02812423          	sw	s0,40(sp)
80001e30:	03010413          	addi	s0,sp,48
80001e34:	fca42e23          	sw	a0,-36(s0)
BaseType_t xReturn;

	taskENTER_CRITICAL();
80001e38:	3a5020ef          	jal	ra,800049dc <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
80001e3c:	fdc42783          	lw	a5,-36(s0)
80001e40:	0387a703          	lw	a4,56(a5)
80001e44:	fdc42783          	lw	a5,-36(s0)
80001e48:	03c7a783          	lw	a5,60(a5)
80001e4c:	00f71863          	bne	a4,a5,80001e5c <prvIsQueueFull+0x38>
		{
			xReturn = pdTRUE;
80001e50:	00100793          	li	a5,1
80001e54:	fef42623          	sw	a5,-20(s0)
80001e58:	0080006f          	j	80001e60 <prvIsQueueFull+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
80001e5c:	fe042623          	sw	zero,-20(s0)
		}
	}
	taskEXIT_CRITICAL();
80001e60:	3d1020ef          	jal	ra,80004a30 <vTaskExitCritical>

	return xReturn;
80001e64:	fec42783          	lw	a5,-20(s0)
}
80001e68:	00078513          	mv	a0,a5
80001e6c:	02c12083          	lw	ra,44(sp)
80001e70:	02812403          	lw	s0,40(sp)
80001e74:	03010113          	addi	sp,sp,48
80001e78:	00008067          	ret

80001e7c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
80001e7c:	fd010113          	addi	sp,sp,-48
80001e80:	02812623          	sw	s0,44(sp)
80001e84:	03010413          	addi	s0,sp,48
80001e88:	fca42e23          	sw	a0,-36(s0)
BaseType_t xReturn;

	configASSERT( xQueue );
80001e8c:	fdc42783          	lw	a5,-36(s0)
80001e90:	00079663          	bnez	a5,80001e9c <xQueueIsQueueFullFromISR+0x20>
80001e94:	30007073          	csrci	mstatus,0
80001e98:	0000006f          	j	80001e98 <xQueueIsQueueFullFromISR+0x1c>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
80001e9c:	fdc42783          	lw	a5,-36(s0)
80001ea0:	0387a703          	lw	a4,56(a5)
80001ea4:	fdc42783          	lw	a5,-36(s0)
80001ea8:	03c7a783          	lw	a5,60(a5)
80001eac:	00f71863          	bne	a4,a5,80001ebc <xQueueIsQueueFullFromISR+0x40>
	{
		xReturn = pdTRUE;
80001eb0:	00100793          	li	a5,1
80001eb4:	fef42623          	sw	a5,-20(s0)
80001eb8:	0080006f          	j	80001ec0 <xQueueIsQueueFullFromISR+0x44>
	}
	else
	{
		xReturn = pdFALSE;
80001ebc:	fe042623          	sw	zero,-20(s0)
	}

	return xReturn;
80001ec0:	fec42783          	lw	a5,-20(s0)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
80001ec4:	00078513          	mv	a0,a5
80001ec8:	02c12403          	lw	s0,44(sp)
80001ecc:	03010113          	addi	sp,sp,48
80001ed0:	00008067          	ret

80001ed4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
80001ed4:	fd010113          	addi	sp,sp,-48
80001ed8:	02812623          	sw	s0,44(sp)
80001edc:	03010413          	addi	s0,sp,48
80001ee0:	fca42e23          	sw	a0,-36(s0)
80001ee4:	fcb42c23          	sw	a1,-40(s0)
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
80001ee8:	fe042623          	sw	zero,-20(s0)
80001eec:	0680006f          	j	80001f54 <vQueueAddToRegistry+0x80>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
80001ef0:	00039717          	auipc	a4,0x39
80001ef4:	b3870713          	addi	a4,a4,-1224 # 8003aa28 <xQueueRegistry>
80001ef8:	fec42783          	lw	a5,-20(s0)
80001efc:	00379793          	slli	a5,a5,0x3
80001f00:	00f707b3          	add	a5,a4,a5
80001f04:	0007a783          	lw	a5,0(a5)
80001f08:	04079063          	bnez	a5,80001f48 <vQueueAddToRegistry+0x74>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
80001f0c:	00039717          	auipc	a4,0x39
80001f10:	b1c70713          	addi	a4,a4,-1252 # 8003aa28 <xQueueRegistry>
80001f14:	fec42783          	lw	a5,-20(s0)
80001f18:	00379793          	slli	a5,a5,0x3
80001f1c:	00f707b3          	add	a5,a4,a5
80001f20:	fd842703          	lw	a4,-40(s0)
80001f24:	00e7a023          	sw	a4,0(a5)
				xQueueRegistry[ ux ].xHandle = xQueue;
80001f28:	00039717          	auipc	a4,0x39
80001f2c:	b0070713          	addi	a4,a4,-1280 # 8003aa28 <xQueueRegistry>
80001f30:	fec42783          	lw	a5,-20(s0)
80001f34:	00379793          	slli	a5,a5,0x3
80001f38:	00f707b3          	add	a5,a4,a5
80001f3c:	fdc42703          	lw	a4,-36(s0)
80001f40:	00e7a223          	sw	a4,4(a5)

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
80001f44:	01c0006f          	j	80001f60 <vQueueAddToRegistry+0x8c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
80001f48:	fec42783          	lw	a5,-20(s0)
80001f4c:	00178793          	addi	a5,a5,1
80001f50:	fef42623          	sw	a5,-20(s0)
80001f54:	fec42703          	lw	a4,-20(s0)
80001f58:	00700793          	li	a5,7
80001f5c:	f8e7fae3          	bleu	a4,a5,80001ef0 <vQueueAddToRegistry+0x1c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
80001f60:	00000013          	nop
80001f64:	02c12403          	lw	s0,44(sp)
80001f68:	03010113          	addi	sp,sp,48
80001f6c:	00008067          	ret

80001f70 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
80001f70:	fd010113          	addi	sp,sp,-48
80001f74:	02812623          	sw	s0,44(sp)
80001f78:	03010413          	addi	s0,sp,48
80001f7c:	fca42e23          	sw	a0,-36(s0)
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
80001f80:	fe042623          	sw	zero,-20(s0)
80001f84:	04c0006f          	j	80001fd0 <vQueueUnregisterQueue+0x60>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
80001f88:	00039717          	auipc	a4,0x39
80001f8c:	aa070713          	addi	a4,a4,-1376 # 8003aa28 <xQueueRegistry>
80001f90:	fec42783          	lw	a5,-20(s0)
80001f94:	00379793          	slli	a5,a5,0x3
80001f98:	00f707b3          	add	a5,a4,a5
80001f9c:	0047a783          	lw	a5,4(a5)
80001fa0:	fdc42703          	lw	a4,-36(s0)
80001fa4:	02f71063          	bne	a4,a5,80001fc4 <vQueueUnregisterQueue+0x54>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
80001fa8:	00039717          	auipc	a4,0x39
80001fac:	a8070713          	addi	a4,a4,-1408 # 8003aa28 <xQueueRegistry>
80001fb0:	fec42783          	lw	a5,-20(s0)
80001fb4:	00379793          	slli	a5,a5,0x3
80001fb8:	00f707b3          	add	a5,a4,a5
80001fbc:	0007a023          	sw	zero,0(a5)
				break;
80001fc0:	01c0006f          	j	80001fdc <vQueueUnregisterQueue+0x6c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
80001fc4:	fec42783          	lw	a5,-20(s0)
80001fc8:	00178793          	addi	a5,a5,1
80001fcc:	fef42623          	sw	a5,-20(s0)
80001fd0:	fec42703          	lw	a4,-20(s0)
80001fd4:	00700793          	li	a5,7
80001fd8:	fae7f8e3          	bleu	a4,a5,80001f88 <vQueueUnregisterQueue+0x18>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
80001fdc:	00000013          	nop
80001fe0:	02c12403          	lw	s0,44(sp)
80001fe4:	03010113          	addi	sp,sp,48
80001fe8:	00008067          	ret

80001fec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
80001fec:	fd010113          	addi	sp,sp,-48
80001ff0:	02112623          	sw	ra,44(sp)
80001ff4:	02812423          	sw	s0,40(sp)
80001ff8:	03010413          	addi	s0,sp,48
80001ffc:	fca42e23          	sw	a0,-36(s0)
80002000:	fcb42c23          	sw	a1,-40(s0)
80002004:	fcc42a23          	sw	a2,-44(s0)
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
80002008:	fdc42783          	lw	a5,-36(s0)
8000200c:	fef42623          	sw	a5,-20(s0)
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
80002010:	1cd020ef          	jal	ra,800049dc <vTaskEnterCritical>
80002014:	fec42783          	lw	a5,-20(s0)
80002018:	0447a703          	lw	a4,68(a5)
8000201c:	fff00793          	li	a5,-1
80002020:	00f71663          	bne	a4,a5,8000202c <vQueueWaitForMessageRestricted+0x40>
80002024:	fec42783          	lw	a5,-20(s0)
80002028:	0407a223          	sw	zero,68(a5)
8000202c:	fec42783          	lw	a5,-20(s0)
80002030:	0487a703          	lw	a4,72(a5)
80002034:	fff00793          	li	a5,-1
80002038:	00f71663          	bne	a4,a5,80002044 <vQueueWaitForMessageRestricted+0x58>
8000203c:	fec42783          	lw	a5,-20(s0)
80002040:	0407a423          	sw	zero,72(a5)
80002044:	1ed020ef          	jal	ra,80004a30 <vTaskExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
80002048:	fec42783          	lw	a5,-20(s0)
8000204c:	0387a783          	lw	a5,56(a5)
80002050:	00079e63          	bnez	a5,8000206c <vQueueWaitForMessageRestricted+0x80>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
80002054:	fec42783          	lw	a5,-20(s0)
80002058:	02478793          	addi	a5,a5,36
8000205c:	fd442603          	lw	a2,-44(s0)
80002060:	fd842583          	lw	a1,-40(s0)
80002064:	00078513          	mv	a0,a5
80002068:	125010ef          	jal	ra,8000398c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
8000206c:	fec42503          	lw	a0,-20(s0)
80002070:	c1dff0ef          	jal	ra,80001c8c <prvUnlockQueue>
	}
80002074:	00000013          	nop
80002078:	02c12083          	lw	ra,44(sp)
8000207c:	02812403          	lw	s0,40(sp)
80002080:	03010113          	addi	sp,sp,48
80002084:	00008067          	ret

80002088 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80002088:	fc010113          	addi	sp,sp,-64
8000208c:	02112e23          	sw	ra,60(sp)
80002090:	02812c23          	sw	s0,56(sp)
80002094:	04010413          	addi	s0,sp,64
80002098:	fca42e23          	sw	a0,-36(s0)
8000209c:	fcb42c23          	sw	a1,-40(s0)
800020a0:	fcd42823          	sw	a3,-48(s0)
800020a4:	fce42623          	sw	a4,-52(s0)
800020a8:	fcf42423          	sw	a5,-56(s0)
800020ac:	fd042223          	sw	a6,-60(s0)
800020b0:	fd142023          	sw	a7,-64(s0)
800020b4:	00060793          	mv	a5,a2
800020b8:	fcf41b23          	sh	a5,-42(s0)
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
800020bc:	fdc42783          	lw	a5,-36(s0)
800020c0:	00079663          	bnez	a5,800020cc <xTaskGenericCreate+0x44>
800020c4:	30007073          	csrci	mstatus,0
800020c8:	0000006f          	j	800020c8 <xTaskGenericCreate+0x40>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
800020cc:	fcc42703          	lw	a4,-52(s0)
800020d0:	00400793          	li	a5,4
800020d4:	00e7f663          	bleu	a4,a5,800020e0 <xTaskGenericCreate+0x58>
800020d8:	30007073          	csrci	mstatus,0
800020dc:	0000006f          	j	800020dc <xTaskGenericCreate+0x54>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
800020e0:	fd645783          	lhu	a5,-42(s0)
800020e4:	fc442583          	lw	a1,-60(s0)
800020e8:	00078513          	mv	a0,a5
800020ec:	1b4020ef          	jal	ra,800042a0 <prvAllocateTCBAndStack>
800020f0:	fea42423          	sw	a0,-24(s0)
	if( pxNewTCB != NULL )
800020f4:	fe842783          	lw	a5,-24(s0)
800020f8:	1c078663          	beqz	a5,800022c4 <xTaskGenericCreate+0x23c>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
800020fc:	fe842783          	lw	a5,-24(s0)
80002100:	0307a703          	lw	a4,48(a5)
80002104:	fd645683          	lhu	a3,-42(s0)
80002108:	400007b7          	lui	a5,0x40000
8000210c:	fff78793          	addi	a5,a5,-1 # 3fffffff <_HEAP_SIZE+0x3fffefff>
80002110:	00f687b3          	add	a5,a3,a5
80002114:	00279793          	slli	a5,a5,0x2
80002118:	00f707b3          	add	a5,a4,a5
8000211c:	fef42223          	sw	a5,-28(s0)
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
80002120:	fe442783          	lw	a5,-28(s0)
80002124:	ffc7f793          	andi	a5,a5,-4
80002128:	fef42223          	sw	a5,-28(s0)

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
8000212c:	fe442783          	lw	a5,-28(s0)
80002130:	0037f793          	andi	a5,a5,3
80002134:	00078663          	beqz	a5,80002140 <xTaskGenericCreate+0xb8>
80002138:	30007073          	csrci	mstatus,0
8000213c:	0000006f          	j	8000213c <xTaskGenericCreate+0xb4>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
80002140:	fd645783          	lhu	a5,-42(s0)
80002144:	00078713          	mv	a4,a5
80002148:	fc042683          	lw	a3,-64(s0)
8000214c:	fcc42603          	lw	a2,-52(s0)
80002150:	fd842583          	lw	a1,-40(s0)
80002154:	fe842503          	lw	a0,-24(s0)
80002158:	5ad010ef          	jal	ra,80003f04 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
8000215c:	fd042603          	lw	a2,-48(s0)
80002160:	fdc42583          	lw	a1,-36(s0)
80002164:	fe442503          	lw	a0,-28(s0)
80002168:	d78fe0ef          	jal	ra,800006e0 <pxPortInitialiseStack>
8000216c:	00050713          	mv	a4,a0
80002170:	fe842783          	lw	a5,-24(s0)
80002174:	00e7a023          	sw	a4,0(a5)
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
80002178:	fc842783          	lw	a5,-56(s0)
8000217c:	00078863          	beqz	a5,8000218c <xTaskGenericCreate+0x104>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
80002180:	fc842783          	lw	a5,-56(s0)
80002184:	fe842703          	lw	a4,-24(s0)
80002188:	00e7a023          	sw	a4,0(a5)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
8000218c:	051020ef          	jal	ra,800049dc <vTaskEnterCritical>
		{
			uxCurrentNumberOfTasks++;
80002190:	0001f797          	auipc	a5,0x1f
80002194:	78478793          	addi	a5,a5,1924 # 80021914 <uxCurrentNumberOfTasks>
80002198:	0007a783          	lw	a5,0(a5)
8000219c:	00178713          	addi	a4,a5,1
800021a0:	0001f797          	auipc	a5,0x1f
800021a4:	77478793          	addi	a5,a5,1908 # 80021914 <uxCurrentNumberOfTasks>
800021a8:	00e7a023          	sw	a4,0(a5)
			if( pxCurrentTCB == NULL )
800021ac:	0001f797          	auipc	a5,0x1f
800021b0:	c7078793          	addi	a5,a5,-912 # 80020e1c <pxCurrentTCB>
800021b4:	0007a783          	lw	a5,0(a5)
800021b8:	02079863          	bnez	a5,800021e8 <xTaskGenericCreate+0x160>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
800021bc:	0001f797          	auipc	a5,0x1f
800021c0:	c6078793          	addi	a5,a5,-928 # 80020e1c <pxCurrentTCB>
800021c4:	fe842703          	lw	a4,-24(s0)
800021c8:	00e7a023          	sw	a4,0(a5)

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
800021cc:	0001f797          	auipc	a5,0x1f
800021d0:	74878793          	addi	a5,a5,1864 # 80021914 <uxCurrentNumberOfTasks>
800021d4:	0007a703          	lw	a4,0(a5)
800021d8:	00100793          	li	a5,1
800021dc:	04f71263          	bne	a4,a5,80002220 <xTaskGenericCreate+0x198>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
800021e0:	65d010ef          	jal	ra,8000403c <prvInitialiseTaskLists>
800021e4:	03c0006f          	j	80002220 <xTaskGenericCreate+0x198>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
800021e8:	0001f797          	auipc	a5,0x1f
800021ec:	73878793          	addi	a5,a5,1848 # 80021920 <xSchedulerRunning>
800021f0:	0007a783          	lw	a5,0(a5)
800021f4:	02079663          	bnez	a5,80002220 <xTaskGenericCreate+0x198>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
800021f8:	0001f797          	auipc	a5,0x1f
800021fc:	c2478793          	addi	a5,a5,-988 # 80020e1c <pxCurrentTCB>
80002200:	0007a783          	lw	a5,0(a5)
80002204:	02c7a783          	lw	a5,44(a5)
80002208:	fcc42703          	lw	a4,-52(s0)
8000220c:	00f76a63          	bltu	a4,a5,80002220 <xTaskGenericCreate+0x198>
					{
						pxCurrentTCB = pxNewTCB;
80002210:	0001f797          	auipc	a5,0x1f
80002214:	c0c78793          	addi	a5,a5,-1012 # 80020e1c <pxCurrentTCB>
80002218:	fe842703          	lw	a4,-24(s0)
8000221c:	00e7a023          	sw	a4,0(a5)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
80002220:	0001f797          	auipc	a5,0x1f
80002224:	71078793          	addi	a5,a5,1808 # 80021930 <uxTaskNumber>
80002228:	0007a783          	lw	a5,0(a5)
8000222c:	00178713          	addi	a4,a5,1
80002230:	0001f797          	auipc	a5,0x1f
80002234:	70078793          	addi	a5,a5,1792 # 80021930 <uxTaskNumber>
80002238:	00e7a023          	sw	a4,0(a5)

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
8000223c:	0001f797          	auipc	a5,0x1f
80002240:	6f478793          	addi	a5,a5,1780 # 80021930 <uxTaskNumber>
80002244:	0007a703          	lw	a4,0(a5)
80002248:	fe842783          	lw	a5,-24(s0)
8000224c:	04e7a423          	sw	a4,72(a5)
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
80002250:	fe842783          	lw	a5,-24(s0)
80002254:	02c7a703          	lw	a4,44(a5)
80002258:	0001f797          	auipc	a5,0x1f
8000225c:	6c478793          	addi	a5,a5,1732 # 8002191c <uxTopReadyPriority>
80002260:	0007a783          	lw	a5,0(a5)
80002264:	00e7fc63          	bleu	a4,a5,8000227c <xTaskGenericCreate+0x1f4>
80002268:	fe842783          	lw	a5,-24(s0)
8000226c:	02c7a703          	lw	a4,44(a5)
80002270:	0001f797          	auipc	a5,0x1f
80002274:	6ac78793          	addi	a5,a5,1708 # 8002191c <uxTopReadyPriority>
80002278:	00e7a023          	sw	a4,0(a5)
8000227c:	fe842783          	lw	a5,-24(s0)
80002280:	02c7a703          	lw	a4,44(a5)
80002284:	00070793          	mv	a5,a4
80002288:	00279793          	slli	a5,a5,0x2
8000228c:	00e787b3          	add	a5,a5,a4
80002290:	00279793          	slli	a5,a5,0x2
80002294:	0001f717          	auipc	a4,0x1f
80002298:	5ac70713          	addi	a4,a4,1452 # 80021840 <__bss_start>
8000229c:	00e78733          	add	a4,a5,a4
800022a0:	fe842783          	lw	a5,-24(s0)
800022a4:	00478793          	addi	a5,a5,4
800022a8:	00078593          	mv	a1,a5
800022ac:	00070513          	mv	a0,a4
800022b0:	d88fe0ef          	jal	ra,80000838 <vListInsertEnd>

			xReturn = pdPASS;
800022b4:	00100793          	li	a5,1
800022b8:	fef42623          	sw	a5,-20(s0)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
800022bc:	774020ef          	jal	ra,80004a30 <vTaskExitCritical>
800022c0:	00c0006f          	j	800022cc <xTaskGenericCreate+0x244>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
800022c4:	fff00793          	li	a5,-1
800022c8:	fef42623          	sw	a5,-20(s0)
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
800022cc:	fec42703          	lw	a4,-20(s0)
800022d0:	00100793          	li	a5,1
800022d4:	02f71863          	bne	a4,a5,80002304 <xTaskGenericCreate+0x27c>
	{
		if( xSchedulerRunning != pdFALSE )
800022d8:	0001f797          	auipc	a5,0x1f
800022dc:	64878793          	addi	a5,a5,1608 # 80021920 <xSchedulerRunning>
800022e0:	0007a783          	lw	a5,0(a5)
800022e4:	02078063          	beqz	a5,80002304 <xTaskGenericCreate+0x27c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
800022e8:	0001f797          	auipc	a5,0x1f
800022ec:	b3478793          	addi	a5,a5,-1228 # 80020e1c <pxCurrentTCB>
800022f0:	0007a783          	lw	a5,0(a5)
800022f4:	02c7a783          	lw	a5,44(a5)
800022f8:	fcc42703          	lw	a4,-52(s0)
800022fc:	00e7f463          	bleu	a4,a5,80002304 <xTaskGenericCreate+0x27c>
			{
				taskYIELD_IF_USING_PREEMPTION();
80002300:	98cfe0ef          	jal	ra,8000048c <vPortYield>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
80002304:	fec42783          	lw	a5,-20(s0)
}
80002308:	00078513          	mv	a0,a5
8000230c:	03c12083          	lw	ra,60(sp)
80002310:	03812403          	lw	s0,56(sp)
80002314:	04010113          	addi	sp,sp,64
80002318:	00008067          	ret

8000231c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
8000231c:	fd010113          	addi	sp,sp,-48
80002320:	02112623          	sw	ra,44(sp)
80002324:	02812423          	sw	s0,40(sp)
80002328:	03010413          	addi	s0,sp,48
8000232c:	fca42e23          	sw	a0,-36(s0)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
80002330:	6ac020ef          	jal	ra,800049dc <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
80002334:	fdc42783          	lw	a5,-36(s0)
80002338:	00079a63          	bnez	a5,8000234c <vTaskDelete+0x30>
8000233c:	0001f797          	auipc	a5,0x1f
80002340:	ae078793          	addi	a5,a5,-1312 # 80020e1c <pxCurrentTCB>
80002344:	0007a783          	lw	a5,0(a5)
80002348:	0080006f          	j	80002350 <vTaskDelete+0x34>
8000234c:	fdc42783          	lw	a5,-36(s0)
80002350:	fef42623          	sw	a5,-20(s0)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002354:	fec42783          	lw	a5,-20(s0)
80002358:	00478793          	addi	a5,a5,4
8000235c:	00078513          	mv	a0,a5
80002360:	e34fe0ef          	jal	ra,80000994 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002364:	fec42783          	lw	a5,-20(s0)
80002368:	0287a783          	lw	a5,40(a5)
8000236c:	00078a63          	beqz	a5,80002380 <vTaskDelete+0x64>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002370:	fec42783          	lw	a5,-20(s0)
80002374:	01878793          	addi	a5,a5,24
80002378:	00078513          	mv	a0,a5
8000237c:	e18fe0ef          	jal	ra,80000994 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
80002380:	fec42783          	lw	a5,-20(s0)
80002384:	00478793          	addi	a5,a5,4
80002388:	00078593          	mv	a1,a5
8000238c:	0001f517          	auipc	a0,0x1f
80002390:	55c50513          	addi	a0,a0,1372 # 800218e8 <xTasksWaitingTermination>
80002394:	ca4fe0ef          	jal	ra,80000838 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
80002398:	0001f797          	auipc	a5,0x1f
8000239c:	56478793          	addi	a5,a5,1380 # 800218fc <uxTasksDeleted>
800023a0:	0007a783          	lw	a5,0(a5)
800023a4:	00178713          	addi	a4,a5,1
800023a8:	0001f797          	auipc	a5,0x1f
800023ac:	55478793          	addi	a5,a5,1364 # 800218fc <uxTasksDeleted>
800023b0:	00e7a023          	sw	a4,0(a5)

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
800023b4:	0001f797          	auipc	a5,0x1f
800023b8:	57c78793          	addi	a5,a5,1404 # 80021930 <uxTaskNumber>
800023bc:	0007a783          	lw	a5,0(a5)
800023c0:	00178713          	addi	a4,a5,1
800023c4:	0001f797          	auipc	a5,0x1f
800023c8:	56c78793          	addi	a5,a5,1388 # 80021930 <uxTaskNumber>
800023cc:	00e7a023          	sw	a4,0(a5)

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
800023d0:	660020ef          	jal	ra,80004a30 <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
800023d4:	0001f797          	auipc	a5,0x1f
800023d8:	54c78793          	addi	a5,a5,1356 # 80021920 <xSchedulerRunning>
800023dc:	0007a783          	lw	a5,0(a5)
800023e0:	04078263          	beqz	a5,80002424 <vTaskDelete+0x108>
		{
			if( pxTCB == pxCurrentTCB )
800023e4:	0001f797          	auipc	a5,0x1f
800023e8:	a3878793          	addi	a5,a5,-1480 # 80020e1c <pxCurrentTCB>
800023ec:	0007a783          	lw	a5,0(a5)
800023f0:	fec42703          	lw	a4,-20(s0)
800023f4:	02f71263          	bne	a4,a5,80002418 <vTaskDelete+0xfc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
800023f8:	0001f797          	auipc	a5,0x1f
800023fc:	54078793          	addi	a5,a5,1344 # 80021938 <uxSchedulerSuspended>
80002400:	0007a783          	lw	a5,0(a5)
80002404:	00078663          	beqz	a5,80002410 <vTaskDelete+0xf4>
80002408:	30007073          	csrci	mstatus,0
8000240c:	0000006f          	j	8000240c <vTaskDelete+0xf0>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
80002410:	87cfe0ef          	jal	ra,8000048c <vPortYield>
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
			}
		}
	}
80002414:	0100006f          	j	80002424 <vTaskDelete+0x108>
				taskENTER_CRITICAL();
80002418:	5c4020ef          	jal	ra,800049dc <vTaskEnterCritical>
					prvResetNextTaskUnblockTime();
8000241c:	204020ef          	jal	ra,80004620 <prvResetNextTaskUnblockTime>
				taskEXIT_CRITICAL();
80002420:	610020ef          	jal	ra,80004a30 <vTaskExitCritical>
	}
80002424:	00000013          	nop
80002428:	02c12083          	lw	ra,44(sp)
8000242c:	02812403          	lw	s0,40(sp)
80002430:	03010113          	addi	sp,sp,48
80002434:	00008067          	ret

80002438 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
80002438:	fd010113          	addi	sp,sp,-48
8000243c:	02112623          	sw	ra,44(sp)
80002440:	02812423          	sw	s0,40(sp)
80002444:	03010413          	addi	s0,sp,48
80002448:	fca42e23          	sw	a0,-36(s0)
8000244c:	fcb42c23          	sw	a1,-40(s0)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
80002450:	fe042623          	sw	zero,-20(s0)

		configASSERT( pxPreviousWakeTime );
80002454:	fdc42783          	lw	a5,-36(s0)
80002458:	00079663          	bnez	a5,80002464 <vTaskDelayUntil+0x2c>
8000245c:	30007073          	csrci	mstatus,0
80002460:	0000006f          	j	80002460 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
80002464:	fd842783          	lw	a5,-40(s0)
80002468:	00079663          	bnez	a5,80002474 <vTaskDelayUntil+0x3c>
8000246c:	30007073          	csrci	mstatus,0
80002470:	0000006f          	j	80002470 <vTaskDelayUntil+0x38>
		configASSERT( uxSchedulerSuspended == 0 );
80002474:	0001f797          	auipc	a5,0x1f
80002478:	4c478793          	addi	a5,a5,1220 # 80021938 <uxSchedulerSuspended>
8000247c:	0007a783          	lw	a5,0(a5)
80002480:	00078663          	beqz	a5,8000248c <vTaskDelayUntil+0x54>
80002484:	30007073          	csrci	mstatus,0
80002488:	0000006f          	j	80002488 <vTaskDelayUntil+0x50>

		vTaskSuspendAll();
8000248c:	259000ef          	jal	ra,80002ee4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
80002490:	0001f797          	auipc	a5,0x1f
80002494:	48878793          	addi	a5,a5,1160 # 80021918 <xTickCount>
80002498:	0007a783          	lw	a5,0(a5)
8000249c:	fef42423          	sw	a5,-24(s0)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
800024a0:	fdc42783          	lw	a5,-36(s0)
800024a4:	0007a783          	lw	a5,0(a5)
800024a8:	fd842703          	lw	a4,-40(s0)
800024ac:	00f707b3          	add	a5,a4,a5
800024b0:	fef42223          	sw	a5,-28(s0)

			if( xConstTickCount < *pxPreviousWakeTime )
800024b4:	fdc42783          	lw	a5,-36(s0)
800024b8:	0007a783          	lw	a5,0(a5)
800024bc:	fe842703          	lw	a4,-24(s0)
800024c0:	02f77663          	bleu	a5,a4,800024ec <vTaskDelayUntil+0xb4>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
800024c4:	fdc42783          	lw	a5,-36(s0)
800024c8:	0007a783          	lw	a5,0(a5)
800024cc:	fe442703          	lw	a4,-28(s0)
800024d0:	04f77063          	bleu	a5,a4,80002510 <vTaskDelayUntil+0xd8>
800024d4:	fe442703          	lw	a4,-28(s0)
800024d8:	fe842783          	lw	a5,-24(s0)
800024dc:	02e7fa63          	bleu	a4,a5,80002510 <vTaskDelayUntil+0xd8>
				{
					xShouldDelay = pdTRUE;
800024e0:	00100793          	li	a5,1
800024e4:	fef42623          	sw	a5,-20(s0)
800024e8:	0280006f          	j	80002510 <vTaskDelayUntil+0xd8>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
800024ec:	fdc42783          	lw	a5,-36(s0)
800024f0:	0007a783          	lw	a5,0(a5)
800024f4:	fe442703          	lw	a4,-28(s0)
800024f8:	00f76863          	bltu	a4,a5,80002508 <vTaskDelayUntil+0xd0>
800024fc:	fe442703          	lw	a4,-28(s0)
80002500:	fe842783          	lw	a5,-24(s0)
80002504:	00e7f663          	bleu	a4,a5,80002510 <vTaskDelayUntil+0xd8>
				{
					xShouldDelay = pdTRUE;
80002508:	00100793          	li	a5,1
8000250c:	fef42623          	sw	a5,-20(s0)
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
80002510:	fdc42783          	lw	a5,-36(s0)
80002514:	fe442703          	lw	a4,-28(s0)
80002518:	00e7a023          	sw	a4,0(a5)

			if( xShouldDelay != pdFALSE )
8000251c:	fec42783          	lw	a5,-20(s0)
80002520:	02078263          	beqz	a5,80002544 <vTaskDelayUntil+0x10c>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002524:	0001f797          	auipc	a5,0x1f
80002528:	8f878793          	addi	a5,a5,-1800 # 80020e1c <pxCurrentTCB>
8000252c:	0007a783          	lw	a5,0(a5)
80002530:	00478793          	addi	a5,a5,4
80002534:	00078513          	mv	a0,a5
80002538:	c5cfe0ef          	jal	ra,80000994 <uxListRemove>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
8000253c:	fe442503          	lw	a0,-28(s0)
80002540:	499010ef          	jal	ra,800041d8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
80002544:	1d9000ef          	jal	ra,80002f1c <xTaskResumeAll>
80002548:	fea42023          	sw	a0,-32(s0)

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
8000254c:	fe042783          	lw	a5,-32(s0)
80002550:	00079463          	bnez	a5,80002558 <vTaskDelayUntil+0x120>
		{
			portYIELD_WITHIN_API();
80002554:	f39fd0ef          	jal	ra,8000048c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002558:	00000013          	nop
8000255c:	02c12083          	lw	ra,44(sp)
80002560:	02812403          	lw	s0,40(sp)
80002564:	03010113          	addi	sp,sp,48
80002568:	00008067          	ret

8000256c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
8000256c:	fd010113          	addi	sp,sp,-48
80002570:	02112623          	sw	ra,44(sp)
80002574:	02812423          	sw	s0,40(sp)
80002578:	03010413          	addi	s0,sp,48
8000257c:	fca42e23          	sw	a0,-36(s0)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
80002580:	fe042623          	sw	zero,-20(s0)


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
80002584:	fdc42783          	lw	a5,-36(s0)
80002588:	06078063          	beqz	a5,800025e8 <vTaskDelay+0x7c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
8000258c:	0001f797          	auipc	a5,0x1f
80002590:	3ac78793          	addi	a5,a5,940 # 80021938 <uxSchedulerSuspended>
80002594:	0007a783          	lw	a5,0(a5)
80002598:	00078663          	beqz	a5,800025a4 <vTaskDelay+0x38>
8000259c:	30007073          	csrci	mstatus,0
800025a0:	0000006f          	j	800025a0 <vTaskDelay+0x34>
			vTaskSuspendAll();
800025a4:	141000ef          	jal	ra,80002ee4 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
800025a8:	0001f797          	auipc	a5,0x1f
800025ac:	37078793          	addi	a5,a5,880 # 80021918 <xTickCount>
800025b0:	0007a783          	lw	a5,0(a5)
800025b4:	fdc42703          	lw	a4,-36(s0)
800025b8:	00f707b3          	add	a5,a4,a5
800025bc:	fef42423          	sw	a5,-24(s0)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
800025c0:	0001f797          	auipc	a5,0x1f
800025c4:	85c78793          	addi	a5,a5,-1956 # 80020e1c <pxCurrentTCB>
800025c8:	0007a783          	lw	a5,0(a5)
800025cc:	00478793          	addi	a5,a5,4
800025d0:	00078513          	mv	a0,a5
800025d4:	bc0fe0ef          	jal	ra,80000994 <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
800025d8:	fe842503          	lw	a0,-24(s0)
800025dc:	3fd010ef          	jal	ra,800041d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
800025e0:	13d000ef          	jal	ra,80002f1c <xTaskResumeAll>
800025e4:	fea42623          	sw	a0,-20(s0)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
800025e8:	fec42783          	lw	a5,-20(s0)
800025ec:	00079463          	bnez	a5,800025f4 <vTaskDelay+0x88>
		{
			portYIELD_WITHIN_API();
800025f0:	e9dfd0ef          	jal	ra,8000048c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
800025f4:	00000013          	nop
800025f8:	02c12083          	lw	ra,44(sp)
800025fc:	02812403          	lw	s0,40(sp)
80002600:	03010113          	addi	sp,sp,48
80002604:	00008067          	ret

80002608 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_eTaskGetState == 1 )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
80002608:	fd010113          	addi	sp,sp,-48
8000260c:	02112623          	sw	ra,44(sp)
80002610:	02812423          	sw	s0,40(sp)
80002614:	03010413          	addi	s0,sp,48
80002618:	fca42e23          	sw	a0,-36(s0)
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
8000261c:	fdc42783          	lw	a5,-36(s0)
80002620:	fef42423          	sw	a5,-24(s0)

		configASSERT( pxTCB );
80002624:	fe842783          	lw	a5,-24(s0)
80002628:	00079663          	bnez	a5,80002634 <eTaskGetState+0x2c>
8000262c:	30007073          	csrci	mstatus,0
80002630:	0000006f          	j	80002630 <eTaskGetState+0x28>

		if( pxTCB == pxCurrentTCB )
80002634:	0001e797          	auipc	a5,0x1e
80002638:	7e878793          	addi	a5,a5,2024 # 80020e1c <pxCurrentTCB>
8000263c:	0007a783          	lw	a5,0(a5)
80002640:	fe842703          	lw	a4,-24(s0)
80002644:	00f71663          	bne	a4,a5,80002650 <eTaskGetState+0x48>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
80002648:	fe042623          	sw	zero,-20(s0)
8000264c:	0a40006f          	j	800026f0 <eTaskGetState+0xe8>
		}
		else
		{
			taskENTER_CRITICAL();
80002650:	38c020ef          	jal	ra,800049dc <vTaskEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
80002654:	fe842783          	lw	a5,-24(s0)
80002658:	0147a783          	lw	a5,20(a5)
8000265c:	fef42223          	sw	a5,-28(s0)
			}
			taskEXIT_CRITICAL();
80002660:	3d0020ef          	jal	ra,80004a30 <vTaskExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
80002664:	0001f797          	auipc	a5,0x1f
80002668:	26878793          	addi	a5,a5,616 # 800218cc <pxDelayedTaskList>
8000266c:	0007a783          	lw	a5,0(a5)
80002670:	fe442703          	lw	a4,-28(s0)
80002674:	00f70c63          	beq	a4,a5,8000268c <eTaskGetState+0x84>
80002678:	0001f797          	auipc	a5,0x1f
8000267c:	25878793          	addi	a5,a5,600 # 800218d0 <pxOverflowDelayedTaskList>
80002680:	0007a783          	lw	a5,0(a5)
80002684:	fe442703          	lw	a4,-28(s0)
80002688:	00f71863          	bne	a4,a5,80002698 <eTaskGetState+0x90>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
8000268c:	00200793          	li	a5,2
80002690:	fef42623          	sw	a5,-20(s0)
80002694:	05c0006f          	j	800026f0 <eTaskGetState+0xe8>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
80002698:	fe442703          	lw	a4,-28(s0)
8000269c:	0001f797          	auipc	a5,0x1f
800026a0:	26478793          	addi	a5,a5,612 # 80021900 <xSuspendedTaskList>
800026a4:	02f71463          	bne	a4,a5,800026cc <eTaskGetState+0xc4>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
800026a8:	fe842783          	lw	a5,-24(s0)
800026ac:	0287a783          	lw	a5,40(a5)
800026b0:	00079863          	bnez	a5,800026c0 <eTaskGetState+0xb8>
					{
						eReturn = eSuspended;
800026b4:	00300793          	li	a5,3
800026b8:	fef42623          	sw	a5,-20(s0)
800026bc:	0340006f          	j	800026f0 <eTaskGetState+0xe8>
					}
					else
					{
						eReturn = eBlocked;
800026c0:	00200793          	li	a5,2
800026c4:	fef42623          	sw	a5,-20(s0)
800026c8:	0280006f          	j	800026f0 <eTaskGetState+0xe8>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( pxStateList == &xTasksWaitingTermination )
800026cc:	fe442703          	lw	a4,-28(s0)
800026d0:	0001f797          	auipc	a5,0x1f
800026d4:	21878793          	addi	a5,a5,536 # 800218e8 <xTasksWaitingTermination>
800026d8:	00f71863          	bne	a4,a5,800026e8 <eTaskGetState+0xe0>
				{
					/* The task being queried is referenced from the deleted
					tasks list. */
					eReturn = eDeleted;
800026dc:	00400793          	li	a5,4
800026e0:	fef42623          	sw	a5,-20(s0)
800026e4:	00c0006f          	j	800026f0 <eTaskGetState+0xe8>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
800026e8:	00100793          	li	a5,1
800026ec:	fef42623          	sw	a5,-20(s0)
			}
		}

		return eReturn;
800026f0:	fec42783          	lw	a5,-20(s0)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
800026f4:	00078513          	mv	a0,a5
800026f8:	02c12083          	lw	ra,44(sp)
800026fc:	02812403          	lw	s0,40(sp)
80002700:	03010113          	addi	sp,sp,48
80002704:	00008067          	ret

80002708 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
80002708:	fd010113          	addi	sp,sp,-48
8000270c:	02112623          	sw	ra,44(sp)
80002710:	02812423          	sw	s0,40(sp)
80002714:	03010413          	addi	s0,sp,48
80002718:	fca42e23          	sw	a0,-36(s0)
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
8000271c:	2c0020ef          	jal	ra,800049dc <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
80002720:	fdc42783          	lw	a5,-36(s0)
80002724:	00079a63          	bnez	a5,80002738 <uxTaskPriorityGet+0x30>
80002728:	0001e797          	auipc	a5,0x1e
8000272c:	6f478793          	addi	a5,a5,1780 # 80020e1c <pxCurrentTCB>
80002730:	0007a783          	lw	a5,0(a5)
80002734:	0080006f          	j	8000273c <uxTaskPriorityGet+0x34>
80002738:	fdc42783          	lw	a5,-36(s0)
8000273c:	fef42623          	sw	a5,-20(s0)
			uxReturn = pxTCB->uxPriority;
80002740:	fec42783          	lw	a5,-20(s0)
80002744:	02c7a783          	lw	a5,44(a5)
80002748:	fef42423          	sw	a5,-24(s0)
		}
		taskEXIT_CRITICAL();
8000274c:	2e4020ef          	jal	ra,80004a30 <vTaskExitCritical>

		return uxReturn;
80002750:	fe842783          	lw	a5,-24(s0)
	}
80002754:	00078513          	mv	a0,a5
80002758:	02c12083          	lw	ra,44(sp)
8000275c:	02812403          	lw	s0,40(sp)
80002760:	03010113          	addi	sp,sp,48
80002764:	00008067          	ret

80002768 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
80002768:	fd010113          	addi	sp,sp,-48
8000276c:	02112623          	sw	ra,44(sp)
80002770:	02812423          	sw	s0,40(sp)
80002774:	03010413          	addi	s0,sp,48
80002778:	fca42e23          	sw	a0,-36(s0)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
8000277c:	f39fd0ef          	jal	ra,800006b4 <vPortSetInterruptMask>
80002780:	00050793          	mv	a5,a0
80002784:	fef42623          	sw	a5,-20(s0)
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
80002788:	fdc42783          	lw	a5,-36(s0)
8000278c:	00079a63          	bnez	a5,800027a0 <uxTaskPriorityGetFromISR+0x38>
80002790:	0001e797          	auipc	a5,0x1e
80002794:	68c78793          	addi	a5,a5,1676 # 80020e1c <pxCurrentTCB>
80002798:	0007a783          	lw	a5,0(a5)
8000279c:	0080006f          	j	800027a4 <uxTaskPriorityGetFromISR+0x3c>
800027a0:	fdc42783          	lw	a5,-36(s0)
800027a4:	fef42423          	sw	a5,-24(s0)
			uxReturn = pxTCB->uxPriority;
800027a8:	fe842783          	lw	a5,-24(s0)
800027ac:	02c7a783          	lw	a5,44(a5)
800027b0:	fef42223          	sw	a5,-28(s0)
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
800027b4:	fec42783          	lw	a5,-20(s0)
800027b8:	00078513          	mv	a0,a5
800027bc:	ed1fd0ef          	jal	ra,8000068c <vPortClearInterruptMask>

		return uxReturn;
800027c0:	fe442783          	lw	a5,-28(s0)
	}
800027c4:	00078513          	mv	a0,a5
800027c8:	02c12083          	lw	ra,44(sp)
800027cc:	02812403          	lw	s0,40(sp)
800027d0:	03010113          	addi	sp,sp,48
800027d4:	00008067          	ret

800027d8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
800027d8:	fd010113          	addi	sp,sp,-48
800027dc:	02112623          	sw	ra,44(sp)
800027e0:	02812423          	sw	s0,40(sp)
800027e4:	03010413          	addi	s0,sp,48
800027e8:	fca42e23          	sw	a0,-36(s0)
800027ec:	fcb42c23          	sw	a1,-40(s0)
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
800027f0:	fe042623          	sw	zero,-20(s0)

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
800027f4:	fd842703          	lw	a4,-40(s0)
800027f8:	00400793          	li	a5,4
800027fc:	00e7f663          	bleu	a4,a5,80002808 <vTaskPrioritySet+0x30>
80002800:	30007073          	csrci	mstatus,0
80002804:	0000006f          	j	80002804 <vTaskPrioritySet+0x2c>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
80002808:	fd842703          	lw	a4,-40(s0)
8000280c:	00400793          	li	a5,4
80002810:	00e7f663          	bleu	a4,a5,8000281c <vTaskPrioritySet+0x44>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
80002814:	00400793          	li	a5,4
80002818:	fcf42c23          	sw	a5,-40(s0)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
8000281c:	1c0020ef          	jal	ra,800049dc <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
80002820:	fdc42783          	lw	a5,-36(s0)
80002824:	00079a63          	bnez	a5,80002838 <vTaskPrioritySet+0x60>
80002828:	0001e797          	auipc	a5,0x1e
8000282c:	5f478793          	addi	a5,a5,1524 # 80020e1c <pxCurrentTCB>
80002830:	0007a783          	lw	a5,0(a5)
80002834:	0080006f          	j	8000283c <vTaskPrioritySet+0x64>
80002838:	fdc42783          	lw	a5,-36(s0)
8000283c:	fef42423          	sw	a5,-24(s0)

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
80002840:	fe842783          	lw	a5,-24(s0)
80002844:	0507a783          	lw	a5,80(a5)
80002848:	fef42223          	sw	a5,-28(s0)
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
8000284c:	fe442703          	lw	a4,-28(s0)
80002850:	fd842783          	lw	a5,-40(s0)
80002854:	16f70e63          	beq	a4,a5,800029d0 <vTaskPrioritySet+0x1f8>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
80002858:	fd842703          	lw	a4,-40(s0)
8000285c:	fe442783          	lw	a5,-28(s0)
80002860:	02e7fe63          	bleu	a4,a5,8000289c <vTaskPrioritySet+0xc4>
				{
					if( pxTCB != pxCurrentTCB )
80002864:	0001e797          	auipc	a5,0x1e
80002868:	5b878793          	addi	a5,a5,1464 # 80020e1c <pxCurrentTCB>
8000286c:	0007a783          	lw	a5,0(a5)
80002870:	fe842703          	lw	a4,-24(s0)
80002874:	04f70263          	beq	a4,a5,800028b8 <vTaskPrioritySet+0xe0>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
80002878:	0001e797          	auipc	a5,0x1e
8000287c:	5a478793          	addi	a5,a5,1444 # 80020e1c <pxCurrentTCB>
80002880:	0007a783          	lw	a5,0(a5)
80002884:	02c7a783          	lw	a5,44(a5)
80002888:	fd842703          	lw	a4,-40(s0)
8000288c:	02f76663          	bltu	a4,a5,800028b8 <vTaskPrioritySet+0xe0>
						{
							xYieldRequired = pdTRUE;
80002890:	00100793          	li	a5,1
80002894:	fef42623          	sw	a5,-20(s0)
80002898:	0200006f          	j	800028b8 <vTaskPrioritySet+0xe0>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
8000289c:	0001e797          	auipc	a5,0x1e
800028a0:	58078793          	addi	a5,a5,1408 # 80020e1c <pxCurrentTCB>
800028a4:	0007a783          	lw	a5,0(a5)
800028a8:	fe842703          	lw	a4,-24(s0)
800028ac:	00f71663          	bne	a4,a5,800028b8 <vTaskPrioritySet+0xe0>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
800028b0:	00100793          	li	a5,1
800028b4:	fef42623          	sw	a5,-20(s0)
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
800028b8:	fe842783          	lw	a5,-24(s0)
800028bc:	02c7a783          	lw	a5,44(a5)
800028c0:	fef42023          	sw	a5,-32(s0)

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
800028c4:	fe842783          	lw	a5,-24(s0)
800028c8:	0507a703          	lw	a4,80(a5)
800028cc:	fe842783          	lw	a5,-24(s0)
800028d0:	02c7a783          	lw	a5,44(a5)
800028d4:	00f71863          	bne	a4,a5,800028e4 <vTaskPrioritySet+0x10c>
					{
						pxTCB->uxPriority = uxNewPriority;
800028d8:	fe842783          	lw	a5,-24(s0)
800028dc:	fd842703          	lw	a4,-40(s0)
800028e0:	02e7a623          	sw	a4,44(a5)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
800028e4:	fe842783          	lw	a5,-24(s0)
800028e8:	fd842703          	lw	a4,-40(s0)
800028ec:	04e7a823          	sw	a4,80(a5)
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
800028f0:	fe842783          	lw	a5,-24(s0)
800028f4:	0187a783          	lw	a5,24(a5)
800028f8:	0007cc63          	bltz	a5,80002910 <vTaskPrioritySet+0x138>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
800028fc:	00500713          	li	a4,5
80002900:	fd842783          	lw	a5,-40(s0)
80002904:	40f70733          	sub	a4,a4,a5
80002908:	fe842783          	lw	a5,-24(s0)
8000290c:	00e7ac23          	sw	a4,24(a5)

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
80002910:	fe842783          	lw	a5,-24(s0)
80002914:	0147a683          	lw	a3,20(a5)
80002918:	fe042703          	lw	a4,-32(s0)
8000291c:	00070793          	mv	a5,a4
80002920:	00279793          	slli	a5,a5,0x2
80002924:	00e787b3          	add	a5,a5,a4
80002928:	00279793          	slli	a5,a5,0x2
8000292c:	0001f717          	auipc	a4,0x1f
80002930:	f1470713          	addi	a4,a4,-236 # 80021840 <__bss_start>
80002934:	00e787b3          	add	a5,a5,a4
80002938:	00f69663          	bne	a3,a5,80002944 <vTaskPrioritySet+0x16c>
8000293c:	00100793          	li	a5,1
80002940:	0080006f          	j	80002948 <vTaskPrioritySet+0x170>
80002944:	00000793          	li	a5,0
80002948:	06078c63          	beqz	a5,800029c0 <vTaskPrioritySet+0x1e8>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
8000294c:	fe842783          	lw	a5,-24(s0)
80002950:	00478793          	addi	a5,a5,4
80002954:	00078513          	mv	a0,a5
80002958:	83cfe0ef          	jal	ra,80000994 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
8000295c:	fe842783          	lw	a5,-24(s0)
80002960:	02c7a703          	lw	a4,44(a5)
80002964:	0001f797          	auipc	a5,0x1f
80002968:	fb878793          	addi	a5,a5,-72 # 8002191c <uxTopReadyPriority>
8000296c:	0007a783          	lw	a5,0(a5)
80002970:	00e7fc63          	bleu	a4,a5,80002988 <vTaskPrioritySet+0x1b0>
80002974:	fe842783          	lw	a5,-24(s0)
80002978:	02c7a703          	lw	a4,44(a5)
8000297c:	0001f797          	auipc	a5,0x1f
80002980:	fa078793          	addi	a5,a5,-96 # 8002191c <uxTopReadyPriority>
80002984:	00e7a023          	sw	a4,0(a5)
80002988:	fe842783          	lw	a5,-24(s0)
8000298c:	02c7a703          	lw	a4,44(a5)
80002990:	00070793          	mv	a5,a4
80002994:	00279793          	slli	a5,a5,0x2
80002998:	00e787b3          	add	a5,a5,a4
8000299c:	00279793          	slli	a5,a5,0x2
800029a0:	0001f717          	auipc	a4,0x1f
800029a4:	ea070713          	addi	a4,a4,-352 # 80021840 <__bss_start>
800029a8:	00e78733          	add	a4,a5,a4
800029ac:	fe842783          	lw	a5,-24(s0)
800029b0:	00478793          	addi	a5,a5,4
800029b4:	00078593          	mv	a1,a5
800029b8:	00070513          	mv	a0,a4
800029bc:	e7dfd0ef          	jal	ra,80000838 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired == pdTRUE )
800029c0:	fec42703          	lw	a4,-20(s0)
800029c4:	00100793          	li	a5,1
800029c8:	00f71463          	bne	a4,a5,800029d0 <vTaskPrioritySet+0x1f8>
				{
					taskYIELD_IF_USING_PREEMPTION();
800029cc:	ac1fd0ef          	jal	ra,8000048c <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
800029d0:	060020ef          	jal	ra,80004a30 <vTaskExitCritical>
	}
800029d4:	00000013          	nop
800029d8:	02c12083          	lw	ra,44(sp)
800029dc:	02812403          	lw	s0,40(sp)
800029e0:	03010113          	addi	sp,sp,48
800029e4:	00008067          	ret

800029e8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
800029e8:	fd010113          	addi	sp,sp,-48
800029ec:	02112623          	sw	ra,44(sp)
800029f0:	02812423          	sw	s0,40(sp)
800029f4:	03010413          	addi	s0,sp,48
800029f8:	fca42e23          	sw	a0,-36(s0)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
800029fc:	7e1010ef          	jal	ra,800049dc <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
80002a00:	fdc42783          	lw	a5,-36(s0)
80002a04:	00079a63          	bnez	a5,80002a18 <vTaskSuspend+0x30>
80002a08:	0001e797          	auipc	a5,0x1e
80002a0c:	41478793          	addi	a5,a5,1044 # 80020e1c <pxCurrentTCB>
80002a10:	0007a783          	lw	a5,0(a5)
80002a14:	0080006f          	j	80002a1c <vTaskSuspend+0x34>
80002a18:	fdc42783          	lw	a5,-36(s0)
80002a1c:	fef42623          	sw	a5,-20(s0)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002a20:	fec42783          	lw	a5,-20(s0)
80002a24:	00478793          	addi	a5,a5,4
80002a28:	00078513          	mv	a0,a5
80002a2c:	f69fd0ef          	jal	ra,80000994 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002a30:	fec42783          	lw	a5,-20(s0)
80002a34:	0287a783          	lw	a5,40(a5)
80002a38:	00078a63          	beqz	a5,80002a4c <vTaskSuspend+0x64>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002a3c:	fec42783          	lw	a5,-20(s0)
80002a40:	01878793          	addi	a5,a5,24
80002a44:	00078513          	mv	a0,a5
80002a48:	f4dfd0ef          	jal	ra,80000994 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
80002a4c:	fec42783          	lw	a5,-20(s0)
80002a50:	00478793          	addi	a5,a5,4
80002a54:	00078593          	mv	a1,a5
80002a58:	0001f517          	auipc	a0,0x1f
80002a5c:	ea850513          	addi	a0,a0,-344 # 80021900 <xSuspendedTaskList>
80002a60:	dd9fd0ef          	jal	ra,80000838 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
80002a64:	7cd010ef          	jal	ra,80004a30 <vTaskExitCritical>

		if( pxTCB == pxCurrentTCB )
80002a68:	0001e797          	auipc	a5,0x1e
80002a6c:	3b478793          	addi	a5,a5,948 # 80020e1c <pxCurrentTCB>
80002a70:	0007a783          	lw	a5,0(a5)
80002a74:	fec42703          	lw	a4,-20(s0)
80002a78:	06f71463          	bne	a4,a5,80002ae0 <vTaskSuspend+0xf8>
		{
			if( xSchedulerRunning != pdFALSE )
80002a7c:	0001f797          	auipc	a5,0x1f
80002a80:	ea478793          	addi	a5,a5,-348 # 80021920 <xSchedulerRunning>
80002a84:	0007a783          	lw	a5,0(a5)
80002a88:	02078263          	beqz	a5,80002aac <vTaskSuspend+0xc4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
80002a8c:	0001f797          	auipc	a5,0x1f
80002a90:	eac78793          	addi	a5,a5,-340 # 80021938 <uxSchedulerSuspended>
80002a94:	0007a783          	lw	a5,0(a5)
80002a98:	00078663          	beqz	a5,80002aa4 <vTaskSuspend+0xbc>
80002a9c:	30007073          	csrci	mstatus,0
80002aa0:	0000006f          	j	80002aa0 <vTaskSuspend+0xb8>
				portYIELD_WITHIN_API();
80002aa4:	9e9fd0ef          	jal	ra,8000048c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
80002aa8:	0540006f          	j	80002afc <vTaskSuspend+0x114>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
80002aac:	0001f797          	auipc	a5,0x1f
80002ab0:	e5478793          	addi	a5,a5,-428 # 80021900 <xSuspendedTaskList>
80002ab4:	0007a703          	lw	a4,0(a5)
80002ab8:	0001f797          	auipc	a5,0x1f
80002abc:	e5c78793          	addi	a5,a5,-420 # 80021914 <uxCurrentNumberOfTasks>
80002ac0:	0007a783          	lw	a5,0(a5)
80002ac4:	00f71a63          	bne	a4,a5,80002ad8 <vTaskSuspend+0xf0>
					pxCurrentTCB = NULL;
80002ac8:	0001e797          	auipc	a5,0x1e
80002acc:	35478793          	addi	a5,a5,852 # 80020e1c <pxCurrentTCB>
80002ad0:	0007a023          	sw	zero,0(a5)
	}
80002ad4:	0280006f          	j	80002afc <vTaskSuspend+0x114>
					vTaskSwitchContext();
80002ad8:	32d000ef          	jal	ra,80003604 <vTaskSwitchContext>
	}
80002adc:	0200006f          	j	80002afc <vTaskSuspend+0x114>
			if( xSchedulerRunning != pdFALSE )
80002ae0:	0001f797          	auipc	a5,0x1f
80002ae4:	e4078793          	addi	a5,a5,-448 # 80021920 <xSchedulerRunning>
80002ae8:	0007a783          	lw	a5,0(a5)
80002aec:	00078863          	beqz	a5,80002afc <vTaskSuspend+0x114>
				taskENTER_CRITICAL();
80002af0:	6ed010ef          	jal	ra,800049dc <vTaskEnterCritical>
					prvResetNextTaskUnblockTime();
80002af4:	32d010ef          	jal	ra,80004620 <prvResetNextTaskUnblockTime>
				taskEXIT_CRITICAL();
80002af8:	739010ef          	jal	ra,80004a30 <vTaskExitCritical>
	}
80002afc:	00000013          	nop
80002b00:	02c12083          	lw	ra,44(sp)
80002b04:	02812403          	lw	s0,40(sp)
80002b08:	03010113          	addi	sp,sp,48
80002b0c:	00008067          	ret

80002b10 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
80002b10:	fd010113          	addi	sp,sp,-48
80002b14:	02812623          	sw	s0,44(sp)
80002b18:	03010413          	addi	s0,sp,48
80002b1c:	fca42e23          	sw	a0,-36(s0)
	BaseType_t xReturn = pdFALSE;
80002b20:	fe042623          	sw	zero,-20(s0)
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
80002b24:	fdc42783          	lw	a5,-36(s0)
80002b28:	fef42423          	sw	a5,-24(s0)

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
80002b2c:	fdc42783          	lw	a5,-36(s0)
80002b30:	00079663          	bnez	a5,80002b3c <prvTaskIsTaskSuspended+0x2c>
80002b34:	30007073          	csrci	mstatus,0
80002b38:	0000006f          	j	80002b38 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
80002b3c:	fe842783          	lw	a5,-24(s0)
80002b40:	0147a703          	lw	a4,20(a5)
80002b44:	0001f797          	auipc	a5,0x1f
80002b48:	dbc78793          	addi	a5,a5,-580 # 80021900 <xSuspendedTaskList>
80002b4c:	00f71663          	bne	a4,a5,80002b58 <prvTaskIsTaskSuspended+0x48>
80002b50:	00100793          	li	a5,1
80002b54:	0080006f          	j	80002b5c <prvTaskIsTaskSuspended+0x4c>
80002b58:	00000793          	li	a5,0
80002b5c:	02078e63          	beqz	a5,80002b98 <prvTaskIsTaskSuspended+0x88>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
80002b60:	fe842783          	lw	a5,-24(s0)
80002b64:	0287a703          	lw	a4,40(a5)
80002b68:	0001f797          	auipc	a5,0x1f
80002b6c:	d6c78793          	addi	a5,a5,-660 # 800218d4 <xPendingReadyList>
80002b70:	02f70463          	beq	a4,a5,80002b98 <prvTaskIsTaskSuspended+0x88>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
80002b74:	fe842783          	lw	a5,-24(s0)
80002b78:	0287a783          	lw	a5,40(a5)
80002b7c:	00079663          	bnez	a5,80002b88 <prvTaskIsTaskSuspended+0x78>
80002b80:	00100793          	li	a5,1
80002b84:	0080006f          	j	80002b8c <prvTaskIsTaskSuspended+0x7c>
80002b88:	00000793          	li	a5,0
80002b8c:	00078663          	beqz	a5,80002b98 <prvTaskIsTaskSuspended+0x88>
				{
					xReturn = pdTRUE;
80002b90:	00100793          	li	a5,1
80002b94:	fef42623          	sw	a5,-20(s0)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
80002b98:	fec42783          	lw	a5,-20(s0)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
80002b9c:	00078513          	mv	a0,a5
80002ba0:	02c12403          	lw	s0,44(sp)
80002ba4:	03010113          	addi	sp,sp,48
80002ba8:	00008067          	ret

80002bac <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
80002bac:	fd010113          	addi	sp,sp,-48
80002bb0:	02112623          	sw	ra,44(sp)
80002bb4:	02812423          	sw	s0,40(sp)
80002bb8:	03010413          	addi	s0,sp,48
80002bbc:	fca42e23          	sw	a0,-36(s0)
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
80002bc0:	fdc42783          	lw	a5,-36(s0)
80002bc4:	fef42623          	sw	a5,-20(s0)

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
80002bc8:	fdc42783          	lw	a5,-36(s0)
80002bcc:	00079663          	bnez	a5,80002bd8 <vTaskResume+0x2c>
80002bd0:	30007073          	csrci	mstatus,0
80002bd4:	0000006f          	j	80002bd4 <vTaskResume+0x28>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
80002bd8:	fec42783          	lw	a5,-20(s0)
80002bdc:	0c078463          	beqz	a5,80002ca4 <vTaskResume+0xf8>
80002be0:	0001e797          	auipc	a5,0x1e
80002be4:	23c78793          	addi	a5,a5,572 # 80020e1c <pxCurrentTCB>
80002be8:	0007a783          	lw	a5,0(a5)
80002bec:	fec42703          	lw	a4,-20(s0)
80002bf0:	0af70a63          	beq	a4,a5,80002ca4 <vTaskResume+0xf8>
		{
			taskENTER_CRITICAL();
80002bf4:	5e9010ef          	jal	ra,800049dc <vTaskEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
80002bf8:	fec42503          	lw	a0,-20(s0)
80002bfc:	f15ff0ef          	jal	ra,80002b10 <prvTaskIsTaskSuspended>
80002c00:	00050713          	mv	a4,a0
80002c04:	00100793          	li	a5,1
80002c08:	08f71c63          	bne	a4,a5,80002ca0 <vTaskResume+0xf4>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
80002c0c:	fec42783          	lw	a5,-20(s0)
80002c10:	00478793          	addi	a5,a5,4
80002c14:	00078513          	mv	a0,a5
80002c18:	d7dfd0ef          	jal	ra,80000994 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
80002c1c:	fec42783          	lw	a5,-20(s0)
80002c20:	02c7a703          	lw	a4,44(a5)
80002c24:	0001f797          	auipc	a5,0x1f
80002c28:	cf878793          	addi	a5,a5,-776 # 8002191c <uxTopReadyPriority>
80002c2c:	0007a783          	lw	a5,0(a5)
80002c30:	00e7fc63          	bleu	a4,a5,80002c48 <vTaskResume+0x9c>
80002c34:	fec42783          	lw	a5,-20(s0)
80002c38:	02c7a703          	lw	a4,44(a5)
80002c3c:	0001f797          	auipc	a5,0x1f
80002c40:	ce078793          	addi	a5,a5,-800 # 8002191c <uxTopReadyPriority>
80002c44:	00e7a023          	sw	a4,0(a5)
80002c48:	fec42783          	lw	a5,-20(s0)
80002c4c:	02c7a703          	lw	a4,44(a5)
80002c50:	00070793          	mv	a5,a4
80002c54:	00279793          	slli	a5,a5,0x2
80002c58:	00e787b3          	add	a5,a5,a4
80002c5c:	00279793          	slli	a5,a5,0x2
80002c60:	0001f717          	auipc	a4,0x1f
80002c64:	be070713          	addi	a4,a4,-1056 # 80021840 <__bss_start>
80002c68:	00e78733          	add	a4,a5,a4
80002c6c:	fec42783          	lw	a5,-20(s0)
80002c70:	00478793          	addi	a5,a5,4
80002c74:	00078593          	mv	a1,a5
80002c78:	00070513          	mv	a0,a4
80002c7c:	bbdfd0ef          	jal	ra,80000838 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80002c80:	fec42783          	lw	a5,-20(s0)
80002c84:	02c7a703          	lw	a4,44(a5)
80002c88:	0001e797          	auipc	a5,0x1e
80002c8c:	19478793          	addi	a5,a5,404 # 80020e1c <pxCurrentTCB>
80002c90:	0007a783          	lw	a5,0(a5)
80002c94:	02c7a783          	lw	a5,44(a5)
80002c98:	00f76463          	bltu	a4,a5,80002ca0 <vTaskResume+0xf4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
80002c9c:	ff0fd0ef          	jal	ra,8000048c <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
80002ca0:	591010ef          	jal	ra,80004a30 <vTaskExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002ca4:	00000013          	nop
80002ca8:	02c12083          	lw	ra,44(sp)
80002cac:	02812403          	lw	s0,40(sp)
80002cb0:	03010113          	addi	sp,sp,48
80002cb4:	00008067          	ret

80002cb8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
80002cb8:	fd010113          	addi	sp,sp,-48
80002cbc:	02112623          	sw	ra,44(sp)
80002cc0:	02812423          	sw	s0,40(sp)
80002cc4:	03010413          	addi	s0,sp,48
80002cc8:	fca42e23          	sw	a0,-36(s0)
	BaseType_t xYieldRequired = pdFALSE;
80002ccc:	fe042623          	sw	zero,-20(s0)
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
80002cd0:	fdc42783          	lw	a5,-36(s0)
80002cd4:	fef42423          	sw	a5,-24(s0)
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
80002cd8:	fdc42783          	lw	a5,-36(s0)
80002cdc:	00079663          	bnez	a5,80002ce8 <xTaskResumeFromISR+0x30>
80002ce0:	30007073          	csrci	mstatus,0
80002ce4:	0000006f          	j	80002ce4 <xTaskResumeFromISR+0x2c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80002ce8:	9cdfd0ef          	jal	ra,800006b4 <vPortSetInterruptMask>
80002cec:	00050793          	mv	a5,a0
80002cf0:	fef42223          	sw	a5,-28(s0)
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
80002cf4:	fe842503          	lw	a0,-24(s0)
80002cf8:	e19ff0ef          	jal	ra,80002b10 <prvTaskIsTaskSuspended>
80002cfc:	00050713          	mv	a4,a0
80002d00:	00100793          	li	a5,1
80002d04:	0cf71463          	bne	a4,a5,80002dcc <xTaskResumeFromISR+0x114>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002d08:	0001f797          	auipc	a5,0x1f
80002d0c:	c3078793          	addi	a5,a5,-976 # 80021938 <uxSchedulerSuspended>
80002d10:	0007a783          	lw	a5,0(a5)
80002d14:	0a079063          	bnez	a5,80002db4 <xTaskResumeFromISR+0xfc>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80002d18:	fe842783          	lw	a5,-24(s0)
80002d1c:	02c7a703          	lw	a4,44(a5)
80002d20:	0001e797          	auipc	a5,0x1e
80002d24:	0fc78793          	addi	a5,a5,252 # 80020e1c <pxCurrentTCB>
80002d28:	0007a783          	lw	a5,0(a5)
80002d2c:	02c7a783          	lw	a5,44(a5)
80002d30:	00f76663          	bltu	a4,a5,80002d3c <xTaskResumeFromISR+0x84>
					{
						xYieldRequired = pdTRUE;
80002d34:	00100793          	li	a5,1
80002d38:	fef42623          	sw	a5,-20(s0)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
80002d3c:	fe842783          	lw	a5,-24(s0)
80002d40:	00478793          	addi	a5,a5,4
80002d44:	00078513          	mv	a0,a5
80002d48:	c4dfd0ef          	jal	ra,80000994 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
80002d4c:	fe842783          	lw	a5,-24(s0)
80002d50:	02c7a703          	lw	a4,44(a5)
80002d54:	0001f797          	auipc	a5,0x1f
80002d58:	bc878793          	addi	a5,a5,-1080 # 8002191c <uxTopReadyPriority>
80002d5c:	0007a783          	lw	a5,0(a5)
80002d60:	00e7fc63          	bleu	a4,a5,80002d78 <xTaskResumeFromISR+0xc0>
80002d64:	fe842783          	lw	a5,-24(s0)
80002d68:	02c7a703          	lw	a4,44(a5)
80002d6c:	0001f797          	auipc	a5,0x1f
80002d70:	bb078793          	addi	a5,a5,-1104 # 8002191c <uxTopReadyPriority>
80002d74:	00e7a023          	sw	a4,0(a5)
80002d78:	fe842783          	lw	a5,-24(s0)
80002d7c:	02c7a703          	lw	a4,44(a5)
80002d80:	00070793          	mv	a5,a4
80002d84:	00279793          	slli	a5,a5,0x2
80002d88:	00e787b3          	add	a5,a5,a4
80002d8c:	00279793          	slli	a5,a5,0x2
80002d90:	0001f717          	auipc	a4,0x1f
80002d94:	ab070713          	addi	a4,a4,-1360 # 80021840 <__bss_start>
80002d98:	00e78733          	add	a4,a5,a4
80002d9c:	fe842783          	lw	a5,-24(s0)
80002da0:	00478793          	addi	a5,a5,4
80002da4:	00078593          	mv	a1,a5
80002da8:	00070513          	mv	a0,a4
80002dac:	a8dfd0ef          	jal	ra,80000838 <vListInsertEnd>
80002db0:	01c0006f          	j	80002dcc <xTaskResumeFromISR+0x114>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
80002db4:	fe842783          	lw	a5,-24(s0)
80002db8:	01878793          	addi	a5,a5,24
80002dbc:	00078593          	mv	a1,a5
80002dc0:	0001f517          	auipc	a0,0x1f
80002dc4:	b1450513          	addi	a0,a0,-1260 # 800218d4 <xPendingReadyList>
80002dc8:	a71fd0ef          	jal	ra,80000838 <vListInsertEnd>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
80002dcc:	fe442783          	lw	a5,-28(s0)
80002dd0:	00078513          	mv	a0,a5
80002dd4:	8b9fd0ef          	jal	ra,8000068c <vPortClearInterruptMask>

		return xYieldRequired;
80002dd8:	fec42783          	lw	a5,-20(s0)
	}
80002ddc:	00078513          	mv	a0,a5
80002de0:	02c12083          	lw	ra,44(sp)
80002de4:	02812403          	lw	s0,40(sp)
80002de8:	03010113          	addi	sp,sp,48
80002dec:	00008067          	ret

80002df0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
80002df0:	fe010113          	addi	sp,sp,-32
80002df4:	00112e23          	sw	ra,28(sp)
80002df8:	00812c23          	sw	s0,24(sp)
80002dfc:	02010413          	addi	s0,sp,32
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
80002e00:	00000893          	li	a7,0
80002e04:	00000813          	li	a6,0
80002e08:	00000793          	li	a5,0
80002e0c:	00000713          	li	a4,0
80002e10:	00000693          	li	a3,0
80002e14:	40000613          	li	a2,1024
80002e18:	0001d597          	auipc	a1,0x1d
80002e1c:	1e858593          	addi	a1,a1,488 # 80020000 <__rodata_start>
80002e20:	00001517          	auipc	a0,0x1
80002e24:	0b050513          	addi	a0,a0,176 # 80003ed0 <prvIdleTask>
80002e28:	a60ff0ef          	jal	ra,80002088 <xTaskGenericCreate>
80002e2c:	fea42623          	sw	a0,-20(s0)
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
80002e30:	fec42703          	lw	a4,-20(s0)
80002e34:	00100793          	li	a5,1
80002e38:	00f71663          	bne	a4,a5,80002e44 <vTaskStartScheduler+0x54>
		{
			xReturn = xTimerCreateTimerTask();
80002e3c:	5e0020ef          	jal	ra,8000541c <xTimerCreateTimerTask>
80002e40:	fea42623          	sw	a0,-20(s0)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
80002e44:	fec42703          	lw	a4,-20(s0)
80002e48:	00100793          	li	a5,1
80002e4c:	02f71e63          	bne	a4,a5,80002e88 <vTaskStartScheduler+0x98>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
80002e50:	30007073          	csrci	mstatus,0
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
80002e54:	0001f797          	auipc	a5,0x1f
80002e58:	ae078793          	addi	a5,a5,-1312 # 80021934 <xNextTaskUnblockTime>
80002e5c:	fff00713          	li	a4,-1
80002e60:	00e7a023          	sw	a4,0(a5)
		xSchedulerRunning = pdTRUE;
80002e64:	0001f797          	auipc	a5,0x1f
80002e68:	abc78793          	addi	a5,a5,-1348 # 80021920 <xSchedulerRunning>
80002e6c:	00100713          	li	a4,1
80002e70:	00e7a023          	sw	a4,0(a5)
		xTickCount = ( TickType_t ) 0U;
80002e74:	0001f797          	auipc	a5,0x1f
80002e78:	aa478793          	addi	a5,a5,-1372 # 80021918 <xTickCount>
80002e7c:	0007a023          	sw	zero,0(a5)
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
80002e80:	d68fd0ef          	jal	ra,800003e8 <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
80002e84:	0140006f          	j	80002e98 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn );
80002e88:	fec42783          	lw	a5,-20(s0)
80002e8c:	00079663          	bnez	a5,80002e98 <vTaskStartScheduler+0xa8>
80002e90:	30007073          	csrci	mstatus,0
80002e94:	0000006f          	j	80002e94 <vTaskStartScheduler+0xa4>
}
80002e98:	00000013          	nop
80002e9c:	01c12083          	lw	ra,28(sp)
80002ea0:	01812403          	lw	s0,24(sp)
80002ea4:	02010113          	addi	sp,sp,32
80002ea8:	00008067          	ret

80002eac <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
80002eac:	ff010113          	addi	sp,sp,-16
80002eb0:	00112623          	sw	ra,12(sp)
80002eb4:	00812423          	sw	s0,8(sp)
80002eb8:	01010413          	addi	s0,sp,16
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
80002ebc:	30007073          	csrci	mstatus,0
	xSchedulerRunning = pdFALSE;
80002ec0:	0001f797          	auipc	a5,0x1f
80002ec4:	a6078793          	addi	a5,a5,-1440 # 80021920 <xSchedulerRunning>
80002ec8:	0007a023          	sw	zero,0(a5)
	vPortEndScheduler();
80002ecc:	dbcfd0ef          	jal	ra,80000488 <vPortEndScheduler>
}
80002ed0:	00000013          	nop
80002ed4:	00c12083          	lw	ra,12(sp)
80002ed8:	00812403          	lw	s0,8(sp)
80002edc:	01010113          	addi	sp,sp,16
80002ee0:	00008067          	ret

80002ee4 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
80002ee4:	ff010113          	addi	sp,sp,-16
80002ee8:	00812623          	sw	s0,12(sp)
80002eec:	01010413          	addi	s0,sp,16
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
80002ef0:	0001f797          	auipc	a5,0x1f
80002ef4:	a4878793          	addi	a5,a5,-1464 # 80021938 <uxSchedulerSuspended>
80002ef8:	0007a783          	lw	a5,0(a5)
80002efc:	00178713          	addi	a4,a5,1
80002f00:	0001f797          	auipc	a5,0x1f
80002f04:	a3878793          	addi	a5,a5,-1480 # 80021938 <uxSchedulerSuspended>
80002f08:	00e7a023          	sw	a4,0(a5)
}
80002f0c:	00000013          	nop
80002f10:	00c12403          	lw	s0,12(sp)
80002f14:	01010113          	addi	sp,sp,16
80002f18:	00008067          	ret

80002f1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
80002f1c:	fe010113          	addi	sp,sp,-32
80002f20:	00112e23          	sw	ra,28(sp)
80002f24:	00812c23          	sw	s0,24(sp)
80002f28:	02010413          	addi	s0,sp,32
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
80002f2c:	fe042623          	sw	zero,-20(s0)

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
80002f30:	0001f797          	auipc	a5,0x1f
80002f34:	a0878793          	addi	a5,a5,-1528 # 80021938 <uxSchedulerSuspended>
80002f38:	0007a783          	lw	a5,0(a5)
80002f3c:	00079663          	bnez	a5,80002f48 <xTaskResumeAll+0x2c>
80002f40:	30007073          	csrci	mstatus,0
80002f44:	0000006f          	j	80002f44 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
80002f48:	295010ef          	jal	ra,800049dc <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
80002f4c:	0001f797          	auipc	a5,0x1f
80002f50:	9ec78793          	addi	a5,a5,-1556 # 80021938 <uxSchedulerSuspended>
80002f54:	0007a783          	lw	a5,0(a5)
80002f58:	fff78713          	addi	a4,a5,-1
80002f5c:	0001f797          	auipc	a5,0x1f
80002f60:	9dc78793          	addi	a5,a5,-1572 # 80021938 <uxSchedulerSuspended>
80002f64:	00e7a023          	sw	a4,0(a5)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002f68:	0001f797          	auipc	a5,0x1f
80002f6c:	9d078793          	addi	a5,a5,-1584 # 80021938 <uxSchedulerSuspended>
80002f70:	0007a783          	lw	a5,0(a5)
80002f74:	16079463          	bnez	a5,800030dc <xTaskResumeAll+0x1c0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
80002f78:	0001f797          	auipc	a5,0x1f
80002f7c:	99c78793          	addi	a5,a5,-1636 # 80021914 <uxCurrentNumberOfTasks>
80002f80:	0007a783          	lw	a5,0(a5)
80002f84:	14078c63          	beqz	a5,800030dc <xTaskResumeAll+0x1c0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002f88:	0c80006f          	j	80003050 <xTaskResumeAll+0x134>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
80002f8c:	0001f797          	auipc	a5,0x1f
80002f90:	94878793          	addi	a5,a5,-1720 # 800218d4 <xPendingReadyList>
80002f94:	00c7a783          	lw	a5,12(a5)
80002f98:	00c7a783          	lw	a5,12(a5)
80002f9c:	fef42423          	sw	a5,-24(s0)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002fa0:	fe842783          	lw	a5,-24(s0)
80002fa4:	01878793          	addi	a5,a5,24
80002fa8:	00078513          	mv	a0,a5
80002fac:	9e9fd0ef          	jal	ra,80000994 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002fb0:	fe842783          	lw	a5,-24(s0)
80002fb4:	00478793          	addi	a5,a5,4
80002fb8:	00078513          	mv	a0,a5
80002fbc:	9d9fd0ef          	jal	ra,80000994 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
80002fc0:	fe842783          	lw	a5,-24(s0)
80002fc4:	02c7a703          	lw	a4,44(a5)
80002fc8:	0001f797          	auipc	a5,0x1f
80002fcc:	95478793          	addi	a5,a5,-1708 # 8002191c <uxTopReadyPriority>
80002fd0:	0007a783          	lw	a5,0(a5)
80002fd4:	00e7fc63          	bleu	a4,a5,80002fec <xTaskResumeAll+0xd0>
80002fd8:	fe842783          	lw	a5,-24(s0)
80002fdc:	02c7a703          	lw	a4,44(a5)
80002fe0:	0001f797          	auipc	a5,0x1f
80002fe4:	93c78793          	addi	a5,a5,-1732 # 8002191c <uxTopReadyPriority>
80002fe8:	00e7a023          	sw	a4,0(a5)
80002fec:	fe842783          	lw	a5,-24(s0)
80002ff0:	02c7a703          	lw	a4,44(a5)
80002ff4:	00070793          	mv	a5,a4
80002ff8:	00279793          	slli	a5,a5,0x2
80002ffc:	00e787b3          	add	a5,a5,a4
80003000:	00279793          	slli	a5,a5,0x2
80003004:	0001f717          	auipc	a4,0x1f
80003008:	83c70713          	addi	a4,a4,-1988 # 80021840 <__bss_start>
8000300c:	00e78733          	add	a4,a5,a4
80003010:	fe842783          	lw	a5,-24(s0)
80003014:	00478793          	addi	a5,a5,4
80003018:	00078593          	mv	a1,a5
8000301c:	00070513          	mv	a0,a4
80003020:	819fd0ef          	jal	ra,80000838 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80003024:	fe842783          	lw	a5,-24(s0)
80003028:	02c7a703          	lw	a4,44(a5)
8000302c:	0001e797          	auipc	a5,0x1e
80003030:	df078793          	addi	a5,a5,-528 # 80020e1c <pxCurrentTCB>
80003034:	0007a783          	lw	a5,0(a5)
80003038:	02c7a783          	lw	a5,44(a5)
8000303c:	00f76a63          	bltu	a4,a5,80003050 <xTaskResumeAll+0x134>
					{
						xYieldPending = pdTRUE;
80003040:	0001f797          	auipc	a5,0x1f
80003044:	8e878793          	addi	a5,a5,-1816 # 80021928 <xYieldPending>
80003048:	00100713          	li	a4,1
8000304c:	00e7a023          	sw	a4,0(a5)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80003050:	0001f797          	auipc	a5,0x1f
80003054:	88478793          	addi	a5,a5,-1916 # 800218d4 <xPendingReadyList>
80003058:	0007a783          	lw	a5,0(a5)
8000305c:	f20798e3          	bnez	a5,80002f8c <xTaskResumeAll+0x70>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
80003060:	0001f797          	auipc	a5,0x1f
80003064:	8c478793          	addi	a5,a5,-1852 # 80021924 <uxPendedTicks>
80003068:	0007a783          	lw	a5,0(a5)
8000306c:	04078863          	beqz	a5,800030bc <xTaskResumeAll+0x1a0>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
80003070:	03c0006f          	j	800030ac <xTaskResumeAll+0x190>
					{
						if( xTaskIncrementTick() != pdFALSE )
80003074:	2ec000ef          	jal	ra,80003360 <xTaskIncrementTick>
80003078:	00050793          	mv	a5,a0
8000307c:	00078a63          	beqz	a5,80003090 <xTaskResumeAll+0x174>
						{
							xYieldPending = pdTRUE;
80003080:	0001f797          	auipc	a5,0x1f
80003084:	8a878793          	addi	a5,a5,-1880 # 80021928 <xYieldPending>
80003088:	00100713          	li	a4,1
8000308c:	00e7a023          	sw	a4,0(a5)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
80003090:	0001f797          	auipc	a5,0x1f
80003094:	89478793          	addi	a5,a5,-1900 # 80021924 <uxPendedTicks>
80003098:	0007a783          	lw	a5,0(a5)
8000309c:	fff78713          	addi	a4,a5,-1
800030a0:	0001f797          	auipc	a5,0x1f
800030a4:	88478793          	addi	a5,a5,-1916 # 80021924 <uxPendedTicks>
800030a8:	00e7a023          	sw	a4,0(a5)
					while( uxPendedTicks > ( UBaseType_t ) 0U )
800030ac:	0001f797          	auipc	a5,0x1f
800030b0:	87878793          	addi	a5,a5,-1928 # 80021924 <uxPendedTicks>
800030b4:	0007a783          	lw	a5,0(a5)
800030b8:	fa079ee3          	bnez	a5,80003074 <xTaskResumeAll+0x158>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
800030bc:	0001f797          	auipc	a5,0x1f
800030c0:	86c78793          	addi	a5,a5,-1940 # 80021928 <xYieldPending>
800030c4:	0007a703          	lw	a4,0(a5)
800030c8:	00100793          	li	a5,1
800030cc:	00f71863          	bne	a4,a5,800030dc <xTaskResumeAll+0x1c0>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
800030d0:	00100793          	li	a5,1
800030d4:	fef42623          	sw	a5,-20(s0)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
800030d8:	bb4fd0ef          	jal	ra,8000048c <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
800030dc:	155010ef          	jal	ra,80004a30 <vTaskExitCritical>

	return xAlreadyYielded;
800030e0:	fec42783          	lw	a5,-20(s0)
}
800030e4:	00078513          	mv	a0,a5
800030e8:	01c12083          	lw	ra,28(sp)
800030ec:	01812403          	lw	s0,24(sp)
800030f0:	02010113          	addi	sp,sp,32
800030f4:	00008067          	ret

800030f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
800030f8:	fe010113          	addi	sp,sp,-32
800030fc:	00112e23          	sw	ra,28(sp)
80003100:	00812c23          	sw	s0,24(sp)
80003104:	02010413          	addi	s0,sp,32
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
80003108:	0d5010ef          	jal	ra,800049dc <vTaskEnterCritical>
	{
		xTicks = xTickCount;
8000310c:	0001f797          	auipc	a5,0x1f
80003110:	80c78793          	addi	a5,a5,-2036 # 80021918 <xTickCount>
80003114:	0007a783          	lw	a5,0(a5)
80003118:	fef42623          	sw	a5,-20(s0)
	}
	portTICK_TYPE_EXIT_CRITICAL();
8000311c:	115010ef          	jal	ra,80004a30 <vTaskExitCritical>

	return xTicks;
80003120:	fec42783          	lw	a5,-20(s0)
}
80003124:	00078513          	mv	a0,a5
80003128:	01c12083          	lw	ra,28(sp)
8000312c:	01812403          	lw	s0,24(sp)
80003130:	02010113          	addi	sp,sp,32
80003134:	00008067          	ret

80003138 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
80003138:	fe010113          	addi	sp,sp,-32
8000313c:	00112e23          	sw	ra,28(sp)
80003140:	00812c23          	sw	s0,24(sp)
80003144:	02010413          	addi	s0,sp,32
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
80003148:	d6cfd0ef          	jal	ra,800006b4 <vPortSetInterruptMask>
8000314c:	00050793          	mv	a5,a0
80003150:	fef42623          	sw	a5,-20(s0)
	{
		xReturn = xTickCount;
80003154:	0001e797          	auipc	a5,0x1e
80003158:	7c478793          	addi	a5,a5,1988 # 80021918 <xTickCount>
8000315c:	0007a783          	lw	a5,0(a5)
80003160:	fef42423          	sw	a5,-24(s0)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
80003164:	fec42783          	lw	a5,-20(s0)
80003168:	00078513          	mv	a0,a5
8000316c:	d20fd0ef          	jal	ra,8000068c <vPortClearInterruptMask>

	return xReturn;
80003170:	fe842783          	lw	a5,-24(s0)
}
80003174:	00078513          	mv	a0,a5
80003178:	01c12083          	lw	ra,28(sp)
8000317c:	01812403          	lw	s0,24(sp)
80003180:	02010113          	addi	sp,sp,32
80003184:	00008067          	ret

80003188 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
80003188:	ff010113          	addi	sp,sp,-16
8000318c:	00812623          	sw	s0,12(sp)
80003190:	01010413          	addi	s0,sp,16
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
80003194:	0001e797          	auipc	a5,0x1e
80003198:	78078793          	addi	a5,a5,1920 # 80021914 <uxCurrentNumberOfTasks>
8000319c:	0007a783          	lw	a5,0(a5)
}
800031a0:	00078513          	mv	a0,a5
800031a4:	00c12403          	lw	s0,12(sp)
800031a8:	01010113          	addi	sp,sp,16
800031ac:	00008067          	ret

800031b0 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
800031b0:	fd010113          	addi	sp,sp,-48
800031b4:	02112623          	sw	ra,44(sp)
800031b8:	02812423          	sw	s0,40(sp)
800031bc:	03010413          	addi	s0,sp,48
800031c0:	fca42e23          	sw	a0,-36(s0)
800031c4:	fcb42c23          	sw	a1,-40(s0)
800031c8:	fcc42a23          	sw	a2,-44(s0)
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
800031cc:	fe042623          	sw	zero,-20(s0)
800031d0:	00500793          	li	a5,5
800031d4:	fef42423          	sw	a5,-24(s0)

		vTaskSuspendAll();
800031d8:	d0dff0ef          	jal	ra,80002ee4 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
800031dc:	0001e797          	auipc	a5,0x1e
800031e0:	73878793          	addi	a5,a5,1848 # 80021914 <uxCurrentNumberOfTasks>
800031e4:	0007a783          	lw	a5,0(a5)
800031e8:	fd842703          	lw	a4,-40(s0)
800031ec:	14f76c63          	bltu	a4,a5,80003344 <uxTaskGetSystemState+0x194>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
800031f0:	fe842783          	lw	a5,-24(s0)
800031f4:	fff78793          	addi	a5,a5,-1
800031f8:	fef42423          	sw	a5,-24(s0)
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
800031fc:	fec42783          	lw	a5,-20(s0)
80003200:	00579793          	slli	a5,a5,0x5
80003204:	fdc42703          	lw	a4,-36(s0)
80003208:	00f706b3          	add	a3,a4,a5
8000320c:	fe842703          	lw	a4,-24(s0)
80003210:	00070793          	mv	a5,a4
80003214:	00279793          	slli	a5,a5,0x2
80003218:	00e787b3          	add	a5,a5,a4
8000321c:	00279793          	slli	a5,a5,0x2
80003220:	0001e717          	auipc	a4,0x1e
80003224:	62070713          	addi	a4,a4,1568 # 80021840 <__bss_start>
80003228:	00e787b3          	add	a5,a5,a4
8000322c:	00100613          	li	a2,1
80003230:	00078593          	mv	a1,a5
80003234:	00068513          	mv	a0,a3
80003238:	128010ef          	jal	ra,80004360 <prvListTaskWithinSingleList>
8000323c:	00050713          	mv	a4,a0
80003240:	fec42783          	lw	a5,-20(s0)
80003244:	00e787b3          	add	a5,a5,a4
80003248:	fef42623          	sw	a5,-20(s0)

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
8000324c:	fe842783          	lw	a5,-24(s0)
80003250:	fa0790e3          	bnez	a5,800031f0 <uxTaskGetSystemState+0x40>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
80003254:	fec42783          	lw	a5,-20(s0)
80003258:	00579793          	slli	a5,a5,0x5
8000325c:	fdc42703          	lw	a4,-36(s0)
80003260:	00f70733          	add	a4,a4,a5
80003264:	0001e797          	auipc	a5,0x1e
80003268:	66878793          	addi	a5,a5,1640 # 800218cc <pxDelayedTaskList>
8000326c:	0007a783          	lw	a5,0(a5)
80003270:	00200613          	li	a2,2
80003274:	00078593          	mv	a1,a5
80003278:	00070513          	mv	a0,a4
8000327c:	0e4010ef          	jal	ra,80004360 <prvListTaskWithinSingleList>
80003280:	00050713          	mv	a4,a0
80003284:	fec42783          	lw	a5,-20(s0)
80003288:	00e787b3          	add	a5,a5,a4
8000328c:	fef42623          	sw	a5,-20(s0)
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
80003290:	fec42783          	lw	a5,-20(s0)
80003294:	00579793          	slli	a5,a5,0x5
80003298:	fdc42703          	lw	a4,-36(s0)
8000329c:	00f70733          	add	a4,a4,a5
800032a0:	0001e797          	auipc	a5,0x1e
800032a4:	63078793          	addi	a5,a5,1584 # 800218d0 <pxOverflowDelayedTaskList>
800032a8:	0007a783          	lw	a5,0(a5)
800032ac:	00200613          	li	a2,2
800032b0:	00078593          	mv	a1,a5
800032b4:	00070513          	mv	a0,a4
800032b8:	0a8010ef          	jal	ra,80004360 <prvListTaskWithinSingleList>
800032bc:	00050713          	mv	a4,a0
800032c0:	fec42783          	lw	a5,-20(s0)
800032c4:	00e787b3          	add	a5,a5,a4
800032c8:	fef42623          	sw	a5,-20(s0)

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
800032cc:	fec42783          	lw	a5,-20(s0)
800032d0:	00579793          	slli	a5,a5,0x5
800032d4:	fdc42703          	lw	a4,-36(s0)
800032d8:	00f707b3          	add	a5,a4,a5
800032dc:	00400613          	li	a2,4
800032e0:	0001e597          	auipc	a1,0x1e
800032e4:	60858593          	addi	a1,a1,1544 # 800218e8 <xTasksWaitingTermination>
800032e8:	00078513          	mv	a0,a5
800032ec:	074010ef          	jal	ra,80004360 <prvListTaskWithinSingleList>
800032f0:	00050713          	mv	a4,a0
800032f4:	fec42783          	lw	a5,-20(s0)
800032f8:	00e787b3          	add	a5,a5,a4
800032fc:	fef42623          	sw	a5,-20(s0)

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
80003300:	fec42783          	lw	a5,-20(s0)
80003304:	00579793          	slli	a5,a5,0x5
80003308:	fdc42703          	lw	a4,-36(s0)
8000330c:	00f707b3          	add	a5,a4,a5
80003310:	00300613          	li	a2,3
80003314:	0001e597          	auipc	a1,0x1e
80003318:	5ec58593          	addi	a1,a1,1516 # 80021900 <xSuspendedTaskList>
8000331c:	00078513          	mv	a0,a5
80003320:	040010ef          	jal	ra,80004360 <prvListTaskWithinSingleList>
80003324:	00050713          	mv	a4,a0
80003328:	fec42783          	lw	a5,-20(s0)
8000332c:	00e787b3          	add	a5,a5,a4
80003330:	fef42623          	sw	a5,-20(s0)
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
80003334:	fd442783          	lw	a5,-44(s0)
80003338:	00078663          	beqz	a5,80003344 <uxTaskGetSystemState+0x194>
					{
						*pulTotalRunTime = 0;
8000333c:	fd442783          	lw	a5,-44(s0)
80003340:	0007a023          	sw	zero,0(a5)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
80003344:	bd9ff0ef          	jal	ra,80002f1c <xTaskResumeAll>

		return uxTask;
80003348:	fec42783          	lw	a5,-20(s0)
	}
8000334c:	00078513          	mv	a0,a5
80003350:	02c12083          	lw	ra,44(sp)
80003354:	02812403          	lw	s0,40(sp)
80003358:	03010113          	addi	sp,sp,48
8000335c:	00008067          	ret

80003360 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
80003360:	fd010113          	addi	sp,sp,-48
80003364:	02112623          	sw	ra,44(sp)
80003368:	02812423          	sw	s0,40(sp)
8000336c:	03010413          	addi	s0,sp,48
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
80003370:	fe042623          	sw	zero,-20(s0)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80003374:	0001e797          	auipc	a5,0x1e
80003378:	5c478793          	addi	a5,a5,1476 # 80021938 <uxSchedulerSuspended>
8000337c:	0007a783          	lw	a5,0(a5)
80003380:	22079c63          	bnez	a5,800035b8 <xTaskIncrementTick+0x258>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
80003384:	0001e797          	auipc	a5,0x1e
80003388:	59478793          	addi	a5,a5,1428 # 80021918 <xTickCount>
8000338c:	0007a783          	lw	a5,0(a5)
80003390:	00178713          	addi	a4,a5,1
80003394:	0001e797          	auipc	a5,0x1e
80003398:	58478793          	addi	a5,a5,1412 # 80021918 <xTickCount>
8000339c:	00e7a023          	sw	a4,0(a5)

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
800033a0:	0001e797          	auipc	a5,0x1e
800033a4:	57878793          	addi	a5,a5,1400 # 80021918 <xTickCount>
800033a8:	0007a783          	lw	a5,0(a5)
800033ac:	fef42423          	sw	a5,-24(s0)

			if( xConstTickCount == ( TickType_t ) 0U )
800033b0:	fe842783          	lw	a5,-24(s0)
800033b4:	06079c63          	bnez	a5,8000342c <xTaskIncrementTick+0xcc>
			{
				taskSWITCH_DELAYED_LISTS();
800033b8:	0001e797          	auipc	a5,0x1e
800033bc:	51478793          	addi	a5,a5,1300 # 800218cc <pxDelayedTaskList>
800033c0:	0007a783          	lw	a5,0(a5)
800033c4:	0007a783          	lw	a5,0(a5)
800033c8:	00078663          	beqz	a5,800033d4 <xTaskIncrementTick+0x74>
800033cc:	30007073          	csrci	mstatus,0
800033d0:	0000006f          	j	800033d0 <xTaskIncrementTick+0x70>
800033d4:	0001e797          	auipc	a5,0x1e
800033d8:	4f878793          	addi	a5,a5,1272 # 800218cc <pxDelayedTaskList>
800033dc:	0007a783          	lw	a5,0(a5)
800033e0:	fef42223          	sw	a5,-28(s0)
800033e4:	0001e797          	auipc	a5,0x1e
800033e8:	4ec78793          	addi	a5,a5,1260 # 800218d0 <pxOverflowDelayedTaskList>
800033ec:	0007a703          	lw	a4,0(a5)
800033f0:	0001e797          	auipc	a5,0x1e
800033f4:	4dc78793          	addi	a5,a5,1244 # 800218cc <pxDelayedTaskList>
800033f8:	00e7a023          	sw	a4,0(a5)
800033fc:	0001e797          	auipc	a5,0x1e
80003400:	4d478793          	addi	a5,a5,1236 # 800218d0 <pxOverflowDelayedTaskList>
80003404:	fe442703          	lw	a4,-28(s0)
80003408:	00e7a023          	sw	a4,0(a5)
8000340c:	0001e797          	auipc	a5,0x1e
80003410:	52078793          	addi	a5,a5,1312 # 8002192c <xNumOfOverflows>
80003414:	0007a783          	lw	a5,0(a5)
80003418:	00178713          	addi	a4,a5,1
8000341c:	0001e797          	auipc	a5,0x1e
80003420:	51078793          	addi	a5,a5,1296 # 8002192c <xNumOfOverflows>
80003424:	00e7a023          	sw	a4,0(a5)
80003428:	1f8010ef          	jal	ra,80004620 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
8000342c:	0001e797          	auipc	a5,0x1e
80003430:	50878793          	addi	a5,a5,1288 # 80021934 <xNextTaskUnblockTime>
80003434:	0007a783          	lw	a5,0(a5)
80003438:	fe842703          	lw	a4,-24(s0)
8000343c:	12f76c63          	bltu	a4,a5,80003574 <xTaskIncrementTick+0x214>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80003440:	0001e797          	auipc	a5,0x1e
80003444:	48c78793          	addi	a5,a5,1164 # 800218cc <pxDelayedTaskList>
80003448:	0007a783          	lw	a5,0(a5)
8000344c:	0007a783          	lw	a5,0(a5)
80003450:	00079663          	bnez	a5,8000345c <xTaskIncrementTick+0xfc>
80003454:	00100793          	li	a5,1
80003458:	0080006f          	j	80003460 <xTaskIncrementTick+0x100>
8000345c:	00000793          	li	a5,0
80003460:	00078c63          	beqz	a5,80003478 <xTaskIncrementTick+0x118>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
80003464:	0001e797          	auipc	a5,0x1e
80003468:	4d078793          	addi	a5,a5,1232 # 80021934 <xNextTaskUnblockTime>
8000346c:	fff00713          	li	a4,-1
80003470:	00e7a023          	sw	a4,0(a5)
						break;
80003474:	1000006f          	j	80003574 <xTaskIncrementTick+0x214>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80003478:	0001e797          	auipc	a5,0x1e
8000347c:	45478793          	addi	a5,a5,1108 # 800218cc <pxDelayedTaskList>
80003480:	0007a783          	lw	a5,0(a5)
80003484:	00c7a783          	lw	a5,12(a5)
80003488:	00c7a783          	lw	a5,12(a5)
8000348c:	fef42023          	sw	a5,-32(s0)
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
80003490:	fe042783          	lw	a5,-32(s0)
80003494:	0047a783          	lw	a5,4(a5)
80003498:	fcf42e23          	sw	a5,-36(s0)

						if( xConstTickCount < xItemValue )
8000349c:	fe842703          	lw	a4,-24(s0)
800034a0:	fdc42783          	lw	a5,-36(s0)
800034a4:	00f77c63          	bleu	a5,a4,800034bc <xTaskIncrementTick+0x15c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
800034a8:	0001e797          	auipc	a5,0x1e
800034ac:	48c78793          	addi	a5,a5,1164 # 80021934 <xNextTaskUnblockTime>
800034b0:	fdc42703          	lw	a4,-36(s0)
800034b4:	00e7a023          	sw	a4,0(a5)
							break;
800034b8:	0bc0006f          	j	80003574 <xTaskIncrementTick+0x214>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
800034bc:	fe042783          	lw	a5,-32(s0)
800034c0:	00478793          	addi	a5,a5,4
800034c4:	00078513          	mv	a0,a5
800034c8:	cccfd0ef          	jal	ra,80000994 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
800034cc:	fe042783          	lw	a5,-32(s0)
800034d0:	0287a783          	lw	a5,40(a5)
800034d4:	00078a63          	beqz	a5,800034e8 <xTaskIncrementTick+0x188>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
800034d8:	fe042783          	lw	a5,-32(s0)
800034dc:	01878793          	addi	a5,a5,24
800034e0:	00078513          	mv	a0,a5
800034e4:	cb0fd0ef          	jal	ra,80000994 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
800034e8:	fe042783          	lw	a5,-32(s0)
800034ec:	02c7a703          	lw	a4,44(a5)
800034f0:	0001e797          	auipc	a5,0x1e
800034f4:	42c78793          	addi	a5,a5,1068 # 8002191c <uxTopReadyPriority>
800034f8:	0007a783          	lw	a5,0(a5)
800034fc:	00e7fc63          	bleu	a4,a5,80003514 <xTaskIncrementTick+0x1b4>
80003500:	fe042783          	lw	a5,-32(s0)
80003504:	02c7a703          	lw	a4,44(a5)
80003508:	0001e797          	auipc	a5,0x1e
8000350c:	41478793          	addi	a5,a5,1044 # 8002191c <uxTopReadyPriority>
80003510:	00e7a023          	sw	a4,0(a5)
80003514:	fe042783          	lw	a5,-32(s0)
80003518:	02c7a703          	lw	a4,44(a5)
8000351c:	00070793          	mv	a5,a4
80003520:	00279793          	slli	a5,a5,0x2
80003524:	00e787b3          	add	a5,a5,a4
80003528:	00279793          	slli	a5,a5,0x2
8000352c:	0001e717          	auipc	a4,0x1e
80003530:	31470713          	addi	a4,a4,788 # 80021840 <__bss_start>
80003534:	00e78733          	add	a4,a5,a4
80003538:	fe042783          	lw	a5,-32(s0)
8000353c:	00478793          	addi	a5,a5,4
80003540:	00078593          	mv	a1,a5
80003544:	00070513          	mv	a0,a4
80003548:	af0fd0ef          	jal	ra,80000838 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
8000354c:	fe042783          	lw	a5,-32(s0)
80003550:	02c7a703          	lw	a4,44(a5)
80003554:	0001e797          	auipc	a5,0x1e
80003558:	8c878793          	addi	a5,a5,-1848 # 80020e1c <pxCurrentTCB>
8000355c:	0007a783          	lw	a5,0(a5)
80003560:	02c7a783          	lw	a5,44(a5)
80003564:	ecf76ee3          	bltu	a4,a5,80003440 <xTaskIncrementTick+0xe0>
							{
								xSwitchRequired = pdTRUE;
80003568:	00100793          	li	a5,1
8000356c:	fef42623          	sw	a5,-20(s0)
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80003570:	ed1ff06f          	j	80003440 <xTaskIncrementTick+0xe0>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
80003574:	0001e797          	auipc	a5,0x1e
80003578:	8a878793          	addi	a5,a5,-1880 # 80020e1c <pxCurrentTCB>
8000357c:	0007a783          	lw	a5,0(a5)
80003580:	02c7a703          	lw	a4,44(a5)
80003584:	0001e697          	auipc	a3,0x1e
80003588:	2bc68693          	addi	a3,a3,700 # 80021840 <__bss_start>
8000358c:	00070793          	mv	a5,a4
80003590:	00279793          	slli	a5,a5,0x2
80003594:	00e787b3          	add	a5,a5,a4
80003598:	00279793          	slli	a5,a5,0x2
8000359c:	00f687b3          	add	a5,a3,a5
800035a0:	0007a703          	lw	a4,0(a5)
800035a4:	00100793          	li	a5,1
800035a8:	02e7f663          	bleu	a4,a5,800035d4 <xTaskIncrementTick+0x274>
			{
				xSwitchRequired = pdTRUE;
800035ac:	00100793          	li	a5,1
800035b0:	fef42623          	sw	a5,-20(s0)
800035b4:	0200006f          	j	800035d4 <xTaskIncrementTick+0x274>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
800035b8:	0001e797          	auipc	a5,0x1e
800035bc:	36c78793          	addi	a5,a5,876 # 80021924 <uxPendedTicks>
800035c0:	0007a783          	lw	a5,0(a5)
800035c4:	00178713          	addi	a4,a5,1
800035c8:	0001e797          	auipc	a5,0x1e
800035cc:	35c78793          	addi	a5,a5,860 # 80021924 <uxPendedTicks>
800035d0:	00e7a023          	sw	a4,0(a5)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
800035d4:	0001e797          	auipc	a5,0x1e
800035d8:	35478793          	addi	a5,a5,852 # 80021928 <xYieldPending>
800035dc:	0007a783          	lw	a5,0(a5)
800035e0:	00078663          	beqz	a5,800035ec <xTaskIncrementTick+0x28c>
		{
			xSwitchRequired = pdTRUE;
800035e4:	00100793          	li	a5,1
800035e8:	fef42623          	sw	a5,-20(s0)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
800035ec:	fec42783          	lw	a5,-20(s0)
}
800035f0:	00078513          	mv	a0,a5
800035f4:	02c12083          	lw	ra,44(sp)
800035f8:	02812403          	lw	s0,40(sp)
800035fc:	03010113          	addi	sp,sp,48
80003600:	00008067          	ret

80003604 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
80003604:	fe010113          	addi	sp,sp,-32
80003608:	00112e23          	sw	ra,28(sp)
8000360c:	00812c23          	sw	s0,24(sp)
80003610:	02010413          	addi	s0,sp,32
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
80003614:	0001e797          	auipc	a5,0x1e
80003618:	32478793          	addi	a5,a5,804 # 80021938 <uxSchedulerSuspended>
8000361c:	0007a783          	lw	a5,0(a5)
80003620:	00078c63          	beqz	a5,80003638 <vTaskSwitchContext+0x34>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
80003624:	0001e797          	auipc	a5,0x1e
80003628:	30478793          	addi	a5,a5,772 # 80021928 <xYieldPending>
8000362c:	00100713          	li	a4,1
80003630:	00e7a023          	sw	a4,0(a5)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
80003634:	18c0006f          	j	800037c0 <vTaskSwitchContext+0x1bc>
		xYieldPending = pdFALSE;
80003638:	0001e797          	auipc	a5,0x1e
8000363c:	2f078793          	addi	a5,a5,752 # 80021928 <xYieldPending>
80003640:	0007a023          	sw	zero,0(a5)
		taskCHECK_FOR_STACK_OVERFLOW();
80003644:	0001d797          	auipc	a5,0x1d
80003648:	7d878793          	addi	a5,a5,2008 # 80020e1c <pxCurrentTCB>
8000364c:	0007a783          	lw	a5,0(a5)
80003650:	0307a783          	lw	a5,48(a5)
80003654:	fef42623          	sw	a5,-20(s0)
80003658:	a5a5a7b7          	lui	a5,0xa5a5a
8000365c:	5a578793          	addi	a5,a5,1445 # a5a5a5a5 <__stack+0x25a1dad9>
80003660:	fef42423          	sw	a5,-24(s0)
80003664:	fec42783          	lw	a5,-20(s0)
80003668:	0007a783          	lw	a5,0(a5)
8000366c:	fe842703          	lw	a4,-24(s0)
80003670:	04f71063          	bne	a4,a5,800036b0 <vTaskSwitchContext+0xac>
80003674:	fec42783          	lw	a5,-20(s0)
80003678:	00478793          	addi	a5,a5,4
8000367c:	0007a783          	lw	a5,0(a5)
80003680:	fe842703          	lw	a4,-24(s0)
80003684:	02f71663          	bne	a4,a5,800036b0 <vTaskSwitchContext+0xac>
80003688:	fec42783          	lw	a5,-20(s0)
8000368c:	00878793          	addi	a5,a5,8
80003690:	0007a783          	lw	a5,0(a5)
80003694:	fe842703          	lw	a4,-24(s0)
80003698:	00f71c63          	bne	a4,a5,800036b0 <vTaskSwitchContext+0xac>
8000369c:	fec42783          	lw	a5,-20(s0)
800036a0:	00c78793          	addi	a5,a5,12
800036a4:	0007a783          	lw	a5,0(a5)
800036a8:	fe842703          	lw	a4,-24(s0)
800036ac:	06f70263          	beq	a4,a5,80003710 <vTaskSwitchContext+0x10c>
800036b0:	0001d797          	auipc	a5,0x1d
800036b4:	76c78793          	addi	a5,a5,1900 # 80020e1c <pxCurrentTCB>
800036b8:	0007a703          	lw	a4,0(a5)
800036bc:	0001d797          	auipc	a5,0x1d
800036c0:	76078793          	addi	a5,a5,1888 # 80020e1c <pxCurrentTCB>
800036c4:	0007a783          	lw	a5,0(a5)
800036c8:	03478793          	addi	a5,a5,52
800036cc:	00078593          	mv	a1,a5
800036d0:	00070513          	mv	a0,a4
800036d4:	269030ef          	jal	ra,8000713c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
800036d8:	0380006f          	j	80003710 <vTaskSwitchContext+0x10c>
800036dc:	0001e797          	auipc	a5,0x1e
800036e0:	24078793          	addi	a5,a5,576 # 8002191c <uxTopReadyPriority>
800036e4:	0007a783          	lw	a5,0(a5)
800036e8:	00079663          	bnez	a5,800036f4 <vTaskSwitchContext+0xf0>
800036ec:	30007073          	csrci	mstatus,0
800036f0:	0000006f          	j	800036f0 <vTaskSwitchContext+0xec>
800036f4:	0001e797          	auipc	a5,0x1e
800036f8:	22878793          	addi	a5,a5,552 # 8002191c <uxTopReadyPriority>
800036fc:	0007a783          	lw	a5,0(a5)
80003700:	fff78713          	addi	a4,a5,-1
80003704:	0001e797          	auipc	a5,0x1e
80003708:	21878793          	addi	a5,a5,536 # 8002191c <uxTopReadyPriority>
8000370c:	00e7a023          	sw	a4,0(a5)
80003710:	0001e797          	auipc	a5,0x1e
80003714:	20c78793          	addi	a5,a5,524 # 8002191c <uxTopReadyPriority>
80003718:	0007a703          	lw	a4,0(a5)
8000371c:	0001e697          	auipc	a3,0x1e
80003720:	12468693          	addi	a3,a3,292 # 80021840 <__bss_start>
80003724:	00070793          	mv	a5,a4
80003728:	00279793          	slli	a5,a5,0x2
8000372c:	00e787b3          	add	a5,a5,a4
80003730:	00279793          	slli	a5,a5,0x2
80003734:	00f687b3          	add	a5,a3,a5
80003738:	0007a783          	lw	a5,0(a5)
8000373c:	fa0780e3          	beqz	a5,800036dc <vTaskSwitchContext+0xd8>
80003740:	0001e797          	auipc	a5,0x1e
80003744:	1dc78793          	addi	a5,a5,476 # 8002191c <uxTopReadyPriority>
80003748:	0007a703          	lw	a4,0(a5)
8000374c:	00070793          	mv	a5,a4
80003750:	00279793          	slli	a5,a5,0x2
80003754:	00e787b3          	add	a5,a5,a4
80003758:	00279793          	slli	a5,a5,0x2
8000375c:	0001e717          	auipc	a4,0x1e
80003760:	0e470713          	addi	a4,a4,228 # 80021840 <__bss_start>
80003764:	00e787b3          	add	a5,a5,a4
80003768:	fef42223          	sw	a5,-28(s0)
8000376c:	fe442783          	lw	a5,-28(s0)
80003770:	0047a783          	lw	a5,4(a5)
80003774:	0047a703          	lw	a4,4(a5)
80003778:	fe442783          	lw	a5,-28(s0)
8000377c:	00e7a223          	sw	a4,4(a5)
80003780:	fe442783          	lw	a5,-28(s0)
80003784:	0047a703          	lw	a4,4(a5)
80003788:	fe442783          	lw	a5,-28(s0)
8000378c:	00878793          	addi	a5,a5,8
80003790:	00f71c63          	bne	a4,a5,800037a8 <vTaskSwitchContext+0x1a4>
80003794:	fe442783          	lw	a5,-28(s0)
80003798:	0047a783          	lw	a5,4(a5)
8000379c:	0047a703          	lw	a4,4(a5)
800037a0:	fe442783          	lw	a5,-28(s0)
800037a4:	00e7a223          	sw	a4,4(a5)
800037a8:	fe442783          	lw	a5,-28(s0)
800037ac:	0047a783          	lw	a5,4(a5)
800037b0:	00c7a703          	lw	a4,12(a5)
800037b4:	0001d797          	auipc	a5,0x1d
800037b8:	66878793          	addi	a5,a5,1640 # 80020e1c <pxCurrentTCB>
800037bc:	00e7a023          	sw	a4,0(a5)
}
800037c0:	00000013          	nop
800037c4:	01c12083          	lw	ra,28(sp)
800037c8:	01812403          	lw	s0,24(sp)
800037cc:	02010113          	addi	sp,sp,32
800037d0:	00008067          	ret

800037d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
800037d4:	fd010113          	addi	sp,sp,-48
800037d8:	02112623          	sw	ra,44(sp)
800037dc:	02812423          	sw	s0,40(sp)
800037e0:	03010413          	addi	s0,sp,48
800037e4:	fca42e23          	sw	a0,-36(s0)
800037e8:	fcb42c23          	sw	a1,-40(s0)
TickType_t xTimeToWake;

	configASSERT( pxEventList );
800037ec:	fdc42783          	lw	a5,-36(s0)
800037f0:	00079663          	bnez	a5,800037fc <vTaskPlaceOnEventList+0x28>
800037f4:	30007073          	csrci	mstatus,0
800037f8:	0000006f          	j	800037f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
800037fc:	0001d797          	auipc	a5,0x1d
80003800:	62078793          	addi	a5,a5,1568 # 80020e1c <pxCurrentTCB>
80003804:	0007a783          	lw	a5,0(a5)
80003808:	01878793          	addi	a5,a5,24
8000380c:	00078593          	mv	a1,a5
80003810:	fdc42503          	lw	a0,-36(s0)
80003814:	8acfd0ef          	jal	ra,800008c0 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80003818:	0001d797          	auipc	a5,0x1d
8000381c:	60478793          	addi	a5,a5,1540 # 80020e1c <pxCurrentTCB>
80003820:	0007a783          	lw	a5,0(a5)
80003824:	00478793          	addi	a5,a5,4
80003828:	00078513          	mv	a0,a5
8000382c:	968fd0ef          	jal	ra,80000994 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
80003830:	fd842703          	lw	a4,-40(s0)
80003834:	fff00793          	li	a5,-1
80003838:	02f71463          	bne	a4,a5,80003860 <vTaskPlaceOnEventList+0x8c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
8000383c:	0001d797          	auipc	a5,0x1d
80003840:	5e078793          	addi	a5,a5,1504 # 80020e1c <pxCurrentTCB>
80003844:	0007a783          	lw	a5,0(a5)
80003848:	00478793          	addi	a5,a5,4
8000384c:	00078593          	mv	a1,a5
80003850:	0001e517          	auipc	a0,0x1e
80003854:	0b050513          	addi	a0,a0,176 # 80021900 <xSuspendedTaskList>
80003858:	fe1fc0ef          	jal	ra,80000838 <vListInsertEnd>
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
8000385c:	0240006f          	j	80003880 <vTaskPlaceOnEventList+0xac>
			xTimeToWake = xTickCount + xTicksToWait;
80003860:	0001e797          	auipc	a5,0x1e
80003864:	0b878793          	addi	a5,a5,184 # 80021918 <xTickCount>
80003868:	0007a783          	lw	a5,0(a5)
8000386c:	fd842703          	lw	a4,-40(s0)
80003870:	00f707b3          	add	a5,a4,a5
80003874:	fef42623          	sw	a5,-20(s0)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
80003878:	fec42503          	lw	a0,-20(s0)
8000387c:	15d000ef          	jal	ra,800041d8 <prvAddCurrentTaskToDelayedList>
}
80003880:	00000013          	nop
80003884:	02c12083          	lw	ra,44(sp)
80003888:	02812403          	lw	s0,40(sp)
8000388c:	03010113          	addi	sp,sp,48
80003890:	00008067          	ret

80003894 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
80003894:	fd010113          	addi	sp,sp,-48
80003898:	02112623          	sw	ra,44(sp)
8000389c:	02812423          	sw	s0,40(sp)
800038a0:	03010413          	addi	s0,sp,48
800038a4:	fca42e23          	sw	a0,-36(s0)
800038a8:	fcb42c23          	sw	a1,-40(s0)
800038ac:	fcc42a23          	sw	a2,-44(s0)
TickType_t xTimeToWake;

	configASSERT( pxEventList );
800038b0:	fdc42783          	lw	a5,-36(s0)
800038b4:	00079663          	bnez	a5,800038c0 <vTaskPlaceOnUnorderedEventList+0x2c>
800038b8:	30007073          	csrci	mstatus,0
800038bc:	0000006f          	j	800038bc <vTaskPlaceOnUnorderedEventList+0x28>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
800038c0:	0001e797          	auipc	a5,0x1e
800038c4:	07878793          	addi	a5,a5,120 # 80021938 <uxSchedulerSuspended>
800038c8:	0007a783          	lw	a5,0(a5)
800038cc:	00079663          	bnez	a5,800038d8 <vTaskPlaceOnUnorderedEventList+0x44>
800038d0:	30007073          	csrci	mstatus,0
800038d4:	0000006f          	j	800038d4 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
800038d8:	0001d797          	auipc	a5,0x1d
800038dc:	54478793          	addi	a5,a5,1348 # 80020e1c <pxCurrentTCB>
800038e0:	0007a783          	lw	a5,0(a5)
800038e4:	fd842683          	lw	a3,-40(s0)
800038e8:	80000737          	lui	a4,0x80000
800038ec:	00e6e733          	or	a4,a3,a4
800038f0:	00e7ac23          	sw	a4,24(a5)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
800038f4:	0001d797          	auipc	a5,0x1d
800038f8:	52878793          	addi	a5,a5,1320 # 80020e1c <pxCurrentTCB>
800038fc:	0007a783          	lw	a5,0(a5)
80003900:	01878793          	addi	a5,a5,24
80003904:	00078593          	mv	a1,a5
80003908:	fdc42503          	lw	a0,-36(s0)
8000390c:	f2dfc0ef          	jal	ra,80000838 <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80003910:	0001d797          	auipc	a5,0x1d
80003914:	50c78793          	addi	a5,a5,1292 # 80020e1c <pxCurrentTCB>
80003918:	0007a783          	lw	a5,0(a5)
8000391c:	00478793          	addi	a5,a5,4
80003920:	00078513          	mv	a0,a5
80003924:	870fd0ef          	jal	ra,80000994 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
80003928:	fd442703          	lw	a4,-44(s0)
8000392c:	fff00793          	li	a5,-1
80003930:	02f71463          	bne	a4,a5,80003958 <vTaskPlaceOnUnorderedEventList+0xc4>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80003934:	0001d797          	auipc	a5,0x1d
80003938:	4e878793          	addi	a5,a5,1256 # 80020e1c <pxCurrentTCB>
8000393c:	0007a783          	lw	a5,0(a5)
80003940:	00478793          	addi	a5,a5,4
80003944:	00078593          	mv	a1,a5
80003948:	0001e517          	auipc	a0,0x1e
8000394c:	fb850513          	addi	a0,a0,-72 # 80021900 <xSuspendedTaskList>
80003950:	ee9fc0ef          	jal	ra,80000838 <vListInsertEnd>
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
80003954:	0240006f          	j	80003978 <vTaskPlaceOnUnorderedEventList+0xe4>
			xTimeToWake = xTickCount + xTicksToWait;
80003958:	0001e797          	auipc	a5,0x1e
8000395c:	fc078793          	addi	a5,a5,-64 # 80021918 <xTickCount>
80003960:	0007a783          	lw	a5,0(a5)
80003964:	fd442703          	lw	a4,-44(s0)
80003968:	00f707b3          	add	a5,a4,a5
8000396c:	fef42623          	sw	a5,-20(s0)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
80003970:	fec42503          	lw	a0,-20(s0)
80003974:	065000ef          	jal	ra,800041d8 <prvAddCurrentTaskToDelayedList>
}
80003978:	00000013          	nop
8000397c:	02c12083          	lw	ra,44(sp)
80003980:	02812403          	lw	s0,40(sp)
80003984:	03010113          	addi	sp,sp,48
80003988:	00008067          	ret

8000398c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
8000398c:	fd010113          	addi	sp,sp,-48
80003990:	02112623          	sw	ra,44(sp)
80003994:	02812423          	sw	s0,40(sp)
80003998:	03010413          	addi	s0,sp,48
8000399c:	fca42e23          	sw	a0,-36(s0)
800039a0:	fcb42c23          	sw	a1,-40(s0)
800039a4:	fcc42a23          	sw	a2,-44(s0)
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
800039a8:	fdc42783          	lw	a5,-36(s0)
800039ac:	00079663          	bnez	a5,800039b8 <vTaskPlaceOnEventListRestricted+0x2c>
800039b0:	30007073          	csrci	mstatus,0
800039b4:	0000006f          	j	800039b4 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
800039b8:	0001d797          	auipc	a5,0x1d
800039bc:	46478793          	addi	a5,a5,1124 # 80020e1c <pxCurrentTCB>
800039c0:	0007a783          	lw	a5,0(a5)
800039c4:	01878793          	addi	a5,a5,24
800039c8:	00078593          	mv	a1,a5
800039cc:	fdc42503          	lw	a0,-36(s0)
800039d0:	e69fc0ef          	jal	ra,80000838 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
800039d4:	0001d797          	auipc	a5,0x1d
800039d8:	44878793          	addi	a5,a5,1096 # 80020e1c <pxCurrentTCB>
800039dc:	0007a783          	lw	a5,0(a5)
800039e0:	00478793          	addi	a5,a5,4
800039e4:	00078513          	mv	a0,a5
800039e8:	fadfc0ef          	jal	ra,80000994 <uxListRemove>
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
800039ec:	fd442703          	lw	a4,-44(s0)
800039f0:	00100793          	li	a5,1
800039f4:	02f71463          	bne	a4,a5,80003a1c <vTaskPlaceOnEventListRestricted+0x90>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
800039f8:	0001d797          	auipc	a5,0x1d
800039fc:	42478793          	addi	a5,a5,1060 # 80020e1c <pxCurrentTCB>
80003a00:	0007a783          	lw	a5,0(a5)
80003a04:	00478793          	addi	a5,a5,4
80003a08:	00078593          	mv	a1,a5
80003a0c:	0001e517          	auipc	a0,0x1e
80003a10:	ef450513          	addi	a0,a0,-268 # 80021900 <xSuspendedTaskList>
80003a14:	e25fc0ef          	jal	ra,80000838 <vListInsertEnd>
			/* Remove compiler warnings when INCLUDE_vTaskSuspend() is not
			defined. */
			( void ) xWaitIndefinitely;
		}
		#endif
	}
80003a18:	0240006f          	j	80003a3c <vTaskPlaceOnEventListRestricted+0xb0>
				xTimeToWake = xTickCount + xTicksToWait;
80003a1c:	0001e797          	auipc	a5,0x1e
80003a20:	efc78793          	addi	a5,a5,-260 # 80021918 <xTickCount>
80003a24:	0007a783          	lw	a5,0(a5)
80003a28:	fd842703          	lw	a4,-40(s0)
80003a2c:	00f707b3          	add	a5,a4,a5
80003a30:	fef42623          	sw	a5,-20(s0)
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80003a34:	fec42503          	lw	a0,-20(s0)
80003a38:	7a0000ef          	jal	ra,800041d8 <prvAddCurrentTaskToDelayedList>
	}
80003a3c:	00000013          	nop
80003a40:	02c12083          	lw	ra,44(sp)
80003a44:	02812403          	lw	s0,40(sp)
80003a48:	03010113          	addi	sp,sp,48
80003a4c:	00008067          	ret

80003a50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
80003a50:	fd010113          	addi	sp,sp,-48
80003a54:	02112623          	sw	ra,44(sp)
80003a58:	02812423          	sw	s0,40(sp)
80003a5c:	03010413          	addi	s0,sp,48
80003a60:	fca42e23          	sw	a0,-36(s0)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
80003a64:	fdc42783          	lw	a5,-36(s0)
80003a68:	00c7a783          	lw	a5,12(a5)
80003a6c:	00c7a783          	lw	a5,12(a5)
80003a70:	fef42423          	sw	a5,-24(s0)
	configASSERT( pxUnblockedTCB );
80003a74:	fe842783          	lw	a5,-24(s0)
80003a78:	00079663          	bnez	a5,80003a84 <xTaskRemoveFromEventList+0x34>
80003a7c:	30007073          	csrci	mstatus,0
80003a80:	0000006f          	j	80003a80 <xTaskRemoveFromEventList+0x30>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
80003a84:	fe842783          	lw	a5,-24(s0)
80003a88:	01878793          	addi	a5,a5,24
80003a8c:	00078513          	mv	a0,a5
80003a90:	f05fc0ef          	jal	ra,80000994 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80003a94:	0001e797          	auipc	a5,0x1e
80003a98:	ea478793          	addi	a5,a5,-348 # 80021938 <uxSchedulerSuspended>
80003a9c:	0007a783          	lw	a5,0(a5)
80003aa0:	06079e63          	bnez	a5,80003b1c <xTaskRemoveFromEventList+0xcc>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
80003aa4:	fe842783          	lw	a5,-24(s0)
80003aa8:	00478793          	addi	a5,a5,4
80003aac:	00078513          	mv	a0,a5
80003ab0:	ee5fc0ef          	jal	ra,80000994 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
80003ab4:	fe842783          	lw	a5,-24(s0)
80003ab8:	02c7a703          	lw	a4,44(a5)
80003abc:	0001e797          	auipc	a5,0x1e
80003ac0:	e6078793          	addi	a5,a5,-416 # 8002191c <uxTopReadyPriority>
80003ac4:	0007a783          	lw	a5,0(a5)
80003ac8:	00e7fc63          	bleu	a4,a5,80003ae0 <xTaskRemoveFromEventList+0x90>
80003acc:	fe842783          	lw	a5,-24(s0)
80003ad0:	02c7a703          	lw	a4,44(a5)
80003ad4:	0001e797          	auipc	a5,0x1e
80003ad8:	e4878793          	addi	a5,a5,-440 # 8002191c <uxTopReadyPriority>
80003adc:	00e7a023          	sw	a4,0(a5)
80003ae0:	fe842783          	lw	a5,-24(s0)
80003ae4:	02c7a703          	lw	a4,44(a5)
80003ae8:	00070793          	mv	a5,a4
80003aec:	00279793          	slli	a5,a5,0x2
80003af0:	00e787b3          	add	a5,a5,a4
80003af4:	00279793          	slli	a5,a5,0x2
80003af8:	0001e717          	auipc	a4,0x1e
80003afc:	d4870713          	addi	a4,a4,-696 # 80021840 <__bss_start>
80003b00:	00e78733          	add	a4,a5,a4
80003b04:	fe842783          	lw	a5,-24(s0)
80003b08:	00478793          	addi	a5,a5,4
80003b0c:	00078593          	mv	a1,a5
80003b10:	00070513          	mv	a0,a4
80003b14:	d25fc0ef          	jal	ra,80000838 <vListInsertEnd>
80003b18:	01c0006f          	j	80003b34 <xTaskRemoveFromEventList+0xe4>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
80003b1c:	fe842783          	lw	a5,-24(s0)
80003b20:	01878793          	addi	a5,a5,24
80003b24:	00078593          	mv	a1,a5
80003b28:	0001e517          	auipc	a0,0x1e
80003b2c:	dac50513          	addi	a0,a0,-596 # 800218d4 <xPendingReadyList>
80003b30:	d09fc0ef          	jal	ra,80000838 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
80003b34:	fe842783          	lw	a5,-24(s0)
80003b38:	02c7a703          	lw	a4,44(a5)
80003b3c:	0001d797          	auipc	a5,0x1d
80003b40:	2e078793          	addi	a5,a5,736 # 80020e1c <pxCurrentTCB>
80003b44:	0007a783          	lw	a5,0(a5)
80003b48:	02c7a783          	lw	a5,44(a5)
80003b4c:	02e7f063          	bleu	a4,a5,80003b6c <xTaskRemoveFromEventList+0x11c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
80003b50:	00100793          	li	a5,1
80003b54:	fef42623          	sw	a5,-20(s0)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
80003b58:	0001e797          	auipc	a5,0x1e
80003b5c:	dd078793          	addi	a5,a5,-560 # 80021928 <xYieldPending>
80003b60:	00100713          	li	a4,1
80003b64:	00e7a023          	sw	a4,0(a5)
80003b68:	0080006f          	j	80003b70 <xTaskRemoveFromEventList+0x120>
	}
	else
	{
		xReturn = pdFALSE;
80003b6c:	fe042623          	sw	zero,-20(s0)
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
80003b70:	fec42783          	lw	a5,-20(s0)
}
80003b74:	00078513          	mv	a0,a5
80003b78:	02c12083          	lw	ra,44(sp)
80003b7c:	02812403          	lw	s0,40(sp)
80003b80:	03010113          	addi	sp,sp,48
80003b84:	00008067          	ret

80003b88 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
80003b88:	fd010113          	addi	sp,sp,-48
80003b8c:	02112623          	sw	ra,44(sp)
80003b90:	02812423          	sw	s0,40(sp)
80003b94:	03010413          	addi	s0,sp,48
80003b98:	fca42e23          	sw	a0,-36(s0)
80003b9c:	fcb42c23          	sw	a1,-40(s0)
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
80003ba0:	0001e797          	auipc	a5,0x1e
80003ba4:	d9878793          	addi	a5,a5,-616 # 80021938 <uxSchedulerSuspended>
80003ba8:	0007a783          	lw	a5,0(a5)
80003bac:	00079663          	bnez	a5,80003bb8 <xTaskRemoveFromUnorderedEventList+0x30>
80003bb0:	30007073          	csrci	mstatus,0
80003bb4:	0000006f          	j	80003bb4 <xTaskRemoveFromUnorderedEventList+0x2c>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
80003bb8:	fd842703          	lw	a4,-40(s0)
80003bbc:	800007b7          	lui	a5,0x80000
80003bc0:	00f76733          	or	a4,a4,a5
80003bc4:	fdc42783          	lw	a5,-36(s0)
80003bc8:	00e7a023          	sw	a4,0(a5) # 80000000 <__stack+0xfffc3534>

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
80003bcc:	fdc42783          	lw	a5,-36(s0)
80003bd0:	00c7a783          	lw	a5,12(a5)
80003bd4:	fef42423          	sw	a5,-24(s0)
	configASSERT( pxUnblockedTCB );
80003bd8:	fe842783          	lw	a5,-24(s0)
80003bdc:	00079663          	bnez	a5,80003be8 <xTaskRemoveFromUnorderedEventList+0x60>
80003be0:	30007073          	csrci	mstatus,0
80003be4:	0000006f          	j	80003be4 <xTaskRemoveFromUnorderedEventList+0x5c>
	( void ) uxListRemove( pxEventListItem );
80003be8:	fdc42503          	lw	a0,-36(s0)
80003bec:	da9fc0ef          	jal	ra,80000994 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
80003bf0:	fe842783          	lw	a5,-24(s0)
80003bf4:	00478793          	addi	a5,a5,4
80003bf8:	00078513          	mv	a0,a5
80003bfc:	d99fc0ef          	jal	ra,80000994 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
80003c00:	fe842783          	lw	a5,-24(s0)
80003c04:	02c7a703          	lw	a4,44(a5)
80003c08:	0001e797          	auipc	a5,0x1e
80003c0c:	d1478793          	addi	a5,a5,-748 # 8002191c <uxTopReadyPriority>
80003c10:	0007a783          	lw	a5,0(a5)
80003c14:	00e7fc63          	bleu	a4,a5,80003c2c <xTaskRemoveFromUnorderedEventList+0xa4>
80003c18:	fe842783          	lw	a5,-24(s0)
80003c1c:	02c7a703          	lw	a4,44(a5)
80003c20:	0001e797          	auipc	a5,0x1e
80003c24:	cfc78793          	addi	a5,a5,-772 # 8002191c <uxTopReadyPriority>
80003c28:	00e7a023          	sw	a4,0(a5)
80003c2c:	fe842783          	lw	a5,-24(s0)
80003c30:	02c7a703          	lw	a4,44(a5)
80003c34:	00070793          	mv	a5,a4
80003c38:	00279793          	slli	a5,a5,0x2
80003c3c:	00e787b3          	add	a5,a5,a4
80003c40:	00279793          	slli	a5,a5,0x2
80003c44:	0001e717          	auipc	a4,0x1e
80003c48:	bfc70713          	addi	a4,a4,-1028 # 80021840 <__bss_start>
80003c4c:	00e78733          	add	a4,a5,a4
80003c50:	fe842783          	lw	a5,-24(s0)
80003c54:	00478793          	addi	a5,a5,4
80003c58:	00078593          	mv	a1,a5
80003c5c:	00070513          	mv	a0,a4
80003c60:	bd9fc0ef          	jal	ra,80000838 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
80003c64:	fe842783          	lw	a5,-24(s0)
80003c68:	02c7a703          	lw	a4,44(a5)
80003c6c:	0001d797          	auipc	a5,0x1d
80003c70:	1b078793          	addi	a5,a5,432 # 80020e1c <pxCurrentTCB>
80003c74:	0007a783          	lw	a5,0(a5)
80003c78:	02c7a783          	lw	a5,44(a5)
80003c7c:	02e7f063          	bleu	a4,a5,80003c9c <xTaskRemoveFromUnorderedEventList+0x114>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
80003c80:	00100793          	li	a5,1
80003c84:	fef42623          	sw	a5,-20(s0)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
80003c88:	0001e797          	auipc	a5,0x1e
80003c8c:	ca078793          	addi	a5,a5,-864 # 80021928 <xYieldPending>
80003c90:	00100713          	li	a4,1
80003c94:	00e7a023          	sw	a4,0(a5)
80003c98:	0080006f          	j	80003ca0 <xTaskRemoveFromUnorderedEventList+0x118>
	}
	else
	{
		xReturn = pdFALSE;
80003c9c:	fe042623          	sw	zero,-20(s0)
	}

	return xReturn;
80003ca0:	fec42783          	lw	a5,-20(s0)
}
80003ca4:	00078513          	mv	a0,a5
80003ca8:	02c12083          	lw	ra,44(sp)
80003cac:	02812403          	lw	s0,40(sp)
80003cb0:	03010113          	addi	sp,sp,48
80003cb4:	00008067          	ret

80003cb8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
80003cb8:	fe010113          	addi	sp,sp,-32
80003cbc:	00812e23          	sw	s0,28(sp)
80003cc0:	02010413          	addi	s0,sp,32
80003cc4:	fea42623          	sw	a0,-20(s0)
	configASSERT( pxTimeOut );
80003cc8:	fec42783          	lw	a5,-20(s0)
80003ccc:	00079663          	bnez	a5,80003cd8 <vTaskSetTimeOutState+0x20>
80003cd0:	30007073          	csrci	mstatus,0
80003cd4:	0000006f          	j	80003cd4 <vTaskSetTimeOutState+0x1c>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
80003cd8:	0001e797          	auipc	a5,0x1e
80003cdc:	c5478793          	addi	a5,a5,-940 # 8002192c <xNumOfOverflows>
80003ce0:	0007a703          	lw	a4,0(a5)
80003ce4:	fec42783          	lw	a5,-20(s0)
80003ce8:	00e7a023          	sw	a4,0(a5)
	pxTimeOut->xTimeOnEntering = xTickCount;
80003cec:	0001e797          	auipc	a5,0x1e
80003cf0:	c2c78793          	addi	a5,a5,-980 # 80021918 <xTickCount>
80003cf4:	0007a703          	lw	a4,0(a5)
80003cf8:	fec42783          	lw	a5,-20(s0)
80003cfc:	00e7a223          	sw	a4,4(a5)
}
80003d00:	00000013          	nop
80003d04:	01c12403          	lw	s0,28(sp)
80003d08:	02010113          	addi	sp,sp,32
80003d0c:	00008067          	ret

80003d10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
80003d10:	fd010113          	addi	sp,sp,-48
80003d14:	02112623          	sw	ra,44(sp)
80003d18:	02812423          	sw	s0,40(sp)
80003d1c:	03010413          	addi	s0,sp,48
80003d20:	fca42e23          	sw	a0,-36(s0)
80003d24:	fcb42c23          	sw	a1,-40(s0)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
80003d28:	fdc42783          	lw	a5,-36(s0)
80003d2c:	00079663          	bnez	a5,80003d38 <xTaskCheckForTimeOut+0x28>
80003d30:	30007073          	csrci	mstatus,0
80003d34:	0000006f          	j	80003d34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
80003d38:	fd842783          	lw	a5,-40(s0)
80003d3c:	00079663          	bnez	a5,80003d48 <xTaskCheckForTimeOut+0x38>
80003d40:	30007073          	csrci	mstatus,0
80003d44:	0000006f          	j	80003d44 <xTaskCheckForTimeOut+0x34>

	taskENTER_CRITICAL();
80003d48:	495000ef          	jal	ra,800049dc <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
80003d4c:	0001e797          	auipc	a5,0x1e
80003d50:	bcc78793          	addi	a5,a5,-1076 # 80021918 <xTickCount>
80003d54:	0007a783          	lw	a5,0(a5)
80003d58:	fef42423          	sw	a5,-24(s0)

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
80003d5c:	fd842783          	lw	a5,-40(s0)
80003d60:	0007a703          	lw	a4,0(a5)
80003d64:	fff00793          	li	a5,-1
80003d68:	00f71663          	bne	a4,a5,80003d74 <xTaskCheckForTimeOut+0x64>
			{
				xReturn = pdFALSE;
80003d6c:	fe042623          	sw	zero,-20(s0)
80003d70:	0900006f          	j	80003e00 <xTaskCheckForTimeOut+0xf0>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
80003d74:	fdc42783          	lw	a5,-36(s0)
80003d78:	0007a703          	lw	a4,0(a5)
80003d7c:	0001e797          	auipc	a5,0x1e
80003d80:	bb078793          	addi	a5,a5,-1104 # 8002192c <xNumOfOverflows>
80003d84:	0007a783          	lw	a5,0(a5)
80003d88:	02f70063          	beq	a4,a5,80003da8 <xTaskCheckForTimeOut+0x98>
80003d8c:	fdc42783          	lw	a5,-36(s0)
80003d90:	0047a783          	lw	a5,4(a5)
80003d94:	fe842703          	lw	a4,-24(s0)
80003d98:	00f76863          	bltu	a4,a5,80003da8 <xTaskCheckForTimeOut+0x98>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
80003d9c:	00100793          	li	a5,1
80003da0:	fef42623          	sw	a5,-20(s0)
80003da4:	05c0006f          	j	80003e00 <xTaskCheckForTimeOut+0xf0>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
80003da8:	fdc42783          	lw	a5,-36(s0)
80003dac:	0047a783          	lw	a5,4(a5)
80003db0:	fe842703          	lw	a4,-24(s0)
80003db4:	40f70733          	sub	a4,a4,a5
80003db8:	fd842783          	lw	a5,-40(s0)
80003dbc:	0007a783          	lw	a5,0(a5)
80003dc0:	02f77c63          	bleu	a5,a4,80003df8 <xTaskCheckForTimeOut+0xe8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
80003dc4:	fd842783          	lw	a5,-40(s0)
80003dc8:	0007a703          	lw	a4,0(a5)
80003dcc:	fdc42783          	lw	a5,-36(s0)
80003dd0:	0047a683          	lw	a3,4(a5)
80003dd4:	fe842783          	lw	a5,-24(s0)
80003dd8:	40f687b3          	sub	a5,a3,a5
80003ddc:	00f70733          	add	a4,a4,a5
80003de0:	fd842783          	lw	a5,-40(s0)
80003de4:	00e7a023          	sw	a4,0(a5)
			vTaskSetTimeOutState( pxTimeOut );
80003de8:	fdc42503          	lw	a0,-36(s0)
80003dec:	ecdff0ef          	jal	ra,80003cb8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
80003df0:	fe042623          	sw	zero,-20(s0)
80003df4:	00c0006f          	j	80003e00 <xTaskCheckForTimeOut+0xf0>
		}
		else
		{
			xReturn = pdTRUE;
80003df8:	00100793          	li	a5,1
80003dfc:	fef42623          	sw	a5,-20(s0)
		}
	}
	taskEXIT_CRITICAL();
80003e00:	431000ef          	jal	ra,80004a30 <vTaskExitCritical>

	return xReturn;
80003e04:	fec42783          	lw	a5,-20(s0)
}
80003e08:	00078513          	mv	a0,a5
80003e0c:	02c12083          	lw	ra,44(sp)
80003e10:	02812403          	lw	s0,40(sp)
80003e14:	03010113          	addi	sp,sp,48
80003e18:	00008067          	ret

80003e1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
80003e1c:	ff010113          	addi	sp,sp,-16
80003e20:	00812623          	sw	s0,12(sp)
80003e24:	01010413          	addi	s0,sp,16
	xYieldPending = pdTRUE;
80003e28:	0001e797          	auipc	a5,0x1e
80003e2c:	b0078793          	addi	a5,a5,-1280 # 80021928 <xYieldPending>
80003e30:	00100713          	li	a4,1
80003e34:	00e7a023          	sw	a4,0(a5)
}
80003e38:	00000013          	nop
80003e3c:	00c12403          	lw	s0,12(sp)
80003e40:	01010113          	addi	sp,sp,16
80003e44:	00008067          	ret

80003e48 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
80003e48:	fd010113          	addi	sp,sp,-48
80003e4c:	02812623          	sw	s0,44(sp)
80003e50:	03010413          	addi	s0,sp,48
80003e54:	fca42e23          	sw	a0,-36(s0)
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
80003e58:	fdc42783          	lw	a5,-36(s0)
80003e5c:	00078e63          	beqz	a5,80003e78 <uxTaskGetTaskNumber+0x30>
		{
			pxTCB = ( TCB_t * ) xTask;
80003e60:	fdc42783          	lw	a5,-36(s0)
80003e64:	fef42423          	sw	a5,-24(s0)
			uxReturn = pxTCB->uxTaskNumber;
80003e68:	fe842783          	lw	a5,-24(s0)
80003e6c:	04c7a783          	lw	a5,76(a5)
80003e70:	fef42623          	sw	a5,-20(s0)
80003e74:	0080006f          	j	80003e7c <uxTaskGetTaskNumber+0x34>
		}
		else
		{
			uxReturn = 0U;
80003e78:	fe042623          	sw	zero,-20(s0)
		}

		return uxReturn;
80003e7c:	fec42783          	lw	a5,-20(s0)
	}
80003e80:	00078513          	mv	a0,a5
80003e84:	02c12403          	lw	s0,44(sp)
80003e88:	03010113          	addi	sp,sp,48
80003e8c:	00008067          	ret

80003e90 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
80003e90:	fd010113          	addi	sp,sp,-48
80003e94:	02812623          	sw	s0,44(sp)
80003e98:	03010413          	addi	s0,sp,48
80003e9c:	fca42e23          	sw	a0,-36(s0)
80003ea0:	fcb42c23          	sw	a1,-40(s0)
	TCB_t *pxTCB;

		if( xTask != NULL )
80003ea4:	fdc42783          	lw	a5,-36(s0)
80003ea8:	00078c63          	beqz	a5,80003ec0 <vTaskSetTaskNumber+0x30>
		{
			pxTCB = ( TCB_t * ) xTask;
80003eac:	fdc42783          	lw	a5,-36(s0)
80003eb0:	fef42623          	sw	a5,-20(s0)
			pxTCB->uxTaskNumber = uxHandle;
80003eb4:	fec42783          	lw	a5,-20(s0)
80003eb8:	fd842703          	lw	a4,-40(s0)
80003ebc:	04e7a623          	sw	a4,76(a5)
		}
	}
80003ec0:	00000013          	nop
80003ec4:	02c12403          	lw	s0,44(sp)
80003ec8:	03010113          	addi	sp,sp,48
80003ecc:	00008067          	ret

80003ed0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
80003ed0:	fe010113          	addi	sp,sp,-32
80003ed4:	00112e23          	sw	ra,28(sp)
80003ed8:	00812c23          	sw	s0,24(sp)
80003edc:	02010413          	addi	s0,sp,32
80003ee0:	fea42623          	sw	a0,-20(s0)
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
80003ee4:	228000ef          	jal	ra,8000410c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
80003ee8:	0001e797          	auipc	a5,0x1e
80003eec:	95878793          	addi	a5,a5,-1704 # 80021840 <__bss_start>
80003ef0:	0007a703          	lw	a4,0(a5)
80003ef4:	00100793          	li	a5,1
80003ef8:	fee7f6e3          	bleu	a4,a5,80003ee4 <prvIdleTask+0x14>
			{
				taskYIELD();
80003efc:	d90fc0ef          	jal	ra,8000048c <vPortYield>
		prvCheckTasksWaitingTermination();
80003f00:	fe5ff06f          	j	80003ee4 <prvIdleTask+0x14>

80003f04 <prvInitialiseTCBVariables>:

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80003f04:	fc010113          	addi	sp,sp,-64
80003f08:	02112e23          	sw	ra,60(sp)
80003f0c:	02812c23          	sw	s0,56(sp)
80003f10:	04010413          	addi	s0,sp,64
80003f14:	fca42e23          	sw	a0,-36(s0)
80003f18:	fcb42c23          	sw	a1,-40(s0)
80003f1c:	fcc42a23          	sw	a2,-44(s0)
80003f20:	fcd42823          	sw	a3,-48(s0)
80003f24:	00070793          	mv	a5,a4
80003f28:	fcf41723          	sh	a5,-50(s0)
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80003f2c:	fe042623          	sw	zero,-20(s0)
80003f30:	0440006f          	j	80003f74 <prvInitialiseTCBVariables+0x70>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
80003f34:	fd842703          	lw	a4,-40(s0)
80003f38:	fec42783          	lw	a5,-20(s0)
80003f3c:	00f707b3          	add	a5,a4,a5
80003f40:	0007c703          	lbu	a4,0(a5)
80003f44:	fdc42683          	lw	a3,-36(s0)
80003f48:	fec42783          	lw	a5,-20(s0)
80003f4c:	00f687b3          	add	a5,a3,a5
80003f50:	02e78a23          	sb	a4,52(a5)

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
80003f54:	fd842703          	lw	a4,-40(s0)
80003f58:	fec42783          	lw	a5,-20(s0)
80003f5c:	00f707b3          	add	a5,a4,a5
80003f60:	0007c783          	lbu	a5,0(a5)
80003f64:	02078063          	beqz	a5,80003f84 <prvInitialiseTCBVariables+0x80>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80003f68:	fec42783          	lw	a5,-20(s0)
80003f6c:	00178793          	addi	a5,a5,1
80003f70:	fef42623          	sw	a5,-20(s0)
80003f74:	fec42703          	lw	a4,-20(s0)
80003f78:	00f00793          	li	a5,15
80003f7c:	fae7fce3          	bleu	a4,a5,80003f34 <prvInitialiseTCBVariables+0x30>
80003f80:	0080006f          	j	80003f88 <prvInitialiseTCBVariables+0x84>
		{
			break;
80003f84:	00000013          	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
80003f88:	fdc42783          	lw	a5,-36(s0)
80003f8c:	040781a3          	sb	zero,67(a5)

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
80003f90:	fd442703          	lw	a4,-44(s0)
80003f94:	00400793          	li	a5,4
80003f98:	00e7f663          	bleu	a4,a5,80003fa4 <prvInitialiseTCBVariables+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
80003f9c:	00400793          	li	a5,4
80003fa0:	fcf42a23          	sw	a5,-44(s0)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
80003fa4:	fdc42783          	lw	a5,-36(s0)
80003fa8:	fd442703          	lw	a4,-44(s0)
80003fac:	02e7a623          	sw	a4,44(a5)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
80003fb0:	fdc42783          	lw	a5,-36(s0)
80003fb4:	fd442703          	lw	a4,-44(s0)
80003fb8:	04e7a823          	sw	a4,80(a5)
		pxTCB->uxMutexesHeld = 0;
80003fbc:	fdc42783          	lw	a5,-36(s0)
80003fc0:	0407aa23          	sw	zero,84(a5)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
80003fc4:	fdc42783          	lw	a5,-36(s0)
80003fc8:	00478793          	addi	a5,a5,4
80003fcc:	00078513          	mv	a0,a5
80003fd0:	841fc0ef          	jal	ra,80000810 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
80003fd4:	fdc42783          	lw	a5,-36(s0)
80003fd8:	01878793          	addi	a5,a5,24
80003fdc:	00078513          	mv	a0,a5
80003fe0:	831fc0ef          	jal	ra,80000810 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
80003fe4:	fdc42783          	lw	a5,-36(s0)
80003fe8:	fdc42703          	lw	a4,-36(s0)
80003fec:	00e7a823          	sw	a4,16(a5)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80003ff0:	00500713          	li	a4,5
80003ff4:	fd442783          	lw	a5,-44(s0)
80003ff8:	40f70733          	sub	a4,a4,a5
80003ffc:	fdc42783          	lw	a5,-36(s0)
80004000:	00e7ac23          	sw	a4,24(a5)
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
80004004:	fdc42783          	lw	a5,-36(s0)
80004008:	fdc42703          	lw	a4,-36(s0)
8000400c:	02e7a223          	sw	a4,36(a5)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
80004010:	fdc42783          	lw	a5,-36(s0)
80004014:	0407a223          	sw	zero,68(a5)
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
80004018:	fdc42783          	lw	a5,-36(s0)
8000401c:	0407ac23          	sw	zero,88(a5)
		pxTCB->eNotifyState = eNotWaitingNotification;
80004020:	fdc42783          	lw	a5,-36(s0)
80004024:	0407ae23          	sw	zero,92(a5)
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
80004028:	00000013          	nop
8000402c:	03c12083          	lw	ra,60(sp)
80004030:	03812403          	lw	s0,56(sp)
80004034:	04010113          	addi	sp,sp,64
80004038:	00008067          	ret

8000403c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
8000403c:	fe010113          	addi	sp,sp,-32
80004040:	00112e23          	sw	ra,28(sp)
80004044:	00812c23          	sw	s0,24(sp)
80004048:	02010413          	addi	s0,sp,32
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
8000404c:	fe042623          	sw	zero,-20(s0)
80004050:	0380006f          	j	80004088 <prvInitialiseTaskLists+0x4c>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
80004054:	fec42703          	lw	a4,-20(s0)
80004058:	00070793          	mv	a5,a4
8000405c:	00279793          	slli	a5,a5,0x2
80004060:	00e787b3          	add	a5,a5,a4
80004064:	00279793          	slli	a5,a5,0x2
80004068:	0001d717          	auipc	a4,0x1d
8000406c:	7d870713          	addi	a4,a4,2008 # 80021840 <__bss_start>
80004070:	00e787b3          	add	a5,a5,a4
80004074:	00078513          	mv	a0,a5
80004078:	f34fc0ef          	jal	ra,800007ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
8000407c:	fec42783          	lw	a5,-20(s0)
80004080:	00178793          	addi	a5,a5,1
80004084:	fef42623          	sw	a5,-20(s0)
80004088:	fec42703          	lw	a4,-20(s0)
8000408c:	00400793          	li	a5,4
80004090:	fce7f2e3          	bleu	a4,a5,80004054 <prvInitialiseTaskLists+0x18>
	}

	vListInitialise( &xDelayedTaskList1 );
80004094:	0001e517          	auipc	a0,0x1e
80004098:	81050513          	addi	a0,a0,-2032 # 800218a4 <xDelayedTaskList1>
8000409c:	f10fc0ef          	jal	ra,800007ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
800040a0:	0001e517          	auipc	a0,0x1e
800040a4:	81850513          	addi	a0,a0,-2024 # 800218b8 <xDelayedTaskList2>
800040a8:	f04fc0ef          	jal	ra,800007ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
800040ac:	0001e517          	auipc	a0,0x1e
800040b0:	82850513          	addi	a0,a0,-2008 # 800218d4 <xPendingReadyList>
800040b4:	ef8fc0ef          	jal	ra,800007ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
800040b8:	0001e517          	auipc	a0,0x1e
800040bc:	83050513          	addi	a0,a0,-2000 # 800218e8 <xTasksWaitingTermination>
800040c0:	eecfc0ef          	jal	ra,800007ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
800040c4:	0001e517          	auipc	a0,0x1e
800040c8:	83c50513          	addi	a0,a0,-1988 # 80021900 <xSuspendedTaskList>
800040cc:	ee0fc0ef          	jal	ra,800007ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
800040d0:	0001d797          	auipc	a5,0x1d
800040d4:	7fc78793          	addi	a5,a5,2044 # 800218cc <pxDelayedTaskList>
800040d8:	0001d717          	auipc	a4,0x1d
800040dc:	7cc70713          	addi	a4,a4,1996 # 800218a4 <xDelayedTaskList1>
800040e0:	00e7a023          	sw	a4,0(a5)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
800040e4:	0001d797          	auipc	a5,0x1d
800040e8:	7ec78793          	addi	a5,a5,2028 # 800218d0 <pxOverflowDelayedTaskList>
800040ec:	0001d717          	auipc	a4,0x1d
800040f0:	7cc70713          	addi	a4,a4,1996 # 800218b8 <xDelayedTaskList2>
800040f4:	00e7a023          	sw	a4,0(a5)
}
800040f8:	00000013          	nop
800040fc:	01c12083          	lw	ra,28(sp)
80004100:	01812403          	lw	s0,24(sp)
80004104:	02010113          	addi	sp,sp,32
80004108:	00008067          	ret

8000410c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
8000410c:	fe010113          	addi	sp,sp,-32
80004110:	00112e23          	sw	ra,28(sp)
80004114:	00812c23          	sw	s0,24(sp)
80004118:	02010413          	addi	s0,sp,32
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
8000411c:	0980006f          	j	800041b4 <prvCheckTasksWaitingTermination+0xa8>
		{
			vTaskSuspendAll();
80004120:	dc5fe0ef          	jal	ra,80002ee4 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
80004124:	0001d797          	auipc	a5,0x1d
80004128:	7c478793          	addi	a5,a5,1988 # 800218e8 <xTasksWaitingTermination>
8000412c:	0007a783          	lw	a5,0(a5)
80004130:	0017b793          	seqz	a5,a5
80004134:	0ff7f793          	andi	a5,a5,255
80004138:	fef42623          	sw	a5,-20(s0)
			}
			( void ) xTaskResumeAll();
8000413c:	de1fe0ef          	jal	ra,80002f1c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
80004140:	fec42783          	lw	a5,-20(s0)
80004144:	06079863          	bnez	a5,800041b4 <prvCheckTasksWaitingTermination+0xa8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
80004148:	095000ef          	jal	ra,800049dc <vTaskEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
8000414c:	0001d797          	auipc	a5,0x1d
80004150:	79c78793          	addi	a5,a5,1948 # 800218e8 <xTasksWaitingTermination>
80004154:	00c7a783          	lw	a5,12(a5)
80004158:	00c7a783          	lw	a5,12(a5)
8000415c:	fef42423          	sw	a5,-24(s0)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80004160:	fe842783          	lw	a5,-24(s0)
80004164:	00478793          	addi	a5,a5,4
80004168:	00078513          	mv	a0,a5
8000416c:	829fc0ef          	jal	ra,80000994 <uxListRemove>
					--uxCurrentNumberOfTasks;
80004170:	0001d797          	auipc	a5,0x1d
80004174:	7a478793          	addi	a5,a5,1956 # 80021914 <uxCurrentNumberOfTasks>
80004178:	0007a783          	lw	a5,0(a5)
8000417c:	fff78713          	addi	a4,a5,-1
80004180:	0001d797          	auipc	a5,0x1d
80004184:	79478793          	addi	a5,a5,1940 # 80021914 <uxCurrentNumberOfTasks>
80004188:	00e7a023          	sw	a4,0(a5)
					--uxTasksDeleted;
8000418c:	0001d797          	auipc	a5,0x1d
80004190:	77078793          	addi	a5,a5,1904 # 800218fc <uxTasksDeleted>
80004194:	0007a783          	lw	a5,0(a5)
80004198:	fff78713          	addi	a4,a5,-1
8000419c:	0001d797          	auipc	a5,0x1d
800041a0:	76078793          	addi	a5,a5,1888 # 800218fc <uxTasksDeleted>
800041a4:	00e7a023          	sw	a4,0(a5)
				}
				taskEXIT_CRITICAL();
800041a8:	089000ef          	jal	ra,80004a30 <vTaskExitCritical>

				prvDeleteTCB( pxTCB );
800041ac:	fe842503          	lw	a0,-24(s0)
800041b0:	430000ef          	jal	ra,800045e0 <prvDeleteTCB>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
800041b4:	0001d797          	auipc	a5,0x1d
800041b8:	74878793          	addi	a5,a5,1864 # 800218fc <uxTasksDeleted>
800041bc:	0007a783          	lw	a5,0(a5)
800041c0:	f60790e3          	bnez	a5,80004120 <prvCheckTasksWaitingTermination+0x14>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
800041c4:	00000013          	nop
800041c8:	01c12083          	lw	ra,28(sp)
800041cc:	01812403          	lw	s0,24(sp)
800041d0:	02010113          	addi	sp,sp,32
800041d4:	00008067          	ret

800041d8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
800041d8:	fe010113          	addi	sp,sp,-32
800041dc:	00112e23          	sw	ra,28(sp)
800041e0:	00812c23          	sw	s0,24(sp)
800041e4:	02010413          	addi	s0,sp,32
800041e8:	fea42623          	sw	a0,-20(s0)
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
800041ec:	0001d797          	auipc	a5,0x1d
800041f0:	c3078793          	addi	a5,a5,-976 # 80020e1c <pxCurrentTCB>
800041f4:	0007a783          	lw	a5,0(a5)
800041f8:	fec42703          	lw	a4,-20(s0)
800041fc:	00e7a223          	sw	a4,4(a5)

	if( xTimeToWake < xTickCount )
80004200:	0001d797          	auipc	a5,0x1d
80004204:	71878793          	addi	a5,a5,1816 # 80021918 <xTickCount>
80004208:	0007a783          	lw	a5,0(a5)
8000420c:	fec42703          	lw	a4,-20(s0)
80004210:	02f77863          	bleu	a5,a4,80004240 <prvAddCurrentTaskToDelayedList+0x68>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80004214:	0001d797          	auipc	a5,0x1d
80004218:	6bc78793          	addi	a5,a5,1724 # 800218d0 <pxOverflowDelayedTaskList>
8000421c:	0007a703          	lw	a4,0(a5)
80004220:	0001d797          	auipc	a5,0x1d
80004224:	bfc78793          	addi	a5,a5,-1028 # 80020e1c <pxCurrentTCB>
80004228:	0007a783          	lw	a5,0(a5)
8000422c:	00478793          	addi	a5,a5,4
80004230:	00078593          	mv	a1,a5
80004234:	00070513          	mv	a0,a4
80004238:	e88fc0ef          	jal	ra,800008c0 <vListInsert>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
8000423c:	0500006f          	j	8000428c <prvAddCurrentTaskToDelayedList+0xb4>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80004240:	0001d797          	auipc	a5,0x1d
80004244:	68c78793          	addi	a5,a5,1676 # 800218cc <pxDelayedTaskList>
80004248:	0007a703          	lw	a4,0(a5)
8000424c:	0001d797          	auipc	a5,0x1d
80004250:	bd078793          	addi	a5,a5,-1072 # 80020e1c <pxCurrentTCB>
80004254:	0007a783          	lw	a5,0(a5)
80004258:	00478793          	addi	a5,a5,4
8000425c:	00078593          	mv	a1,a5
80004260:	00070513          	mv	a0,a4
80004264:	e5cfc0ef          	jal	ra,800008c0 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
80004268:	0001d797          	auipc	a5,0x1d
8000426c:	6cc78793          	addi	a5,a5,1740 # 80021934 <xNextTaskUnblockTime>
80004270:	0007a783          	lw	a5,0(a5)
80004274:	fec42703          	lw	a4,-20(s0)
80004278:	00f77a63          	bleu	a5,a4,8000428c <prvAddCurrentTaskToDelayedList+0xb4>
			xNextTaskUnblockTime = xTimeToWake;
8000427c:	0001d797          	auipc	a5,0x1d
80004280:	6b878793          	addi	a5,a5,1720 # 80021934 <xNextTaskUnblockTime>
80004284:	fec42703          	lw	a4,-20(s0)
80004288:	00e7a023          	sw	a4,0(a5)
}
8000428c:	00000013          	nop
80004290:	01c12083          	lw	ra,28(sp)
80004294:	01812403          	lw	s0,24(sp)
80004298:	02010113          	addi	sp,sp,32
8000429c:	00008067          	ret

800042a0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
800042a0:	fd010113          	addi	sp,sp,-48
800042a4:	02112623          	sw	ra,44(sp)
800042a8:	02812423          	sw	s0,40(sp)
800042ac:	03010413          	addi	s0,sp,48
800042b0:	00050793          	mv	a5,a0
800042b4:	fcb42c23          	sw	a1,-40(s0)
800042b8:	fcf41f23          	sh	a5,-34(s0)
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
800042bc:	fd842783          	lw	a5,-40(s0)
800042c0:	00079e63          	bnez	a5,800042dc <prvAllocateTCBAndStack+0x3c>
800042c4:	fde45783          	lhu	a5,-34(s0)
800042c8:	00279793          	slli	a5,a5,0x2
800042cc:	00078513          	mv	a0,a5
800042d0:	520020ef          	jal	ra,800067f0 <pvPortMalloc>
800042d4:	00050793          	mv	a5,a0
800042d8:	0080006f          	j	800042e0 <prvAllocateTCBAndStack+0x40>
800042dc:	fd842783          	lw	a5,-40(s0)
800042e0:	fef42423          	sw	a5,-24(s0)

		if( pxStack != NULL )
800042e4:	fe842783          	lw	a5,-24(s0)
800042e8:	02078a63          	beqz	a5,8000431c <prvAllocateTCBAndStack+0x7c>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
800042ec:	06000513          	li	a0,96
800042f0:	500020ef          	jal	ra,800067f0 <pvPortMalloc>
800042f4:	fea42623          	sw	a0,-20(s0)

			if( pxNewTCB != NULL )
800042f8:	fec42783          	lw	a5,-20(s0)
800042fc:	00078a63          	beqz	a5,80004310 <prvAllocateTCBAndStack+0x70>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
80004300:	fec42783          	lw	a5,-20(s0)
80004304:	fe842703          	lw	a4,-24(s0)
80004308:	02e7a823          	sw	a4,48(a5)
8000430c:	0140006f          	j	80004320 <prvAllocateTCBAndStack+0x80>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
80004310:	fe842503          	lw	a0,-24(s0)
80004314:	6e4020ef          	jal	ra,800069f8 <vPortFree>
80004318:	0080006f          	j	80004320 <prvAllocateTCBAndStack+0x80>
			}
		}
		else
		{
			pxNewTCB = NULL;
8000431c:	fe042623          	sw	zero,-20(s0)
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
80004320:	fec42783          	lw	a5,-20(s0)
80004324:	02078263          	beqz	a5,80004348 <prvAllocateTCBAndStack+0xa8>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
80004328:	fec42783          	lw	a5,-20(s0)
8000432c:	0307a703          	lw	a4,48(a5)
80004330:	fde45783          	lhu	a5,-34(s0)
80004334:	00279793          	slli	a5,a5,0x2
80004338:	00078613          	mv	a2,a5
8000433c:	0a500593          	li	a1,165
80004340:	00070513          	mv	a0,a4
80004344:	2e4040ef          	jal	ra,80008628 <memset>
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
80004348:	fec42783          	lw	a5,-20(s0)
}
8000434c:	00078513          	mv	a0,a5
80004350:	02c12083          	lw	ra,44(sp)
80004354:	02812403          	lw	s0,40(sp)
80004358:	03010113          	addi	sp,sp,48
8000435c:	00008067          	ret

80004360 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
80004360:	fc010113          	addi	sp,sp,-64
80004364:	02112e23          	sw	ra,60(sp)
80004368:	02812c23          	sw	s0,56(sp)
8000436c:	02912a23          	sw	s1,52(sp)
80004370:	04010413          	addi	s0,sp,64
80004374:	fca42623          	sw	a0,-52(s0)
80004378:	fcb42423          	sw	a1,-56(s0)
8000437c:	fcc42223          	sw	a2,-60(s0)
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
80004380:	fe042623          	sw	zero,-20(s0)

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
80004384:	fc842783          	lw	a5,-56(s0)
80004388:	0007a783          	lw	a5,0(a5)
8000438c:	1c078863          	beqz	a5,8000455c <prvListTaskWithinSingleList+0x1fc>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
80004390:	fc842783          	lw	a5,-56(s0)
80004394:	fef42423          	sw	a5,-24(s0)
80004398:	fe842783          	lw	a5,-24(s0)
8000439c:	0047a783          	lw	a5,4(a5)
800043a0:	0047a703          	lw	a4,4(a5)
800043a4:	fe842783          	lw	a5,-24(s0)
800043a8:	00e7a223          	sw	a4,4(a5)
800043ac:	fe842783          	lw	a5,-24(s0)
800043b0:	0047a703          	lw	a4,4(a5)
800043b4:	fe842783          	lw	a5,-24(s0)
800043b8:	00878793          	addi	a5,a5,8
800043bc:	00f71c63          	bne	a4,a5,800043d4 <prvListTaskWithinSingleList+0x74>
800043c0:	fe842783          	lw	a5,-24(s0)
800043c4:	0047a783          	lw	a5,4(a5)
800043c8:	0047a703          	lw	a4,4(a5)
800043cc:	fe842783          	lw	a5,-24(s0)
800043d0:	00e7a223          	sw	a4,4(a5)
800043d4:	fe842783          	lw	a5,-24(s0)
800043d8:	0047a783          	lw	a5,4(a5)
800043dc:	00c7a783          	lw	a5,12(a5)
800043e0:	fef42223          	sw	a5,-28(s0)
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
800043e4:	fc842783          	lw	a5,-56(s0)
800043e8:	fef42023          	sw	a5,-32(s0)
800043ec:	fe042783          	lw	a5,-32(s0)
800043f0:	0047a783          	lw	a5,4(a5)
800043f4:	0047a703          	lw	a4,4(a5)
800043f8:	fe042783          	lw	a5,-32(s0)
800043fc:	00e7a223          	sw	a4,4(a5)
80004400:	fe042783          	lw	a5,-32(s0)
80004404:	0047a703          	lw	a4,4(a5)
80004408:	fe042783          	lw	a5,-32(s0)
8000440c:	00878793          	addi	a5,a5,8
80004410:	00f71c63          	bne	a4,a5,80004428 <prvListTaskWithinSingleList+0xc8>
80004414:	fe042783          	lw	a5,-32(s0)
80004418:	0047a783          	lw	a5,4(a5)
8000441c:	0047a703          	lw	a4,4(a5)
80004420:	fe042783          	lw	a5,-32(s0)
80004424:	00e7a223          	sw	a4,4(a5)
80004428:	fe042783          	lw	a5,-32(s0)
8000442c:	0047a783          	lw	a5,4(a5)
80004430:	00c7a783          	lw	a5,12(a5)
80004434:	fcf42e23          	sw	a5,-36(s0)

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
80004438:	fec42783          	lw	a5,-20(s0)
8000443c:	00579793          	slli	a5,a5,0x5
80004440:	fcc42703          	lw	a4,-52(s0)
80004444:	00f707b3          	add	a5,a4,a5
80004448:	fdc42703          	lw	a4,-36(s0)
8000444c:	00e7a023          	sw	a4,0(a5)
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
80004450:	fec42783          	lw	a5,-20(s0)
80004454:	00579793          	slli	a5,a5,0x5
80004458:	fcc42703          	lw	a4,-52(s0)
8000445c:	00f707b3          	add	a5,a4,a5
80004460:	fdc42703          	lw	a4,-36(s0)
80004464:	03470713          	addi	a4,a4,52
80004468:	00e7a223          	sw	a4,4(a5)
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
8000446c:	fec42783          	lw	a5,-20(s0)
80004470:	00579793          	slli	a5,a5,0x5
80004474:	fcc42703          	lw	a4,-52(s0)
80004478:	00f707b3          	add	a5,a4,a5
8000447c:	fdc42703          	lw	a4,-36(s0)
80004480:	04872703          	lw	a4,72(a4)
80004484:	00e7a423          	sw	a4,8(a5)
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
80004488:	fec42783          	lw	a5,-20(s0)
8000448c:	00579793          	slli	a5,a5,0x5
80004490:	fcc42703          	lw	a4,-52(s0)
80004494:	00f707b3          	add	a5,a4,a5
80004498:	fc442703          	lw	a4,-60(s0)
8000449c:	00e7a623          	sw	a4,12(a5)
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
800044a0:	fec42783          	lw	a5,-20(s0)
800044a4:	00579793          	slli	a5,a5,0x5
800044a8:	fcc42703          	lw	a4,-52(s0)
800044ac:	00f707b3          	add	a5,a4,a5
800044b0:	fdc42703          	lw	a4,-36(s0)
800044b4:	02c72703          	lw	a4,44(a4)
800044b8:	00e7a823          	sw	a4,16(a5)
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a chance
					it is actually just blocked indefinitely - so really it should
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
800044bc:	fc442703          	lw	a4,-60(s0)
800044c0:	00300793          	li	a5,3
800044c4:	02f71463          	bne	a4,a5,800044ec <prvListTaskWithinSingleList+0x18c>
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
800044c8:	fdc42783          	lw	a5,-36(s0)
800044cc:	0287a783          	lw	a5,40(a5)
800044d0:	00078e63          	beqz	a5,800044ec <prvListTaskWithinSingleList+0x18c>
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
800044d4:	fec42783          	lw	a5,-20(s0)
800044d8:	00579793          	slli	a5,a5,0x5
800044dc:	fcc42703          	lw	a4,-52(s0)
800044e0:	00f707b3          	add	a5,a4,a5
800044e4:	00200713          	li	a4,2
800044e8:	00e7a623          	sw	a4,12(a5)
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
800044ec:	fec42783          	lw	a5,-20(s0)
800044f0:	00579793          	slli	a5,a5,0x5
800044f4:	fcc42703          	lw	a4,-52(s0)
800044f8:	00f707b3          	add	a5,a4,a5
800044fc:	fdc42703          	lw	a4,-36(s0)
80004500:	05072703          	lw	a4,80(a4)
80004504:	00e7aa23          	sw	a4,20(a5)
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
80004508:	fec42783          	lw	a5,-20(s0)
8000450c:	00579793          	slli	a5,a5,0x5
80004510:	fcc42703          	lw	a4,-52(s0)
80004514:	00f707b3          	add	a5,a4,a5
80004518:	0007ac23          	sw	zero,24(a5)
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
8000451c:	fdc42783          	lw	a5,-36(s0)
80004520:	0307a683          	lw	a3,48(a5)
80004524:	fec42783          	lw	a5,-20(s0)
80004528:	00579793          	slli	a5,a5,0x5
8000452c:	fcc42703          	lw	a4,-52(s0)
80004530:	00f704b3          	add	s1,a4,a5
80004534:	00068513          	mv	a0,a3
80004538:	040000ef          	jal	ra,80004578 <prvTaskCheckFreeStackSpace>
8000453c:	00050793          	mv	a5,a0
80004540:	00f49e23          	sh	a5,28(s1)
				}
				#endif

				uxTask++;
80004544:	fec42783          	lw	a5,-20(s0)
80004548:	00178793          	addi	a5,a5,1
8000454c:	fef42623          	sw	a5,-20(s0)

			} while( pxNextTCB != pxFirstTCB );
80004550:	fdc42703          	lw	a4,-36(s0)
80004554:	fe442783          	lw	a5,-28(s0)
80004558:	e8f716e3          	bne	a4,a5,800043e4 <prvListTaskWithinSingleList+0x84>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
8000455c:	fec42783          	lw	a5,-20(s0)
	}
80004560:	00078513          	mv	a0,a5
80004564:	03c12083          	lw	ra,60(sp)
80004568:	03812403          	lw	s0,56(sp)
8000456c:	03412483          	lw	s1,52(sp)
80004570:	04010113          	addi	sp,sp,64
80004574:	00008067          	ret

80004578 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
80004578:	fd010113          	addi	sp,sp,-48
8000457c:	02812623          	sw	s0,44(sp)
80004580:	03010413          	addi	s0,sp,48
80004584:	fca42e23          	sw	a0,-36(s0)
	uint32_t ulCount = 0U;
80004588:	fe042623          	sw	zero,-20(s0)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
8000458c:	01c0006f          	j	800045a8 <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
80004590:	fdc42783          	lw	a5,-36(s0)
80004594:	00178793          	addi	a5,a5,1
80004598:	fcf42e23          	sw	a5,-36(s0)
			ulCount++;
8000459c:	fec42783          	lw	a5,-20(s0)
800045a0:	00178793          	addi	a5,a5,1
800045a4:	fef42623          	sw	a5,-20(s0)
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
800045a8:	fdc42783          	lw	a5,-36(s0)
800045ac:	0007c703          	lbu	a4,0(a5)
800045b0:	0a500793          	li	a5,165
800045b4:	fcf70ee3          	beq	a4,a5,80004590 <prvTaskCheckFreeStackSpace+0x18>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
800045b8:	fec42783          	lw	a5,-20(s0)
800045bc:	0027d793          	srli	a5,a5,0x2
800045c0:	fef42623          	sw	a5,-20(s0)

		return ( uint16_t ) ulCount;
800045c4:	fec42783          	lw	a5,-20(s0)
800045c8:	01079793          	slli	a5,a5,0x10
800045cc:	0107d793          	srli	a5,a5,0x10
	}
800045d0:	00078513          	mv	a0,a5
800045d4:	02c12403          	lw	s0,44(sp)
800045d8:	03010113          	addi	sp,sp,48
800045dc:	00008067          	ret

800045e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
800045e0:	fe010113          	addi	sp,sp,-32
800045e4:	00112e23          	sw	ra,28(sp)
800045e8:	00812c23          	sw	s0,24(sp)
800045ec:	02010413          	addi	s0,sp,32
800045f0:	fea42623          	sw	a0,-20(s0)
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
800045f4:	fec42783          	lw	a5,-20(s0)
800045f8:	0307a783          	lw	a5,48(a5)
800045fc:	00078513          	mv	a0,a5
80004600:	3f8020ef          	jal	ra,800069f8 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
80004604:	fec42503          	lw	a0,-20(s0)
80004608:	3f0020ef          	jal	ra,800069f8 <vPortFree>
	}
8000460c:	00000013          	nop
80004610:	01c12083          	lw	ra,28(sp)
80004614:	01812403          	lw	s0,24(sp)
80004618:	02010113          	addi	sp,sp,32
8000461c:	00008067          	ret

80004620 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
80004620:	fe010113          	addi	sp,sp,-32
80004624:	00812e23          	sw	s0,28(sp)
80004628:	02010413          	addi	s0,sp,32
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
8000462c:	0001d797          	auipc	a5,0x1d
80004630:	2a078793          	addi	a5,a5,672 # 800218cc <pxDelayedTaskList>
80004634:	0007a783          	lw	a5,0(a5)
80004638:	0007a783          	lw	a5,0(a5)
8000463c:	00079663          	bnez	a5,80004648 <prvResetNextTaskUnblockTime+0x28>
80004640:	00100793          	li	a5,1
80004644:	0080006f          	j	8000464c <prvResetNextTaskUnblockTime+0x2c>
80004648:	00000793          	li	a5,0
8000464c:	00078c63          	beqz	a5,80004664 <prvResetNextTaskUnblockTime+0x44>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
80004650:	0001d797          	auipc	a5,0x1d
80004654:	2e478793          	addi	a5,a5,740 # 80021934 <xNextTaskUnblockTime>
80004658:	fff00713          	li	a4,-1
8000465c:	00e7a023          	sw	a4,0(a5)
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
80004660:	0300006f          	j	80004690 <prvResetNextTaskUnblockTime+0x70>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80004664:	0001d797          	auipc	a5,0x1d
80004668:	26878793          	addi	a5,a5,616 # 800218cc <pxDelayedTaskList>
8000466c:	0007a783          	lw	a5,0(a5)
80004670:	00c7a783          	lw	a5,12(a5)
80004674:	00c7a783          	lw	a5,12(a5)
80004678:	fef42623          	sw	a5,-20(s0)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
8000467c:	fec42783          	lw	a5,-20(s0)
80004680:	0047a703          	lw	a4,4(a5)
80004684:	0001d797          	auipc	a5,0x1d
80004688:	2b078793          	addi	a5,a5,688 # 80021934 <xNextTaskUnblockTime>
8000468c:	00e7a023          	sw	a4,0(a5)
}
80004690:	00000013          	nop
80004694:	01c12403          	lw	s0,28(sp)
80004698:	02010113          	addi	sp,sp,32
8000469c:	00008067          	ret

800046a0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
800046a0:	fe010113          	addi	sp,sp,-32
800046a4:	00812e23          	sw	s0,28(sp)
800046a8:	02010413          	addi	s0,sp,32
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
800046ac:	0001c797          	auipc	a5,0x1c
800046b0:	77078793          	addi	a5,a5,1904 # 80020e1c <pxCurrentTCB>
800046b4:	0007a783          	lw	a5,0(a5)
800046b8:	fef42623          	sw	a5,-20(s0)

		return xReturn;
800046bc:	fec42783          	lw	a5,-20(s0)
	}
800046c0:	00078513          	mv	a0,a5
800046c4:	01c12403          	lw	s0,28(sp)
800046c8:	02010113          	addi	sp,sp,32
800046cc:	00008067          	ret

800046d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
800046d0:	fe010113          	addi	sp,sp,-32
800046d4:	00812e23          	sw	s0,28(sp)
800046d8:	02010413          	addi	s0,sp,32
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
800046dc:	0001d797          	auipc	a5,0x1d
800046e0:	24478793          	addi	a5,a5,580 # 80021920 <xSchedulerRunning>
800046e4:	0007a783          	lw	a5,0(a5)
800046e8:	00079863          	bnez	a5,800046f8 <xTaskGetSchedulerState+0x28>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
800046ec:	00100793          	li	a5,1
800046f0:	fef42623          	sw	a5,-20(s0)
800046f4:	0240006f          	j	80004718 <xTaskGetSchedulerState+0x48>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
800046f8:	0001d797          	auipc	a5,0x1d
800046fc:	24078793          	addi	a5,a5,576 # 80021938 <uxSchedulerSuspended>
80004700:	0007a783          	lw	a5,0(a5)
80004704:	00079863          	bnez	a5,80004714 <xTaskGetSchedulerState+0x44>
			{
				xReturn = taskSCHEDULER_RUNNING;
80004708:	00200793          	li	a5,2
8000470c:	fef42623          	sw	a5,-20(s0)
80004710:	0080006f          	j	80004718 <xTaskGetSchedulerState+0x48>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
80004714:	fe042623          	sw	zero,-20(s0)
			}
		}

		return xReturn;
80004718:	fec42783          	lw	a5,-20(s0)
	}
8000471c:	00078513          	mv	a0,a5
80004720:	01c12403          	lw	s0,28(sp)
80004724:	02010113          	addi	sp,sp,32
80004728:	00008067          	ret

8000472c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
8000472c:	fd010113          	addi	sp,sp,-48
80004730:	02112623          	sw	ra,44(sp)
80004734:	02812423          	sw	s0,40(sp)
80004738:	03010413          	addi	s0,sp,48
8000473c:	fca42e23          	sw	a0,-36(s0)
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
80004740:	fdc42783          	lw	a5,-36(s0)
80004744:	fef42623          	sw	a5,-20(s0)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
80004748:	fdc42783          	lw	a5,-36(s0)
8000474c:	12078a63          	beqz	a5,80004880 <vTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
80004750:	fec42783          	lw	a5,-20(s0)
80004754:	02c7a703          	lw	a4,44(a5)
80004758:	0001c797          	auipc	a5,0x1c
8000475c:	6c478793          	addi	a5,a5,1732 # 80020e1c <pxCurrentTCB>
80004760:	0007a783          	lw	a5,0(a5)
80004764:	02c7a783          	lw	a5,44(a5)
80004768:	10f77c63          	bleu	a5,a4,80004880 <vTaskPriorityInherit+0x154>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
8000476c:	fec42783          	lw	a5,-20(s0)
80004770:	0187a783          	lw	a5,24(a5)
80004774:	0207c263          	bltz	a5,80004798 <vTaskPriorityInherit+0x6c>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80004778:	0001c797          	auipc	a5,0x1c
8000477c:	6a478793          	addi	a5,a5,1700 # 80020e1c <pxCurrentTCB>
80004780:	0007a783          	lw	a5,0(a5)
80004784:	02c7a783          	lw	a5,44(a5)
80004788:	00500713          	li	a4,5
8000478c:	40f70733          	sub	a4,a4,a5
80004790:	fec42783          	lw	a5,-20(s0)
80004794:	00e7ac23          	sw	a4,24(a5)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
80004798:	fec42783          	lw	a5,-20(s0)
8000479c:	0147a683          	lw	a3,20(a5)
800047a0:	fec42783          	lw	a5,-20(s0)
800047a4:	02c7a703          	lw	a4,44(a5)
800047a8:	00070793          	mv	a5,a4
800047ac:	00279793          	slli	a5,a5,0x2
800047b0:	00e787b3          	add	a5,a5,a4
800047b4:	00279793          	slli	a5,a5,0x2
800047b8:	0001d717          	auipc	a4,0x1d
800047bc:	08870713          	addi	a4,a4,136 # 80021840 <__bss_start>
800047c0:	00e787b3          	add	a5,a5,a4
800047c4:	00f69663          	bne	a3,a5,800047d0 <vTaskPriorityInherit+0xa4>
800047c8:	00100793          	li	a5,1
800047cc:	0080006f          	j	800047d4 <vTaskPriorityInherit+0xa8>
800047d0:	00000793          	li	a5,0
800047d4:	08078a63          	beqz	a5,80004868 <vTaskPriorityInherit+0x13c>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
800047d8:	fec42783          	lw	a5,-20(s0)
800047dc:	00478793          	addi	a5,a5,4
800047e0:	00078513          	mv	a0,a5
800047e4:	9b0fc0ef          	jal	ra,80000994 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
800047e8:	0001c797          	auipc	a5,0x1c
800047ec:	63478793          	addi	a5,a5,1588 # 80020e1c <pxCurrentTCB>
800047f0:	0007a783          	lw	a5,0(a5)
800047f4:	02c7a703          	lw	a4,44(a5)
800047f8:	fec42783          	lw	a5,-20(s0)
800047fc:	02e7a623          	sw	a4,44(a5)
					prvAddTaskToReadyList( pxTCB );
80004800:	fec42783          	lw	a5,-20(s0)
80004804:	02c7a703          	lw	a4,44(a5)
80004808:	0001d797          	auipc	a5,0x1d
8000480c:	11478793          	addi	a5,a5,276 # 8002191c <uxTopReadyPriority>
80004810:	0007a783          	lw	a5,0(a5)
80004814:	00e7fc63          	bleu	a4,a5,8000482c <vTaskPriorityInherit+0x100>
80004818:	fec42783          	lw	a5,-20(s0)
8000481c:	02c7a703          	lw	a4,44(a5)
80004820:	0001d797          	auipc	a5,0x1d
80004824:	0fc78793          	addi	a5,a5,252 # 8002191c <uxTopReadyPriority>
80004828:	00e7a023          	sw	a4,0(a5)
8000482c:	fec42783          	lw	a5,-20(s0)
80004830:	02c7a703          	lw	a4,44(a5)
80004834:	00070793          	mv	a5,a4
80004838:	00279793          	slli	a5,a5,0x2
8000483c:	00e787b3          	add	a5,a5,a4
80004840:	00279793          	slli	a5,a5,0x2
80004844:	0001d717          	auipc	a4,0x1d
80004848:	ffc70713          	addi	a4,a4,-4 # 80021840 <__bss_start>
8000484c:	00e78733          	add	a4,a5,a4
80004850:	fec42783          	lw	a5,-20(s0)
80004854:	00478793          	addi	a5,a5,4
80004858:	00078593          	mv	a1,a5
8000485c:	00070513          	mv	a0,a4
80004860:	fd9fb0ef          	jal	ra,80000838 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80004864:	01c0006f          	j	80004880 <vTaskPriorityInherit+0x154>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
80004868:	0001c797          	auipc	a5,0x1c
8000486c:	5b478793          	addi	a5,a5,1460 # 80020e1c <pxCurrentTCB>
80004870:	0007a783          	lw	a5,0(a5)
80004874:	02c7a703          	lw	a4,44(a5)
80004878:	fec42783          	lw	a5,-20(s0)
8000487c:	02e7a623          	sw	a4,44(a5)
	}
80004880:	00000013          	nop
80004884:	02c12083          	lw	ra,44(sp)
80004888:	02812403          	lw	s0,40(sp)
8000488c:	03010113          	addi	sp,sp,48
80004890:	00008067          	ret

80004894 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
80004894:	fd010113          	addi	sp,sp,-48
80004898:	02112623          	sw	ra,44(sp)
8000489c:	02812423          	sw	s0,40(sp)
800048a0:	03010413          	addi	s0,sp,48
800048a4:	fca42e23          	sw	a0,-36(s0)
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
800048a8:	fdc42783          	lw	a5,-36(s0)
800048ac:	fef42423          	sw	a5,-24(s0)
	BaseType_t xReturn = pdFALSE;
800048b0:	fe042623          	sw	zero,-20(s0)

		if( pxMutexHolder != NULL )
800048b4:	fdc42783          	lw	a5,-36(s0)
800048b8:	10078663          	beqz	a5,800049c4 <xTaskPriorityDisinherit+0x130>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
800048bc:	0001c797          	auipc	a5,0x1c
800048c0:	56078793          	addi	a5,a5,1376 # 80020e1c <pxCurrentTCB>
800048c4:	0007a783          	lw	a5,0(a5)
800048c8:	fe842703          	lw	a4,-24(s0)
800048cc:	00f70663          	beq	a4,a5,800048d8 <xTaskPriorityDisinherit+0x44>
800048d0:	30007073          	csrci	mstatus,0
800048d4:	0000006f          	j	800048d4 <xTaskPriorityDisinherit+0x40>

			configASSERT( pxTCB->uxMutexesHeld );
800048d8:	fe842783          	lw	a5,-24(s0)
800048dc:	0547a783          	lw	a5,84(a5)
800048e0:	00079663          	bnez	a5,800048ec <xTaskPriorityDisinherit+0x58>
800048e4:	30007073          	csrci	mstatus,0
800048e8:	0000006f          	j	800048e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
800048ec:	fe842783          	lw	a5,-24(s0)
800048f0:	0547a783          	lw	a5,84(a5)
800048f4:	fff78713          	addi	a4,a5,-1
800048f8:	fe842783          	lw	a5,-24(s0)
800048fc:	04e7aa23          	sw	a4,84(a5)

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
80004900:	fe842783          	lw	a5,-24(s0)
80004904:	02c7a703          	lw	a4,44(a5)
80004908:	fe842783          	lw	a5,-24(s0)
8000490c:	0507a783          	lw	a5,80(a5)
80004910:	0af70a63          	beq	a4,a5,800049c4 <xTaskPriorityDisinherit+0x130>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
80004914:	fe842783          	lw	a5,-24(s0)
80004918:	0547a783          	lw	a5,84(a5)
8000491c:	0a079463          	bnez	a5,800049c4 <xTaskPriorityDisinherit+0x130>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80004920:	fe842783          	lw	a5,-24(s0)
80004924:	00478793          	addi	a5,a5,4
80004928:	00078513          	mv	a0,a5
8000492c:	868fc0ef          	jal	ra,80000994 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
80004930:	fe842783          	lw	a5,-24(s0)
80004934:	0507a703          	lw	a4,80(a5)
80004938:	fe842783          	lw	a5,-24(s0)
8000493c:	02e7a623          	sw	a4,44(a5)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80004940:	fe842783          	lw	a5,-24(s0)
80004944:	02c7a783          	lw	a5,44(a5)
80004948:	00500713          	li	a4,5
8000494c:	40f70733          	sub	a4,a4,a5
80004950:	fe842783          	lw	a5,-24(s0)
80004954:	00e7ac23          	sw	a4,24(a5)
					prvAddTaskToReadyList( pxTCB );
80004958:	fe842783          	lw	a5,-24(s0)
8000495c:	02c7a703          	lw	a4,44(a5)
80004960:	0001d797          	auipc	a5,0x1d
80004964:	fbc78793          	addi	a5,a5,-68 # 8002191c <uxTopReadyPriority>
80004968:	0007a783          	lw	a5,0(a5)
8000496c:	00e7fc63          	bleu	a4,a5,80004984 <xTaskPriorityDisinherit+0xf0>
80004970:	fe842783          	lw	a5,-24(s0)
80004974:	02c7a703          	lw	a4,44(a5)
80004978:	0001d797          	auipc	a5,0x1d
8000497c:	fa478793          	addi	a5,a5,-92 # 8002191c <uxTopReadyPriority>
80004980:	00e7a023          	sw	a4,0(a5)
80004984:	fe842783          	lw	a5,-24(s0)
80004988:	02c7a703          	lw	a4,44(a5)
8000498c:	00070793          	mv	a5,a4
80004990:	00279793          	slli	a5,a5,0x2
80004994:	00e787b3          	add	a5,a5,a4
80004998:	00279793          	slli	a5,a5,0x2
8000499c:	0001d717          	auipc	a4,0x1d
800049a0:	ea470713          	addi	a4,a4,-348 # 80021840 <__bss_start>
800049a4:	00e78733          	add	a4,a5,a4
800049a8:	fe842783          	lw	a5,-24(s0)
800049ac:	00478793          	addi	a5,a5,4
800049b0:	00078593          	mv	a1,a5
800049b4:	00070513          	mv	a0,a4
800049b8:	e81fb0ef          	jal	ra,80000838 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
800049bc:	00100793          	li	a5,1
800049c0:	fef42623          	sw	a5,-20(s0)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
800049c4:	fec42783          	lw	a5,-20(s0)
	}
800049c8:	00078513          	mv	a0,a5
800049cc:	02c12083          	lw	ra,44(sp)
800049d0:	02812403          	lw	s0,40(sp)
800049d4:	03010113          	addi	sp,sp,48
800049d8:	00008067          	ret

800049dc <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
800049dc:	ff010113          	addi	sp,sp,-16
800049e0:	00812623          	sw	s0,12(sp)
800049e4:	01010413          	addi	s0,sp,16
		portDISABLE_INTERRUPTS();
800049e8:	30007073          	csrci	mstatus,0

		if( xSchedulerRunning != pdFALSE )
800049ec:	0001d797          	auipc	a5,0x1d
800049f0:	f3478793          	addi	a5,a5,-204 # 80021920 <xSchedulerRunning>
800049f4:	0007a783          	lw	a5,0(a5)
800049f8:	02078463          	beqz	a5,80004a20 <vTaskEnterCritical+0x44>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
800049fc:	0001c797          	auipc	a5,0x1c
80004a00:	42078793          	addi	a5,a5,1056 # 80020e1c <pxCurrentTCB>
80004a04:	0007a783          	lw	a5,0(a5)
80004a08:	0447a703          	lw	a4,68(a5)
80004a0c:	00170713          	addi	a4,a4,1
80004a10:	04e7a223          	sw	a4,68(a5)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
80004a14:	0001c797          	auipc	a5,0x1c
80004a18:	40878793          	addi	a5,a5,1032 # 80020e1c <pxCurrentTCB>
80004a1c:	0007a783          	lw	a5,0(a5)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80004a20:	00000013          	nop
80004a24:	00c12403          	lw	s0,12(sp)
80004a28:	01010113          	addi	sp,sp,16
80004a2c:	00008067          	ret

80004a30 <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
80004a30:	ff010113          	addi	sp,sp,-16
80004a34:	00812623          	sw	s0,12(sp)
80004a38:	01010413          	addi	s0,sp,16
		if( xSchedulerRunning != pdFALSE )
80004a3c:	0001d797          	auipc	a5,0x1d
80004a40:	ee478793          	addi	a5,a5,-284 # 80021920 <xSchedulerRunning>
80004a44:	0007a783          	lw	a5,0(a5)
80004a48:	04078463          	beqz	a5,80004a90 <vTaskExitCritical+0x60>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
80004a4c:	0001c797          	auipc	a5,0x1c
80004a50:	3d078793          	addi	a5,a5,976 # 80020e1c <pxCurrentTCB>
80004a54:	0007a783          	lw	a5,0(a5)
80004a58:	0447a783          	lw	a5,68(a5)
80004a5c:	02078a63          	beqz	a5,80004a90 <vTaskExitCritical+0x60>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
80004a60:	0001c797          	auipc	a5,0x1c
80004a64:	3bc78793          	addi	a5,a5,956 # 80020e1c <pxCurrentTCB>
80004a68:	0007a783          	lw	a5,0(a5)
80004a6c:	0447a703          	lw	a4,68(a5)
80004a70:	fff70713          	addi	a4,a4,-1
80004a74:	04e7a223          	sw	a4,68(a5)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
80004a78:	0001c797          	auipc	a5,0x1c
80004a7c:	3a478793          	addi	a5,a5,932 # 80020e1c <pxCurrentTCB>
80004a80:	0007a783          	lw	a5,0(a5)
80004a84:	0447a783          	lw	a5,68(a5)
80004a88:	00079463          	bnez	a5,80004a90 <vTaskExitCritical+0x60>
				{
					portENABLE_INTERRUPTS();
80004a8c:	30046073          	csrsi	mstatus,8
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80004a90:	00000013          	nop
80004a94:	00c12403          	lw	s0,12(sp)
80004a98:	01010113          	addi	sp,sp,16
80004a9c:	00008067          	ret

80004aa0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
80004aa0:	fe010113          	addi	sp,sp,-32
80004aa4:	00812e23          	sw	s0,28(sp)
80004aa8:	02010413          	addi	s0,sp,32
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
80004aac:	0001c797          	auipc	a5,0x1c
80004ab0:	37078793          	addi	a5,a5,880 # 80020e1c <pxCurrentTCB>
80004ab4:	0007a783          	lw	a5,0(a5)
80004ab8:	0187a783          	lw	a5,24(a5)
80004abc:	fef42623          	sw	a5,-20(s0)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80004ac0:	0001c797          	auipc	a5,0x1c
80004ac4:	35c78793          	addi	a5,a5,860 # 80020e1c <pxCurrentTCB>
80004ac8:	0007a783          	lw	a5,0(a5)
80004acc:	02c7a703          	lw	a4,44(a5)
80004ad0:	0001c797          	auipc	a5,0x1c
80004ad4:	34c78793          	addi	a5,a5,844 # 80020e1c <pxCurrentTCB>
80004ad8:	0007a783          	lw	a5,0(a5)
80004adc:	00500693          	li	a3,5
80004ae0:	40e68733          	sub	a4,a3,a4
80004ae4:	00e7ac23          	sw	a4,24(a5)

	return uxReturn;
80004ae8:	fec42783          	lw	a5,-20(s0)
}
80004aec:	00078513          	mv	a0,a5
80004af0:	01c12403          	lw	s0,28(sp)
80004af4:	02010113          	addi	sp,sp,32
80004af8:	00008067          	ret

80004afc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
80004afc:	ff010113          	addi	sp,sp,-16
80004b00:	00812623          	sw	s0,12(sp)
80004b04:	01010413          	addi	s0,sp,16
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
80004b08:	0001c797          	auipc	a5,0x1c
80004b0c:	31478793          	addi	a5,a5,788 # 80020e1c <pxCurrentTCB>
80004b10:	0007a783          	lw	a5,0(a5)
80004b14:	00078e63          	beqz	a5,80004b30 <pvTaskIncrementMutexHeldCount+0x34>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
80004b18:	0001c797          	auipc	a5,0x1c
80004b1c:	30478793          	addi	a5,a5,772 # 80020e1c <pxCurrentTCB>
80004b20:	0007a783          	lw	a5,0(a5)
80004b24:	0547a703          	lw	a4,84(a5)
80004b28:	00170713          	addi	a4,a4,1
80004b2c:	04e7aa23          	sw	a4,84(a5)
		}

		return pxCurrentTCB;
80004b30:	0001c797          	auipc	a5,0x1c
80004b34:	2ec78793          	addi	a5,a5,748 # 80020e1c <pxCurrentTCB>
80004b38:	0007a783          	lw	a5,0(a5)
	}
80004b3c:	00078513          	mv	a0,a5
80004b40:	00c12403          	lw	s0,12(sp)
80004b44:	01010113          	addi	sp,sp,16
80004b48:	00008067          	ret

80004b4c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
80004b4c:	fd010113          	addi	sp,sp,-48
80004b50:	02112623          	sw	ra,44(sp)
80004b54:	02812423          	sw	s0,40(sp)
80004b58:	03010413          	addi	s0,sp,48
80004b5c:	fca42e23          	sw	a0,-36(s0)
80004b60:	fcb42c23          	sw	a1,-40(s0)
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
80004b64:	e79ff0ef          	jal	ra,800049dc <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
80004b68:	0001c797          	auipc	a5,0x1c
80004b6c:	2b478793          	addi	a5,a5,692 # 80020e1c <pxCurrentTCB>
80004b70:	0007a783          	lw	a5,0(a5)
80004b74:	0587a783          	lw	a5,88(a5)
80004b78:	08079663          	bnez	a5,80004c04 <ulTaskNotifyTake+0xb8>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
80004b7c:	0001c797          	auipc	a5,0x1c
80004b80:	2a078793          	addi	a5,a5,672 # 80020e1c <pxCurrentTCB>
80004b84:	0007a783          	lw	a5,0(a5)
80004b88:	00100713          	li	a4,1
80004b8c:	04e7ae23          	sw	a4,92(a5)

				if( xTicksToWait > ( TickType_t ) 0 )
80004b90:	fd842783          	lw	a5,-40(s0)
80004b94:	06078863          	beqz	a5,80004c04 <ulTaskNotifyTake+0xb8>
				{
					/* The task is going to block.  First it must be removed
					from the ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80004b98:	0001c797          	auipc	a5,0x1c
80004b9c:	28478793          	addi	a5,a5,644 # 80020e1c <pxCurrentTCB>
80004ba0:	0007a783          	lw	a5,0(a5)
80004ba4:	00478793          	addi	a5,a5,4
80004ba8:	00078513          	mv	a0,a5
80004bac:	de9fb0ef          	jal	ra,80000994 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
80004bb0:	fd842703          	lw	a4,-40(s0)
80004bb4:	fff00793          	li	a5,-1
80004bb8:	02f71463          	bne	a4,a5,80004be0 <ulTaskNotifyTake+0x94>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80004bbc:	0001c797          	auipc	a5,0x1c
80004bc0:	26078793          	addi	a5,a5,608 # 80020e1c <pxCurrentTCB>
80004bc4:	0007a783          	lw	a5,0(a5)
80004bc8:	00478793          	addi	a5,a5,4
80004bcc:	00078593          	mv	a1,a5
80004bd0:	0001d517          	auipc	a0,0x1d
80004bd4:	d3050513          	addi	a0,a0,-720 # 80021900 <xSuspendedTaskList>
80004bd8:	c61fb0ef          	jal	ra,80000838 <vListInsertEnd>
80004bdc:	0240006f          	j	80004c00 <ulTaskNotifyTake+0xb4>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
80004be0:	0001d797          	auipc	a5,0x1d
80004be4:	d3878793          	addi	a5,a5,-712 # 80021918 <xTickCount>
80004be8:	0007a783          	lw	a5,0(a5)
80004bec:	fd842703          	lw	a4,-40(s0)
80004bf0:	00f707b3          	add	a5,a4,a5
80004bf4:	fef42623          	sw	a5,-20(s0)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
80004bf8:	fec42503          	lw	a0,-20(s0)
80004bfc:	ddcff0ef          	jal	ra,800041d8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
80004c00:	88dfb0ef          	jal	ra,8000048c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
80004c04:	e2dff0ef          	jal	ra,80004a30 <vTaskExitCritical>

		taskENTER_CRITICAL();
80004c08:	dd5ff0ef          	jal	ra,800049dc <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
80004c0c:	0001c797          	auipc	a5,0x1c
80004c10:	21078793          	addi	a5,a5,528 # 80020e1c <pxCurrentTCB>
80004c14:	0007a783          	lw	a5,0(a5)
80004c18:	0587a783          	lw	a5,88(a5)
80004c1c:	fef42423          	sw	a5,-24(s0)

			if( ulReturn != 0UL )
80004c20:	fe842783          	lw	a5,-24(s0)
80004c24:	02078c63          	beqz	a5,80004c5c <ulTaskNotifyTake+0x110>
			{
				if( xClearCountOnExit != pdFALSE )
80004c28:	fdc42783          	lw	a5,-36(s0)
80004c2c:	00078c63          	beqz	a5,80004c44 <ulTaskNotifyTake+0xf8>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
80004c30:	0001c797          	auipc	a5,0x1c
80004c34:	1ec78793          	addi	a5,a5,492 # 80020e1c <pxCurrentTCB>
80004c38:	0007a783          	lw	a5,0(a5)
80004c3c:	0407ac23          	sw	zero,88(a5)
80004c40:	01c0006f          	j	80004c5c <ulTaskNotifyTake+0x110>
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
80004c44:	0001c797          	auipc	a5,0x1c
80004c48:	1d878793          	addi	a5,a5,472 # 80020e1c <pxCurrentTCB>
80004c4c:	0007a783          	lw	a5,0(a5)
80004c50:	0587a703          	lw	a4,88(a5)
80004c54:	fff70713          	addi	a4,a4,-1
80004c58:	04e7ac23          	sw	a4,88(a5)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
80004c5c:	0001c797          	auipc	a5,0x1c
80004c60:	1c078793          	addi	a5,a5,448 # 80020e1c <pxCurrentTCB>
80004c64:	0007a783          	lw	a5,0(a5)
80004c68:	0407ae23          	sw	zero,92(a5)
		}
		taskEXIT_CRITICAL();
80004c6c:	dc5ff0ef          	jal	ra,80004a30 <vTaskExitCritical>

		return ulReturn;
80004c70:	fe842783          	lw	a5,-24(s0)
	}
80004c74:	00078513          	mv	a0,a5
80004c78:	02c12083          	lw	ra,44(sp)
80004c7c:	02812403          	lw	s0,40(sp)
80004c80:	03010113          	addi	sp,sp,48
80004c84:	00008067          	ret

80004c88 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
80004c88:	fd010113          	addi	sp,sp,-48
80004c8c:	02112623          	sw	ra,44(sp)
80004c90:	02812423          	sw	s0,40(sp)
80004c94:	03010413          	addi	s0,sp,48
80004c98:	fca42e23          	sw	a0,-36(s0)
80004c9c:	fcb42c23          	sw	a1,-40(s0)
80004ca0:	fcc42a23          	sw	a2,-44(s0)
80004ca4:	fcd42823          	sw	a3,-48(s0)
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
80004ca8:	d35ff0ef          	jal	ra,800049dc <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
80004cac:	0001c797          	auipc	a5,0x1c
80004cb0:	17078793          	addi	a5,a5,368 # 80020e1c <pxCurrentTCB>
80004cb4:	0007a783          	lw	a5,0(a5)
80004cb8:	05c7a703          	lw	a4,92(a5)
80004cbc:	00200793          	li	a5,2
80004cc0:	0af70663          	beq	a4,a5,80004d6c <xTaskNotifyWait+0xe4>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
80004cc4:	0001c797          	auipc	a5,0x1c
80004cc8:	15878793          	addi	a5,a5,344 # 80020e1c <pxCurrentTCB>
80004ccc:	0007a783          	lw	a5,0(a5)
80004cd0:	0587a683          	lw	a3,88(a5)
80004cd4:	fdc42703          	lw	a4,-36(s0)
80004cd8:	fff74713          	not	a4,a4
80004cdc:	00e6f733          	and	a4,a3,a4
80004ce0:	04e7ac23          	sw	a4,88(a5)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
80004ce4:	0001c797          	auipc	a5,0x1c
80004ce8:	13878793          	addi	a5,a5,312 # 80020e1c <pxCurrentTCB>
80004cec:	0007a783          	lw	a5,0(a5)
80004cf0:	00100713          	li	a4,1
80004cf4:	04e7ae23          	sw	a4,92(a5)

				if( xTicksToWait > ( TickType_t ) 0 )
80004cf8:	fd042783          	lw	a5,-48(s0)
80004cfc:	06078863          	beqz	a5,80004d6c <xTaskNotifyWait+0xe4>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80004d00:	0001c797          	auipc	a5,0x1c
80004d04:	11c78793          	addi	a5,a5,284 # 80020e1c <pxCurrentTCB>
80004d08:	0007a783          	lw	a5,0(a5)
80004d0c:	00478793          	addi	a5,a5,4
80004d10:	00078513          	mv	a0,a5
80004d14:	c81fb0ef          	jal	ra,80000994 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
80004d18:	fd042703          	lw	a4,-48(s0)
80004d1c:	fff00793          	li	a5,-1
80004d20:	02f71463          	bne	a4,a5,80004d48 <xTaskNotifyWait+0xc0>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80004d24:	0001c797          	auipc	a5,0x1c
80004d28:	0f878793          	addi	a5,a5,248 # 80020e1c <pxCurrentTCB>
80004d2c:	0007a783          	lw	a5,0(a5)
80004d30:	00478793          	addi	a5,a5,4
80004d34:	00078593          	mv	a1,a5
80004d38:	0001d517          	auipc	a0,0x1d
80004d3c:	bc850513          	addi	a0,a0,-1080 # 80021900 <xSuspendedTaskList>
80004d40:	af9fb0ef          	jal	ra,80000838 <vListInsertEnd>
80004d44:	0240006f          	j	80004d68 <xTaskNotifyWait+0xe0>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
80004d48:	0001d797          	auipc	a5,0x1d
80004d4c:	bd078793          	addi	a5,a5,-1072 # 80021918 <xTickCount>
80004d50:	0007a783          	lw	a5,0(a5)
80004d54:	fd042703          	lw	a4,-48(s0)
80004d58:	00f707b3          	add	a5,a4,a5
80004d5c:	fef42423          	sw	a5,-24(s0)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
80004d60:	fe842503          	lw	a0,-24(s0)
80004d64:	c74ff0ef          	jal	ra,800041d8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
80004d68:	f24fb0ef          	jal	ra,8000048c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
80004d6c:	cc5ff0ef          	jal	ra,80004a30 <vTaskExitCritical>

		taskENTER_CRITICAL();
80004d70:	c6dff0ef          	jal	ra,800049dc <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
80004d74:	fd442783          	lw	a5,-44(s0)
80004d78:	00078e63          	beqz	a5,80004d94 <xTaskNotifyWait+0x10c>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
80004d7c:	0001c797          	auipc	a5,0x1c
80004d80:	0a078793          	addi	a5,a5,160 # 80020e1c <pxCurrentTCB>
80004d84:	0007a783          	lw	a5,0(a5)
80004d88:	0587a703          	lw	a4,88(a5)
80004d8c:	fd442783          	lw	a5,-44(s0)
80004d90:	00e7a023          	sw	a4,0(a5)

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
80004d94:	0001c797          	auipc	a5,0x1c
80004d98:	08878793          	addi	a5,a5,136 # 80020e1c <pxCurrentTCB>
80004d9c:	0007a783          	lw	a5,0(a5)
80004da0:	05c7a703          	lw	a4,92(a5)
80004da4:	00100793          	li	a5,1
80004da8:	00f71663          	bne	a4,a5,80004db4 <xTaskNotifyWait+0x12c>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
80004dac:	fe042623          	sw	zero,-20(s0)
80004db0:	02c0006f          	j	80004ddc <xTaskNotifyWait+0x154>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
80004db4:	0001c797          	auipc	a5,0x1c
80004db8:	06878793          	addi	a5,a5,104 # 80020e1c <pxCurrentTCB>
80004dbc:	0007a783          	lw	a5,0(a5)
80004dc0:	0587a683          	lw	a3,88(a5)
80004dc4:	fd842703          	lw	a4,-40(s0)
80004dc8:	fff74713          	not	a4,a4
80004dcc:	00e6f733          	and	a4,a3,a4
80004dd0:	04e7ac23          	sw	a4,88(a5)
				xReturn = pdTRUE;
80004dd4:	00100793          	li	a5,1
80004dd8:	fef42623          	sw	a5,-20(s0)
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
80004ddc:	0001c797          	auipc	a5,0x1c
80004de0:	04078793          	addi	a5,a5,64 # 80020e1c <pxCurrentTCB>
80004de4:	0007a783          	lw	a5,0(a5)
80004de8:	0407ae23          	sw	zero,92(a5)
		}
		taskEXIT_CRITICAL();
80004dec:	c45ff0ef          	jal	ra,80004a30 <vTaskExitCritical>

		return xReturn;
80004df0:	fec42783          	lw	a5,-20(s0)
	}
80004df4:	00078513          	mv	a0,a5
80004df8:	02c12083          	lw	ra,44(sp)
80004dfc:	02812403          	lw	s0,40(sp)
80004e00:	03010113          	addi	sp,sp,48
80004e04:	00008067          	ret

80004e08 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
80004e08:	fd010113          	addi	sp,sp,-48
80004e0c:	02112623          	sw	ra,44(sp)
80004e10:	02812423          	sw	s0,40(sp)
80004e14:	03010413          	addi	s0,sp,48
80004e18:	fca42e23          	sw	a0,-36(s0)
80004e1c:	fcb42c23          	sw	a1,-40(s0)
80004e20:	fcc42a23          	sw	a2,-44(s0)
80004e24:	fcd42823          	sw	a3,-48(s0)
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
80004e28:	00100793          	li	a5,1
80004e2c:	fef42623          	sw	a5,-20(s0)

		configASSERT( xTaskToNotify );
80004e30:	fdc42783          	lw	a5,-36(s0)
80004e34:	00079663          	bnez	a5,80004e40 <xTaskGenericNotify+0x38>
80004e38:	30007073          	csrci	mstatus,0
80004e3c:	0000006f          	j	80004e3c <xTaskGenericNotify+0x34>
		pxTCB = ( TCB_t * ) xTaskToNotify;
80004e40:	fdc42783          	lw	a5,-36(s0)
80004e44:	fef42423          	sw	a5,-24(s0)

		taskENTER_CRITICAL();
80004e48:	b95ff0ef          	jal	ra,800049dc <vTaskEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
80004e4c:	fd042783          	lw	a5,-48(s0)
80004e50:	00078a63          	beqz	a5,80004e64 <xTaskGenericNotify+0x5c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
80004e54:	fe842783          	lw	a5,-24(s0)
80004e58:	0587a703          	lw	a4,88(a5)
80004e5c:	fd042783          	lw	a5,-48(s0)
80004e60:	00e7a023          	sw	a4,0(a5)
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
80004e64:	fe842783          	lw	a5,-24(s0)
80004e68:	05c7a783          	lw	a5,92(a5)
80004e6c:	fef42223          	sw	a5,-28(s0)

			pxTCB->eNotifyState = eNotified;
80004e70:	fe842783          	lw	a5,-24(s0)
80004e74:	00200713          	li	a4,2
80004e78:	04e7ae23          	sw	a4,92(a5)

			switch( eAction )
80004e7c:	fd442703          	lw	a4,-44(s0)
80004e80:	00400793          	li	a5,4
80004e84:	08e7ec63          	bltu	a5,a4,80004f1c <xTaskGenericNotify+0x114>
80004e88:	fd442783          	lw	a5,-44(s0)
80004e8c:	00279713          	slli	a4,a5,0x2
80004e90:	0001b797          	auipc	a5,0x1b
80004e94:	17878793          	addi	a5,a5,376 # 80020008 <__rodata_start+0x8>
80004e98:	00f707b3          	add	a5,a4,a5
80004e9c:	0007a703          	lw	a4,0(a5)
80004ea0:	0001b797          	auipc	a5,0x1b
80004ea4:	16878793          	addi	a5,a5,360 # 80020008 <__rodata_start+0x8>
80004ea8:	00f707b3          	add	a5,a4,a5
80004eac:	00078067          	jr	a5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
80004eb0:	fe842783          	lw	a5,-24(s0)
80004eb4:	0587a703          	lw	a4,88(a5)
80004eb8:	fd842783          	lw	a5,-40(s0)
80004ebc:	00f76733          	or	a4,a4,a5
80004ec0:	fe842783          	lw	a5,-24(s0)
80004ec4:	04e7ac23          	sw	a4,88(a5)
					break;
80004ec8:	0540006f          	j	80004f1c <xTaskGenericNotify+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
80004ecc:	fe842783          	lw	a5,-24(s0)
80004ed0:	0587a783          	lw	a5,88(a5)
80004ed4:	00178713          	addi	a4,a5,1
80004ed8:	fe842783          	lw	a5,-24(s0)
80004edc:	04e7ac23          	sw	a4,88(a5)
					break;
80004ee0:	03c0006f          	j	80004f1c <xTaskGenericNotify+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
80004ee4:	fe842783          	lw	a5,-24(s0)
80004ee8:	fd842703          	lw	a4,-40(s0)
80004eec:	04e7ac23          	sw	a4,88(a5)
					break;
80004ef0:	02c0006f          	j	80004f1c <xTaskGenericNotify+0x114>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
80004ef4:	fe442703          	lw	a4,-28(s0)
80004ef8:	00200793          	li	a5,2
80004efc:	00f70a63          	beq	a4,a5,80004f10 <xTaskGenericNotify+0x108>
					{
						pxTCB->ulNotifiedValue = ulValue;
80004f00:	fe842783          	lw	a5,-24(s0)
80004f04:	fd842703          	lw	a4,-40(s0)
80004f08:	04e7ac23          	sw	a4,88(a5)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
80004f0c:	0100006f          	j	80004f1c <xTaskGenericNotify+0x114>
						xReturn = pdFAIL;
80004f10:	fe042623          	sw	zero,-20(s0)
					break;
80004f14:	0080006f          	j	80004f1c <xTaskGenericNotify+0x114>

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
80004f18:	00000013          	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
80004f1c:	fe442703          	lw	a4,-28(s0)
80004f20:	00100793          	li	a5,1
80004f24:	0af71663          	bne	a4,a5,80004fd0 <xTaskGenericNotify+0x1c8>
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80004f28:	fe842783          	lw	a5,-24(s0)
80004f2c:	00478793          	addi	a5,a5,4
80004f30:	00078513          	mv	a0,a5
80004f34:	a61fb0ef          	jal	ra,80000994 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
80004f38:	fe842783          	lw	a5,-24(s0)
80004f3c:	02c7a703          	lw	a4,44(a5)
80004f40:	0001d797          	auipc	a5,0x1d
80004f44:	9dc78793          	addi	a5,a5,-1572 # 8002191c <uxTopReadyPriority>
80004f48:	0007a783          	lw	a5,0(a5)
80004f4c:	00e7fc63          	bleu	a4,a5,80004f64 <xTaskGenericNotify+0x15c>
80004f50:	fe842783          	lw	a5,-24(s0)
80004f54:	02c7a703          	lw	a4,44(a5)
80004f58:	0001d797          	auipc	a5,0x1d
80004f5c:	9c478793          	addi	a5,a5,-1596 # 8002191c <uxTopReadyPriority>
80004f60:	00e7a023          	sw	a4,0(a5)
80004f64:	fe842783          	lw	a5,-24(s0)
80004f68:	02c7a703          	lw	a4,44(a5)
80004f6c:	00070793          	mv	a5,a4
80004f70:	00279793          	slli	a5,a5,0x2
80004f74:	00e787b3          	add	a5,a5,a4
80004f78:	00279793          	slli	a5,a5,0x2
80004f7c:	0001d717          	auipc	a4,0x1d
80004f80:	8c470713          	addi	a4,a4,-1852 # 80021840 <__bss_start>
80004f84:	00e78733          	add	a4,a5,a4
80004f88:	fe842783          	lw	a5,-24(s0)
80004f8c:	00478793          	addi	a5,a5,4
80004f90:	00078593          	mv	a1,a5
80004f94:	00070513          	mv	a0,a4
80004f98:	8a1fb0ef          	jal	ra,80000838 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
80004f9c:	fe842783          	lw	a5,-24(s0)
80004fa0:	0287a783          	lw	a5,40(a5)
80004fa4:	00078663          	beqz	a5,80004fb0 <xTaskGenericNotify+0x1a8>
80004fa8:	30007073          	csrci	mstatus,0
80004fac:	0000006f          	j	80004fac <xTaskGenericNotify+0x1a4>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
80004fb0:	fe842783          	lw	a5,-24(s0)
80004fb4:	02c7a703          	lw	a4,44(a5)
80004fb8:	0001c797          	auipc	a5,0x1c
80004fbc:	e6478793          	addi	a5,a5,-412 # 80020e1c <pxCurrentTCB>
80004fc0:	0007a783          	lw	a5,0(a5)
80004fc4:	02c7a783          	lw	a5,44(a5)
80004fc8:	00e7f463          	bleu	a4,a5,80004fd0 <xTaskGenericNotify+0x1c8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
80004fcc:	cc0fb0ef          	jal	ra,8000048c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
80004fd0:	a61ff0ef          	jal	ra,80004a30 <vTaskExitCritical>

		return xReturn;
80004fd4:	fec42783          	lw	a5,-20(s0)
	}
80004fd8:	00078513          	mv	a0,a5
80004fdc:	02c12083          	lw	ra,44(sp)
80004fe0:	02812403          	lw	s0,40(sp)
80004fe4:	03010113          	addi	sp,sp,48
80004fe8:	00008067          	ret

80004fec <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
80004fec:	fc010113          	addi	sp,sp,-64
80004ff0:	02112e23          	sw	ra,60(sp)
80004ff4:	02812c23          	sw	s0,56(sp)
80004ff8:	04010413          	addi	s0,sp,64
80004ffc:	fca42e23          	sw	a0,-36(s0)
80005000:	fcb42c23          	sw	a1,-40(s0)
80005004:	fcc42a23          	sw	a2,-44(s0)
80005008:	fcd42823          	sw	a3,-48(s0)
8000500c:	fce42623          	sw	a4,-52(s0)
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
80005010:	00100793          	li	a5,1
80005014:	fef42623          	sw	a5,-20(s0)
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
80005018:	fdc42783          	lw	a5,-36(s0)
8000501c:	00079663          	bnez	a5,80005028 <xTaskGenericNotifyFromISR+0x3c>
80005020:	30007073          	csrci	mstatus,0
80005024:	0000006f          	j	80005024 <xTaskGenericNotifyFromISR+0x38>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
80005028:	fdc42783          	lw	a5,-36(s0)
8000502c:	fef42423          	sw	a5,-24(s0)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80005030:	e84fb0ef          	jal	ra,800006b4 <vPortSetInterruptMask>
80005034:	00050793          	mv	a5,a0
80005038:	fef42223          	sw	a5,-28(s0)
		{
			if( pulPreviousNotificationValue != NULL )
8000503c:	fd042783          	lw	a5,-48(s0)
80005040:	00078a63          	beqz	a5,80005054 <xTaskGenericNotifyFromISR+0x68>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
80005044:	fe842783          	lw	a5,-24(s0)
80005048:	0587a703          	lw	a4,88(a5)
8000504c:	fd042783          	lw	a5,-48(s0)
80005050:	00e7a023          	sw	a4,0(a5)
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
80005054:	fe842783          	lw	a5,-24(s0)
80005058:	05c7a783          	lw	a5,92(a5)
8000505c:	fef42023          	sw	a5,-32(s0)
			pxTCB->eNotifyState = eNotified;
80005060:	fe842783          	lw	a5,-24(s0)
80005064:	00200713          	li	a4,2
80005068:	04e7ae23          	sw	a4,92(a5)

			switch( eAction )
8000506c:	fd442703          	lw	a4,-44(s0)
80005070:	00400793          	li	a5,4
80005074:	08e7ec63          	bltu	a5,a4,8000510c <xTaskGenericNotifyFromISR+0x120>
80005078:	fd442783          	lw	a5,-44(s0)
8000507c:	00279713          	slli	a4,a5,0x2
80005080:	0001b797          	auipc	a5,0x1b
80005084:	f9c78793          	addi	a5,a5,-100 # 8002001c <__rodata_start+0x1c>
80005088:	00f707b3          	add	a5,a4,a5
8000508c:	0007a703          	lw	a4,0(a5)
80005090:	0001b797          	auipc	a5,0x1b
80005094:	f8c78793          	addi	a5,a5,-116 # 8002001c <__rodata_start+0x1c>
80005098:	00f707b3          	add	a5,a4,a5
8000509c:	00078067          	jr	a5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
800050a0:	fe842783          	lw	a5,-24(s0)
800050a4:	0587a703          	lw	a4,88(a5)
800050a8:	fd842783          	lw	a5,-40(s0)
800050ac:	00f76733          	or	a4,a4,a5
800050b0:	fe842783          	lw	a5,-24(s0)
800050b4:	04e7ac23          	sw	a4,88(a5)
					break;
800050b8:	0540006f          	j	8000510c <xTaskGenericNotifyFromISR+0x120>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
800050bc:	fe842783          	lw	a5,-24(s0)
800050c0:	0587a783          	lw	a5,88(a5)
800050c4:	00178713          	addi	a4,a5,1
800050c8:	fe842783          	lw	a5,-24(s0)
800050cc:	04e7ac23          	sw	a4,88(a5)
					break;
800050d0:	03c0006f          	j	8000510c <xTaskGenericNotifyFromISR+0x120>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
800050d4:	fe842783          	lw	a5,-24(s0)
800050d8:	fd842703          	lw	a4,-40(s0)
800050dc:	04e7ac23          	sw	a4,88(a5)
					break;
800050e0:	02c0006f          	j	8000510c <xTaskGenericNotifyFromISR+0x120>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
800050e4:	fe042703          	lw	a4,-32(s0)
800050e8:	00200793          	li	a5,2
800050ec:	00f70a63          	beq	a4,a5,80005100 <xTaskGenericNotifyFromISR+0x114>
					{
						pxTCB->ulNotifiedValue = ulValue;
800050f0:	fe842783          	lw	a5,-24(s0)
800050f4:	fd842703          	lw	a4,-40(s0)
800050f8:	04e7ac23          	sw	a4,88(a5)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
800050fc:	0100006f          	j	8000510c <xTaskGenericNotifyFromISR+0x120>
						xReturn = pdFAIL;
80005100:	fe042623          	sw	zero,-20(s0)
					break;
80005104:	0080006f          	j	8000510c <xTaskGenericNotifyFromISR+0x120>

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
80005108:	00000013          	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
8000510c:	fe042703          	lw	a4,-32(s0)
80005110:	00100793          	li	a5,1
80005114:	0ef71463          	bne	a4,a5,800051fc <xTaskGenericNotifyFromISR+0x210>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
80005118:	fe842783          	lw	a5,-24(s0)
8000511c:	0287a783          	lw	a5,40(a5)
80005120:	00078663          	beqz	a5,8000512c <xTaskGenericNotifyFromISR+0x140>
80005124:	30007073          	csrci	mstatus,0
80005128:	0000006f          	j	80005128 <xTaskGenericNotifyFromISR+0x13c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
8000512c:	0001d797          	auipc	a5,0x1d
80005130:	80c78793          	addi	a5,a5,-2036 # 80021938 <uxSchedulerSuspended>
80005134:	0007a783          	lw	a5,0(a5)
80005138:	06079e63          	bnez	a5,800051b4 <xTaskGenericNotifyFromISR+0x1c8>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
8000513c:	fe842783          	lw	a5,-24(s0)
80005140:	00478793          	addi	a5,a5,4
80005144:	00078513          	mv	a0,a5
80005148:	84dfb0ef          	jal	ra,80000994 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
8000514c:	fe842783          	lw	a5,-24(s0)
80005150:	02c7a703          	lw	a4,44(a5)
80005154:	0001c797          	auipc	a5,0x1c
80005158:	7c878793          	addi	a5,a5,1992 # 8002191c <uxTopReadyPriority>
8000515c:	0007a783          	lw	a5,0(a5)
80005160:	00e7fc63          	bleu	a4,a5,80005178 <xTaskGenericNotifyFromISR+0x18c>
80005164:	fe842783          	lw	a5,-24(s0)
80005168:	02c7a703          	lw	a4,44(a5)
8000516c:	0001c797          	auipc	a5,0x1c
80005170:	7b078793          	addi	a5,a5,1968 # 8002191c <uxTopReadyPriority>
80005174:	00e7a023          	sw	a4,0(a5)
80005178:	fe842783          	lw	a5,-24(s0)
8000517c:	02c7a703          	lw	a4,44(a5)
80005180:	00070793          	mv	a5,a4
80005184:	00279793          	slli	a5,a5,0x2
80005188:	00e787b3          	add	a5,a5,a4
8000518c:	00279793          	slli	a5,a5,0x2
80005190:	0001c717          	auipc	a4,0x1c
80005194:	6b070713          	addi	a4,a4,1712 # 80021840 <__bss_start>
80005198:	00e78733          	add	a4,a5,a4
8000519c:	fe842783          	lw	a5,-24(s0)
800051a0:	00478793          	addi	a5,a5,4
800051a4:	00078593          	mv	a1,a5
800051a8:	00070513          	mv	a0,a4
800051ac:	e8cfb0ef          	jal	ra,80000838 <vListInsertEnd>
800051b0:	01c0006f          	j	800051cc <xTaskGenericNotifyFromISR+0x1e0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
800051b4:	fe842783          	lw	a5,-24(s0)
800051b8:	01878793          	addi	a5,a5,24
800051bc:	00078593          	mv	a1,a5
800051c0:	0001c517          	auipc	a0,0x1c
800051c4:	71450513          	addi	a0,a0,1812 # 800218d4 <xPendingReadyList>
800051c8:	e70fb0ef          	jal	ra,80000838 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
800051cc:	fe842783          	lw	a5,-24(s0)
800051d0:	02c7a703          	lw	a4,44(a5)
800051d4:	0001c797          	auipc	a5,0x1c
800051d8:	c4878793          	addi	a5,a5,-952 # 80020e1c <pxCurrentTCB>
800051dc:	0007a783          	lw	a5,0(a5)
800051e0:	02c7a783          	lw	a5,44(a5)
800051e4:	00e7fc63          	bleu	a4,a5,800051fc <xTaskGenericNotifyFromISR+0x210>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
800051e8:	fcc42783          	lw	a5,-52(s0)
800051ec:	00078863          	beqz	a5,800051fc <xTaskGenericNotifyFromISR+0x210>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
800051f0:	fcc42783          	lw	a5,-52(s0)
800051f4:	00100713          	li	a4,1
800051f8:	00e7a023          	sw	a4,0(a5)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
800051fc:	fe442783          	lw	a5,-28(s0)
80005200:	00078513          	mv	a0,a5
80005204:	c88fb0ef          	jal	ra,8000068c <vPortClearInterruptMask>

		return xReturn;
80005208:	fec42783          	lw	a5,-20(s0)
	}
8000520c:	00078513          	mv	a0,a5
80005210:	03c12083          	lw	ra,60(sp)
80005214:	03812403          	lw	s0,56(sp)
80005218:	04010113          	addi	sp,sp,64
8000521c:	00008067          	ret

80005220 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
80005220:	fd010113          	addi	sp,sp,-48
80005224:	02112623          	sw	ra,44(sp)
80005228:	02812423          	sw	s0,40(sp)
8000522c:	03010413          	addi	s0,sp,48
80005230:	fca42e23          	sw	a0,-36(s0)
80005234:	fcb42c23          	sw	a1,-40(s0)
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
80005238:	fdc42783          	lw	a5,-36(s0)
8000523c:	00079663          	bnez	a5,80005248 <vTaskNotifyGiveFromISR+0x28>
80005240:	30007073          	csrci	mstatus,0
80005244:	0000006f          	j	80005244 <vTaskNotifyGiveFromISR+0x24>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
80005248:	fdc42783          	lw	a5,-36(s0)
8000524c:	fef42623          	sw	a5,-20(s0)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80005250:	c64fb0ef          	jal	ra,800006b4 <vPortSetInterruptMask>
80005254:	00050793          	mv	a5,a0
80005258:	fef42423          	sw	a5,-24(s0)
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
8000525c:	fec42783          	lw	a5,-20(s0)
80005260:	05c7a783          	lw	a5,92(a5)
80005264:	fef42223          	sw	a5,-28(s0)
			pxTCB->eNotifyState = eNotified;
80005268:	fec42783          	lw	a5,-20(s0)
8000526c:	00200713          	li	a4,2
80005270:	04e7ae23          	sw	a4,92(a5)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
80005274:	fec42783          	lw	a5,-20(s0)
80005278:	0587a783          	lw	a5,88(a5)
8000527c:	00178713          	addi	a4,a5,1
80005280:	fec42783          	lw	a5,-20(s0)
80005284:	04e7ac23          	sw	a4,88(a5)

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
80005288:	fe442703          	lw	a4,-28(s0)
8000528c:	00100793          	li	a5,1
80005290:	0ef71463          	bne	a4,a5,80005378 <vTaskNotifyGiveFromISR+0x158>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
80005294:	fec42783          	lw	a5,-20(s0)
80005298:	0287a783          	lw	a5,40(a5)
8000529c:	00078663          	beqz	a5,800052a8 <vTaskNotifyGiveFromISR+0x88>
800052a0:	30007073          	csrci	mstatus,0
800052a4:	0000006f          	j	800052a4 <vTaskNotifyGiveFromISR+0x84>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
800052a8:	0001c797          	auipc	a5,0x1c
800052ac:	69078793          	addi	a5,a5,1680 # 80021938 <uxSchedulerSuspended>
800052b0:	0007a783          	lw	a5,0(a5)
800052b4:	06079e63          	bnez	a5,80005330 <vTaskNotifyGiveFromISR+0x110>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
800052b8:	fec42783          	lw	a5,-20(s0)
800052bc:	00478793          	addi	a5,a5,4
800052c0:	00078513          	mv	a0,a5
800052c4:	ed0fb0ef          	jal	ra,80000994 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
800052c8:	fec42783          	lw	a5,-20(s0)
800052cc:	02c7a703          	lw	a4,44(a5)
800052d0:	0001c797          	auipc	a5,0x1c
800052d4:	64c78793          	addi	a5,a5,1612 # 8002191c <uxTopReadyPriority>
800052d8:	0007a783          	lw	a5,0(a5)
800052dc:	00e7fc63          	bleu	a4,a5,800052f4 <vTaskNotifyGiveFromISR+0xd4>
800052e0:	fec42783          	lw	a5,-20(s0)
800052e4:	02c7a703          	lw	a4,44(a5)
800052e8:	0001c797          	auipc	a5,0x1c
800052ec:	63478793          	addi	a5,a5,1588 # 8002191c <uxTopReadyPriority>
800052f0:	00e7a023          	sw	a4,0(a5)
800052f4:	fec42783          	lw	a5,-20(s0)
800052f8:	02c7a703          	lw	a4,44(a5)
800052fc:	00070793          	mv	a5,a4
80005300:	00279793          	slli	a5,a5,0x2
80005304:	00e787b3          	add	a5,a5,a4
80005308:	00279793          	slli	a5,a5,0x2
8000530c:	0001c717          	auipc	a4,0x1c
80005310:	53470713          	addi	a4,a4,1332 # 80021840 <__bss_start>
80005314:	00e78733          	add	a4,a5,a4
80005318:	fec42783          	lw	a5,-20(s0)
8000531c:	00478793          	addi	a5,a5,4
80005320:	00078593          	mv	a1,a5
80005324:	00070513          	mv	a0,a4
80005328:	d10fb0ef          	jal	ra,80000838 <vListInsertEnd>
8000532c:	01c0006f          	j	80005348 <vTaskNotifyGiveFromISR+0x128>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
80005330:	fec42783          	lw	a5,-20(s0)
80005334:	01878793          	addi	a5,a5,24
80005338:	00078593          	mv	a1,a5
8000533c:	0001c517          	auipc	a0,0x1c
80005340:	59850513          	addi	a0,a0,1432 # 800218d4 <xPendingReadyList>
80005344:	cf4fb0ef          	jal	ra,80000838 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
80005348:	fec42783          	lw	a5,-20(s0)
8000534c:	02c7a703          	lw	a4,44(a5)
80005350:	0001c797          	auipc	a5,0x1c
80005354:	acc78793          	addi	a5,a5,-1332 # 80020e1c <pxCurrentTCB>
80005358:	0007a783          	lw	a5,0(a5)
8000535c:	02c7a783          	lw	a5,44(a5)
80005360:	00e7fc63          	bleu	a4,a5,80005378 <vTaskNotifyGiveFromISR+0x158>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
80005364:	fd842783          	lw	a5,-40(s0)
80005368:	00078863          	beqz	a5,80005378 <vTaskNotifyGiveFromISR+0x158>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
8000536c:	fd842783          	lw	a5,-40(s0)
80005370:	00100713          	li	a4,1
80005374:	00e7a023          	sw	a4,0(a5)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
80005378:	fe842783          	lw	a5,-24(s0)
8000537c:	00078513          	mv	a0,a5
80005380:	b0cfb0ef          	jal	ra,8000068c <vPortClearInterruptMask>
	}
80005384:	00000013          	nop
80005388:	02c12083          	lw	ra,44(sp)
8000538c:	02812403          	lw	s0,40(sp)
80005390:	03010113          	addi	sp,sp,48
80005394:	00008067          	ret

80005398 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
80005398:	fd010113          	addi	sp,sp,-48
8000539c:	02112623          	sw	ra,44(sp)
800053a0:	02812423          	sw	s0,40(sp)
800053a4:	03010413          	addi	s0,sp,48
800053a8:	fca42e23          	sw	a0,-36(s0)
	TCB_t *pxTCB;
	BaseType_t xReturn;

		pxTCB = ( TCB_t * ) xTask;
800053ac:	fdc42783          	lw	a5,-36(s0)
800053b0:	fef42423          	sw	a5,-24(s0)

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( pxTCB );
800053b4:	fe842783          	lw	a5,-24(s0)
800053b8:	00079a63          	bnez	a5,800053cc <xTaskNotifyStateClear+0x34>
800053bc:	0001c797          	auipc	a5,0x1c
800053c0:	a6078793          	addi	a5,a5,-1440 # 80020e1c <pxCurrentTCB>
800053c4:	0007a783          	lw	a5,0(a5)
800053c8:	0080006f          	j	800053d0 <xTaskNotifyStateClear+0x38>
800053cc:	fe842783          	lw	a5,-24(s0)
800053d0:	fef42423          	sw	a5,-24(s0)

		taskENTER_CRITICAL();
800053d4:	e08ff0ef          	jal	ra,800049dc <vTaskEnterCritical>
		{
			if( pxTCB->eNotifyState == eNotified )
800053d8:	fe842783          	lw	a5,-24(s0)
800053dc:	05c7a703          	lw	a4,92(a5)
800053e0:	00200793          	li	a5,2
800053e4:	00f71c63          	bne	a4,a5,800053fc <xTaskNotifyStateClear+0x64>
			{
				pxTCB->eNotifyState = eNotWaitingNotification;
800053e8:	fe842783          	lw	a5,-24(s0)
800053ec:	0407ae23          	sw	zero,92(a5)
				xReturn = pdPASS;
800053f0:	00100793          	li	a5,1
800053f4:	fef42623          	sw	a5,-20(s0)
800053f8:	0080006f          	j	80005400 <xTaskNotifyStateClear+0x68>
			}
			else
			{
				xReturn = pdFAIL;
800053fc:	fe042623          	sw	zero,-20(s0)
			}
		}
		taskEXIT_CRITICAL();
80005400:	e30ff0ef          	jal	ra,80004a30 <vTaskExitCritical>

		return xReturn;
80005404:	fec42783          	lw	a5,-20(s0)
	}
80005408:	00078513          	mv	a0,a5
8000540c:	02c12083          	lw	ra,44(sp)
80005410:	02812403          	lw	s0,40(sp)
80005414:	03010113          	addi	sp,sp,48
80005418:	00008067          	ret

8000541c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
8000541c:	fe010113          	addi	sp,sp,-32
80005420:	00112e23          	sw	ra,28(sp)
80005424:	00812c23          	sw	s0,24(sp)
80005428:	02010413          	addi	s0,sp,32
BaseType_t xReturn = pdFAIL;
8000542c:	fe042623          	sw	zero,-20(s0)

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
80005430:	139000ef          	jal	ra,80005d68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
80005434:	0001c797          	auipc	a5,0x1c
80005438:	53878793          	addi	a5,a5,1336 # 8002196c <xTimerQueue>
8000543c:	0007a783          	lw	a5,0(a5)
80005440:	02078a63          	beqz	a5,80005474 <xTimerCreateTimerTask+0x58>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
80005444:	00000893          	li	a7,0
80005448:	00000813          	li	a6,0
8000544c:	00000793          	li	a5,0
80005450:	00200713          	li	a4,2
80005454:	00000693          	li	a3,0
80005458:	40000613          	li	a2,1024
8000545c:	0001b597          	auipc	a1,0x1b
80005460:	bd458593          	addi	a1,a1,-1068 # 80020030 <__rodata_start+0x30>
80005464:	00000517          	auipc	a0,0x0
80005468:	31c50513          	addi	a0,a0,796 # 80005780 <prvTimerTask>
8000546c:	c1dfc0ef          	jal	ra,80002088 <xTaskGenericCreate>
80005470:	fea42623          	sw	a0,-20(s0)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
80005474:	fec42783          	lw	a5,-20(s0)
80005478:	00079663          	bnez	a5,80005484 <xTimerCreateTimerTask+0x68>
8000547c:	30007073          	csrci	mstatus,0
80005480:	0000006f          	j	80005480 <xTimerCreateTimerTask+0x64>
	return xReturn;
80005484:	fec42783          	lw	a5,-20(s0)
}
80005488:	00078513          	mv	a0,a5
8000548c:	01c12083          	lw	ra,28(sp)
80005490:	01812403          	lw	s0,24(sp)
80005494:	02010113          	addi	sp,sp,32
80005498:	00008067          	ret

8000549c <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
8000549c:	fc010113          	addi	sp,sp,-64
800054a0:	02112e23          	sw	ra,60(sp)
800054a4:	02812c23          	sw	s0,56(sp)
800054a8:	04010413          	addi	s0,sp,64
800054ac:	fca42e23          	sw	a0,-36(s0)
800054b0:	fcb42c23          	sw	a1,-40(s0)
800054b4:	fcc42a23          	sw	a2,-44(s0)
800054b8:	fcd42823          	sw	a3,-48(s0)
800054bc:	fce42623          	sw	a4,-52(s0)
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
800054c0:	fd842783          	lw	a5,-40(s0)
800054c4:	00079663          	bnez	a5,800054d0 <xTimerCreate+0x34>
	{
		pxNewTimer = NULL;
800054c8:	fe042623          	sw	zero,-20(s0)
800054cc:	0680006f          	j	80005534 <xTimerCreate+0x98>
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
800054d0:	02c00513          	li	a0,44
800054d4:	31c010ef          	jal	ra,800067f0 <pvPortMalloc>
800054d8:	fea42623          	sw	a0,-20(s0)
		if( pxNewTimer != NULL )
800054dc:	fec42783          	lw	a5,-20(s0)
800054e0:	04078a63          	beqz	a5,80005534 <xTimerCreate+0x98>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
800054e4:	085000ef          	jal	ra,80005d68 <prvCheckForValidListAndQueue>

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
800054e8:	fec42783          	lw	a5,-20(s0)
800054ec:	fdc42703          	lw	a4,-36(s0)
800054f0:	00e7a023          	sw	a4,0(a5)
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
800054f4:	fec42783          	lw	a5,-20(s0)
800054f8:	fd842703          	lw	a4,-40(s0)
800054fc:	00e7ac23          	sw	a4,24(a5)
			pxNewTimer->uxAutoReload = uxAutoReload;
80005500:	fec42783          	lw	a5,-20(s0)
80005504:	fd442703          	lw	a4,-44(s0)
80005508:	00e7ae23          	sw	a4,28(a5)
			pxNewTimer->pvTimerID = pvTimerID;
8000550c:	fec42783          	lw	a5,-20(s0)
80005510:	fd042703          	lw	a4,-48(s0)
80005514:	02e7a023          	sw	a4,32(a5)
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
80005518:	fec42783          	lw	a5,-20(s0)
8000551c:	fcc42703          	lw	a4,-52(s0)
80005520:	02e7a223          	sw	a4,36(a5)
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
80005524:	fec42783          	lw	a5,-20(s0)
80005528:	00478793          	addi	a5,a5,4
8000552c:	00078513          	mv	a0,a5
80005530:	ae0fb0ef          	jal	ra,80000810 <vListInitialiseItem>
			traceTIMER_CREATE_FAILED();
		}
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
80005534:	fd842783          	lw	a5,-40(s0)
80005538:	00079663          	bnez	a5,80005544 <xTimerCreate+0xa8>
8000553c:	30007073          	csrci	mstatus,0
80005540:	0000006f          	j	80005540 <xTimerCreate+0xa4>

	return ( TimerHandle_t ) pxNewTimer;
80005544:	fec42783          	lw	a5,-20(s0)
}
80005548:	00078513          	mv	a0,a5
8000554c:	03c12083          	lw	ra,60(sp)
80005550:	03812403          	lw	s0,56(sp)
80005554:	04010113          	addi	sp,sp,64
80005558:	00008067          	ret

8000555c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
8000555c:	fc010113          	addi	sp,sp,-64
80005560:	02112e23          	sw	ra,60(sp)
80005564:	02812c23          	sw	s0,56(sp)
80005568:	04010413          	addi	s0,sp,64
8000556c:	fca42e23          	sw	a0,-36(s0)
80005570:	fcb42c23          	sw	a1,-40(s0)
80005574:	fcc42a23          	sw	a2,-44(s0)
80005578:	fcd42823          	sw	a3,-48(s0)
8000557c:	fce42623          	sw	a4,-52(s0)
BaseType_t xReturn = pdFAIL;
80005580:	fe042623          	sw	zero,-20(s0)
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
80005584:	fdc42783          	lw	a5,-36(s0)
80005588:	00079663          	bnez	a5,80005594 <xTimerGenericCommand+0x38>
8000558c:	30007073          	csrci	mstatus,0
80005590:	0000006f          	j	80005590 <xTimerGenericCommand+0x34>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
80005594:	0001c797          	auipc	a5,0x1c
80005598:	3d878793          	addi	a5,a5,984 # 8002196c <xTimerQueue>
8000559c:	0007a783          	lw	a5,0(a5)
800055a0:	0a078c63          	beqz	a5,80005658 <xTimerGenericCommand+0xfc>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
800055a4:	fd842783          	lw	a5,-40(s0)
800055a8:	fef42023          	sw	a5,-32(s0)
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
800055ac:	fd442783          	lw	a5,-44(s0)
800055b0:	fef42223          	sw	a5,-28(s0)
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
800055b4:	fdc42783          	lw	a5,-36(s0)
800055b8:	fef42423          	sw	a5,-24(s0)

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
800055bc:	fd842703          	lw	a4,-40(s0)
800055c0:	00500793          	li	a5,5
800055c4:	06e7c663          	blt	a5,a4,80005630 <xTimerGenericCommand+0xd4>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
800055c8:	908ff0ef          	jal	ra,800046d0 <xTaskGetSchedulerState>
800055cc:	00050713          	mv	a4,a0
800055d0:	00200793          	li	a5,2
800055d4:	02f71863          	bne	a4,a5,80005604 <xTimerGenericCommand+0xa8>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
800055d8:	0001c797          	auipc	a5,0x1c
800055dc:	39478793          	addi	a5,a5,916 # 8002196c <xTimerQueue>
800055e0:	0007a783          	lw	a5,0(a5)
800055e4:	fe040713          	addi	a4,s0,-32
800055e8:	00000693          	li	a3,0
800055ec:	fcc42603          	lw	a2,-52(s0)
800055f0:	00070593          	mv	a1,a4
800055f4:	00078513          	mv	a0,a5
800055f8:	921fb0ef          	jal	ra,80000f18 <xQueueGenericSend>
800055fc:	fea42623          	sw	a0,-20(s0)
80005600:	0580006f          	j	80005658 <xTimerGenericCommand+0xfc>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
80005604:	0001c797          	auipc	a5,0x1c
80005608:	36878793          	addi	a5,a5,872 # 8002196c <xTimerQueue>
8000560c:	0007a783          	lw	a5,0(a5)
80005610:	fe040713          	addi	a4,s0,-32
80005614:	00000693          	li	a3,0
80005618:	00000613          	li	a2,0
8000561c:	00070593          	mv	a1,a4
80005620:	00078513          	mv	a0,a5
80005624:	8f5fb0ef          	jal	ra,80000f18 <xQueueGenericSend>
80005628:	fea42623          	sw	a0,-20(s0)
8000562c:	02c0006f          	j	80005658 <xTimerGenericCommand+0xfc>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
80005630:	0001c797          	auipc	a5,0x1c
80005634:	33c78793          	addi	a5,a5,828 # 8002196c <xTimerQueue>
80005638:	0007a783          	lw	a5,0(a5)
8000563c:	fe040713          	addi	a4,s0,-32
80005640:	00000693          	li	a3,0
80005644:	fd042603          	lw	a2,-48(s0)
80005648:	00070593          	mv	a1,a4
8000564c:	00078513          	mv	a0,a5
80005650:	b15fb0ef          	jal	ra,80001164 <xQueueGenericSendFromISR>
80005654:	fea42623          	sw	a0,-20(s0)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
80005658:	fec42783          	lw	a5,-20(s0)
}
8000565c:	00078513          	mv	a0,a5
80005660:	03c12083          	lw	ra,60(sp)
80005664:	03812403          	lw	s0,56(sp)
80005668:	04010113          	addi	sp,sp,64
8000566c:	00008067          	ret

80005670 <pcTimerGetTimerName>:

#endif
/*-----------------------------------------------------------*/

const char * pcTimerGetTimerName( TimerHandle_t xTimer )
{
80005670:	fd010113          	addi	sp,sp,-48
80005674:	02812623          	sw	s0,44(sp)
80005678:	03010413          	addi	s0,sp,48
8000567c:	fca42e23          	sw	a0,-36(s0)
Timer_t *pxTimer = ( Timer_t * ) xTimer;
80005680:	fdc42783          	lw	a5,-36(s0)
80005684:	fef42623          	sw	a5,-20(s0)

	configASSERT( xTimer );
80005688:	fdc42783          	lw	a5,-36(s0)
8000568c:	00079663          	bnez	a5,80005698 <pcTimerGetTimerName+0x28>
80005690:	30007073          	csrci	mstatus,0
80005694:	0000006f          	j	80005694 <pcTimerGetTimerName+0x24>
	return pxTimer->pcTimerName;
80005698:	fec42783          	lw	a5,-20(s0)
8000569c:	0007a783          	lw	a5,0(a5)
}
800056a0:	00078513          	mv	a0,a5
800056a4:	02c12403          	lw	s0,44(sp)
800056a8:	03010113          	addi	sp,sp,48
800056ac:	00008067          	ret

800056b0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
800056b0:	fd010113          	addi	sp,sp,-48
800056b4:	02112623          	sw	ra,44(sp)
800056b8:	02812423          	sw	s0,40(sp)
800056bc:	03010413          	addi	s0,sp,48
800056c0:	fca42e23          	sw	a0,-36(s0)
800056c4:	fcb42c23          	sw	a1,-40(s0)
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
800056c8:	0001c797          	auipc	a5,0x1c
800056cc:	29c78793          	addi	a5,a5,668 # 80021964 <pxCurrentTimerList>
800056d0:	0007a783          	lw	a5,0(a5)
800056d4:	00c7a783          	lw	a5,12(a5)
800056d8:	00c7a783          	lw	a5,12(a5)
800056dc:	fef42623          	sw	a5,-20(s0)

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
800056e0:	fec42783          	lw	a5,-20(s0)
800056e4:	00478793          	addi	a5,a5,4
800056e8:	00078513          	mv	a0,a5
800056ec:	aa8fb0ef          	jal	ra,80000994 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
800056f0:	fec42783          	lw	a5,-20(s0)
800056f4:	01c7a703          	lw	a4,28(a5)
800056f8:	00100793          	li	a5,1
800056fc:	06f71063          	bne	a4,a5,8000575c <prvProcessExpiredTimer+0xac>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
80005700:	fec42783          	lw	a5,-20(s0)
80005704:	0187a703          	lw	a4,24(a5)
80005708:	fdc42783          	lw	a5,-36(s0)
8000570c:	00f707b3          	add	a5,a4,a5
80005710:	fdc42683          	lw	a3,-36(s0)
80005714:	fd842603          	lw	a2,-40(s0)
80005718:	00078593          	mv	a1,a5
8000571c:	fec42503          	lw	a0,-20(s0)
80005720:	258000ef          	jal	ra,80005978 <prvInsertTimerInActiveList>
80005724:	00050713          	mv	a4,a0
80005728:	00100793          	li	a5,1
8000572c:	02f71863          	bne	a4,a5,8000575c <prvProcessExpiredTimer+0xac>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
80005730:	00000713          	li	a4,0
80005734:	00000693          	li	a3,0
80005738:	fdc42603          	lw	a2,-36(s0)
8000573c:	00000593          	li	a1,0
80005740:	fec42503          	lw	a0,-20(s0)
80005744:	e19ff0ef          	jal	ra,8000555c <xTimerGenericCommand>
80005748:	fea42423          	sw	a0,-24(s0)
			configASSERT( xResult );
8000574c:	fe842783          	lw	a5,-24(s0)
80005750:	00079663          	bnez	a5,8000575c <prvProcessExpiredTimer+0xac>
80005754:	30007073          	csrci	mstatus,0
80005758:	0000006f          	j	80005758 <prvProcessExpiredTimer+0xa8>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
8000575c:	fec42783          	lw	a5,-20(s0)
80005760:	0247a783          	lw	a5,36(a5)
80005764:	fec42503          	lw	a0,-20(s0)
80005768:	000780e7          	jalr	a5
}
8000576c:	00000013          	nop
80005770:	02c12083          	lw	ra,44(sp)
80005774:	02812403          	lw	s0,40(sp)
80005778:	03010113          	addi	sp,sp,48
8000577c:	00008067          	ret

80005780 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
80005780:	fd010113          	addi	sp,sp,-48
80005784:	02112623          	sw	ra,44(sp)
80005788:	02812423          	sw	s0,40(sp)
8000578c:	03010413          	addi	s0,sp,48
80005790:	fca42e23          	sw	a0,-36(s0)

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
80005794:	fe840793          	addi	a5,s0,-24
80005798:	00078513          	mv	a0,a5
8000579c:	0f4000ef          	jal	ra,80005890 <prvGetNextExpireTime>
800057a0:	fea42623          	sw	a0,-20(s0)

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
800057a4:	fe842783          	lw	a5,-24(s0)
800057a8:	00078593          	mv	a1,a5
800057ac:	fec42503          	lw	a0,-20(s0)
800057b0:	00c000ef          	jal	ra,800057bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
800057b4:	2b0000ef          	jal	ra,80005a64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
800057b8:	fddff06f          	j	80005794 <prvTimerTask+0x14>

800057bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
800057bc:	fd010113          	addi	sp,sp,-48
800057c0:	02112623          	sw	ra,44(sp)
800057c4:	02812423          	sw	s0,40(sp)
800057c8:	03010413          	addi	s0,sp,48
800057cc:	fca42e23          	sw	a0,-36(s0)
800057d0:	fcb42c23          	sw	a1,-40(s0)
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
800057d4:	f10fd0ef          	jal	ra,80002ee4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
800057d8:	fe840793          	addi	a5,s0,-24
800057dc:	00078513          	mv	a0,a5
800057e0:	124000ef          	jal	ra,80005904 <prvSampleTimeNow>
800057e4:	fea42623          	sw	a0,-20(s0)
		if( xTimerListsWereSwitched == pdFALSE )
800057e8:	fe842783          	lw	a5,-24(s0)
800057ec:	08079663          	bnez	a5,80005878 <prvProcessTimerOrBlockTask+0xbc>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
800057f0:	fd842783          	lw	a5,-40(s0)
800057f4:	02079263          	bnez	a5,80005818 <prvProcessTimerOrBlockTask+0x5c>
800057f8:	fdc42703          	lw	a4,-36(s0)
800057fc:	fec42783          	lw	a5,-20(s0)
80005800:	00e7ec63          	bltu	a5,a4,80005818 <prvProcessTimerOrBlockTask+0x5c>
			{
				( void ) xTaskResumeAll();
80005804:	f18fd0ef          	jal	ra,80002f1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
80005808:	fec42583          	lw	a1,-20(s0)
8000580c:	fdc42503          	lw	a0,-36(s0)
80005810:	ea1ff0ef          	jal	ra,800056b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
80005814:	0680006f          	j	8000587c <prvProcessTimerOrBlockTask+0xc0>
				if( xListWasEmpty != pdFALSE )
80005818:	fd842783          	lw	a5,-40(s0)
8000581c:	02078063          	beqz	a5,8000583c <prvProcessTimerOrBlockTask+0x80>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
80005820:	0001c797          	auipc	a5,0x1c
80005824:	14878793          	addi	a5,a5,328 # 80021968 <pxOverflowTimerList>
80005828:	0007a783          	lw	a5,0(a5)
8000582c:	0007a783          	lw	a5,0(a5)
80005830:	0017b793          	seqz	a5,a5
80005834:	0ff7f793          	andi	a5,a5,255
80005838:	fcf42c23          	sw	a5,-40(s0)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
8000583c:	0001c797          	auipc	a5,0x1c
80005840:	13078793          	addi	a5,a5,304 # 8002196c <xTimerQueue>
80005844:	0007a683          	lw	a3,0(a5)
80005848:	fdc42703          	lw	a4,-36(s0)
8000584c:	fec42783          	lw	a5,-20(s0)
80005850:	40f707b3          	sub	a5,a4,a5
80005854:	fd842603          	lw	a2,-40(s0)
80005858:	00078593          	mv	a1,a5
8000585c:	00068513          	mv	a0,a3
80005860:	f8cfc0ef          	jal	ra,80001fec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
80005864:	eb8fd0ef          	jal	ra,80002f1c <xTaskResumeAll>
80005868:	00050793          	mv	a5,a0
8000586c:	00079863          	bnez	a5,8000587c <prvProcessTimerOrBlockTask+0xc0>
					portYIELD_WITHIN_API();
80005870:	c1dfa0ef          	jal	ra,8000048c <vPortYield>
}
80005874:	0080006f          	j	8000587c <prvProcessTimerOrBlockTask+0xc0>
			( void ) xTaskResumeAll();
80005878:	ea4fd0ef          	jal	ra,80002f1c <xTaskResumeAll>
}
8000587c:	00000013          	nop
80005880:	02c12083          	lw	ra,44(sp)
80005884:	02812403          	lw	s0,40(sp)
80005888:	03010113          	addi	sp,sp,48
8000588c:	00008067          	ret

80005890 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
80005890:	fd010113          	addi	sp,sp,-48
80005894:	02812623          	sw	s0,44(sp)
80005898:	03010413          	addi	s0,sp,48
8000589c:	fca42e23          	sw	a0,-36(s0)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
800058a0:	0001c797          	auipc	a5,0x1c
800058a4:	0c478793          	addi	a5,a5,196 # 80021964 <pxCurrentTimerList>
800058a8:	0007a783          	lw	a5,0(a5)
800058ac:	0007a783          	lw	a5,0(a5)
800058b0:	0017b793          	seqz	a5,a5
800058b4:	0ff7f793          	andi	a5,a5,255
800058b8:	00078713          	mv	a4,a5
800058bc:	fdc42783          	lw	a5,-36(s0)
800058c0:	00e7a023          	sw	a4,0(a5)
	if( *pxListWasEmpty == pdFALSE )
800058c4:	fdc42783          	lw	a5,-36(s0)
800058c8:	0007a783          	lw	a5,0(a5)
800058cc:	02079063          	bnez	a5,800058ec <prvGetNextExpireTime+0x5c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
800058d0:	0001c797          	auipc	a5,0x1c
800058d4:	09478793          	addi	a5,a5,148 # 80021964 <pxCurrentTimerList>
800058d8:	0007a783          	lw	a5,0(a5)
800058dc:	00c7a783          	lw	a5,12(a5)
800058e0:	0007a783          	lw	a5,0(a5)
800058e4:	fef42623          	sw	a5,-20(s0)
800058e8:	0080006f          	j	800058f0 <prvGetNextExpireTime+0x60>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
800058ec:	fe042623          	sw	zero,-20(s0)
	}

	return xNextExpireTime;
800058f0:	fec42783          	lw	a5,-20(s0)
}
800058f4:	00078513          	mv	a0,a5
800058f8:	02c12403          	lw	s0,44(sp)
800058fc:	03010113          	addi	sp,sp,48
80005900:	00008067          	ret

80005904 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
80005904:	fd010113          	addi	sp,sp,-48
80005908:	02112623          	sw	ra,44(sp)
8000590c:	02812423          	sw	s0,40(sp)
80005910:	03010413          	addi	s0,sp,48
80005914:	fca42e23          	sw	a0,-36(s0)
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
80005918:	fe0fd0ef          	jal	ra,800030f8 <xTaskGetTickCount>
8000591c:	fea42623          	sw	a0,-20(s0)

	if( xTimeNow < xLastTime )
80005920:	0001c797          	auipc	a5,0x1c
80005924:	05078793          	addi	a5,a5,80 # 80021970 <xLastTime.2538>
80005928:	0007a783          	lw	a5,0(a5)
8000592c:	fec42703          	lw	a4,-20(s0)
80005930:	00f77c63          	bleu	a5,a4,80005948 <prvSampleTimeNow+0x44>
	{
		prvSwitchTimerLists();
80005934:	2d8000ef          	jal	ra,80005c0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
80005938:	fdc42783          	lw	a5,-36(s0)
8000593c:	00100713          	li	a4,1
80005940:	00e7a023          	sw	a4,0(a5)
80005944:	00c0006f          	j	80005950 <prvSampleTimeNow+0x4c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
80005948:	fdc42783          	lw	a5,-36(s0)
8000594c:	0007a023          	sw	zero,0(a5)
	}

	xLastTime = xTimeNow;
80005950:	0001c797          	auipc	a5,0x1c
80005954:	02078793          	addi	a5,a5,32 # 80021970 <xLastTime.2538>
80005958:	fec42703          	lw	a4,-20(s0)
8000595c:	00e7a023          	sw	a4,0(a5)

	return xTimeNow;
80005960:	fec42783          	lw	a5,-20(s0)
}
80005964:	00078513          	mv	a0,a5
80005968:	02c12083          	lw	ra,44(sp)
8000596c:	02812403          	lw	s0,40(sp)
80005970:	03010113          	addi	sp,sp,48
80005974:	00008067          	ret

80005978 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
80005978:	fd010113          	addi	sp,sp,-48
8000597c:	02112623          	sw	ra,44(sp)
80005980:	02812423          	sw	s0,40(sp)
80005984:	03010413          	addi	s0,sp,48
80005988:	fca42e23          	sw	a0,-36(s0)
8000598c:	fcb42c23          	sw	a1,-40(s0)
80005990:	fcc42a23          	sw	a2,-44(s0)
80005994:	fcd42823          	sw	a3,-48(s0)
BaseType_t xProcessTimerNow = pdFALSE;
80005998:	fe042623          	sw	zero,-20(s0)

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
8000599c:	fdc42783          	lw	a5,-36(s0)
800059a0:	fd842703          	lw	a4,-40(s0)
800059a4:	00e7a223          	sw	a4,4(a5)
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
800059a8:	fdc42783          	lw	a5,-36(s0)
800059ac:	fdc42703          	lw	a4,-36(s0)
800059b0:	00e7a823          	sw	a4,16(a5)

	if( xNextExpiryTime <= xTimeNow )
800059b4:	fd842703          	lw	a4,-40(s0)
800059b8:	fd442783          	lw	a5,-44(s0)
800059bc:	04e7e663          	bltu	a5,a4,80005a08 <prvInsertTimerInActiveList+0x90>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
800059c0:	fd442703          	lw	a4,-44(s0)
800059c4:	fd042783          	lw	a5,-48(s0)
800059c8:	40f70733          	sub	a4,a4,a5
800059cc:	fdc42783          	lw	a5,-36(s0)
800059d0:	0187a783          	lw	a5,24(a5)
800059d4:	00f76863          	bltu	a4,a5,800059e4 <prvInsertTimerInActiveList+0x6c>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
800059d8:	00100793          	li	a5,1
800059dc:	fef42623          	sw	a5,-20(s0)
800059e0:	06c0006f          	j	80005a4c <prvInsertTimerInActiveList+0xd4>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
800059e4:	0001c797          	auipc	a5,0x1c
800059e8:	f8478793          	addi	a5,a5,-124 # 80021968 <pxOverflowTimerList>
800059ec:	0007a703          	lw	a4,0(a5)
800059f0:	fdc42783          	lw	a5,-36(s0)
800059f4:	00478793          	addi	a5,a5,4
800059f8:	00078593          	mv	a1,a5
800059fc:	00070513          	mv	a0,a4
80005a00:	ec1fa0ef          	jal	ra,800008c0 <vListInsert>
80005a04:	0480006f          	j	80005a4c <prvInsertTimerInActiveList+0xd4>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
80005a08:	fd442703          	lw	a4,-44(s0)
80005a0c:	fd042783          	lw	a5,-48(s0)
80005a10:	00f77e63          	bleu	a5,a4,80005a2c <prvInsertTimerInActiveList+0xb4>
80005a14:	fd842703          	lw	a4,-40(s0)
80005a18:	fd042783          	lw	a5,-48(s0)
80005a1c:	00f76863          	bltu	a4,a5,80005a2c <prvInsertTimerInActiveList+0xb4>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
80005a20:	00100793          	li	a5,1
80005a24:	fef42623          	sw	a5,-20(s0)
80005a28:	0240006f          	j	80005a4c <prvInsertTimerInActiveList+0xd4>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
80005a2c:	0001c797          	auipc	a5,0x1c
80005a30:	f3878793          	addi	a5,a5,-200 # 80021964 <pxCurrentTimerList>
80005a34:	0007a703          	lw	a4,0(a5)
80005a38:	fdc42783          	lw	a5,-36(s0)
80005a3c:	00478793          	addi	a5,a5,4
80005a40:	00078593          	mv	a1,a5
80005a44:	00070513          	mv	a0,a4
80005a48:	e79fa0ef          	jal	ra,800008c0 <vListInsert>
		}
	}

	return xProcessTimerNow;
80005a4c:	fec42783          	lw	a5,-20(s0)
}
80005a50:	00078513          	mv	a0,a5
80005a54:	02c12083          	lw	ra,44(sp)
80005a58:	02812403          	lw	s0,40(sp)
80005a5c:	03010113          	addi	sp,sp,48
80005a60:	00008067          	ret

80005a64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
80005a64:	fd010113          	addi	sp,sp,-48
80005a68:	02112623          	sw	ra,44(sp)
80005a6c:	02812423          	sw	s0,40(sp)
80005a70:	03010413          	addi	s0,sp,48
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
80005a74:	1580006f          	j	80005bcc <prvProcessReceivedCommands+0x168>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
80005a78:	fd842783          	lw	a5,-40(s0)
80005a7c:	1407c663          	bltz	a5,80005bc8 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
80005a80:	fe042783          	lw	a5,-32(s0)
80005a84:	fef42623          	sw	a5,-20(s0)

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
80005a88:	fec42783          	lw	a5,-20(s0)
80005a8c:	0147a783          	lw	a5,20(a5)
80005a90:	00078a63          	beqz	a5,80005aa4 <prvProcessReceivedCommands+0x40>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
80005a94:	fec42783          	lw	a5,-20(s0)
80005a98:	00478793          	addi	a5,a5,4
80005a9c:	00078513          	mv	a0,a5
80005aa0:	ef5fa0ef          	jal	ra,80000994 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
80005aa4:	fd440793          	addi	a5,s0,-44
80005aa8:	00078513          	mv	a0,a5
80005aac:	e59ff0ef          	jal	ra,80005904 <prvSampleTimeNow>
80005ab0:	fea42423          	sw	a0,-24(s0)

			switch( xMessage.xMessageID )
80005ab4:	fd842783          	lw	a5,-40(s0)
80005ab8:	00900713          	li	a4,9
80005abc:	10f76863          	bltu	a4,a5,80005bcc <prvProcessReceivedCommands+0x168>
80005ac0:	00279713          	slli	a4,a5,0x2
80005ac4:	0001a797          	auipc	a5,0x1a
80005ac8:	57478793          	addi	a5,a5,1396 # 80020038 <__rodata_start+0x38>
80005acc:	00f707b3          	add	a5,a4,a5
80005ad0:	0007a703          	lw	a4,0(a5)
80005ad4:	0001a797          	auipc	a5,0x1a
80005ad8:	56478793          	addi	a5,a5,1380 # 80020038 <__rodata_start+0x38>
80005adc:	00f707b3          	add	a5,a4,a5
80005ae0:	00078067          	jr	a5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
80005ae4:	fdc42703          	lw	a4,-36(s0)
80005ae8:	fec42783          	lw	a5,-20(s0)
80005aec:	0187a783          	lw	a5,24(a5)
80005af0:	00f707b3          	add	a5,a4,a5
80005af4:	fdc42703          	lw	a4,-36(s0)
80005af8:	00070693          	mv	a3,a4
80005afc:	fe842603          	lw	a2,-24(s0)
80005b00:	00078593          	mv	a1,a5
80005b04:	fec42503          	lw	a0,-20(s0)
80005b08:	e71ff0ef          	jal	ra,80005978 <prvInsertTimerInActiveList>
80005b0c:	00050713          	mv	a4,a0
80005b10:	00100793          	li	a5,1
80005b14:	0af71c63          	bne	a4,a5,80005bcc <prvProcessReceivedCommands+0x168>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
80005b18:	fec42783          	lw	a5,-20(s0)
80005b1c:	0247a783          	lw	a5,36(a5)
80005b20:	fec42503          	lw	a0,-20(s0)
80005b24:	000780e7          	jalr	a5
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
80005b28:	fec42783          	lw	a5,-20(s0)
80005b2c:	01c7a703          	lw	a4,28(a5)
80005b30:	00100793          	li	a5,1
80005b34:	08f71c63          	bne	a4,a5,80005bcc <prvProcessReceivedCommands+0x168>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
80005b38:	fdc42703          	lw	a4,-36(s0)
80005b3c:	fec42783          	lw	a5,-20(s0)
80005b40:	0187a783          	lw	a5,24(a5)
80005b44:	00f707b3          	add	a5,a4,a5
80005b48:	00000713          	li	a4,0
80005b4c:	00000693          	li	a3,0
80005b50:	00078613          	mv	a2,a5
80005b54:	00000593          	li	a1,0
80005b58:	fec42503          	lw	a0,-20(s0)
80005b5c:	a01ff0ef          	jal	ra,8000555c <xTimerGenericCommand>
80005b60:	fea42223          	sw	a0,-28(s0)
							configASSERT( xResult );
80005b64:	fe442783          	lw	a5,-28(s0)
80005b68:	06079263          	bnez	a5,80005bcc <prvProcessReceivedCommands+0x168>
80005b6c:	30007073          	csrci	mstatus,0
80005b70:	0000006f          	j	80005b70 <prvProcessReceivedCommands+0x10c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
80005b74:	fdc42703          	lw	a4,-36(s0)
80005b78:	fec42783          	lw	a5,-20(s0)
80005b7c:	00e7ac23          	sw	a4,24(a5)
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
80005b80:	fec42783          	lw	a5,-20(s0)
80005b84:	0187a783          	lw	a5,24(a5)
80005b88:	00079663          	bnez	a5,80005b94 <prvProcessReceivedCommands+0x130>
80005b8c:	30007073          	csrci	mstatus,0
80005b90:	0000006f          	j	80005b90 <prvProcessReceivedCommands+0x12c>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
80005b94:	fec42783          	lw	a5,-20(s0)
80005b98:	0187a703          	lw	a4,24(a5)
80005b9c:	fe842783          	lw	a5,-24(s0)
80005ba0:	00f707b3          	add	a5,a4,a5
80005ba4:	fe842683          	lw	a3,-24(s0)
80005ba8:	fe842603          	lw	a2,-24(s0)
80005bac:	00078593          	mv	a1,a5
80005bb0:	fec42503          	lw	a0,-20(s0)
80005bb4:	dc5ff0ef          	jal	ra,80005978 <prvInsertTimerInActiveList>
					break;
80005bb8:	0140006f          	j	80005bcc <prvProcessReceivedCommands+0x168>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
80005bbc:	fec42503          	lw	a0,-20(s0)
80005bc0:	639000ef          	jal	ra,800069f8 <vPortFree>
					break;
80005bc4:	0080006f          	j	80005bcc <prvProcessReceivedCommands+0x168>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
80005bc8:	00000013          	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
80005bcc:	0001c797          	auipc	a5,0x1c
80005bd0:	da078793          	addi	a5,a5,-608 # 8002196c <xTimerQueue>
80005bd4:	0007a783          	lw	a5,0(a5)
80005bd8:	fd840713          	addi	a4,s0,-40
80005bdc:	00000693          	li	a3,0
80005be0:	00000613          	li	a2,0
80005be4:	00070593          	mv	a1,a4
80005be8:	00078513          	mv	a0,a5
80005bec:	81dfb0ef          	jal	ra,80001408 <xQueueGenericReceive>
80005bf0:	00050793          	mv	a5,a0
80005bf4:	e80792e3          	bnez	a5,80005a78 <prvProcessReceivedCommands+0x14>
	}
}
80005bf8:	00000013          	nop
80005bfc:	02c12083          	lw	ra,44(sp)
80005c00:	02812403          	lw	s0,40(sp)
80005c04:	03010113          	addi	sp,sp,48
80005c08:	00008067          	ret

80005c0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
80005c0c:	fd010113          	addi	sp,sp,-48
80005c10:	02112623          	sw	ra,44(sp)
80005c14:	02812423          	sw	s0,40(sp)
80005c18:	03010413          	addi	s0,sp,48

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
80005c1c:	0ec0006f          	j	80005d08 <prvSwitchTimerLists+0xfc>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
80005c20:	0001c797          	auipc	a5,0x1c
80005c24:	d4478793          	addi	a5,a5,-700 # 80021964 <pxCurrentTimerList>
80005c28:	0007a783          	lw	a5,0(a5)
80005c2c:	00c7a783          	lw	a5,12(a5)
80005c30:	0007a783          	lw	a5,0(a5)
80005c34:	fef42423          	sw	a5,-24(s0)

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
80005c38:	0001c797          	auipc	a5,0x1c
80005c3c:	d2c78793          	addi	a5,a5,-724 # 80021964 <pxCurrentTimerList>
80005c40:	0007a783          	lw	a5,0(a5)
80005c44:	00c7a783          	lw	a5,12(a5)
80005c48:	00c7a783          	lw	a5,12(a5)
80005c4c:	fef42223          	sw	a5,-28(s0)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
80005c50:	fe442783          	lw	a5,-28(s0)
80005c54:	00478793          	addi	a5,a5,4
80005c58:	00078513          	mv	a0,a5
80005c5c:	d39fa0ef          	jal	ra,80000994 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
80005c60:	fe442783          	lw	a5,-28(s0)
80005c64:	0247a783          	lw	a5,36(a5)
80005c68:	fe442503          	lw	a0,-28(s0)
80005c6c:	000780e7          	jalr	a5

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
80005c70:	fe442783          	lw	a5,-28(s0)
80005c74:	01c7a703          	lw	a4,28(a5)
80005c78:	00100793          	li	a5,1
80005c7c:	08f71663          	bne	a4,a5,80005d08 <prvSwitchTimerLists+0xfc>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
80005c80:	fe442783          	lw	a5,-28(s0)
80005c84:	0187a783          	lw	a5,24(a5)
80005c88:	fe842703          	lw	a4,-24(s0)
80005c8c:	00f707b3          	add	a5,a4,a5
80005c90:	fef42023          	sw	a5,-32(s0)
			if( xReloadTime > xNextExpireTime )
80005c94:	fe042703          	lw	a4,-32(s0)
80005c98:	fe842783          	lw	a5,-24(s0)
80005c9c:	04e7f063          	bleu	a4,a5,80005cdc <prvSwitchTimerLists+0xd0>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
80005ca0:	fe442783          	lw	a5,-28(s0)
80005ca4:	fe042703          	lw	a4,-32(s0)
80005ca8:	00e7a223          	sw	a4,4(a5)
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
80005cac:	fe442783          	lw	a5,-28(s0)
80005cb0:	fe442703          	lw	a4,-28(s0)
80005cb4:	00e7a823          	sw	a4,16(a5)
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
80005cb8:	0001c797          	auipc	a5,0x1c
80005cbc:	cac78793          	addi	a5,a5,-852 # 80021964 <pxCurrentTimerList>
80005cc0:	0007a703          	lw	a4,0(a5)
80005cc4:	fe442783          	lw	a5,-28(s0)
80005cc8:	00478793          	addi	a5,a5,4
80005ccc:	00078593          	mv	a1,a5
80005cd0:	00070513          	mv	a0,a4
80005cd4:	bedfa0ef          	jal	ra,800008c0 <vListInsert>
80005cd8:	0300006f          	j	80005d08 <prvSwitchTimerLists+0xfc>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
80005cdc:	00000713          	li	a4,0
80005ce0:	00000693          	li	a3,0
80005ce4:	fe842603          	lw	a2,-24(s0)
80005ce8:	00000593          	li	a1,0
80005cec:	fe442503          	lw	a0,-28(s0)
80005cf0:	86dff0ef          	jal	ra,8000555c <xTimerGenericCommand>
80005cf4:	fca42e23          	sw	a0,-36(s0)
				configASSERT( xResult );
80005cf8:	fdc42783          	lw	a5,-36(s0)
80005cfc:	00079663          	bnez	a5,80005d08 <prvSwitchTimerLists+0xfc>
80005d00:	30007073          	csrci	mstatus,0
80005d04:	0000006f          	j	80005d04 <prvSwitchTimerLists+0xf8>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
80005d08:	0001c797          	auipc	a5,0x1c
80005d0c:	c5c78793          	addi	a5,a5,-932 # 80021964 <pxCurrentTimerList>
80005d10:	0007a783          	lw	a5,0(a5)
80005d14:	0007a783          	lw	a5,0(a5)
80005d18:	f00794e3          	bnez	a5,80005c20 <prvSwitchTimerLists+0x14>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
80005d1c:	0001c797          	auipc	a5,0x1c
80005d20:	c4878793          	addi	a5,a5,-952 # 80021964 <pxCurrentTimerList>
80005d24:	0007a783          	lw	a5,0(a5)
80005d28:	fef42623          	sw	a5,-20(s0)
	pxCurrentTimerList = pxOverflowTimerList;
80005d2c:	0001c797          	auipc	a5,0x1c
80005d30:	c3c78793          	addi	a5,a5,-964 # 80021968 <pxOverflowTimerList>
80005d34:	0007a703          	lw	a4,0(a5)
80005d38:	0001c797          	auipc	a5,0x1c
80005d3c:	c2c78793          	addi	a5,a5,-980 # 80021964 <pxCurrentTimerList>
80005d40:	00e7a023          	sw	a4,0(a5)
	pxOverflowTimerList = pxTemp;
80005d44:	0001c797          	auipc	a5,0x1c
80005d48:	c2478793          	addi	a5,a5,-988 # 80021968 <pxOverflowTimerList>
80005d4c:	fec42703          	lw	a4,-20(s0)
80005d50:	00e7a023          	sw	a4,0(a5)
}
80005d54:	00000013          	nop
80005d58:	02c12083          	lw	ra,44(sp)
80005d5c:	02812403          	lw	s0,40(sp)
80005d60:	03010113          	addi	sp,sp,48
80005d64:	00008067          	ret

80005d68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
80005d68:	ff010113          	addi	sp,sp,-16
80005d6c:	00112623          	sw	ra,12(sp)
80005d70:	00812423          	sw	s0,8(sp)
80005d74:	01010413          	addi	s0,sp,16
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
80005d78:	c65fe0ef          	jal	ra,800049dc <vTaskEnterCritical>
	{
		if( xTimerQueue == NULL )
80005d7c:	0001c797          	auipc	a5,0x1c
80005d80:	bf078793          	addi	a5,a5,-1040 # 8002196c <xTimerQueue>
80005d84:	0007a783          	lw	a5,0(a5)
80005d88:	0a079463          	bnez	a5,80005e30 <prvCheckForValidListAndQueue+0xc8>
		{
			vListInitialise( &xActiveTimerList1 );
80005d8c:	0001c517          	auipc	a0,0x1c
80005d90:	bb050513          	addi	a0,a0,-1104 # 8002193c <xActiveTimerList1>
80005d94:	a19fa0ef          	jal	ra,800007ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
80005d98:	0001c517          	auipc	a0,0x1c
80005d9c:	bb850513          	addi	a0,a0,-1096 # 80021950 <xActiveTimerList2>
80005da0:	a0dfa0ef          	jal	ra,800007ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
80005da4:	0001c797          	auipc	a5,0x1c
80005da8:	bc078793          	addi	a5,a5,-1088 # 80021964 <pxCurrentTimerList>
80005dac:	0001c717          	auipc	a4,0x1c
80005db0:	b9070713          	addi	a4,a4,-1136 # 8002193c <xActiveTimerList1>
80005db4:	00e7a023          	sw	a4,0(a5)
			pxOverflowTimerList = &xActiveTimerList2;
80005db8:	0001c797          	auipc	a5,0x1c
80005dbc:	bb078793          	addi	a5,a5,-1104 # 80021968 <pxOverflowTimerList>
80005dc0:	0001c717          	auipc	a4,0x1c
80005dc4:	b9070713          	addi	a4,a4,-1136 # 80021950 <xActiveTimerList2>
80005dc8:	00e7a023          	sw	a4,0(a5)
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
80005dcc:	00000613          	li	a2,0
80005dd0:	00c00593          	li	a1,12
80005dd4:	00200513          	li	a0,2
80005dd8:	d81fa0ef          	jal	ra,80000b58 <xQueueGenericCreate>
80005ddc:	00050713          	mv	a4,a0
80005de0:	0001c797          	auipc	a5,0x1c
80005de4:	b8c78793          	addi	a5,a5,-1140 # 8002196c <xTimerQueue>
80005de8:	00e7a023          	sw	a4,0(a5)
			configASSERT( xTimerQueue );
80005dec:	0001c797          	auipc	a5,0x1c
80005df0:	b8078793          	addi	a5,a5,-1152 # 8002196c <xTimerQueue>
80005df4:	0007a783          	lw	a5,0(a5)
80005df8:	00079663          	bnez	a5,80005e04 <prvCheckForValidListAndQueue+0x9c>
80005dfc:	30007073          	csrci	mstatus,0
80005e00:	0000006f          	j	80005e00 <prvCheckForValidListAndQueue+0x98>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
80005e04:	0001c797          	auipc	a5,0x1c
80005e08:	b6878793          	addi	a5,a5,-1176 # 8002196c <xTimerQueue>
80005e0c:	0007a783          	lw	a5,0(a5)
80005e10:	02078063          	beqz	a5,80005e30 <prvCheckForValidListAndQueue+0xc8>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
80005e14:	0001c797          	auipc	a5,0x1c
80005e18:	b5878793          	addi	a5,a5,-1192 # 8002196c <xTimerQueue>
80005e1c:	0007a783          	lw	a5,0(a5)
80005e20:	0001a597          	auipc	a1,0x1a
80005e24:	24058593          	addi	a1,a1,576 # 80020060 <__rodata_start+0x60>
80005e28:	00078513          	mv	a0,a5
80005e2c:	8a8fc0ef          	jal	ra,80001ed4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
80005e30:	c01fe0ef          	jal	ra,80004a30 <vTaskExitCritical>
}
80005e34:	00000013          	nop
80005e38:	00c12083          	lw	ra,12(sp)
80005e3c:	00812403          	lw	s0,8(sp)
80005e40:	01010113          	addi	sp,sp,16
80005e44:	00008067          	ret

80005e48 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
80005e48:	fd010113          	addi	sp,sp,-48
80005e4c:	02112623          	sw	ra,44(sp)
80005e50:	02812423          	sw	s0,40(sp)
80005e54:	03010413          	addi	s0,sp,48
80005e58:	fca42e23          	sw	a0,-36(s0)
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
80005e5c:	fdc42783          	lw	a5,-36(s0)
80005e60:	fef42623          	sw	a5,-20(s0)

	configASSERT( xTimer );
80005e64:	fdc42783          	lw	a5,-36(s0)
80005e68:	00079663          	bnez	a5,80005e74 <xTimerIsTimerActive+0x2c>
80005e6c:	30007073          	csrci	mstatus,0
80005e70:	0000006f          	j	80005e70 <xTimerIsTimerActive+0x28>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
80005e74:	b69fe0ef          	jal	ra,800049dc <vTaskEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
80005e78:	fec42783          	lw	a5,-20(s0)
80005e7c:	0147a783          	lw	a5,20(a5)
80005e80:	00f037b3          	snez	a5,a5
80005e84:	0ff7f793          	andi	a5,a5,255
80005e88:	fef42423          	sw	a5,-24(s0)
	}
	taskEXIT_CRITICAL();
80005e8c:	ba5fe0ef          	jal	ra,80004a30 <vTaskExitCritical>

	return xTimerIsInActiveList;
80005e90:	fe842783          	lw	a5,-24(s0)
} /*lint !e818 Can't be pointer to const due to the typedef. */
80005e94:	00078513          	mv	a0,a5
80005e98:	02c12083          	lw	ra,44(sp)
80005e9c:	02812403          	lw	s0,40(sp)
80005ea0:	03010113          	addi	sp,sp,48
80005ea4:	00008067          	ret

80005ea8 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
80005ea8:	fd010113          	addi	sp,sp,-48
80005eac:	02112623          	sw	ra,44(sp)
80005eb0:	02812423          	sw	s0,40(sp)
80005eb4:	03010413          	addi	s0,sp,48
80005eb8:	fca42e23          	sw	a0,-36(s0)
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
80005ebc:	fdc42783          	lw	a5,-36(s0)
80005ec0:	fef42623          	sw	a5,-20(s0)
void *pvReturn;

	configASSERT( xTimer );
80005ec4:	fdc42783          	lw	a5,-36(s0)
80005ec8:	00079663          	bnez	a5,80005ed4 <pvTimerGetTimerID+0x2c>
80005ecc:	30007073          	csrci	mstatus,0
80005ed0:	0000006f          	j	80005ed0 <pvTimerGetTimerID+0x28>

	taskENTER_CRITICAL();
80005ed4:	b09fe0ef          	jal	ra,800049dc <vTaskEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
80005ed8:	fec42783          	lw	a5,-20(s0)
80005edc:	0207a783          	lw	a5,32(a5)
80005ee0:	fef42423          	sw	a5,-24(s0)
	}
	taskEXIT_CRITICAL();
80005ee4:	b4dfe0ef          	jal	ra,80004a30 <vTaskExitCritical>

	return pvReturn;
80005ee8:	fe842783          	lw	a5,-24(s0)
}
80005eec:	00078513          	mv	a0,a5
80005ef0:	02c12083          	lw	ra,44(sp)
80005ef4:	02812403          	lw	s0,40(sp)
80005ef8:	03010113          	addi	sp,sp,48
80005efc:	00008067          	ret

80005f00 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
80005f00:	fd010113          	addi	sp,sp,-48
80005f04:	02112623          	sw	ra,44(sp)
80005f08:	02812423          	sw	s0,40(sp)
80005f0c:	03010413          	addi	s0,sp,48
80005f10:	fca42e23          	sw	a0,-36(s0)
80005f14:	fcb42c23          	sw	a1,-40(s0)
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
80005f18:	fdc42783          	lw	a5,-36(s0)
80005f1c:	fef42623          	sw	a5,-20(s0)

	configASSERT( xTimer );
80005f20:	fdc42783          	lw	a5,-36(s0)
80005f24:	00079663          	bnez	a5,80005f30 <vTimerSetTimerID+0x30>
80005f28:	30007073          	csrci	mstatus,0
80005f2c:	0000006f          	j	80005f2c <vTimerSetTimerID+0x2c>

	taskENTER_CRITICAL();
80005f30:	aadfe0ef          	jal	ra,800049dc <vTaskEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
80005f34:	fec42783          	lw	a5,-20(s0)
80005f38:	fd842703          	lw	a4,-40(s0)
80005f3c:	02e7a023          	sw	a4,32(a5)
	}
	taskEXIT_CRITICAL();
80005f40:	af1fe0ef          	jal	ra,80004a30 <vTaskExitCritical>
}
80005f44:	00000013          	nop
80005f48:	02c12083          	lw	ra,44(sp)
80005f4c:	02812403          	lw	s0,40(sp)
80005f50:	03010113          	addi	sp,sp,48
80005f54:	00008067          	ret

80005f58 <xEventGroupCreate>:
static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits );

/*-----------------------------------------------------------*/

EventGroupHandle_t xEventGroupCreate( void )
{
80005f58:	fe010113          	addi	sp,sp,-32
80005f5c:	00112e23          	sw	ra,28(sp)
80005f60:	00812c23          	sw	s0,24(sp)
80005f64:	02010413          	addi	s0,sp,32
EventGroup_t *pxEventBits;

	pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
80005f68:	01c00513          	li	a0,28
80005f6c:	085000ef          	jal	ra,800067f0 <pvPortMalloc>
80005f70:	fea42623          	sw	a0,-20(s0)
	if( pxEventBits != NULL )
80005f74:	fec42783          	lw	a5,-20(s0)
80005f78:	00078e63          	beqz	a5,80005f94 <xEventGroupCreate+0x3c>
	{
		pxEventBits->uxEventBits = 0;
80005f7c:	fec42783          	lw	a5,-20(s0)
80005f80:	0007a023          	sw	zero,0(a5)
		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
80005f84:	fec42783          	lw	a5,-20(s0)
80005f88:	00478793          	addi	a5,a5,4
80005f8c:	00078513          	mv	a0,a5
80005f90:	81dfa0ef          	jal	ra,800007ac <vListInitialise>
	else
	{
		traceEVENT_GROUP_CREATE_FAILED();
	}

	return ( EventGroupHandle_t ) pxEventBits;
80005f94:	fec42783          	lw	a5,-20(s0)
}
80005f98:	00078513          	mv	a0,a5
80005f9c:	01c12083          	lw	ra,28(sp)
80005fa0:	01812403          	lw	s0,24(sp)
80005fa4:	02010113          	addi	sp,sp,32
80005fa8:	00008067          	ret

80005fac <xEventGroupSync>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
80005fac:	fc010113          	addi	sp,sp,-64
80005fb0:	02112e23          	sw	ra,60(sp)
80005fb4:	02812c23          	sw	s0,56(sp)
80005fb8:	04010413          	addi	s0,sp,64
80005fbc:	fca42623          	sw	a0,-52(s0)
80005fc0:	fcb42423          	sw	a1,-56(s0)
80005fc4:	fcc42223          	sw	a2,-60(s0)
80005fc8:	fcd42023          	sw	a3,-64(s0)
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
80005fcc:	fcc42783          	lw	a5,-52(s0)
80005fd0:	fef42423          	sw	a5,-24(s0)
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
80005fd4:	fe042223          	sw	zero,-28(s0)

	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
80005fd8:	fc442703          	lw	a4,-60(s0)
80005fdc:	ff0007b7          	lui	a5,0xff000
80005fe0:	00f777b3          	and	a5,a4,a5
80005fe4:	00078663          	beqz	a5,80005ff0 <xEventGroupSync+0x44>
80005fe8:	30007073          	csrci	mstatus,0
80005fec:	0000006f          	j	80005fec <xEventGroupSync+0x40>
	configASSERT( uxBitsToWaitFor != 0 );
80005ff0:	fc442783          	lw	a5,-60(s0)
80005ff4:	00079663          	bnez	a5,80006000 <xEventGroupSync+0x54>
80005ff8:	30007073          	csrci	mstatus,0
80005ffc:	0000006f          	j	80005ffc <xEventGroupSync+0x50>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
80006000:	ed0fe0ef          	jal	ra,800046d0 <xTaskGetSchedulerState>
80006004:	00050793          	mv	a5,a0
80006008:	00079663          	bnez	a5,80006014 <xEventGroupSync+0x68>
8000600c:	fc042783          	lw	a5,-64(s0)
80006010:	00079663          	bnez	a5,8000601c <xEventGroupSync+0x70>
80006014:	00100793          	li	a5,1
80006018:	0080006f          	j	80006020 <xEventGroupSync+0x74>
8000601c:	00000793          	li	a5,0
80006020:	00079663          	bnez	a5,8000602c <xEventGroupSync+0x80>
80006024:	30007073          	csrci	mstatus,0
80006028:	0000006f          	j	80006028 <xEventGroupSync+0x7c>
	}
	#endif

	vTaskSuspendAll();
8000602c:	eb9fc0ef          	jal	ra,80002ee4 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
80006030:	fe842783          	lw	a5,-24(s0)
80006034:	0007a783          	lw	a5,0(a5) # ff000000 <__stack+0x7efc3534>
80006038:	fef42023          	sw	a5,-32(s0)

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
8000603c:	fc842583          	lw	a1,-56(s0)
80006040:	fcc42503          	lw	a0,-52(s0)
80006044:	440000ef          	jal	ra,80006484 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
80006048:	fe042703          	lw	a4,-32(s0)
8000604c:	fc842783          	lw	a5,-56(s0)
80006050:	00f76733          	or	a4,a4,a5
80006054:	fc442783          	lw	a5,-60(s0)
80006058:	00f777b3          	and	a5,a4,a5
8000605c:	fc442703          	lw	a4,-60(s0)
80006060:	02f71c63          	bne	a4,a5,80006098 <xEventGroupSync+0xec>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
80006064:	fe042703          	lw	a4,-32(s0)
80006068:	fc842783          	lw	a5,-56(s0)
8000606c:	00f767b3          	or	a5,a4,a5
80006070:	fef42623          	sw	a5,-20(s0)

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
80006074:	fe842783          	lw	a5,-24(s0)
80006078:	0007a703          	lw	a4,0(a5)
8000607c:	fc442783          	lw	a5,-60(s0)
80006080:	fff7c793          	not	a5,a5
80006084:	00f77733          	and	a4,a4,a5
80006088:	fe842783          	lw	a5,-24(s0)
8000608c:	00e7a023          	sw	a4,0(a5)

			xTicksToWait = 0;
80006090:	fc042023          	sw	zero,-64(s0)
80006094:	0440006f          	j	800060d8 <xEventGroupSync+0x12c>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
80006098:	fc042783          	lw	a5,-64(s0)
8000609c:	02078863          	beqz	a5,800060cc <xEventGroupSync+0x120>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
800060a0:	fe842783          	lw	a5,-24(s0)
800060a4:	00478693          	addi	a3,a5,4
800060a8:	fc442703          	lw	a4,-60(s0)
800060ac:	050007b7          	lui	a5,0x5000
800060b0:	00f767b3          	or	a5,a4,a5
800060b4:	fc042603          	lw	a2,-64(s0)
800060b8:	00078593          	mv	a1,a5
800060bc:	00068513          	mv	a0,a3
800060c0:	fd4fd0ef          	jal	ra,80003894 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
800060c4:	fe042623          	sw	zero,-20(s0)
800060c8:	0100006f          	j	800060d8 <xEventGroupSync+0x12c>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
800060cc:	fe842783          	lw	a5,-24(s0)
800060d0:	0007a783          	lw	a5,0(a5) # 5000000 <_HEAP_SIZE+0x4fff000>
800060d4:	fef42623          	sw	a5,-20(s0)
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
800060d8:	e45fc0ef          	jal	ra,80002f1c <xTaskResumeAll>
800060dc:	fca42e23          	sw	a0,-36(s0)

	if( xTicksToWait != ( TickType_t ) 0 )
800060e0:	fc042783          	lw	a5,-64(s0)
800060e4:	08078463          	beqz	a5,8000616c <xEventGroupSync+0x1c0>
	{
		if( xAlreadyYielded == pdFALSE )
800060e8:	fdc42783          	lw	a5,-36(s0)
800060ec:	00079463          	bnez	a5,800060f4 <xEventGroupSync+0x148>
		{
			portYIELD_WITHIN_API();
800060f0:	b9cfa0ef          	jal	ra,8000048c <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
800060f4:	9adfe0ef          	jal	ra,80004aa0 <uxTaskResetEventItemValue>
800060f8:	fea42623          	sw	a0,-20(s0)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
800060fc:	fec42703          	lw	a4,-20(s0)
80006100:	020007b7          	lui	a5,0x2000
80006104:	00f777b3          	and	a5,a4,a5
80006108:	04079863          	bnez	a5,80006158 <xEventGroupSync+0x1ac>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
8000610c:	8d1fe0ef          	jal	ra,800049dc <vTaskEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
80006110:	fe842783          	lw	a5,-24(s0)
80006114:	0007a783          	lw	a5,0(a5) # 2000000 <_HEAP_SIZE+0x1fff000>
80006118:	fef42623          	sw	a5,-20(s0)

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
8000611c:	fec42703          	lw	a4,-20(s0)
80006120:	fc442783          	lw	a5,-60(s0)
80006124:	00f777b3          	and	a5,a4,a5
80006128:	fc442703          	lw	a4,-60(s0)
8000612c:	02f71063          	bne	a4,a5,8000614c <xEventGroupSync+0x1a0>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
80006130:	fe842783          	lw	a5,-24(s0)
80006134:	0007a703          	lw	a4,0(a5)
80006138:	fc442783          	lw	a5,-60(s0)
8000613c:	fff7c793          	not	a5,a5
80006140:	00f77733          	and	a4,a4,a5
80006144:	fe842783          	lw	a5,-24(s0)
80006148:	00e7a023          	sw	a4,0(a5)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
8000614c:	8e5fe0ef          	jal	ra,80004a30 <vTaskExitCritical>

			xTimeoutOccurred = pdTRUE;
80006150:	00100793          	li	a5,1
80006154:	fef42223          	sw	a5,-28(s0)
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
80006158:	fec42703          	lw	a4,-20(s0)
8000615c:	010007b7          	lui	a5,0x1000
80006160:	fff78793          	addi	a5,a5,-1 # ffffff <_HEAP_SIZE+0xffefff>
80006164:	00f777b3          	and	a5,a4,a5
80006168:	fef42623          	sw	a5,-20(s0)
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
8000616c:	fec42783          	lw	a5,-20(s0)
}
80006170:	00078513          	mv	a0,a5
80006174:	03c12083          	lw	ra,60(sp)
80006178:	03812403          	lw	s0,56(sp)
8000617c:	04010113          	addi	sp,sp,64
80006180:	00008067          	ret

80006184 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
80006184:	fb010113          	addi	sp,sp,-80
80006188:	04112623          	sw	ra,76(sp)
8000618c:	04812423          	sw	s0,72(sp)
80006190:	05010413          	addi	s0,sp,80
80006194:	fca42623          	sw	a0,-52(s0)
80006198:	fcb42423          	sw	a1,-56(s0)
8000619c:	fcc42223          	sw	a2,-60(s0)
800061a0:	fcd42023          	sw	a3,-64(s0)
800061a4:	fae42e23          	sw	a4,-68(s0)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
800061a8:	fcc42783          	lw	a5,-52(s0)
800061ac:	fef42223          	sw	a5,-28(s0)
EventBits_t uxReturn, uxControlBits = 0;
800061b0:	fe042423          	sw	zero,-24(s0)
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
800061b4:	fe042023          	sw	zero,-32(s0)

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
800061b8:	fcc42783          	lw	a5,-52(s0)
800061bc:	00079663          	bnez	a5,800061c8 <xEventGroupWaitBits+0x44>
800061c0:	30007073          	csrci	mstatus,0
800061c4:	0000006f          	j	800061c4 <xEventGroupWaitBits+0x40>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
800061c8:	fc842703          	lw	a4,-56(s0)
800061cc:	ff0007b7          	lui	a5,0xff000
800061d0:	00f777b3          	and	a5,a4,a5
800061d4:	00078663          	beqz	a5,800061e0 <xEventGroupWaitBits+0x5c>
800061d8:	30007073          	csrci	mstatus,0
800061dc:	0000006f          	j	800061dc <xEventGroupWaitBits+0x58>
	configASSERT( uxBitsToWaitFor != 0 );
800061e0:	fc842783          	lw	a5,-56(s0)
800061e4:	00079663          	bnez	a5,800061f0 <xEventGroupWaitBits+0x6c>
800061e8:	30007073          	csrci	mstatus,0
800061ec:	0000006f          	j	800061ec <xEventGroupWaitBits+0x68>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
800061f0:	ce0fe0ef          	jal	ra,800046d0 <xTaskGetSchedulerState>
800061f4:	00050793          	mv	a5,a0
800061f8:	00079663          	bnez	a5,80006204 <xEventGroupWaitBits+0x80>
800061fc:	fbc42783          	lw	a5,-68(s0)
80006200:	00079663          	bnez	a5,8000620c <xEventGroupWaitBits+0x88>
80006204:	00100793          	li	a5,1
80006208:	0080006f          	j	80006210 <xEventGroupWaitBits+0x8c>
8000620c:	00000793          	li	a5,0
80006210:	00079663          	bnez	a5,8000621c <xEventGroupWaitBits+0x98>
80006214:	30007073          	csrci	mstatus,0
80006218:	0000006f          	j	80006218 <xEventGroupWaitBits+0x94>
	}
	#endif

	vTaskSuspendAll();
8000621c:	cc9fc0ef          	jal	ra,80002ee4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
80006220:	fe442783          	lw	a5,-28(s0)
80006224:	0007a783          	lw	a5,0(a5) # ff000000 <__stack+0x7efc3534>
80006228:	fcf42e23          	sw	a5,-36(s0)

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
8000622c:	fc042603          	lw	a2,-64(s0)
80006230:	fc842583          	lw	a1,-56(s0)
80006234:	fdc42503          	lw	a0,-36(s0)
80006238:	500000ef          	jal	ra,80006738 <prvTestWaitCondition>
8000623c:	fca42c23          	sw	a0,-40(s0)

		if( xWaitConditionMet != pdFALSE )
80006240:	fd842783          	lw	a5,-40(s0)
80006244:	02078c63          	beqz	a5,8000627c <xEventGroupWaitBits+0xf8>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
80006248:	fdc42783          	lw	a5,-36(s0)
8000624c:	fef42623          	sw	a5,-20(s0)
			xTicksToWait = ( TickType_t ) 0;
80006250:	fa042e23          	sw	zero,-68(s0)

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
80006254:	fc442783          	lw	a5,-60(s0)
80006258:	08078863          	beqz	a5,800062e8 <xEventGroupWaitBits+0x164>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
8000625c:	fe442783          	lw	a5,-28(s0)
80006260:	0007a703          	lw	a4,0(a5)
80006264:	fc842783          	lw	a5,-56(s0)
80006268:	fff7c793          	not	a5,a5
8000626c:	00f77733          	and	a4,a4,a5
80006270:	fe442783          	lw	a5,-28(s0)
80006274:	00e7a023          	sw	a4,0(a5)
80006278:	0700006f          	j	800062e8 <xEventGroupWaitBits+0x164>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
8000627c:	fbc42783          	lw	a5,-68(s0)
80006280:	00079863          	bnez	a5,80006290 <xEventGroupWaitBits+0x10c>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
80006284:	fdc42783          	lw	a5,-36(s0)
80006288:	fef42623          	sw	a5,-20(s0)
8000628c:	05c0006f          	j	800062e8 <xEventGroupWaitBits+0x164>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
80006290:	fc442783          	lw	a5,-60(s0)
80006294:	00078a63          	beqz	a5,800062a8 <xEventGroupWaitBits+0x124>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
80006298:	fe842703          	lw	a4,-24(s0)
8000629c:	010007b7          	lui	a5,0x1000
800062a0:	00f767b3          	or	a5,a4,a5
800062a4:	fef42423          	sw	a5,-24(s0)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
800062a8:	fc042783          	lw	a5,-64(s0)
800062ac:	00078a63          	beqz	a5,800062c0 <xEventGroupWaitBits+0x13c>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
800062b0:	fe842703          	lw	a4,-24(s0)
800062b4:	040007b7          	lui	a5,0x4000
800062b8:	00f767b3          	or	a5,a4,a5
800062bc:	fef42423          	sw	a5,-24(s0)
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
800062c0:	fe442783          	lw	a5,-28(s0)
800062c4:	00478693          	addi	a3,a5,4 # 4000004 <_HEAP_SIZE+0x3fff004>
800062c8:	fc842703          	lw	a4,-56(s0)
800062cc:	fe842783          	lw	a5,-24(s0)
800062d0:	00f767b3          	or	a5,a4,a5
800062d4:	fbc42603          	lw	a2,-68(s0)
800062d8:	00078593          	mv	a1,a5
800062dc:	00068513          	mv	a0,a3
800062e0:	db4fd0ef          	jal	ra,80003894 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
800062e4:	fe042623          	sw	zero,-20(s0)

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
800062e8:	c35fc0ef          	jal	ra,80002f1c <xTaskResumeAll>
800062ec:	fca42a23          	sw	a0,-44(s0)

	if( xTicksToWait != ( TickType_t ) 0 )
800062f0:	fbc42783          	lw	a5,-68(s0)
800062f4:	08078863          	beqz	a5,80006384 <xEventGroupWaitBits+0x200>
	{
		if( xAlreadyYielded == pdFALSE )
800062f8:	fd442783          	lw	a5,-44(s0)
800062fc:	00079463          	bnez	a5,80006304 <xEventGroupWaitBits+0x180>
		{
			portYIELD_WITHIN_API();
80006300:	98cfa0ef          	jal	ra,8000048c <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
80006304:	f9cfe0ef          	jal	ra,80004aa0 <uxTaskResetEventItemValue>
80006308:	fea42623          	sw	a0,-20(s0)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
8000630c:	fec42703          	lw	a4,-20(s0)
80006310:	020007b7          	lui	a5,0x2000
80006314:	00f777b3          	and	a5,a4,a5
80006318:	04079c63          	bnez	a5,80006370 <xEventGroupWaitBits+0x1ec>
		{
			taskENTER_CRITICAL();
8000631c:	ec0fe0ef          	jal	ra,800049dc <vTaskEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
80006320:	fe442783          	lw	a5,-28(s0)
80006324:	0007a783          	lw	a5,0(a5) # 2000000 <_HEAP_SIZE+0x1fff000>
80006328:	fef42623          	sw	a5,-20(s0)

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
8000632c:	fc042603          	lw	a2,-64(s0)
80006330:	fc842583          	lw	a1,-56(s0)
80006334:	fec42503          	lw	a0,-20(s0)
80006338:	400000ef          	jal	ra,80006738 <prvTestWaitCondition>
8000633c:	00050793          	mv	a5,a0
80006340:	02078463          	beqz	a5,80006368 <xEventGroupWaitBits+0x1e4>
				{
					if( xClearOnExit != pdFALSE )
80006344:	fc442783          	lw	a5,-60(s0)
80006348:	02078063          	beqz	a5,80006368 <xEventGroupWaitBits+0x1e4>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
8000634c:	fe442783          	lw	a5,-28(s0)
80006350:	0007a703          	lw	a4,0(a5)
80006354:	fc842783          	lw	a5,-56(s0)
80006358:	fff7c793          	not	a5,a5
8000635c:	00f77733          	and	a4,a4,a5
80006360:	fe442783          	lw	a5,-28(s0)
80006364:	00e7a023          	sw	a4,0(a5)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
80006368:	ec8fe0ef          	jal	ra,80004a30 <vTaskExitCritical>

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
8000636c:	fe042023          	sw	zero,-32(s0)
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
80006370:	fec42703          	lw	a4,-20(s0)
80006374:	010007b7          	lui	a5,0x1000
80006378:	fff78793          	addi	a5,a5,-1 # ffffff <_HEAP_SIZE+0xffefff>
8000637c:	00f777b3          	and	a5,a4,a5
80006380:	fef42623          	sw	a5,-20(s0)
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
80006384:	fec42783          	lw	a5,-20(s0)
}
80006388:	00078513          	mv	a0,a5
8000638c:	04c12083          	lw	ra,76(sp)
80006390:	04812403          	lw	s0,72(sp)
80006394:	05010113          	addi	sp,sp,80
80006398:	00008067          	ret

8000639c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
8000639c:	fd010113          	addi	sp,sp,-48
800063a0:	02112623          	sw	ra,44(sp)
800063a4:	02812423          	sw	s0,40(sp)
800063a8:	03010413          	addi	s0,sp,48
800063ac:	fca42e23          	sw	a0,-36(s0)
800063b0:	fcb42c23          	sw	a1,-40(s0)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
800063b4:	fdc42783          	lw	a5,-36(s0)
800063b8:	fef42623          	sw	a5,-20(s0)
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
800063bc:	fdc42783          	lw	a5,-36(s0)
800063c0:	00079663          	bnez	a5,800063cc <xEventGroupClearBits+0x30>
800063c4:	30007073          	csrci	mstatus,0
800063c8:	0000006f          	j	800063c8 <xEventGroupClearBits+0x2c>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
800063cc:	fd842703          	lw	a4,-40(s0)
800063d0:	ff0007b7          	lui	a5,0xff000
800063d4:	00f777b3          	and	a5,a4,a5
800063d8:	00078663          	beqz	a5,800063e4 <xEventGroupClearBits+0x48>
800063dc:	30007073          	csrci	mstatus,0
800063e0:	0000006f          	j	800063e0 <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
800063e4:	df8fe0ef          	jal	ra,800049dc <vTaskEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
800063e8:	fec42783          	lw	a5,-20(s0)
800063ec:	0007a783          	lw	a5,0(a5) # ff000000 <__stack+0x7efc3534>
800063f0:	fef42423          	sw	a5,-24(s0)

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
800063f4:	fec42783          	lw	a5,-20(s0)
800063f8:	0007a703          	lw	a4,0(a5)
800063fc:	fd842783          	lw	a5,-40(s0)
80006400:	fff7c793          	not	a5,a5
80006404:	00f77733          	and	a4,a4,a5
80006408:	fec42783          	lw	a5,-20(s0)
8000640c:	00e7a023          	sw	a4,0(a5)
	}
	taskEXIT_CRITICAL();
80006410:	e20fe0ef          	jal	ra,80004a30 <vTaskExitCritical>

	return uxReturn;
80006414:	fe842783          	lw	a5,-24(s0)
}
80006418:	00078513          	mv	a0,a5
8000641c:	02c12083          	lw	ra,44(sp)
80006420:	02812403          	lw	s0,40(sp)
80006424:	03010113          	addi	sp,sp,48
80006428:	00008067          	ret

8000642c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
8000642c:	fd010113          	addi	sp,sp,-48
80006430:	02112623          	sw	ra,44(sp)
80006434:	02812423          	sw	s0,40(sp)
80006438:	03010413          	addi	s0,sp,48
8000643c:	fca42e23          	sw	a0,-36(s0)
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
80006440:	fdc42783          	lw	a5,-36(s0)
80006444:	fef42623          	sw	a5,-20(s0)
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80006448:	a6cfa0ef          	jal	ra,800006b4 <vPortSetInterruptMask>
8000644c:	00050793          	mv	a5,a0
80006450:	fef42423          	sw	a5,-24(s0)
	{
		uxReturn = pxEventBits->uxEventBits;
80006454:	fec42783          	lw	a5,-20(s0)
80006458:	0007a783          	lw	a5,0(a5)
8000645c:	fef42223          	sw	a5,-28(s0)
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
80006460:	fe842783          	lw	a5,-24(s0)
80006464:	00078513          	mv	a0,a5
80006468:	a24fa0ef          	jal	ra,8000068c <vPortClearInterruptMask>

	return uxReturn;
8000646c:	fe442783          	lw	a5,-28(s0)
}
80006470:	00078513          	mv	a0,a5
80006474:	02c12083          	lw	ra,44(sp)
80006478:	02812403          	lw	s0,40(sp)
8000647c:	03010113          	addi	sp,sp,48
80006480:	00008067          	ret

80006484 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
80006484:	fb010113          	addi	sp,sp,-80
80006488:	04112623          	sw	ra,76(sp)
8000648c:	04812423          	sw	s0,72(sp)
80006490:	05010413          	addi	s0,sp,80
80006494:	faa42e23          	sw	a0,-68(s0)
80006498:	fab42c23          	sw	a1,-72(s0)
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
8000649c:	fe042423          	sw	zero,-24(s0)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
800064a0:	fbc42783          	lw	a5,-68(s0)
800064a4:	fef42023          	sw	a5,-32(s0)
BaseType_t xMatchFound = pdFALSE;
800064a8:	fe042223          	sw	zero,-28(s0)

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
800064ac:	fbc42783          	lw	a5,-68(s0)
800064b0:	00079663          	bnez	a5,800064bc <xEventGroupSetBits+0x38>
800064b4:	30007073          	csrci	mstatus,0
800064b8:	0000006f          	j	800064b8 <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
800064bc:	fb842703          	lw	a4,-72(s0)
800064c0:	ff0007b7          	lui	a5,0xff000
800064c4:	00f777b3          	and	a5,a4,a5
800064c8:	00078663          	beqz	a5,800064d4 <xEventGroupSetBits+0x50>
800064cc:	30007073          	csrci	mstatus,0
800064d0:	0000006f          	j	800064d0 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
800064d4:	fe042783          	lw	a5,-32(s0)
800064d8:	00478793          	addi	a5,a5,4 # ff000004 <__stack+0x7efc3538>
800064dc:	fcf42e23          	sw	a5,-36(s0)
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
800064e0:	fdc42783          	lw	a5,-36(s0)
800064e4:	00878793          	addi	a5,a5,8
800064e8:	fcf42c23          	sw	a5,-40(s0)
	vTaskSuspendAll();
800064ec:	9f9fc0ef          	jal	ra,80002ee4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
800064f0:	fdc42783          	lw	a5,-36(s0)
800064f4:	00c7a783          	lw	a5,12(a5)
800064f8:	fef42623          	sw	a5,-20(s0)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
800064fc:	fe042783          	lw	a5,-32(s0)
80006500:	0007a703          	lw	a4,0(a5)
80006504:	fb842783          	lw	a5,-72(s0)
80006508:	00f76733          	or	a4,a4,a5
8000650c:	fe042783          	lw	a5,-32(s0)
80006510:	00e7a023          	sw	a4,0(a5)

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
80006514:	0e00006f          	j	800065f4 <xEventGroupSetBits+0x170>
		{
			pxNext = listGET_NEXT( pxListItem );
80006518:	fec42783          	lw	a5,-20(s0)
8000651c:	0047a783          	lw	a5,4(a5)
80006520:	fcf42a23          	sw	a5,-44(s0)
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
80006524:	fec42783          	lw	a5,-20(s0)
80006528:	0007a783          	lw	a5,0(a5)
8000652c:	fcf42823          	sw	a5,-48(s0)
			xMatchFound = pdFALSE;
80006530:	fe042223          	sw	zero,-28(s0)

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
80006534:	fd042703          	lw	a4,-48(s0)
80006538:	ff0007b7          	lui	a5,0xff000
8000653c:	00f777b3          	and	a5,a4,a5
80006540:	fcf42623          	sw	a5,-52(s0)
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
80006544:	fd042703          	lw	a4,-48(s0)
80006548:	010007b7          	lui	a5,0x1000
8000654c:	fff78793          	addi	a5,a5,-1 # ffffff <_HEAP_SIZE+0xffefff>
80006550:	00f777b3          	and	a5,a4,a5
80006554:	fcf42823          	sw	a5,-48(s0)

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
80006558:	fcc42703          	lw	a4,-52(s0)
8000655c:	040007b7          	lui	a5,0x4000
80006560:	00f777b3          	and	a5,a4,a5
80006564:	02079263          	bnez	a5,80006588 <xEventGroupSetBits+0x104>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
80006568:	fe042783          	lw	a5,-32(s0)
8000656c:	0007a703          	lw	a4,0(a5) # 4000000 <_HEAP_SIZE+0x3fff000>
80006570:	fd042783          	lw	a5,-48(s0)
80006574:	00f777b3          	and	a5,a4,a5
80006578:	02078863          	beqz	a5,800065a8 <xEventGroupSetBits+0x124>
				{
					xMatchFound = pdTRUE;
8000657c:	00100793          	li	a5,1
80006580:	fef42223          	sw	a5,-28(s0)
80006584:	0240006f          	j	800065a8 <xEventGroupSetBits+0x124>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
80006588:	fe042783          	lw	a5,-32(s0)
8000658c:	0007a703          	lw	a4,0(a5)
80006590:	fd042783          	lw	a5,-48(s0)
80006594:	00f777b3          	and	a5,a4,a5
80006598:	fd042703          	lw	a4,-48(s0)
8000659c:	00f71663          	bne	a4,a5,800065a8 <xEventGroupSetBits+0x124>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
800065a0:	00100793          	li	a5,1
800065a4:	fef42223          	sw	a5,-28(s0)
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
800065a8:	fe442783          	lw	a5,-28(s0)
800065ac:	04078063          	beqz	a5,800065ec <xEventGroupSetBits+0x168>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
800065b0:	fcc42703          	lw	a4,-52(s0)
800065b4:	010007b7          	lui	a5,0x1000
800065b8:	00f777b3          	and	a5,a4,a5
800065bc:	00078a63          	beqz	a5,800065d0 <xEventGroupSetBits+0x14c>
				{
					uxBitsToClear |= uxBitsWaitedFor;
800065c0:	fe842703          	lw	a4,-24(s0)
800065c4:	fd042783          	lw	a5,-48(s0)
800065c8:	00f767b3          	or	a5,a4,a5
800065cc:	fef42423          	sw	a5,-24(s0)
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
800065d0:	fe042783          	lw	a5,-32(s0)
800065d4:	0007a703          	lw	a4,0(a5) # 1000000 <_HEAP_SIZE+0xfff000>
800065d8:	020007b7          	lui	a5,0x2000
800065dc:	00f767b3          	or	a5,a4,a5
800065e0:	00078593          	mv	a1,a5
800065e4:	fec42503          	lw	a0,-20(s0)
800065e8:	da0fd0ef          	jal	ra,80003b88 <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
800065ec:	fd442783          	lw	a5,-44(s0)
800065f0:	fef42623          	sw	a5,-20(s0)
		while( pxListItem != pxListEnd )
800065f4:	fec42703          	lw	a4,-20(s0)
800065f8:	fd842783          	lw	a5,-40(s0)
800065fc:	f0f71ee3          	bne	a4,a5,80006518 <xEventGroupSetBits+0x94>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
80006600:	fe042783          	lw	a5,-32(s0)
80006604:	0007a703          	lw	a4,0(a5) # 2000000 <_HEAP_SIZE+0x1fff000>
80006608:	fe842783          	lw	a5,-24(s0)
8000660c:	fff7c793          	not	a5,a5
80006610:	00f77733          	and	a4,a4,a5
80006614:	fe042783          	lw	a5,-32(s0)
80006618:	00e7a023          	sw	a4,0(a5)
	}
	( void ) xTaskResumeAll();
8000661c:	901fc0ef          	jal	ra,80002f1c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
80006620:	fe042783          	lw	a5,-32(s0)
80006624:	0007a783          	lw	a5,0(a5)
}
80006628:	00078513          	mv	a0,a5
8000662c:	04c12083          	lw	ra,76(sp)
80006630:	04812403          	lw	s0,72(sp)
80006634:	05010113          	addi	sp,sp,80
80006638:	00008067          	ret

8000663c <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
8000663c:	fd010113          	addi	sp,sp,-48
80006640:	02112623          	sw	ra,44(sp)
80006644:	02812423          	sw	s0,40(sp)
80006648:	03010413          	addi	s0,sp,48
8000664c:	fca42e23          	sw	a0,-36(s0)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
80006650:	fdc42783          	lw	a5,-36(s0)
80006654:	fef42623          	sw	a5,-20(s0)
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
80006658:	fec42783          	lw	a5,-20(s0)
8000665c:	00478793          	addi	a5,a5,4
80006660:	fef42423          	sw	a5,-24(s0)

	vTaskSuspendAll();
80006664:	881fc0ef          	jal	ra,80002ee4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
80006668:	0340006f          	j	8000669c <vEventGroupDelete+0x60>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
8000666c:	fe842783          	lw	a5,-24(s0)
80006670:	00c7a703          	lw	a4,12(a5)
80006674:	fe842783          	lw	a5,-24(s0)
80006678:	00878793          	addi	a5,a5,8
8000667c:	00f71663          	bne	a4,a5,80006688 <vEventGroupDelete+0x4c>
80006680:	30007073          	csrci	mstatus,0
80006684:	0000006f          	j	80006684 <vEventGroupDelete+0x48>
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
80006688:	fe842783          	lw	a5,-24(s0)
8000668c:	00c7a783          	lw	a5,12(a5)
80006690:	020005b7          	lui	a1,0x2000
80006694:	00078513          	mv	a0,a5
80006698:	cf0fd0ef          	jal	ra,80003b88 <xTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
8000669c:	fe842783          	lw	a5,-24(s0)
800066a0:	0007a783          	lw	a5,0(a5)
800066a4:	fc0794e3          	bnez	a5,8000666c <vEventGroupDelete+0x30>
		}

		vPortFree( pxEventBits );
800066a8:	fec42503          	lw	a0,-20(s0)
800066ac:	34c000ef          	jal	ra,800069f8 <vPortFree>
	}
	( void ) xTaskResumeAll();
800066b0:	86dfc0ef          	jal	ra,80002f1c <xTaskResumeAll>
}
800066b4:	00000013          	nop
800066b8:	02c12083          	lw	ra,44(sp)
800066bc:	02812403          	lw	s0,40(sp)
800066c0:	03010113          	addi	sp,sp,48
800066c4:	00008067          	ret

800066c8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
800066c8:	fe010113          	addi	sp,sp,-32
800066cc:	00112e23          	sw	ra,28(sp)
800066d0:	00812c23          	sw	s0,24(sp)
800066d4:	02010413          	addi	s0,sp,32
800066d8:	fea42623          	sw	a0,-20(s0)
800066dc:	feb42423          	sw	a1,-24(s0)
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
800066e0:	fe842583          	lw	a1,-24(s0)
800066e4:	fec42503          	lw	a0,-20(s0)
800066e8:	d9dff0ef          	jal	ra,80006484 <xEventGroupSetBits>
}
800066ec:	00000013          	nop
800066f0:	01c12083          	lw	ra,28(sp)
800066f4:	01812403          	lw	s0,24(sp)
800066f8:	02010113          	addi	sp,sp,32
800066fc:	00008067          	ret

80006700 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
80006700:	fe010113          	addi	sp,sp,-32
80006704:	00112e23          	sw	ra,28(sp)
80006708:	00812c23          	sw	s0,24(sp)
8000670c:	02010413          	addi	s0,sp,32
80006710:	fea42623          	sw	a0,-20(s0)
80006714:	feb42423          	sw	a1,-24(s0)
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
80006718:	fe842583          	lw	a1,-24(s0)
8000671c:	fec42503          	lw	a0,-20(s0)
80006720:	c7dff0ef          	jal	ra,8000639c <xEventGroupClearBits>
}
80006724:	00000013          	nop
80006728:	01c12083          	lw	ra,28(sp)
8000672c:	01812403          	lw	s0,24(sp)
80006730:	02010113          	addi	sp,sp,32
80006734:	00008067          	ret

80006738 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
80006738:	fd010113          	addi	sp,sp,-48
8000673c:	02812623          	sw	s0,44(sp)
80006740:	03010413          	addi	s0,sp,48
80006744:	fca42e23          	sw	a0,-36(s0)
80006748:	fcb42c23          	sw	a1,-40(s0)
8000674c:	fcc42a23          	sw	a2,-44(s0)
BaseType_t xWaitConditionMet = pdFALSE;
80006750:	fe042623          	sw	zero,-20(s0)

	if( xWaitForAllBits == pdFALSE )
80006754:	fd442783          	lw	a5,-44(s0)
80006758:	02079063          	bnez	a5,80006778 <prvTestWaitCondition+0x40>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
8000675c:	fdc42703          	lw	a4,-36(s0)
80006760:	fd842783          	lw	a5,-40(s0)
80006764:	00f777b3          	and	a5,a4,a5
80006768:	02078663          	beqz	a5,80006794 <prvTestWaitCondition+0x5c>
		{
			xWaitConditionMet = pdTRUE;
8000676c:	00100793          	li	a5,1
80006770:	fef42623          	sw	a5,-20(s0)
80006774:	0200006f          	j	80006794 <prvTestWaitCondition+0x5c>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
80006778:	fdc42703          	lw	a4,-36(s0)
8000677c:	fd842783          	lw	a5,-40(s0)
80006780:	00f777b3          	and	a5,a4,a5
80006784:	fd842703          	lw	a4,-40(s0)
80006788:	00f71663          	bne	a4,a5,80006794 <prvTestWaitCondition+0x5c>
		{
			xWaitConditionMet = pdTRUE;
8000678c:	00100793          	li	a5,1
80006790:	fef42623          	sw	a5,-20(s0)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
80006794:	fec42783          	lw	a5,-20(s0)
}
80006798:	00078513          	mv	a0,a5
8000679c:	02c12403          	lw	s0,44(sp)
800067a0:	03010113          	addi	sp,sp,48
800067a4:	00008067          	ret

800067a8 <uxEventGroupGetNumber>:
/*-----------------------------------------------------------*/

#if (configUSE_TRACE_FACILITY == 1)

	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
	{
800067a8:	fd010113          	addi	sp,sp,-48
800067ac:	02812623          	sw	s0,44(sp)
800067b0:	03010413          	addi	s0,sp,48
800067b4:	fca42e23          	sw	a0,-36(s0)
	UBaseType_t xReturn;
	EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
800067b8:	fdc42783          	lw	a5,-36(s0)
800067bc:	fef42423          	sw	a5,-24(s0)

		if( xEventGroup == NULL )
800067c0:	fdc42783          	lw	a5,-36(s0)
800067c4:	00079663          	bnez	a5,800067d0 <uxEventGroupGetNumber+0x28>
		{
			xReturn = 0;
800067c8:	fe042623          	sw	zero,-20(s0)
800067cc:	0100006f          	j	800067dc <uxEventGroupGetNumber+0x34>
		}
		else
		{
			xReturn = pxEventBits->uxEventGroupNumber;
800067d0:	fe842783          	lw	a5,-24(s0)
800067d4:	0187a783          	lw	a5,24(a5)
800067d8:	fef42623          	sw	a5,-20(s0)
		}

		return xReturn;
800067dc:	fec42783          	lw	a5,-20(s0)
	}
800067e0:	00078513          	mv	a0,a5
800067e4:	02c12403          	lw	s0,44(sp)
800067e8:	03010113          	addi	sp,sp,48
800067ec:	00008067          	ret

800067f0 <pvPortMalloc>:
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
800067f0:	fc010113          	addi	sp,sp,-64
800067f4:	02112e23          	sw	ra,60(sp)
800067f8:	02812c23          	sw	s0,56(sp)
800067fc:	04010413          	addi	s0,sp,64
80006800:	fca42623          	sw	a0,-52(s0)
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
80006804:	fe042223          	sw	zero,-28(s0)

	vTaskSuspendAll();
80006808:	edcfc0ef          	jal	ra,80002ee4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
8000680c:	00034797          	auipc	a5,0x34
80006810:	17878793          	addi	a5,a5,376 # 8003a984 <xHeapHasBeenInitialised.2291>
80006814:	0007a783          	lw	a5,0(a5)
80006818:	00079c63          	bnez	a5,80006830 <pvPortMalloc+0x40>
		{
			prvHeapInit();
8000681c:	2f8000ef          	jal	ra,80006b14 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
80006820:	00034797          	auipc	a5,0x34
80006824:	16478793          	addi	a5,a5,356 # 8003a984 <xHeapHasBeenInitialised.2291>
80006828:	00100713          	li	a4,1
8000682c:	00e7a023          	sw	a4,0(a5)
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
80006830:	fcc42783          	lw	a5,-52(s0)
80006834:	02078a63          	beqz	a5,80006868 <pvPortMalloc+0x78>
		{
			xWantedSize += heapSTRUCT_SIZE;
80006838:	00800793          	li	a5,8
8000683c:	00078713          	mv	a4,a5
80006840:	fcc42783          	lw	a5,-52(s0)
80006844:	00e787b3          	add	a5,a5,a4
80006848:	fcf42623          	sw	a5,-52(s0)

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
8000684c:	fcc42783          	lw	a5,-52(s0)
80006850:	0037f793          	andi	a5,a5,3
80006854:	00078a63          	beqz	a5,80006868 <pvPortMalloc+0x78>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
80006858:	fcc42783          	lw	a5,-52(s0)
8000685c:	ffc7f793          	andi	a5,a5,-4
80006860:	00478793          	addi	a5,a5,4
80006864:	fcf42623          	sw	a5,-52(s0)
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
80006868:	fcc42783          	lw	a5,-52(s0)
8000686c:	16078263          	beqz	a5,800069d0 <pvPortMalloc+0x1e0>
80006870:	fcc42703          	lw	a4,-52(s0)
80006874:	000197b7          	lui	a5,0x19
80006878:	ffb78793          	addi	a5,a5,-5 # 18ffb <_HEAP_SIZE+0x17ffb>
8000687c:	14e7ea63          	bltu	a5,a4,800069d0 <pvPortMalloc+0x1e0>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
80006880:	00034797          	auipc	a5,0x34
80006884:	0f478793          	addi	a5,a5,244 # 8003a974 <xStart>
80006888:	fef42423          	sw	a5,-24(s0)
			pxBlock = xStart.pxNextFreeBlock;
8000688c:	00034797          	auipc	a5,0x34
80006890:	0e878793          	addi	a5,a5,232 # 8003a974 <xStart>
80006894:	0007a783          	lw	a5,0(a5)
80006898:	fef42623          	sw	a5,-20(s0)
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
8000689c:	0180006f          	j	800068b4 <pvPortMalloc+0xc4>
			{
				pxPreviousBlock = pxBlock;
800068a0:	fec42783          	lw	a5,-20(s0)
800068a4:	fef42423          	sw	a5,-24(s0)
				pxBlock = pxBlock->pxNextFreeBlock;
800068a8:	fec42783          	lw	a5,-20(s0)
800068ac:	0007a783          	lw	a5,0(a5)
800068b0:	fef42623          	sw	a5,-20(s0)
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
800068b4:	fec42783          	lw	a5,-20(s0)
800068b8:	0047a783          	lw	a5,4(a5)
800068bc:	fcc42703          	lw	a4,-52(s0)
800068c0:	00e7f863          	bleu	a4,a5,800068d0 <pvPortMalloc+0xe0>
800068c4:	fec42783          	lw	a5,-20(s0)
800068c8:	0007a783          	lw	a5,0(a5)
800068cc:	fc079ae3          	bnez	a5,800068a0 <pvPortMalloc+0xb0>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
800068d0:	fec42703          	lw	a4,-20(s0)
800068d4:	00034797          	auipc	a5,0x34
800068d8:	0a878793          	addi	a5,a5,168 # 8003a97c <xEnd>
800068dc:	0ef70a63          	beq	a4,a5,800069d0 <pvPortMalloc+0x1e0>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
800068e0:	fe842783          	lw	a5,-24(s0)
800068e4:	0007a783          	lw	a5,0(a5)
800068e8:	00800713          	li	a4,8
800068ec:	00e787b3          	add	a5,a5,a4
800068f0:	fef42223          	sw	a5,-28(s0)

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
800068f4:	fec42783          	lw	a5,-20(s0)
800068f8:	0007a703          	lw	a4,0(a5)
800068fc:	fe842783          	lw	a5,-24(s0)
80006900:	00e7a023          	sw	a4,0(a5)

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
80006904:	fec42783          	lw	a5,-20(s0)
80006908:	0047a703          	lw	a4,4(a5)
8000690c:	fcc42783          	lw	a5,-52(s0)
80006910:	40f707b3          	sub	a5,a4,a5
80006914:	00800713          	li	a4,8
80006918:	00171713          	slli	a4,a4,0x1
8000691c:	08f77863          	bleu	a5,a4,800069ac <pvPortMalloc+0x1bc>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
80006920:	fec42703          	lw	a4,-20(s0)
80006924:	fcc42783          	lw	a5,-52(s0)
80006928:	00f707b3          	add	a5,a4,a5
8000692c:	fcf42e23          	sw	a5,-36(s0)

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
80006930:	fec42783          	lw	a5,-20(s0)
80006934:	0047a703          	lw	a4,4(a5)
80006938:	fcc42783          	lw	a5,-52(s0)
8000693c:	40f70733          	sub	a4,a4,a5
80006940:	fdc42783          	lw	a5,-36(s0)
80006944:	00e7a223          	sw	a4,4(a5)
					pxBlock->xBlockSize = xWantedSize;
80006948:	fec42783          	lw	a5,-20(s0)
8000694c:	fcc42703          	lw	a4,-52(s0)
80006950:	00e7a223          	sw	a4,4(a5)

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
80006954:	fdc42783          	lw	a5,-36(s0)
80006958:	0047a783          	lw	a5,4(a5)
8000695c:	fcf42c23          	sw	a5,-40(s0)
80006960:	00034797          	auipc	a5,0x34
80006964:	01478793          	addi	a5,a5,20 # 8003a974 <xStart>
80006968:	fef42023          	sw	a5,-32(s0)
8000696c:	0100006f          	j	8000697c <pvPortMalloc+0x18c>
80006970:	fe042783          	lw	a5,-32(s0)
80006974:	0007a783          	lw	a5,0(a5)
80006978:	fef42023          	sw	a5,-32(s0)
8000697c:	fe042783          	lw	a5,-32(s0)
80006980:	0007a783          	lw	a5,0(a5)
80006984:	0047a783          	lw	a5,4(a5)
80006988:	fd842703          	lw	a4,-40(s0)
8000698c:	fee7e2e3          	bltu	a5,a4,80006970 <pvPortMalloc+0x180>
80006990:	fe042783          	lw	a5,-32(s0)
80006994:	0007a703          	lw	a4,0(a5)
80006998:	fdc42783          	lw	a5,-36(s0)
8000699c:	00e7a023          	sw	a4,0(a5)
800069a0:	fe042783          	lw	a5,-32(s0)
800069a4:	fdc42703          	lw	a4,-36(s0)
800069a8:	00e7a023          	sw	a4,0(a5)
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
800069ac:	0001a797          	auipc	a5,0x1a
800069b0:	4ac78793          	addi	a5,a5,1196 # 80020e58 <xFreeBytesRemaining>
800069b4:	0007a703          	lw	a4,0(a5)
800069b8:	fec42783          	lw	a5,-20(s0)
800069bc:	0047a783          	lw	a5,4(a5)
800069c0:	40f70733          	sub	a4,a4,a5
800069c4:	0001a797          	auipc	a5,0x1a
800069c8:	49478793          	addi	a5,a5,1172 # 80020e58 <xFreeBytesRemaining>
800069cc:	00e7a023          	sw	a4,0(a5)
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
800069d0:	d4cfc0ef          	jal	ra,80002f1c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
800069d4:	fe442783          	lw	a5,-28(s0)
800069d8:	00079463          	bnez	a5,800069e0 <pvPortMalloc+0x1f0>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
800069dc:	730000ef          	jal	ra,8000710c <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
800069e0:	fe442783          	lw	a5,-28(s0)
}
800069e4:	00078513          	mv	a0,a5
800069e8:	03c12083          	lw	ra,60(sp)
800069ec:	03812403          	lw	s0,56(sp)
800069f0:	04010113          	addi	sp,sp,64
800069f4:	00008067          	ret

800069f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
800069f8:	fd010113          	addi	sp,sp,-48
800069fc:	02112623          	sw	ra,44(sp)
80006a00:	02812423          	sw	s0,40(sp)
80006a04:	03010413          	addi	s0,sp,48
80006a08:	fca42e23          	sw	a0,-36(s0)
uint8_t *puc = ( uint8_t * ) pv;
80006a0c:	fdc42783          	lw	a5,-36(s0)
80006a10:	fef42423          	sw	a5,-24(s0)
BlockLink_t *pxLink;

	if( pv != NULL )
80006a14:	fdc42783          	lw	a5,-36(s0)
80006a18:	0a078263          	beqz	a5,80006abc <vPortFree+0xc4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
80006a1c:	00800793          	li	a5,8
80006a20:	40f007b3          	neg	a5,a5
80006a24:	fe842703          	lw	a4,-24(s0)
80006a28:	00f707b3          	add	a5,a4,a5
80006a2c:	fef42423          	sw	a5,-24(s0)

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
80006a30:	fe842783          	lw	a5,-24(s0)
80006a34:	fef42223          	sw	a5,-28(s0)

		vTaskSuspendAll();
80006a38:	cacfc0ef          	jal	ra,80002ee4 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
80006a3c:	fe442783          	lw	a5,-28(s0)
80006a40:	0047a783          	lw	a5,4(a5)
80006a44:	fef42023          	sw	a5,-32(s0)
80006a48:	00034797          	auipc	a5,0x34
80006a4c:	f2c78793          	addi	a5,a5,-212 # 8003a974 <xStart>
80006a50:	fef42623          	sw	a5,-20(s0)
80006a54:	0100006f          	j	80006a64 <vPortFree+0x6c>
80006a58:	fec42783          	lw	a5,-20(s0)
80006a5c:	0007a783          	lw	a5,0(a5)
80006a60:	fef42623          	sw	a5,-20(s0)
80006a64:	fec42783          	lw	a5,-20(s0)
80006a68:	0007a783          	lw	a5,0(a5)
80006a6c:	0047a783          	lw	a5,4(a5)
80006a70:	fe042703          	lw	a4,-32(s0)
80006a74:	fee7e2e3          	bltu	a5,a4,80006a58 <vPortFree+0x60>
80006a78:	fec42783          	lw	a5,-20(s0)
80006a7c:	0007a703          	lw	a4,0(a5)
80006a80:	fe442783          	lw	a5,-28(s0)
80006a84:	00e7a023          	sw	a4,0(a5)
80006a88:	fec42783          	lw	a5,-20(s0)
80006a8c:	fe442703          	lw	a4,-28(s0)
80006a90:	00e7a023          	sw	a4,0(a5)
			xFreeBytesRemaining += pxLink->xBlockSize;
80006a94:	fe442783          	lw	a5,-28(s0)
80006a98:	0047a703          	lw	a4,4(a5)
80006a9c:	0001a797          	auipc	a5,0x1a
80006aa0:	3bc78793          	addi	a5,a5,956 # 80020e58 <xFreeBytesRemaining>
80006aa4:	0007a783          	lw	a5,0(a5)
80006aa8:	00f70733          	add	a4,a4,a5
80006aac:	0001a797          	auipc	a5,0x1a
80006ab0:	3ac78793          	addi	a5,a5,940 # 80020e58 <xFreeBytesRemaining>
80006ab4:	00e7a023          	sw	a4,0(a5)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
80006ab8:	c64fc0ef          	jal	ra,80002f1c <xTaskResumeAll>
	}
}
80006abc:	00000013          	nop
80006ac0:	02c12083          	lw	ra,44(sp)
80006ac4:	02812403          	lw	s0,40(sp)
80006ac8:	03010113          	addi	sp,sp,48
80006acc:	00008067          	ret

80006ad0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
80006ad0:	ff010113          	addi	sp,sp,-16
80006ad4:	00812623          	sw	s0,12(sp)
80006ad8:	01010413          	addi	s0,sp,16
	return xFreeBytesRemaining;
80006adc:	0001a797          	auipc	a5,0x1a
80006ae0:	37c78793          	addi	a5,a5,892 # 80020e58 <xFreeBytesRemaining>
80006ae4:	0007a783          	lw	a5,0(a5)
}
80006ae8:	00078513          	mv	a0,a5
80006aec:	00c12403          	lw	s0,12(sp)
80006af0:	01010113          	addi	sp,sp,16
80006af4:	00008067          	ret

80006af8 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
80006af8:	ff010113          	addi	sp,sp,-16
80006afc:	00812623          	sw	s0,12(sp)
80006b00:	01010413          	addi	s0,sp,16
	/* This just exists to keep the linker quiet. */
}
80006b04:	00000013          	nop
80006b08:	00c12403          	lw	s0,12(sp)
80006b0c:	01010113          	addi	sp,sp,16
80006b10:	00008067          	ret

80006b14 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
80006b14:	fe010113          	addi	sp,sp,-32
80006b18:	00812e23          	sw	s0,28(sp)
80006b1c:	02010413          	addi	s0,sp,32
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
80006b20:	0001b797          	auipc	a5,0x1b
80006b24:	e5878793          	addi	a5,a5,-424 # 80021978 <ucHeap+0x4>
80006b28:	ffc7f793          	andi	a5,a5,-4
80006b2c:	fef42623          	sw	a5,-20(s0)

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
80006b30:	00034797          	auipc	a5,0x34
80006b34:	e4478793          	addi	a5,a5,-444 # 8003a974 <xStart>
80006b38:	fec42703          	lw	a4,-20(s0)
80006b3c:	00e7a023          	sw	a4,0(a5)
	xStart.xBlockSize = ( size_t ) 0;
80006b40:	00034797          	auipc	a5,0x34
80006b44:	e3478793          	addi	a5,a5,-460 # 8003a974 <xStart>
80006b48:	0007a223          	sw	zero,4(a5)

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
80006b4c:	00034797          	auipc	a5,0x34
80006b50:	e3078793          	addi	a5,a5,-464 # 8003a97c <xEnd>
80006b54:	00019737          	lui	a4,0x19
80006b58:	ffc70713          	addi	a4,a4,-4 # 18ffc <_HEAP_SIZE+0x17ffc>
80006b5c:	00e7a223          	sw	a4,4(a5)
	xEnd.pxNextFreeBlock = NULL;
80006b60:	00034797          	auipc	a5,0x34
80006b64:	e1c78793          	addi	a5,a5,-484 # 8003a97c <xEnd>
80006b68:	0007a023          	sw	zero,0(a5)

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
80006b6c:	fec42783          	lw	a5,-20(s0)
80006b70:	fef42423          	sw	a5,-24(s0)
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
80006b74:	fe842783          	lw	a5,-24(s0)
80006b78:	00019737          	lui	a4,0x19
80006b7c:	ffc70713          	addi	a4,a4,-4 # 18ffc <_HEAP_SIZE+0x17ffc>
80006b80:	00e7a223          	sw	a4,4(a5)
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
80006b84:	fe842783          	lw	a5,-24(s0)
80006b88:	00034717          	auipc	a4,0x34
80006b8c:	df470713          	addi	a4,a4,-524 # 8003a97c <xEnd>
80006b90:	00e7a023          	sw	a4,0(a5)
}
80006b94:	00000013          	nop
80006b98:	01c12403          	lw	s0,28(sp)
80006b9c:	02010113          	addi	sp,sp,32
80006ba0:	00008067          	ret

80006ba4 <_sbrk>:
int _kill(int pid,int sig);
int _getpid(int n);
unsigned long ulSyscallTrap(long cause, long epc, long regs[32] __attribute__((unused)));

void* _sbrk (int nbytes)
{
80006ba4:	fe010113          	addi	sp,sp,-32
80006ba8:	00112e23          	sw	ra,28(sp)
80006bac:	00812c23          	sw	s0,24(sp)
80006bb0:	02010413          	addi	s0,sp,32
80006bb4:	fea42623          	sw	a0,-20(s0)
  (void)nbytes;
  errno = ENOMEM;
80006bb8:	17d010ef          	jal	ra,80008534 <__errno>
80006bbc:	00050713          	mv	a4,a0
80006bc0:	00c00793          	li	a5,12
80006bc4:	00f72023          	sw	a5,0(a4)
  return  (void *) -1;
80006bc8:	fff00793          	li	a5,-1
}
80006bcc:	00078513          	mv	a0,a5
80006bd0:	01c12083          	lw	ra,28(sp)
80006bd4:	01812403          	lw	s0,24(sp)
80006bd8:	02010113          	addi	sp,sp,32
80006bdc:	00008067          	ret

80006be0 <_write>:


int _write(int file, char *ptr, int len) {
80006be0:	fd010113          	addi	sp,sp,-48
80006be4:	02112623          	sw	ra,44(sp)
80006be8:	02812423          	sw	s0,40(sp)
80006bec:	03010413          	addi	s0,sp,48
80006bf0:	fca42e23          	sw	a0,-36(s0)
80006bf4:	fcb42c23          	sw	a1,-40(s0)
80006bf8:	fcc42a23          	sw	a2,-44(s0)
  int todo;
  (void)file;
//#ifdef CONSOLE_UART
  for (todo = 0; todo < len; todo++) {
80006bfc:	fe042623          	sw	zero,-20(s0)
80006c00:	0280006f          	j	80006c28 <_write+0x48>
    ns16550_txchar (*ptr++);
80006c04:	fd842783          	lw	a5,-40(s0)
80006c08:	00178713          	addi	a4,a5,1
80006c0c:	fce42c23          	sw	a4,-40(s0)
80006c10:	0007c783          	lbu	a5,0(a5)
80006c14:	00078513          	mv	a0,a5
80006c18:	380000ef          	jal	ra,80006f98 <ns16550_txchar>
  for (todo = 0; todo < len; todo++) {
80006c1c:	fec42783          	lw	a5,-20(s0)
80006c20:	00178793          	addi	a5,a5,1
80006c24:	fef42623          	sw	a5,-20(s0)
80006c28:	fec42703          	lw	a4,-20(s0)
80006c2c:	fd442783          	lw	a5,-44(s0)
80006c30:	fcf74ae3          	blt	a4,a5,80006c04 <_write+0x24>
  }
//#endif
  return len;
80006c34:	fd442783          	lw	a5,-44(s0)
}
80006c38:	00078513          	mv	a0,a5
80006c3c:	02c12083          	lw	ra,44(sp)
80006c40:	02812403          	lw	s0,40(sp)
80006c44:	03010113          	addi	sp,sp,48
80006c48:	00008067          	ret

80006c4c <_close>:

int _close(int fd)
{
80006c4c:	fe010113          	addi	sp,sp,-32
80006c50:	00112e23          	sw	ra,28(sp)
80006c54:	00812c23          	sw	s0,24(sp)
80006c58:	02010413          	addi	s0,sp,32
80006c5c:	fea42623          	sw	a0,-20(s0)
  (void)fd;
  errno = EBADF;
80006c60:	0d5010ef          	jal	ra,80008534 <__errno>
80006c64:	00050713          	mv	a4,a0
80006c68:	00900793          	li	a5,9
80006c6c:	00f72023          	sw	a5,0(a4)
  return -1;
80006c70:	fff00793          	li	a5,-1
}
80006c74:	00078513          	mv	a0,a5
80006c78:	01c12083          	lw	ra,28(sp)
80006c7c:	01812403          	lw	s0,24(sp)
80006c80:	02010113          	addi	sp,sp,32
80006c84:	00008067          	ret

80006c88 <_lseek>:

long _lseek(int fd,long offset,int origin)
{
80006c88:	fe010113          	addi	sp,sp,-32
80006c8c:	00112e23          	sw	ra,28(sp)
80006c90:	00812c23          	sw	s0,24(sp)
80006c94:	02010413          	addi	s0,sp,32
80006c98:	fea42623          	sw	a0,-20(s0)
80006c9c:	feb42423          	sw	a1,-24(s0)
80006ca0:	fec42223          	sw	a2,-28(s0)
  (void)fd;
  (void)offset;
  (void)origin;
  errno = EBADF;
80006ca4:	091010ef          	jal	ra,80008534 <__errno>
80006ca8:	00050713          	mv	a4,a0
80006cac:	00900793          	li	a5,9
80006cb0:	00f72023          	sw	a5,0(a4)
  return -1;
80006cb4:	fff00793          	li	a5,-1
}
80006cb8:	00078513          	mv	a0,a5
80006cbc:	01c12083          	lw	ra,28(sp)
80006cc0:	01812403          	lw	s0,24(sp)
80006cc4:	02010113          	addi	sp,sp,32
80006cc8:	00008067          	ret

80006ccc <_read>:

int _read(int fd,void *buffer,unsigned int count)
{
80006ccc:	fe010113          	addi	sp,sp,-32
80006cd0:	00112e23          	sw	ra,28(sp)
80006cd4:	00812c23          	sw	s0,24(sp)
80006cd8:	02010413          	addi	s0,sp,32
80006cdc:	fea42623          	sw	a0,-20(s0)
80006ce0:	feb42423          	sw	a1,-24(s0)
80006ce4:	fec42223          	sw	a2,-28(s0)
  (void)fd;
  (void)buffer;
  (void)count;
  errno = EBADF;
80006ce8:	04d010ef          	jal	ra,80008534 <__errno>
80006cec:	00050713          	mv	a4,a0
80006cf0:	00900793          	li	a5,9
80006cf4:	00f72023          	sw	a5,0(a4)
  return -1;
80006cf8:	fff00793          	li	a5,-1
}
80006cfc:	00078513          	mv	a0,a5
80006d00:	01c12083          	lw	ra,28(sp)
80006d04:	01812403          	lw	s0,24(sp)
80006d08:	02010113          	addi	sp,sp,32
80006d0c:	00008067          	ret

80006d10 <_fstat>:

int _fstat(int fd, void *buffer)
{
80006d10:	fe010113          	addi	sp,sp,-32
80006d14:	00112e23          	sw	ra,28(sp)
80006d18:	00812c23          	sw	s0,24(sp)
80006d1c:	02010413          	addi	s0,sp,32
80006d20:	fea42623          	sw	a0,-20(s0)
80006d24:	feb42423          	sw	a1,-24(s0)
  (void)fd;
  (void)buffer;
  errno = EBADF;
80006d28:	00d010ef          	jal	ra,80008534 <__errno>
80006d2c:	00050713          	mv	a4,a0
80006d30:	00900793          	li	a5,9
80006d34:	00f72023          	sw	a5,0(a4)
  return -1;
80006d38:	fff00793          	li	a5,-1
}
80006d3c:	00078513          	mv	a0,a5
80006d40:	01c12083          	lw	ra,28(sp)
80006d44:	01812403          	lw	s0,24(sp)
80006d48:	02010113          	addi	sp,sp,32
80006d4c:	00008067          	ret

80006d50 <_isatty>:

int _isatty(int fd)
{
80006d50:	fe010113          	addi	sp,sp,-32
80006d54:	00112e23          	sw	ra,28(sp)
80006d58:	00812c23          	sw	s0,24(sp)
80006d5c:	02010413          	addi	s0,sp,32
80006d60:	fea42623          	sw	a0,-20(s0)
  (void)fd;
  errno = EBADF;
80006d64:	7d0010ef          	jal	ra,80008534 <__errno>
80006d68:	00050713          	mv	a4,a0
80006d6c:	00900793          	li	a5,9
80006d70:	00f72023          	sw	a5,0(a4)
  return 0;
80006d74:	00000793          	li	a5,0
}
80006d78:	00078513          	mv	a0,a5
80006d7c:	01c12083          	lw	ra,28(sp)
80006d80:	01812403          	lw	s0,24(sp)
80006d84:	02010113          	addi	sp,sp,32
80006d88:	00008067          	ret

80006d8c <_kill>:

int _kill(int pid,int sig)
{
80006d8c:	fe010113          	addi	sp,sp,-32
80006d90:	00112e23          	sw	ra,28(sp)
80006d94:	00812c23          	sw	s0,24(sp)
80006d98:	02010413          	addi	s0,sp,32
80006d9c:	fea42623          	sw	a0,-20(s0)
80006da0:	feb42423          	sw	a1,-24(s0)
  (void)pid;
  (void)sig;
  errno = EBADF;
80006da4:	790010ef          	jal	ra,80008534 <__errno>
80006da8:	00050713          	mv	a4,a0
80006dac:	00900793          	li	a5,9
80006db0:	00f72023          	sw	a5,0(a4)
  return -1;
80006db4:	fff00793          	li	a5,-1
}
80006db8:	00078513          	mv	a0,a5
80006dbc:	01c12083          	lw	ra,28(sp)
80006dc0:	01812403          	lw	s0,24(sp)
80006dc4:	02010113          	addi	sp,sp,32
80006dc8:	00008067          	ret

80006dcc <_getpid>:

int _getpid(int n)
{
80006dcc:	fe010113          	addi	sp,sp,-32
80006dd0:	00812e23          	sw	s0,28(sp)
80006dd4:	02010413          	addi	s0,sp,32
80006dd8:	fea42623          	sw	a0,-20(s0)
  (void)n;
  return 1;
80006ddc:	00100793          	li	a5,1
}
80006de0:	00078513          	mv	a0,a5
80006de4:	01c12403          	lw	s0,28(sp)
80006de8:	02010113          	addi	sp,sp,32
80006dec:	00008067          	ret

80006df0 <ulSyscallTrap>:


/* Syscall handeler */
// does currently nothing - keep this to handle system calls in the future
unsigned long ulSyscallTrap(long cause, long epc, long regs[32] __attribute__((unused)))
{
80006df0:	fe010113          	addi	sp,sp,-32
80006df4:	00812e23          	sw	s0,28(sp)
80006df8:	02010413          	addi	s0,sp,32
80006dfc:	fea42623          	sw	a0,-20(s0)
80006e00:	feb42423          	sw	a1,-24(s0)
80006e04:	fec42223          	sw	a2,-28(s0)
	(void)cause;
	(void)epc;

	// infinite loop, just so we know we caused a syscall
	for(;;) { } // TODO: replace with a proper handler
80006e08:	0000006f          	j	80006e08 <ulSyscallTrap+0x18>

80006e0c <ns16550_init>:
static struct ns16550_pio * pio = (void*)NS16550_BASE;

#ifdef CONSOLE_UART
__attribute__ ((constructor))
int ns16550_init(void)
{
80006e0c:	fe010113          	addi	sp,sp,-32
80006e10:	00812e23          	sw	s0,28(sp)
80006e14:	02010413          	addi	s0,sp,32
  uint32_t divisor;

  pio->ier = 0;
80006e18:	0001a797          	auipc	a5,0x1a
80006e1c:	04478793          	addi	a5,a5,68 # 80020e5c <pio>
80006e20:	0007a783          	lw	a5,0(a5)
80006e24:	00078423          	sb	zero,8(a5)

  divisor = NS16550_CLOCK_RATE / (16 * DEFAULT_BAUDRATE);
80006e28:	01a00793          	li	a5,26
80006e2c:	fef42623          	sw	a5,-20(s0)
  pio->lcr |= LCR_DLAB;
80006e30:	0001a797          	auipc	a5,0x1a
80006e34:	02c78793          	addi	a5,a5,44 # 80020e5c <pio>
80006e38:	0007a783          	lw	a5,0(a5)
80006e3c:	0187c783          	lbu	a5,24(a5)
80006e40:	0ff7f713          	andi	a4,a5,255
80006e44:	0001a797          	auipc	a5,0x1a
80006e48:	01878793          	addi	a5,a5,24 # 80020e5c <pio>
80006e4c:	0007a783          	lw	a5,0(a5)
80006e50:	f8076713          	ori	a4,a4,-128
80006e54:	0ff77713          	andi	a4,a4,255
80006e58:	00e78c23          	sb	a4,24(a5)
  pio->dll = divisor & 0xff;
80006e5c:	0001a797          	auipc	a5,0x1a
80006e60:	00078793          	mv	a5,a5
80006e64:	0007a783          	lw	a5,0(a5) # 80020e5c <pio>
80006e68:	fec42703          	lw	a4,-20(s0)
80006e6c:	0ff77713          	andi	a4,a4,255
80006e70:	00e78023          	sb	a4,0(a5)
  pio->dlm = (divisor >> 8) & 0xff;
80006e74:	fec42783          	lw	a5,-20(s0)
80006e78:	0087d713          	srli	a4,a5,0x8
80006e7c:	0001a797          	auipc	a5,0x1a
80006e80:	fe078793          	addi	a5,a5,-32 # 80020e5c <pio>
80006e84:	0007a783          	lw	a5,0(a5)
80006e88:	0ff77713          	andi	a4,a4,255
80006e8c:	00e78423          	sb	a4,8(a5)
  pio->lcr &= ~LCR_DLAB;
80006e90:	0001a797          	auipc	a5,0x1a
80006e94:	fcc78793          	addi	a5,a5,-52 # 80020e5c <pio>
80006e98:	0007a783          	lw	a5,0(a5)
80006e9c:	0187c783          	lbu	a5,24(a5)
80006ea0:	0ff7f713          	andi	a4,a5,255
80006ea4:	0001a797          	auipc	a5,0x1a
80006ea8:	fb878793          	addi	a5,a5,-72 # 80020e5c <pio>
80006eac:	0007a783          	lw	a5,0(a5)
80006eb0:	07f77713          	andi	a4,a4,127
80006eb4:	0ff77713          	andi	a4,a4,255
80006eb8:	00e78c23          	sb	a4,24(a5)

  pio->lcr = LCR_WLS8;
80006ebc:	0001a797          	auipc	a5,0x1a
80006ec0:	fa078793          	addi	a5,a5,-96 # 80020e5c <pio>
80006ec4:	0007a783          	lw	a5,0(a5)
80006ec8:	00300713          	li	a4,3
80006ecc:	00e78c23          	sb	a4,24(a5)
  pio->fcr = FCR_FE;
80006ed0:	0001a797          	auipc	a5,0x1a
80006ed4:	f8c78793          	addi	a5,a5,-116 # 80020e5c <pio>
80006ed8:	0007a783          	lw	a5,0(a5)
80006edc:	00100713          	li	a4,1
80006ee0:	00e78823          	sb	a4,16(a5)
  pio->mcr = MCR_RTS;
80006ee4:	0001a797          	auipc	a5,0x1a
80006ee8:	f7878793          	addi	a5,a5,-136 # 80020e5c <pio>
80006eec:	0007a783          	lw	a5,0(a5)
80006ef0:	00200713          	li	a4,2
80006ef4:	02e78023          	sb	a4,32(a5)

  return 0;
80006ef8:	00000793          	li	a5,0
}
80006efc:	00078513          	mv	a0,a5
80006f00:	01c12403          	lw	s0,28(sp)
80006f04:	02010113          	addi	sp,sp,32
80006f08:	00008067          	ret

80006f0c <ns16550_rxready>:
#endif


int ns16550_rxready(void)
{
80006f0c:	ff010113          	addi	sp,sp,-16
80006f10:	00812623          	sw	s0,12(sp)
80006f14:	01010413          	addi	s0,sp,16
  return ((pio->lsr & LSR_DR) != 0);
80006f18:	0001a797          	auipc	a5,0x1a
80006f1c:	f4478793          	addi	a5,a5,-188 # 80020e5c <pio>
80006f20:	0007a783          	lw	a5,0(a5)
80006f24:	0287c783          	lbu	a5,40(a5)
80006f28:	0ff7f793          	andi	a5,a5,255
80006f2c:	0017f793          	andi	a5,a5,1
80006f30:	00f037b3          	snez	a5,a5
80006f34:	0ff7f793          	andi	a5,a5,255
}
80006f38:	00078513          	mv	a0,a5
80006f3c:	00c12403          	lw	s0,12(sp)
80006f40:	01010113          	addi	sp,sp,16
80006f44:	00008067          	ret

80006f48 <ns16550_rxchar>:


int ns16550_rxchar(void)
{
80006f48:	ff010113          	addi	sp,sp,-16
80006f4c:	00812623          	sw	s0,12(sp)
80006f50:	01010413          	addi	s0,sp,16
  while ((pio->lsr & LSR_DR) == 0)
80006f54:	00000013          	nop
80006f58:	0001a797          	auipc	a5,0x1a
80006f5c:	f0478793          	addi	a5,a5,-252 # 80020e5c <pio>
80006f60:	0007a783          	lw	a5,0(a5)
80006f64:	0287c783          	lbu	a5,40(a5)
80006f68:	0ff7f793          	andi	a5,a5,255
80006f6c:	0017f793          	andi	a5,a5,1
80006f70:	fe0784e3          	beqz	a5,80006f58 <ns16550_rxchar+0x10>
    ;  // nothing

  return pio->rbr;
80006f74:	0001a797          	auipc	a5,0x1a
80006f78:	ee878793          	addi	a5,a5,-280 # 80020e5c <pio>
80006f7c:	0007a783          	lw	a5,0(a5)
80006f80:	0007c783          	lbu	a5,0(a5)
80006f84:	0ff7f793          	andi	a5,a5,255
}
80006f88:	00078513          	mv	a0,a5
80006f8c:	00c12403          	lw	s0,12(sp)
80006f90:	01010113          	addi	sp,sp,16
80006f94:	00008067          	ret

80006f98 <ns16550_txchar>:


int ns16550_txchar(int c)
{
80006f98:	fe010113          	addi	sp,sp,-32
80006f9c:	00812e23          	sw	s0,28(sp)
80006fa0:	02010413          	addi	s0,sp,32
80006fa4:	fea42623          	sw	a0,-20(s0)
  while ((pio->lsr & LSR_THRE) == 0)
80006fa8:	00000013          	nop
80006fac:	0001a797          	auipc	a5,0x1a
80006fb0:	eb078793          	addi	a5,a5,-336 # 80020e5c <pio>
80006fb4:	0007a783          	lw	a5,0(a5)
80006fb8:	0287c783          	lbu	a5,40(a5)
80006fbc:	0ff7f793          	andi	a5,a5,255
80006fc0:	0207f793          	andi	a5,a5,32
80006fc4:	fe0784e3          	beqz	a5,80006fac <ns16550_txchar+0x14>
    ;  // nothing

  pio->thr = c;
80006fc8:	0001a797          	auipc	a5,0x1a
80006fcc:	e9478793          	addi	a5,a5,-364 # 80020e5c <pio>
80006fd0:	0007a783          	lw	a5,0(a5)
80006fd4:	fec42703          	lw	a4,-20(s0)
80006fd8:	0ff77713          	andi	a4,a4,255
80006fdc:	00e78023          	sb	a4,0(a5)

  return c;
80006fe0:	fec42783          	lw	a5,-20(s0)
}
80006fe4:	00078513          	mv	a0,a5
80006fe8:	01c12403          	lw	s0,28(sp)
80006fec:	02010113          	addi	sp,sp,32
80006ff0:	00008067          	ret

80006ff4 <ns16550_flush>:


void ns16550_flush(void)
{
80006ff4:	ff010113          	addi	sp,sp,-16
80006ff8:	00812623          	sw	s0,12(sp)
80006ffc:	01010413          	addi	s0,sp,16
  while ((pio->lsr & LSR_TEMT) == 0)
80007000:	00000013          	nop
80007004:	0001a797          	auipc	a5,0x1a
80007008:	e5878793          	addi	a5,a5,-424 # 80020e5c <pio>
8000700c:	0007a783          	lw	a5,0(a5)
80007010:	0287c783          	lbu	a5,40(a5)
80007014:	0ff7f793          	andi	a5,a5,255
80007018:	0407f793          	andi	a5,a5,64
8000701c:	fe0784e3          	beqz	a5,80007004 <ns16550_flush+0x10>
    ;  // nothing
}
80007020:	00000013          	nop
80007024:	00c12403          	lw	s0,12(sp)
80007028:	01010113          	addi	sp,sp,16
8000702c:	00008067          	ret

80007030 <main>:
/*-----------------------------------------------------------*/
//volatile int wait = 1;


int main( void )
{
80007030:	fe010113          	addi	sp,sp,-32
80007034:	00112e23          	sw	ra,28(sp)
80007038:	00812c23          	sw	s0,24(sp)
8000703c:	02010413          	addi	s0,sp,32
TimerHandle_t xCheckTimer = NULL;
80007040:	fe042623          	sw	zero,-20(s0)

	ns16550_init();
80007044:	dc9ff0ef          	jal	ra,80006e0c <ns16550_init>
	//vStartCountingSemaphoreTasks();
	//vStartRecursiveMutexTasks();

	/* Create the software timer that performs the 'check' functionality,
	as described at the top of this file. */
	xCheckTimer = xTimerCreate( "CheckTimer",					/* A text name, purely to help debugging. */
80007048:	00000717          	auipc	a4,0x0
8000704c:	06c70713          	addi	a4,a4,108 # 800070b4 <prvCheckTimerCallback>
80007050:	00000693          	li	a3,0
80007054:	00100613          	li	a2,1
80007058:	000017b7          	lui	a5,0x1
8000705c:	bb878593          	addi	a1,a5,-1096 # bb8 <_HEAP_SIZE-0x448>
80007060:	00019517          	auipc	a0,0x19
80007064:	00850513          	addi	a0,a0,8 # 80020068 <__rodata_start+0x68>
80007068:	c34fe0ef          	jal	ra,8000549c <xTimerCreate>
8000706c:	fea42623          	sw	a0,-20(s0)

	/* If the software timer was created successfully, start it.  It won't
	actually start running until the scheduler starts.  A block time of
	zero is used in this call, although any value could be used as the block
	time will be ignored because the scheduler has not started yet. */
	if( xCheckTimer != NULL )
80007070:	fec42783          	lw	a5,-20(s0)
80007074:	02078263          	beqz	a5,80007098 <main+0x68>
	{
		xTimerStart( xCheckTimer, mainDONT_BLOCK );
80007078:	880fc0ef          	jal	ra,800030f8 <xTaskGetTickCount>
8000707c:	00050793          	mv	a5,a0
80007080:	00000713          	li	a4,0
80007084:	00000693          	li	a3,0
80007088:	00078613          	mv	a2,a5
8000708c:	00100593          	li	a1,1
80007090:	fec42503          	lw	a0,-20(s0)
80007094:	cc8fe0ef          	jal	ra,8000555c <xTimerGenericCommand>
	}


	/* Start the kernel.  From here on, only tasks and interrupts will run. */
	vTaskStartScheduler();
80007098:	d59fb0ef          	jal	ra,80002df0 <vTaskStartScheduler>

	/* Exit FreeRTOS */
	return 0;
8000709c:	00000793          	li	a5,0
}
800070a0:	00078513          	mv	a0,a5
800070a4:	01c12083          	lw	ra,28(sp)
800070a8:	01812403          	lw	s0,24(sp)
800070ac:	02010113          	addi	sp,sp,32
800070b0:	00008067          	ret

800070b4 <prvCheckTimerCallback>:
/*-----------------------------------------------------------*/

/* See the description at the top of this file. */
static void prvCheckTimerCallback(__attribute__ ((unused)) TimerHandle_t xTimer )
{
800070b4:	fd010113          	addi	sp,sp,-48
800070b8:	02112623          	sw	ra,44(sp)
800070bc:	02812423          	sw	s0,40(sp)
800070c0:	03010413          	addi	s0,sp,48
800070c4:	fca42e23          	sw	a0,-36(s0)
static int count = 0;
unsigned long ulErrorFound = pdFALSE;
800070c8:	fe042623          	sw	zero,-20(s0)

printf("[%d] Timer callback! \r\n", count++);
800070cc:	00034797          	auipc	a5,0x34
800070d0:	8bc78793          	addi	a5,a5,-1860 # 8003a988 <count.2936>
800070d4:	0007a783          	lw	a5,0(a5)
800070d8:	00178693          	addi	a3,a5,1
800070dc:	00034717          	auipc	a4,0x34
800070e0:	8ac70713          	addi	a4,a4,-1876 # 8003a988 <count.2936>
800070e4:	00d72023          	sw	a3,0(a4)
800070e8:	00078593          	mv	a1,a5
800070ec:	00019517          	auipc	a0,0x19
800070f0:	f8850513          	addi	a0,a0,-120 # 80020074 <__rodata_start+0x74>
800070f4:	650010ef          	jal	ra,80008744 <printf>
*/
    /* Do _not_ stop the scheduler; this would halt the system, but was left for reference on how to do so */
	/* Stop scheduler */
//    vTaskEndScheduler();

}
800070f8:	00000013          	nop
800070fc:	02c12083          	lw	ra,44(sp)
80007100:	02812403          	lw	s0,40(sp)
80007104:	03010113          	addi	sp,sp,48
80007108:	00008067          	ret

8000710c <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
8000710c:	ff010113          	addi	sp,sp,-16
80007110:	00812623          	sw	s0,12(sp)
80007114:	01010413          	addi	s0,sp,16
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
80007118:	30007073          	csrci	mstatus,0
	for( ;; );
8000711c:	0000006f          	j	8000711c <vApplicationMallocFailedHook+0x10>

80007120 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
80007120:	ff010113          	addi	sp,sp,-16
80007124:	00812623          	sw	s0,12(sp)
80007128:	01010413          	addi	s0,sp,16
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
8000712c:	00000013          	nop
80007130:	00c12403          	lw	s0,12(sp)
80007134:	01010113          	addi	sp,sp,16
80007138:	00008067          	ret

8000713c <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
8000713c:	fe010113          	addi	sp,sp,-32
80007140:	00812e23          	sw	s0,28(sp)
80007144:	02010413          	addi	s0,sp,32
80007148:	fea42623          	sw	a0,-20(s0)
8000714c:	feb42423          	sw	a1,-24(s0)
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
80007150:	30007073          	csrci	mstatus,0
	for( ;; );
80007154:	0000006f          	j	80007154 <vApplicationStackOverflowHook+0x18>

80007158 <vCreateBlockTimeTasks>:
static void vSecondaryBlockTimeTestTask( void *pvParameters );

/*-----------------------------------------------------------*/

void vCreateBlockTimeTasks( void )
{
80007158:	ff010113          	addi	sp,sp,-16
8000715c:	00112623          	sw	ra,12(sp)
80007160:	00812423          	sw	s0,8(sp)
80007164:	01010413          	addi	s0,sp,16
	/* Create the queue on which the two tasks block. */
    xTestQueue = xQueueCreate( bktQUEUE_LENGTH, sizeof( BaseType_t ) );
80007168:	00000613          	li	a2,0
8000716c:	00400593          	li	a1,4
80007170:	00500513          	li	a0,5
80007174:	9e5f90ef          	jal	ra,80000b58 <xQueueGenericCreate>
80007178:	00050713          	mv	a4,a0
8000717c:	00034797          	auipc	a5,0x34
80007180:	81078793          	addi	a5,a5,-2032 # 8003a98c <xTestQueue>
80007184:	00e7a023          	sw	a4,0(a5)
	in use.  The queue registry is provided as a means for kernel aware
	debuggers to locate queues and has no purpose if a kernel aware debugger
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
	defined to be less than 1. */
	vQueueAddToRegistry( xTestQueue, "Block_Time_Queue" );
80007188:	00034797          	auipc	a5,0x34
8000718c:	80478793          	addi	a5,a5,-2044 # 8003a98c <xTestQueue>
80007190:	0007a783          	lw	a5,0(a5)
80007194:	00019597          	auipc	a1,0x19
80007198:	ef858593          	addi	a1,a1,-264 # 8002008c <__rodata_start+0x8c>
8000719c:	00078513          	mv	a0,a5
800071a0:	d35fa0ef          	jal	ra,80001ed4 <vQueueAddToRegistry>

	/* Create the two test tasks. */
	xTaskCreate( vPrimaryBlockTimeTestTask, "BTest1", configMINIMAL_STACK_SIZE, NULL, bktPRIMARY_PRIORITY, NULL );
800071a4:	00000893          	li	a7,0
800071a8:	00000813          	li	a6,0
800071ac:	00000793          	li	a5,0
800071b0:	00200713          	li	a4,2
800071b4:	00000693          	li	a3,0
800071b8:	40000613          	li	a2,1024
800071bc:	00019597          	auipc	a1,0x19
800071c0:	ee458593          	addi	a1,a1,-284 # 800200a0 <__rodata_start+0xa0>
800071c4:	00000517          	auipc	a0,0x0
800071c8:	05050513          	addi	a0,a0,80 # 80007214 <vPrimaryBlockTimeTestTask>
800071cc:	ebdfa0ef          	jal	ra,80002088 <xTaskGenericCreate>
	xTaskCreate( vSecondaryBlockTimeTestTask, "BTest2", configMINIMAL_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
800071d0:	00000893          	li	a7,0
800071d4:	00000813          	li	a6,0
800071d8:	00033797          	auipc	a5,0x33
800071dc:	7b878793          	addi	a5,a5,1976 # 8003a990 <xSecondary>
800071e0:	00100713          	li	a4,1
800071e4:	00000693          	li	a3,0
800071e8:	40000613          	li	a2,1024
800071ec:	00019597          	auipc	a1,0x19
800071f0:	ebc58593          	addi	a1,a1,-324 # 800200a8 <__rodata_start+0xa8>
800071f4:	00000517          	auipc	a0,0x0
800071f8:	5c450513          	addi	a0,a0,1476 # 800077b8 <vSecondaryBlockTimeTestTask>
800071fc:	e8dfa0ef          	jal	ra,80002088 <xTaskGenericCreate>
}
80007200:	00000013          	nop
80007204:	00c12083          	lw	ra,12(sp)
80007208:	00812403          	lw	s0,8(sp)
8000720c:	01010113          	addi	sp,sp,16
80007210:	00008067          	ret

80007214 <vPrimaryBlockTimeTestTask>:
/*-----------------------------------------------------------*/

static void vPrimaryBlockTimeTestTask( void *pvParameters )
{
80007214:	fc010113          	addi	sp,sp,-64
80007218:	02112e23          	sw	ra,60(sp)
8000721c:	02812c23          	sw	s0,56(sp)
80007220:	04010413          	addi	s0,sp,64
80007224:	fca42623          	sw	a0,-52(s0)
	{
		/*********************************************************************
        Test 1

        Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
80007228:	fe042023          	sw	zero,-32(s0)
8000722c:	0b40006f          	j	800072e0 <vPrimaryBlockTimeTestTask+0xcc>
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
80007230:	fe042783          	lw	a5,-32(s0)
80007234:	00a00713          	li	a4,10
80007238:	00f717b3          	sll	a5,a4,a5
8000723c:	fef42623          	sw	a5,-20(s0)

			xTimeWhenBlocking = xTaskGetTickCount();
80007240:	eb9fb0ef          	jal	ra,800030f8 <xTaskGetTickCount>
80007244:	fea42423          	sw	a0,-24(s0)

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
80007248:	00033797          	auipc	a5,0x33
8000724c:	74478793          	addi	a5,a5,1860 # 8003a98c <xTestQueue>
80007250:	0007a783          	lw	a5,0(a5)
80007254:	fdc40713          	addi	a4,s0,-36
80007258:	00000693          	li	a3,0
8000725c:	fec42603          	lw	a2,-20(s0)
80007260:	00070593          	mv	a1,a4
80007264:	00078513          	mv	a0,a5
80007268:	9a0fa0ef          	jal	ra,80001408 <xQueueGenericReceive>
8000726c:	00050793          	mv	a5,a0
80007270:	00078a63          	beqz	a5,80007284 <vPrimaryBlockTimeTestTask+0x70>
			{
				xErrorOccurred = pdTRUE;
80007274:	00033797          	auipc	a5,0x33
80007278:	72878793          	addi	a5,a5,1832 # 8003a99c <xErrorOccurred>
8000727c:	00100713          	li	a4,1
80007280:	00e7a023          	sw	a4,0(a5)
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
80007284:	e75fb0ef          	jal	ra,800030f8 <xTaskGetTickCount>
80007288:	00050713          	mv	a4,a0
8000728c:	fe842783          	lw	a5,-24(s0)
80007290:	40f707b3          	sub	a5,a4,a5
80007294:	fef42223          	sw	a5,-28(s0)

			if( xBlockedTime < xTimeToBlock )
80007298:	fe442703          	lw	a4,-28(s0)
8000729c:	fec42783          	lw	a5,-20(s0)
800072a0:	00f77a63          	bleu	a5,a4,800072b4 <vPrimaryBlockTimeTestTask+0xa0>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
800072a4:	00033797          	auipc	a5,0x33
800072a8:	6f878793          	addi	a5,a5,1784 # 8003a99c <xErrorOccurred>
800072ac:	00100713          	li	a4,1
800072b0:	00e7a023          	sw	a4,0(a5)
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
800072b4:	fec42783          	lw	a5,-20(s0)
800072b8:	00f78793          	addi	a5,a5,15
800072bc:	fe442703          	lw	a4,-28(s0)
800072c0:	00e7fa63          	bleu	a4,a5,800072d4 <vPrimaryBlockTimeTestTask+0xc0>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
800072c4:	00033797          	auipc	a5,0x33
800072c8:	6d878793          	addi	a5,a5,1752 # 8003a99c <xErrorOccurred>
800072cc:	00100713          	li	a4,1
800072d0:	00e7a023          	sw	a4,0(a5)
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
800072d4:	fe042783          	lw	a5,-32(s0)
800072d8:	00178793          	addi	a5,a5,1
800072dc:	fef42023          	sw	a5,-32(s0)
800072e0:	fe042703          	lw	a4,-32(s0)
800072e4:	00400793          	li	a5,4
800072e8:	f4e7d4e3          	ble	a4,a5,80007230 <vPrimaryBlockTimeTestTask+0x1c>
        Test 2

        Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
800072ec:	fe042023          	sw	zero,-32(s0)
800072f0:	0500006f          	j	80007340 <vPrimaryBlockTimeTestTask+0x12c>
		{
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
800072f4:	00033797          	auipc	a5,0x33
800072f8:	69878793          	addi	a5,a5,1688 # 8003a98c <xTestQueue>
800072fc:	0007a783          	lw	a5,0(a5)
80007300:	fe040713          	addi	a4,s0,-32
80007304:	00000693          	li	a3,0
80007308:	00000613          	li	a2,0
8000730c:	00070593          	mv	a1,a4
80007310:	00078513          	mv	a0,a5
80007314:	c05f90ef          	jal	ra,80000f18 <xQueueGenericSend>
80007318:	00050713          	mv	a4,a0
8000731c:	00100793          	li	a5,1
80007320:	00f70a63          	beq	a4,a5,80007334 <vPrimaryBlockTimeTestTask+0x120>
			{
				xErrorOccurred = pdTRUE;
80007324:	00033797          	auipc	a5,0x33
80007328:	67878793          	addi	a5,a5,1656 # 8003a99c <xErrorOccurred>
8000732c:	00100713          	li	a4,1
80007330:	00e7a023          	sw	a4,0(a5)
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
80007334:	fe042783          	lw	a5,-32(s0)
80007338:	00178793          	addi	a5,a5,1
8000733c:	fef42023          	sw	a5,-32(s0)
80007340:	fe042703          	lw	a4,-32(s0)
80007344:	00400793          	li	a5,4
80007348:	fae7d6e3          	ble	a4,a5,800072f4 <vPrimaryBlockTimeTestTask+0xe0>
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
8000734c:	fe042023          	sw	zero,-32(s0)
80007350:	0b40006f          	j	80007404 <vPrimaryBlockTimeTestTask+0x1f0>
		{
			/* The queue is full. Attempt to write to the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
80007354:	fe042783          	lw	a5,-32(s0)
80007358:	00a00713          	li	a4,10
8000735c:	00f717b3          	sll	a5,a4,a5
80007360:	fef42623          	sw	a5,-20(s0)

			xTimeWhenBlocking = xTaskGetTickCount();
80007364:	d95fb0ef          	jal	ra,800030f8 <xTaskGetTickCount>
80007368:	fea42423          	sw	a0,-24(s0)

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueSend( xTestQueue, &xItem, xTimeToBlock ) != errQUEUE_FULL )
8000736c:	00033797          	auipc	a5,0x33
80007370:	62078793          	addi	a5,a5,1568 # 8003a98c <xTestQueue>
80007374:	0007a783          	lw	a5,0(a5)
80007378:	fe040713          	addi	a4,s0,-32
8000737c:	00000693          	li	a3,0
80007380:	fec42603          	lw	a2,-20(s0)
80007384:	00070593          	mv	a1,a4
80007388:	00078513          	mv	a0,a5
8000738c:	b8df90ef          	jal	ra,80000f18 <xQueueGenericSend>
80007390:	00050793          	mv	a5,a0
80007394:	00078a63          	beqz	a5,800073a8 <vPrimaryBlockTimeTestTask+0x194>
			{
				xErrorOccurred = pdTRUE;
80007398:	00033797          	auipc	a5,0x33
8000739c:	60478793          	addi	a5,a5,1540 # 8003a99c <xErrorOccurred>
800073a0:	00100713          	li	a4,1
800073a4:	00e7a023          	sw	a4,0(a5)
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
800073a8:	d51fb0ef          	jal	ra,800030f8 <xTaskGetTickCount>
800073ac:	00050713          	mv	a4,a0
800073b0:	fe842783          	lw	a5,-24(s0)
800073b4:	40f707b3          	sub	a5,a4,a5
800073b8:	fef42223          	sw	a5,-28(s0)

			if( xBlockedTime < xTimeToBlock )
800073bc:	fe442703          	lw	a4,-28(s0)
800073c0:	fec42783          	lw	a5,-20(s0)
800073c4:	00f77a63          	bleu	a5,a4,800073d8 <vPrimaryBlockTimeTestTask+0x1c4>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
800073c8:	00033797          	auipc	a5,0x33
800073cc:	5d478793          	addi	a5,a5,1492 # 8003a99c <xErrorOccurred>
800073d0:	00100713          	li	a4,1
800073d4:	00e7a023          	sw	a4,0(a5)
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
800073d8:	fec42783          	lw	a5,-20(s0)
800073dc:	00f78793          	addi	a5,a5,15
800073e0:	fe442703          	lw	a4,-28(s0)
800073e4:	00e7fa63          	bleu	a4,a5,800073f8 <vPrimaryBlockTimeTestTask+0x1e4>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
800073e8:	00033797          	auipc	a5,0x33
800073ec:	5b478793          	addi	a5,a5,1460 # 8003a99c <xErrorOccurred>
800073f0:	00100713          	li	a4,1
800073f4:	00e7a023          	sw	a4,0(a5)
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
800073f8:	fe042783          	lw	a5,-32(s0)
800073fc:	00178793          	addi	a5,a5,1
80007400:	fef42023          	sw	a5,-32(s0)
80007404:	fe042703          	lw	a4,-32(s0)
80007408:	00400793          	li	a5,4
8000740c:	f4e7d4e3          	ble	a4,a5,80007354 <vPrimaryBlockTimeTestTask+0x140>
		recognise that its block time has not expired and return to block for
		the remains of its block time.

		Wake the other task so it blocks attempting to post to the already
		full queue. */
		xRunIndicator = 0;
80007410:	00033797          	auipc	a5,0x33
80007414:	59078793          	addi	a5,a5,1424 # 8003a9a0 <xRunIndicator>
80007418:	0007a023          	sw	zero,0(a5)
		vTaskResume( xSecondary );
8000741c:	00033797          	auipc	a5,0x33
80007420:	57478793          	addi	a5,a5,1396 # 8003a990 <xSecondary>
80007424:	0007a783          	lw	a5,0(a5)
80007428:	00078513          	mv	a0,a5
8000742c:	f80fb0ef          	jal	ra,80002bac <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
80007430:	00c0006f          	j	8000743c <vPrimaryBlockTimeTestTask+0x228>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
80007434:	01400513          	li	a0,20
80007438:	934fb0ef          	jal	ra,8000256c <vTaskDelay>
		while( xRunIndicator != bktRUN_INDICATOR )
8000743c:	00033797          	auipc	a5,0x33
80007440:	56478793          	addi	a5,a5,1380 # 8003a9a0 <xRunIndicator>
80007444:	0007a703          	lw	a4,0(a5)
80007448:	05500793          	li	a5,85
8000744c:	fef714e3          	bne	a4,a5,80007434 <vPrimaryBlockTimeTestTask+0x220>
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
80007450:	01400513          	li	a0,20
80007454:	918fb0ef          	jal	ra,8000256c <vTaskDelay>
		xRunIndicator = 0;
80007458:	00033797          	auipc	a5,0x33
8000745c:	54878793          	addi	a5,a5,1352 # 8003a9a0 <xRunIndicator>
80007460:	0007a023          	sw	zero,0(a5)

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
80007464:	fe042023          	sw	zero,-32(s0)
80007468:	1080006f          	j	80007570 <vPrimaryBlockTimeTestTask+0x35c>
		{
			/* Now when we make space on the queue the other task should wake
			but not execute as this task has higher priority. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
8000746c:	00033797          	auipc	a5,0x33
80007470:	52078793          	addi	a5,a5,1312 # 8003a98c <xTestQueue>
80007474:	0007a783          	lw	a5,0(a5)
80007478:	fdc40713          	addi	a4,s0,-36
8000747c:	00000693          	li	a3,0
80007480:	00000613          	li	a2,0
80007484:	00070593          	mv	a1,a4
80007488:	00078513          	mv	a0,a5
8000748c:	f7df90ef          	jal	ra,80001408 <xQueueGenericReceive>
80007490:	00050713          	mv	a4,a0
80007494:	00100793          	li	a5,1
80007498:	00f70a63          	beq	a4,a5,800074ac <vPrimaryBlockTimeTestTask+0x298>
			{
				xErrorOccurred = pdTRUE;
8000749c:	00033797          	auipc	a5,0x33
800074a0:	50078793          	addi	a5,a5,1280 # 8003a99c <xErrorOccurred>
800074a4:	00100713          	li	a4,1
800074a8:	00e7a023          	sw	a4,0(a5)
			}

			/* Now fill the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			full ourselves, and the other task have set xRunIndicator. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
800074ac:	00033797          	auipc	a5,0x33
800074b0:	4e078793          	addi	a5,a5,1248 # 8003a98c <xTestQueue>
800074b4:	0007a783          	lw	a5,0(a5)
800074b8:	fe040713          	addi	a4,s0,-32
800074bc:	00000693          	li	a3,0
800074c0:	00000613          	li	a2,0
800074c4:	00070593          	mv	a1,a4
800074c8:	00078513          	mv	a0,a5
800074cc:	a4df90ef          	jal	ra,80000f18 <xQueueGenericSend>
800074d0:	00050713          	mv	a4,a0
800074d4:	00100793          	li	a5,1
800074d8:	00f70a63          	beq	a4,a5,800074ec <vPrimaryBlockTimeTestTask+0x2d8>
			{
				xErrorOccurred = pdTRUE;
800074dc:	00033797          	auipc	a5,0x33
800074e0:	4c078793          	addi	a5,a5,1216 # 8003a99c <xErrorOccurred>
800074e4:	00100713          	li	a4,1
800074e8:	00e7a023          	sw	a4,0(a5)
			}

			if( xRunIndicator == bktRUN_INDICATOR )
800074ec:	00033797          	auipc	a5,0x33
800074f0:	4b478793          	addi	a5,a5,1204 # 8003a9a0 <xRunIndicator>
800074f4:	0007a703          	lw	a4,0(a5)
800074f8:	05500793          	li	a5,85
800074fc:	00f71a63          	bne	a4,a5,80007510 <vPrimaryBlockTimeTestTask+0x2fc>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
80007500:	00033797          	auipc	a5,0x33
80007504:	49c78793          	addi	a5,a5,1180 # 8003a99c <xErrorOccurred>
80007508:	00100713          	li	a4,1
8000750c:	00e7a023          	sw	a4,0(a5)
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
80007510:	00033797          	auipc	a5,0x33
80007514:	48078793          	addi	a5,a5,1152 # 8003a990 <xSecondary>
80007518:	0007a783          	lw	a5,0(a5)
8000751c:	00400593          	li	a1,4
80007520:	00078513          	mv	a0,a5
80007524:	ab4fb0ef          	jal	ra,800027d8 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
80007528:	00033797          	auipc	a5,0x33
8000752c:	47878793          	addi	a5,a5,1144 # 8003a9a0 <xRunIndicator>
80007530:	0007a703          	lw	a4,0(a5)
80007534:	05500793          	li	a5,85
80007538:	00f71a63          	bne	a4,a5,8000754c <vPrimaryBlockTimeTestTask+0x338>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
8000753c:	00033797          	auipc	a5,0x33
80007540:	46078793          	addi	a5,a5,1120 # 8003a99c <xErrorOccurred>
80007544:	00100713          	li	a4,1
80007548:	00e7a023          	sw	a4,0(a5)
			}

			/* Set the priority back down. */
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
8000754c:	00033797          	auipc	a5,0x33
80007550:	44478793          	addi	a5,a5,1092 # 8003a990 <xSecondary>
80007554:	0007a783          	lw	a5,0(a5)
80007558:	00100593          	li	a1,1
8000755c:	00078513          	mv	a0,a5
80007560:	a78fb0ef          	jal	ra,800027d8 <vTaskPrioritySet>
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
80007564:	fe042783          	lw	a5,-32(s0)
80007568:	00178793          	addi	a5,a5,1
8000756c:	fef42023          	sw	a5,-32(s0)
80007570:	fe042703          	lw	a4,-32(s0)
80007574:	00400793          	li	a5,4
80007578:	eee7dae3          	ble	a4,a5,8000746c <vPrimaryBlockTimeTestTask+0x258>
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
8000757c:	00c0006f          	j	80007588 <vPrimaryBlockTimeTestTask+0x374>
		{
			vTaskDelay( bktSHORT_WAIT );
80007580:	01400513          	li	a0,20
80007584:	fe9fa0ef          	jal	ra,8000256c <vTaskDelay>
		while( xRunIndicator != bktRUN_INDICATOR )
80007588:	00033797          	auipc	a5,0x33
8000758c:	41878793          	addi	a5,a5,1048 # 8003a9a0 <xRunIndicator>
80007590:	0007a703          	lw	a4,0(a5)
80007594:	05500793          	li	a5,85
80007598:	fef714e3          	bne	a4,a5,80007580 <vPrimaryBlockTimeTestTask+0x36c>
		}
		vTaskDelay( bktSHORT_WAIT );
8000759c:	01400513          	li	a0,20
800075a0:	fcdfa0ef          	jal	ra,8000256c <vTaskDelay>
		xRunIndicator = 0;
800075a4:	00033797          	auipc	a5,0x33
800075a8:	3fc78793          	addi	a5,a5,1020 # 8003a9a0 <xRunIndicator>
800075ac:	0007a023          	sw	zero,0(a5)

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
800075b0:	fe042023          	sw	zero,-32(s0)
800075b4:	0500006f          	j	80007604 <vPrimaryBlockTimeTestTask+0x3f0>
		{
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
800075b8:	00033797          	auipc	a5,0x33
800075bc:	3d478793          	addi	a5,a5,980 # 8003a98c <xTestQueue>
800075c0:	0007a783          	lw	a5,0(a5)
800075c4:	fdc40713          	addi	a4,s0,-36
800075c8:	00000693          	li	a3,0
800075cc:	00000613          	li	a2,0
800075d0:	00070593          	mv	a1,a4
800075d4:	00078513          	mv	a0,a5
800075d8:	e31f90ef          	jal	ra,80001408 <xQueueGenericReceive>
800075dc:	00050713          	mv	a4,a0
800075e0:	00100793          	li	a5,1
800075e4:	00f70a63          	beq	a4,a5,800075f8 <vPrimaryBlockTimeTestTask+0x3e4>
			{
				xErrorOccurred = pdTRUE;
800075e8:	00033797          	auipc	a5,0x33
800075ec:	3b478793          	addi	a5,a5,948 # 8003a99c <xErrorOccurred>
800075f0:	00100713          	li	a4,1
800075f4:	00e7a023          	sw	a4,0(a5)
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
800075f8:	fe042783          	lw	a5,-32(s0)
800075fc:	00178793          	addi	a5,a5,1
80007600:	fef42023          	sw	a5,-32(s0)
80007604:	fe042703          	lw	a4,-32(s0)
80007608:	00400793          	li	a5,4
8000760c:	fae7d6e3          	ble	a4,a5,800075b8 <vPrimaryBlockTimeTestTask+0x3a4>
			}
		}

		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );
80007610:	00033797          	auipc	a5,0x33
80007614:	38078793          	addi	a5,a5,896 # 8003a990 <xSecondary>
80007618:	0007a783          	lw	a5,0(a5)
8000761c:	00078513          	mv	a0,a5
80007620:	d8cfb0ef          	jal	ra,80002bac <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
80007624:	00c0006f          	j	80007630 <vPrimaryBlockTimeTestTask+0x41c>
		{
			vTaskDelay( bktSHORT_WAIT );
80007628:	01400513          	li	a0,20
8000762c:	f41fa0ef          	jal	ra,8000256c <vTaskDelay>
		while( xRunIndicator != bktRUN_INDICATOR )
80007630:	00033797          	auipc	a5,0x33
80007634:	37078793          	addi	a5,a5,880 # 8003a9a0 <xRunIndicator>
80007638:	0007a703          	lw	a4,0(a5)
8000763c:	05500793          	li	a5,85
80007640:	fef714e3          	bne	a4,a5,80007628 <vPrimaryBlockTimeTestTask+0x414>
		}
		vTaskDelay( bktSHORT_WAIT );
80007644:	01400513          	li	a0,20
80007648:	f25fa0ef          	jal	ra,8000256c <vTaskDelay>
		xRunIndicator = 0;
8000764c:	00033797          	auipc	a5,0x33
80007650:	35478793          	addi	a5,a5,852 # 8003a9a0 <xRunIndicator>
80007654:	0007a023          	sw	zero,0(a5)

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
80007658:	fe042023          	sw	zero,-32(s0)
8000765c:	1080006f          	j	80007764 <vPrimaryBlockTimeTestTask+0x550>
		{
			/* Now when we place an item on the queue the other task should
			wake but not execute as this task has higher priority. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
80007660:	00033797          	auipc	a5,0x33
80007664:	32c78793          	addi	a5,a5,812 # 8003a98c <xTestQueue>
80007668:	0007a783          	lw	a5,0(a5)
8000766c:	fe040713          	addi	a4,s0,-32
80007670:	00000693          	li	a3,0
80007674:	00000613          	li	a2,0
80007678:	00070593          	mv	a1,a4
8000767c:	00078513          	mv	a0,a5
80007680:	899f90ef          	jal	ra,80000f18 <xQueueGenericSend>
80007684:	00050713          	mv	a4,a0
80007688:	00100793          	li	a5,1
8000768c:	00f70a63          	beq	a4,a5,800076a0 <vPrimaryBlockTimeTestTask+0x48c>
			{
				xErrorOccurred = pdTRUE;
80007690:	00033797          	auipc	a5,0x33
80007694:	30c78793          	addi	a5,a5,780 # 8003a99c <xErrorOccurred>
80007698:	00100713          	li	a4,1
8000769c:	00e7a023          	sw	a4,0(a5)
			}

			/* Now empty the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			empty ourselves, and the other task would be suspended. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
800076a0:	00033797          	auipc	a5,0x33
800076a4:	2ec78793          	addi	a5,a5,748 # 8003a98c <xTestQueue>
800076a8:	0007a783          	lw	a5,0(a5)
800076ac:	fdc40713          	addi	a4,s0,-36
800076b0:	00000693          	li	a3,0
800076b4:	00000613          	li	a2,0
800076b8:	00070593          	mv	a1,a4
800076bc:	00078513          	mv	a0,a5
800076c0:	d49f90ef          	jal	ra,80001408 <xQueueGenericReceive>
800076c4:	00050713          	mv	a4,a0
800076c8:	00100793          	li	a5,1
800076cc:	00f70a63          	beq	a4,a5,800076e0 <vPrimaryBlockTimeTestTask+0x4cc>
			{
				xErrorOccurred = pdTRUE;
800076d0:	00033797          	auipc	a5,0x33
800076d4:	2cc78793          	addi	a5,a5,716 # 8003a99c <xErrorOccurred>
800076d8:	00100713          	li	a4,1
800076dc:	00e7a023          	sw	a4,0(a5)
			}

			if( xRunIndicator == bktRUN_INDICATOR )
800076e0:	00033797          	auipc	a5,0x33
800076e4:	2c078793          	addi	a5,a5,704 # 8003a9a0 <xRunIndicator>
800076e8:	0007a703          	lw	a4,0(a5)
800076ec:	05500793          	li	a5,85
800076f0:	00f71a63          	bne	a4,a5,80007704 <vPrimaryBlockTimeTestTask+0x4f0>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
800076f4:	00033797          	auipc	a5,0x33
800076f8:	2a878793          	addi	a5,a5,680 # 8003a99c <xErrorOccurred>
800076fc:	00100713          	li	a4,1
80007700:	00e7a023          	sw	a4,0(a5)
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
80007704:	00033797          	auipc	a5,0x33
80007708:	28c78793          	addi	a5,a5,652 # 8003a990 <xSecondary>
8000770c:	0007a783          	lw	a5,0(a5)
80007710:	00400593          	li	a1,4
80007714:	00078513          	mv	a0,a5
80007718:	8c0fb0ef          	jal	ra,800027d8 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
8000771c:	00033797          	auipc	a5,0x33
80007720:	28478793          	addi	a5,a5,644 # 8003a9a0 <xRunIndicator>
80007724:	0007a703          	lw	a4,0(a5)
80007728:	05500793          	li	a5,85
8000772c:	00f71a63          	bne	a4,a5,80007740 <vPrimaryBlockTimeTestTask+0x52c>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
80007730:	00033797          	auipc	a5,0x33
80007734:	26c78793          	addi	a5,a5,620 # 8003a99c <xErrorOccurred>
80007738:	00100713          	li	a4,1
8000773c:	00e7a023          	sw	a4,0(a5)
			}
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
80007740:	00033797          	auipc	a5,0x33
80007744:	25078793          	addi	a5,a5,592 # 8003a990 <xSecondary>
80007748:	0007a783          	lw	a5,0(a5)
8000774c:	00100593          	li	a1,1
80007750:	00078513          	mv	a0,a5
80007754:	884fb0ef          	jal	ra,800027d8 <vTaskPrioritySet>
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
80007758:	fe042783          	lw	a5,-32(s0)
8000775c:	00178793          	addi	a5,a5,1
80007760:	fef42023          	sw	a5,-32(s0)
80007764:	fe042703          	lw	a4,-32(s0)
80007768:	00400793          	li	a5,4
8000776c:	eee7dae3          	ble	a4,a5,80007660 <vPrimaryBlockTimeTestTask+0x44c>
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
80007770:	00c0006f          	j	8000777c <vPrimaryBlockTimeTestTask+0x568>
		{
			vTaskDelay( bktSHORT_WAIT );
80007774:	01400513          	li	a0,20
80007778:	df5fa0ef          	jal	ra,8000256c <vTaskDelay>
		while( xRunIndicator != bktRUN_INDICATOR )
8000777c:	00033797          	auipc	a5,0x33
80007780:	22478793          	addi	a5,a5,548 # 8003a9a0 <xRunIndicator>
80007784:	0007a703          	lw	a4,0(a5)
80007788:	05500793          	li	a5,85
8000778c:	fef714e3          	bne	a4,a5,80007774 <vPrimaryBlockTimeTestTask+0x560>
		}
		vTaskDelay( bktSHORT_WAIT );
80007790:	01400513          	li	a0,20
80007794:	dd9fa0ef          	jal	ra,8000256c <vTaskDelay>

		xPrimaryCycles++;
80007798:	00033797          	auipc	a5,0x33
8000779c:	1fc78793          	addi	a5,a5,508 # 8003a994 <xPrimaryCycles>
800077a0:	0007a783          	lw	a5,0(a5)
800077a4:	00178713          	addi	a4,a5,1
800077a8:	00033797          	auipc	a5,0x33
800077ac:	1ec78793          	addi	a5,a5,492 # 8003a994 <xPrimaryCycles>
800077b0:	00e7a023          	sw	a4,0(a5)
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
800077b4:	a75ff06f          	j	80007228 <vPrimaryBlockTimeTestTask+0x14>

800077b8 <vSecondaryBlockTimeTestTask>:
	}
}
/*-----------------------------------------------------------*/

static void vSecondaryBlockTimeTestTask( void *pvParameters )
{
800077b8:	fd010113          	addi	sp,sp,-48
800077bc:	02112623          	sw	ra,44(sp)
800077c0:	02812423          	sw	s0,40(sp)
800077c4:	03010413          	addi	s0,sp,48
800077c8:	fca42e23          	sw	a0,-36(s0)
	{
		/*********************************************************************
        Test 1 and 2

		This task does does not participate in these tests. */
		vTaskSuspend( NULL );
800077cc:	00000513          	li	a0,0
800077d0:	a18fb0ef          	jal	ra,800029e8 <vTaskSuspend>
        Test 3

		The first thing we do is attempt to read from the queue.  It should be
		full so we block.  Note the time before we block so we can check the
		wake time is as per that expected. */
		xTimeWhenBlocking = xTaskGetTickCount();
800077d4:	925fb0ef          	jal	ra,800030f8 <xTaskGetTickCount>
800077d8:	fea42623          	sw	a0,-20(s0)

		/* We should unblock after bktTIME_TO_BLOCK having not sent
		anything to the queue. */
		xData = 0;
800077dc:	fe042223          	sw	zero,-28(s0)
		xRunIndicator = bktRUN_INDICATOR;
800077e0:	00033797          	auipc	a5,0x33
800077e4:	1c078793          	addi	a5,a5,448 # 8003a9a0 <xRunIndicator>
800077e8:	05500713          	li	a4,85
800077ec:	00e7a023          	sw	a4,0(a5)
		if( xQueueSend( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_FULL )
800077f0:	00033797          	auipc	a5,0x33
800077f4:	19c78793          	addi	a5,a5,412 # 8003a98c <xTestQueue>
800077f8:	0007a783          	lw	a5,0(a5)
800077fc:	fe440713          	addi	a4,s0,-28
80007800:	00000693          	li	a3,0
80007804:	0af00613          	li	a2,175
80007808:	00070593          	mv	a1,a4
8000780c:	00078513          	mv	a0,a5
80007810:	f08f90ef          	jal	ra,80000f18 <xQueueGenericSend>
80007814:	00050793          	mv	a5,a0
80007818:	00078a63          	beqz	a5,8000782c <vSecondaryBlockTimeTestTask+0x74>
		{
			xErrorOccurred = pdTRUE;
8000781c:	00033797          	auipc	a5,0x33
80007820:	18078793          	addi	a5,a5,384 # 8003a99c <xErrorOccurred>
80007824:	00100713          	li	a4,1
80007828:	00e7a023          	sw	a4,0(a5)
		}

		/* How long were we inside the send function? */
		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
8000782c:	8cdfb0ef          	jal	ra,800030f8 <xTaskGetTickCount>
80007830:	00050713          	mv	a4,a0
80007834:	fec42783          	lw	a5,-20(s0)
80007838:	40f707b3          	sub	a5,a4,a5
8000783c:	fef42423          	sw	a5,-24(s0)

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
80007840:	fe842703          	lw	a4,-24(s0)
80007844:	0ae00793          	li	a5,174
80007848:	00e7ea63          	bltu	a5,a4,8000785c <vSecondaryBlockTimeTestTask+0xa4>
		{
			xErrorOccurred = pdTRUE;
8000784c:	00033797          	auipc	a5,0x33
80007850:	15078793          	addi	a5,a5,336 # 8003a99c <xErrorOccurred>
80007854:	00100713          	li	a4,1
80007858:	00e7a023          	sw	a4,0(a5)
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as
		soon as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
8000785c:	fe842703          	lw	a4,-24(s0)
80007860:	0be00793          	li	a5,190
80007864:	00e7fa63          	bleu	a4,a5,80007878 <vSecondaryBlockTimeTestTask+0xc0>
		{
			xErrorOccurred = pdTRUE;
80007868:	00033797          	auipc	a5,0x33
8000786c:	13478793          	addi	a5,a5,308 # 8003a99c <xErrorOccurred>
80007870:	00100713          	li	a4,1
80007874:	00e7a023          	sw	a4,0(a5)
		}

		/* Suspend ready for test 3. */
		xRunIndicator = bktRUN_INDICATOR;
80007878:	00033797          	auipc	a5,0x33
8000787c:	12878793          	addi	a5,a5,296 # 8003a9a0 <xRunIndicator>
80007880:	05500713          	li	a4,85
80007884:	00e7a023          	sw	a4,0(a5)
		vTaskSuspend( NULL );
80007888:	00000513          	li	a0,0
8000788c:	95cfb0ef          	jal	ra,800029e8 <vTaskSuspend>

		/*********************************************************************
        Test 4

		As per test three, but with the send and receive reversed. */
		xTimeWhenBlocking = xTaskGetTickCount();
80007890:	869fb0ef          	jal	ra,800030f8 <xTaskGetTickCount>
80007894:	fea42623          	sw	a0,-20(s0)

		/* We should unblock after bktTIME_TO_BLOCK having not received
		anything on the queue. */
		xRunIndicator = bktRUN_INDICATOR;
80007898:	00033797          	auipc	a5,0x33
8000789c:	10878793          	addi	a5,a5,264 # 8003a9a0 <xRunIndicator>
800078a0:	05500713          	li	a4,85
800078a4:	00e7a023          	sw	a4,0(a5)
		if( xQueueReceive( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_EMPTY )
800078a8:	00033797          	auipc	a5,0x33
800078ac:	0e478793          	addi	a5,a5,228 # 8003a98c <xTestQueue>
800078b0:	0007a783          	lw	a5,0(a5)
800078b4:	fe440713          	addi	a4,s0,-28
800078b8:	00000693          	li	a3,0
800078bc:	0af00613          	li	a2,175
800078c0:	00070593          	mv	a1,a4
800078c4:	00078513          	mv	a0,a5
800078c8:	b41f90ef          	jal	ra,80001408 <xQueueGenericReceive>
800078cc:	00050793          	mv	a5,a0
800078d0:	00078a63          	beqz	a5,800078e4 <vSecondaryBlockTimeTestTask+0x12c>
		{
			xErrorOccurred = pdTRUE;
800078d4:	00033797          	auipc	a5,0x33
800078d8:	0c878793          	addi	a5,a5,200 # 8003a99c <xErrorOccurred>
800078dc:	00100713          	li	a4,1
800078e0:	00e7a023          	sw	a4,0(a5)
		}

		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
800078e4:	815fb0ef          	jal	ra,800030f8 <xTaskGetTickCount>
800078e8:	00050713          	mv	a4,a0
800078ec:	fec42783          	lw	a5,-20(s0)
800078f0:	40f707b3          	sub	a5,a4,a5
800078f4:	fef42423          	sw	a5,-24(s0)

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
800078f8:	fe842703          	lw	a4,-24(s0)
800078fc:	0ae00793          	li	a5,174
80007900:	00e7ea63          	bltu	a5,a4,80007914 <vSecondaryBlockTimeTestTask+0x15c>
		{
			xErrorOccurred = pdTRUE;
80007904:	00033797          	auipc	a5,0x33
80007908:	09878793          	addi	a5,a5,152 # 8003a99c <xErrorOccurred>
8000790c:	00100713          	li	a4,1
80007910:	00e7a023          	sw	a4,0(a5)
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as soon
		as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
80007914:	fe842703          	lw	a4,-24(s0)
80007918:	0be00793          	li	a5,190
8000791c:	00e7fa63          	bleu	a4,a5,80007930 <vSecondaryBlockTimeTestTask+0x178>
		{
			xErrorOccurred = pdTRUE;
80007920:	00033797          	auipc	a5,0x33
80007924:	07c78793          	addi	a5,a5,124 # 8003a99c <xErrorOccurred>
80007928:	00100713          	li	a4,1
8000792c:	00e7a023          	sw	a4,0(a5)
		}

		xRunIndicator = bktRUN_INDICATOR;
80007930:	00033797          	auipc	a5,0x33
80007934:	07078793          	addi	a5,a5,112 # 8003a9a0 <xRunIndicator>
80007938:	05500713          	li	a4,85
8000793c:	00e7a023          	sw	a4,0(a5)

		xSecondaryCycles++;
80007940:	00033797          	auipc	a5,0x33
80007944:	05878793          	addi	a5,a5,88 # 8003a998 <xSecondaryCycles>
80007948:	0007a783          	lw	a5,0(a5)
8000794c:	00178713          	addi	a4,a5,1
80007950:	00033797          	auipc	a5,0x33
80007954:	04878793          	addi	a5,a5,72 # 8003a998 <xSecondaryCycles>
80007958:	00e7a023          	sw	a4,0(a5)
		vTaskSuspend( NULL );
8000795c:	e71ff06f          	j	800077cc <vSecondaryBlockTimeTestTask+0x14>

80007960 <xAreBlockTimeTestTasksStillRunning>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xAreBlockTimeTestTasksStillRunning( void )
{
80007960:	fe010113          	addi	sp,sp,-32
80007964:	00812e23          	sw	s0,28(sp)
80007968:	02010413          	addi	s0,sp,32
static BaseType_t xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
BaseType_t xReturn = pdPASS;
8000796c:	00100793          	li	a5,1
80007970:	fef42623          	sw	a5,-20(s0)

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
80007974:	00033797          	auipc	a5,0x33
80007978:	02078793          	addi	a5,a5,32 # 8003a994 <xPrimaryCycles>
8000797c:	0007a703          	lw	a4,0(a5)
80007980:	00033797          	auipc	a5,0x33
80007984:	02478793          	addi	a5,a5,36 # 8003a9a4 <xLastPrimaryCycleCount.1866>
80007988:	0007a783          	lw	a5,0(a5)
8000798c:	00f71463          	bne	a4,a5,80007994 <xAreBlockTimeTestTasksStillRunning+0x34>
	{
		xReturn = pdFAIL;
80007990:	fe042623          	sw	zero,-20(s0)
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
80007994:	00033797          	auipc	a5,0x33
80007998:	00478793          	addi	a5,a5,4 # 8003a998 <xSecondaryCycles>
8000799c:	0007a703          	lw	a4,0(a5)
800079a0:	00033797          	auipc	a5,0x33
800079a4:	00878793          	addi	a5,a5,8 # 8003a9a8 <xLastSecondaryCycleCount.1867>
800079a8:	0007a783          	lw	a5,0(a5)
800079ac:	00f71463          	bne	a4,a5,800079b4 <xAreBlockTimeTestTasksStillRunning+0x54>
	{
		xReturn = pdFAIL;
800079b0:	fe042623          	sw	zero,-20(s0)
	}

	if( xErrorOccurred == pdTRUE )
800079b4:	00033797          	auipc	a5,0x33
800079b8:	fe878793          	addi	a5,a5,-24 # 8003a99c <xErrorOccurred>
800079bc:	0007a703          	lw	a4,0(a5)
800079c0:	00100793          	li	a5,1
800079c4:	00f71463          	bne	a4,a5,800079cc <xAreBlockTimeTestTasksStillRunning+0x6c>
	{
		xReturn = pdFAIL;
800079c8:	fe042623          	sw	zero,-20(s0)
	}

	xLastSecondaryCycleCount = xSecondaryCycles;
800079cc:	00033797          	auipc	a5,0x33
800079d0:	fcc78793          	addi	a5,a5,-52 # 8003a998 <xSecondaryCycles>
800079d4:	0007a703          	lw	a4,0(a5)
800079d8:	00033797          	auipc	a5,0x33
800079dc:	fd078793          	addi	a5,a5,-48 # 8003a9a8 <xLastSecondaryCycleCount.1867>
800079e0:	00e7a023          	sw	a4,0(a5)
	xLastPrimaryCycleCount = xPrimaryCycles;
800079e4:	00033797          	auipc	a5,0x33
800079e8:	fb078793          	addi	a5,a5,-80 # 8003a994 <xPrimaryCycles>
800079ec:	0007a703          	lw	a4,0(a5)
800079f0:	00033797          	auipc	a5,0x33
800079f4:	fb478793          	addi	a5,a5,-76 # 8003a9a4 <xLastPrimaryCycleCount.1866>
800079f8:	00e7a023          	sw	a4,0(a5)

	return xReturn;
800079fc:	fec42783          	lw	a5,-20(s0)
}
80007a00:	00078513          	mv	a0,a5
80007a04:	01c12403          	lw	s0,28(sp)
80007a08:	02010113          	addi	sp,sp,32
80007a0c:	00008067          	ret

80007a10 <vStartCountingSemaphoreTasks>:
static volatile xCountSemStruct xParameters[ countNUM_TEST_TASKS ];

/*-----------------------------------------------------------*/

void vStartCountingSemaphoreTasks( void )
{
80007a10:	ff010113          	addi	sp,sp,-16
80007a14:	00112623          	sw	ra,12(sp)
80007a18:	00812423          	sw	s0,8(sp)
80007a1c:	01010413          	addi	s0,sp,16
	/* Create the semaphores that we are going to use for the test/demo.  The
	first should be created such that it starts at its maximum count value,
	the second should be created such that it starts with a count value of zero. */
	xParameters[ 0 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, countMAX_COUNT_VALUE );
80007a20:	0c800593          	li	a1,200
80007a24:	0c800513          	li	a0,200
80007a28:	c64f90ef          	jal	ra,80000e8c <xQueueCreateCountingSemaphore>
80007a2c:	00050713          	mv	a4,a0
80007a30:	00033797          	auipc	a5,0x33
80007a34:	f8078793          	addi	a5,a5,-128 # 8003a9b0 <xParameters>
80007a38:	00e7a023          	sw	a4,0(a5)
	xParameters[ 0 ].uxExpectedStartCount = countSTART_AT_MAX_COUNT;
80007a3c:	00033797          	auipc	a5,0x33
80007a40:	f7478793          	addi	a5,a5,-140 # 8003a9b0 <xParameters>
80007a44:	0aa00713          	li	a4,170
80007a48:	00e7a223          	sw	a4,4(a5)
	xParameters[ 0 ].uxLoopCounter = 0;
80007a4c:	00033797          	auipc	a5,0x33
80007a50:	f6478793          	addi	a5,a5,-156 # 8003a9b0 <xParameters>
80007a54:	0007a423          	sw	zero,8(a5)

	xParameters[ 1 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, 0 );
80007a58:	00000593          	li	a1,0
80007a5c:	0c800513          	li	a0,200
80007a60:	c2cf90ef          	jal	ra,80000e8c <xQueueCreateCountingSemaphore>
80007a64:	00050713          	mv	a4,a0
80007a68:	00033797          	auipc	a5,0x33
80007a6c:	f4878793          	addi	a5,a5,-184 # 8003a9b0 <xParameters>
80007a70:	00e7a623          	sw	a4,12(a5)
	xParameters[ 1 ].uxExpectedStartCount = 0;
80007a74:	00033797          	auipc	a5,0x33
80007a78:	f3c78793          	addi	a5,a5,-196 # 8003a9b0 <xParameters>
80007a7c:	0007a823          	sw	zero,16(a5)
	xParameters[ 1 ].uxLoopCounter = 0;
80007a80:	00033797          	auipc	a5,0x33
80007a84:	f3078793          	addi	a5,a5,-208 # 8003a9b0 <xParameters>
80007a88:	0007aa23          	sw	zero,20(a5)
	in use.  The registry is provided as a means for kernel aware 
	debuggers to locate semaphores and has no purpose if a kernel aware debugger
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
	defined to be less than 1. */
	vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 0 ].xSemaphore, "Counting_Sem_1" );
80007a8c:	00033797          	auipc	a5,0x33
80007a90:	f2478793          	addi	a5,a5,-220 # 8003a9b0 <xParameters>
80007a94:	0007a783          	lw	a5,0(a5)
80007a98:	00018597          	auipc	a1,0x18
80007a9c:	61858593          	addi	a1,a1,1560 # 800200b0 <__rodata_start+0xb0>
80007aa0:	00078513          	mv	a0,a5
80007aa4:	c30fa0ef          	jal	ra,80001ed4 <vQueueAddToRegistry>
	vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 1 ].xSemaphore, "Counting_Sem_2" );
80007aa8:	00033797          	auipc	a5,0x33
80007aac:	f0878793          	addi	a5,a5,-248 # 8003a9b0 <xParameters>
80007ab0:	00c7a783          	lw	a5,12(a5)
80007ab4:	00018597          	auipc	a1,0x18
80007ab8:	60c58593          	addi	a1,a1,1548 # 800200c0 <__rodata_start+0xc0>
80007abc:	00078513          	mv	a0,a5
80007ac0:	c14fa0ef          	jal	ra,80001ed4 <vQueueAddToRegistry>


	/* Were the semaphores created? */
	if( ( xParameters[ 0 ].xSemaphore != NULL ) || ( xParameters[ 1 ].xSemaphore != NULL ) )
80007ac4:	00033797          	auipc	a5,0x33
80007ac8:	eec78793          	addi	a5,a5,-276 # 8003a9b0 <xParameters>
80007acc:	0007a783          	lw	a5,0(a5)
80007ad0:	00079a63          	bnez	a5,80007ae4 <vStartCountingSemaphoreTasks+0xd4>
80007ad4:	00033797          	auipc	a5,0x33
80007ad8:	edc78793          	addi	a5,a5,-292 # 8003a9b0 <xParameters>
80007adc:	00c7a783          	lw	a5,12(a5)
80007ae0:	06078263          	beqz	a5,80007b44 <vStartCountingSemaphoreTasks+0x134>
	{
		/* Create the demo tasks, passing in the semaphore to use as the parameter. */
		xTaskCreate( prvCountingSemaphoreTask, "CNT1", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 0 ] ), tskIDLE_PRIORITY, NULL );
80007ae4:	00000893          	li	a7,0
80007ae8:	00000813          	li	a6,0
80007aec:	00000793          	li	a5,0
80007af0:	00000713          	li	a4,0
80007af4:	00033697          	auipc	a3,0x33
80007af8:	ebc68693          	addi	a3,a3,-324 # 8003a9b0 <xParameters>
80007afc:	40000613          	li	a2,1024
80007b00:	00018597          	auipc	a1,0x18
80007b04:	5d058593          	addi	a1,a1,1488 # 800200d0 <__rodata_start+0xd0>
80007b08:	00000517          	auipc	a0,0x0
80007b0c:	23050513          	addi	a0,a0,560 # 80007d38 <prvCountingSemaphoreTask>
80007b10:	d78fa0ef          	jal	ra,80002088 <xTaskGenericCreate>
		xTaskCreate( prvCountingSemaphoreTask, "CNT2", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 1 ] ), tskIDLE_PRIORITY, NULL );		
80007b14:	00000893          	li	a7,0
80007b18:	00000813          	li	a6,0
80007b1c:	00000793          	li	a5,0
80007b20:	00000713          	li	a4,0
80007b24:	00033697          	auipc	a3,0x33
80007b28:	e9868693          	addi	a3,a3,-360 # 8003a9bc <xParameters+0xc>
80007b2c:	40000613          	li	a2,1024
80007b30:	00018597          	auipc	a1,0x18
80007b34:	5a858593          	addi	a1,a1,1448 # 800200d8 <__rodata_start+0xd8>
80007b38:	00000517          	auipc	a0,0x0
80007b3c:	20050513          	addi	a0,a0,512 # 80007d38 <prvCountingSemaphoreTask>
80007b40:	d48fa0ef          	jal	ra,80002088 <xTaskGenericCreate>
	}
}
80007b44:	00000013          	nop
80007b48:	00c12083          	lw	ra,12(sp)
80007b4c:	00812403          	lw	s0,8(sp)
80007b50:	01010113          	addi	sp,sp,16
80007b54:	00008067          	ret

80007b58 <prvDecrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvDecrementSemaphoreCount( SemaphoreHandle_t xSemaphore, UBaseType_t *puxLoopCounter )
{
80007b58:	fd010113          	addi	sp,sp,-48
80007b5c:	02112623          	sw	ra,44(sp)
80007b60:	02812423          	sw	s0,40(sp)
80007b64:	03010413          	addi	s0,sp,48
80007b68:	fca42e23          	sw	a0,-36(s0)
80007b6c:	fcb42c23          	sw	a1,-40(s0)
UBaseType_t ux;

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
80007b70:	00000693          	li	a3,0
80007b74:	00000613          	li	a2,0
80007b78:	00000593          	li	a1,0
80007b7c:	fdc42503          	lw	a0,-36(s0)
80007b80:	b98f90ef          	jal	ra,80000f18 <xQueueGenericSend>
80007b84:	00050713          	mv	a4,a0
80007b88:	00100793          	li	a5,1
80007b8c:	00f71a63          	bne	a4,a5,80007ba0 <prvDecrementSemaphoreCount+0x48>
	{
		xErrorDetected = pdTRUE;
80007b90:	00033797          	auipc	a5,0x33
80007b94:	e1c78793          	addi	a5,a5,-484 # 8003a9ac <xErrorDetected>
80007b98:	00100713          	li	a4,1
80007b9c:	00e7a023          	sw	a4,0(a5)
	}

	/* We should be able to 'take' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
80007ba0:	fe042623          	sw	zero,-20(s0)
80007ba4:	0540006f          	j	80007bf8 <prvDecrementSemaphoreCount+0xa0>
	{
		if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) != pdPASS )
80007ba8:	00000693          	li	a3,0
80007bac:	00000613          	li	a2,0
80007bb0:	00000593          	li	a1,0
80007bb4:	fdc42503          	lw	a0,-36(s0)
80007bb8:	851f90ef          	jal	ra,80001408 <xQueueGenericReceive>
80007bbc:	00050713          	mv	a4,a0
80007bc0:	00100793          	li	a5,1
80007bc4:	00f70a63          	beq	a4,a5,80007bd8 <prvDecrementSemaphoreCount+0x80>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
80007bc8:	00033797          	auipc	a5,0x33
80007bcc:	de478793          	addi	a5,a5,-540 # 8003a9ac <xErrorDetected>
80007bd0:	00100713          	li	a4,1
80007bd4:	00e7a023          	sw	a4,0(a5)
		}

		( *puxLoopCounter )++;
80007bd8:	fd842783          	lw	a5,-40(s0)
80007bdc:	0007a783          	lw	a5,0(a5)
80007be0:	00178713          	addi	a4,a5,1
80007be4:	fd842783          	lw	a5,-40(s0)
80007be8:	00e7a023          	sw	a4,0(a5)
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
80007bec:	fec42783          	lw	a5,-20(s0)
80007bf0:	00178793          	addi	a5,a5,1
80007bf4:	fef42623          	sw	a5,-20(s0)
80007bf8:	fec42703          	lw	a4,-20(s0)
80007bfc:	0c700793          	li	a5,199
80007c00:	fae7f4e3          	bleu	a4,a5,80007ba8 <prvDecrementSemaphoreCount+0x50>
		taskYIELD();
	#endif

	/* If the semaphore count is zero then we should not be able to	'take' 
	the semaphore. */
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
80007c04:	00000693          	li	a3,0
80007c08:	00000613          	li	a2,0
80007c0c:	00000593          	li	a1,0
80007c10:	fdc42503          	lw	a0,-36(s0)
80007c14:	ff4f90ef          	jal	ra,80001408 <xQueueGenericReceive>
80007c18:	00050713          	mv	a4,a0
80007c1c:	00100793          	li	a5,1
80007c20:	00f71a63          	bne	a4,a5,80007c34 <prvDecrementSemaphoreCount+0xdc>
	{
		xErrorDetected = pdTRUE;
80007c24:	00033797          	auipc	a5,0x33
80007c28:	d8878793          	addi	a5,a5,-632 # 8003a9ac <xErrorDetected>
80007c2c:	00100713          	li	a4,1
80007c30:	00e7a023          	sw	a4,0(a5)
	}
}
80007c34:	00000013          	nop
80007c38:	02c12083          	lw	ra,44(sp)
80007c3c:	02812403          	lw	s0,40(sp)
80007c40:	03010113          	addi	sp,sp,48
80007c44:	00008067          	ret

80007c48 <prvIncrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvIncrementSemaphoreCount( SemaphoreHandle_t xSemaphore, UBaseType_t *puxLoopCounter )
{
80007c48:	fd010113          	addi	sp,sp,-48
80007c4c:	02112623          	sw	ra,44(sp)
80007c50:	02812423          	sw	s0,40(sp)
80007c54:	03010413          	addi	s0,sp,48
80007c58:	fca42e23          	sw	a0,-36(s0)
80007c5c:	fcb42c23          	sw	a1,-40(s0)
UBaseType_t ux;

	/* If the semaphore count is zero then we should not be able to	'take' 
	the semaphore. */
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
80007c60:	00000693          	li	a3,0
80007c64:	00000613          	li	a2,0
80007c68:	00000593          	li	a1,0
80007c6c:	fdc42503          	lw	a0,-36(s0)
80007c70:	f98f90ef          	jal	ra,80001408 <xQueueGenericReceive>
80007c74:	00050713          	mv	a4,a0
80007c78:	00100793          	li	a5,1
80007c7c:	00f71a63          	bne	a4,a5,80007c90 <prvIncrementSemaphoreCount+0x48>
	{
		xErrorDetected = pdTRUE;
80007c80:	00033797          	auipc	a5,0x33
80007c84:	d2c78793          	addi	a5,a5,-724 # 8003a9ac <xErrorDetected>
80007c88:	00100713          	li	a4,1
80007c8c:	00e7a023          	sw	a4,0(a5)
	}

	/* We should be able to 'give' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
80007c90:	fe042623          	sw	zero,-20(s0)
80007c94:	0540006f          	j	80007ce8 <prvIncrementSemaphoreCount+0xa0>
	{
		if( xSemaphoreGive( xSemaphore ) != pdPASS )
80007c98:	00000693          	li	a3,0
80007c9c:	00000613          	li	a2,0
80007ca0:	00000593          	li	a1,0
80007ca4:	fdc42503          	lw	a0,-36(s0)
80007ca8:	a70f90ef          	jal	ra,80000f18 <xQueueGenericSend>
80007cac:	00050713          	mv	a4,a0
80007cb0:	00100793          	li	a5,1
80007cb4:	00f70a63          	beq	a4,a5,80007cc8 <prvIncrementSemaphoreCount+0x80>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
80007cb8:	00033797          	auipc	a5,0x33
80007cbc:	cf478793          	addi	a5,a5,-780 # 8003a9ac <xErrorDetected>
80007cc0:	00100713          	li	a4,1
80007cc4:	00e7a023          	sw	a4,0(a5)
		}

		( *puxLoopCounter )++;
80007cc8:	fd842783          	lw	a5,-40(s0)
80007ccc:	0007a783          	lw	a5,0(a5)
80007cd0:	00178713          	addi	a4,a5,1
80007cd4:	fd842783          	lw	a5,-40(s0)
80007cd8:	00e7a023          	sw	a4,0(a5)
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
80007cdc:	fec42783          	lw	a5,-20(s0)
80007ce0:	00178793          	addi	a5,a5,1
80007ce4:	fef42623          	sw	a5,-20(s0)
80007ce8:	fec42703          	lw	a4,-20(s0)
80007cec:	0c700793          	li	a5,199
80007cf0:	fae7f4e3          	bleu	a4,a5,80007c98 <prvIncrementSemaphoreCount+0x50>
		taskYIELD();
	#endif

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
80007cf4:	00000693          	li	a3,0
80007cf8:	00000613          	li	a2,0
80007cfc:	00000593          	li	a1,0
80007d00:	fdc42503          	lw	a0,-36(s0)
80007d04:	a14f90ef          	jal	ra,80000f18 <xQueueGenericSend>
80007d08:	00050713          	mv	a4,a0
80007d0c:	00100793          	li	a5,1
80007d10:	00f71a63          	bne	a4,a5,80007d24 <prvIncrementSemaphoreCount+0xdc>
	{
		xErrorDetected = pdTRUE;
80007d14:	00033797          	auipc	a5,0x33
80007d18:	c9878793          	addi	a5,a5,-872 # 8003a9ac <xErrorDetected>
80007d1c:	00100713          	li	a4,1
80007d20:	00e7a023          	sw	a4,0(a5)
	}
}
80007d24:	00000013          	nop
80007d28:	02c12083          	lw	ra,44(sp)
80007d2c:	02812403          	lw	s0,40(sp)
80007d30:	03010113          	addi	sp,sp,48
80007d34:	00008067          	ret

80007d38 <prvCountingSemaphoreTask>:
/*-----------------------------------------------------------*/

static void prvCountingSemaphoreTask( void *pvParameters )
{
80007d38:	fd010113          	addi	sp,sp,-48
80007d3c:	02112623          	sw	ra,44(sp)
80007d40:	02812423          	sw	s0,40(sp)
80007d44:	03010413          	addi	s0,sp,48
80007d48:	fca42e23          	sw	a0,-36(s0)
		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	/* The semaphore to be used was passed as the parameter. */
	pxParameter = ( xCountSemStruct * ) pvParameters;
80007d4c:	fdc42783          	lw	a5,-36(s0)
80007d50:	fef42623          	sw	a5,-20(s0)

	/* Did we expect to find the semaphore already at its max count value, or
	at zero? */
	if( pxParameter->uxExpectedStartCount == countSTART_AT_MAX_COUNT )
80007d54:	fec42783          	lw	a5,-20(s0)
80007d58:	0047a703          	lw	a4,4(a5)
80007d5c:	0aa00793          	li	a5,170
80007d60:	02f71063          	bne	a4,a5,80007d80 <prvCountingSemaphoreTask+0x48>
	{
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
80007d64:	fec42783          	lw	a5,-20(s0)
80007d68:	0007a703          	lw	a4,0(a5)
80007d6c:	fec42783          	lw	a5,-20(s0)
80007d70:	00878793          	addi	a5,a5,8
80007d74:	00078593          	mv	a1,a5
80007d78:	00070513          	mv	a0,a4
80007d7c:	dddff0ef          	jal	ra,80007b58 <prvDecrementSemaphoreCount>
	}

	/* Now we expect the semaphore count to be 0, so this time there is an
	error if we can take the semaphore. */
	if( xSemaphoreTake( pxParameter->xSemaphore, 0 ) == pdPASS )
80007d80:	fec42783          	lw	a5,-20(s0)
80007d84:	0007a783          	lw	a5,0(a5)
80007d88:	00000693          	li	a3,0
80007d8c:	00000613          	li	a2,0
80007d90:	00000593          	li	a1,0
80007d94:	00078513          	mv	a0,a5
80007d98:	e70f90ef          	jal	ra,80001408 <xQueueGenericReceive>
80007d9c:	00050713          	mv	a4,a0
80007da0:	00100793          	li	a5,1
80007da4:	00f71a63          	bne	a4,a5,80007db8 <prvCountingSemaphoreTask+0x80>
	{
		xErrorDetected = pdTRUE;
80007da8:	00033797          	auipc	a5,0x33
80007dac:	c0478793          	addi	a5,a5,-1020 # 8003a9ac <xErrorDetected>
80007db0:	00100713          	li	a4,1
80007db4:	00e7a023          	sw	a4,0(a5)
	}

	for( ;; )
	{
		prvIncrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
80007db8:	fec42783          	lw	a5,-20(s0)
80007dbc:	0007a703          	lw	a4,0(a5)
80007dc0:	fec42783          	lw	a5,-20(s0)
80007dc4:	00878793          	addi	a5,a5,8
80007dc8:	00078593          	mv	a1,a5
80007dcc:	00070513          	mv	a0,a4
80007dd0:	e79ff0ef          	jal	ra,80007c48 <prvIncrementSemaphoreCount>
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
80007dd4:	fec42783          	lw	a5,-20(s0)
80007dd8:	0007a703          	lw	a4,0(a5)
80007ddc:	fec42783          	lw	a5,-20(s0)
80007de0:	00878793          	addi	a5,a5,8
80007de4:	00078593          	mv	a1,a5
80007de8:	00070513          	mv	a0,a4
80007dec:	d6dff0ef          	jal	ra,80007b58 <prvDecrementSemaphoreCount>
		prvIncrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
80007df0:	fc9ff06f          	j	80007db8 <prvCountingSemaphoreTask+0x80>

80007df4 <xAreCountingSemaphoreTasksStillRunning>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xAreCountingSemaphoreTasksStillRunning( void )
{
80007df4:	fe010113          	addi	sp,sp,-32
80007df8:	00812e23          	sw	s0,28(sp)
80007dfc:	02010413          	addi	s0,sp,32
static UBaseType_t uxLastCount0 = 0, uxLastCount1 = 0;
BaseType_t xReturn = pdPASS;
80007e00:	00100793          	li	a5,1
80007e04:	fef42623          	sw	a5,-20(s0)

	/* Return fail if any 'give' or 'take' did not result in the expected
	behaviour. */
	if( xErrorDetected != pdFALSE )
80007e08:	00033797          	auipc	a5,0x33
80007e0c:	ba478793          	addi	a5,a5,-1116 # 8003a9ac <xErrorDetected>
80007e10:	0007a783          	lw	a5,0(a5)
80007e14:	00078463          	beqz	a5,80007e1c <xAreCountingSemaphoreTasksStillRunning+0x28>
	{
		xReturn = pdFAIL;
80007e18:	fe042623          	sw	zero,-20(s0)
	}

	/* Return fail if either task is not still incrementing its loop counter. */
	if( uxLastCount0 == xParameters[ 0 ].uxLoopCounter )
80007e1c:	00033797          	auipc	a5,0x33
80007e20:	b9478793          	addi	a5,a5,-1132 # 8003a9b0 <xParameters>
80007e24:	0087a703          	lw	a4,8(a5)
80007e28:	00033797          	auipc	a5,0x33
80007e2c:	ba078793          	addi	a5,a5,-1120 # 8003a9c8 <uxLastCount0.1847>
80007e30:	0007a783          	lw	a5,0(a5)
80007e34:	00f71663          	bne	a4,a5,80007e40 <xAreCountingSemaphoreTasksStillRunning+0x4c>
	{
		xReturn = pdFAIL;
80007e38:	fe042623          	sw	zero,-20(s0)
80007e3c:	01c0006f          	j	80007e58 <xAreCountingSemaphoreTasksStillRunning+0x64>
	}
	else
	{
		uxLastCount0 = xParameters[ 0 ].uxLoopCounter;
80007e40:	00033797          	auipc	a5,0x33
80007e44:	b7078793          	addi	a5,a5,-1168 # 8003a9b0 <xParameters>
80007e48:	0087a703          	lw	a4,8(a5)
80007e4c:	00033797          	auipc	a5,0x33
80007e50:	b7c78793          	addi	a5,a5,-1156 # 8003a9c8 <uxLastCount0.1847>
80007e54:	00e7a023          	sw	a4,0(a5)
	}

	if( uxLastCount1 == xParameters[ 1 ].uxLoopCounter )
80007e58:	00033797          	auipc	a5,0x33
80007e5c:	b5878793          	addi	a5,a5,-1192 # 8003a9b0 <xParameters>
80007e60:	0147a703          	lw	a4,20(a5)
80007e64:	00033797          	auipc	a5,0x33
80007e68:	b6878793          	addi	a5,a5,-1176 # 8003a9cc <uxLastCount1.1848>
80007e6c:	0007a783          	lw	a5,0(a5)
80007e70:	00f71663          	bne	a4,a5,80007e7c <xAreCountingSemaphoreTasksStillRunning+0x88>
	{
		xReturn = pdFAIL;
80007e74:	fe042623          	sw	zero,-20(s0)
80007e78:	01c0006f          	j	80007e94 <xAreCountingSemaphoreTasksStillRunning+0xa0>
	}
	else
	{
		uxLastCount1 = xParameters[ 1 ].uxLoopCounter;
80007e7c:	00033797          	auipc	a5,0x33
80007e80:	b3478793          	addi	a5,a5,-1228 # 8003a9b0 <xParameters>
80007e84:	0147a703          	lw	a4,20(a5)
80007e88:	00033797          	auipc	a5,0x33
80007e8c:	b4478793          	addi	a5,a5,-1212 # 8003a9cc <uxLastCount1.1848>
80007e90:	00e7a023          	sw	a4,0(a5)
	}

	return xReturn;
80007e94:	fec42783          	lw	a5,-20(s0)
}
80007e98:	00078513          	mv	a0,a5
80007e9c:	01c12403          	lw	s0,28(sp)
80007ea0:	02010113          	addi	sp,sp,32
80007ea4:	00008067          	ret

80007ea8 <vStartRecursiveMutexTasks>:
static TaskHandle_t xControllingTaskHandle, xBlockingTaskHandle;

/*-----------------------------------------------------------*/

void vStartRecursiveMutexTasks( void )
{
80007ea8:	ff010113          	addi	sp,sp,-16
80007eac:	00112623          	sw	ra,12(sp)
80007eb0:	00812423          	sw	s0,8(sp)
80007eb4:	01010413          	addi	s0,sp,16
	/* Just creates the mutex and the three tasks. */

	xMutex = xSemaphoreCreateRecursiveMutex();
80007eb8:	00400513          	li	a0,4
80007ebc:	d99f80ef          	jal	ra,80000c54 <xQueueCreateMutex>
80007ec0:	00050713          	mv	a4,a0
80007ec4:	00033797          	auipc	a5,0x33
80007ec8:	b0c78793          	addi	a5,a5,-1268 # 8003a9d0 <xMutex>
80007ecc:	00e7a023          	sw	a4,0(a5)
	in use.  The registry is provided as a means for kernel aware
	debuggers to locate mutex and has no purpose if a kernel aware debugger
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
	defined to be less than 1. */
	vQueueAddToRegistry( ( QueueHandle_t ) xMutex, "Recursive_Mutex" );
80007ed0:	00033797          	auipc	a5,0x33
80007ed4:	b0078793          	addi	a5,a5,-1280 # 8003a9d0 <xMutex>
80007ed8:	0007a783          	lw	a5,0(a5)
80007edc:	00018597          	auipc	a1,0x18
80007ee0:	20458593          	addi	a1,a1,516 # 800200e0 <__rodata_start+0xe0>
80007ee4:	00078513          	mv	a0,a5
80007ee8:	fedf90ef          	jal	ra,80001ed4 <vQueueAddToRegistry>


	if( xMutex != NULL )
80007eec:	00033797          	auipc	a5,0x33
80007ef0:	ae478793          	addi	a5,a5,-1308 # 8003a9d0 <xMutex>
80007ef4:	0007a783          	lw	a5,0(a5)
80007ef8:	08078863          	beqz	a5,80007f88 <vStartRecursiveMutexTasks+0xe0>
	{
		xTaskCreate( prvRecursiveMutexControllingTask, "Rec1", configMINIMAL_STACK_SIZE, NULL, recmuCONTROLLING_TASK_PRIORITY, &xControllingTaskHandle );
80007efc:	00000893          	li	a7,0
80007f00:	00000813          	li	a6,0
80007f04:	00033797          	auipc	a5,0x33
80007f08:	ae878793          	addi	a5,a5,-1304 # 8003a9ec <xControllingTaskHandle>
80007f0c:	00200713          	li	a4,2
80007f10:	00000693          	li	a3,0
80007f14:	40000613          	li	a2,1024
80007f18:	00018597          	auipc	a1,0x18
80007f1c:	1d858593          	addi	a1,a1,472 # 800200f0 <__rodata_start+0xf0>
80007f20:	00000517          	auipc	a0,0x0
80007f24:	07c50513          	addi	a0,a0,124 # 80007f9c <prvRecursiveMutexControllingTask>
80007f28:	960fa0ef          	jal	ra,80002088 <xTaskGenericCreate>
        xTaskCreate( prvRecursiveMutexBlockingTask, "Rec2", configMINIMAL_STACK_SIZE, NULL, recmuBLOCKING_TASK_PRIORITY, &xBlockingTaskHandle );
80007f2c:	00000893          	li	a7,0
80007f30:	00000813          	li	a6,0
80007f34:	00033797          	auipc	a5,0x33
80007f38:	abc78793          	addi	a5,a5,-1348 # 8003a9f0 <xBlockingTaskHandle>
80007f3c:	00100713          	li	a4,1
80007f40:	00000693          	li	a3,0
80007f44:	40000613          	li	a2,1024
80007f48:	00018597          	auipc	a1,0x18
80007f4c:	1b058593          	addi	a1,a1,432 # 800200f8 <__rodata_start+0xf8>
80007f50:	00000517          	auipc	a0,0x0
80007f54:	1b850513          	addi	a0,a0,440 # 80008108 <prvRecursiveMutexBlockingTask>
80007f58:	930fa0ef          	jal	ra,80002088 <xTaskGenericCreate>
        xTaskCreate( prvRecursiveMutexPollingTask, "Rec3", configMINIMAL_STACK_SIZE, NULL, recmuPOLLING_TASK_PRIORITY, NULL );
80007f5c:	00000893          	li	a7,0
80007f60:	00000813          	li	a6,0
80007f64:	00000793          	li	a5,0
80007f68:	00000713          	li	a4,0
80007f6c:	00000693          	li	a3,0
80007f70:	40000613          	li	a2,1024
80007f74:	00018597          	auipc	a1,0x18
80007f78:	18c58593          	addi	a1,a1,396 # 80020100 <__rodata_start+0x100>
80007f7c:	00000517          	auipc	a0,0x0
80007f80:	2a450513          	addi	a0,a0,676 # 80008220 <prvRecursiveMutexPollingTask>
80007f84:	904fa0ef          	jal	ra,80002088 <xTaskGenericCreate>
	}
}
80007f88:	00000013          	nop
80007f8c:	00c12083          	lw	ra,12(sp)
80007f90:	00812403          	lw	s0,8(sp)
80007f94:	01010113          	addi	sp,sp,16
80007f98:	00008067          	ret

80007f9c <prvRecursiveMutexControllingTask>:
/*-----------------------------------------------------------*/

static void prvRecursiveMutexControllingTask( void *pvParameters )
{
80007f9c:	fd010113          	addi	sp,sp,-48
80007fa0:	02112623          	sw	ra,44(sp)
80007fa4:	02812423          	sw	s0,40(sp)
80007fa8:	03010413          	addi	s0,sp,48
80007fac:	fca42e23          	sw	a0,-36(s0)
	{
		/* Should not be able to 'give' the mutex, as we have not yet 'taken'
		it.   The first time through, the mutex will not have been used yet,
		subsequent times through, at this point the mutex will be held by the
		polling task. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
80007fb0:	00033797          	auipc	a5,0x33
80007fb4:	a2078793          	addi	a5,a5,-1504 # 8003a9d0 <xMutex>
80007fb8:	0007a783          	lw	a5,0(a5)
80007fbc:	00078513          	mv	a0,a5
80007fc0:	d6df80ef          	jal	ra,80000d2c <xQueueGiveMutexRecursive>
80007fc4:	00050713          	mv	a4,a0
80007fc8:	00100793          	li	a5,1
80007fcc:	00f71a63          	bne	a4,a5,80007fe0 <prvRecursiveMutexControllingTask+0x44>
		{
			xErrorOccurred = pdTRUE;
80007fd0:	00033797          	auipc	a5,0x33
80007fd4:	a0478793          	addi	a5,a5,-1532 # 8003a9d4 <xErrorOccurred>
80007fd8:	00100713          	li	a4,1
80007fdc:	00e7a023          	sw	a4,0(a5)
		}

		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
80007fe0:	fe042623          	sw	zero,-20(s0)
80007fe4:	04c0006f          	j	80008030 <prvRecursiveMutexControllingTask+0x94>
			at this point and this Take will cause the polling task to inherit
			the priority of this task.  In this case the block time must be
			long enough to ensure the polling task will execute again before the
			block time expires.  If the block time does expire then the error
			flag will be set here. */
			if( xSemaphoreTakeRecursive( xMutex, recmuEIGHT_TICK_DELAY ) != pdPASS )
80007fe8:	00033797          	auipc	a5,0x33
80007fec:	9e878793          	addi	a5,a5,-1560 # 8003a9d0 <xMutex>
80007ff0:	0007a783          	lw	a5,0(a5)
80007ff4:	00800593          	li	a1,8
80007ff8:	00078513          	mv	a0,a5
80007ffc:	dd5f80ef          	jal	ra,80000dd0 <xQueueTakeMutexRecursive>
80008000:	00050713          	mv	a4,a0
80008004:	00100793          	li	a5,1
80008008:	00f70a63          	beq	a4,a5,8000801c <prvRecursiveMutexControllingTask+0x80>
			{
				xErrorOccurred = pdTRUE;
8000800c:	00033797          	auipc	a5,0x33
80008010:	9c878793          	addi	a5,a5,-1592 # 8003a9d4 <xErrorOccurred>
80008014:	00100713          	li	a4,1
80008018:	00e7a023          	sw	a4,0(a5)

			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute to ensure they either block
			(where a block time is specified) or return an error (where no
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
8000801c:	01400513          	li	a0,20
80008020:	d4cfa0ef          	jal	ra,8000256c <vTaskDelay>
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
80008024:	fec42783          	lw	a5,-20(s0)
80008028:	00178793          	addi	a5,a5,1
8000802c:	fef42623          	sw	a5,-20(s0)
80008030:	fec42703          	lw	a4,-20(s0)
80008034:	00900793          	li	a5,9
80008038:	fae7f8e3          	bleu	a4,a5,80007fe8 <prvRecursiveMutexControllingTask+0x4c>
		}

		/* For each time we took the mutex, give it back. */
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
8000803c:	fe042623          	sw	zero,-20(s0)
80008040:	0480006f          	j	80008088 <prvRecursiveMutexControllingTask+0xec>
		{
			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute. */
			vTaskDelay( recmuSHORT_DELAY );
80008044:	01400513          	li	a0,20
80008048:	d24fa0ef          	jal	ra,8000256c <vTaskDelay>
			/* We should now be able to give the mutex as many times as we
			took it.  When the mutex is available again the Blocking task
			should be unblocked but not run because it has a lower priority
			than this task.  The polling task should also not run at this point
			as it too has a lower priority than this task. */
			if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
8000804c:	00033797          	auipc	a5,0x33
80008050:	98478793          	addi	a5,a5,-1660 # 8003a9d0 <xMutex>
80008054:	0007a783          	lw	a5,0(a5)
80008058:	00078513          	mv	a0,a5
8000805c:	cd1f80ef          	jal	ra,80000d2c <xQueueGiveMutexRecursive>
80008060:	00050713          	mv	a4,a0
80008064:	00100793          	li	a5,1
80008068:	00f70a63          	beq	a4,a5,8000807c <prvRecursiveMutexControllingTask+0xe0>
			{
				xErrorOccurred = pdTRUE;
8000806c:	00033797          	auipc	a5,0x33
80008070:	96878793          	addi	a5,a5,-1688 # 8003a9d4 <xErrorOccurred>
80008074:	00100713          	li	a4,1
80008078:	00e7a023          	sw	a4,0(a5)
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
8000807c:	fec42783          	lw	a5,-20(s0)
80008080:	00178793          	addi	a5,a5,1
80008084:	fef42623          	sw	a5,-20(s0)
80008088:	fec42703          	lw	a4,-20(s0)
8000808c:	00900793          	li	a5,9
80008090:	fae7fae3          	bleu	a4,a5,80008044 <prvRecursiveMutexControllingTask+0xa8>
			#endif
		}

		/* Having given it back the same number of times as it was taken, we
		should no longer be the mutex owner, so the next give should fail. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
80008094:	00033797          	auipc	a5,0x33
80008098:	93c78793          	addi	a5,a5,-1732 # 8003a9d0 <xMutex>
8000809c:	0007a783          	lw	a5,0(a5)
800080a0:	00078513          	mv	a0,a5
800080a4:	c89f80ef          	jal	ra,80000d2c <xQueueGiveMutexRecursive>
800080a8:	00050713          	mv	a4,a0
800080ac:	00100793          	li	a5,1
800080b0:	00f71a63          	bne	a4,a5,800080c4 <prvRecursiveMutexControllingTask+0x128>
		{
			xErrorOccurred = pdTRUE;
800080b4:	00033797          	auipc	a5,0x33
800080b8:	92078793          	addi	a5,a5,-1760 # 8003a9d4 <xErrorOccurred>
800080bc:	00100713          	li	a4,1
800080c0:	00e7a023          	sw	a4,0(a5)
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxControllingCycles++;
800080c4:	00033797          	auipc	a5,0x33
800080c8:	91c78793          	addi	a5,a5,-1764 # 8003a9e0 <uxControllingCycles>
800080cc:	0007a783          	lw	a5,0(a5)
800080d0:	00178713          	addi	a4,a5,1
800080d4:	00033797          	auipc	a5,0x33
800080d8:	90c78793          	addi	a5,a5,-1780 # 8003a9e0 <uxControllingCycles>
800080dc:	00e7a023          	sw	a4,0(a5)

		/* Suspend ourselves so the blocking task can execute. */
		xControllingIsSuspended = pdTRUE;
800080e0:	00033797          	auipc	a5,0x33
800080e4:	8f878793          	addi	a5,a5,-1800 # 8003a9d8 <xControllingIsSuspended>
800080e8:	00100713          	li	a4,1
800080ec:	00e7a023          	sw	a4,0(a5)
		vTaskSuspend( NULL );
800080f0:	00000513          	li	a0,0
800080f4:	8f5fa0ef          	jal	ra,800029e8 <vTaskSuspend>
		xControllingIsSuspended = pdFALSE;
800080f8:	00033797          	auipc	a5,0x33
800080fc:	8e078793          	addi	a5,a5,-1824 # 8003a9d8 <xControllingIsSuspended>
80008100:	0007a023          	sw	zero,0(a5)
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
80008104:	eadff06f          	j	80007fb0 <prvRecursiveMutexControllingTask+0x14>

80008108 <prvRecursiveMutexBlockingTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexBlockingTask( void *pvParameters )
{
80008108:	fe010113          	addi	sp,sp,-32
8000810c:	00112e23          	sw	ra,28(sp)
80008110:	00812c23          	sw	s0,24(sp)
80008114:	02010413          	addi	s0,sp,32
80008118:	fea42623          	sw	a0,-20(s0)
		this call should block until the controlling task has given up the
		mutex, and not actually execute	past this call until the controlling
		task is suspended.  portMAX_DELAY - 1 is used instead of portMAX_DELAY
		to ensure the task's state is reported as Blocked and not Suspended in
		a later call to configASSERT() (within the polling task). */
		if( xSemaphoreTakeRecursive( xMutex, ( portMAX_DELAY - 1 ) ) == pdPASS )
8000811c:	00033797          	auipc	a5,0x33
80008120:	8b478793          	addi	a5,a5,-1868 # 8003a9d0 <xMutex>
80008124:	0007a783          	lw	a5,0(a5)
80008128:	ffe00593          	li	a1,-2
8000812c:	00078513          	mv	a0,a5
80008130:	ca1f80ef          	jal	ra,80000dd0 <xQueueTakeMutexRecursive>
80008134:	00050713          	mv	a4,a0
80008138:	00100793          	li	a5,1
8000813c:	08f71263          	bne	a4,a5,800081c0 <prvRecursiveMutexBlockingTask+0xb8>
		{
			if( xControllingIsSuspended != pdTRUE )
80008140:	00033797          	auipc	a5,0x33
80008144:	89878793          	addi	a5,a5,-1896 # 8003a9d8 <xControllingIsSuspended>
80008148:	0007a703          	lw	a4,0(a5)
8000814c:	00100793          	li	a5,1
80008150:	00f70c63          	beq	a4,a5,80008168 <prvRecursiveMutexBlockingTask+0x60>
			{
				/* Did not expect to execute until the controlling task was
				suspended. */
				xErrorOccurred = pdTRUE;
80008154:	00033797          	auipc	a5,0x33
80008158:	88078793          	addi	a5,a5,-1920 # 8003a9d4 <xErrorOccurred>
8000815c:	00100713          	li	a4,1
80008160:	00e7a023          	sw	a4,0(a5)
80008164:	06c0006f          	j	800081d0 <prvRecursiveMutexBlockingTask+0xc8>
			}
			else
			{
				/* Give the mutex back before suspending ourselves to allow
				the polling task to obtain the mutex. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
80008168:	00033797          	auipc	a5,0x33
8000816c:	86878793          	addi	a5,a5,-1944 # 8003a9d0 <xMutex>
80008170:	0007a783          	lw	a5,0(a5)
80008174:	00078513          	mv	a0,a5
80008178:	bb5f80ef          	jal	ra,80000d2c <xQueueGiveMutexRecursive>
8000817c:	00050713          	mv	a4,a0
80008180:	00100793          	li	a5,1
80008184:	00f70a63          	beq	a4,a5,80008198 <prvRecursiveMutexBlockingTask+0x90>
				{
					xErrorOccurred = pdTRUE;
80008188:	00033797          	auipc	a5,0x33
8000818c:	84c78793          	addi	a5,a5,-1972 # 8003a9d4 <xErrorOccurred>
80008190:	00100713          	li	a4,1
80008194:	00e7a023          	sw	a4,0(a5)
				}

				xBlockingIsSuspended = pdTRUE;
80008198:	00033797          	auipc	a5,0x33
8000819c:	84478793          	addi	a5,a5,-1980 # 8003a9dc <xBlockingIsSuspended>
800081a0:	00100713          	li	a4,1
800081a4:	00e7a023          	sw	a4,0(a5)
				vTaskSuspend( NULL );
800081a8:	00000513          	li	a0,0
800081ac:	83dfa0ef          	jal	ra,800029e8 <vTaskSuspend>
				xBlockingIsSuspended = pdFALSE;
800081b0:	00033797          	auipc	a5,0x33
800081b4:	82c78793          	addi	a5,a5,-2004 # 8003a9dc <xBlockingIsSuspended>
800081b8:	0007a023          	sw	zero,0(a5)
800081bc:	0140006f          	j	800081d0 <prvRecursiveMutexBlockingTask+0xc8>
		}
		else
		{
			/* We should not leave the xSemaphoreTakeRecursive() function
			until the mutex was obtained. */
			xErrorOccurred = pdTRUE;
800081c0:	00033797          	auipc	a5,0x33
800081c4:	81478793          	addi	a5,a5,-2028 # 8003a9d4 <xErrorOccurred>
800081c8:	00100713          	li	a4,1
800081cc:	00e7a023          	sw	a4,0(a5)
		}

		/* The controlling and blocking tasks should be in lock step. */
		if( uxControllingCycles != ( uxBlockingCycles + 1 ) )
800081d0:	00033797          	auipc	a5,0x33
800081d4:	81478793          	addi	a5,a5,-2028 # 8003a9e4 <uxBlockingCycles>
800081d8:	0007a783          	lw	a5,0(a5)
800081dc:	00178713          	addi	a4,a5,1
800081e0:	00033797          	auipc	a5,0x33
800081e4:	80078793          	addi	a5,a5,-2048 # 8003a9e0 <uxControllingCycles>
800081e8:	0007a783          	lw	a5,0(a5)
800081ec:	00f70a63          	beq	a4,a5,80008200 <prvRecursiveMutexBlockingTask+0xf8>
		{
			xErrorOccurred = pdTRUE;
800081f0:	00032797          	auipc	a5,0x32
800081f4:	7e478793          	addi	a5,a5,2020 # 8003a9d4 <xErrorOccurred>
800081f8:	00100713          	li	a4,1
800081fc:	00e7a023          	sw	a4,0(a5)
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxBlockingCycles++;
80008200:	00032797          	auipc	a5,0x32
80008204:	7e478793          	addi	a5,a5,2020 # 8003a9e4 <uxBlockingCycles>
80008208:	0007a783          	lw	a5,0(a5)
8000820c:	00178713          	addi	a4,a5,1
80008210:	00032797          	auipc	a5,0x32
80008214:	7d478793          	addi	a5,a5,2004 # 8003a9e4 <uxBlockingCycles>
80008218:	00e7a023          	sw	a4,0(a5)
		if( xSemaphoreTakeRecursive( xMutex, ( portMAX_DELAY - 1 ) ) == pdPASS )
8000821c:	f01ff06f          	j	8000811c <prvRecursiveMutexBlockingTask+0x14>

80008220 <prvRecursiveMutexPollingTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexPollingTask( void *pvParameters )
{
80008220:	fe010113          	addi	sp,sp,-32
80008224:	00112e23          	sw	ra,28(sp)
80008228:	00812c23          	sw	s0,24(sp)
8000822c:	02010413          	addi	s0,sp,32
80008230:	fea42623          	sw	a0,-20(s0)
	for( ;; )
	{
		/* Keep attempting to obtain the mutex.  We should only obtain it when
		the blocking task has suspended itself, which in turn should only
		happen when the controlling task is also suspended. */
		if( xSemaphoreTakeRecursive( xMutex, recmuNO_DELAY ) == pdPASS )
80008234:	00032797          	auipc	a5,0x32
80008238:	79c78793          	addi	a5,a5,1948 # 8003a9d0 <xMutex>
8000823c:	0007a783          	lw	a5,0(a5)
80008240:	00000593          	li	a1,0
80008244:	00078513          	mv	a0,a5
80008248:	b89f80ef          	jal	ra,80000dd0 <xQueueTakeMutexRecursive>
8000824c:	00050713          	mv	a4,a0
80008250:	00100793          	li	a5,1
80008254:	fef710e3          	bne	a4,a5,80008234 <prvRecursiveMutexPollingTask+0x14>
		{
			#if( INCLUDE_eTaskGetState == 1 )
			{
				configASSERT( eTaskGetState( xControllingTaskHandle ) == eSuspended );
80008258:	00032797          	auipc	a5,0x32
8000825c:	79478793          	addi	a5,a5,1940 # 8003a9ec <xControllingTaskHandle>
80008260:	0007a783          	lw	a5,0(a5)
80008264:	00078513          	mv	a0,a5
80008268:	ba0fa0ef          	jal	ra,80002608 <eTaskGetState>
8000826c:	00050713          	mv	a4,a0
80008270:	00300793          	li	a5,3
80008274:	00f70663          	beq	a4,a5,80008280 <prvRecursiveMutexPollingTask+0x60>
80008278:	30007073          	csrci	mstatus,0
8000827c:	0000006f          	j	8000827c <prvRecursiveMutexPollingTask+0x5c>
				configASSERT( eTaskGetState( xBlockingTaskHandle ) == eSuspended );
80008280:	00032797          	auipc	a5,0x32
80008284:	77078793          	addi	a5,a5,1904 # 8003a9f0 <xBlockingTaskHandle>
80008288:	0007a783          	lw	a5,0(a5)
8000828c:	00078513          	mv	a0,a5
80008290:	b78fa0ef          	jal	ra,80002608 <eTaskGetState>
80008294:	00050713          	mv	a4,a0
80008298:	00300793          	li	a5,3
8000829c:	00f70663          	beq	a4,a5,800082a8 <prvRecursiveMutexPollingTask+0x88>
800082a0:	30007073          	csrci	mstatus,0
800082a4:	0000006f          	j	800082a4 <prvRecursiveMutexPollingTask+0x84>
			}
			#endif /* INCLUDE_eTaskGetState */

			/* Is the blocking task suspended? */
			if( ( xBlockingIsSuspended != pdTRUE ) || ( xControllingIsSuspended != pdTRUE ) )
800082a8:	00032797          	auipc	a5,0x32
800082ac:	73478793          	addi	a5,a5,1844 # 8003a9dc <xBlockingIsSuspended>
800082b0:	0007a703          	lw	a4,0(a5)
800082b4:	00100793          	li	a5,1
800082b8:	00f71c63          	bne	a4,a5,800082d0 <prvRecursiveMutexPollingTask+0xb0>
800082bc:	00032797          	auipc	a5,0x32
800082c0:	71c78793          	addi	a5,a5,1820 # 8003a9d8 <xControllingIsSuspended>
800082c4:	0007a703          	lw	a4,0(a5)
800082c8:	00100793          	li	a5,1
800082cc:	00f70c63          	beq	a4,a5,800082e4 <prvRecursiveMutexPollingTask+0xc4>
			{
				xErrorOccurred = pdTRUE;
800082d0:	00032797          	auipc	a5,0x32
800082d4:	70478793          	addi	a5,a5,1796 # 8003a9d4 <xErrorOccurred>
800082d8:	00100713          	li	a4,1
800082dc:	00e7a023          	sw	a4,0(a5)
800082e0:	1340006f          	j	80008414 <prvRecursiveMutexPollingTask+0x1f4>
			}
			else
			{
				/* Keep count of the number of cycles this task has performed
				so a stall can be detected. */
				uxPollingCycles++;
800082e4:	00032797          	auipc	a5,0x32
800082e8:	70478793          	addi	a5,a5,1796 # 8003a9e8 <uxPollingCycles>
800082ec:	0007a783          	lw	a5,0(a5)
800082f0:	00178713          	addi	a4,a5,1
800082f4:	00032797          	auipc	a5,0x32
800082f8:	6f478793          	addi	a5,a5,1780 # 8003a9e8 <uxPollingCycles>
800082fc:	00e7a023          	sw	a4,0(a5)
				will then inherit the higher priority.  The Blocking task will
				block indefinitely when it attempts to obtain the mutex, the
				Controlling task will only block for a fixed period and an
				error will be latched if the polling task has not returned the
				mutex by the time this fixed period has expired. */
				vTaskResume( xBlockingTaskHandle );
80008300:	00032797          	auipc	a5,0x32
80008304:	6f078793          	addi	a5,a5,1776 # 8003a9f0 <xBlockingTaskHandle>
80008308:	0007a783          	lw	a5,0(a5)
8000830c:	00078513          	mv	a0,a5
80008310:	89dfa0ef          	jal	ra,80002bac <vTaskResume>
				#if( configUSE_PREEMPTION == 0 )
					taskYIELD();
				#endif

				vTaskResume( xControllingTaskHandle );
80008314:	00032797          	auipc	a5,0x32
80008318:	6d878793          	addi	a5,a5,1752 # 8003a9ec <xControllingTaskHandle>
8000831c:	0007a783          	lw	a5,0(a5)
80008320:	00078513          	mv	a0,a5
80008324:	889fa0ef          	jal	ra,80002bac <vTaskResume>
					taskYIELD();
				#endif

				/* The other two tasks should now have executed and no longer
				be suspended. */
				if( ( xBlockingIsSuspended == pdTRUE ) || ( xControllingIsSuspended == pdTRUE ) )
80008328:	00032797          	auipc	a5,0x32
8000832c:	6b478793          	addi	a5,a5,1716 # 8003a9dc <xBlockingIsSuspended>
80008330:	0007a703          	lw	a4,0(a5)
80008334:	00100793          	li	a5,1
80008338:	00f70c63          	beq	a4,a5,80008350 <prvRecursiveMutexPollingTask+0x130>
8000833c:	00032797          	auipc	a5,0x32
80008340:	69c78793          	addi	a5,a5,1692 # 8003a9d8 <xControllingIsSuspended>
80008344:	0007a703          	lw	a4,0(a5)
80008348:	00100793          	li	a5,1
8000834c:	00f71a63          	bne	a4,a5,80008360 <prvRecursiveMutexPollingTask+0x140>
				{
					xErrorOccurred = pdTRUE;
80008350:	00032797          	auipc	a5,0x32
80008354:	68478793          	addi	a5,a5,1668 # 8003a9d4 <xErrorOccurred>
80008358:	00100713          	li	a4,1
8000835c:	00e7a023          	sw	a4,0(a5)
				}

				#if( INCLUDE_uxTaskPriorityGet == 1 )
				{
					/* Check priority inherited. */
					configASSERT( uxTaskPriorityGet( NULL ) == recmuCONTROLLING_TASK_PRIORITY );
80008360:	00000513          	li	a0,0
80008364:	ba4fa0ef          	jal	ra,80002708 <uxTaskPriorityGet>
80008368:	00050713          	mv	a4,a0
8000836c:	00200793          	li	a5,2
80008370:	00f70663          	beq	a4,a5,8000837c <prvRecursiveMutexPollingTask+0x15c>
80008374:	30007073          	csrci	mstatus,0
80008378:	0000006f          	j	80008378 <prvRecursiveMutexPollingTask+0x158>
				}
				#endif /* INCLUDE_uxTaskPriorityGet */

				#if( INCLUDE_eTaskGetState == 1 )
				{
					configASSERT( eTaskGetState( xControllingTaskHandle ) == eBlocked );
8000837c:	00032797          	auipc	a5,0x32
80008380:	67078793          	addi	a5,a5,1648 # 8003a9ec <xControllingTaskHandle>
80008384:	0007a783          	lw	a5,0(a5)
80008388:	00078513          	mv	a0,a5
8000838c:	a7cfa0ef          	jal	ra,80002608 <eTaskGetState>
80008390:	00050713          	mv	a4,a0
80008394:	00200793          	li	a5,2
80008398:	00f70663          	beq	a4,a5,800083a4 <prvRecursiveMutexPollingTask+0x184>
8000839c:	30007073          	csrci	mstatus,0
800083a0:	0000006f          	j	800083a0 <prvRecursiveMutexPollingTask+0x180>
					configASSERT( eTaskGetState( xBlockingTaskHandle ) == eBlocked );
800083a4:	00032797          	auipc	a5,0x32
800083a8:	64c78793          	addi	a5,a5,1612 # 8003a9f0 <xBlockingTaskHandle>
800083ac:	0007a783          	lw	a5,0(a5)
800083b0:	00078513          	mv	a0,a5
800083b4:	a54fa0ef          	jal	ra,80002608 <eTaskGetState>
800083b8:	00050713          	mv	a4,a0
800083bc:	00200793          	li	a5,2
800083c0:	00f70663          	beq	a4,a5,800083cc <prvRecursiveMutexPollingTask+0x1ac>
800083c4:	30007073          	csrci	mstatus,0
800083c8:	0000006f          	j	800083c8 <prvRecursiveMutexPollingTask+0x1a8>
				}
				#endif /* INCLUDE_eTaskGetState */

				/* Release the mutex, disinheriting the higher priority again. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
800083cc:	00032797          	auipc	a5,0x32
800083d0:	60478793          	addi	a5,a5,1540 # 8003a9d0 <xMutex>
800083d4:	0007a783          	lw	a5,0(a5)
800083d8:	00078513          	mv	a0,a5
800083dc:	951f80ef          	jal	ra,80000d2c <xQueueGiveMutexRecursive>
800083e0:	00050713          	mv	a4,a0
800083e4:	00100793          	li	a5,1
800083e8:	00f70a63          	beq	a4,a5,800083fc <prvRecursiveMutexPollingTask+0x1dc>
				{
					xErrorOccurred = pdTRUE;
800083ec:	00032797          	auipc	a5,0x32
800083f0:	5e878793          	addi	a5,a5,1512 # 8003a9d4 <xErrorOccurred>
800083f4:	00100713          	li	a4,1
800083f8:	00e7a023          	sw	a4,0(a5)
				}

				#if( INCLUDE_uxTaskPriorityGet == 1 )
				{
					/* Check priority disinherited. */
					configASSERT( uxTaskPriorityGet( NULL ) == recmuPOLLING_TASK_PRIORITY );
800083fc:	00000513          	li	a0,0
80008400:	b08fa0ef          	jal	ra,80002708 <uxTaskPriorityGet>
80008404:	00050793          	mv	a5,a0
80008408:	e20786e3          	beqz	a5,80008234 <prvRecursiveMutexPollingTask+0x14>
8000840c:	30007073          	csrci	mstatus,0
80008410:	0000006f          	j	80008410 <prvRecursiveMutexPollingTask+0x1f0>
		if( xSemaphoreTakeRecursive( xMutex, recmuNO_DELAY ) == pdPASS )
80008414:	e21ff06f          	j	80008234 <prvRecursiveMutexPollingTask+0x14>

80008418 <xAreRecursiveMutexTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreRecursiveMutexTasksStillRunning( void )
{
80008418:	fe010113          	addi	sp,sp,-32
8000841c:	00812e23          	sw	s0,28(sp)
80008420:	02010413          	addi	s0,sp,32
BaseType_t xReturn;
static UBaseType_t uxLastControllingCycles = 0, uxLastBlockingCycles = 0, uxLastPollingCycles = 0;

	/* Is the controlling task still cycling? */
	if( uxLastControllingCycles == uxControllingCycles )
80008424:	00032797          	auipc	a5,0x32
80008428:	5d078793          	addi	a5,a5,1488 # 8003a9f4 <uxLastControllingCycles.1852>
8000842c:	0007a703          	lw	a4,0(a5)
80008430:	00032797          	auipc	a5,0x32
80008434:	5b078793          	addi	a5,a5,1456 # 8003a9e0 <uxControllingCycles>
80008438:	0007a783          	lw	a5,0(a5)
8000843c:	00f71c63          	bne	a4,a5,80008454 <xAreRecursiveMutexTasksStillRunning+0x3c>
	{
		xErrorOccurred = pdTRUE;
80008440:	00032797          	auipc	a5,0x32
80008444:	59478793          	addi	a5,a5,1428 # 8003a9d4 <xErrorOccurred>
80008448:	00100713          	li	a4,1
8000844c:	00e7a023          	sw	a4,0(a5)
80008450:	01c0006f          	j	8000846c <xAreRecursiveMutexTasksStillRunning+0x54>
	}
	else
	{
		uxLastControllingCycles = uxControllingCycles;
80008454:	00032797          	auipc	a5,0x32
80008458:	58c78793          	addi	a5,a5,1420 # 8003a9e0 <uxControllingCycles>
8000845c:	0007a703          	lw	a4,0(a5)
80008460:	00032797          	auipc	a5,0x32
80008464:	59478793          	addi	a5,a5,1428 # 8003a9f4 <uxLastControllingCycles.1852>
80008468:	00e7a023          	sw	a4,0(a5)
	}

	/* Is the blocking task still cycling? */
	if( uxLastBlockingCycles == uxBlockingCycles )
8000846c:	00032797          	auipc	a5,0x32
80008470:	58c78793          	addi	a5,a5,1420 # 8003a9f8 <uxLastBlockingCycles.1853>
80008474:	0007a703          	lw	a4,0(a5)
80008478:	00032797          	auipc	a5,0x32
8000847c:	56c78793          	addi	a5,a5,1388 # 8003a9e4 <uxBlockingCycles>
80008480:	0007a783          	lw	a5,0(a5)
80008484:	00f71c63          	bne	a4,a5,8000849c <xAreRecursiveMutexTasksStillRunning+0x84>
	{
		xErrorOccurred = pdTRUE;
80008488:	00032797          	auipc	a5,0x32
8000848c:	54c78793          	addi	a5,a5,1356 # 8003a9d4 <xErrorOccurred>
80008490:	00100713          	li	a4,1
80008494:	00e7a023          	sw	a4,0(a5)
80008498:	01c0006f          	j	800084b4 <xAreRecursiveMutexTasksStillRunning+0x9c>
	}
	else
	{
		uxLastBlockingCycles = uxBlockingCycles;
8000849c:	00032797          	auipc	a5,0x32
800084a0:	54878793          	addi	a5,a5,1352 # 8003a9e4 <uxBlockingCycles>
800084a4:	0007a703          	lw	a4,0(a5)
800084a8:	00032797          	auipc	a5,0x32
800084ac:	55078793          	addi	a5,a5,1360 # 8003a9f8 <uxLastBlockingCycles.1853>
800084b0:	00e7a023          	sw	a4,0(a5)
	}

	/* Is the polling task still cycling? */
	if( uxLastPollingCycles == uxPollingCycles )
800084b4:	00032797          	auipc	a5,0x32
800084b8:	54878793          	addi	a5,a5,1352 # 8003a9fc <uxLastPollingCycles.1854>
800084bc:	0007a703          	lw	a4,0(a5)
800084c0:	00032797          	auipc	a5,0x32
800084c4:	52878793          	addi	a5,a5,1320 # 8003a9e8 <uxPollingCycles>
800084c8:	0007a783          	lw	a5,0(a5)
800084cc:	00f71c63          	bne	a4,a5,800084e4 <xAreRecursiveMutexTasksStillRunning+0xcc>
	{
		xErrorOccurred = pdTRUE;
800084d0:	00032797          	auipc	a5,0x32
800084d4:	50478793          	addi	a5,a5,1284 # 8003a9d4 <xErrorOccurred>
800084d8:	00100713          	li	a4,1
800084dc:	00e7a023          	sw	a4,0(a5)
800084e0:	01c0006f          	j	800084fc <xAreRecursiveMutexTasksStillRunning+0xe4>
	}
	else
	{
		uxLastPollingCycles = uxPollingCycles;
800084e4:	00032797          	auipc	a5,0x32
800084e8:	50478793          	addi	a5,a5,1284 # 8003a9e8 <uxPollingCycles>
800084ec:	0007a703          	lw	a4,0(a5)
800084f0:	00032797          	auipc	a5,0x32
800084f4:	50c78793          	addi	a5,a5,1292 # 8003a9fc <uxLastPollingCycles.1854>
800084f8:	00e7a023          	sw	a4,0(a5)
	}

	if( xErrorOccurred == pdTRUE )
800084fc:	00032797          	auipc	a5,0x32
80008500:	4d878793          	addi	a5,a5,1240 # 8003a9d4 <xErrorOccurred>
80008504:	0007a703          	lw	a4,0(a5)
80008508:	00100793          	li	a5,1
8000850c:	00f71663          	bne	a4,a5,80008518 <xAreRecursiveMutexTasksStillRunning+0x100>
	{
		xReturn = pdFAIL;
80008510:	fe042623          	sw	zero,-20(s0)
80008514:	00c0006f          	j	80008520 <xAreRecursiveMutexTasksStillRunning+0x108>
	}
	else
	{
		xReturn = pdPASS;
80008518:	00100793          	li	a5,1
8000851c:	fef42623          	sw	a5,-20(s0)
	}

	return xReturn;
80008520:	fec42783          	lw	a5,-20(s0)
}
80008524:	00078513          	mv	a0,a5
80008528:	01c12403          	lw	s0,28(sp)
8000852c:	02010113          	addi	sp,sp,32
80008530:	00008067          	ret

80008534 <__errno>:
80008534:	800217b7          	lui	a5,0x80021
80008538:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000853c:	00008067          	ret

80008540 <memcpy>:
80008540:	00a5c7b3          	xor	a5,a1,a0
80008544:	0037f793          	andi	a5,a5,3
80008548:	00c50733          	add	a4,a0,a2
8000854c:	00079663          	bnez	a5,80008558 <memcpy+0x18>
80008550:	00300793          	li	a5,3
80008554:	02c7e463          	bltu	a5,a2,8000857c <memcpy+0x3c>
80008558:	00050793          	mv	a5,a0
8000855c:	00e56c63          	bltu	a0,a4,80008574 <memcpy+0x34>
80008560:	00008067          	ret
80008564:	0005c683          	lbu	a3,0(a1)
80008568:	00178793          	addi	a5,a5,1
8000856c:	00158593          	addi	a1,a1,1
80008570:	fed78fa3          	sb	a3,-1(a5)
80008574:	fee7e8e3          	bltu	a5,a4,80008564 <memcpy+0x24>
80008578:	00008067          	ret
8000857c:	00357793          	andi	a5,a0,3
80008580:	08079263          	bnez	a5,80008604 <memcpy+0xc4>
80008584:	00050793          	mv	a5,a0
80008588:	ffc77693          	andi	a3,a4,-4
8000858c:	fe068613          	addi	a2,a3,-32
80008590:	08c7f663          	bleu	a2,a5,8000861c <memcpy+0xdc>
80008594:	0005a383          	lw	t2,0(a1)
80008598:	0045a283          	lw	t0,4(a1)
8000859c:	0085af83          	lw	t6,8(a1)
800085a0:	00c5af03          	lw	t5,12(a1)
800085a4:	0105ae83          	lw	t4,16(a1)
800085a8:	0145ae03          	lw	t3,20(a1)
800085ac:	0185a303          	lw	t1,24(a1)
800085b0:	01c5a883          	lw	a7,28(a1)
800085b4:	02458593          	addi	a1,a1,36
800085b8:	02478793          	addi	a5,a5,36
800085bc:	ffc5a803          	lw	a6,-4(a1)
800085c0:	fc77ae23          	sw	t2,-36(a5)
800085c4:	fe57a023          	sw	t0,-32(a5)
800085c8:	fff7a223          	sw	t6,-28(a5)
800085cc:	ffe7a423          	sw	t5,-24(a5)
800085d0:	ffd7a623          	sw	t4,-20(a5)
800085d4:	ffc7a823          	sw	t3,-16(a5)
800085d8:	fe67aa23          	sw	t1,-12(a5)
800085dc:	ff17ac23          	sw	a7,-8(a5)
800085e0:	ff07ae23          	sw	a6,-4(a5)
800085e4:	fadff06f          	j	80008590 <memcpy+0x50>
800085e8:	0005c683          	lbu	a3,0(a1)
800085ec:	00178793          	addi	a5,a5,1
800085f0:	00158593          	addi	a1,a1,1
800085f4:	fed78fa3          	sb	a3,-1(a5)
800085f8:	0037f693          	andi	a3,a5,3
800085fc:	fe0696e3          	bnez	a3,800085e8 <memcpy+0xa8>
80008600:	f89ff06f          	j	80008588 <memcpy+0x48>
80008604:	00050793          	mv	a5,a0
80008608:	ff1ff06f          	j	800085f8 <memcpy+0xb8>
8000860c:	0005a603          	lw	a2,0(a1)
80008610:	00478793          	addi	a5,a5,4
80008614:	00458593          	addi	a1,a1,4
80008618:	fec7ae23          	sw	a2,-4(a5)
8000861c:	fed7e8e3          	bltu	a5,a3,8000860c <memcpy+0xcc>
80008620:	f4e7eae3          	bltu	a5,a4,80008574 <memcpy+0x34>
80008624:	00008067          	ret

80008628 <memset>:
80008628:	00f00313          	li	t1,15
8000862c:	00050713          	mv	a4,a0
80008630:	02c37e63          	bleu	a2,t1,8000866c <memset+0x44>
80008634:	00f77793          	andi	a5,a4,15
80008638:	0a079063          	bnez	a5,800086d8 <memset+0xb0>
8000863c:	08059263          	bnez	a1,800086c0 <memset+0x98>
80008640:	ff067693          	andi	a3,a2,-16
80008644:	00f67613          	andi	a2,a2,15
80008648:	00e686b3          	add	a3,a3,a4
8000864c:	00b72023          	sw	a1,0(a4)
80008650:	00b72223          	sw	a1,4(a4)
80008654:	00b72423          	sw	a1,8(a4)
80008658:	00b72623          	sw	a1,12(a4)
8000865c:	01070713          	addi	a4,a4,16
80008660:	fed766e3          	bltu	a4,a3,8000864c <memset+0x24>
80008664:	00061463          	bnez	a2,8000866c <memset+0x44>
80008668:	00008067          	ret
8000866c:	40c306b3          	sub	a3,t1,a2
80008670:	00269693          	slli	a3,a3,0x2
80008674:	00000297          	auipc	t0,0x0
80008678:	005686b3          	add	a3,a3,t0
8000867c:	00c68067          	jr	12(a3)
80008680:	00b70723          	sb	a1,14(a4)
80008684:	00b706a3          	sb	a1,13(a4)
80008688:	00b70623          	sb	a1,12(a4)
8000868c:	00b705a3          	sb	a1,11(a4)
80008690:	00b70523          	sb	a1,10(a4)
80008694:	00b704a3          	sb	a1,9(a4)
80008698:	00b70423          	sb	a1,8(a4)
8000869c:	00b703a3          	sb	a1,7(a4)
800086a0:	00b70323          	sb	a1,6(a4)
800086a4:	00b702a3          	sb	a1,5(a4)
800086a8:	00b70223          	sb	a1,4(a4)
800086ac:	00b701a3          	sb	a1,3(a4)
800086b0:	00b70123          	sb	a1,2(a4)
800086b4:	00b700a3          	sb	a1,1(a4)
800086b8:	00b70023          	sb	a1,0(a4)
800086bc:	00008067          	ret
800086c0:	0ff5f593          	andi	a1,a1,255
800086c4:	00859693          	slli	a3,a1,0x8
800086c8:	00d5e5b3          	or	a1,a1,a3
800086cc:	01059693          	slli	a3,a1,0x10
800086d0:	00d5e5b3          	or	a1,a1,a3
800086d4:	f6dff06f          	j	80008640 <memset+0x18>
800086d8:	00279693          	slli	a3,a5,0x2
800086dc:	00000297          	auipc	t0,0x0
800086e0:	005686b3          	add	a3,a3,t0
800086e4:	00008293          	mv	t0,ra
800086e8:	fa0680e7          	jalr	-96(a3)
800086ec:	00028093          	mv	ra,t0
800086f0:	ff078793          	addi	a5,a5,-16
800086f4:	40f70733          	sub	a4,a4,a5
800086f8:	00f60633          	add	a2,a2,a5
800086fc:	f6c378e3          	bleu	a2,t1,8000866c <memset+0x44>
80008700:	f3dff06f          	j	8000863c <memset+0x14>

80008704 <_printf_r>:
80008704:	fc010113          	addi	sp,sp,-64
80008708:	02c12423          	sw	a2,40(sp)
8000870c:	02d12623          	sw	a3,44(sp)
80008710:	02e12823          	sw	a4,48(sp)
80008714:	02f12a23          	sw	a5,52(sp)
80008718:	03012c23          	sw	a6,56(sp)
8000871c:	03112e23          	sw	a7,60(sp)
80008720:	00058613          	mv	a2,a1
80008724:	00852583          	lw	a1,8(a0)
80008728:	02810693          	addi	a3,sp,40
8000872c:	00112e23          	sw	ra,28(sp)
80008730:	00d12623          	sw	a3,12(sp)
80008734:	060000ef          	jal	ra,80008794 <_vfprintf_r>
80008738:	01c12083          	lw	ra,28(sp)
8000873c:	04010113          	addi	sp,sp,64
80008740:	00008067          	ret

80008744 <printf>:
80008744:	fc010113          	addi	sp,sp,-64
80008748:	02f12a23          	sw	a5,52(sp)
8000874c:	800217b7          	lui	a5,0x80021
80008750:	e647a783          	lw	a5,-412(a5) # 80020e64 <__stack+0xfffe4398>
80008754:	02c12423          	sw	a2,40(sp)
80008758:	02d12623          	sw	a3,44(sp)
8000875c:	02b12223          	sw	a1,36(sp)
80008760:	02e12823          	sw	a4,48(sp)
80008764:	03012c23          	sw	a6,56(sp)
80008768:	03112e23          	sw	a7,60(sp)
8000876c:	0087a583          	lw	a1,8(a5)
80008770:	02410693          	addi	a3,sp,36
80008774:	00050613          	mv	a2,a0
80008778:	00078513          	mv	a0,a5
8000877c:	00112e23          	sw	ra,28(sp)
80008780:	00d12623          	sw	a3,12(sp)
80008784:	010000ef          	jal	ra,80008794 <_vfprintf_r>
80008788:	01c12083          	lw	ra,28(sp)
8000878c:	04010113          	addi	sp,sp,64
80008790:	00008067          	ret

80008794 <_vfprintf_r>:
80008794:	e2010113          	addi	sp,sp,-480
80008798:	1c112e23          	sw	ra,476(sp)
8000879c:	1c912a23          	sw	s1,468(sp)
800087a0:	1d212823          	sw	s2,464(sp)
800087a4:	1d312623          	sw	s3,460(sp)
800087a8:	1d512223          	sw	s5,452(sp)
800087ac:	00058913          	mv	s2,a1
800087b0:	00060493          	mv	s1,a2
800087b4:	00068a93          	mv	s5,a3
800087b8:	1c812c23          	sw	s0,472(sp)
800087bc:	1d412423          	sw	s4,456(sp)
800087c0:	1d612023          	sw	s6,448(sp)
800087c4:	1b712e23          	sw	s7,444(sp)
800087c8:	1b812c23          	sw	s8,440(sp)
800087cc:	1b912a23          	sw	s9,436(sp)
800087d0:	1ba12823          	sw	s10,432(sp)
800087d4:	1bb12623          	sw	s11,428(sp)
800087d8:	00050993          	mv	s3,a0
800087dc:	3a5040ef          	jal	ra,8000d380 <_localeconv_r>
800087e0:	00052783          	lw	a5,0(a0)
800087e4:	00078513          	mv	a0,a5
800087e8:	02f12a23          	sw	a5,52(sp)
800087ec:	069060ef          	jal	ra,8000f054 <strlen>
800087f0:	02a12023          	sw	a0,32(sp)
800087f4:	0e012023          	sw	zero,224(sp)
800087f8:	0e012223          	sw	zero,228(sp)
800087fc:	0e012423          	sw	zero,232(sp)
80008800:	0e012623          	sw	zero,236(sp)
80008804:	00098a63          	beqz	s3,80008818 <_vfprintf_r+0x84>
80008808:	0389a783          	lw	a5,56(s3)
8000880c:	00079663          	bnez	a5,80008818 <_vfprintf_r+0x84>
80008810:	00098513          	mv	a0,s3
80008814:	4c8020ef          	jal	ra,8000acdc <__sinit>
80008818:	00c91783          	lh	a5,12(s2)
8000881c:	01279713          	slli	a4,a5,0x12
80008820:	02074263          	bltz	a4,80008844 <_vfprintf_r+0xb0>
80008824:	000026b7          	lui	a3,0x2
80008828:	06492703          	lw	a4,100(s2)
8000882c:	00d7e7b3          	or	a5,a5,a3
80008830:	00f91623          	sh	a5,12(s2)
80008834:	ffffe7b7          	lui	a5,0xffffe
80008838:	fff78793          	addi	a5,a5,-1 # ffffdfff <__stack+0x7ffc1533>
8000883c:	00f777b3          	and	a5,a4,a5
80008840:	06f92223          	sw	a5,100(s2)
80008844:	00c95783          	lhu	a5,12(s2)
80008848:	0087f793          	andi	a5,a5,8
8000884c:	06078e63          	beqz	a5,800088c8 <_vfprintf_r+0x134>
80008850:	01092783          	lw	a5,16(s2)
80008854:	06078a63          	beqz	a5,800088c8 <_vfprintf_r+0x134>
80008858:	00c95783          	lhu	a5,12(s2)
8000885c:	00a00713          	li	a4,10
80008860:	01a7f793          	andi	a5,a5,26
80008864:	08e79063          	bne	a5,a4,800088e4 <_vfprintf_r+0x150>
80008868:	00e91783          	lh	a5,14(s2)
8000886c:	0607cc63          	bltz	a5,800088e4 <_vfprintf_r+0x150>
80008870:	000a8693          	mv	a3,s5
80008874:	00048613          	mv	a2,s1
80008878:	00090593          	mv	a1,s2
8000887c:	00098513          	mv	a0,s3
80008880:	6c5010ef          	jal	ra,8000a744 <__sbprintf>
80008884:	02a12223          	sw	a0,36(sp)
80008888:	1dc12083          	lw	ra,476(sp)
8000888c:	1d812403          	lw	s0,472(sp)
80008890:	02412503          	lw	a0,36(sp)
80008894:	1d412483          	lw	s1,468(sp)
80008898:	1d012903          	lw	s2,464(sp)
8000889c:	1cc12983          	lw	s3,460(sp)
800088a0:	1c812a03          	lw	s4,456(sp)
800088a4:	1c412a83          	lw	s5,452(sp)
800088a8:	1c012b03          	lw	s6,448(sp)
800088ac:	1bc12b83          	lw	s7,444(sp)
800088b0:	1b812c03          	lw	s8,440(sp)
800088b4:	1b412c83          	lw	s9,436(sp)
800088b8:	1b012d03          	lw	s10,432(sp)
800088bc:	1ac12d83          	lw	s11,428(sp)
800088c0:	1e010113          	addi	sp,sp,480
800088c4:	00008067          	ret
800088c8:	00090593          	mv	a1,s2
800088cc:	00098513          	mv	a0,s3
800088d0:	731010ef          	jal	ra,8000a800 <__swsetup_r>
800088d4:	f80502e3          	beqz	a0,80008858 <_vfprintf_r+0xc4>
800088d8:	fff00793          	li	a5,-1
800088dc:	02f12223          	sw	a5,36(sp)
800088e0:	fa9ff06f          	j	80008888 <_vfprintf_r+0xf4>
800088e4:	800207b7          	lui	a5,0x80020
800088e8:	10878793          	addi	a5,a5,264 # 80020108 <__stack+0xfffe363c>
800088ec:	04f12623          	sw	a5,76(sp)
800088f0:	800207b7          	lui	a5,0x80020
800088f4:	0fc10893          	addi	a7,sp,252
800088f8:	28478793          	addi	a5,a5,644 # 80020284 <__stack+0xfffe37b8>
800088fc:	0d112a23          	sw	a7,212(sp)
80008900:	0c012e23          	sw	zero,220(sp)
80008904:	0c012c23          	sw	zero,216(sp)
80008908:	00000a13          	li	s4,0
8000890c:	04012023          	sw	zero,64(sp)
80008910:	02012e23          	sw	zero,60(sp)
80008914:	00012823          	sw	zero,16(sp)
80008918:	02012823          	sw	zero,48(sp)
8000891c:	02012c23          	sw	zero,56(sp)
80008920:	02012223          	sw	zero,36(sp)
80008924:	00f12a23          	sw	a5,20(sp)
80008928:	00048413          	mv	s0,s1
8000892c:	02500713          	li	a4,37
80008930:	00044783          	lbu	a5,0(s0)
80008934:	00078463          	beqz	a5,8000893c <_vfprintf_r+0x1a8>
80008938:	0ce79063          	bne	a5,a4,800089f8 <_vfprintf_r+0x264>
8000893c:	40940b33          	sub	s6,s0,s1
80008940:	040b0a63          	beqz	s6,80008994 <_vfprintf_r+0x200>
80008944:	0dc12783          	lw	a5,220(sp)
80008948:	0098a023          	sw	s1,0(a7)
8000894c:	0168a223          	sw	s6,4(a7)
80008950:	016787b3          	add	a5,a5,s6
80008954:	0cf12e23          	sw	a5,220(sp)
80008958:	0d812783          	lw	a5,216(sp)
8000895c:	00700713          	li	a4,7
80008960:	00888893          	addi	a7,a7,8
80008964:	00178793          	addi	a5,a5,1
80008968:	0cf12c23          	sw	a5,216(sp)
8000896c:	00f75e63          	ble	a5,a4,80008988 <_vfprintf_r+0x1f4>
80008970:	0d410613          	addi	a2,sp,212
80008974:	00090593          	mv	a1,s2
80008978:	00098513          	mv	a0,s3
8000897c:	678080ef          	jal	ra,80010ff4 <__sprint_r>
80008980:	4e051663          	bnez	a0,80008e6c <_vfprintf_r+0x6d8>
80008984:	0fc10893          	addi	a7,sp,252
80008988:	02412783          	lw	a5,36(sp)
8000898c:	016787b3          	add	a5,a5,s6
80008990:	02f12223          	sw	a5,36(sp)
80008994:	00044783          	lbu	a5,0(s0)
80008998:	00079463          	bnez	a5,800089a0 <_vfprintf_r+0x20c>
8000899c:	5710106f          	j	8000a70c <_vfprintf_r+0x1f78>
800089a0:	00140793          	addi	a5,s0,1
800089a4:	00f12e23          	sw	a5,28(sp)
800089a8:	0a010ba3          	sb	zero,183(sp)
800089ac:	fff00b13          	li	s6,-1
800089b0:	02012423          	sw	zero,40(sp)
800089b4:	00000413          	li	s0,0
800089b8:	00a00c13          	li	s8,10
800089bc:	02a00b93          	li	s7,42
800089c0:	05a00613          	li	a2,90
800089c4:	00900713          	li	a4,9
800089c8:	01c12783          	lw	a5,28(sp)
800089cc:	0007cd03          	lbu	s10,0(a5)
800089d0:	00178793          	addi	a5,a5,1
800089d4:	00f12e23          	sw	a5,28(sp)
800089d8:	fe0d0793          	addi	a5,s10,-32
800089dc:	00f67463          	bleu	a5,a2,800089e4 <_vfprintf_r+0x250>
800089e0:	2600106f          	j	80009c40 <_vfprintf_r+0x14ac>
800089e4:	04c12683          	lw	a3,76(sp)
800089e8:	00279793          	slli	a5,a5,0x2
800089ec:	00d787b3          	add	a5,a5,a3
800089f0:	0007a783          	lw	a5,0(a5)
800089f4:	00078067          	jr	a5
800089f8:	00140413          	addi	s0,s0,1
800089fc:	f35ff06f          	j	80008930 <_vfprintf_r+0x19c>
80008a00:	800217b7          	lui	a5,0x80021
80008a04:	d9078793          	addi	a5,a5,-624 # 80020d90 <__stack+0xfffe42c4>
80008a08:	04f12023          	sw	a5,64(sp)
80008a0c:	02047793          	andi	a5,s0,32
80008a10:	00079463          	bnez	a5,80008a18 <_vfprintf_r+0x284>
80008a14:	0480106f          	j	80009a5c <_vfprintf_r+0x12c8>
80008a18:	007a8a93          	addi	s5,s5,7
80008a1c:	ff8afa93          	andi	s5,s5,-8
80008a20:	000aac83          	lw	s9,0(s5)
80008a24:	004aac03          	lw	s8,4(s5)
80008a28:	008a8793          	addi	a5,s5,8
80008a2c:	00f12c23          	sw	a5,24(sp)
80008a30:	00147793          	andi	a5,s0,1
80008a34:	00078e63          	beqz	a5,80008a50 <_vfprintf_r+0x2bc>
80008a38:	018ce7b3          	or	a5,s9,s8
80008a3c:	00078a63          	beqz	a5,80008a50 <_vfprintf_r+0x2bc>
80008a40:	03000793          	li	a5,48
80008a44:	0af10c23          	sb	a5,184(sp)
80008a48:	0ba10ca3          	sb	s10,185(sp)
80008a4c:	00246413          	ori	s0,s0,2
80008a50:	bff47413          	andi	s0,s0,-1025
80008a54:	00200793          	li	a5,2
80008a58:	4150006f          	j	8000966c <_vfprintf_r+0xed8>
80008a5c:	00098513          	mv	a0,s3
80008a60:	01112623          	sw	a7,12(sp)
80008a64:	11d040ef          	jal	ra,8000d380 <_localeconv_r>
80008a68:	00452783          	lw	a5,4(a0)
80008a6c:	00078513          	mv	a0,a5
80008a70:	02f12c23          	sw	a5,56(sp)
80008a74:	5e0060ef          	jal	ra,8000f054 <strlen>
80008a78:	02a12823          	sw	a0,48(sp)
80008a7c:	00098513          	mv	a0,s3
80008a80:	101040ef          	jal	ra,8000d380 <_localeconv_r>
80008a84:	00852783          	lw	a5,8(a0)
80008a88:	00c12883          	lw	a7,12(sp)
80008a8c:	00f12823          	sw	a5,16(sp)
80008a90:	03012783          	lw	a5,48(sp)
80008a94:	f20786e3          	beqz	a5,800089c0 <_vfprintf_r+0x22c>
80008a98:	01012783          	lw	a5,16(sp)
80008a9c:	f20782e3          	beqz	a5,800089c0 <_vfprintf_r+0x22c>
80008aa0:	0007c783          	lbu	a5,0(a5)
80008aa4:	f0078ee3          	beqz	a5,800089c0 <_vfprintf_r+0x22c>
80008aa8:	40046413          	ori	s0,s0,1024
80008aac:	f15ff06f          	j	800089c0 <_vfprintf_r+0x22c>
80008ab0:	0b714783          	lbu	a5,183(sp)
80008ab4:	f00796e3          	bnez	a5,800089c0 <_vfprintf_r+0x22c>
80008ab8:	02000793          	li	a5,32
80008abc:	0af10ba3          	sb	a5,183(sp)
80008ac0:	f01ff06f          	j	800089c0 <_vfprintf_r+0x22c>
80008ac4:	00146413          	ori	s0,s0,1
80008ac8:	ef9ff06f          	j	800089c0 <_vfprintf_r+0x22c>
80008acc:	000aa783          	lw	a5,0(s5)
80008ad0:	004a8a93          	addi	s5,s5,4
80008ad4:	02f12423          	sw	a5,40(sp)
80008ad8:	ee07d4e3          	bgez	a5,800089c0 <_vfprintf_r+0x22c>
80008adc:	40f007b3          	neg	a5,a5
80008ae0:	02f12423          	sw	a5,40(sp)
80008ae4:	00446413          	ori	s0,s0,4
80008ae8:	ed9ff06f          	j	800089c0 <_vfprintf_r+0x22c>
80008aec:	02b00793          	li	a5,43
80008af0:	fcdff06f          	j	80008abc <_vfprintf_r+0x328>
80008af4:	01c12683          	lw	a3,28(sp)
80008af8:	01c12783          	lw	a5,28(sp)
80008afc:	0006cd03          	lbu	s10,0(a3) # 2000 <_HEAP_SIZE+0x1000>
80008b00:	00178793          	addi	a5,a5,1
80008b04:	037d1e63          	bne	s10,s7,80008b40 <_vfprintf_r+0x3ac>
80008b08:	000aab03          	lw	s6,0(s5)
80008b0c:	004a8713          	addi	a4,s5,4
80008b10:	000b5463          	bgez	s6,80008b18 <_vfprintf_r+0x384>
80008b14:	fff00b13          	li	s6,-1
80008b18:	00070a93          	mv	s5,a4
80008b1c:	00f12e23          	sw	a5,28(sp)
80008b20:	ea1ff06f          	j	800089c0 <_vfprintf_r+0x22c>
80008b24:	038b0333          	mul	t1,s6,s8
80008b28:	00178793          	addi	a5,a5,1
80008b2c:	fff7cd03          	lbu	s10,-1(a5)
80008b30:	00d30b33          	add	s6,t1,a3
80008b34:	fd0d0693          	addi	a3,s10,-48
80008b38:	fed776e3          	bleu	a3,a4,80008b24 <_vfprintf_r+0x390>
80008b3c:	e99ff06f          	j	800089d4 <_vfprintf_r+0x240>
80008b40:	00000b13          	li	s6,0
80008b44:	ff1ff06f          	j	80008b34 <_vfprintf_r+0x3a0>
80008b48:	08046413          	ori	s0,s0,128
80008b4c:	e75ff06f          	j	800089c0 <_vfprintf_r+0x22c>
80008b50:	01c12783          	lw	a5,28(sp)
80008b54:	02012423          	sw	zero,40(sp)
80008b58:	02812683          	lw	a3,40(sp)
80008b5c:	fd0d0d13          	addi	s10,s10,-48
80008b60:	00178793          	addi	a5,a5,1
80008b64:	038686b3          	mul	a3,a3,s8
80008b68:	00dd06b3          	add	a3,s10,a3
80008b6c:	fff7cd03          	lbu	s10,-1(a5)
80008b70:	02d12423          	sw	a3,40(sp)
80008b74:	fd0d0693          	addi	a3,s10,-48
80008b78:	fed770e3          	bleu	a3,a4,80008b58 <_vfprintf_r+0x3c4>
80008b7c:	e59ff06f          	j	800089d4 <_vfprintf_r+0x240>
80008b80:	00846413          	ori	s0,s0,8
80008b84:	e3dff06f          	j	800089c0 <_vfprintf_r+0x22c>
80008b88:	01c12783          	lw	a5,28(sp)
80008b8c:	0007c703          	lbu	a4,0(a5)
80008b90:	06800793          	li	a5,104
80008b94:	00f71c63          	bne	a4,a5,80008bac <_vfprintf_r+0x418>
80008b98:	01c12783          	lw	a5,28(sp)
80008b9c:	20046413          	ori	s0,s0,512
80008ba0:	00178793          	addi	a5,a5,1
80008ba4:	00f12e23          	sw	a5,28(sp)
80008ba8:	e19ff06f          	j	800089c0 <_vfprintf_r+0x22c>
80008bac:	04046413          	ori	s0,s0,64
80008bb0:	e11ff06f          	j	800089c0 <_vfprintf_r+0x22c>
80008bb4:	01c12783          	lw	a5,28(sp)
80008bb8:	0007c703          	lbu	a4,0(a5)
80008bbc:	06c00793          	li	a5,108
80008bc0:	00f71c63          	bne	a4,a5,80008bd8 <_vfprintf_r+0x444>
80008bc4:	01c12783          	lw	a5,28(sp)
80008bc8:	00178793          	addi	a5,a5,1
80008bcc:	00f12e23          	sw	a5,28(sp)
80008bd0:	02046413          	ori	s0,s0,32
80008bd4:	dedff06f          	j	800089c0 <_vfprintf_r+0x22c>
80008bd8:	01046413          	ori	s0,s0,16
80008bdc:	de5ff06f          	j	800089c0 <_vfprintf_r+0x22c>
80008be0:	004a8793          	addi	a5,s5,4
80008be4:	00f12c23          	sw	a5,24(sp)
80008be8:	000aa783          	lw	a5,0(s5)
80008bec:	0a010ba3          	sb	zero,183(sp)
80008bf0:	12f10e23          	sb	a5,316(sp)
80008bf4:	00012623          	sw	zero,12(sp)
80008bf8:	00100b13          	li	s6,1
80008bfc:	00000a93          	li	s5,0
80008c00:	00000c13          	li	s8,0
80008c04:	00000b93          	li	s7,0
80008c08:	00000c93          	li	s9,0
80008c0c:	13c10493          	addi	s1,sp,316
80008c10:	3650006f          	j	80009774 <_vfprintf_r+0xfe0>
80008c14:	01046413          	ori	s0,s0,16
80008c18:	02047793          	andi	a5,s0,32
80008c1c:	04078e63          	beqz	a5,80008c78 <_vfprintf_r+0x4e4>
80008c20:	007a8a93          	addi	s5,s5,7
80008c24:	ff8afa93          	andi	s5,s5,-8
80008c28:	000aac83          	lw	s9,0(s5)
80008c2c:	004aac03          	lw	s8,4(s5)
80008c30:	008a8793          	addi	a5,s5,8
80008c34:	00f12c23          	sw	a5,24(sp)
80008c38:	000c5e63          	bgez	s8,80008c54 <_vfprintf_r+0x4c0>
80008c3c:	41900cb3          	neg	s9,s9
80008c40:	019037b3          	snez	a5,s9
80008c44:	41800c33          	neg	s8,s8
80008c48:	40fc0c33          	sub	s8,s8,a5
80008c4c:	02d00793          	li	a5,45
80008c50:	0af10ba3          	sb	a5,183(sp)
80008c54:	fff00793          	li	a5,-1
80008c58:	64fb10e3          	bne	s6,a5,80009a98 <_vfprintf_r+0x1304>
80008c5c:	6c0c12e3          	bnez	s8,80009b20 <_vfprintf_r+0x138c>
80008c60:	00900793          	li	a5,9
80008c64:	6b97eee3          	bltu	a5,s9,80009b20 <_vfprintf_r+0x138c>
80008c68:	030c8c93          	addi	s9,s9,48
80008c6c:	19910fa3          	sb	s9,415(sp)
80008c70:	19f10493          	addi	s1,sp,415
80008c74:	6850006f          	j	80009af8 <_vfprintf_r+0x1364>
80008c78:	004a8793          	addi	a5,s5,4
80008c7c:	00f12c23          	sw	a5,24(sp)
80008c80:	01047793          	andi	a5,s0,16
80008c84:	00078863          	beqz	a5,80008c94 <_vfprintf_r+0x500>
80008c88:	000aac83          	lw	s9,0(s5)
80008c8c:	41fcdc13          	srai	s8,s9,0x1f
80008c90:	fa9ff06f          	j	80008c38 <_vfprintf_r+0x4a4>
80008c94:	04047793          	andi	a5,s0,64
80008c98:	000aac83          	lw	s9,0(s5)
80008c9c:	00078863          	beqz	a5,80008cac <_vfprintf_r+0x518>
80008ca0:	010c9c93          	slli	s9,s9,0x10
80008ca4:	410cdc93          	srai	s9,s9,0x10
80008ca8:	fe5ff06f          	j	80008c8c <_vfprintf_r+0x4f8>
80008cac:	20047793          	andi	a5,s0,512
80008cb0:	fc078ee3          	beqz	a5,80008c8c <_vfprintf_r+0x4f8>
80008cb4:	018c9c93          	slli	s9,s9,0x18
80008cb8:	418cdc93          	srai	s9,s9,0x18
80008cbc:	fd1ff06f          	j	80008c8c <_vfprintf_r+0x4f8>
80008cc0:	00847793          	andi	a5,s0,8
80008cc4:	0a078e63          	beqz	a5,80008d80 <_vfprintf_r+0x5ec>
80008cc8:	004a8793          	addi	a5,s5,4
80008ccc:	00f12c23          	sw	a5,24(sp)
80008cd0:	000aa783          	lw	a5,0(s5)
80008cd4:	0007a603          	lw	a2,0(a5)
80008cd8:	0047a683          	lw	a3,4(a5)
80008cdc:	0087a703          	lw	a4,8(a5)
80008ce0:	00c7a783          	lw	a5,12(a5)
80008ce4:	0ec12023          	sw	a2,224(sp)
80008ce8:	0ed12223          	sw	a3,228(sp)
80008cec:	0ee12423          	sw	a4,232(sp)
80008cf0:	0ef12623          	sw	a5,236(sp)
80008cf4:	0e010513          	addi	a0,sp,224
80008cf8:	01112623          	sw	a7,12(sp)
80008cfc:	618040ef          	jal	ra,8000d314 <_ldcheck>
80008d00:	0aa12e23          	sw	a0,188(sp)
80008d04:	00200793          	li	a5,2
80008d08:	00c12883          	lw	a7,12(sp)
80008d0c:	0cf51663          	bne	a0,a5,80008dd8 <_vfprintf_r+0x644>
80008d10:	0e012783          	lw	a5,224(sp)
80008d14:	09010593          	addi	a1,sp,144
80008d18:	0a010513          	addi	a0,sp,160
80008d1c:	0af12023          	sw	a5,160(sp)
80008d20:	0e412783          	lw	a5,228(sp)
80008d24:	08012823          	sw	zero,144(sp)
80008d28:	08012a23          	sw	zero,148(sp)
80008d2c:	0af12223          	sw	a5,164(sp)
80008d30:	0e812783          	lw	a5,232(sp)
80008d34:	08012c23          	sw	zero,152(sp)
80008d38:	08012e23          	sw	zero,156(sp)
80008d3c:	0af12423          	sw	a5,168(sp)
80008d40:	0ec12783          	lw	a5,236(sp)
80008d44:	0af12623          	sw	a5,172(sp)
80008d48:	0c10c0ef          	jal	ra,80015608 <__letf2>
80008d4c:	00c12883          	lw	a7,12(sp)
80008d50:	00055663          	bgez	a0,80008d5c <_vfprintf_r+0x5c8>
80008d54:	02d00793          	li	a5,45
80008d58:	0af10ba3          	sb	a5,183(sp)
80008d5c:	04700793          	li	a5,71
80008d60:	07a7c663          	blt	a5,s10,80008dcc <_vfprintf_r+0x638>
80008d64:	800214b7          	lui	s1,0x80021
80008d68:	d6c48493          	addi	s1,s1,-660 # 80020d6c <__stack+0xfffe42a0>
80008d6c:	f7f47413          	andi	s0,s0,-129
80008d70:	00012623          	sw	zero,12(sp)
80008d74:	00300b13          	li	s6,3
80008d78:	00000a93          	li	s5,0
80008d7c:	58d0006f          	j	80009b08 <_vfprintf_r+0x1374>
80008d80:	007a8a93          	addi	s5,s5,7
80008d84:	ff8afa93          	andi	s5,s5,-8
80008d88:	000aa583          	lw	a1,0(s5)
80008d8c:	004aa603          	lw	a2,4(s5)
80008d90:	008a8793          	addi	a5,s5,8
80008d94:	0a010513          	addi	a0,sp,160
80008d98:	01112623          	sw	a7,12(sp)
80008d9c:	00f12c23          	sw	a5,24(sp)
80008da0:	1a80f0ef          	jal	ra,80017f48 <__extenddftf2>
80008da4:	0a012783          	lw	a5,160(sp)
80008da8:	00c12883          	lw	a7,12(sp)
80008dac:	0ef12023          	sw	a5,224(sp)
80008db0:	0a412783          	lw	a5,164(sp)
80008db4:	0ef12223          	sw	a5,228(sp)
80008db8:	0a812783          	lw	a5,168(sp)
80008dbc:	0ef12423          	sw	a5,232(sp)
80008dc0:	0ac12783          	lw	a5,172(sp)
80008dc4:	0ef12623          	sw	a5,236(sp)
80008dc8:	f2dff06f          	j	80008cf4 <_vfprintf_r+0x560>
80008dcc:	800214b7          	lui	s1,0x80021
80008dd0:	d7048493          	addi	s1,s1,-656 # 80020d70 <__stack+0xfffe42a4>
80008dd4:	f99ff06f          	j	80008d6c <_vfprintf_r+0x5d8>
80008dd8:	00100793          	li	a5,1
80008ddc:	02f51a63          	bne	a0,a5,80008e10 <_vfprintf_r+0x67c>
80008de0:	0ec12783          	lw	a5,236(sp)
80008de4:	0007d663          	bgez	a5,80008df0 <_vfprintf_r+0x65c>
80008de8:	02d00793          	li	a5,45
80008dec:	0af10ba3          	sb	a5,183(sp)
80008df0:	04700793          	li	a5,71
80008df4:	01a7c863          	blt	a5,s10,80008e04 <_vfprintf_r+0x670>
80008df8:	800214b7          	lui	s1,0x80021
80008dfc:	d7448493          	addi	s1,s1,-652 # 80020d74 <__stack+0xfffe42a8>
80008e00:	f6dff06f          	j	80008d6c <_vfprintf_r+0x5d8>
80008e04:	800214b7          	lui	s1,0x80021
80008e08:	d7848493          	addi	s1,s1,-648 # 80020d78 <__stack+0xfffe42ac>
80008e0c:	f61ff06f          	j	80008d6c <_vfprintf_r+0x5d8>
80008e10:	fdfd7b93          	andi	s7,s10,-33
80008e14:	04100793          	li	a5,65
80008e18:	06fb9263          	bne	s7,a5,80008e7c <_vfprintf_r+0x6e8>
80008e1c:	03000793          	li	a5,48
80008e20:	0af10c23          	sb	a5,184(sp)
80008e24:	06100713          	li	a4,97
80008e28:	05800793          	li	a5,88
80008e2c:	00ed1463          	bne	s10,a4,80008e34 <_vfprintf_r+0x6a0>
80008e30:	07800793          	li	a5,120
80008e34:	0af10ca3          	sb	a5,185(sp)
80008e38:	06300793          	li	a5,99
80008e3c:	00246413          	ori	s0,s0,2
80008e40:	4b67d463          	ble	s6,a5,800092e8 <_vfprintf_r+0xb54>
80008e44:	001b0593          	addi	a1,s6,1
80008e48:	00098513          	mv	a0,s3
80008e4c:	01112623          	sw	a7,12(sp)
80008e50:	7cc040ef          	jal	ra,8000d61c <_malloc_r>
80008e54:	00050493          	mv	s1,a0
80008e58:	00c12883          	lw	a7,12(sp)
80008e5c:	48051c63          	bnez	a0,800092f4 <_vfprintf_r+0xb60>
80008e60:	00c95783          	lhu	a5,12(s2)
80008e64:	0407e793          	ori	a5,a5,64
80008e68:	00f91623          	sh	a5,12(s2)
80008e6c:	00c95783          	lhu	a5,12(s2)
80008e70:	0407f793          	andi	a5,a5,64
80008e74:	a0078ae3          	beqz	a5,80008888 <_vfprintf_r+0xf4>
80008e78:	a61ff06f          	j	800088d8 <_vfprintf_r+0x144>
80008e7c:	fff00793          	li	a5,-1
80008e80:	46fb0e63          	beq	s6,a5,800092fc <_vfprintf_r+0xb68>
80008e84:	04700793          	li	a5,71
80008e88:	00012623          	sw	zero,12(sp)
80008e8c:	00fb9463          	bne	s7,a5,80008e94 <_vfprintf_r+0x700>
80008e90:	460b0c63          	beqz	s6,80009308 <_vfprintf_r+0xb74>
80008e94:	0ec12a03          	lw	s4,236(sp)
80008e98:	10046793          	ori	a5,s0,256
80008e9c:	02f12623          	sw	a5,44(sp)
80008ea0:	04012223          	sw	zero,68(sp)
80008ea4:	0e012e03          	lw	t3,224(sp)
80008ea8:	0e412d83          	lw	s11,228(sp)
80008eac:	0e812c83          	lw	s9,232(sp)
80008eb0:	000a5a63          	bgez	s4,80008ec4 <_vfprintf_r+0x730>
80008eb4:	800007b7          	lui	a5,0x80000
80008eb8:	0147ca33          	xor	s4,a5,s4
80008ebc:	02d00793          	li	a5,45
80008ec0:	04f12223          	sw	a5,68(sp)
80008ec4:	04100793          	li	a5,65
80008ec8:	48fb9a63          	bne	s7,a5,8000935c <_vfprintf_r+0xbc8>
80008ecc:	0a010513          	addi	a0,sp,160
80008ed0:	05112c23          	sw	a7,88(sp)
80008ed4:	0bc12023          	sw	t3,160(sp)
80008ed8:	0b912423          	sw	s9,168(sp)
80008edc:	0bb12223          	sw	s11,164(sp)
80008ee0:	0b412623          	sw	s4,172(sp)
80008ee4:	2880f0ef          	jal	ra,8001816c <__trunctfdf2>
80008ee8:	0bc10613          	addi	a2,sp,188
80008eec:	50d050ef          	jal	ra,8000ebf8 <frexp>
80008ef0:	00058613          	mv	a2,a1
80008ef4:	00050593          	mv	a1,a0
80008ef8:	0a010513          	addi	a0,sp,160
80008efc:	04c0f0ef          	jal	ra,80017f48 <__extenddftf2>
80008f00:	0a012783          	lw	a5,160(sp)
80008f04:	07010613          	addi	a2,sp,112
80008f08:	08010593          	addi	a1,sp,128
80008f0c:	08f12023          	sw	a5,128(sp)
80008f10:	0a412783          	lw	a5,164(sp)
80008f14:	09010513          	addi	a0,sp,144
80008f18:	06012823          	sw	zero,112(sp)
80008f1c:	08f12223          	sw	a5,132(sp)
80008f20:	0a812783          	lw	a5,168(sp)
80008f24:	06012a23          	sw	zero,116(sp)
80008f28:	06012c23          	sw	zero,120(sp)
80008f2c:	08f12423          	sw	a5,136(sp)
80008f30:	0ac12783          	lw	a5,172(sp)
80008f34:	08f12623          	sw	a5,140(sp)
80008f38:	3ffc07b7          	lui	a5,0x3ffc0
80008f3c:	06f12e23          	sw	a5,124(sp)
80008f40:	0290c0ef          	jal	ra,80015768 <__multf3>
80008f44:	09012803          	lw	a6,144(sp)
80008f48:	09412603          	lw	a2,148(sp)
80008f4c:	09812683          	lw	a3,152(sp)
80008f50:	09c12c83          	lw	s9,156(sp)
80008f54:	09010593          	addi	a1,sp,144
80008f58:	0a010513          	addi	a0,sp,160
80008f5c:	0b012023          	sw	a6,160(sp)
80008f60:	05012a23          	sw	a6,84(sp)
80008f64:	0ac12223          	sw	a2,164(sp)
80008f68:	04c12823          	sw	a2,80(sp)
80008f6c:	0ad12423          	sw	a3,168(sp)
80008f70:	04d12423          	sw	a3,72(sp)
80008f74:	0b912623          	sw	s9,172(sp)
80008f78:	08012823          	sw	zero,144(sp)
80008f7c:	08012a23          	sw	zero,148(sp)
80008f80:	08012c23          	sw	zero,152(sp)
80008f84:	08012e23          	sw	zero,156(sp)
80008f88:	4540c0ef          	jal	ra,800153dc <__eqtf2>
80008f8c:	04812683          	lw	a3,72(sp)
80008f90:	05012603          	lw	a2,80(sp)
80008f94:	05412803          	lw	a6,84(sp)
80008f98:	05812883          	lw	a7,88(sp)
80008f9c:	00051663          	bnez	a0,80008fa8 <_vfprintf_r+0x814>
80008fa0:	00100713          	li	a4,1
80008fa4:	0ae12e23          	sw	a4,188(sp)
80008fa8:	06100713          	li	a4,97
80008fac:	36ed1463          	bne	s10,a4,80009314 <_vfprintf_r+0xb80>
80008fb0:	80021c37          	lui	s8,0x80021
80008fb4:	d7cc0c13          	addi	s8,s8,-644 # 80020d7c <__stack+0xfffe42b0>
80008fb8:	fffb0e13          	addi	t3,s6,-1
80008fbc:	00048d93          	mv	s11,s1
80008fc0:	400307b7          	lui	a5,0x40030
80008fc4:	09010593          	addi	a1,sp,144
80008fc8:	08c12a23          	sw	a2,148(sp)
80008fcc:	0a010513          	addi	a0,sp,160
80008fd0:	08010613          	addi	a2,sp,128
80008fd4:	05112c23          	sw	a7,88(sp)
80008fd8:	05c12a23          	sw	t3,84(sp)
80008fdc:	09012823          	sw	a6,144(sp)
80008fe0:	08f12623          	sw	a5,140(sp)
80008fe4:	08d12c23          	sw	a3,152(sp)
80008fe8:	09912e23          	sw	s9,156(sp)
80008fec:	08012023          	sw	zero,128(sp)
80008ff0:	08012223          	sw	zero,132(sp)
80008ff4:	08012423          	sw	zero,136(sp)
80008ff8:	7700c0ef          	jal	ra,80015768 <__multf3>
80008ffc:	0a012603          	lw	a2,160(sp)
80009000:	0a412683          	lw	a3,164(sp)
80009004:	0a010513          	addi	a0,sp,160
80009008:	04c12823          	sw	a2,80(sp)
8000900c:	04d12423          	sw	a3,72(sp)
80009010:	4550e0ef          	jal	ra,80017c64 <__fixtfsi>
80009014:	00050593          	mv	a1,a0
80009018:	00050a13          	mv	s4,a0
8000901c:	0a010513          	addi	a0,sp,160
80009020:	0a812c83          	lw	s9,168(sp)
80009024:	0ac12a83          	lw	s5,172(sp)
80009028:	5a10e0ef          	jal	ra,80017dc8 <__floatsitf>
8000902c:	0a012783          	lw	a5,160(sp)
80009030:	05012603          	lw	a2,80(sp)
80009034:	04812683          	lw	a3,72(sp)
80009038:	06f12823          	sw	a5,112(sp)
8000903c:	0a412783          	lw	a5,164(sp)
80009040:	08c12023          	sw	a2,128(sp)
80009044:	08010593          	addi	a1,sp,128
80009048:	06f12a23          	sw	a5,116(sp)
8000904c:	0a812783          	lw	a5,168(sp)
80009050:	07010613          	addi	a2,sp,112
80009054:	09010513          	addi	a0,sp,144
80009058:	06f12c23          	sw	a5,120(sp)
8000905c:	0ac12783          	lw	a5,172(sp)
80009060:	09912423          	sw	s9,136(sp)
80009064:	09512623          	sw	s5,140(sp)
80009068:	06f12e23          	sw	a5,124(sp)
8000906c:	08d12223          	sw	a3,132(sp)
80009070:	7340d0ef          	jal	ra,800167a4 <__subtf3>
80009074:	014c05b3          	add	a1,s8,s4
80009078:	0005c583          	lbu	a1,0(a1)
8000907c:	05412e03          	lw	t3,84(sp)
80009080:	09c12a83          	lw	s5,156(sp)
80009084:	001d8d93          	addi	s11,s11,1
80009088:	09012283          	lw	t0,144(sp)
8000908c:	09412f83          	lw	t6,148(sp)
80009090:	09812f03          	lw	t5,152(sp)
80009094:	05c12423          	sw	t3,72(sp)
80009098:	febd8fa3          	sb	a1,-1(s11)
8000909c:	fff00793          	li	a5,-1
800090a0:	000a8c93          	mv	s9,s5
800090a4:	05812883          	lw	a7,88(sp)
800090a8:	06fe0c63          	beq	t3,a5,80009120 <_vfprintf_r+0x98c>
800090ac:	fffe0e13          	addi	t3,t3,-1
800090b0:	09010593          	addi	a1,sp,144
800090b4:	0a010513          	addi	a0,sp,160
800090b8:	07e12623          	sw	t5,108(sp)
800090bc:	07f12423          	sw	t6,104(sp)
800090c0:	06512223          	sw	t0,100(sp)
800090c4:	07112023          	sw	a7,96(sp)
800090c8:	05c12e23          	sw	t3,92(sp)
800090cc:	0a512023          	sw	t0,160(sp)
800090d0:	04512c23          	sw	t0,88(sp)
800090d4:	0bf12223          	sw	t6,164(sp)
800090d8:	05f12a23          	sw	t6,84(sp)
800090dc:	0be12423          	sw	t5,168(sp)
800090e0:	05e12823          	sw	t5,80(sp)
800090e4:	0b512623          	sw	s5,172(sp)
800090e8:	08012823          	sw	zero,144(sp)
800090ec:	08012a23          	sw	zero,148(sp)
800090f0:	08012c23          	sw	zero,152(sp)
800090f4:	08012e23          	sw	zero,156(sp)
800090f8:	2e40c0ef          	jal	ra,800153dc <__eqtf2>
800090fc:	05012683          	lw	a3,80(sp)
80009100:	05412603          	lw	a2,84(sp)
80009104:	05812803          	lw	a6,88(sp)
80009108:	05c12e03          	lw	t3,92(sp)
8000910c:	06012883          	lw	a7,96(sp)
80009110:	06412283          	lw	t0,100(sp)
80009114:	06812f83          	lw	t6,104(sp)
80009118:	06c12f03          	lw	t5,108(sp)
8000911c:	ea0512e3          	bnez	a0,80008fc0 <_vfprintf_r+0x82c>
80009120:	3ffe0cb7          	lui	s9,0x3ffe0
80009124:	09010593          	addi	a1,sp,144
80009128:	0a010513          	addi	a0,sp,160
8000912c:	05112823          	sw	a7,80(sp)
80009130:	0a512023          	sw	t0,160(sp)
80009134:	04512e23          	sw	t0,92(sp)
80009138:	0bf12223          	sw	t6,164(sp)
8000913c:	05f12c23          	sw	t6,88(sp)
80009140:	0be12423          	sw	t5,168(sp)
80009144:	05e12a23          	sw	t5,84(sp)
80009148:	0b512623          	sw	s5,172(sp)
8000914c:	08012823          	sw	zero,144(sp)
80009150:	08012a23          	sw	zero,148(sp)
80009154:	08012c23          	sw	zero,152(sp)
80009158:	09912e23          	sw	s9,156(sp)
8000915c:	34c0c0ef          	jal	ra,800154a8 <__getf2>
80009160:	05012883          	lw	a7,80(sp)
80009164:	04a04663          	bgtz	a0,800091b0 <_vfprintf_r+0xa1c>
80009168:	05c12283          	lw	t0,92(sp)
8000916c:	05812f83          	lw	t6,88(sp)
80009170:	05412f03          	lw	t5,84(sp)
80009174:	09010593          	addi	a1,sp,144
80009178:	0a010513          	addi	a0,sp,160
8000917c:	0a512023          	sw	t0,160(sp)
80009180:	0bf12223          	sw	t6,164(sp)
80009184:	0be12423          	sw	t5,168(sp)
80009188:	0b512623          	sw	s5,172(sp)
8000918c:	08012823          	sw	zero,144(sp)
80009190:	08012a23          	sw	zero,148(sp)
80009194:	08012c23          	sw	zero,152(sp)
80009198:	09912e23          	sw	s9,156(sp)
8000919c:	2400c0ef          	jal	ra,800153dc <__eqtf2>
800091a0:	05012883          	lw	a7,80(sp)
800091a4:	1a051263          	bnez	a0,80009348 <_vfprintf_r+0xbb4>
800091a8:	001a7a13          	andi	s4,s4,1
800091ac:	180a0e63          	beqz	s4,80009348 <_vfprintf_r+0xbb4>
800091b0:	00fc4603          	lbu	a2,15(s8)
800091b4:	0db12623          	sw	s11,204(sp)
800091b8:	03000593          	li	a1,48
800091bc:	0cc12683          	lw	a3,204(sp)
800091c0:	fff68793          	addi	a5,a3,-1
800091c4:	0cf12623          	sw	a5,204(sp)
800091c8:	fff6c783          	lbu	a5,-1(a3)
800091cc:	14c78a63          	beq	a5,a2,80009320 <_vfprintf_r+0xb8c>
800091d0:	03900613          	li	a2,57
800091d4:	14c79a63          	bne	a5,a2,80009328 <_vfprintf_r+0xb94>
800091d8:	00ac4783          	lbu	a5,10(s8)
800091dc:	fef68fa3          	sb	a5,-1(a3)
800091e0:	000d8a13          	mv	s4,s11
800091e4:	04700713          	li	a4,71
800091e8:	409a0a33          	sub	s4,s4,s1
800091ec:	0bc12c83          	lw	s9,188(sp)
800091f0:	2aeb9863          	bne	s7,a4,800094a0 <_vfprintf_r+0xd0c>
800091f4:	ffd00713          	li	a4,-3
800091f8:	00ecc463          	blt	s9,a4,80009200 <_vfprintf_r+0xa6c>
800091fc:	339b5463          	ble	s9,s6,80009524 <_vfprintf_r+0xd90>
80009200:	ffed0d13          	addi	s10,s10,-2
80009204:	fffc8693          	addi	a3,s9,-1 # 3ffdffff <_HEAP_SIZE+0x3ffdefff>
80009208:	0ad12e23          	sw	a3,188(sp)
8000920c:	fdfd7613          	andi	a2,s10,-33
80009210:	04100513          	li	a0,65
80009214:	0ffd7713          	andi	a4,s10,255
80009218:	00000593          	li	a1,0
8000921c:	00a61863          	bne	a2,a0,8000922c <_vfprintf_r+0xa98>
80009220:	00f70713          	addi	a4,a4,15
80009224:	0ff77713          	andi	a4,a4,255
80009228:	00100593          	li	a1,1
8000922c:	0ce10223          	sb	a4,196(sp)
80009230:	02b00793          	li	a5,43
80009234:	0006d863          	bgez	a3,80009244 <_vfprintf_r+0xab0>
80009238:	00100693          	li	a3,1
8000923c:	419686b3          	sub	a3,a3,s9
80009240:	02d00793          	li	a5,45
80009244:	0cf102a3          	sb	a5,197(sp)
80009248:	00900793          	li	a5,9
8000924c:	28d7de63          	ble	a3,a5,800094e8 <_vfprintf_r+0xd54>
80009250:	0d310713          	addi	a4,sp,211
80009254:	00070513          	mv	a0,a4
80009258:	00a00593          	li	a1,10
8000925c:	00900813          	li	a6,9
80009260:	02b6e7b3          	rem	a5,a3,a1
80009264:	fff70613          	addi	a2,a4,-1
80009268:	02b6c6b3          	div	a3,a3,a1
8000926c:	03078793          	addi	a5,a5,48 # 40030030 <_HEAP_SIZE+0x4002f030>
80009270:	fef70fa3          	sb	a5,-1(a4)
80009274:	24d84c63          	blt	a6,a3,800094cc <_vfprintf_r+0xd38>
80009278:	03068793          	addi	a5,a3,48
8000927c:	fef60fa3          	sb	a5,-1(a2)
80009280:	ffe70713          	addi	a4,a4,-2
80009284:	0c610613          	addi	a2,sp,198
80009288:	24a76663          	bltu	a4,a0,800094d4 <_vfprintf_r+0xd40>
8000928c:	0c410793          	addi	a5,sp,196
80009290:	40f607b3          	sub	a5,a2,a5
80009294:	02f12e23          	sw	a5,60(sp)
80009298:	01478b33          	add	s6,a5,s4
8000929c:	00100793          	li	a5,1
800092a0:	0147c663          	blt	a5,s4,800092ac <_vfprintf_r+0xb18>
800092a4:	00147793          	andi	a5,s0,1
800092a8:	00078663          	beqz	a5,800092b4 <_vfprintf_r+0xb20>
800092ac:	02012783          	lw	a5,32(sp)
800092b0:	00fb0b33          	add	s6,s6,a5
800092b4:	bff47413          	andi	s0,s0,-1025
800092b8:	10046793          	ori	a5,s0,256
800092bc:	02f12623          	sw	a5,44(sp)
800092c0:	00000c13          	li	s8,0
800092c4:	00000b93          	li	s7,0
800092c8:	00000c93          	li	s9,0
800092cc:	04412783          	lw	a5,68(sp)
800092d0:	00078663          	beqz	a5,800092dc <_vfprintf_r+0xb48>
800092d4:	02d00713          	li	a4,45
800092d8:	0ae10ba3          	sb	a4,183(sp)
800092dc:	02c12403          	lw	s0,44(sp)
800092e0:	00000a93          	li	s5,0
800092e4:	4900006f          	j	80009774 <_vfprintf_r+0xfe0>
800092e8:	00012623          	sw	zero,12(sp)
800092ec:	13c10493          	addi	s1,sp,316
800092f0:	ba5ff06f          	j	80008e94 <_vfprintf_r+0x700>
800092f4:	00a12623          	sw	a0,12(sp)
800092f8:	b9dff06f          	j	80008e94 <_vfprintf_r+0x700>
800092fc:	00012623          	sw	zero,12(sp)
80009300:	00600b13          	li	s6,6
80009304:	b91ff06f          	j	80008e94 <_vfprintf_r+0x700>
80009308:	01612623          	sw	s6,12(sp)
8000930c:	00100b13          	li	s6,1
80009310:	b85ff06f          	j	80008e94 <_vfprintf_r+0x700>
80009314:	80021c37          	lui	s8,0x80021
80009318:	d90c0c13          	addi	s8,s8,-624 # 80020d90 <__stack+0xfffe42c4>
8000931c:	c9dff06f          	j	80008fb8 <_vfprintf_r+0x824>
80009320:	feb68fa3          	sb	a1,-1(a3)
80009324:	e99ff06f          	j	800091bc <_vfprintf_r+0xa28>
80009328:	00178793          	addi	a5,a5,1
8000932c:	0ff7f793          	andi	a5,a5,255
80009330:	eadff06f          	j	800091dc <_vfprintf_r+0xa48>
80009334:	001a0a13          	addi	s4,s4,1
80009338:	feea0fa3          	sb	a4,-1(s4)
8000933c:	414a87b3          	sub	a5,s5,s4
80009340:	fe07dae3          	bgez	a5,80009334 <_vfprintf_r+0xba0>
80009344:	ea1ff06f          	j	800091e4 <_vfprintf_r+0xa50>
80009348:	04812783          	lw	a5,72(sp)
8000934c:	000d8a13          	mv	s4,s11
80009350:	03000713          	li	a4,48
80009354:	00fd8ab3          	add	s5,s11,a5
80009358:	fe5ff06f          	j	8000933c <_vfprintf_r+0xba8>
8000935c:	04600793          	li	a5,70
80009360:	00fb8e63          	beq	s7,a5,8000937c <_vfprintf_r+0xbe8>
80009364:	04500793          	li	a5,69
80009368:	001b0a93          	addi	s5,s6,1
8000936c:	00fb8463          	beq	s7,a5,80009374 <_vfprintf_r+0xbe0>
80009370:	000b0a93          	mv	s5,s6
80009374:	00200613          	li	a2,2
80009378:	00c0006f          	j	80009384 <_vfprintf_r+0xbf0>
8000937c:	000b0a93          	mv	s5,s6
80009380:	00300613          	li	a2,3
80009384:	0c010793          	addi	a5,sp,192
80009388:	0cc10813          	addi	a6,sp,204
8000938c:	0bc10713          	addi	a4,sp,188
80009390:	000a8693          	mv	a3,s5
80009394:	0a010593          	addi	a1,sp,160
80009398:	00098513          	mv	a0,s3
8000939c:	05112823          	sw	a7,80(sp)
800093a0:	0bc12023          	sw	t3,160(sp)
800093a4:	05c12423          	sw	t3,72(sp)
800093a8:	0bb12223          	sw	s11,164(sp)
800093ac:	0b912423          	sw	s9,168(sp)
800093b0:	0b412623          	sw	s4,172(sp)
800093b4:	314030ef          	jal	ra,8000c6c8 <_ldtoa_r>
800093b8:	04700793          	li	a5,71
800093bc:	00050493          	mv	s1,a0
800093c0:	04812e03          	lw	t3,72(sp)
800093c4:	05012883          	lw	a7,80(sp)
800093c8:	00fb9663          	bne	s7,a5,800093d4 <_vfprintf_r+0xc40>
800093cc:	00147793          	andi	a5,s0,1
800093d0:	0a078863          	beqz	a5,80009480 <_vfprintf_r+0xcec>
800093d4:	04600793          	li	a5,70
800093d8:	01548c33          	add	s8,s1,s5
800093dc:	06fb9263          	bne	s7,a5,80009440 <_vfprintf_r+0xcac>
800093e0:	0004c703          	lbu	a4,0(s1)
800093e4:	03000793          	li	a5,48
800093e8:	04f71863          	bne	a4,a5,80009438 <_vfprintf_r+0xca4>
800093ec:	09010593          	addi	a1,sp,144
800093f0:	0a010513          	addi	a0,sp,160
800093f4:	05112823          	sw	a7,80(sp)
800093f8:	0bc12023          	sw	t3,160(sp)
800093fc:	05c12423          	sw	t3,72(sp)
80009400:	0bb12223          	sw	s11,164(sp)
80009404:	0b912423          	sw	s9,168(sp)
80009408:	0b412623          	sw	s4,172(sp)
8000940c:	08012823          	sw	zero,144(sp)
80009410:	08012a23          	sw	zero,148(sp)
80009414:	08012c23          	sw	zero,152(sp)
80009418:	08012e23          	sw	zero,156(sp)
8000941c:	7c10b0ef          	jal	ra,800153dc <__eqtf2>
80009420:	04812e03          	lw	t3,72(sp)
80009424:	05012883          	lw	a7,80(sp)
80009428:	00050863          	beqz	a0,80009438 <_vfprintf_r+0xca4>
8000942c:	00100793          	li	a5,1
80009430:	41578ab3          	sub	s5,a5,s5
80009434:	0b512e23          	sw	s5,188(sp)
80009438:	0bc12783          	lw	a5,188(sp)
8000943c:	00fc0c33          	add	s8,s8,a5
80009440:	09010593          	addi	a1,sp,144
80009444:	0a010513          	addi	a0,sp,160
80009448:	05112423          	sw	a7,72(sp)
8000944c:	0bc12023          	sw	t3,160(sp)
80009450:	0bb12223          	sw	s11,164(sp)
80009454:	0b912423          	sw	s9,168(sp)
80009458:	0b412623          	sw	s4,172(sp)
8000945c:	08012823          	sw	zero,144(sp)
80009460:	08012a23          	sw	zero,148(sp)
80009464:	08012c23          	sw	zero,152(sp)
80009468:	08012e23          	sw	zero,156(sp)
8000946c:	7710b0ef          	jal	ra,800153dc <__eqtf2>
80009470:	04812883          	lw	a7,72(sp)
80009474:	03000713          	li	a4,48
80009478:	00051e63          	bnez	a0,80009494 <_vfprintf_r+0xd00>
8000947c:	0d812623          	sw	s8,204(sp)
80009480:	0cc12a03          	lw	s4,204(sp)
80009484:	d61ff06f          	j	800091e4 <_vfprintf_r+0xa50>
80009488:	00178693          	addi	a3,a5,1
8000948c:	0cd12623          	sw	a3,204(sp)
80009490:	00e78023          	sb	a4,0(a5)
80009494:	0cc12783          	lw	a5,204(sp)
80009498:	ff87e8e3          	bltu	a5,s8,80009488 <_vfprintf_r+0xcf4>
8000949c:	fe5ff06f          	j	80009480 <_vfprintf_r+0xcec>
800094a0:	04600713          	li	a4,70
800094a4:	d6eb90e3          	bne	s7,a4,80009204 <_vfprintf_r+0xa70>
800094a8:	07905263          	blez	s9,8000950c <_vfprintf_r+0xd78>
800094ac:	000b1663          	bnez	s6,800094b8 <_vfprintf_r+0xd24>
800094b0:	00147713          	andi	a4,s0,1
800094b4:	0c070263          	beqz	a4,80009578 <_vfprintf_r+0xde4>
800094b8:	02012783          	lw	a5,32(sp)
800094bc:	00fc8733          	add	a4,s9,a5
800094c0:	00eb0b33          	add	s6,s6,a4
800094c4:	06600d13          	li	s10,102
800094c8:	0940006f          	j	8000955c <_vfprintf_r+0xdc8>
800094cc:	00060713          	mv	a4,a2
800094d0:	d91ff06f          	j	80009260 <_vfprintf_r+0xacc>
800094d4:	00170713          	addi	a4,a4,1
800094d8:	fff74783          	lbu	a5,-1(a4)
800094dc:	00160613          	addi	a2,a2,1
800094e0:	fef60fa3          	sb	a5,-1(a2)
800094e4:	da5ff06f          	j	80009288 <_vfprintf_r+0xaf4>
800094e8:	0c610713          	addi	a4,sp,198
800094ec:	00059863          	bnez	a1,800094fc <_vfprintf_r+0xd68>
800094f0:	03000793          	li	a5,48
800094f4:	0cf10323          	sb	a5,198(sp)
800094f8:	0c710713          	addi	a4,sp,199
800094fc:	03068793          	addi	a5,a3,48
80009500:	00170613          	addi	a2,a4,1
80009504:	00f70023          	sb	a5,0(a4)
80009508:	d85ff06f          	j	8000928c <_vfprintf_r+0xaf8>
8000950c:	000b1663          	bnez	s6,80009518 <_vfprintf_r+0xd84>
80009510:	00147713          	andi	a4,s0,1
80009514:	06070663          	beqz	a4,80009580 <_vfprintf_r+0xdec>
80009518:	02012783          	lw	a5,32(sp)
8000951c:	00178713          	addi	a4,a5,1
80009520:	fa1ff06f          	j	800094c0 <_vfprintf_r+0xd2c>
80009524:	034cc063          	blt	s9,s4,80009544 <_vfprintf_r+0xdb0>
80009528:	00147713          	andi	a4,s0,1
8000952c:	000c8b13          	mv	s6,s9
80009530:	00070663          	beqz	a4,8000953c <_vfprintf_r+0xda8>
80009534:	02012783          	lw	a5,32(sp)
80009538:	00fc8b33          	add	s6,s9,a5
8000953c:	06700d13          	li	s10,103
80009540:	01c0006f          	j	8000955c <_vfprintf_r+0xdc8>
80009544:	02012783          	lw	a5,32(sp)
80009548:	06700d13          	li	s10,103
8000954c:	00fa0b33          	add	s6,s4,a5
80009550:	01904663          	bgtz	s9,8000955c <_vfprintf_r+0xdc8>
80009554:	419b0333          	sub	t1,s6,s9
80009558:	00130b13          	addi	s6,t1,1
8000955c:	40047b93          	andi	s7,s0,1024
80009560:	00000c13          	li	s8,0
80009564:	d60b84e3          	beqz	s7,800092cc <_vfprintf_r+0xb38>
80009568:	00000b93          	li	s7,0
8000956c:	d79050e3          	blez	s9,800092cc <_vfprintf_r+0xb38>
80009570:	0ff00693          	li	a3,255
80009574:	0380006f          	j	800095ac <_vfprintf_r+0xe18>
80009578:	000c8b13          	mv	s6,s9
8000957c:	f49ff06f          	j	800094c4 <_vfprintf_r+0xd30>
80009580:	06600d13          	li	s10,102
80009584:	00100b13          	li	s6,1
80009588:	fd5ff06f          	j	8000955c <_vfprintf_r+0xdc8>
8000958c:	03975663          	ble	s9,a4,800095b8 <_vfprintf_r+0xe24>
80009590:	01012783          	lw	a5,16(sp)
80009594:	40ec8cb3          	sub	s9,s9,a4
80009598:	0017c703          	lbu	a4,1(a5)
8000959c:	02070863          	beqz	a4,800095cc <_vfprintf_r+0xe38>
800095a0:	00178793          	addi	a5,a5,1
800095a4:	001b8b93          	addi	s7,s7,1
800095a8:	00f12823          	sw	a5,16(sp)
800095ac:	01012783          	lw	a5,16(sp)
800095b0:	0007c703          	lbu	a4,0(a5)
800095b4:	fcd71ce3          	bne	a4,a3,8000958c <_vfprintf_r+0xdf8>
800095b8:	03012783          	lw	a5,48(sp)
800095bc:	018b8733          	add	a4,s7,s8
800095c0:	02f70733          	mul	a4,a4,a5
800095c4:	01670b33          	add	s6,a4,s6
800095c8:	d05ff06f          	j	800092cc <_vfprintf_r+0xb38>
800095cc:	001c0c13          	addi	s8,s8,1
800095d0:	fddff06f          	j	800095ac <_vfprintf_r+0xe18>
800095d4:	004a8713          	addi	a4,s5,4
800095d8:	00e12c23          	sw	a4,24(sp)
800095dc:	02047713          	andi	a4,s0,32
800095e0:	000aa783          	lw	a5,0(s5)
800095e4:	02070063          	beqz	a4,80009604 <_vfprintf_r+0xe70>
800095e8:	02412703          	lw	a4,36(sp)
800095ec:	00e7a023          	sw	a4,0(a5)
800095f0:	41f75713          	srai	a4,a4,0x1f
800095f4:	00e7a223          	sw	a4,4(a5)
800095f8:	01812a83          	lw	s5,24(sp)
800095fc:	01c12483          	lw	s1,28(sp)
80009600:	b28ff06f          	j	80008928 <_vfprintf_r+0x194>
80009604:	01047713          	andi	a4,s0,16
80009608:	00070863          	beqz	a4,80009618 <_vfprintf_r+0xe84>
8000960c:	02412703          	lw	a4,36(sp)
80009610:	00e7a023          	sw	a4,0(a5)
80009614:	fe5ff06f          	j	800095f8 <_vfprintf_r+0xe64>
80009618:	04047713          	andi	a4,s0,64
8000961c:	00070863          	beqz	a4,8000962c <_vfprintf_r+0xe98>
80009620:	02415703          	lhu	a4,36(sp)
80009624:	00e79023          	sh	a4,0(a5)
80009628:	fd1ff06f          	j	800095f8 <_vfprintf_r+0xe64>
8000962c:	20047413          	andi	s0,s0,512
80009630:	fc040ee3          	beqz	s0,8000960c <_vfprintf_r+0xe78>
80009634:	02414703          	lbu	a4,36(sp)
80009638:	00e78023          	sb	a4,0(a5)
8000963c:	fbdff06f          	j	800095f8 <_vfprintf_r+0xe64>
80009640:	01046413          	ori	s0,s0,16
80009644:	02047793          	andi	a5,s0,32
80009648:	04078863          	beqz	a5,80009698 <_vfprintf_r+0xf04>
8000964c:	007a8a93          	addi	s5,s5,7
80009650:	ff8afa93          	andi	s5,s5,-8
80009654:	000aac83          	lw	s9,0(s5)
80009658:	004aac03          	lw	s8,4(s5)
8000965c:	008a8793          	addi	a5,s5,8
80009660:	00f12c23          	sw	a5,24(sp)
80009664:	bff47413          	andi	s0,s0,-1025
80009668:	00000793          	li	a5,0
8000966c:	0a010ba3          	sb	zero,183(sp)
80009670:	fff00713          	li	a4,-1
80009674:	42eb0863          	beq	s6,a4,80009aa4 <_vfprintf_r+0x1310>
80009678:	00040713          	mv	a4,s0
8000967c:	018ce6b3          	or	a3,s9,s8
80009680:	f7f47413          	andi	s0,s0,-129
80009684:	42069063          	bnez	a3,80009aa4 <_vfprintf_r+0x1310>
80009688:	580b0e63          	beqz	s6,80009c24 <_vfprintf_r+0x1490>
8000968c:	00100713          	li	a4,1
80009690:	40e79e63          	bne	a5,a4,80009aac <_vfprintf_r+0x1318>
80009694:	dd4ff06f          	j	80008c68 <_vfprintf_r+0x4d4>
80009698:	004a8793          	addi	a5,s5,4
8000969c:	00f12c23          	sw	a5,24(sp)
800096a0:	01047793          	andi	a5,s0,16
800096a4:	00078663          	beqz	a5,800096b0 <_vfprintf_r+0xf1c>
800096a8:	000aac83          	lw	s9,0(s5)
800096ac:	0100006f          	j	800096bc <_vfprintf_r+0xf28>
800096b0:	04047793          	andi	a5,s0,64
800096b4:	00078863          	beqz	a5,800096c4 <_vfprintf_r+0xf30>
800096b8:	000adc83          	lhu	s9,0(s5)
800096bc:	00000c13          	li	s8,0
800096c0:	fa5ff06f          	j	80009664 <_vfprintf_r+0xed0>
800096c4:	20047793          	andi	a5,s0,512
800096c8:	fe0780e3          	beqz	a5,800096a8 <_vfprintf_r+0xf14>
800096cc:	000acc83          	lbu	s9,0(s5)
800096d0:	fedff06f          	j	800096bc <_vfprintf_r+0xf28>
800096d4:	004a8793          	addi	a5,s5,4
800096d8:	00f12c23          	sw	a5,24(sp)
800096dc:	ffff87b7          	lui	a5,0xffff8
800096e0:	8307c793          	xori	a5,a5,-2000
800096e4:	0af11c23          	sh	a5,184(sp)
800096e8:	800217b7          	lui	a5,0x80021
800096ec:	d7c78793          	addi	a5,a5,-644 # 80020d7c <__stack+0xfffe42b0>
800096f0:	04f12023          	sw	a5,64(sp)
800096f4:	000aac83          	lw	s9,0(s5)
800096f8:	00000c13          	li	s8,0
800096fc:	00246413          	ori	s0,s0,2
80009700:	00200793          	li	a5,2
80009704:	07800d13          	li	s10,120
80009708:	f65ff06f          	j	8000966c <_vfprintf_r+0xed8>
8000970c:	004a8793          	addi	a5,s5,4
80009710:	00f12c23          	sw	a5,24(sp)
80009714:	0a010ba3          	sb	zero,183(sp)
80009718:	fff00793          	li	a5,-1
8000971c:	03112623          	sw	a7,44(sp)
80009720:	000aa483          	lw	s1,0(s5)
80009724:	02fb0663          	beq	s6,a5,80009750 <_vfprintf_r+0xfbc>
80009728:	000b0613          	mv	a2,s6
8000972c:	00000593          	li	a1,0
80009730:	00048513          	mv	a0,s1
80009734:	5bc040ef          	jal	ra,8000dcf0 <memchr>
80009738:	00a12623          	sw	a0,12(sp)
8000973c:	02c12883          	lw	a7,44(sp)
80009740:	e2050c63          	beqz	a0,80008d78 <_vfprintf_r+0x5e4>
80009744:	40950b33          	sub	s6,a0,s1
80009748:	00012623          	sw	zero,12(sp)
8000974c:	e2cff06f          	j	80008d78 <_vfprintf_r+0x5e4>
80009750:	00048513          	mv	a0,s1
80009754:	101050ef          	jal	ra,8000f054 <strlen>
80009758:	02c12883          	lw	a7,44(sp)
8000975c:	00050b13          	mv	s6,a0
80009760:	00012623          	sw	zero,12(sp)
80009764:	00000a93          	li	s5,0
80009768:	00000c13          	li	s8,0
8000976c:	00000b93          	li	s7,0
80009770:	00000c93          	li	s9,0
80009774:	03512623          	sw	s5,44(sp)
80009778:	016ad463          	ble	s6,s5,80009780 <_vfprintf_r+0xfec>
8000977c:	03612623          	sw	s6,44(sp)
80009780:	0b714703          	lbu	a4,183(sp)
80009784:	00070863          	beqz	a4,80009794 <_vfprintf_r+0x1000>
80009788:	02c12783          	lw	a5,44(sp)
8000978c:	00178793          	addi	a5,a5,1
80009790:	02f12623          	sw	a5,44(sp)
80009794:	00247d93          	andi	s11,s0,2
80009798:	000d8863          	beqz	s11,800097a8 <_vfprintf_r+0x1014>
8000979c:	02c12783          	lw	a5,44(sp)
800097a0:	00278793          	addi	a5,a5,2
800097a4:	02f12623          	sw	a5,44(sp)
800097a8:	08447793          	andi	a5,s0,132
800097ac:	04f12223          	sw	a5,68(sp)
800097b0:	06079863          	bnez	a5,80009820 <_vfprintf_r+0x108c>
800097b4:	02812783          	lw	a5,40(sp)
800097b8:	02c12703          	lw	a4,44(sp)
800097bc:	40e78733          	sub	a4,a5,a4
800097c0:	06e05063          	blez	a4,80009820 <_vfprintf_r+0x108c>
800097c4:	80020e37          	lui	t3,0x80020
800097c8:	01000e93          	li	t4,16
800097cc:	274e0e13          	addi	t3,t3,628 # 80020274 <__stack+0xfffe37a8>
800097d0:	00700f13          	li	t5,7
800097d4:	0d812683          	lw	a3,216(sp)
800097d8:	01c8a023          	sw	t3,0(a7)
800097dc:	0dc12603          	lw	a2,220(sp)
800097e0:	00168693          	addi	a3,a3,1
800097e4:	00888593          	addi	a1,a7,8
800097e8:	46eec663          	blt	t4,a4,80009c54 <_vfprintf_r+0x14c0>
800097ec:	00e8a223          	sw	a4,4(a7)
800097f0:	00c70733          	add	a4,a4,a2
800097f4:	0ce12e23          	sw	a4,220(sp)
800097f8:	0cd12c23          	sw	a3,216(sp)
800097fc:	00700713          	li	a4,7
80009800:	00058893          	mv	a7,a1
80009804:	00d75e63          	ble	a3,a4,80009820 <_vfprintf_r+0x108c>
80009808:	0d410613          	addi	a2,sp,212
8000980c:	00090593          	mv	a1,s2
80009810:	00098513          	mv	a0,s3
80009814:	7e0070ef          	jal	ra,80010ff4 <__sprint_r>
80009818:	680518e3          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
8000981c:	0fc10893          	addi	a7,sp,252
80009820:	0b714703          	lbu	a4,183(sp)
80009824:	04070863          	beqz	a4,80009874 <_vfprintf_r+0x10e0>
80009828:	0b710713          	addi	a4,sp,183
8000982c:	00e8a023          	sw	a4,0(a7)
80009830:	00100713          	li	a4,1
80009834:	00e8a223          	sw	a4,4(a7)
80009838:	0dc12703          	lw	a4,220(sp)
8000983c:	00700693          	li	a3,7
80009840:	00888893          	addi	a7,a7,8
80009844:	00170713          	addi	a4,a4,1
80009848:	0ce12e23          	sw	a4,220(sp)
8000984c:	0d812703          	lw	a4,216(sp)
80009850:	00170713          	addi	a4,a4,1
80009854:	0ce12c23          	sw	a4,216(sp)
80009858:	00e6de63          	ble	a4,a3,80009874 <_vfprintf_r+0x10e0>
8000985c:	0d410613          	addi	a2,sp,212
80009860:	00090593          	mv	a1,s2
80009864:	00098513          	mv	a0,s3
80009868:	78c070ef          	jal	ra,80010ff4 <__sprint_r>
8000986c:	62051ee3          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
80009870:	0fc10893          	addi	a7,sp,252
80009874:	040d8863          	beqz	s11,800098c4 <_vfprintf_r+0x1130>
80009878:	0b810713          	addi	a4,sp,184
8000987c:	00e8a023          	sw	a4,0(a7)
80009880:	00200713          	li	a4,2
80009884:	00e8a223          	sw	a4,4(a7)
80009888:	0dc12703          	lw	a4,220(sp)
8000988c:	00700693          	li	a3,7
80009890:	00888893          	addi	a7,a7,8
80009894:	00270713          	addi	a4,a4,2
80009898:	0ce12e23          	sw	a4,220(sp)
8000989c:	0d812703          	lw	a4,216(sp)
800098a0:	00170713          	addi	a4,a4,1
800098a4:	0ce12c23          	sw	a4,216(sp)
800098a8:	00e6de63          	ble	a4,a3,800098c4 <_vfprintf_r+0x1130>
800098ac:	0d410613          	addi	a2,sp,212
800098b0:	00090593          	mv	a1,s2
800098b4:	00098513          	mv	a0,s3
800098b8:	73c070ef          	jal	ra,80010ff4 <__sprint_r>
800098bc:	5e0516e3          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
800098c0:	0fc10893          	addi	a7,sp,252
800098c4:	04412783          	lw	a5,68(sp)
800098c8:	08000713          	li	a4,128
800098cc:	06e79663          	bne	a5,a4,80009938 <_vfprintf_r+0x11a4>
800098d0:	02812783          	lw	a5,40(sp)
800098d4:	02c12703          	lw	a4,44(sp)
800098d8:	40e78db3          	sub	s11,a5,a4
800098dc:	05b05e63          	blez	s11,80009938 <_vfprintf_r+0x11a4>
800098e0:	01000793          	li	a5,16
800098e4:	00700e13          	li	t3,7
800098e8:	0d812703          	lw	a4,216(sp)
800098ec:	0dc12683          	lw	a3,220(sp)
800098f0:	00888613          	addi	a2,a7,8
800098f4:	00170713          	addi	a4,a4,1
800098f8:	3bb7ca63          	blt	a5,s11,80009cac <_vfprintf_r+0x1518>
800098fc:	01412783          	lw	a5,20(sp)
80009900:	01b8a223          	sw	s11,4(a7)
80009904:	00dd8db3          	add	s11,s11,a3
80009908:	00f8a023          	sw	a5,0(a7)
8000990c:	0db12e23          	sw	s11,220(sp)
80009910:	0ce12c23          	sw	a4,216(sp)
80009914:	00700693          	li	a3,7
80009918:	00060893          	mv	a7,a2
8000991c:	00e6de63          	ble	a4,a3,80009938 <_vfprintf_r+0x11a4>
80009920:	0d410613          	addi	a2,sp,212
80009924:	00090593          	mv	a1,s2
80009928:	00098513          	mv	a0,s3
8000992c:	6c8070ef          	jal	ra,80010ff4 <__sprint_r>
80009930:	56051ce3          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
80009934:	0fc10893          	addi	a7,sp,252
80009938:	416a8ab3          	sub	s5,s5,s6
8000993c:	05505e63          	blez	s5,80009998 <_vfprintf_r+0x1204>
80009940:	01000d93          	li	s11,16
80009944:	00700813          	li	a6,7
80009948:	01412783          	lw	a5,20(sp)
8000994c:	0d812703          	lw	a4,216(sp)
80009950:	0dc12683          	lw	a3,220(sp)
80009954:	00f8a023          	sw	a5,0(a7)
80009958:	00170713          	addi	a4,a4,1
8000995c:	00888613          	addi	a2,a7,8
80009960:	395dce63          	blt	s11,s5,80009cfc <_vfprintf_r+0x1568>
80009964:	0158a223          	sw	s5,4(a7)
80009968:	00da8ab3          	add	s5,s5,a3
8000996c:	0d512e23          	sw	s5,220(sp)
80009970:	0ce12c23          	sw	a4,216(sp)
80009974:	00700693          	li	a3,7
80009978:	00060893          	mv	a7,a2
8000997c:	00e6de63          	ble	a4,a3,80009998 <_vfprintf_r+0x1204>
80009980:	0d410613          	addi	a2,sp,212
80009984:	00090593          	mv	a1,s2
80009988:	00098513          	mv	a0,s3
8000998c:	668070ef          	jal	ra,80010ff4 <__sprint_r>
80009990:	50051ce3          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
80009994:	0fc10893          	addi	a7,sp,252
80009998:	10047713          	andi	a4,s0,256
8000999c:	0dc12d83          	lw	s11,220(sp)
800099a0:	38071e63          	bnez	a4,80009d3c <_vfprintf_r+0x15a8>
800099a4:	01bb0333          	add	t1,s6,s11
800099a8:	0098a023          	sw	s1,0(a7)
800099ac:	0168a223          	sw	s6,4(a7)
800099b0:	0c612e23          	sw	t1,220(sp)
800099b4:	0d812783          	lw	a5,216(sp)
800099b8:	00700713          	li	a4,7
800099bc:	00888893          	addi	a7,a7,8
800099c0:	00178793          	addi	a5,a5,1
800099c4:	0cf12c23          	sw	a5,216(sp)
800099c8:	4af75c63          	ble	a5,a4,80009e80 <_vfprintf_r+0x16ec>
800099cc:	0d410613          	addi	a2,sp,212
800099d0:	00090593          	mv	a1,s2
800099d4:	00098513          	mv	a0,s3
800099d8:	61c070ef          	jal	ra,80010ff4 <__sprint_r>
800099dc:	4c0516e3          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
800099e0:	0fc10893          	addi	a7,sp,252
800099e4:	49c0006f          	j	80009e80 <_vfprintf_r+0x16ec>
800099e8:	01046413          	ori	s0,s0,16
800099ec:	02047793          	andi	a5,s0,32
800099f0:	02078263          	beqz	a5,80009a14 <_vfprintf_r+0x1280>
800099f4:	007a8a93          	addi	s5,s5,7
800099f8:	ff8afa93          	andi	s5,s5,-8
800099fc:	000aac83          	lw	s9,0(s5)
80009a00:	004aac03          	lw	s8,4(s5)
80009a04:	008a8793          	addi	a5,s5,8
80009a08:	00f12c23          	sw	a5,24(sp)
80009a0c:	00100793          	li	a5,1
80009a10:	c5dff06f          	j	8000966c <_vfprintf_r+0xed8>
80009a14:	004a8793          	addi	a5,s5,4
80009a18:	00f12c23          	sw	a5,24(sp)
80009a1c:	01047793          	andi	a5,s0,16
80009a20:	00078663          	beqz	a5,80009a2c <_vfprintf_r+0x1298>
80009a24:	000aac83          	lw	s9,0(s5)
80009a28:	0100006f          	j	80009a38 <_vfprintf_r+0x12a4>
80009a2c:	04047793          	andi	a5,s0,64
80009a30:	00078863          	beqz	a5,80009a40 <_vfprintf_r+0x12ac>
80009a34:	000adc83          	lhu	s9,0(s5)
80009a38:	00000c13          	li	s8,0
80009a3c:	fd1ff06f          	j	80009a0c <_vfprintf_r+0x1278>
80009a40:	20047793          	andi	a5,s0,512
80009a44:	fe0780e3          	beqz	a5,80009a24 <_vfprintf_r+0x1290>
80009a48:	000acc83          	lbu	s9,0(s5)
80009a4c:	fedff06f          	j	80009a38 <_vfprintf_r+0x12a4>
80009a50:	800217b7          	lui	a5,0x80021
80009a54:	d7c78793          	addi	a5,a5,-644 # 80020d7c <__stack+0xfffe42b0>
80009a58:	fb1fe06f          	j	80008a08 <_vfprintf_r+0x274>
80009a5c:	004a8793          	addi	a5,s5,4
80009a60:	00f12c23          	sw	a5,24(sp)
80009a64:	01047793          	andi	a5,s0,16
80009a68:	00078663          	beqz	a5,80009a74 <_vfprintf_r+0x12e0>
80009a6c:	000aac83          	lw	s9,0(s5)
80009a70:	0100006f          	j	80009a80 <_vfprintf_r+0x12ec>
80009a74:	04047793          	andi	a5,s0,64
80009a78:	00078863          	beqz	a5,80009a88 <_vfprintf_r+0x12f4>
80009a7c:	000adc83          	lhu	s9,0(s5)
80009a80:	00000c13          	li	s8,0
80009a84:	fadfe06f          	j	80008a30 <_vfprintf_r+0x29c>
80009a88:	20047793          	andi	a5,s0,512
80009a8c:	fe0780e3          	beqz	a5,80009a6c <_vfprintf_r+0x12d8>
80009a90:	000acc83          	lbu	s9,0(s5)
80009a94:	fedff06f          	j	80009a80 <_vfprintf_r+0x12ec>
80009a98:	00040713          	mv	a4,s0
80009a9c:	00100793          	li	a5,1
80009aa0:	bddff06f          	j	8000967c <_vfprintf_r+0xee8>
80009aa4:	00100713          	li	a4,1
80009aa8:	9ae78a63          	beq	a5,a4,80008c5c <_vfprintf_r+0x4c8>
80009aac:	00200713          	li	a4,2
80009ab0:	12e78e63          	beq	a5,a4,80009bec <_vfprintf_r+0x1458>
80009ab4:	1a010793          	addi	a5,sp,416
80009ab8:	01dc1693          	slli	a3,s8,0x1d
80009abc:	007cf713          	andi	a4,s9,7
80009ac0:	003cdc93          	srli	s9,s9,0x3
80009ac4:	03070713          	addi	a4,a4,48
80009ac8:	0196ecb3          	or	s9,a3,s9
80009acc:	003c5c13          	srli	s8,s8,0x3
80009ad0:	fee78fa3          	sb	a4,-1(a5)
80009ad4:	018ce6b3          	or	a3,s9,s8
80009ad8:	fff78493          	addi	s1,a5,-1
80009adc:	02069e63          	bnez	a3,80009b18 <_vfprintf_r+0x1384>
80009ae0:	00147693          	andi	a3,s0,1
80009ae4:	00068a63          	beqz	a3,80009af8 <_vfprintf_r+0x1364>
80009ae8:	03000693          	li	a3,48
80009aec:	00d70663          	beq	a4,a3,80009af8 <_vfprintf_r+0x1364>
80009af0:	fed48fa3          	sb	a3,-1(s1)
80009af4:	ffe78493          	addi	s1,a5,-2
80009af8:	1a010793          	addi	a5,sp,416
80009afc:	000b0a93          	mv	s5,s6
80009b00:	00012623          	sw	zero,12(sp)
80009b04:	40978b33          	sub	s6,a5,s1
80009b08:	00000c13          	li	s8,0
80009b0c:	00000b93          	li	s7,0
80009b10:	00000c93          	li	s9,0
80009b14:	c61ff06f          	j	80009774 <_vfprintf_r+0xfe0>
80009b18:	00048793          	mv	a5,s1
80009b1c:	f9dff06f          	j	80009ab8 <_vfprintf_r+0x1324>
80009b20:	00000a13          	li	s4,0
80009b24:	1a010d93          	addi	s11,sp,416
80009b28:	40047a93          	andi	s5,s0,1024
80009b2c:	00900b93          	li	s7,9
80009b30:	00a00613          	li	a2,10
80009b34:	00000693          	li	a3,0
80009b38:	000c8513          	mv	a0,s9
80009b3c:	000c0593          	mv	a1,s8
80009b40:	01112623          	sw	a7,12(sp)
80009b44:	7d40a0ef          	jal	ra,80014318 <__umoddi3>
80009b48:	03050513          	addi	a0,a0,48
80009b4c:	fead8fa3          	sb	a0,-1(s11)
80009b50:	fffd8493          	addi	s1,s11,-1
80009b54:	001a0a13          	addi	s4,s4,1
80009b58:	00c12883          	lw	a7,12(sp)
80009b5c:	040a8e63          	beqz	s5,80009bb8 <_vfprintf_r+0x1424>
80009b60:	01012783          	lw	a5,16(sp)
80009b64:	0007c783          	lbu	a5,0(a5)
80009b68:	04fa1863          	bne	s4,a5,80009bb8 <_vfprintf_r+0x1424>
80009b6c:	0ff00793          	li	a5,255
80009b70:	04fa0463          	beq	s4,a5,80009bb8 <_vfprintf_r+0x1424>
80009b74:	000c1463          	bnez	s8,80009b7c <_vfprintf_r+0x13e8>
80009b78:	059bf063          	bleu	s9,s7,80009bb8 <_vfprintf_r+0x1424>
80009b7c:	03012783          	lw	a5,48(sp)
80009b80:	03812583          	lw	a1,56(sp)
80009b84:	01112623          	sw	a7,12(sp)
80009b88:	40f484b3          	sub	s1,s1,a5
80009b8c:	00078613          	mv	a2,a5
80009b90:	00048513          	mv	a0,s1
80009b94:	4dc050ef          	jal	ra,8000f070 <strncpy>
80009b98:	01012783          	lw	a5,16(sp)
80009b9c:	00000a13          	li	s4,0
80009ba0:	00c12883          	lw	a7,12(sp)
80009ba4:	0017c783          	lbu	a5,1(a5)
80009ba8:	00078863          	beqz	a5,80009bb8 <_vfprintf_r+0x1424>
80009bac:	01012783          	lw	a5,16(sp)
80009bb0:	00178793          	addi	a5,a5,1
80009bb4:	00f12823          	sw	a5,16(sp)
80009bb8:	000c8513          	mv	a0,s9
80009bbc:	000c0593          	mv	a1,s8
80009bc0:	00a00613          	li	a2,10
80009bc4:	00000693          	li	a3,0
80009bc8:	01112623          	sw	a7,12(sp)
80009bcc:	3180a0ef          	jal	ra,80013ee4 <__udivdi3>
80009bd0:	00058c13          	mv	s8,a1
80009bd4:	00a5e5b3          	or	a1,a1,a0
80009bd8:	00050c93          	mv	s9,a0
80009bdc:	00c12883          	lw	a7,12(sp)
80009be0:	f0058ce3          	beqz	a1,80009af8 <_vfprintf_r+0x1364>
80009be4:	00048d93          	mv	s11,s1
80009be8:	f49ff06f          	j	80009b30 <_vfprintf_r+0x139c>
80009bec:	1a010493          	addi	s1,sp,416
80009bf0:	04012703          	lw	a4,64(sp)
80009bf4:	00fcf793          	andi	a5,s9,15
80009bf8:	fff48493          	addi	s1,s1,-1
80009bfc:	00f707b3          	add	a5,a4,a5
80009c00:	0007c783          	lbu	a5,0(a5)
80009c04:	004cdc93          	srli	s9,s9,0x4
80009c08:	00f48023          	sb	a5,0(s1)
80009c0c:	01cc1793          	slli	a5,s8,0x1c
80009c10:	0197ecb3          	or	s9,a5,s9
80009c14:	004c5c13          	srli	s8,s8,0x4
80009c18:	018ce7b3          	or	a5,s9,s8
80009c1c:	fc079ae3          	bnez	a5,80009bf0 <_vfprintf_r+0x145c>
80009c20:	ed9ff06f          	j	80009af8 <_vfprintf_r+0x1364>
80009c24:	1a010493          	addi	s1,sp,416
80009c28:	ec0798e3          	bnez	a5,80009af8 <_vfprintf_r+0x1364>
80009c2c:	00177713          	andi	a4,a4,1
80009c30:	ec0704e3          	beqz	a4,80009af8 <_vfprintf_r+0x1364>
80009c34:	03000793          	li	a5,48
80009c38:	18f10fa3          	sb	a5,415(sp)
80009c3c:	834ff06f          	j	80008c70 <_vfprintf_r+0x4dc>
80009c40:	2c0d06e3          	beqz	s10,8000a70c <_vfprintf_r+0x1f78>
80009c44:	13a10e23          	sb	s10,316(sp)
80009c48:	0a010ba3          	sb	zero,183(sp)
80009c4c:	01512c23          	sw	s5,24(sp)
80009c50:	fa5fe06f          	j	80008bf4 <_vfprintf_r+0x460>
80009c54:	01060613          	addi	a2,a2,16
80009c58:	01d8a223          	sw	t4,4(a7)
80009c5c:	0cc12e23          	sw	a2,220(sp)
80009c60:	0cd12c23          	sw	a3,216(sp)
80009c64:	02df5e63          	ble	a3,t5,80009ca0 <_vfprintf_r+0x150c>
80009c68:	0d410613          	addi	a2,sp,212
80009c6c:	00090593          	mv	a1,s2
80009c70:	00098513          	mv	a0,s3
80009c74:	05e12c23          	sw	t5,88(sp)
80009c78:	05c12a23          	sw	t3,84(sp)
80009c7c:	05d12823          	sw	t4,80(sp)
80009c80:	04e12423          	sw	a4,72(sp)
80009c84:	370070ef          	jal	ra,80010ff4 <__sprint_r>
80009c88:	220510e3          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
80009c8c:	05812f03          	lw	t5,88(sp)
80009c90:	05412e03          	lw	t3,84(sp)
80009c94:	05012e83          	lw	t4,80(sp)
80009c98:	04812703          	lw	a4,72(sp)
80009c9c:	0fc10593          	addi	a1,sp,252
80009ca0:	ff070713          	addi	a4,a4,-16
80009ca4:	00058893          	mv	a7,a1
80009ca8:	b2dff06f          	j	800097d4 <_vfprintf_r+0x1040>
80009cac:	01412583          	lw	a1,20(sp)
80009cb0:	01068693          	addi	a3,a3,16
80009cb4:	00f8a223          	sw	a5,4(a7)
80009cb8:	00b8a023          	sw	a1,0(a7)
80009cbc:	0cd12e23          	sw	a3,220(sp)
80009cc0:	0ce12c23          	sw	a4,216(sp)
80009cc4:	02ee5663          	ble	a4,t3,80009cf0 <_vfprintf_r+0x155c>
80009cc8:	0d410613          	addi	a2,sp,212
80009ccc:	00090593          	mv	a1,s2
80009cd0:	00098513          	mv	a0,s3
80009cd4:	05c12423          	sw	t3,72(sp)
80009cd8:	04f12223          	sw	a5,68(sp)
80009cdc:	318070ef          	jal	ra,80010ff4 <__sprint_r>
80009ce0:	1c0514e3          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
80009ce4:	04812e03          	lw	t3,72(sp)
80009ce8:	04412783          	lw	a5,68(sp)
80009cec:	0fc10613          	addi	a2,sp,252
80009cf0:	ff0d8d93          	addi	s11,s11,-16
80009cf4:	00060893          	mv	a7,a2
80009cf8:	bf1ff06f          	j	800098e8 <_vfprintf_r+0x1154>
80009cfc:	01068693          	addi	a3,a3,16
80009d00:	01b8a223          	sw	s11,4(a7)
80009d04:	0cd12e23          	sw	a3,220(sp)
80009d08:	0ce12c23          	sw	a4,216(sp)
80009d0c:	02e85263          	ble	a4,a6,80009d30 <_vfprintf_r+0x159c>
80009d10:	0d410613          	addi	a2,sp,212
80009d14:	00090593          	mv	a1,s2
80009d18:	00098513          	mv	a0,s3
80009d1c:	05012223          	sw	a6,68(sp)
80009d20:	2d4070ef          	jal	ra,80010ff4 <__sprint_r>
80009d24:	180512e3          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
80009d28:	04412803          	lw	a6,68(sp)
80009d2c:	0fc10613          	addi	a2,sp,252
80009d30:	ff0a8a93          	addi	s5,s5,-16
80009d34:	00060893          	mv	a7,a2
80009d38:	c11ff06f          	j	80009948 <_vfprintf_r+0x11b4>
80009d3c:	06500713          	li	a4,101
80009d40:	71a75263          	ble	s10,a4,8000a444 <_vfprintf_r+0x1cb0>
80009d44:	0e012703          	lw	a4,224(sp)
80009d48:	09010593          	addi	a1,sp,144
80009d4c:	0a010513          	addi	a0,sp,160
80009d50:	0ae12023          	sw	a4,160(sp)
80009d54:	0e412703          	lw	a4,228(sp)
80009d58:	05112223          	sw	a7,68(sp)
80009d5c:	08012823          	sw	zero,144(sp)
80009d60:	0ae12223          	sw	a4,164(sp)
80009d64:	0e812703          	lw	a4,232(sp)
80009d68:	08012a23          	sw	zero,148(sp)
80009d6c:	08012c23          	sw	zero,152(sp)
80009d70:	0ae12423          	sw	a4,168(sp)
80009d74:	0ec12703          	lw	a4,236(sp)
80009d78:	08012e23          	sw	zero,156(sp)
80009d7c:	0ae12623          	sw	a4,172(sp)
80009d80:	65c0b0ef          	jal	ra,800153dc <__eqtf2>
80009d84:	04412883          	lw	a7,68(sp)
80009d88:	18051263          	bnez	a0,80009f0c <_vfprintf_r+0x1778>
80009d8c:	800217b7          	lui	a5,0x80021
80009d90:	da478793          	addi	a5,a5,-604 # 80020da4 <__stack+0xfffe42d8>
80009d94:	00f8a023          	sw	a5,0(a7)
80009d98:	00100793          	li	a5,1
80009d9c:	00f8a223          	sw	a5,4(a7)
80009da0:	0d812783          	lw	a5,216(sp)
80009da4:	001d8d93          	addi	s11,s11,1
80009da8:	0db12e23          	sw	s11,220(sp)
80009dac:	00178793          	addi	a5,a5,1
80009db0:	0cf12c23          	sw	a5,216(sp)
80009db4:	00700713          	li	a4,7
80009db8:	00888893          	addi	a7,a7,8
80009dbc:	00f75e63          	ble	a5,a4,80009dd8 <_vfprintf_r+0x1644>
80009dc0:	0d410613          	addi	a2,sp,212
80009dc4:	00090593          	mv	a1,s2
80009dc8:	00098513          	mv	a0,s3
80009dcc:	228070ef          	jal	ra,80010ff4 <__sprint_r>
80009dd0:	0c051ce3          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
80009dd4:	0fc10893          	addi	a7,sp,252
80009dd8:	0bc12783          	lw	a5,188(sp)
80009ddc:	0147c663          	blt	a5,s4,80009de8 <_vfprintf_r+0x1654>
80009de0:	00147793          	andi	a5,s0,1
80009de4:	08078e63          	beqz	a5,80009e80 <_vfprintf_r+0x16ec>
80009de8:	03412783          	lw	a5,52(sp)
80009dec:	02012703          	lw	a4,32(sp)
80009df0:	00888893          	addi	a7,a7,8
80009df4:	fef8ac23          	sw	a5,-8(a7)
80009df8:	02012783          	lw	a5,32(sp)
80009dfc:	fef8ae23          	sw	a5,-4(a7)
80009e00:	0dc12783          	lw	a5,220(sp)
80009e04:	00e787b3          	add	a5,a5,a4
80009e08:	0cf12e23          	sw	a5,220(sp)
80009e0c:	0d812783          	lw	a5,216(sp)
80009e10:	00700713          	li	a4,7
80009e14:	00178793          	addi	a5,a5,1
80009e18:	0cf12c23          	sw	a5,216(sp)
80009e1c:	00f75e63          	ble	a5,a4,80009e38 <_vfprintf_r+0x16a4>
80009e20:	0d410613          	addi	a2,sp,212
80009e24:	00090593          	mv	a1,s2
80009e28:	00098513          	mv	a0,s3
80009e2c:	1c8070ef          	jal	ra,80010ff4 <__sprint_r>
80009e30:	06051ce3          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
80009e34:	0fc10893          	addi	a7,sp,252
80009e38:	fffa0493          	addi	s1,s4,-1
80009e3c:	04905263          	blez	s1,80009e80 <_vfprintf_r+0x16ec>
80009e40:	01000a93          	li	s5,16
80009e44:	00700b93          	li	s7,7
80009e48:	01412603          	lw	a2,20(sp)
80009e4c:	0d812783          	lw	a5,216(sp)
80009e50:	0dc12703          	lw	a4,220(sp)
80009e54:	00c8a023          	sw	a2,0(a7)
80009e58:	00178793          	addi	a5,a5,1
80009e5c:	00888693          	addi	a3,a7,8
80009e60:	069aca63          	blt	s5,s1,80009ed4 <_vfprintf_r+0x1740>
80009e64:	0098a223          	sw	s1,4(a7)
80009e68:	00e484b3          	add	s1,s1,a4
80009e6c:	0c912e23          	sw	s1,220(sp)
80009e70:	0cf12c23          	sw	a5,216(sp)
80009e74:	00700713          	li	a4,7
80009e78:	00068893          	mv	a7,a3
80009e7c:	b4f748e3          	blt	a4,a5,800099cc <_vfprintf_r+0x1238>
80009e80:	00447413          	andi	s0,s0,4
80009e84:	7c041263          	bnez	s0,8000a648 <_vfprintf_r+0x1eb4>
80009e88:	02812d03          	lw	s10,40(sp)
80009e8c:	02c12783          	lw	a5,44(sp)
80009e90:	00fd5463          	ble	a5,s10,80009e98 <_vfprintf_r+0x1704>
80009e94:	00078d13          	mv	s10,a5
80009e98:	02412783          	lw	a5,36(sp)
80009e9c:	01a787b3          	add	a5,a5,s10
80009ea0:	02f12223          	sw	a5,36(sp)
80009ea4:	0dc12783          	lw	a5,220(sp)
80009ea8:	00078c63          	beqz	a5,80009ec0 <_vfprintf_r+0x172c>
80009eac:	0d410613          	addi	a2,sp,212
80009eb0:	00090593          	mv	a1,s2
80009eb4:	00098513          	mv	a0,s3
80009eb8:	13c070ef          	jal	ra,80010ff4 <__sprint_r>
80009ebc:	7e051663          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
80009ec0:	00c12783          	lw	a5,12(sp)
80009ec4:	0c012c23          	sw	zero,216(sp)
80009ec8:	02079ae3          	bnez	a5,8000a6fc <_vfprintf_r+0x1f68>
80009ecc:	0fc10893          	addi	a7,sp,252
80009ed0:	f28ff06f          	j	800095f8 <_vfprintf_r+0xe64>
80009ed4:	01070713          	addi	a4,a4,16
80009ed8:	0158a223          	sw	s5,4(a7)
80009edc:	0ce12e23          	sw	a4,220(sp)
80009ee0:	0cf12c23          	sw	a5,216(sp)
80009ee4:	00fbde63          	ble	a5,s7,80009f00 <_vfprintf_r+0x176c>
80009ee8:	0d410613          	addi	a2,sp,212
80009eec:	00090593          	mv	a1,s2
80009ef0:	00098513          	mv	a0,s3
80009ef4:	100070ef          	jal	ra,80010ff4 <__sprint_r>
80009ef8:	7a051863          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
80009efc:	0fc10693          	addi	a3,sp,252
80009f00:	ff048493          	addi	s1,s1,-16
80009f04:	00068893          	mv	a7,a3
80009f08:	f41ff06f          	j	80009e48 <_vfprintf_r+0x16b4>
80009f0c:	0bc12703          	lw	a4,188(sp)
80009f10:	16e04463          	bgtz	a4,8000a078 <_vfprintf_r+0x18e4>
80009f14:	800217b7          	lui	a5,0x80021
80009f18:	da478793          	addi	a5,a5,-604 # 80020da4 <__stack+0xfffe42d8>
80009f1c:	00f8a023          	sw	a5,0(a7)
80009f20:	00100793          	li	a5,1
80009f24:	00f8a223          	sw	a5,4(a7)
80009f28:	0d812783          	lw	a5,216(sp)
80009f2c:	001d8d93          	addi	s11,s11,1
80009f30:	0db12e23          	sw	s11,220(sp)
80009f34:	00178793          	addi	a5,a5,1
80009f38:	0cf12c23          	sw	a5,216(sp)
80009f3c:	00700713          	li	a4,7
80009f40:	00888893          	addi	a7,a7,8
80009f44:	00f75e63          	ble	a5,a4,80009f60 <_vfprintf_r+0x17cc>
80009f48:	0d410613          	addi	a2,sp,212
80009f4c:	00090593          	mv	a1,s2
80009f50:	00098513          	mv	a0,s3
80009f54:	0a0070ef          	jal	ra,80010ff4 <__sprint_r>
80009f58:	74051863          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
80009f5c:	0fc10893          	addi	a7,sp,252
80009f60:	0bc12783          	lw	a5,188(sp)
80009f64:	00079863          	bnez	a5,80009f74 <_vfprintf_r+0x17e0>
80009f68:	000a1663          	bnez	s4,80009f74 <_vfprintf_r+0x17e0>
80009f6c:	00147793          	andi	a5,s0,1
80009f70:	f00788e3          	beqz	a5,80009e80 <_vfprintf_r+0x16ec>
80009f74:	03412783          	lw	a5,52(sp)
80009f78:	02012703          	lw	a4,32(sp)
80009f7c:	00888893          	addi	a7,a7,8
80009f80:	fef8ac23          	sw	a5,-8(a7)
80009f84:	02012783          	lw	a5,32(sp)
80009f88:	fef8ae23          	sw	a5,-4(a7)
80009f8c:	0dc12783          	lw	a5,220(sp)
80009f90:	00e787b3          	add	a5,a5,a4
80009f94:	0cf12e23          	sw	a5,220(sp)
80009f98:	0d812783          	lw	a5,216(sp)
80009f9c:	00700713          	li	a4,7
80009fa0:	00178793          	addi	a5,a5,1
80009fa4:	0cf12c23          	sw	a5,216(sp)
80009fa8:	00f75e63          	ble	a5,a4,80009fc4 <_vfprintf_r+0x1830>
80009fac:	0d410613          	addi	a2,sp,212
80009fb0:	00090593          	mv	a1,s2
80009fb4:	00098513          	mv	a0,s3
80009fb8:	03c070ef          	jal	ra,80010ff4 <__sprint_r>
80009fbc:	6e051663          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
80009fc0:	0fc10893          	addi	a7,sp,252
80009fc4:	0bc12a83          	lw	s5,188(sp)
80009fc8:	060ad063          	bgez	s5,8000a028 <_vfprintf_r+0x1894>
80009fcc:	41500ab3          	neg	s5,s5
80009fd0:	00088713          	mv	a4,a7
80009fd4:	01000b93          	li	s7,16
80009fd8:	00700c13          	li	s8,7
80009fdc:	01412603          	lw	a2,20(sp)
80009fe0:	0d812783          	lw	a5,216(sp)
80009fe4:	0dc12683          	lw	a3,220(sp)
80009fe8:	00c72023          	sw	a2,0(a4)
80009fec:	00178793          	addi	a5,a5,1
80009ff0:	00888893          	addi	a7,a7,8
80009ff4:	055bc663          	blt	s7,s5,8000a040 <_vfprintf_r+0x18ac>
80009ff8:	01572223          	sw	s5,4(a4)
80009ffc:	00da8ab3          	add	s5,s5,a3
8000a000:	0d512e23          	sw	s5,220(sp)
8000a004:	0cf12c23          	sw	a5,216(sp)
8000a008:	00700713          	li	a4,7
8000a00c:	00f75e63          	ble	a5,a4,8000a028 <_vfprintf_r+0x1894>
8000a010:	0d410613          	addi	a2,sp,212
8000a014:	00090593          	mv	a1,s2
8000a018:	00098513          	mv	a0,s3
8000a01c:	7d9060ef          	jal	ra,80010ff4 <__sprint_r>
8000a020:	68051463          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
8000a024:	0fc10893          	addi	a7,sp,252
8000a028:	0dc12783          	lw	a5,220(sp)
8000a02c:	0098a023          	sw	s1,0(a7)
8000a030:	0148a223          	sw	s4,4(a7)
8000a034:	014787b3          	add	a5,a5,s4
8000a038:	0cf12e23          	sw	a5,220(sp)
8000a03c:	979ff06f          	j	800099b4 <_vfprintf_r+0x1220>
8000a040:	01068693          	addi	a3,a3,16
8000a044:	01772223          	sw	s7,4(a4)
8000a048:	0cd12e23          	sw	a3,220(sp)
8000a04c:	0cf12c23          	sw	a5,216(sp)
8000a050:	00fc5e63          	ble	a5,s8,8000a06c <_vfprintf_r+0x18d8>
8000a054:	0d410613          	addi	a2,sp,212
8000a058:	00090593          	mv	a1,s2
8000a05c:	00098513          	mv	a0,s3
8000a060:	795060ef          	jal	ra,80010ff4 <__sprint_r>
8000a064:	64051263          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
8000a068:	0fc10893          	addi	a7,sp,252
8000a06c:	ff0a8a93          	addi	s5,s5,-16
8000a070:	00088713          	mv	a4,a7
8000a074:	f69ff06f          	j	80009fdc <_vfprintf_r+0x1848>
8000a078:	000c8a93          	mv	s5,s9
8000a07c:	019a5463          	ble	s9,s4,8000a084 <_vfprintf_r+0x18f0>
8000a080:	000a0a93          	mv	s5,s4
8000a084:	05505263          	blez	s5,8000a0c8 <_vfprintf_r+0x1934>
8000a088:	0d812703          	lw	a4,216(sp)
8000a08c:	01ba8db3          	add	s11,s5,s11
8000a090:	0098a023          	sw	s1,0(a7)
8000a094:	00170713          	addi	a4,a4,1
8000a098:	0158a223          	sw	s5,4(a7)
8000a09c:	0db12e23          	sw	s11,220(sp)
8000a0a0:	0ce12c23          	sw	a4,216(sp)
8000a0a4:	00700693          	li	a3,7
8000a0a8:	00888893          	addi	a7,a7,8
8000a0ac:	00e6de63          	ble	a4,a3,8000a0c8 <_vfprintf_r+0x1934>
8000a0b0:	0d410613          	addi	a2,sp,212
8000a0b4:	00090593          	mv	a1,s2
8000a0b8:	00098513          	mv	a0,s3
8000a0bc:	739060ef          	jal	ra,80010ff4 <__sprint_r>
8000a0c0:	5e051463          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
8000a0c4:	0fc10893          	addi	a7,sp,252
8000a0c8:	000ad463          	bgez	s5,8000a0d0 <_vfprintf_r+0x193c>
8000a0cc:	00000a93          	li	s5,0
8000a0d0:	415c8ab3          	sub	s5,s9,s5
8000a0d4:	05505e63          	blez	s5,8000a130 <_vfprintf_r+0x199c>
8000a0d8:	01000d13          	li	s10,16
8000a0dc:	00700d93          	li	s11,7
8000a0e0:	01412783          	lw	a5,20(sp)
8000a0e4:	0d812703          	lw	a4,216(sp)
8000a0e8:	0dc12683          	lw	a3,220(sp)
8000a0ec:	00f8a023          	sw	a5,0(a7)
8000a0f0:	00170713          	addi	a4,a4,1
8000a0f4:	00888613          	addi	a2,a7,8
8000a0f8:	195d4c63          	blt	s10,s5,8000a290 <_vfprintf_r+0x1afc>
8000a0fc:	0158a223          	sw	s5,4(a7)
8000a100:	00da8ab3          	add	s5,s5,a3
8000a104:	0d512e23          	sw	s5,220(sp)
8000a108:	0ce12c23          	sw	a4,216(sp)
8000a10c:	00700693          	li	a3,7
8000a110:	00060893          	mv	a7,a2
8000a114:	00e6de63          	ble	a4,a3,8000a130 <_vfprintf_r+0x199c>
8000a118:	0d410613          	addi	a2,sp,212
8000a11c:	00090593          	mv	a1,s2
8000a120:	00098513          	mv	a0,s3
8000a124:	6d1060ef          	jal	ra,80010ff4 <__sprint_r>
8000a128:	58051063          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
8000a12c:	0fc10893          	addi	a7,sp,252
8000a130:	40047793          	andi	a5,s0,1024
8000a134:	01948ab3          	add	s5,s1,s9
8000a138:	02078063          	beqz	a5,8000a158 <_vfprintf_r+0x19c4>
8000a13c:	00700d13          	li	s10,7
8000a140:	01448db3          	add	s11,s1,s4
8000a144:	180b9263          	bnez	s7,8000a2c8 <_vfprintf_r+0x1b34>
8000a148:	180c1263          	bnez	s8,8000a2cc <_vfprintf_r+0x1b38>
8000a14c:	014487b3          	add	a5,s1,s4
8000a150:	0157f463          	bleu	s5,a5,8000a158 <_vfprintf_r+0x19c4>
8000a154:	00078a93          	mv	s5,a5
8000a158:	0bc12783          	lw	a5,188(sp)
8000a15c:	0147c663          	blt	a5,s4,8000a168 <_vfprintf_r+0x19d4>
8000a160:	00147793          	andi	a5,s0,1
8000a164:	04078a63          	beqz	a5,8000a1b8 <_vfprintf_r+0x1a24>
8000a168:	03412783          	lw	a5,52(sp)
8000a16c:	02012703          	lw	a4,32(sp)
8000a170:	00888893          	addi	a7,a7,8
8000a174:	fef8ac23          	sw	a5,-8(a7)
8000a178:	02012783          	lw	a5,32(sp)
8000a17c:	fef8ae23          	sw	a5,-4(a7)
8000a180:	0dc12783          	lw	a5,220(sp)
8000a184:	00e787b3          	add	a5,a5,a4
8000a188:	0cf12e23          	sw	a5,220(sp)
8000a18c:	0d812783          	lw	a5,216(sp)
8000a190:	00700713          	li	a4,7
8000a194:	00178793          	addi	a5,a5,1
8000a198:	0cf12c23          	sw	a5,216(sp)
8000a19c:	00f75e63          	ble	a5,a4,8000a1b8 <_vfprintf_r+0x1a24>
8000a1a0:	0d410613          	addi	a2,sp,212
8000a1a4:	00090593          	mv	a1,s2
8000a1a8:	00098513          	mv	a0,s3
8000a1ac:	649060ef          	jal	ra,80010ff4 <__sprint_r>
8000a1b0:	4e051c63          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
8000a1b4:	0fc10893          	addi	a7,sp,252
8000a1b8:	014484b3          	add	s1,s1,s4
8000a1bc:	415487b3          	sub	a5,s1,s5
8000a1c0:	0bc12483          	lw	s1,188(sp)
8000a1c4:	409a04b3          	sub	s1,s4,s1
8000a1c8:	0097d463          	ble	s1,a5,8000a1d0 <_vfprintf_r+0x1a3c>
8000a1cc:	00078493          	mv	s1,a5
8000a1d0:	04905463          	blez	s1,8000a218 <_vfprintf_r+0x1a84>
8000a1d4:	0dc12783          	lw	a5,220(sp)
8000a1d8:	0158a023          	sw	s5,0(a7)
8000a1dc:	0098a223          	sw	s1,4(a7)
8000a1e0:	00f487b3          	add	a5,s1,a5
8000a1e4:	0cf12e23          	sw	a5,220(sp)
8000a1e8:	0d812783          	lw	a5,216(sp)
8000a1ec:	00700713          	li	a4,7
8000a1f0:	00888893          	addi	a7,a7,8
8000a1f4:	00178793          	addi	a5,a5,1
8000a1f8:	0cf12c23          	sw	a5,216(sp)
8000a1fc:	00f75e63          	ble	a5,a4,8000a218 <_vfprintf_r+0x1a84>
8000a200:	0d410613          	addi	a2,sp,212
8000a204:	00090593          	mv	a1,s2
8000a208:	00098513          	mv	a0,s3
8000a20c:	5e9060ef          	jal	ra,80010ff4 <__sprint_r>
8000a210:	48051c63          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
8000a214:	0fc10893          	addi	a7,sp,252
8000a218:	00048793          	mv	a5,s1
8000a21c:	0004d463          	bgez	s1,8000a224 <_vfprintf_r+0x1a90>
8000a220:	00000793          	li	a5,0
8000a224:	0bc12483          	lw	s1,188(sp)
8000a228:	409a04b3          	sub	s1,s4,s1
8000a22c:	40f484b3          	sub	s1,s1,a5
8000a230:	c49058e3          	blez	s1,80009e80 <_vfprintf_r+0x16ec>
8000a234:	01000a93          	li	s5,16
8000a238:	00700b93          	li	s7,7
8000a23c:	01412603          	lw	a2,20(sp)
8000a240:	0d812783          	lw	a5,216(sp)
8000a244:	0dc12703          	lw	a4,220(sp)
8000a248:	00c8a023          	sw	a2,0(a7)
8000a24c:	00178793          	addi	a5,a5,1
8000a250:	00888693          	addi	a3,a7,8
8000a254:	c09ad8e3          	ble	s1,s5,80009e64 <_vfprintf_r+0x16d0>
8000a258:	01070713          	addi	a4,a4,16
8000a25c:	0158a223          	sw	s5,4(a7)
8000a260:	0ce12e23          	sw	a4,220(sp)
8000a264:	0cf12c23          	sw	a5,216(sp)
8000a268:	00fbde63          	ble	a5,s7,8000a284 <_vfprintf_r+0x1af0>
8000a26c:	0d410613          	addi	a2,sp,212
8000a270:	00090593          	mv	a1,s2
8000a274:	00098513          	mv	a0,s3
8000a278:	57d060ef          	jal	ra,80010ff4 <__sprint_r>
8000a27c:	42051663          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
8000a280:	0fc10693          	addi	a3,sp,252
8000a284:	ff048493          	addi	s1,s1,-16
8000a288:	00068893          	mv	a7,a3
8000a28c:	fb1ff06f          	j	8000a23c <_vfprintf_r+0x1aa8>
8000a290:	01068693          	addi	a3,a3,16
8000a294:	01a8a223          	sw	s10,4(a7)
8000a298:	0cd12e23          	sw	a3,220(sp)
8000a29c:	0ce12c23          	sw	a4,216(sp)
8000a2a0:	00edde63          	ble	a4,s11,8000a2bc <_vfprintf_r+0x1b28>
8000a2a4:	0d410613          	addi	a2,sp,212
8000a2a8:	00090593          	mv	a1,s2
8000a2ac:	00098513          	mv	a0,s3
8000a2b0:	545060ef          	jal	ra,80010ff4 <__sprint_r>
8000a2b4:	3e051a63          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
8000a2b8:	0fc10613          	addi	a2,sp,252
8000a2bc:	ff0a8a93          	addi	s5,s5,-16
8000a2c0:	00060893          	mv	a7,a2
8000a2c4:	e1dff06f          	j	8000a0e0 <_vfprintf_r+0x194c>
8000a2c8:	0c0c0e63          	beqz	s8,8000a3a4 <_vfprintf_r+0x1c10>
8000a2cc:	fffc0c13          	addi	s8,s8,-1
8000a2d0:	03812783          	lw	a5,56(sp)
8000a2d4:	03012703          	lw	a4,48(sp)
8000a2d8:	00888893          	addi	a7,a7,8
8000a2dc:	fef8ac23          	sw	a5,-8(a7)
8000a2e0:	03012783          	lw	a5,48(sp)
8000a2e4:	fef8ae23          	sw	a5,-4(a7)
8000a2e8:	0dc12783          	lw	a5,220(sp)
8000a2ec:	00e787b3          	add	a5,a5,a4
8000a2f0:	0cf12e23          	sw	a5,220(sp)
8000a2f4:	0d812783          	lw	a5,216(sp)
8000a2f8:	00178793          	addi	a5,a5,1
8000a2fc:	0cf12c23          	sw	a5,216(sp)
8000a300:	00fd5e63          	ble	a5,s10,8000a31c <_vfprintf_r+0x1b88>
8000a304:	0d410613          	addi	a2,sp,212
8000a308:	00090593          	mv	a1,s2
8000a30c:	00098513          	mv	a0,s3
8000a310:	4e5060ef          	jal	ra,80010ff4 <__sprint_r>
8000a314:	38051a63          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
8000a318:	0fc10893          	addi	a7,sp,252
8000a31c:	01012783          	lw	a5,16(sp)
8000a320:	415d8733          	sub	a4,s11,s5
8000a324:	0007cb03          	lbu	s6,0(a5)
8000a328:	01675463          	ble	s6,a4,8000a330 <_vfprintf_r+0x1b9c>
8000a32c:	00070b13          	mv	s6,a4
8000a330:	05605263          	blez	s6,8000a374 <_vfprintf_r+0x1be0>
8000a334:	0dc12703          	lw	a4,220(sp)
8000a338:	0158a023          	sw	s5,0(a7)
8000a33c:	0168a223          	sw	s6,4(a7)
8000a340:	00eb0733          	add	a4,s6,a4
8000a344:	0ce12e23          	sw	a4,220(sp)
8000a348:	0d812703          	lw	a4,216(sp)
8000a34c:	00888893          	addi	a7,a7,8
8000a350:	00170713          	addi	a4,a4,1
8000a354:	0ce12c23          	sw	a4,216(sp)
8000a358:	00ed5e63          	ble	a4,s10,8000a374 <_vfprintf_r+0x1be0>
8000a35c:	0d410613          	addi	a2,sp,212
8000a360:	00090593          	mv	a1,s2
8000a364:	00098513          	mv	a0,s3
8000a368:	48d060ef          	jal	ra,80010ff4 <__sprint_r>
8000a36c:	32051e63          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
8000a370:	0fc10893          	addi	a7,sp,252
8000a374:	000b0713          	mv	a4,s6
8000a378:	000b5463          	bgez	s6,8000a380 <_vfprintf_r+0x1bec>
8000a37c:	00000713          	li	a4,0
8000a380:	01012783          	lw	a5,16(sp)
8000a384:	01000813          	li	a6,16
8000a388:	0007c783          	lbu	a5,0(a5)
8000a38c:	40e78b33          	sub	s6,a5,a4
8000a390:	07604263          	bgtz	s6,8000a3f4 <_vfprintf_r+0x1c60>
8000a394:	01012783          	lw	a5,16(sp)
8000a398:	0007c783          	lbu	a5,0(a5)
8000a39c:	00fa8ab3          	add	s5,s5,a5
8000a3a0:	da5ff06f          	j	8000a144 <_vfprintf_r+0x19b0>
8000a3a4:	01012783          	lw	a5,16(sp)
8000a3a8:	fffb8b93          	addi	s7,s7,-1
8000a3ac:	fff78793          	addi	a5,a5,-1
8000a3b0:	00f12823          	sw	a5,16(sp)
8000a3b4:	f1dff06f          	j	8000a2d0 <_vfprintf_r+0x1b3c>
8000a3b8:	01068693          	addi	a3,a3,16
8000a3bc:	0108a223          	sw	a6,4(a7)
8000a3c0:	0cd12e23          	sw	a3,220(sp)
8000a3c4:	0ce12c23          	sw	a4,216(sp)
8000a3c8:	02ed5263          	ble	a4,s10,8000a3ec <_vfprintf_r+0x1c58>
8000a3cc:	0d410613          	addi	a2,sp,212
8000a3d0:	00090593          	mv	a1,s2
8000a3d4:	00098513          	mv	a0,s3
8000a3d8:	05012223          	sw	a6,68(sp)
8000a3dc:	419060ef          	jal	ra,80010ff4 <__sprint_r>
8000a3e0:	2c051463          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
8000a3e4:	04412803          	lw	a6,68(sp)
8000a3e8:	0fc10613          	addi	a2,sp,252
8000a3ec:	ff0b0b13          	addi	s6,s6,-16
8000a3f0:	00060893          	mv	a7,a2
8000a3f4:	01412783          	lw	a5,20(sp)
8000a3f8:	0d812703          	lw	a4,216(sp)
8000a3fc:	0dc12683          	lw	a3,220(sp)
8000a400:	00f8a023          	sw	a5,0(a7)
8000a404:	00170713          	addi	a4,a4,1
8000a408:	00888613          	addi	a2,a7,8
8000a40c:	fb6846e3          	blt	a6,s6,8000a3b8 <_vfprintf_r+0x1c24>
8000a410:	00db07b3          	add	a5,s6,a3
8000a414:	0168a223          	sw	s6,4(a7)
8000a418:	0cf12e23          	sw	a5,220(sp)
8000a41c:	0ce12c23          	sw	a4,216(sp)
8000a420:	00060893          	mv	a7,a2
8000a424:	f6ed58e3          	ble	a4,s10,8000a394 <_vfprintf_r+0x1c00>
8000a428:	0d410613          	addi	a2,sp,212
8000a42c:	00090593          	mv	a1,s2
8000a430:	00098513          	mv	a0,s3
8000a434:	3c1060ef          	jal	ra,80010ff4 <__sprint_r>
8000a438:	26051863          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
8000a43c:	0fc10893          	addi	a7,sp,252
8000a440:	f55ff06f          	j	8000a394 <_vfprintf_r+0x1c00>
8000a444:	0d812783          	lw	a5,216(sp)
8000a448:	00100713          	li	a4,1
8000a44c:	0098a023          	sw	s1,0(a7)
8000a450:	001d8d93          	addi	s11,s11,1
8000a454:	00178793          	addi	a5,a5,1
8000a458:	00888b93          	addi	s7,a7,8
8000a45c:	01474663          	blt	a4,s4,8000a468 <_vfprintf_r+0x1cd4>
8000a460:	00147693          	andi	a3,s0,1
8000a464:	1c068663          	beqz	a3,8000a630 <_vfprintf_r+0x1e9c>
8000a468:	00100713          	li	a4,1
8000a46c:	00e8a223          	sw	a4,4(a7)
8000a470:	0db12e23          	sw	s11,220(sp)
8000a474:	0cf12c23          	sw	a5,216(sp)
8000a478:	00700713          	li	a4,7
8000a47c:	00f75e63          	ble	a5,a4,8000a498 <_vfprintf_r+0x1d04>
8000a480:	0d410613          	addi	a2,sp,212
8000a484:	00090593          	mv	a1,s2
8000a488:	00098513          	mv	a0,s3
8000a48c:	369060ef          	jal	ra,80010ff4 <__sprint_r>
8000a490:	20051c63          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
8000a494:	0fc10b93          	addi	s7,sp,252
8000a498:	03412783          	lw	a5,52(sp)
8000a49c:	02012703          	lw	a4,32(sp)
8000a4a0:	008b8b93          	addi	s7,s7,8
8000a4a4:	fefbac23          	sw	a5,-8(s7)
8000a4a8:	02012783          	lw	a5,32(sp)
8000a4ac:	fefbae23          	sw	a5,-4(s7)
8000a4b0:	0dc12783          	lw	a5,220(sp)
8000a4b4:	00e787b3          	add	a5,a5,a4
8000a4b8:	0cf12e23          	sw	a5,220(sp)
8000a4bc:	0d812783          	lw	a5,216(sp)
8000a4c0:	00700713          	li	a4,7
8000a4c4:	00178793          	addi	a5,a5,1
8000a4c8:	0cf12c23          	sw	a5,216(sp)
8000a4cc:	00f75e63          	ble	a5,a4,8000a4e8 <_vfprintf_r+0x1d54>
8000a4d0:	0d410613          	addi	a2,sp,212
8000a4d4:	00090593          	mv	a1,s2
8000a4d8:	00098513          	mv	a0,s3
8000a4dc:	319060ef          	jal	ra,80010ff4 <__sprint_r>
8000a4e0:	1c051463          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
8000a4e4:	0fc10b93          	addi	s7,sp,252
8000a4e8:	0e012783          	lw	a5,224(sp)
8000a4ec:	09010593          	addi	a1,sp,144
8000a4f0:	0a010513          	addi	a0,sp,160
8000a4f4:	0af12023          	sw	a5,160(sp)
8000a4f8:	0e412783          	lw	a5,228(sp)
8000a4fc:	fffa0a93          	addi	s5,s4,-1
8000a500:	08012823          	sw	zero,144(sp)
8000a504:	0af12223          	sw	a5,164(sp)
8000a508:	0e812783          	lw	a5,232(sp)
8000a50c:	08012a23          	sw	zero,148(sp)
8000a510:	08012c23          	sw	zero,152(sp)
8000a514:	0af12423          	sw	a5,168(sp)
8000a518:	0ec12783          	lw	a5,236(sp)
8000a51c:	08012e23          	sw	zero,156(sp)
8000a520:	0af12623          	sw	a5,172(sp)
8000a524:	6b90a0ef          	jal	ra,800153dc <__eqtf2>
8000a528:	08050663          	beqz	a0,8000a5b4 <_vfprintf_r+0x1e20>
8000a52c:	0dc12783          	lw	a5,220(sp)
8000a530:	0d812703          	lw	a4,216(sp)
8000a534:	00148493          	addi	s1,s1,1
8000a538:	fff78793          	addi	a5,a5,-1
8000a53c:	014787b3          	add	a5,a5,s4
8000a540:	00170713          	addi	a4,a4,1
8000a544:	009ba023          	sw	s1,0(s7)
8000a548:	015ba223          	sw	s5,4(s7)
8000a54c:	0cf12e23          	sw	a5,220(sp)
8000a550:	0ce12c23          	sw	a4,216(sp)
8000a554:	00700793          	li	a5,7
8000a558:	008b8b93          	addi	s7,s7,8
8000a55c:	00e7de63          	ble	a4,a5,8000a578 <_vfprintf_r+0x1de4>
8000a560:	0d410613          	addi	a2,sp,212
8000a564:	00090593          	mv	a1,s2
8000a568:	00098513          	mv	a0,s3
8000a56c:	289060ef          	jal	ra,80010ff4 <__sprint_r>
8000a570:	12051c63          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
8000a574:	0fc10b93          	addi	s7,sp,252
8000a578:	0c410793          	addi	a5,sp,196
8000a57c:	00fba023          	sw	a5,0(s7)
8000a580:	03c12783          	lw	a5,60(sp)
8000a584:	03c12703          	lw	a4,60(sp)
8000a588:	008b8893          	addi	a7,s7,8
8000a58c:	00fba223          	sw	a5,4(s7)
8000a590:	0dc12783          	lw	a5,220(sp)
8000a594:	00e787b3          	add	a5,a5,a4
8000a598:	0cf12e23          	sw	a5,220(sp)
8000a59c:	0d812783          	lw	a5,216(sp)
8000a5a0:	00700713          	li	a4,7
8000a5a4:	00178793          	addi	a5,a5,1
8000a5a8:	0cf12c23          	sw	a5,216(sp)
8000a5ac:	8cf75ae3          	ble	a5,a4,80009e80 <_vfprintf_r+0x16ec>
8000a5b0:	c1cff06f          	j	800099cc <_vfprintf_r+0x1238>
8000a5b4:	fd5052e3          	blez	s5,8000a578 <_vfprintf_r+0x1de4>
8000a5b8:	01000493          	li	s1,16
8000a5bc:	00700c13          	li	s8,7
8000a5c0:	01412603          	lw	a2,20(sp)
8000a5c4:	0d812703          	lw	a4,216(sp)
8000a5c8:	0dc12783          	lw	a5,220(sp)
8000a5cc:	00cba023          	sw	a2,0(s7)
8000a5d0:	00170713          	addi	a4,a4,1
8000a5d4:	008b8693          	addi	a3,s7,8
8000a5d8:	0354c063          	blt	s1,s5,8000a5f8 <_vfprintf_r+0x1e64>
8000a5dc:	00fa87b3          	add	a5,s5,a5
8000a5e0:	015ba223          	sw	s5,4(s7)
8000a5e4:	0cf12e23          	sw	a5,220(sp)
8000a5e8:	0ce12c23          	sw	a4,216(sp)
8000a5ec:	00700793          	li	a5,7
8000a5f0:	00068b93          	mv	s7,a3
8000a5f4:	f69ff06f          	j	8000a55c <_vfprintf_r+0x1dc8>
8000a5f8:	01078793          	addi	a5,a5,16
8000a5fc:	009ba223          	sw	s1,4(s7)
8000a600:	0cf12e23          	sw	a5,220(sp)
8000a604:	0ce12c23          	sw	a4,216(sp)
8000a608:	00ec5e63          	ble	a4,s8,8000a624 <_vfprintf_r+0x1e90>
8000a60c:	0d410613          	addi	a2,sp,212
8000a610:	00090593          	mv	a1,s2
8000a614:	00098513          	mv	a0,s3
8000a618:	1dd060ef          	jal	ra,80010ff4 <__sprint_r>
8000a61c:	08051663          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
8000a620:	0fc10693          	addi	a3,sp,252
8000a624:	ff0a8a93          	addi	s5,s5,-16
8000a628:	00068b93          	mv	s7,a3
8000a62c:	f95ff06f          	j	8000a5c0 <_vfprintf_r+0x1e2c>
8000a630:	00e8a223          	sw	a4,4(a7)
8000a634:	0db12e23          	sw	s11,220(sp)
8000a638:	0cf12c23          	sw	a5,216(sp)
8000a63c:	00700713          	li	a4,7
8000a640:	f2f75ce3          	ble	a5,a4,8000a578 <_vfprintf_r+0x1de4>
8000a644:	f1dff06f          	j	8000a560 <_vfprintf_r+0x1dcc>
8000a648:	02812783          	lw	a5,40(sp)
8000a64c:	02c12703          	lw	a4,44(sp)
8000a650:	40e78433          	sub	s0,a5,a4
8000a654:	82805ae3          	blez	s0,80009e88 <_vfprintf_r+0x16f4>
8000a658:	800204b7          	lui	s1,0x80020
8000a65c:	01000a93          	li	s5,16
8000a660:	27448493          	addi	s1,s1,628 # 80020274 <__stack+0xfffe37a8>
8000a664:	00700b93          	li	s7,7
8000a668:	0d812783          	lw	a5,216(sp)
8000a66c:	0098a023          	sw	s1,0(a7)
8000a670:	0dc12703          	lw	a4,220(sp)
8000a674:	00178793          	addi	a5,a5,1
8000a678:	048ac663          	blt	s5,s0,8000a6c4 <_vfprintf_r+0x1f30>
8000a67c:	0088a223          	sw	s0,4(a7)
8000a680:	00e40433          	add	s0,s0,a4
8000a684:	0c812e23          	sw	s0,220(sp)
8000a688:	0cf12c23          	sw	a5,216(sp)
8000a68c:	00700713          	li	a4,7
8000a690:	fef75c63          	ble	a5,a4,80009e88 <_vfprintf_r+0x16f4>
8000a694:	0d410613          	addi	a2,sp,212
8000a698:	00090593          	mv	a1,s2
8000a69c:	00098513          	mv	a0,s3
8000a6a0:	155060ef          	jal	ra,80010ff4 <__sprint_r>
8000a6a4:	fe050263          	beqz	a0,80009e88 <_vfprintf_r+0x16f4>
8000a6a8:	00c12783          	lw	a5,12(sp)
8000a6ac:	00079463          	bnez	a5,8000a6b4 <_vfprintf_r+0x1f20>
8000a6b0:	fbcfe06f          	j	80008e6c <_vfprintf_r+0x6d8>
8000a6b4:	00078593          	mv	a1,a5
8000a6b8:	00098513          	mv	a0,s3
8000a6bc:	0e5000ef          	jal	ra,8000afa0 <_free_r>
8000a6c0:	facfe06f          	j	80008e6c <_vfprintf_r+0x6d8>
8000a6c4:	01070713          	addi	a4,a4,16
8000a6c8:	0158a223          	sw	s5,4(a7)
8000a6cc:	0ce12e23          	sw	a4,220(sp)
8000a6d0:	0cf12c23          	sw	a5,216(sp)
8000a6d4:	00888893          	addi	a7,a7,8
8000a6d8:	00fbde63          	ble	a5,s7,8000a6f4 <_vfprintf_r+0x1f60>
8000a6dc:	0d410613          	addi	a2,sp,212
8000a6e0:	00090593          	mv	a1,s2
8000a6e4:	00098513          	mv	a0,s3
8000a6e8:	10d060ef          	jal	ra,80010ff4 <__sprint_r>
8000a6ec:	fa051ee3          	bnez	a0,8000a6a8 <_vfprintf_r+0x1f14>
8000a6f0:	0fc10893          	addi	a7,sp,252
8000a6f4:	ff040413          	addi	s0,s0,-16
8000a6f8:	f71ff06f          	j	8000a668 <_vfprintf_r+0x1ed4>
8000a6fc:	00c12583          	lw	a1,12(sp)
8000a700:	00098513          	mv	a0,s3
8000a704:	09d000ef          	jal	ra,8000afa0 <_free_r>
8000a708:	fc4ff06f          	j	80009ecc <_vfprintf_r+0x1738>
8000a70c:	0dc12783          	lw	a5,220(sp)
8000a710:	00079463          	bnez	a5,8000a718 <_vfprintf_r+0x1f84>
8000a714:	f58fe06f          	j	80008e6c <_vfprintf_r+0x6d8>
8000a718:	0d410613          	addi	a2,sp,212
8000a71c:	00090593          	mv	a1,s2
8000a720:	00098513          	mv	a0,s3
8000a724:	0d1060ef          	jal	ra,80010ff4 <__sprint_r>
8000a728:	f44fe06f          	j	80008e6c <_vfprintf_r+0x6d8>

8000a72c <vfprintf>:
8000a72c:	800217b7          	lui	a5,0x80021
8000a730:	00060693          	mv	a3,a2
8000a734:	00058613          	mv	a2,a1
8000a738:	00050593          	mv	a1,a0
8000a73c:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000a740:	854fe06f          	j	80008794 <_vfprintf_r>

8000a744 <__sbprintf>:
8000a744:	00c5d783          	lhu	a5,12(a1)
8000a748:	b8010113          	addi	sp,sp,-1152
8000a74c:	46812c23          	sw	s0,1144(sp)
8000a750:	ffd7f793          	andi	a5,a5,-3
8000a754:	00f11a23          	sh	a5,20(sp)
8000a758:	0645a783          	lw	a5,100(a1)
8000a75c:	00058413          	mv	s0,a1
8000a760:	46912a23          	sw	s1,1140(sp)
8000a764:	06f12623          	sw	a5,108(sp)
8000a768:	00e5d783          	lhu	a5,14(a1)
8000a76c:	47212823          	sw	s2,1136(sp)
8000a770:	46112e23          	sw	ra,1148(sp)
8000a774:	00f11b23          	sh	a5,22(sp)
8000a778:	01c5a783          	lw	a5,28(a1)
8000a77c:	00050913          	mv	s2,a0
8000a780:	02012023          	sw	zero,32(sp)
8000a784:	02f12223          	sw	a5,36(sp)
8000a788:	0245a783          	lw	a5,36(a1)
8000a78c:	00810593          	addi	a1,sp,8
8000a790:	02f12623          	sw	a5,44(sp)
8000a794:	07010793          	addi	a5,sp,112
8000a798:	00f12423          	sw	a5,8(sp)
8000a79c:	00f12c23          	sw	a5,24(sp)
8000a7a0:	40000793          	li	a5,1024
8000a7a4:	00f12823          	sw	a5,16(sp)
8000a7a8:	00f12e23          	sw	a5,28(sp)
8000a7ac:	fe9fd0ef          	jal	ra,80008794 <_vfprintf_r>
8000a7b0:	00050493          	mv	s1,a0
8000a7b4:	00054c63          	bltz	a0,8000a7cc <__sbprintf+0x88>
8000a7b8:	00810593          	addi	a1,sp,8
8000a7bc:	00090513          	mv	a0,s2
8000a7c0:	380000ef          	jal	ra,8000ab40 <_fflush_r>
8000a7c4:	00050463          	beqz	a0,8000a7cc <__sbprintf+0x88>
8000a7c8:	fff00493          	li	s1,-1
8000a7cc:	01415783          	lhu	a5,20(sp)
8000a7d0:	0407f793          	andi	a5,a5,64
8000a7d4:	00078863          	beqz	a5,8000a7e4 <__sbprintf+0xa0>
8000a7d8:	00c45783          	lhu	a5,12(s0)
8000a7dc:	0407e793          	ori	a5,a5,64
8000a7e0:	00f41623          	sh	a5,12(s0)
8000a7e4:	47c12083          	lw	ra,1148(sp)
8000a7e8:	47812403          	lw	s0,1144(sp)
8000a7ec:	00048513          	mv	a0,s1
8000a7f0:	47012903          	lw	s2,1136(sp)
8000a7f4:	47412483          	lw	s1,1140(sp)
8000a7f8:	48010113          	addi	sp,sp,1152
8000a7fc:	00008067          	ret

8000a800 <__swsetup_r>:
8000a800:	ff010113          	addi	sp,sp,-16
8000a804:	800217b7          	lui	a5,0x80021
8000a808:	00912223          	sw	s1,4(sp)
8000a80c:	00050493          	mv	s1,a0
8000a810:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000a814:	00812423          	sw	s0,8(sp)
8000a818:	00112623          	sw	ra,12(sp)
8000a81c:	00058413          	mv	s0,a1
8000a820:	00050863          	beqz	a0,8000a830 <__swsetup_r+0x30>
8000a824:	03852783          	lw	a5,56(a0)
8000a828:	00079463          	bnez	a5,8000a830 <__swsetup_r+0x30>
8000a82c:	4b0000ef          	jal	ra,8000acdc <__sinit>
8000a830:	00c41703          	lh	a4,12(s0)
8000a834:	01071793          	slli	a5,a4,0x10
8000a838:	0107d793          	srli	a5,a5,0x10
8000a83c:	0087f693          	andi	a3,a5,8
8000a840:	06069e63          	bnez	a3,8000a8bc <__swsetup_r+0xbc>
8000a844:	0107f693          	andi	a3,a5,16
8000a848:	02069663          	bnez	a3,8000a874 <__swsetup_r+0x74>
8000a84c:	00900793          	li	a5,9
8000a850:	00f4a023          	sw	a5,0(s1)
8000a854:	04076713          	ori	a4,a4,64
8000a858:	00e41623          	sh	a4,12(s0)
8000a85c:	fff00513          	li	a0,-1
8000a860:	00c12083          	lw	ra,12(sp)
8000a864:	00812403          	lw	s0,8(sp)
8000a868:	00412483          	lw	s1,4(sp)
8000a86c:	01010113          	addi	sp,sp,16
8000a870:	00008067          	ret
8000a874:	0047f793          	andi	a5,a5,4
8000a878:	02078c63          	beqz	a5,8000a8b0 <__swsetup_r+0xb0>
8000a87c:	03042583          	lw	a1,48(s0)
8000a880:	00058c63          	beqz	a1,8000a898 <__swsetup_r+0x98>
8000a884:	04040793          	addi	a5,s0,64
8000a888:	00f58663          	beq	a1,a5,8000a894 <__swsetup_r+0x94>
8000a88c:	00048513          	mv	a0,s1
8000a890:	710000ef          	jal	ra,8000afa0 <_free_r>
8000a894:	02042823          	sw	zero,48(s0)
8000a898:	00c45783          	lhu	a5,12(s0)
8000a89c:	00042223          	sw	zero,4(s0)
8000a8a0:	fdb7f793          	andi	a5,a5,-37
8000a8a4:	00f41623          	sh	a5,12(s0)
8000a8a8:	01042783          	lw	a5,16(s0)
8000a8ac:	00f42023          	sw	a5,0(s0)
8000a8b0:	00c45783          	lhu	a5,12(s0)
8000a8b4:	0087e793          	ori	a5,a5,8
8000a8b8:	00f41623          	sh	a5,12(s0)
8000a8bc:	01042783          	lw	a5,16(s0)
8000a8c0:	02079063          	bnez	a5,8000a8e0 <__swsetup_r+0xe0>
8000a8c4:	00c45783          	lhu	a5,12(s0)
8000a8c8:	20000713          	li	a4,512
8000a8cc:	2807f793          	andi	a5,a5,640
8000a8d0:	00e78863          	beq	a5,a4,8000a8e0 <__swsetup_r+0xe0>
8000a8d4:	00040593          	mv	a1,s0
8000a8d8:	00048513          	mv	a0,s1
8000a8dc:	451020ef          	jal	ra,8000d52c <__smakebuf_r>
8000a8e0:	00c45783          	lhu	a5,12(s0)
8000a8e4:	0017f713          	andi	a4,a5,1
8000a8e8:	02070c63          	beqz	a4,8000a920 <__swsetup_r+0x120>
8000a8ec:	01442783          	lw	a5,20(s0)
8000a8f0:	00042423          	sw	zero,8(s0)
8000a8f4:	40f007b3          	neg	a5,a5
8000a8f8:	00f42c23          	sw	a5,24(s0)
8000a8fc:	01042783          	lw	a5,16(s0)
8000a900:	00000513          	li	a0,0
8000a904:	f4079ee3          	bnez	a5,8000a860 <__swsetup_r+0x60>
8000a908:	00c41783          	lh	a5,12(s0)
8000a90c:	0807f713          	andi	a4,a5,128
8000a910:	f40708e3          	beqz	a4,8000a860 <__swsetup_r+0x60>
8000a914:	0407e793          	ori	a5,a5,64
8000a918:	00f41623          	sh	a5,12(s0)
8000a91c:	f41ff06f          	j	8000a85c <__swsetup_r+0x5c>
8000a920:	0027f793          	andi	a5,a5,2
8000a924:	00000713          	li	a4,0
8000a928:	00079463          	bnez	a5,8000a930 <__swsetup_r+0x130>
8000a92c:	01442703          	lw	a4,20(s0)
8000a930:	00e42423          	sw	a4,8(s0)
8000a934:	fc9ff06f          	j	8000a8fc <__swsetup_r+0xfc>

8000a938 <__sflush_r>:
8000a938:	00c59783          	lh	a5,12(a1)
8000a93c:	fe010113          	addi	sp,sp,-32
8000a940:	00812c23          	sw	s0,24(sp)
8000a944:	01079713          	slli	a4,a5,0x10
8000a948:	01075713          	srli	a4,a4,0x10
8000a94c:	00912a23          	sw	s1,20(sp)
8000a950:	00112e23          	sw	ra,28(sp)
8000a954:	01212823          	sw	s2,16(sp)
8000a958:	01312623          	sw	s3,12(sp)
8000a95c:	00877693          	andi	a3,a4,8
8000a960:	00050493          	mv	s1,a0
8000a964:	00058413          	mv	s0,a1
8000a968:	16069c63          	bnez	a3,8000aae0 <__sflush_r+0x1a8>
8000a96c:	00001737          	lui	a4,0x1
8000a970:	80070713          	addi	a4,a4,-2048 # 800 <_HEAP_SIZE-0x800>
8000a974:	00e7e7b3          	or	a5,a5,a4
8000a978:	0045a703          	lw	a4,4(a1)
8000a97c:	00f59623          	sh	a5,12(a1)
8000a980:	02e04663          	bgtz	a4,8000a9ac <__sflush_r+0x74>
8000a984:	03c5a703          	lw	a4,60(a1)
8000a988:	02e04263          	bgtz	a4,8000a9ac <__sflush_r+0x74>
8000a98c:	00000513          	li	a0,0
8000a990:	01c12083          	lw	ra,28(sp)
8000a994:	01812403          	lw	s0,24(sp)
8000a998:	01412483          	lw	s1,20(sp)
8000a99c:	01012903          	lw	s2,16(sp)
8000a9a0:	00c12983          	lw	s3,12(sp)
8000a9a4:	02010113          	addi	sp,sp,32
8000a9a8:	00008067          	ret
8000a9ac:	02842703          	lw	a4,40(s0)
8000a9b0:	fc070ee3          	beqz	a4,8000a98c <__sflush_r+0x54>
8000a9b4:	0004a903          	lw	s2,0(s1)
8000a9b8:	01379693          	slli	a3,a5,0x13
8000a9bc:	0004a023          	sw	zero,0(s1)
8000a9c0:	01c42583          	lw	a1,28(s0)
8000a9c4:	0c06d863          	bgez	a3,8000aa94 <__sflush_r+0x15c>
8000a9c8:	05042603          	lw	a2,80(s0)
8000a9cc:	00c45783          	lhu	a5,12(s0)
8000a9d0:	0047f793          	andi	a5,a5,4
8000a9d4:	00078e63          	beqz	a5,8000a9f0 <__sflush_r+0xb8>
8000a9d8:	00442783          	lw	a5,4(s0)
8000a9dc:	40f60633          	sub	a2,a2,a5
8000a9e0:	03042783          	lw	a5,48(s0)
8000a9e4:	00078663          	beqz	a5,8000a9f0 <__sflush_r+0xb8>
8000a9e8:	03c42783          	lw	a5,60(s0)
8000a9ec:	40f60633          	sub	a2,a2,a5
8000a9f0:	02842783          	lw	a5,40(s0)
8000a9f4:	01c42583          	lw	a1,28(s0)
8000a9f8:	00000693          	li	a3,0
8000a9fc:	00048513          	mv	a0,s1
8000aa00:	000780e7          	jalr	a5
8000aa04:	fff00793          	li	a5,-1
8000aa08:	00c45683          	lhu	a3,12(s0)
8000aa0c:	02f51263          	bne	a0,a5,8000aa30 <__sflush_r+0xf8>
8000aa10:	0004a783          	lw	a5,0(s1)
8000aa14:	01d00713          	li	a4,29
8000aa18:	0af76c63          	bltu	a4,a5,8000aad0 <__sflush_r+0x198>
8000aa1c:	20400737          	lui	a4,0x20400
8000aa20:	00170713          	addi	a4,a4,1 # 20400001 <_HEAP_SIZE+0x203ff001>
8000aa24:	00f75733          	srl	a4,a4,a5
8000aa28:	00177713          	andi	a4,a4,1
8000aa2c:	0a070263          	beqz	a4,8000aad0 <__sflush_r+0x198>
8000aa30:	fffff7b7          	lui	a5,0xfffff
8000aa34:	7ff78793          	addi	a5,a5,2047 # fffff7ff <__stack+0x7ffc2d33>
8000aa38:	01042703          	lw	a4,16(s0)
8000aa3c:	00d7f7b3          	and	a5,a5,a3
8000aa40:	01079793          	slli	a5,a5,0x10
8000aa44:	4107d793          	srai	a5,a5,0x10
8000aa48:	00e42023          	sw	a4,0(s0)
8000aa4c:	00f41623          	sh	a5,12(s0)
8000aa50:	00042223          	sw	zero,4(s0)
8000aa54:	01379713          	slli	a4,a5,0x13
8000aa58:	00075c63          	bgez	a4,8000aa70 <__sflush_r+0x138>
8000aa5c:	fff00793          	li	a5,-1
8000aa60:	00f51663          	bne	a0,a5,8000aa6c <__sflush_r+0x134>
8000aa64:	0004a783          	lw	a5,0(s1)
8000aa68:	00079463          	bnez	a5,8000aa70 <__sflush_r+0x138>
8000aa6c:	04a42823          	sw	a0,80(s0)
8000aa70:	03042583          	lw	a1,48(s0)
8000aa74:	0124a023          	sw	s2,0(s1)
8000aa78:	f0058ae3          	beqz	a1,8000a98c <__sflush_r+0x54>
8000aa7c:	04040793          	addi	a5,s0,64
8000aa80:	00f58663          	beq	a1,a5,8000aa8c <__sflush_r+0x154>
8000aa84:	00048513          	mv	a0,s1
8000aa88:	518000ef          	jal	ra,8000afa0 <_free_r>
8000aa8c:	02042823          	sw	zero,48(s0)
8000aa90:	efdff06f          	j	8000a98c <__sflush_r+0x54>
8000aa94:	00000613          	li	a2,0
8000aa98:	00100693          	li	a3,1
8000aa9c:	00048513          	mv	a0,s1
8000aaa0:	000700e7          	jalr	a4
8000aaa4:	fff00793          	li	a5,-1
8000aaa8:	00050613          	mv	a2,a0
8000aaac:	f2f510e3          	bne	a0,a5,8000a9cc <__sflush_r+0x94>
8000aab0:	0004a783          	lw	a5,0(s1)
8000aab4:	f0078ce3          	beqz	a5,8000a9cc <__sflush_r+0x94>
8000aab8:	01d00713          	li	a4,29
8000aabc:	00e78663          	beq	a5,a4,8000aac8 <__sflush_r+0x190>
8000aac0:	01600713          	li	a4,22
8000aac4:	06e79263          	bne	a5,a4,8000ab28 <__sflush_r+0x1f0>
8000aac8:	0124a023          	sw	s2,0(s1)
8000aacc:	ec1ff06f          	j	8000a98c <__sflush_r+0x54>
8000aad0:	0406e793          	ori	a5,a3,64
8000aad4:	00f41623          	sh	a5,12(s0)
8000aad8:	fff00513          	li	a0,-1
8000aadc:	eb5ff06f          	j	8000a990 <__sflush_r+0x58>
8000aae0:	0105a983          	lw	s3,16(a1)
8000aae4:	ea0984e3          	beqz	s3,8000a98c <__sflush_r+0x54>
8000aae8:	0005a903          	lw	s2,0(a1)
8000aaec:	00377713          	andi	a4,a4,3
8000aaf0:	0135a023          	sw	s3,0(a1)
8000aaf4:	41390933          	sub	s2,s2,s3
8000aaf8:	00000793          	li	a5,0
8000aafc:	00071463          	bnez	a4,8000ab04 <__sflush_r+0x1cc>
8000ab00:	0145a783          	lw	a5,20(a1)
8000ab04:	00f42423          	sw	a5,8(s0)
8000ab08:	e92052e3          	blez	s2,8000a98c <__sflush_r+0x54>
8000ab0c:	02442783          	lw	a5,36(s0)
8000ab10:	01c42583          	lw	a1,28(s0)
8000ab14:	00090693          	mv	a3,s2
8000ab18:	00098613          	mv	a2,s3
8000ab1c:	00048513          	mv	a0,s1
8000ab20:	000780e7          	jalr	a5
8000ab24:	00a04863          	bgtz	a0,8000ab34 <__sflush_r+0x1fc>
8000ab28:	00c45783          	lhu	a5,12(s0)
8000ab2c:	0407e793          	ori	a5,a5,64
8000ab30:	fa5ff06f          	j	8000aad4 <__sflush_r+0x19c>
8000ab34:	00a989b3          	add	s3,s3,a0
8000ab38:	40a90933          	sub	s2,s2,a0
8000ab3c:	fcdff06f          	j	8000ab08 <__sflush_r+0x1d0>

8000ab40 <_fflush_r>:
8000ab40:	fe010113          	addi	sp,sp,-32
8000ab44:	00812c23          	sw	s0,24(sp)
8000ab48:	00112e23          	sw	ra,28(sp)
8000ab4c:	00050413          	mv	s0,a0
8000ab50:	00050c63          	beqz	a0,8000ab68 <_fflush_r+0x28>
8000ab54:	03852783          	lw	a5,56(a0)
8000ab58:	00079863          	bnez	a5,8000ab68 <_fflush_r+0x28>
8000ab5c:	00b12623          	sw	a1,12(sp)
8000ab60:	17c000ef          	jal	ra,8000acdc <__sinit>
8000ab64:	00c12583          	lw	a1,12(sp)
8000ab68:	00c59783          	lh	a5,12(a1)
8000ab6c:	00078c63          	beqz	a5,8000ab84 <_fflush_r+0x44>
8000ab70:	00040513          	mv	a0,s0
8000ab74:	01812403          	lw	s0,24(sp)
8000ab78:	01c12083          	lw	ra,28(sp)
8000ab7c:	02010113          	addi	sp,sp,32
8000ab80:	db9ff06f          	j	8000a938 <__sflush_r>
8000ab84:	01c12083          	lw	ra,28(sp)
8000ab88:	01812403          	lw	s0,24(sp)
8000ab8c:	00000513          	li	a0,0
8000ab90:	02010113          	addi	sp,sp,32
8000ab94:	00008067          	ret

8000ab98 <fflush>:
8000ab98:	00050593          	mv	a1,a0
8000ab9c:	00051c63          	bnez	a0,8000abb4 <fflush+0x1c>
8000aba0:	800217b7          	lui	a5,0x80021
8000aba4:	e607a503          	lw	a0,-416(a5) # 80020e60 <__stack+0xfffe4394>
8000aba8:	8000b5b7          	lui	a1,0x8000b
8000abac:	b4058593          	addi	a1,a1,-1216 # 8000ab40 <__stack+0xfffce074>
8000abb0:	6f40006f          	j	8000b2a4 <_fwalk_reent>
8000abb4:	800217b7          	lui	a5,0x80021
8000abb8:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000abbc:	f85ff06f          	j	8000ab40 <_fflush_r>

8000abc0 <__fp_lock>:
8000abc0:	00000513          	li	a0,0
8000abc4:	00008067          	ret

8000abc8 <_cleanup_r>:
8000abc8:	800125b7          	lui	a1,0x80012
8000abcc:	fe058593          	addi	a1,a1,-32 # 80011fe0 <__stack+0xfffd5514>
8000abd0:	6d40006f          	j	8000b2a4 <_fwalk_reent>

8000abd4 <std.isra.0>:
8000abd4:	ff010113          	addi	sp,sp,-16
8000abd8:	00812423          	sw	s0,8(sp)
8000abdc:	00112623          	sw	ra,12(sp)
8000abe0:	00050413          	mv	s0,a0
8000abe4:	00b51623          	sh	a1,12(a0)
8000abe8:	00c51723          	sh	a2,14(a0)
8000abec:	00052023          	sw	zero,0(a0)
8000abf0:	00052223          	sw	zero,4(a0)
8000abf4:	00052423          	sw	zero,8(a0)
8000abf8:	06052223          	sw	zero,100(a0)
8000abfc:	00052823          	sw	zero,16(a0)
8000ac00:	00052a23          	sw	zero,20(a0)
8000ac04:	00052c23          	sw	zero,24(a0)
8000ac08:	00800613          	li	a2,8
8000ac0c:	00000593          	li	a1,0
8000ac10:	05c50513          	addi	a0,a0,92
8000ac14:	a15fd0ef          	jal	ra,80008628 <memset>
8000ac18:	8000f7b7          	lui	a5,0x8000f
8000ac1c:	d8078793          	addi	a5,a5,-640 # 8000ed80 <__stack+0xfffd22b4>
8000ac20:	02f42023          	sw	a5,32(s0)
8000ac24:	8000f7b7          	lui	a5,0x8000f
8000ac28:	dd878793          	addi	a5,a5,-552 # 8000edd8 <__stack+0xfffd230c>
8000ac2c:	02f42223          	sw	a5,36(s0)
8000ac30:	8000f7b7          	lui	a5,0x8000f
8000ac34:	e5c78793          	addi	a5,a5,-420 # 8000ee5c <__stack+0xfffd2390>
8000ac38:	02f42423          	sw	a5,40(s0)
8000ac3c:	8000f7b7          	lui	a5,0x8000f
8000ac40:	eb478793          	addi	a5,a5,-332 # 8000eeb4 <__stack+0xfffd23e8>
8000ac44:	00842e23          	sw	s0,28(s0)
8000ac48:	02f42623          	sw	a5,44(s0)
8000ac4c:	00c12083          	lw	ra,12(sp)
8000ac50:	00812403          	lw	s0,8(sp)
8000ac54:	01010113          	addi	sp,sp,16
8000ac58:	00008067          	ret

8000ac5c <__fp_unlock>:
8000ac5c:	00000513          	li	a0,0
8000ac60:	00008067          	ret

8000ac64 <__sfmoreglue>:
8000ac64:	ff010113          	addi	sp,sp,-16
8000ac68:	00912223          	sw	s1,4(sp)
8000ac6c:	06800613          	li	a2,104
8000ac70:	fff58493          	addi	s1,a1,-1
8000ac74:	02c484b3          	mul	s1,s1,a2
8000ac78:	01212023          	sw	s2,0(sp)
8000ac7c:	00058913          	mv	s2,a1
8000ac80:	00812423          	sw	s0,8(sp)
8000ac84:	00112623          	sw	ra,12(sp)
8000ac88:	07448593          	addi	a1,s1,116
8000ac8c:	191020ef          	jal	ra,8000d61c <_malloc_r>
8000ac90:	00050413          	mv	s0,a0
8000ac94:	02050063          	beqz	a0,8000acb4 <__sfmoreglue+0x50>
8000ac98:	00052023          	sw	zero,0(a0)
8000ac9c:	01252223          	sw	s2,4(a0)
8000aca0:	00c50513          	addi	a0,a0,12
8000aca4:	00a42423          	sw	a0,8(s0)
8000aca8:	06848613          	addi	a2,s1,104
8000acac:	00000593          	li	a1,0
8000acb0:	979fd0ef          	jal	ra,80008628 <memset>
8000acb4:	00040513          	mv	a0,s0
8000acb8:	00c12083          	lw	ra,12(sp)
8000acbc:	00812403          	lw	s0,8(sp)
8000acc0:	00412483          	lw	s1,4(sp)
8000acc4:	00012903          	lw	s2,0(sp)
8000acc8:	01010113          	addi	sp,sp,16
8000accc:	00008067          	ret

8000acd0 <_cleanup>:
8000acd0:	800217b7          	lui	a5,0x80021
8000acd4:	e607a503          	lw	a0,-416(a5) # 80020e60 <__stack+0xfffe4394>
8000acd8:	ef1ff06f          	j	8000abc8 <_cleanup_r>

8000acdc <__sinit>:
8000acdc:	03852783          	lw	a5,56(a0)
8000ace0:	06079e63          	bnez	a5,8000ad5c <__sinit+0x80>
8000ace4:	ff010113          	addi	sp,sp,-16
8000ace8:	8000b7b7          	lui	a5,0x8000b
8000acec:	00112623          	sw	ra,12(sp)
8000acf0:	00812423          	sw	s0,8(sp)
8000acf4:	bc878793          	addi	a5,a5,-1080 # 8000abc8 <__stack+0xfffce0fc>
8000acf8:	02f52e23          	sw	a5,60(a0)
8000acfc:	00300793          	li	a5,3
8000ad00:	2ef52223          	sw	a5,740(a0)
8000ad04:	2ec50793          	addi	a5,a0,748
8000ad08:	00050413          	mv	s0,a0
8000ad0c:	2ef52423          	sw	a5,744(a0)
8000ad10:	2e052023          	sw	zero,736(a0)
8000ad14:	00452503          	lw	a0,4(a0)
8000ad18:	00000613          	li	a2,0
8000ad1c:	00400593          	li	a1,4
8000ad20:	eb5ff0ef          	jal	ra,8000abd4 <std.isra.0>
8000ad24:	00842503          	lw	a0,8(s0)
8000ad28:	00100613          	li	a2,1
8000ad2c:	00900593          	li	a1,9
8000ad30:	ea5ff0ef          	jal	ra,8000abd4 <std.isra.0>
8000ad34:	00c42503          	lw	a0,12(s0)
8000ad38:	00200613          	li	a2,2
8000ad3c:	01200593          	li	a1,18
8000ad40:	e95ff0ef          	jal	ra,8000abd4 <std.isra.0>
8000ad44:	00100793          	li	a5,1
8000ad48:	02f42c23          	sw	a5,56(s0)
8000ad4c:	00c12083          	lw	ra,12(sp)
8000ad50:	00812403          	lw	s0,8(sp)
8000ad54:	01010113          	addi	sp,sp,16
8000ad58:	00008067          	ret
8000ad5c:	00008067          	ret

8000ad60 <__sfp>:
8000ad60:	ff010113          	addi	sp,sp,-16
8000ad64:	800217b7          	lui	a5,0x80021
8000ad68:	00912223          	sw	s1,4(sp)
8000ad6c:	e607a483          	lw	s1,-416(a5) # 80020e60 <__stack+0xfffe4394>
8000ad70:	01212023          	sw	s2,0(sp)
8000ad74:	00112623          	sw	ra,12(sp)
8000ad78:	0384a783          	lw	a5,56(s1)
8000ad7c:	00812423          	sw	s0,8(sp)
8000ad80:	00050913          	mv	s2,a0
8000ad84:	00079663          	bnez	a5,8000ad90 <__sfp+0x30>
8000ad88:	00048513          	mv	a0,s1
8000ad8c:	f51ff0ef          	jal	ra,8000acdc <__sinit>
8000ad90:	2e048493          	addi	s1,s1,736
8000ad94:	0084a403          	lw	s0,8(s1)
8000ad98:	0044a783          	lw	a5,4(s1)
8000ad9c:	fff78793          	addi	a5,a5,-1
8000ada0:	0007da63          	bgez	a5,8000adb4 <__sfp+0x54>
8000ada4:	0004a783          	lw	a5,0(s1)
8000ada8:	00078e63          	beqz	a5,8000adc4 <__sfp+0x64>
8000adac:	0004a483          	lw	s1,0(s1)
8000adb0:	fe5ff06f          	j	8000ad94 <__sfp+0x34>
8000adb4:	00c41703          	lh	a4,12(s0)
8000adb8:	04070463          	beqz	a4,8000ae00 <__sfp+0xa0>
8000adbc:	06840413          	addi	s0,s0,104
8000adc0:	fddff06f          	j	8000ad9c <__sfp+0x3c>
8000adc4:	00400593          	li	a1,4
8000adc8:	00090513          	mv	a0,s2
8000adcc:	e99ff0ef          	jal	ra,8000ac64 <__sfmoreglue>
8000add0:	00a4a023          	sw	a0,0(s1)
8000add4:	fc051ce3          	bnez	a0,8000adac <__sfp+0x4c>
8000add8:	00c00793          	li	a5,12
8000addc:	00f92023          	sw	a5,0(s2)
8000ade0:	00000413          	li	s0,0
8000ade4:	00040513          	mv	a0,s0
8000ade8:	00c12083          	lw	ra,12(sp)
8000adec:	00812403          	lw	s0,8(sp)
8000adf0:	00412483          	lw	s1,4(sp)
8000adf4:	00012903          	lw	s2,0(sp)
8000adf8:	01010113          	addi	sp,sp,16
8000adfc:	00008067          	ret
8000ae00:	ffff07b7          	lui	a5,0xffff0
8000ae04:	00178793          	addi	a5,a5,1 # ffff0001 <__stack+0x7ffb3535>
8000ae08:	06042223          	sw	zero,100(s0)
8000ae0c:	00042023          	sw	zero,0(s0)
8000ae10:	00042223          	sw	zero,4(s0)
8000ae14:	00042423          	sw	zero,8(s0)
8000ae18:	00f42623          	sw	a5,12(s0)
8000ae1c:	00042823          	sw	zero,16(s0)
8000ae20:	00042a23          	sw	zero,20(s0)
8000ae24:	00042c23          	sw	zero,24(s0)
8000ae28:	00800613          	li	a2,8
8000ae2c:	00000593          	li	a1,0
8000ae30:	05c40513          	addi	a0,s0,92
8000ae34:	ff4fd0ef          	jal	ra,80008628 <memset>
8000ae38:	02042823          	sw	zero,48(s0)
8000ae3c:	02042a23          	sw	zero,52(s0)
8000ae40:	04042223          	sw	zero,68(s0)
8000ae44:	04042423          	sw	zero,72(s0)
8000ae48:	f9dff06f          	j	8000ade4 <__sfp+0x84>

8000ae4c <__sfp_lock_acquire>:
8000ae4c:	00008067          	ret

8000ae50 <__sfp_lock_release>:
8000ae50:	00008067          	ret

8000ae54 <__sinit_lock_acquire>:
8000ae54:	00008067          	ret

8000ae58 <__sinit_lock_release>:
8000ae58:	00008067          	ret

8000ae5c <__fp_lock_all>:
8000ae5c:	800217b7          	lui	a5,0x80021
8000ae60:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000ae64:	8000b5b7          	lui	a1,0x8000b
8000ae68:	bc058593          	addi	a1,a1,-1088 # 8000abc0 <__stack+0xfffce0f4>
8000ae6c:	3980006f          	j	8000b204 <_fwalk>

8000ae70 <__fp_unlock_all>:
8000ae70:	800217b7          	lui	a5,0x80021
8000ae74:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000ae78:	8000b5b7          	lui	a1,0x8000b
8000ae7c:	c5c58593          	addi	a1,a1,-932 # 8000ac5c <__stack+0xfffce190>
8000ae80:	3840006f          	j	8000b204 <_fwalk>

8000ae84 <_malloc_trim_r>:
8000ae84:	fd010113          	addi	sp,sp,-48
8000ae88:	03212023          	sw	s2,32(sp)
8000ae8c:	80021937          	lui	s2,0x80021
8000ae90:	02812423          	sw	s0,40(sp)
8000ae94:	02912223          	sw	s1,36(sp)
8000ae98:	01312e23          	sw	s3,28(sp)
8000ae9c:	00b12623          	sw	a1,12(sp)
8000aea0:	02112623          	sw	ra,44(sp)
8000aea4:	00050993          	mv	s3,a0
8000aea8:	40490913          	addi	s2,s2,1028 # 80021404 <__stack+0xfffe4938>
8000aeac:	669020ef          	jal	ra,8000dd14 <__malloc_lock>
8000aeb0:	00892783          	lw	a5,8(s2)
8000aeb4:	00c12583          	lw	a1,12(sp)
8000aeb8:	0047a483          	lw	s1,4(a5)
8000aebc:	000017b7          	lui	a5,0x1
8000aec0:	fef78413          	addi	s0,a5,-17 # fef <_HEAP_SIZE-0x11>
8000aec4:	ffc4f493          	andi	s1,s1,-4
8000aec8:	40b40433          	sub	s0,s0,a1
8000aecc:	00940433          	add	s0,s0,s1
8000aed0:	00c45413          	srli	s0,s0,0xc
8000aed4:	fff40413          	addi	s0,s0,-1
8000aed8:	00c41413          	slli	s0,s0,0xc
8000aedc:	02f45663          	ble	a5,s0,8000af08 <_malloc_trim_r+0x84>
8000aee0:	00098513          	mv	a0,s3
8000aee4:	635020ef          	jal	ra,8000dd18 <__malloc_unlock>
8000aee8:	00000513          	li	a0,0
8000aeec:	02c12083          	lw	ra,44(sp)
8000aef0:	02812403          	lw	s0,40(sp)
8000aef4:	02412483          	lw	s1,36(sp)
8000aef8:	02012903          	lw	s2,32(sp)
8000aefc:	01c12983          	lw	s3,28(sp)
8000af00:	03010113          	addi	sp,sp,48
8000af04:	00008067          	ret
8000af08:	00000593          	li	a1,0
8000af0c:	00098513          	mv	a0,s3
8000af10:	49d030ef          	jal	ra,8000ebac <_sbrk_r>
8000af14:	00892783          	lw	a5,8(s2)
8000af18:	009787b3          	add	a5,a5,s1
8000af1c:	fcf512e3          	bne	a0,a5,8000aee0 <_malloc_trim_r+0x5c>
8000af20:	408005b3          	neg	a1,s0
8000af24:	00098513          	mv	a0,s3
8000af28:	485030ef          	jal	ra,8000ebac <_sbrk_r>
8000af2c:	fff00793          	li	a5,-1
8000af30:	04f51063          	bne	a0,a5,8000af70 <_malloc_trim_r+0xec>
8000af34:	00000593          	li	a1,0
8000af38:	00098513          	mv	a0,s3
8000af3c:	471030ef          	jal	ra,8000ebac <_sbrk_r>
8000af40:	00892703          	lw	a4,8(s2)
8000af44:	00f00693          	li	a3,15
8000af48:	40e507b3          	sub	a5,a0,a4
8000af4c:	f8f6dae3          	ble	a5,a3,8000aee0 <_malloc_trim_r+0x5c>
8000af50:	800216b7          	lui	a3,0x80021
8000af54:	e686a683          	lw	a3,-408(a3) # 80020e68 <__stack+0xfffe439c>
8000af58:	0017e793          	ori	a5,a5,1
8000af5c:	00f72223          	sw	a5,4(a4)
8000af60:	40d50533          	sub	a0,a0,a3
8000af64:	8003b6b7          	lui	a3,0x8003b
8000af68:	a0a6a023          	sw	a0,-1536(a3) # 8003aa00 <__stack+0xffffdf34>
8000af6c:	f75ff06f          	j	8000aee0 <_malloc_trim_r+0x5c>
8000af70:	00892783          	lw	a5,8(s2)
8000af74:	408484b3          	sub	s1,s1,s0
8000af78:	8003b737          	lui	a4,0x8003b
8000af7c:	0014e493          	ori	s1,s1,1
8000af80:	0097a223          	sw	s1,4(a5)
8000af84:	a0072783          	lw	a5,-1536(a4) # 8003aa00 <__stack+0xffffdf34>
8000af88:	00098513          	mv	a0,s3
8000af8c:	40878433          	sub	s0,a5,s0
8000af90:	a0872023          	sw	s0,-1536(a4)
8000af94:	585020ef          	jal	ra,8000dd18 <__malloc_unlock>
8000af98:	00100513          	li	a0,1
8000af9c:	f51ff06f          	j	8000aeec <_malloc_trim_r+0x68>

8000afa0 <_free_r>:
8000afa0:	26058063          	beqz	a1,8000b200 <_free_r+0x260>
8000afa4:	ff010113          	addi	sp,sp,-16
8000afa8:	00812423          	sw	s0,8(sp)
8000afac:	00912223          	sw	s1,4(sp)
8000afb0:	00050413          	mv	s0,a0
8000afb4:	00058493          	mv	s1,a1
8000afb8:	00112623          	sw	ra,12(sp)
8000afbc:	559020ef          	jal	ra,8000dd14 <__malloc_lock>
8000afc0:	ffc4a503          	lw	a0,-4(s1)
8000afc4:	80021637          	lui	a2,0x80021
8000afc8:	ff848693          	addi	a3,s1,-8
8000afcc:	ffe57793          	andi	a5,a0,-2
8000afd0:	40460813          	addi	a6,a2,1028 # 80021404 <__stack+0xfffe4938>
8000afd4:	00f685b3          	add	a1,a3,a5
8000afd8:	0045a703          	lw	a4,4(a1)
8000afdc:	00882803          	lw	a6,8(a6)
8000afe0:	40460613          	addi	a2,a2,1028
8000afe4:	ffc77713          	andi	a4,a4,-4
8000afe8:	00157513          	andi	a0,a0,1
8000afec:	06b81463          	bne	a6,a1,8000b054 <_free_r+0xb4>
8000aff0:	00e787b3          	add	a5,a5,a4
8000aff4:	02051063          	bnez	a0,8000b014 <_free_r+0x74>
8000aff8:	ff84a703          	lw	a4,-8(s1)
8000affc:	40e686b3          	sub	a3,a3,a4
8000b000:	0086a583          	lw	a1,8(a3)
8000b004:	00e787b3          	add	a5,a5,a4
8000b008:	00c6a703          	lw	a4,12(a3)
8000b00c:	00e5a623          	sw	a4,12(a1)
8000b010:	00b72423          	sw	a1,8(a4)
8000b014:	0017e713          	ori	a4,a5,1
8000b018:	00e6a223          	sw	a4,4(a3)
8000b01c:	80021737          	lui	a4,0x80021
8000b020:	e6c72703          	lw	a4,-404(a4) # 80020e6c <__stack+0xfffe43a0>
8000b024:	00d62423          	sw	a3,8(a2)
8000b028:	00e7ea63          	bltu	a5,a4,8000b03c <_free_r+0x9c>
8000b02c:	800217b7          	lui	a5,0x80021
8000b030:	e2c7a583          	lw	a1,-468(a5) # 80020e2c <__stack+0xfffe4360>
8000b034:	00040513          	mv	a0,s0
8000b038:	e4dff0ef          	jal	ra,8000ae84 <_malloc_trim_r>
8000b03c:	00040513          	mv	a0,s0
8000b040:	00812403          	lw	s0,8(sp)
8000b044:	00c12083          	lw	ra,12(sp)
8000b048:	00412483          	lw	s1,4(sp)
8000b04c:	01010113          	addi	sp,sp,16
8000b050:	4c90206f          	j	8000dd18 <__malloc_unlock>
8000b054:	00e5a223          	sw	a4,4(a1)
8000b058:	00000813          	li	a6,0
8000b05c:	02051663          	bnez	a0,8000b088 <_free_r+0xe8>
8000b060:	ff84a503          	lw	a0,-8(s1)
8000b064:	800218b7          	lui	a7,0x80021
8000b068:	40c88893          	addi	a7,a7,1036 # 8002140c <__stack+0xfffe4940>
8000b06c:	40a686b3          	sub	a3,a3,a0
8000b070:	00a787b3          	add	a5,a5,a0
8000b074:	0086a503          	lw	a0,8(a3)
8000b078:	0b150663          	beq	a0,a7,8000b124 <_free_r+0x184>
8000b07c:	00c6a883          	lw	a7,12(a3)
8000b080:	01152623          	sw	a7,12(a0)
8000b084:	00a8a423          	sw	a0,8(a7)
8000b088:	00e58533          	add	a0,a1,a4
8000b08c:	00452503          	lw	a0,4(a0)
8000b090:	00157513          	andi	a0,a0,1
8000b094:	02051863          	bnez	a0,8000b0c4 <_free_r+0x124>
8000b098:	00e787b3          	add	a5,a5,a4
8000b09c:	0085a703          	lw	a4,8(a1)
8000b0a0:	08081663          	bnez	a6,8000b12c <_free_r+0x18c>
8000b0a4:	80021537          	lui	a0,0x80021
8000b0a8:	40c50513          	addi	a0,a0,1036 # 8002140c <__stack+0xfffe4940>
8000b0ac:	08a71063          	bne	a4,a0,8000b12c <_free_r+0x18c>
8000b0b0:	00d62a23          	sw	a3,20(a2)
8000b0b4:	00d62823          	sw	a3,16(a2)
8000b0b8:	00e6a623          	sw	a4,12(a3)
8000b0bc:	00e6a423          	sw	a4,8(a3)
8000b0c0:	00100813          	li	a6,1
8000b0c4:	0017e713          	ori	a4,a5,1
8000b0c8:	00e6a223          	sw	a4,4(a3)
8000b0cc:	00f68733          	add	a4,a3,a5
8000b0d0:	00f72023          	sw	a5,0(a4)
8000b0d4:	f60814e3          	bnez	a6,8000b03c <_free_r+0x9c>
8000b0d8:	1ff00713          	li	a4,511
8000b0dc:	06f76063          	bltu	a4,a5,8000b13c <_free_r+0x19c>
8000b0e0:	0037d793          	srli	a5,a5,0x3
8000b0e4:	4027d593          	srai	a1,a5,0x2
8000b0e8:	00100713          	li	a4,1
8000b0ec:	00b71733          	sll	a4,a4,a1
8000b0f0:	00462583          	lw	a1,4(a2)
8000b0f4:	00178793          	addi	a5,a5,1
8000b0f8:	00379793          	slli	a5,a5,0x3
8000b0fc:	00f607b3          	add	a5,a2,a5
8000b100:	00b76733          	or	a4,a4,a1
8000b104:	00e62223          	sw	a4,4(a2)
8000b108:	0007a703          	lw	a4,0(a5)
8000b10c:	ff878613          	addi	a2,a5,-8
8000b110:	00c6a623          	sw	a2,12(a3)
8000b114:	00e6a423          	sw	a4,8(a3)
8000b118:	00d7a023          	sw	a3,0(a5)
8000b11c:	00d72623          	sw	a3,12(a4)
8000b120:	f1dff06f          	j	8000b03c <_free_r+0x9c>
8000b124:	00100813          	li	a6,1
8000b128:	f61ff06f          	j	8000b088 <_free_r+0xe8>
8000b12c:	00c5a583          	lw	a1,12(a1)
8000b130:	00b72623          	sw	a1,12(a4)
8000b134:	00e5a423          	sw	a4,8(a1)
8000b138:	f8dff06f          	j	8000b0c4 <_free_r+0x124>
8000b13c:	0097d593          	srli	a1,a5,0x9
8000b140:	00400713          	li	a4,4
8000b144:	04b76863          	bltu	a4,a1,8000b194 <_free_r+0x1f4>
8000b148:	0067d713          	srli	a4,a5,0x6
8000b14c:	03870713          	addi	a4,a4,56
8000b150:	00170593          	addi	a1,a4,1
8000b154:	00359593          	slli	a1,a1,0x3
8000b158:	00b605b3          	add	a1,a2,a1
8000b15c:	ff858513          	addi	a0,a1,-8
8000b160:	0005a583          	lw	a1,0(a1)
8000b164:	08b51463          	bne	a0,a1,8000b1ec <_free_r+0x24c>
8000b168:	00100793          	li	a5,1
8000b16c:	40275713          	srai	a4,a4,0x2
8000b170:	00e79733          	sll	a4,a5,a4
8000b174:	00462783          	lw	a5,4(a2)
8000b178:	00f76733          	or	a4,a4,a5
8000b17c:	00e62223          	sw	a4,4(a2)
8000b180:	00a6a623          	sw	a0,12(a3)
8000b184:	00b6a423          	sw	a1,8(a3)
8000b188:	00d52423          	sw	a3,8(a0)
8000b18c:	00d5a623          	sw	a3,12(a1)
8000b190:	eadff06f          	j	8000b03c <_free_r+0x9c>
8000b194:	01400713          	li	a4,20
8000b198:	00b76663          	bltu	a4,a1,8000b1a4 <_free_r+0x204>
8000b19c:	05b58713          	addi	a4,a1,91
8000b1a0:	fb1ff06f          	j	8000b150 <_free_r+0x1b0>
8000b1a4:	05400713          	li	a4,84
8000b1a8:	00b76863          	bltu	a4,a1,8000b1b8 <_free_r+0x218>
8000b1ac:	00c7d713          	srli	a4,a5,0xc
8000b1b0:	06e70713          	addi	a4,a4,110
8000b1b4:	f9dff06f          	j	8000b150 <_free_r+0x1b0>
8000b1b8:	15400713          	li	a4,340
8000b1bc:	00b76863          	bltu	a4,a1,8000b1cc <_free_r+0x22c>
8000b1c0:	00f7d713          	srli	a4,a5,0xf
8000b1c4:	07770713          	addi	a4,a4,119
8000b1c8:	f89ff06f          	j	8000b150 <_free_r+0x1b0>
8000b1cc:	55400513          	li	a0,1364
8000b1d0:	07e00713          	li	a4,126
8000b1d4:	f6b56ee3          	bltu	a0,a1,8000b150 <_free_r+0x1b0>
8000b1d8:	0127d713          	srli	a4,a5,0x12
8000b1dc:	07c70713          	addi	a4,a4,124
8000b1e0:	f71ff06f          	j	8000b150 <_free_r+0x1b0>
8000b1e4:	0085a583          	lw	a1,8(a1)
8000b1e8:	00b50863          	beq	a0,a1,8000b1f8 <_free_r+0x258>
8000b1ec:	0045a703          	lw	a4,4(a1)
8000b1f0:	ffc77713          	andi	a4,a4,-4
8000b1f4:	fee7e8e3          	bltu	a5,a4,8000b1e4 <_free_r+0x244>
8000b1f8:	00c5a503          	lw	a0,12(a1)
8000b1fc:	f85ff06f          	j	8000b180 <_free_r+0x1e0>
8000b200:	00008067          	ret

8000b204 <_fwalk>:
8000b204:	fd010113          	addi	sp,sp,-48
8000b208:	02812423          	sw	s0,40(sp)
8000b20c:	03212023          	sw	s2,32(sp)
8000b210:	01412c23          	sw	s4,24(sp)
8000b214:	01512a23          	sw	s5,20(sp)
8000b218:	02112623          	sw	ra,44(sp)
8000b21c:	02912223          	sw	s1,36(sp)
8000b220:	01312e23          	sw	s3,28(sp)
8000b224:	2e050413          	addi	s0,a0,736
8000b228:	00000913          	li	s2,0
8000b22c:	00100a13          	li	s4,1
8000b230:	fff00a93          	li	s5,-1
8000b234:	02041663          	bnez	s0,8000b260 <_fwalk+0x5c>
8000b238:	02c12083          	lw	ra,44(sp)
8000b23c:	02812403          	lw	s0,40(sp)
8000b240:	00090513          	mv	a0,s2
8000b244:	02412483          	lw	s1,36(sp)
8000b248:	02012903          	lw	s2,32(sp)
8000b24c:	01c12983          	lw	s3,28(sp)
8000b250:	01812a03          	lw	s4,24(sp)
8000b254:	01412a83          	lw	s5,20(sp)
8000b258:	03010113          	addi	sp,sp,48
8000b25c:	00008067          	ret
8000b260:	00842483          	lw	s1,8(s0)
8000b264:	00442983          	lw	s3,4(s0)
8000b268:	fff98993          	addi	s3,s3,-1
8000b26c:	0009d663          	bgez	s3,8000b278 <_fwalk+0x74>
8000b270:	00042403          	lw	s0,0(s0)
8000b274:	fc1ff06f          	j	8000b234 <_fwalk+0x30>
8000b278:	00c4d783          	lhu	a5,12(s1)
8000b27c:	02fa7063          	bleu	a5,s4,8000b29c <_fwalk+0x98>
8000b280:	00e49783          	lh	a5,14(s1)
8000b284:	01578c63          	beq	a5,s5,8000b29c <_fwalk+0x98>
8000b288:	00048513          	mv	a0,s1
8000b28c:	00b12623          	sw	a1,12(sp)
8000b290:	000580e7          	jalr	a1
8000b294:	00c12583          	lw	a1,12(sp)
8000b298:	00a96933          	or	s2,s2,a0
8000b29c:	06848493          	addi	s1,s1,104
8000b2a0:	fc9ff06f          	j	8000b268 <_fwalk+0x64>

8000b2a4 <_fwalk_reent>:
8000b2a4:	fd010113          	addi	sp,sp,-48
8000b2a8:	02812423          	sw	s0,40(sp)
8000b2ac:	03212023          	sw	s2,32(sp)
8000b2b0:	01412c23          	sw	s4,24(sp)
8000b2b4:	01512a23          	sw	s5,20(sp)
8000b2b8:	01612823          	sw	s6,16(sp)
8000b2bc:	01712623          	sw	s7,12(sp)
8000b2c0:	02112623          	sw	ra,44(sp)
8000b2c4:	02912223          	sw	s1,36(sp)
8000b2c8:	01312e23          	sw	s3,28(sp)
8000b2cc:	00050a13          	mv	s4,a0
8000b2d0:	00058a93          	mv	s5,a1
8000b2d4:	2e050413          	addi	s0,a0,736
8000b2d8:	00000913          	li	s2,0
8000b2dc:	00100b13          	li	s6,1
8000b2e0:	fff00b93          	li	s7,-1
8000b2e4:	02041a63          	bnez	s0,8000b318 <_fwalk_reent+0x74>
8000b2e8:	02c12083          	lw	ra,44(sp)
8000b2ec:	02812403          	lw	s0,40(sp)
8000b2f0:	00090513          	mv	a0,s2
8000b2f4:	02412483          	lw	s1,36(sp)
8000b2f8:	02012903          	lw	s2,32(sp)
8000b2fc:	01c12983          	lw	s3,28(sp)
8000b300:	01812a03          	lw	s4,24(sp)
8000b304:	01412a83          	lw	s5,20(sp)
8000b308:	01012b03          	lw	s6,16(sp)
8000b30c:	00c12b83          	lw	s7,12(sp)
8000b310:	03010113          	addi	sp,sp,48
8000b314:	00008067          	ret
8000b318:	00842483          	lw	s1,8(s0)
8000b31c:	00442983          	lw	s3,4(s0)
8000b320:	fff98993          	addi	s3,s3,-1
8000b324:	0009d663          	bgez	s3,8000b330 <_fwalk_reent+0x8c>
8000b328:	00042403          	lw	s0,0(s0)
8000b32c:	fb9ff06f          	j	8000b2e4 <_fwalk_reent+0x40>
8000b330:	00c4d783          	lhu	a5,12(s1)
8000b334:	00fb7e63          	bleu	a5,s6,8000b350 <_fwalk_reent+0xac>
8000b338:	00e49783          	lh	a5,14(s1)
8000b33c:	01778a63          	beq	a5,s7,8000b350 <_fwalk_reent+0xac>
8000b340:	00048593          	mv	a1,s1
8000b344:	000a0513          	mv	a0,s4
8000b348:	000a80e7          	jalr	s5
8000b34c:	00a96933          	or	s2,s2,a0
8000b350:	06848493          	addi	s1,s1,104
8000b354:	fcdff06f          	j	8000b320 <_fwalk_reent+0x7c>

8000b358 <eclear>:
8000b358:	01450793          	addi	a5,a0,20
8000b35c:	00250513          	addi	a0,a0,2
8000b360:	fe051f23          	sh	zero,-2(a0)
8000b364:	fef51ce3          	bne	a0,a5,8000b35c <eclear+0x4>
8000b368:	00008067          	ret

8000b36c <emov>:
8000b36c:	01450793          	addi	a5,a0,20
8000b370:	00250513          	addi	a0,a0,2
8000b374:	ffe55703          	lhu	a4,-2(a0)
8000b378:	00258593          	addi	a1,a1,2
8000b37c:	fee59f23          	sh	a4,-2(a1)
8000b380:	fea798e3          	bne	a5,a0,8000b370 <emov+0x4>
8000b384:	00008067          	ret

8000b388 <ecleaz>:
8000b388:	01a50793          	addi	a5,a0,26
8000b38c:	00250513          	addi	a0,a0,2
8000b390:	fe051f23          	sh	zero,-2(a0)
8000b394:	fef51ce3          	bne	a0,a5,8000b38c <ecleaz+0x4>
8000b398:	00008067          	ret

8000b39c <emovz>:
8000b39c:	01850713          	addi	a4,a0,24
8000b3a0:	00058793          	mv	a5,a1
8000b3a4:	00250513          	addi	a0,a0,2
8000b3a8:	ffe55683          	lhu	a3,-2(a0)
8000b3ac:	00278793          	addi	a5,a5,2
8000b3b0:	fed79f23          	sh	a3,-2(a5)
8000b3b4:	fea718e3          	bne	a4,a0,8000b3a4 <emovz+0x8>
8000b3b8:	00059c23          	sh	zero,24(a1)
8000b3bc:	00008067          	ret

8000b3c0 <ecmpm>:
8000b3c0:	00450793          	addi	a5,a0,4
8000b3c4:	00458593          	addi	a1,a1,4
8000b3c8:	01a50513          	addi	a0,a0,26
8000b3cc:	00278793          	addi	a5,a5,2
8000b3d0:	00258593          	addi	a1,a1,2
8000b3d4:	ffe7d683          	lhu	a3,-2(a5)
8000b3d8:	ffe5d703          	lhu	a4,-2(a1)
8000b3dc:	00e69863          	bne	a3,a4,8000b3ec <ecmpm+0x2c>
8000b3e0:	fef516e3          	bne	a0,a5,8000b3cc <ecmpm+0xc>
8000b3e4:	00000513          	li	a0,0
8000b3e8:	00008067          	ret
8000b3ec:	00100513          	li	a0,1
8000b3f0:	00d76463          	bltu	a4,a3,8000b3f8 <ecmpm+0x38>
8000b3f4:	fff00513          	li	a0,-1
8000b3f8:	00008067          	ret

8000b3fc <eshdn1>:
8000b3fc:	00450693          	addi	a3,a0,4
8000b400:	00000793          	li	a5,0
8000b404:	01a50513          	addi	a0,a0,26
8000b408:	ffff8637          	lui	a2,0xffff8
8000b40c:	0006d703          	lhu	a4,0(a3)
8000b410:	00177593          	andi	a1,a4,1
8000b414:	00058463          	beqz	a1,8000b41c <eshdn1+0x20>
8000b418:	0017e793          	ori	a5,a5,1
8000b41c:	0027f593          	andi	a1,a5,2
8000b420:	00175713          	srli	a4,a4,0x1
8000b424:	02059063          	bnez	a1,8000b444 <eshdn1+0x48>
8000b428:	00179793          	slli	a5,a5,0x1
8000b42c:	00e69023          	sh	a4,0(a3)
8000b430:	01079793          	slli	a5,a5,0x10
8000b434:	00268693          	addi	a3,a3,2
8000b438:	0107d793          	srli	a5,a5,0x10
8000b43c:	fcd518e3          	bne	a0,a3,8000b40c <eshdn1+0x10>
8000b440:	00008067          	ret
8000b444:	00c76733          	or	a4,a4,a2
8000b448:	fe1ff06f          	j	8000b428 <eshdn1+0x2c>

8000b44c <eshup1>:
8000b44c:	01650693          	addi	a3,a0,22
8000b450:	00000713          	li	a4,0
8000b454:	0026d783          	lhu	a5,2(a3)
8000b458:	01079613          	slli	a2,a5,0x10
8000b45c:	41065613          	srai	a2,a2,0x10
8000b460:	00065463          	bgez	a2,8000b468 <eshup1+0x1c>
8000b464:	00176713          	ori	a4,a4,1
8000b468:	00179793          	slli	a5,a5,0x1
8000b46c:	01079793          	slli	a5,a5,0x10
8000b470:	00277613          	andi	a2,a4,2
8000b474:	0107d793          	srli	a5,a5,0x10
8000b478:	02061063          	bnez	a2,8000b498 <eshup1+0x4c>
8000b47c:	00171713          	slli	a4,a4,0x1
8000b480:	00f69123          	sh	a5,2(a3)
8000b484:	01071713          	slli	a4,a4,0x10
8000b488:	ffe68693          	addi	a3,a3,-2
8000b48c:	01075713          	srli	a4,a4,0x10
8000b490:	fcd512e3          	bne	a0,a3,8000b454 <eshup1+0x8>
8000b494:	00008067          	ret
8000b498:	0017e793          	ori	a5,a5,1
8000b49c:	fe1ff06f          	j	8000b47c <eshup1+0x30>

8000b4a0 <eshdn8>:
8000b4a0:	00450793          	addi	a5,a0,4
8000b4a4:	00000713          	li	a4,0
8000b4a8:	01a50513          	addi	a0,a0,26
8000b4ac:	0007d683          	lhu	a3,0(a5)
8000b4b0:	00278793          	addi	a5,a5,2
8000b4b4:	0086d613          	srli	a2,a3,0x8
8000b4b8:	00c76733          	or	a4,a4,a2
8000b4bc:	fee79f23          	sh	a4,-2(a5)
8000b4c0:	00869713          	slli	a4,a3,0x8
8000b4c4:	01071713          	slli	a4,a4,0x10
8000b4c8:	01075713          	srli	a4,a4,0x10
8000b4cc:	fef510e3          	bne	a0,a5,8000b4ac <eshdn8+0xc>
8000b4d0:	00008067          	ret

8000b4d4 <eshup8>:
8000b4d4:	01650793          	addi	a5,a0,22
8000b4d8:	00000713          	li	a4,0
8000b4dc:	0027d683          	lhu	a3,2(a5)
8000b4e0:	ffe78793          	addi	a5,a5,-2
8000b4e4:	00869613          	slli	a2,a3,0x8
8000b4e8:	00c76733          	or	a4,a4,a2
8000b4ec:	00e79223          	sh	a4,4(a5)
8000b4f0:	0086d713          	srli	a4,a3,0x8
8000b4f4:	fef514e3          	bne	a0,a5,8000b4dc <eshup8+0x8>
8000b4f8:	00008067          	ret

8000b4fc <eshup6>:
8000b4fc:	00450793          	addi	a5,a0,4
8000b500:	01850713          	addi	a4,a0,24
8000b504:	00278793          	addi	a5,a5,2
8000b508:	0007d683          	lhu	a3,0(a5)
8000b50c:	fed79f23          	sh	a3,-2(a5)
8000b510:	fef71ae3          	bne	a4,a5,8000b504 <eshup6+0x8>
8000b514:	00051c23          	sh	zero,24(a0)
8000b518:	00008067          	ret

8000b51c <eshdn6>:
8000b51c:	01850793          	addi	a5,a0,24
8000b520:	01a50713          	addi	a4,a0,26
8000b524:	00450693          	addi	a3,a0,4
8000b528:	ffe78793          	addi	a5,a5,-2
8000b52c:	0007d603          	lhu	a2,0(a5)
8000b530:	ffe70713          	addi	a4,a4,-2
8000b534:	00c71023          	sh	a2,0(a4)
8000b538:	fef698e3          	bne	a3,a5,8000b528 <eshdn6+0xc>
8000b53c:	00051223          	sh	zero,4(a0)
8000b540:	00008067          	ret

8000b544 <eaddm>:
8000b544:	01858593          	addi	a1,a1,24
8000b548:	01650713          	addi	a4,a0,22
8000b54c:	00000693          	li	a3,0
8000b550:	00275783          	lhu	a5,2(a4)
8000b554:	0005d603          	lhu	a2,0(a1)
8000b558:	ffe70713          	addi	a4,a4,-2
8000b55c:	ffe58593          	addi	a1,a1,-2
8000b560:	00c787b3          	add	a5,a5,a2
8000b564:	00d787b3          	add	a5,a5,a3
8000b568:	00f59123          	sh	a5,2(a1)
8000b56c:	0107d793          	srli	a5,a5,0x10
8000b570:	0017f693          	andi	a3,a5,1
8000b574:	fce51ee3          	bne	a0,a4,8000b550 <eaddm+0xc>
8000b578:	00008067          	ret

8000b57c <esubm>:
8000b57c:	01858593          	addi	a1,a1,24
8000b580:	01650713          	addi	a4,a0,22
8000b584:	00000693          	li	a3,0
8000b588:	0005d783          	lhu	a5,0(a1)
8000b58c:	00275603          	lhu	a2,2(a4)
8000b590:	ffe70713          	addi	a4,a4,-2
8000b594:	ffe58593          	addi	a1,a1,-2
8000b598:	40c787b3          	sub	a5,a5,a2
8000b59c:	40d787b3          	sub	a5,a5,a3
8000b5a0:	00f59123          	sh	a5,2(a1)
8000b5a4:	0107d793          	srli	a5,a5,0x10
8000b5a8:	0017f693          	andi	a3,a5,1
8000b5ac:	fce51ee3          	bne	a0,a4,8000b588 <esubm+0xc>
8000b5b0:	00008067          	ret

8000b5b4 <m16m>:
8000b5b4:	fe010113          	addi	sp,sp,-32
8000b5b8:	00010337          	lui	t1,0x10
8000b5bc:	01858893          	addi	a7,a1,24
8000b5c0:	00011d23          	sh	zero,26(sp)
8000b5c4:	00011e23          	sh	zero,28(sp)
8000b5c8:	00458593          	addi	a1,a1,4
8000b5cc:	01c10693          	addi	a3,sp,28
8000b5d0:	fff30313          	addi	t1,t1,-1 # ffff <_HEAP_SIZE+0xefff>
8000b5d4:	0008d703          	lhu	a4,0(a7)
8000b5d8:	ffe68693          	addi	a3,a3,-2
8000b5dc:	ffe88893          	addi	a7,a7,-2
8000b5e0:	02071c63          	bnez	a4,8000b618 <m16m+0x64>
8000b5e4:	fe069f23          	sh	zero,-2(a3)
8000b5e8:	ff1596e3          	bne	a1,a7,8000b5d4 <m16m+0x20>
8000b5ec:	00400793          	li	a5,4
8000b5f0:	01a00713          	li	a4,26
8000b5f4:	00410593          	addi	a1,sp,4
8000b5f8:	00f585b3          	add	a1,a1,a5
8000b5fc:	0005d583          	lhu	a1,0(a1)
8000b600:	00f606b3          	add	a3,a2,a5
8000b604:	00278793          	addi	a5,a5,2
8000b608:	00b69023          	sh	a1,0(a3)
8000b60c:	fee794e3          	bne	a5,a4,8000b5f4 <m16m+0x40>
8000b610:	02010113          	addi	sp,sp,32
8000b614:	00008067          	ret
8000b618:	02a70733          	mul	a4,a4,a0
8000b61c:	0026d803          	lhu	a6,2(a3)
8000b620:	006777b3          	and	a5,a4,t1
8000b624:	010787b3          	add	a5,a5,a6
8000b628:	0107d813          	srli	a6,a5,0x10
8000b62c:	00f69123          	sh	a5,2(a3)
8000b630:	01075793          	srli	a5,a4,0x10
8000b634:	0006d703          	lhu	a4,0(a3)
8000b638:	00e787b3          	add	a5,a5,a4
8000b63c:	010787b3          	add	a5,a5,a6
8000b640:	00f69023          	sh	a5,0(a3)
8000b644:	0107d793          	srli	a5,a5,0x10
8000b648:	fef69f23          	sh	a5,-2(a3)
8000b64c:	f9dff06f          	j	8000b5e8 <m16m+0x34>

8000b650 <eisnan>:
8000b650:	01255783          	lhu	a5,18(a0)
8000b654:	fff7c793          	not	a5,a5
8000b658:	01179713          	slli	a4,a5,0x11
8000b65c:	00071c63          	bnez	a4,8000b674 <eisnan+0x24>
8000b660:	01250793          	addi	a5,a0,18
8000b664:	00250513          	addi	a0,a0,2
8000b668:	ffe55703          	lhu	a4,-2(a0)
8000b66c:	00071863          	bnez	a4,8000b67c <eisnan+0x2c>
8000b670:	fea79ae3          	bne	a5,a0,8000b664 <eisnan+0x14>
8000b674:	00000513          	li	a0,0
8000b678:	00008067          	ret
8000b67c:	00100513          	li	a0,1
8000b680:	00008067          	ret

8000b684 <eisneg>:
8000b684:	ff010113          	addi	sp,sp,-16
8000b688:	00812423          	sw	s0,8(sp)
8000b68c:	00112623          	sw	ra,12(sp)
8000b690:	00050413          	mv	s0,a0
8000b694:	fbdff0ef          	jal	ra,8000b650 <eisnan>
8000b698:	00051e63          	bnez	a0,8000b6b4 <eisneg+0x30>
8000b69c:	01241503          	lh	a0,18(s0)
8000b6a0:	01f55513          	srli	a0,a0,0x1f
8000b6a4:	00c12083          	lw	ra,12(sp)
8000b6a8:	00812403          	lw	s0,8(sp)
8000b6ac:	01010113          	addi	sp,sp,16
8000b6b0:	00008067          	ret
8000b6b4:	00000513          	li	a0,0
8000b6b8:	fedff06f          	j	8000b6a4 <eisneg+0x20>

8000b6bc <emovi>:
8000b6bc:	01251783          	lh	a5,18(a0)
8000b6c0:	ff010113          	addi	sp,sp,-16
8000b6c4:	00112623          	sw	ra,12(sp)
8000b6c8:	00812423          	sw	s0,8(sp)
8000b6cc:	00912223          	sw	s1,4(sp)
8000b6d0:	01212023          	sw	s2,0(sp)
8000b6d4:	0607d863          	bgez	a5,8000b744 <emovi+0x88>
8000b6d8:	fff00793          	li	a5,-1
8000b6dc:	00f59023          	sh	a5,0(a1)
8000b6e0:	01255703          	lhu	a4,18(a0)
8000b6e4:	000087b7          	lui	a5,0x8
8000b6e8:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
8000b6ec:	00e7f733          	and	a4,a5,a4
8000b6f0:	00e59123          	sh	a4,2(a1)
8000b6f4:	01050913          	addi	s2,a0,16
8000b6f8:	06f71663          	bne	a4,a5,8000b764 <emovi+0xa8>
8000b6fc:	00058413          	mv	s0,a1
8000b700:	00050493          	mv	s1,a0
8000b704:	f4dff0ef          	jal	ra,8000b650 <eisnan>
8000b708:	04050263          	beqz	a0,8000b74c <emovi+0x90>
8000b70c:	00640793          	addi	a5,s0,6
8000b710:	00041223          	sh	zero,4(s0)
8000b714:	ffc48513          	addi	a0,s1,-4
8000b718:	ffe90913          	addi	s2,s2,-2
8000b71c:	00295703          	lhu	a4,2(s2)
8000b720:	00278793          	addi	a5,a5,2
8000b724:	fee79f23          	sh	a4,-2(a5)
8000b728:	fea918e3          	bne	s2,a0,8000b718 <emovi+0x5c>
8000b72c:	00c12083          	lw	ra,12(sp)
8000b730:	00812403          	lw	s0,8(sp)
8000b734:	00412483          	lw	s1,4(sp)
8000b738:	00012903          	lw	s2,0(sp)
8000b73c:	01010113          	addi	sp,sp,16
8000b740:	00008067          	ret
8000b744:	00059023          	sh	zero,0(a1)
8000b748:	f99ff06f          	j	8000b6e0 <emovi+0x24>
8000b74c:	00440793          	addi	a5,s0,4
8000b750:	01a40593          	addi	a1,s0,26
8000b754:	00278793          	addi	a5,a5,2
8000b758:	fe079f23          	sh	zero,-2(a5)
8000b75c:	feb79ce3          	bne	a5,a1,8000b754 <emovi+0x98>
8000b760:	fcdff06f          	j	8000b72c <emovi+0x70>
8000b764:	00658793          	addi	a5,a1,6
8000b768:	00059223          	sh	zero,4(a1)
8000b76c:	ffe50513          	addi	a0,a0,-2
8000b770:	ffe90913          	addi	s2,s2,-2
8000b774:	00295703          	lhu	a4,2(s2)
8000b778:	00278793          	addi	a5,a5,2
8000b77c:	fee79f23          	sh	a4,-2(a5)
8000b780:	fea918e3          	bne	s2,a0,8000b770 <emovi+0xb4>
8000b784:	00059c23          	sh	zero,24(a1)
8000b788:	fa5ff06f          	j	8000b72c <emovi+0x70>

8000b78c <ecmp>:
8000b78c:	fb010113          	addi	sp,sp,-80
8000b790:	04912223          	sw	s1,68(sp)
8000b794:	05212023          	sw	s2,64(sp)
8000b798:	04112623          	sw	ra,76(sp)
8000b79c:	04812423          	sw	s0,72(sp)
8000b7a0:	00050913          	mv	s2,a0
8000b7a4:	00058493          	mv	s1,a1
8000b7a8:	ea9ff0ef          	jal	ra,8000b650 <eisnan>
8000b7ac:	0e051063          	bnez	a0,8000b88c <ecmp+0x100>
8000b7b0:	00048513          	mv	a0,s1
8000b7b4:	e9dff0ef          	jal	ra,8000b650 <eisnan>
8000b7b8:	00050413          	mv	s0,a0
8000b7bc:	0c051863          	bnez	a0,8000b88c <ecmp+0x100>
8000b7c0:	00810593          	addi	a1,sp,8
8000b7c4:	00090513          	mv	a0,s2
8000b7c8:	ef5ff0ef          	jal	ra,8000b6bc <emovi>
8000b7cc:	02410593          	addi	a1,sp,36
8000b7d0:	00048513          	mv	a0,s1
8000b7d4:	ee9ff0ef          	jal	ra,8000b6bc <emovi>
8000b7d8:	00815703          	lhu	a4,8(sp)
8000b7dc:	02415783          	lhu	a5,36(sp)
8000b7e0:	06e78063          	beq	a5,a4,8000b840 <ecmp+0xb4>
8000b7e4:	00200793          	li	a5,2
8000b7e8:	01800693          	li	a3,24
8000b7ec:	00810613          	addi	a2,sp,8
8000b7f0:	00f60633          	add	a2,a2,a5
8000b7f4:	00065603          	lhu	a2,0(a2) # ffff8000 <__stack+0x7ffbb534>
8000b7f8:	02061c63          	bnez	a2,8000b830 <ecmp+0xa4>
8000b7fc:	02410613          	addi	a2,sp,36
8000b800:	00f60633          	add	a2,a2,a5
8000b804:	00065603          	lhu	a2,0(a2)
8000b808:	02061463          	bnez	a2,8000b830 <ecmp+0xa4>
8000b80c:	00278793          	addi	a5,a5,2
8000b810:	fcd79ee3          	bne	a5,a3,8000b7ec <ecmp+0x60>
8000b814:	00040513          	mv	a0,s0
8000b818:	04c12083          	lw	ra,76(sp)
8000b81c:	04812403          	lw	s0,72(sp)
8000b820:	04412483          	lw	s1,68(sp)
8000b824:	04012903          	lw	s2,64(sp)
8000b828:	05010113          	addi	sp,sp,80
8000b82c:	00008067          	ret
8000b830:	00100413          	li	s0,1
8000b834:	fe0700e3          	beqz	a4,8000b814 <ecmp+0x88>
8000b838:	fff00413          	li	s0,-1
8000b83c:	fd9ff06f          	j	8000b814 <ecmp+0x88>
8000b840:	00100613          	li	a2,1
8000b844:	00078463          	beqz	a5,8000b84c <ecmp+0xc0>
8000b848:	fff00613          	li	a2,-1
8000b84c:	00000793          	li	a5,0
8000b850:	01800593          	li	a1,24
8000b854:	00810713          	addi	a4,sp,8
8000b858:	00f70733          	add	a4,a4,a5
8000b85c:	00075683          	lhu	a3,0(a4)
8000b860:	02410713          	addi	a4,sp,36
8000b864:	00f70733          	add	a4,a4,a5
8000b868:	00075703          	lhu	a4,0(a4)
8000b86c:	00e69863          	bne	a3,a4,8000b87c <ecmp+0xf0>
8000b870:	00278793          	addi	a5,a5,2
8000b874:	feb790e3          	bne	a5,a1,8000b854 <ecmp+0xc8>
8000b878:	f9dff06f          	j	8000b814 <ecmp+0x88>
8000b87c:	00060413          	mv	s0,a2
8000b880:	f8d76ae3          	bltu	a4,a3,8000b814 <ecmp+0x88>
8000b884:	40c00433          	neg	s0,a2
8000b888:	f8dff06f          	j	8000b814 <ecmp+0x88>
8000b88c:	ffe00413          	li	s0,-2
8000b890:	f85ff06f          	j	8000b814 <ecmp+0x88>

8000b894 <eisinf>:
8000b894:	01255783          	lhu	a5,18(a0)
8000b898:	fff7c793          	not	a5,a5
8000b89c:	01179713          	slli	a4,a5,0x11
8000b8a0:	02071063          	bnez	a4,8000b8c0 <eisinf+0x2c>
8000b8a4:	ff010113          	addi	sp,sp,-16
8000b8a8:	00112623          	sw	ra,12(sp)
8000b8ac:	da5ff0ef          	jal	ra,8000b650 <eisnan>
8000b8b0:	00c12083          	lw	ra,12(sp)
8000b8b4:	00153513          	seqz	a0,a0
8000b8b8:	01010113          	addi	sp,sp,16
8000b8bc:	00008067          	ret
8000b8c0:	00000513          	li	a0,0
8000b8c4:	00008067          	ret

8000b8c8 <einfin.isra.2>:
8000b8c8:	01250793          	addi	a5,a0,18
8000b8cc:	00250513          	addi	a0,a0,2
8000b8d0:	fe051f23          	sh	zero,-2(a0)
8000b8d4:	fef51ce3          	bne	a0,a5,8000b8cc <einfin.isra.2+0x4>
8000b8d8:	00055783          	lhu	a5,0(a0)
8000b8dc:	00008737          	lui	a4,0x8
8000b8e0:	fff70713          	addi	a4,a4,-1 # 7fff <_HEAP_SIZE+0x6fff>
8000b8e4:	00e7e7b3          	or	a5,a5,a4
8000b8e8:	00f51023          	sh	a5,0(a0)
8000b8ec:	00008067          	ret

8000b8f0 <eshift.part.3>:
8000b8f0:	fe010113          	addi	sp,sp,-32
8000b8f4:	00812c23          	sw	s0,24(sp)
8000b8f8:	01312623          	sw	s3,12(sp)
8000b8fc:	00112e23          	sw	ra,28(sp)
8000b900:	00912a23          	sw	s1,20(sp)
8000b904:	01212823          	sw	s2,16(sp)
8000b908:	01412423          	sw	s4,8(sp)
8000b90c:	01512223          	sw	s5,4(sp)
8000b910:	00050993          	mv	s3,a0
8000b914:	00058413          	mv	s0,a1
8000b918:	1005d263          	bgez	a1,8000ba1c <eshift.part.3+0x12c>
8000b91c:	40b00933          	neg	s2,a1
8000b920:	00090a13          	mv	s4,s2
8000b924:	00000493          	li	s1,0
8000b928:	00f00a93          	li	s5,15
8000b92c:	034ace63          	blt	s5,s4,8000b968 <eshift.part.3+0x78>
8000b930:	00495913          	srli	s2,s2,0x4
8000b934:	ff000593          	li	a1,-16
8000b938:	02b905b3          	mul	a1,s2,a1
8000b93c:	00700a13          	li	s4,7
8000b940:	40858433          	sub	s0,a1,s0
8000b944:	00040913          	mv	s2,s0
8000b948:	032a4c63          	blt	s4,s2,8000b980 <eshift.part.3+0x90>
8000b94c:	00345593          	srli	a1,s0,0x3
8000b950:	ff800793          	li	a5,-8
8000b954:	02f585b3          	mul	a1,a1,a5
8000b958:	00858433          	add	s0,a1,s0
8000b95c:	02041e63          	bnez	s0,8000b998 <eshift.part.3+0xa8>
8000b960:	00903533          	snez	a0,s1
8000b964:	0940006f          	j	8000b9f8 <eshift.part.3+0x108>
8000b968:	0189d783          	lhu	a5,24(s3)
8000b96c:	00098513          	mv	a0,s3
8000b970:	ff0a0a13          	addi	s4,s4,-16
8000b974:	00f4e4b3          	or	s1,s1,a5
8000b978:	ba5ff0ef          	jal	ra,8000b51c <eshdn6>
8000b97c:	fb1ff06f          	j	8000b92c <eshift.part.3+0x3c>
8000b980:	0189c783          	lbu	a5,24(s3)
8000b984:	00098513          	mv	a0,s3
8000b988:	ff890913          	addi	s2,s2,-8
8000b98c:	0097e4b3          	or	s1,a5,s1
8000b990:	b11ff0ef          	jal	ra,8000b4a0 <eshdn8>
8000b994:	fb5ff06f          	j	8000b948 <eshift.part.3+0x58>
8000b998:	0189d783          	lhu	a5,24(s3)
8000b99c:	00098513          	mv	a0,s3
8000b9a0:	fff40413          	addi	s0,s0,-1
8000b9a4:	0017f793          	andi	a5,a5,1
8000b9a8:	0097e4b3          	or	s1,a5,s1
8000b9ac:	a51ff0ef          	jal	ra,8000b3fc <eshdn1>
8000b9b0:	fadff06f          	j	8000b95c <eshift.part.3+0x6c>
8000b9b4:	00098513          	mv	a0,s3
8000b9b8:	b45ff0ef          	jal	ra,8000b4fc <eshup6>
8000b9bc:	ff048493          	addi	s1,s1,-16
8000b9c0:	fe994ae3          	blt	s2,s1,8000b9b4 <eshift.part.3+0xc4>
8000b9c4:	00445593          	srli	a1,s0,0x4
8000b9c8:	ff000793          	li	a5,-16
8000b9cc:	02f585b3          	mul	a1,a1,a5
8000b9d0:	00700913          	li	s2,7
8000b9d4:	00b40433          	add	s0,s0,a1
8000b9d8:	00040493          	mv	s1,s0
8000b9dc:	04994663          	blt	s2,s1,8000ba28 <eshift.part.3+0x138>
8000b9e0:	00345593          	srli	a1,s0,0x3
8000b9e4:	ff800793          	li	a5,-8
8000b9e8:	02f585b3          	mul	a1,a1,a5
8000b9ec:	00b40433          	add	s0,s0,a1
8000b9f0:	04041463          	bnez	s0,8000ba38 <eshift.part.3+0x148>
8000b9f4:	00000513          	li	a0,0
8000b9f8:	01c12083          	lw	ra,28(sp)
8000b9fc:	01812403          	lw	s0,24(sp)
8000ba00:	01412483          	lw	s1,20(sp)
8000ba04:	01012903          	lw	s2,16(sp)
8000ba08:	00c12983          	lw	s3,12(sp)
8000ba0c:	00812a03          	lw	s4,8(sp)
8000ba10:	00412a83          	lw	s5,4(sp)
8000ba14:	02010113          	addi	sp,sp,32
8000ba18:	00008067          	ret
8000ba1c:	00058493          	mv	s1,a1
8000ba20:	00f00913          	li	s2,15
8000ba24:	f9dff06f          	j	8000b9c0 <eshift.part.3+0xd0>
8000ba28:	00098513          	mv	a0,s3
8000ba2c:	aa9ff0ef          	jal	ra,8000b4d4 <eshup8>
8000ba30:	ff848493          	addi	s1,s1,-8
8000ba34:	fa9ff06f          	j	8000b9dc <eshift.part.3+0xec>
8000ba38:	00098513          	mv	a0,s3
8000ba3c:	a11ff0ef          	jal	ra,8000b44c <eshup1>
8000ba40:	fff40413          	addi	s0,s0,-1
8000ba44:	fadff06f          	j	8000b9f0 <eshift.part.3+0x100>

8000ba48 <enormlz>:
8000ba48:	00455783          	lhu	a5,4(a0)
8000ba4c:	ff010113          	addi	sp,sp,-16
8000ba50:	00912223          	sw	s1,4(sp)
8000ba54:	00112623          	sw	ra,12(sp)
8000ba58:	00812423          	sw	s0,8(sp)
8000ba5c:	01212023          	sw	s2,0(sp)
8000ba60:	00050493          	mv	s1,a0
8000ba64:	08079263          	bnez	a5,8000bae8 <enormlz+0xa0>
8000ba68:	00651783          	lh	a5,6(a0)
8000ba6c:	00000413          	li	s0,0
8000ba70:	0a000913          	li	s2,160
8000ba74:	0207d863          	bgez	a5,8000baa4 <enormlz+0x5c>
8000ba78:	00040513          	mv	a0,s0
8000ba7c:	00c12083          	lw	ra,12(sp)
8000ba80:	00812403          	lw	s0,8(sp)
8000ba84:	00412483          	lw	s1,4(sp)
8000ba88:	00012903          	lw	s2,0(sp)
8000ba8c:	01010113          	addi	sp,sp,16
8000ba90:	00008067          	ret
8000ba94:	00048513          	mv	a0,s1
8000ba98:	01040413          	addi	s0,s0,16
8000ba9c:	a61ff0ef          	jal	ra,8000b4fc <eshup6>
8000baa0:	fd240ce3          	beq	s0,s2,8000ba78 <enormlz+0x30>
8000baa4:	0064d783          	lhu	a5,6(s1)
8000baa8:	fe0786e3          	beqz	a5,8000ba94 <enormlz+0x4c>
8000baac:	0064d783          	lhu	a5,6(s1)
8000bab0:	f007f793          	andi	a5,a5,-256
8000bab4:	02078263          	beqz	a5,8000bad8 <enormlz+0x90>
8000bab8:	0a000913          	li	s2,160
8000babc:	00649783          	lh	a5,6(s1)
8000bac0:	fa07cce3          	bltz	a5,8000ba78 <enormlz+0x30>
8000bac4:	00048513          	mv	a0,s1
8000bac8:	00140413          	addi	s0,s0,1
8000bacc:	981ff0ef          	jal	ra,8000b44c <eshup1>
8000bad0:	fe8956e3          	ble	s0,s2,8000babc <enormlz+0x74>
8000bad4:	fa5ff06f          	j	8000ba78 <enormlz+0x30>
8000bad8:	00048513          	mv	a0,s1
8000badc:	9f9ff0ef          	jal	ra,8000b4d4 <eshup8>
8000bae0:	00840413          	addi	s0,s0,8
8000bae4:	fc9ff06f          	j	8000baac <enormlz+0x64>
8000bae8:	f007f793          	andi	a5,a5,-256
8000baec:	00000413          	li	s0,0
8000baf0:	00078663          	beqz	a5,8000bafc <enormlz+0xb4>
8000baf4:	9adff0ef          	jal	ra,8000b4a0 <eshdn8>
8000baf8:	ff800413          	li	s0,-8
8000bafc:	f7000913          	li	s2,-144
8000bb00:	0140006f          	j	8000bb14 <enormlz+0xcc>
8000bb04:	00048513          	mv	a0,s1
8000bb08:	fff40413          	addi	s0,s0,-1
8000bb0c:	8f1ff0ef          	jal	ra,8000b3fc <eshdn1>
8000bb10:	f72444e3          	blt	s0,s2,8000ba78 <enormlz+0x30>
8000bb14:	0044d783          	lhu	a5,4(s1)
8000bb18:	fe0796e3          	bnez	a5,8000bb04 <enormlz+0xbc>
8000bb1c:	f5dff06f          	j	8000ba78 <enormlz+0x30>

8000bb20 <enan.constprop.12>:
8000bb20:	01050793          	addi	a5,a0,16
8000bb24:	00250513          	addi	a0,a0,2
8000bb28:	fe051f23          	sh	zero,-2(a0)
8000bb2c:	fef51ce3          	bne	a0,a5,8000bb24 <enan.constprop.12+0x4>
8000bb30:	ffffc7b7          	lui	a5,0xffffc
8000bb34:	00f51023          	sh	a5,0(a0)
8000bb38:	ffff87b7          	lui	a5,0xffff8
8000bb3c:	fff7c793          	not	a5,a5
8000bb40:	00f51123          	sh	a5,2(a0)
8000bb44:	00008067          	ret

8000bb48 <emovo.isra.6>:
8000bb48:	00050713          	mv	a4,a0
8000bb4c:	00075683          	lhu	a3,0(a4)
8000bb50:	00058513          	mv	a0,a1
8000bb54:	00275783          	lhu	a5,2(a4)
8000bb58:	00068663          	beqz	a3,8000bb64 <emovo.isra.6+0x1c>
8000bb5c:	ffff86b7          	lui	a3,0xffff8
8000bb60:	00d7e7b3          	or	a5,a5,a3
8000bb64:	00f51923          	sh	a5,18(a0)
8000bb68:	00275603          	lhu	a2,2(a4)
8000bb6c:	000086b7          	lui	a3,0x8
8000bb70:	fff68693          	addi	a3,a3,-1 # 7fff <_HEAP_SIZE+0x6fff>
8000bb74:	00670793          	addi	a5,a4,6
8000bb78:	00d61e63          	bne	a2,a3,8000bb94 <emovo.isra.6+0x4c>
8000bb7c:	01a70713          	addi	a4,a4,26
8000bb80:	0007d683          	lhu	a3,0(a5) # ffff8000 <__stack+0x7ffbb534>
8000bb84:	02069863          	bnez	a3,8000bbb4 <emovo.isra.6+0x6c>
8000bb88:	00278793          	addi	a5,a5,2
8000bb8c:	fee79ae3          	bne	a5,a4,8000bb80 <emovo.isra.6+0x38>
8000bb90:	d39ff06f          	j	8000b8c8 <einfin.isra.2>
8000bb94:	01050513          	addi	a0,a0,16
8000bb98:	01870713          	addi	a4,a4,24
8000bb9c:	00278793          	addi	a5,a5,2
8000bba0:	ffe7d683          	lhu	a3,-2(a5)
8000bba4:	ffe50513          	addi	a0,a0,-2
8000bba8:	00d51123          	sh	a3,2(a0)
8000bbac:	fee798e3          	bne	a5,a4,8000bb9c <emovo.isra.6+0x54>
8000bbb0:	00008067          	ret
8000bbb4:	f6dff06f          	j	8000bb20 <enan.constprop.12>

8000bbb8 <e113toe.isra.8>:
8000bbb8:	fd010113          	addi	sp,sp,-48
8000bbbc:	02912223          	sw	s1,36(sp)
8000bbc0:	00050493          	mv	s1,a0
8000bbc4:	00410513          	addi	a0,sp,4
8000bbc8:	02812423          	sw	s0,40(sp)
8000bbcc:	02112623          	sw	ra,44(sp)
8000bbd0:	00058413          	mv	s0,a1
8000bbd4:	fb4ff0ef          	jal	ra,8000b388 <ecleaz>
8000bbd8:	00e4d703          	lhu	a4,14(s1)
8000bbdc:	01071793          	slli	a5,a4,0x10
8000bbe0:	4107d793          	srai	a5,a5,0x10
8000bbe4:	0407c263          	bltz	a5,8000bc28 <e113toe.isra.8+0x70>
8000bbe8:	00011223          	sh	zero,4(sp)
8000bbec:	000086b7          	lui	a3,0x8
8000bbf0:	fff68693          	addi	a3,a3,-1 # 7fff <_HEAP_SIZE+0x6fff>
8000bbf4:	00d77733          	and	a4,a4,a3
8000bbf8:	00e48793          	addi	a5,s1,14
8000bbfc:	06d71c63          	bne	a4,a3,8000bc74 <e113toe.isra.8+0xbc>
8000bc00:	00048713          	mv	a4,s1
8000bc04:	00075683          	lhu	a3,0(a4)
8000bc08:	02068663          	beqz	a3,8000bc34 <e113toe.isra.8+0x7c>
8000bc0c:	00040513          	mv	a0,s0
8000bc10:	f11ff0ef          	jal	ra,8000bb20 <enan.constprop.12>
8000bc14:	02c12083          	lw	ra,44(sp)
8000bc18:	02812403          	lw	s0,40(sp)
8000bc1c:	02412483          	lw	s1,36(sp)
8000bc20:	03010113          	addi	sp,sp,48
8000bc24:	00008067          	ret
8000bc28:	fff00793          	li	a5,-1
8000bc2c:	00f11223          	sh	a5,4(sp)
8000bc30:	fbdff06f          	j	8000bbec <e113toe.isra.8+0x34>
8000bc34:	00270713          	addi	a4,a4,2
8000bc38:	fce796e3          	bne	a5,a4,8000bc04 <e113toe.isra.8+0x4c>
8000bc3c:	00040513          	mv	a0,s0
8000bc40:	f18ff0ef          	jal	ra,8000b358 <eclear>
8000bc44:	00040513          	mv	a0,s0
8000bc48:	c81ff0ef          	jal	ra,8000b8c8 <einfin.isra.2>
8000bc4c:	00e49783          	lh	a5,14(s1)
8000bc50:	fc07d2e3          	bgez	a5,8000bc14 <e113toe.isra.8+0x5c>
8000bc54:	00040513          	mv	a0,s0
8000bc58:	9f9ff0ef          	jal	ra,8000b650 <eisnan>
8000bc5c:	fa051ce3          	bnez	a0,8000bc14 <e113toe.isra.8+0x5c>
8000bc60:	01245783          	lhu	a5,18(s0)
8000bc64:	ffff8737          	lui	a4,0xffff8
8000bc68:	00e7c7b3          	xor	a5,a5,a4
8000bc6c:	00f41923          	sh	a5,18(s0)
8000bc70:	fa5ff06f          	j	8000bc14 <e113toe.isra.8+0x5c>
8000bc74:	00e11323          	sh	a4,6(sp)
8000bc78:	00410693          	addi	a3,sp,4
8000bc7c:	ffe78793          	addi	a5,a5,-2
8000bc80:	0007d603          	lhu	a2,0(a5)
8000bc84:	00268693          	addi	a3,a3,2
8000bc88:	00c69223          	sh	a2,4(a3)
8000bc8c:	fef498e3          	bne	s1,a5,8000bc7c <e113toe.isra.8+0xc4>
8000bc90:	00071c63          	bnez	a4,8000bca8 <e113toe.isra.8+0xf0>
8000bc94:	00011423          	sh	zero,8(sp)
8000bc98:	00040593          	mv	a1,s0
8000bc9c:	00410513          	addi	a0,sp,4
8000bca0:	ea9ff0ef          	jal	ra,8000bb48 <emovo.isra.6>
8000bca4:	f71ff06f          	j	8000bc14 <e113toe.isra.8+0x5c>
8000bca8:	00100793          	li	a5,1
8000bcac:	fff00593          	li	a1,-1
8000bcb0:	00410513          	addi	a0,sp,4
8000bcb4:	00f11423          	sh	a5,8(sp)
8000bcb8:	c39ff0ef          	jal	ra,8000b8f0 <eshift.part.3>
8000bcbc:	fddff06f          	j	8000bc98 <e113toe.isra.8+0xe0>

8000bcc0 <emdnorm>:
8000bcc0:	fe010113          	addi	sp,sp,-32
8000bcc4:	00812c23          	sw	s0,24(sp)
8000bcc8:	00912a23          	sw	s1,20(sp)
8000bccc:	01212823          	sw	s2,16(sp)
8000bcd0:	01312623          	sw	s3,12(sp)
8000bcd4:	01412423          	sw	s4,8(sp)
8000bcd8:	01512223          	sw	s5,4(sp)
8000bcdc:	00068913          	mv	s2,a3
8000bce0:	00078413          	mv	s0,a5
8000bce4:	00112e23          	sw	ra,28(sp)
8000bce8:	00050493          	mv	s1,a0
8000bcec:	00058993          	mv	s3,a1
8000bcf0:	00060a13          	mv	s4,a2
8000bcf4:	00070a93          	mv	s5,a4
8000bcf8:	d51ff0ef          	jal	ra,8000ba48 <enormlz>
8000bcfc:	09000793          	li	a5,144
8000bd00:	40a90933          	sub	s2,s2,a0
8000bd04:	04a7d463          	ble	a0,a5,8000bd4c <emdnorm+0x8c>
8000bd08:	000087b7          	lui	a5,0x8
8000bd0c:	ffe78793          	addi	a5,a5,-2 # 7ffe <_HEAP_SIZE+0x6ffe>
8000bd10:	2d27c663          	blt	a5,s2,8000bfdc <emdnorm+0x31c>
8000bd14:	00248793          	addi	a5,s1,2
8000bd18:	01a48493          	addi	s1,s1,26
8000bd1c:	00278793          	addi	a5,a5,2
8000bd20:	fe079f23          	sh	zero,-2(a5)
8000bd24:	fe979ce3          	bne	a5,s1,8000bd1c <emdnorm+0x5c>
8000bd28:	01c12083          	lw	ra,28(sp)
8000bd2c:	01812403          	lw	s0,24(sp)
8000bd30:	01412483          	lw	s1,20(sp)
8000bd34:	01012903          	lw	s2,16(sp)
8000bd38:	00c12983          	lw	s3,12(sp)
8000bd3c:	00812a03          	lw	s4,8(sp)
8000bd40:	00412a83          	lw	s5,4(sp)
8000bd44:	02010113          	addi	sp,sp,32
8000bd48:	00008067          	ret
8000bd4c:	00095e63          	bgez	s2,8000bd68 <emdnorm+0xa8>
8000bd50:	f7000793          	li	a5,-144
8000bd54:	12f94c63          	blt	s2,a5,8000be8c <emdnorm+0x1cc>
8000bd58:	00090593          	mv	a1,s2
8000bd5c:	00048513          	mv	a0,s1
8000bd60:	b91ff0ef          	jal	ra,8000b8f0 <eshift.part.3>
8000bd64:	14051063          	bnez	a0,8000bea4 <emdnorm+0x1e4>
8000bd68:	220a8663          	beqz	s5,8000bf94 <emdnorm+0x2d4>
8000bd6c:	00442703          	lw	a4,4(s0)
8000bd70:	00042783          	lw	a5,0(s0)
8000bd74:	06f70663          	beq	a4,a5,8000bde0 <emdnorm+0x120>
8000bd78:	01a40513          	addi	a0,s0,26
8000bd7c:	e0cff0ef          	jal	ra,8000b388 <ecleaz>
8000bd80:	00442783          	lw	a5,4(s0)
8000bd84:	03800713          	li	a4,56
8000bd88:	16e78e63          	beq	a5,a4,8000bf04 <emdnorm+0x244>
8000bd8c:	12f74063          	blt	a4,a5,8000beac <emdnorm+0x1ec>
8000bd90:	01800713          	li	a4,24
8000bd94:	1ae78663          	beq	a5,a4,8000bf40 <emdnorm+0x280>
8000bd98:	03500713          	li	a4,53
8000bd9c:	18e78263          	beq	a5,a4,8000bf20 <emdnorm+0x260>
8000bda0:	00c00713          	li	a4,12
8000bda4:	00e42423          	sw	a4,8(s0)
8000bda8:	80010737          	lui	a4,0x80010
8000bdac:	fff70713          	addi	a4,a4,-1 # 8000ffff <__stack+0xfffd3533>
8000bdb0:	00e42a23          	sw	a4,20(s0)
8000bdb4:	00100713          	li	a4,1
8000bdb8:	00e41c23          	sh	a4,24(s0)
8000bdbc:	00b00713          	li	a4,11
8000bdc0:	00e42623          	sw	a4,12(s0)
8000bdc4:	00c42703          	lw	a4,12(s0)
8000bdc8:	01845683          	lhu	a3,24(s0)
8000bdcc:	00870713          	addi	a4,a4,8
8000bdd0:	00171713          	slli	a4,a4,0x1
8000bdd4:	00e40733          	add	a4,s0,a4
8000bdd8:	00d71523          	sh	a3,10(a4)
8000bddc:	00f42023          	sw	a5,0(s0)
8000bde0:	03204263          	bgtz	s2,8000be04 <emdnorm+0x144>
8000bde4:	00442703          	lw	a4,4(s0)
8000bde8:	09000793          	li	a5,144
8000bdec:	00f70c63          	beq	a4,a5,8000be04 <emdnorm+0x144>
8000bdf0:	0184d783          	lhu	a5,24(s1)
8000bdf4:	00048513          	mv	a0,s1
8000bdf8:	0017f793          	andi	a5,a5,1
8000bdfc:	00f9e9b3          	or	s3,s3,a5
8000be00:	dfcff0ef          	jal	ra,8000b3fc <eshdn1>
8000be04:	00842683          	lw	a3,8(s0)
8000be08:	01445603          	lhu	a2,20(s0)
8000be0c:	00442583          	lw	a1,4(s0)
8000be10:	00169713          	slli	a4,a3,0x1
8000be14:	00e48733          	add	a4,s1,a4
8000be18:	00075783          	lhu	a5,0(a4)
8000be1c:	00c7f7b3          	and	a5,a5,a2
8000be20:	08f00613          	li	a2,143
8000be24:	00b64a63          	blt	a2,a1,8000be38 <emdnorm+0x178>
8000be28:	00168693          	addi	a3,a3,1
8000be2c:	00070613          	mv	a2,a4
8000be30:	00c00593          	li	a1,12
8000be34:	10d5da63          	ble	a3,a1,8000bf48 <emdnorm+0x288>
8000be38:	01445683          	lhu	a3,20(s0)
8000be3c:	00075603          	lhu	a2,0(a4)
8000be40:	fff6c693          	not	a3,a3
8000be44:	00c6f6b3          	and	a3,a3,a2
8000be48:	00d71023          	sh	a3,0(a4)
8000be4c:	01645703          	lhu	a4,22(s0)
8000be50:	00f776b3          	and	a3,a4,a5
8000be54:	10068a63          	beqz	a3,8000bf68 <emdnorm+0x2a8>
8000be58:	02f71263          	bne	a4,a5,8000be7c <emdnorm+0x1bc>
8000be5c:	10099463          	bnez	s3,8000bf64 <emdnorm+0x2a4>
8000be60:	00c42783          	lw	a5,12(s0)
8000be64:	01845703          	lhu	a4,24(s0)
8000be68:	00179793          	slli	a5,a5,0x1
8000be6c:	00f487b3          	add	a5,s1,a5
8000be70:	0007d783          	lhu	a5,0(a5)
8000be74:	00e7f7b3          	and	a5,a5,a4
8000be78:	0e078863          	beqz	a5,8000bf68 <emdnorm+0x2a8>
8000be7c:	00048593          	mv	a1,s1
8000be80:	01a40513          	addi	a0,s0,26
8000be84:	ec0ff0ef          	jal	ra,8000b544 <eaddm>
8000be88:	0e00006f          	j	8000bf68 <emdnorm+0x2a8>
8000be8c:	00248793          	addi	a5,s1,2
8000be90:	01a48493          	addi	s1,s1,26
8000be94:	00278793          	addi	a5,a5,2
8000be98:	fe079f23          	sh	zero,-2(a5)
8000be9c:	fe979ce3          	bne	a5,s1,8000be94 <emdnorm+0x1d4>
8000bea0:	e89ff06f          	j	8000bd28 <emdnorm+0x68>
8000bea4:	00100993          	li	s3,1
8000bea8:	ec1ff06f          	j	8000bd68 <emdnorm+0xa8>
8000beac:	04000713          	li	a4,64
8000beb0:	02e78863          	beq	a5,a4,8000bee0 <emdnorm+0x220>
8000beb4:	07100713          	li	a4,113
8000beb8:	eee794e3          	bne	a5,a4,8000bda0 <emdnorm+0xe0>
8000bebc:	40008737          	lui	a4,0x40008
8000bec0:	fff70713          	addi	a4,a4,-1 # 40007fff <_HEAP_SIZE+0x40006fff>
8000bec4:	00a00693          	li	a3,10
8000bec8:	00e42a23          	sw	a4,20(s0)
8000becc:	00d42423          	sw	a3,8(s0)
8000bed0:	ffff8737          	lui	a4,0xffff8
8000bed4:	00e41c23          	sh	a4,24(s0)
8000bed8:	00d42623          	sw	a3,12(s0)
8000bedc:	ee9ff06f          	j	8000bdc4 <emdnorm+0x104>
8000bee0:	00700713          	li	a4,7
8000bee4:	00e42423          	sw	a4,8(s0)
8000bee8:	80010737          	lui	a4,0x80010
8000beec:	fff70713          	addi	a4,a4,-1 # 8000ffff <__stack+0xfffd3533>
8000bef0:	00e42a23          	sw	a4,20(s0)
8000bef4:	00100713          	li	a4,1
8000bef8:	00e41c23          	sh	a4,24(s0)
8000befc:	00600713          	li	a4,6
8000bf00:	ec1ff06f          	j	8000bdc0 <emdnorm+0x100>
8000bf04:	00600693          	li	a3,6
8000bf08:	00800737          	lui	a4,0x800
8000bf0c:	0ff70713          	addi	a4,a4,255 # 8000ff <_HEAP_SIZE+0x7ff0ff>
8000bf10:	00e42a23          	sw	a4,20(s0)
8000bf14:	00d42423          	sw	a3,8(s0)
8000bf18:	10000713          	li	a4,256
8000bf1c:	fb9ff06f          	j	8000bed4 <emdnorm+0x214>
8000bf20:	04000737          	lui	a4,0x4000
8000bf24:	7ff70713          	addi	a4,a4,2047 # 40007ff <_HEAP_SIZE+0x3fff7ff>
8000bf28:	00600693          	li	a3,6
8000bf2c:	00e42a23          	sw	a4,20(s0)
8000bf30:	00001737          	lui	a4,0x1
8000bf34:	00d42423          	sw	a3,8(s0)
8000bf38:	80070713          	addi	a4,a4,-2048 # 800 <_HEAP_SIZE-0x800>
8000bf3c:	f99ff06f          	j	8000bed4 <emdnorm+0x214>
8000bf40:	00400693          	li	a3,4
8000bf44:	fc5ff06f          	j	8000bf08 <emdnorm+0x248>
8000bf48:	00265503          	lhu	a0,2(a2)
8000bf4c:	00050463          	beqz	a0,8000bf54 <emdnorm+0x294>
8000bf50:	0017e793          	ori	a5,a5,1
8000bf54:	00061123          	sh	zero,2(a2)
8000bf58:	00168693          	addi	a3,a3,1
8000bf5c:	00260613          	addi	a2,a2,2
8000bf60:	ed5ff06f          	j	8000be34 <emdnorm+0x174>
8000bf64:	f00a0ce3          	beqz	s4,8000be7c <emdnorm+0x1bc>
8000bf68:	01204c63          	bgtz	s2,8000bf80 <emdnorm+0x2c0>
8000bf6c:	00442703          	lw	a4,4(s0)
8000bf70:	09000793          	li	a5,144
8000bf74:	00f70663          	beq	a4,a5,8000bf80 <emdnorm+0x2c0>
8000bf78:	00048513          	mv	a0,s1
8000bf7c:	cd0ff0ef          	jal	ra,8000b44c <eshup1>
8000bf80:	0044d783          	lhu	a5,4(s1)
8000bf84:	00078863          	beqz	a5,8000bf94 <emdnorm+0x2d4>
8000bf88:	00048513          	mv	a0,s1
8000bf8c:	c70ff0ef          	jal	ra,8000b3fc <eshdn1>
8000bf90:	00190913          	addi	s2,s2,1
8000bf94:	000087b7          	lui	a5,0x8
8000bf98:	00049c23          	sh	zero,24(s1)
8000bf9c:	ffe78793          	addi	a5,a5,-2 # 7ffe <_HEAP_SIZE+0x6ffe>
8000bfa0:	0327d463          	ble	s2,a5,8000bfc8 <emdnorm+0x308>
8000bfa4:	ffff87b7          	lui	a5,0xffff8
8000bfa8:	fff7c793          	not	a5,a5
8000bfac:	00f49123          	sh	a5,2(s1)
8000bfb0:	00448793          	addi	a5,s1,4
8000bfb4:	01848493          	addi	s1,s1,24
8000bfb8:	00079023          	sh	zero,0(a5) # ffff8000 <__stack+0x7ffbb534>
8000bfbc:	00278793          	addi	a5,a5,2
8000bfc0:	fef49ce3          	bne	s1,a5,8000bfb8 <emdnorm+0x2f8>
8000bfc4:	d65ff06f          	j	8000bd28 <emdnorm+0x68>
8000bfc8:	00095663          	bgez	s2,8000bfd4 <emdnorm+0x314>
8000bfcc:	00049123          	sh	zero,2(s1)
8000bfd0:	d59ff06f          	j	8000bd28 <emdnorm+0x68>
8000bfd4:	01249123          	sh	s2,2(s1)
8000bfd8:	d51ff06f          	j	8000bd28 <emdnorm+0x68>
8000bfdc:	d80a98e3          	bnez	s5,8000bd6c <emdnorm+0xac>
8000bfe0:	00049c23          	sh	zero,24(s1)
8000bfe4:	fc1ff06f          	j	8000bfa4 <emdnorm+0x2e4>

8000bfe8 <eiremain>:
8000bfe8:	fe010113          	addi	sp,sp,-32
8000bfec:	01412423          	sw	s4,8(sp)
8000bff0:	00255a03          	lhu	s4,2(a0)
8000bff4:	00812c23          	sw	s0,24(sp)
8000bff8:	00058413          	mv	s0,a1
8000bffc:	00112e23          	sw	ra,28(sp)
8000c000:	00912a23          	sw	s1,20(sp)
8000c004:	01212823          	sw	s2,16(sp)
8000c008:	01512223          	sw	s5,4(sp)
8000c00c:	01612023          	sw	s6,0(sp)
8000c010:	00060913          	mv	s2,a2
8000c014:	03460b13          	addi	s6,a2,52
8000c018:	01312623          	sw	s3,12(sp)
8000c01c:	00050a93          	mv	s5,a0
8000c020:	a29ff0ef          	jal	ra,8000ba48 <enormlz>
8000c024:	00245483          	lhu	s1,2(s0)
8000c028:	40aa0a33          	sub	s4,s4,a0
8000c02c:	00040513          	mv	a0,s0
8000c030:	a19ff0ef          	jal	ra,8000ba48 <enormlz>
8000c034:	40a484b3          	sub	s1,s1,a0
8000c038:	000b0513          	mv	a0,s6
8000c03c:	b4cff0ef          	jal	ra,8000b388 <ecleaz>
8000c040:	0544d263          	ble	s4,s1,8000c084 <eiremain+0x9c>
8000c044:	00040513          	mv	a0,s0
8000c048:	01812403          	lw	s0,24(sp)
8000c04c:	01c12083          	lw	ra,28(sp)
8000c050:	00c12983          	lw	s3,12(sp)
8000c054:	00812a03          	lw	s4,8(sp)
8000c058:	00412a83          	lw	s5,4(sp)
8000c05c:	00012b03          	lw	s6,0(sp)
8000c060:	00090793          	mv	a5,s2
8000c064:	00048693          	mv	a3,s1
8000c068:	01012903          	lw	s2,16(sp)
8000c06c:	01412483          	lw	s1,20(sp)
8000c070:	00000713          	li	a4,0
8000c074:	00000613          	li	a2,0
8000c078:	00000593          	li	a1,0
8000c07c:	02010113          	addi	sp,sp,32
8000c080:	c41ff06f          	j	8000bcc0 <emdnorm>
8000c084:	00040593          	mv	a1,s0
8000c088:	000a8513          	mv	a0,s5
8000c08c:	b34ff0ef          	jal	ra,8000b3c0 <ecmpm>
8000c090:	00000993          	li	s3,0
8000c094:	00a04a63          	bgtz	a0,8000c0a8 <eiremain+0xc0>
8000c098:	00040593          	mv	a1,s0
8000c09c:	000a8513          	mv	a0,s5
8000c0a0:	cdcff0ef          	jal	ra,8000b57c <esubm>
8000c0a4:	00100993          	li	s3,1
8000c0a8:	000b0513          	mv	a0,s6
8000c0ac:	ba0ff0ef          	jal	ra,8000b44c <eshup1>
8000c0b0:	04c95783          	lhu	a5,76(s2)
8000c0b4:	00040513          	mv	a0,s0
8000c0b8:	fff48493          	addi	s1,s1,-1
8000c0bc:	00f9e9b3          	or	s3,s3,a5
8000c0c0:	05391623          	sh	s3,76(s2)
8000c0c4:	b88ff0ef          	jal	ra,8000b44c <eshup1>
8000c0c8:	f79ff06f          	j	8000c040 <eiremain+0x58>

8000c0cc <emul>:
8000c0cc:	f7010113          	addi	sp,sp,-144
8000c0d0:	08812423          	sw	s0,136(sp)
8000c0d4:	08912223          	sw	s1,132(sp)
8000c0d8:	09212023          	sw	s2,128(sp)
8000c0dc:	07312e23          	sw	s3,124(sp)
8000c0e0:	08112623          	sw	ra,140(sp)
8000c0e4:	07412c23          	sw	s4,120(sp)
8000c0e8:	07512a23          	sw	s5,116(sp)
8000c0ec:	07612823          	sw	s6,112(sp)
8000c0f0:	07712623          	sw	s7,108(sp)
8000c0f4:	07812423          	sw	s8,104(sp)
8000c0f8:	07912223          	sw	s9,100(sp)
8000c0fc:	00050493          	mv	s1,a0
8000c100:	00058413          	mv	s0,a1
8000c104:	00060913          	mv	s2,a2
8000c108:	00068993          	mv	s3,a3
8000c10c:	d44ff0ef          	jal	ra,8000b650 <eisnan>
8000c110:	04050263          	beqz	a0,8000c154 <emul+0x88>
8000c114:	00090593          	mv	a1,s2
8000c118:	00048513          	mv	a0,s1
8000c11c:	a50ff0ef          	jal	ra,8000b36c <emov>
8000c120:	08c12083          	lw	ra,140(sp)
8000c124:	08812403          	lw	s0,136(sp)
8000c128:	08412483          	lw	s1,132(sp)
8000c12c:	08012903          	lw	s2,128(sp)
8000c130:	07c12983          	lw	s3,124(sp)
8000c134:	07812a03          	lw	s4,120(sp)
8000c138:	07412a83          	lw	s5,116(sp)
8000c13c:	07012b03          	lw	s6,112(sp)
8000c140:	06c12b83          	lw	s7,108(sp)
8000c144:	06812c03          	lw	s8,104(sp)
8000c148:	06412c83          	lw	s9,100(sp)
8000c14c:	09010113          	addi	sp,sp,144
8000c150:	00008067          	ret
8000c154:	00040513          	mv	a0,s0
8000c158:	cf8ff0ef          	jal	ra,8000b650 <eisnan>
8000c15c:	00050863          	beqz	a0,8000c16c <emul+0xa0>
8000c160:	00090593          	mv	a1,s2
8000c164:	00040513          	mv	a0,s0
8000c168:	fb5ff06f          	j	8000c11c <emul+0x50>
8000c16c:	00048513          	mv	a0,s1
8000c170:	f24ff0ef          	jal	ra,8000b894 <eisinf>
8000c174:	06051463          	bnez	a0,8000c1dc <emul+0x110>
8000c178:	00040513          	mv	a0,s0
8000c17c:	f18ff0ef          	jal	ra,8000b894 <eisinf>
8000c180:	00050c63          	beqz	a0,8000c198 <emul+0xcc>
8000c184:	800205b7          	lui	a1,0x80020
8000c188:	29458593          	addi	a1,a1,660 # 80020294 <__stack+0xfffe37c8>
8000c18c:	00048513          	mv	a0,s1
8000c190:	dfcff0ef          	jal	ra,8000b78c <ecmp>
8000c194:	04050e63          	beqz	a0,8000c1f0 <emul+0x124>
8000c198:	00048513          	mv	a0,s1
8000c19c:	ef8ff0ef          	jal	ra,8000b894 <eisinf>
8000c1a0:	00051863          	bnez	a0,8000c1b0 <emul+0xe4>
8000c1a4:	00040513          	mv	a0,s0
8000c1a8:	eecff0ef          	jal	ra,8000b894 <eisinf>
8000c1ac:	04050c63          	beqz	a0,8000c204 <emul+0x138>
8000c1b0:	00048513          	mv	a0,s1
8000c1b4:	cd0ff0ef          	jal	ra,8000b684 <eisneg>
8000c1b8:	00050493          	mv	s1,a0
8000c1bc:	00040513          	mv	a0,s0
8000c1c0:	cc4ff0ef          	jal	ra,8000b684 <eisneg>
8000c1c4:	02a48c63          	beq	s1,a0,8000c1fc <emul+0x130>
8000c1c8:	ffff87b7          	lui	a5,0xffff8
8000c1cc:	00f91923          	sh	a5,18(s2)
8000c1d0:	00090513          	mv	a0,s2
8000c1d4:	ef4ff0ef          	jal	ra,8000b8c8 <einfin.isra.2>
8000c1d8:	f49ff06f          	j	8000c120 <emul+0x54>
8000c1dc:	800205b7          	lui	a1,0x80020
8000c1e0:	29458593          	addi	a1,a1,660 # 80020294 <__stack+0xfffe37c8>
8000c1e4:	00040513          	mv	a0,s0
8000c1e8:	da4ff0ef          	jal	ra,8000b78c <ecmp>
8000c1ec:	f80516e3          	bnez	a0,8000c178 <emul+0xac>
8000c1f0:	00090513          	mv	a0,s2
8000c1f4:	92dff0ef          	jal	ra,8000bb20 <enan.constprop.12>
8000c1f8:	f29ff06f          	j	8000c120 <emul+0x54>
8000c1fc:	00091923          	sh	zero,18(s2)
8000c200:	fd1ff06f          	j	8000c1d0 <emul+0x104>
8000c204:	00048513          	mv	a0,s1
8000c208:	00c10593          	addi	a1,sp,12
8000c20c:	cb0ff0ef          	jal	ra,8000b6bc <emovi>
8000c210:	00040513          	mv	a0,s0
8000c214:	02810593          	addi	a1,sp,40
8000c218:	ca4ff0ef          	jal	ra,8000b6bc <emovi>
8000c21c:	00e15403          	lhu	s0,14(sp)
8000c220:	02a15483          	lhu	s1,42(sp)
8000c224:	02041463          	bnez	s0,8000c24c <emul+0x180>
8000c228:	00000793          	li	a5,0
8000c22c:	01600713          	li	a4,22
8000c230:	00c10693          	addi	a3,sp,12
8000c234:	00f686b3          	add	a3,a3,a5
8000c238:	0026d683          	lhu	a3,2(a3)
8000c23c:	10068a63          	beqz	a3,8000c350 <emul+0x284>
8000c240:	00c10513          	addi	a0,sp,12
8000c244:	805ff0ef          	jal	ra,8000ba48 <enormlz>
8000c248:	40a00433          	neg	s0,a0
8000c24c:	02a15783          	lhu	a5,42(sp)
8000c250:	00048c13          	mv	s8,s1
8000c254:	02079263          	bnez	a5,8000c278 <emul+0x1ac>
8000c258:	01600713          	li	a4,22
8000c25c:	02810693          	addi	a3,sp,40
8000c260:	00f686b3          	add	a3,a3,a5
8000c264:	0026d683          	lhu	a3,2(a3)
8000c268:	0e068e63          	beqz	a3,8000c364 <emul+0x298>
8000c26c:	02810513          	addi	a0,sp,40
8000c270:	fd8ff0ef          	jal	ra,8000ba48 <enormlz>
8000c274:	40a48c33          	sub	s8,s1,a0
8000c278:	02815783          	lhu	a5,40(sp)
8000c27c:	03498b93          	addi	s7,s3,52
8000c280:	03898493          	addi	s1,s3,56
8000c284:	02f99a23          	sh	a5,52(s3)
8000c288:	02a15783          	lhu	a5,42(sp)
8000c28c:	000b8a13          	mv	s4,s7
8000c290:	02f99b23          	sh	a5,54(s3)
8000c294:	04e98793          	addi	a5,s3,78
8000c298:	00049023          	sh	zero,0(s1)
8000c29c:	00248493          	addi	s1,s1,2
8000c2a0:	fe979ce3          	bne	a5,s1,8000c298 <emul+0x1cc>
8000c2a4:	00000a93          	li	s5,0
8000c2a8:	00000b13          	li	s6,0
8000c2ac:	fec00c93          	li	s9,-20
8000c2b0:	00c10793          	addi	a5,sp,12
8000c2b4:	015787b3          	add	a5,a5,s5
8000c2b8:	0187d503          	lhu	a0,24(a5) # ffff8018 <__stack+0x7ffbb54c>
8000c2bc:	00050e63          	beqz	a0,8000c2d8 <emul+0x20c>
8000c2c0:	02810593          	addi	a1,sp,40
8000c2c4:	04410613          	addi	a2,sp,68
8000c2c8:	aecff0ef          	jal	ra,8000b5b4 <m16m>
8000c2cc:	000b8593          	mv	a1,s7
8000c2d0:	04410513          	addi	a0,sp,68
8000c2d4:	a70ff0ef          	jal	ra,8000b544 <eaddm>
8000c2d8:	04c9d783          	lhu	a5,76(s3)
8000c2dc:	000b8513          	mv	a0,s7
8000c2e0:	ffea8a93          	addi	s5,s5,-2
8000c2e4:	00fb6b33          	or	s6,s6,a5
8000c2e8:	a34ff0ef          	jal	ra,8000b51c <eshdn6>
8000c2ec:	fd9a92e3          	bne	s5,s9,8000c2b0 <emul+0x1e4>
8000c2f0:	02810793          	addi	a5,sp,40
8000c2f4:	000a5703          	lhu	a4,0(s4)
8000c2f8:	002a0a13          	addi	s4,s4,2
8000c2fc:	00278793          	addi	a5,a5,2
8000c300:	fee79f23          	sh	a4,-2(a5)
8000c304:	fe9a18e3          	bne	s4,s1,8000c2f4 <emul+0x228>
8000c308:	ffffc6b7          	lui	a3,0xffffc
8000c30c:	01840433          	add	s0,s0,s8
8000c310:	00268693          	addi	a3,a3,2 # ffffc002 <__stack+0x7ffbf536>
8000c314:	00098793          	mv	a5,s3
8000c318:	04000713          	li	a4,64
8000c31c:	00d406b3          	add	a3,s0,a3
8000c320:	00000613          	li	a2,0
8000c324:	000b0593          	mv	a1,s6
8000c328:	02810513          	addi	a0,sp,40
8000c32c:	995ff0ef          	jal	ra,8000bcc0 <emdnorm>
8000c330:	00c15703          	lhu	a4,12(sp)
8000c334:	02815783          	lhu	a5,40(sp)
8000c338:	02f71c63          	bne	a4,a5,8000c370 <emul+0x2a4>
8000c33c:	02011423          	sh	zero,40(sp)
8000c340:	00090593          	mv	a1,s2
8000c344:	02810513          	addi	a0,sp,40
8000c348:	801ff0ef          	jal	ra,8000bb48 <emovo.isra.6>
8000c34c:	dd5ff06f          	j	8000c120 <emul+0x54>
8000c350:	00278793          	addi	a5,a5,2
8000c354:	ece79ee3          	bne	a5,a4,8000c230 <emul+0x164>
8000c358:	00090513          	mv	a0,s2
8000c35c:	ffdfe0ef          	jal	ra,8000b358 <eclear>
8000c360:	dc1ff06f          	j	8000c120 <emul+0x54>
8000c364:	00278793          	addi	a5,a5,2
8000c368:	eee79ae3          	bne	a5,a4,8000c25c <emul+0x190>
8000c36c:	fedff06f          	j	8000c358 <emul+0x28c>
8000c370:	fff00793          	li	a5,-1
8000c374:	02f11423          	sh	a5,40(sp)
8000c378:	fc9ff06f          	j	8000c340 <emul+0x274>

8000c37c <ediv>:
8000c37c:	f7010113          	addi	sp,sp,-144
8000c380:	08812423          	sw	s0,136(sp)
8000c384:	08912223          	sw	s1,132(sp)
8000c388:	09212023          	sw	s2,128(sp)
8000c38c:	07512a23          	sw	s5,116(sp)
8000c390:	08112623          	sw	ra,140(sp)
8000c394:	07312e23          	sw	s3,124(sp)
8000c398:	07412c23          	sw	s4,120(sp)
8000c39c:	07612823          	sw	s6,112(sp)
8000c3a0:	07712623          	sw	s7,108(sp)
8000c3a4:	07812423          	sw	s8,104(sp)
8000c3a8:	07912223          	sw	s9,100(sp)
8000c3ac:	07a12023          	sw	s10,96(sp)
8000c3b0:	00050493          	mv	s1,a0
8000c3b4:	00058413          	mv	s0,a1
8000c3b8:	00060913          	mv	s2,a2
8000c3bc:	00068a93          	mv	s5,a3
8000c3c0:	a90ff0ef          	jal	ra,8000b650 <eisnan>
8000c3c4:	04050463          	beqz	a0,8000c40c <ediv+0x90>
8000c3c8:	00090593          	mv	a1,s2
8000c3cc:	00048513          	mv	a0,s1
8000c3d0:	f9dfe0ef          	jal	ra,8000b36c <emov>
8000c3d4:	08c12083          	lw	ra,140(sp)
8000c3d8:	08812403          	lw	s0,136(sp)
8000c3dc:	08412483          	lw	s1,132(sp)
8000c3e0:	08012903          	lw	s2,128(sp)
8000c3e4:	07c12983          	lw	s3,124(sp)
8000c3e8:	07812a03          	lw	s4,120(sp)
8000c3ec:	07412a83          	lw	s5,116(sp)
8000c3f0:	07012b03          	lw	s6,112(sp)
8000c3f4:	06c12b83          	lw	s7,108(sp)
8000c3f8:	06812c03          	lw	s8,104(sp)
8000c3fc:	06412c83          	lw	s9,100(sp)
8000c400:	06012d03          	lw	s10,96(sp)
8000c404:	09010113          	addi	sp,sp,144
8000c408:	00008067          	ret
8000c40c:	00040513          	mv	a0,s0
8000c410:	a40ff0ef          	jal	ra,8000b650 <eisnan>
8000c414:	00050863          	beqz	a0,8000c424 <ediv+0xa8>
8000c418:	00090593          	mv	a1,s2
8000c41c:	00040513          	mv	a0,s0
8000c420:	fb1ff06f          	j	8000c3d0 <ediv+0x54>
8000c424:	800209b7          	lui	s3,0x80020
8000c428:	29498593          	addi	a1,s3,660 # 80020294 <__stack+0xfffe37c8>
8000c42c:	00048513          	mv	a0,s1
8000c430:	b5cff0ef          	jal	ra,8000b78c <ecmp>
8000c434:	1e050663          	beqz	a0,8000c620 <ediv+0x2a4>
8000c438:	00048513          	mv	a0,s1
8000c43c:	c58ff0ef          	jal	ra,8000b894 <eisinf>
8000c440:	00050993          	mv	s3,a0
8000c444:	00040513          	mv	a0,s0
8000c448:	c4cff0ef          	jal	ra,8000b894 <eisinf>
8000c44c:	1e099863          	bnez	s3,8000c63c <ediv+0x2c0>
8000c450:	1e051e63          	bnez	a0,8000c64c <ediv+0x2d0>
8000c454:	00048513          	mv	a0,s1
8000c458:	00c10593          	addi	a1,sp,12
8000c45c:	a60ff0ef          	jal	ra,8000b6bc <emovi>
8000c460:	00040513          	mv	a0,s0
8000c464:	02810593          	addi	a1,sp,40
8000c468:	a54ff0ef          	jal	ra,8000b6bc <emovi>
8000c46c:	02a15483          	lhu	s1,42(sp)
8000c470:	00e15403          	lhu	s0,14(sp)
8000c474:	02049463          	bnez	s1,8000c49c <ediv+0x120>
8000c478:	00000793          	li	a5,0
8000c47c:	01600713          	li	a4,22
8000c480:	02810693          	addi	a3,sp,40
8000c484:	00f686b3          	add	a3,a3,a5
8000c488:	0026d683          	lhu	a3,2(a3)
8000c48c:	1e068663          	beqz	a3,8000c678 <ediv+0x2fc>
8000c490:	02810513          	addi	a0,sp,40
8000c494:	db4ff0ef          	jal	ra,8000ba48 <enormlz>
8000c498:	40a004b3          	neg	s1,a0
8000c49c:	00e15783          	lhu	a5,14(sp)
8000c4a0:	00040b93          	mv	s7,s0
8000c4a4:	02079263          	bnez	a5,8000c4c8 <ediv+0x14c>
8000c4a8:	01600713          	li	a4,22
8000c4ac:	00c10693          	addi	a3,sp,12
8000c4b0:	00f686b3          	add	a3,a3,a5
8000c4b4:	0026d683          	lhu	a3,2(a3)
8000c4b8:	1c068663          	beqz	a3,8000c684 <ediv+0x308>
8000c4bc:	00c10513          	addi	a0,sp,12
8000c4c0:	d88ff0ef          	jal	ra,8000ba48 <enormlz>
8000c4c4:	40a40bb3          	sub	s7,s0,a0
8000c4c8:	02815783          	lhu	a5,40(sp)
8000c4cc:	02a15703          	lhu	a4,42(sp)
8000c4d0:	034a8993          	addi	s3,s5,52
8000c4d4:	02fa9a23          	sh	a5,52(s5)
8000c4d8:	038a8793          	addi	a5,s5,56
8000c4dc:	02ea9b23          	sh	a4,54(s5)
8000c4e0:	00078a13          	mv	s4,a5
8000c4e4:	04ea8713          	addi	a4,s5,78
8000c4e8:	00278793          	addi	a5,a5,2
8000c4ec:	fe079f23          	sh	zero,-2(a5)
8000c4f0:	fee79ce3          	bne	a5,a4,8000c4e8 <ediv+0x16c>
8000c4f4:	02810513          	addi	a0,sp,40
8000c4f8:	f05fe0ef          	jal	ra,8000b3fc <eshdn1>
8000c4fc:	01215c03          	lhu	s8,18(sp)
8000c500:	00010b37          	lui	s6,0x10
8000c504:	fffb0b13          	addi	s6,s6,-1 # ffff <_HEAP_SIZE+0xefff>
8000c508:	036c0d33          	mul	s10,s8,s6
8000c50c:	01a98c93          	addi	s9,s3,26
8000c510:	02c15783          	lhu	a5,44(sp)
8000c514:	02e15403          	lhu	s0,46(sp)
8000c518:	01079793          	slli	a5,a5,0x10
8000c51c:	008787b3          	add	a5,a5,s0
8000c520:	000b0413          	mv	s0,s6
8000c524:	00fd6863          	bltu	s10,a5,8000c534 <ediv+0x1b8>
8000c528:	0387d433          	divu	s0,a5,s8
8000c52c:	01041413          	slli	s0,s0,0x10
8000c530:	01045413          	srli	s0,s0,0x10
8000c534:	00c10593          	addi	a1,sp,12
8000c538:	00040513          	mv	a0,s0
8000c53c:	04410613          	addi	a2,sp,68
8000c540:	874ff0ef          	jal	ra,8000b5b4 <m16m>
8000c544:	02810593          	addi	a1,sp,40
8000c548:	04410513          	addi	a0,sp,68
8000c54c:	e75fe0ef          	jal	ra,8000b3c0 <ecmpm>
8000c550:	02a05663          	blez	a0,8000c57c <ediv+0x200>
8000c554:	04410593          	addi	a1,sp,68
8000c558:	00c10513          	addi	a0,sp,12
8000c55c:	820ff0ef          	jal	ra,8000b57c <esubm>
8000c560:	02810593          	addi	a1,sp,40
8000c564:	04410513          	addi	a0,sp,68
8000c568:	e59fe0ef          	jal	ra,8000b3c0 <ecmpm>
8000c56c:	12a04a63          	bgtz	a0,8000c6a0 <ediv+0x324>
8000c570:	fff40413          	addi	s0,s0,-1
8000c574:	01041413          	slli	s0,s0,0x10
8000c578:	01045413          	srli	s0,s0,0x10
8000c57c:	02810593          	addi	a1,sp,40
8000c580:	04410513          	addi	a0,sp,68
8000c584:	ff9fe0ef          	jal	ra,8000b57c <esubm>
8000c588:	02810513          	addi	a0,sp,40
8000c58c:	008a1023          	sh	s0,0(s4)
8000c590:	002a0a13          	addi	s4,s4,2
8000c594:	f69fe0ef          	jal	ra,8000b4fc <eshup6>
8000c598:	f79a1ce3          	bne	s4,s9,8000c510 <ediv+0x194>
8000c59c:	00000793          	li	a5,0
8000c5a0:	00000593          	li	a1,0
8000c5a4:	01600713          	li	a4,22
8000c5a8:	02810693          	addi	a3,sp,40
8000c5ac:	00f686b3          	add	a3,a3,a5
8000c5b0:	0046d683          	lhu	a3,4(a3)
8000c5b4:	00278793          	addi	a5,a5,2
8000c5b8:	00d5e5b3          	or	a1,a1,a3
8000c5bc:	fee796e3          	bne	a5,a4,8000c5a8 <ediv+0x22c>
8000c5c0:	00b035b3          	snez	a1,a1
8000c5c4:	02810793          	addi	a5,sp,40
8000c5c8:	0009d703          	lhu	a4,0(s3)
8000c5cc:	00298993          	addi	s3,s3,2
8000c5d0:	00278793          	addi	a5,a5,2
8000c5d4:	fee79f23          	sh	a4,-2(a5)
8000c5d8:	ff3a18e3          	bne	s4,s3,8000c5c8 <ediv+0x24c>
8000c5dc:	000046b7          	lui	a3,0x4
8000c5e0:	417484b3          	sub	s1,s1,s7
8000c5e4:	fff68693          	addi	a3,a3,-1 # 3fff <_HEAP_SIZE+0x2fff>
8000c5e8:	000a8793          	mv	a5,s5
8000c5ec:	04000713          	li	a4,64
8000c5f0:	00d486b3          	add	a3,s1,a3
8000c5f4:	00000613          	li	a2,0
8000c5f8:	02810513          	addi	a0,sp,40
8000c5fc:	ec4ff0ef          	jal	ra,8000bcc0 <emdnorm>
8000c600:	00c15703          	lhu	a4,12(sp)
8000c604:	02815783          	lhu	a5,40(sp)
8000c608:	0af71a63          	bne	a4,a5,8000c6bc <ediv+0x340>
8000c60c:	02011423          	sh	zero,40(sp)
8000c610:	00090593          	mv	a1,s2
8000c614:	02810513          	addi	a0,sp,40
8000c618:	d30ff0ef          	jal	ra,8000bb48 <emovo.isra.6>
8000c61c:	db9ff06f          	j	8000c3d4 <ediv+0x58>
8000c620:	29498593          	addi	a1,s3,660
8000c624:	00040513          	mv	a0,s0
8000c628:	964ff0ef          	jal	ra,8000b78c <ecmp>
8000c62c:	e00516e3          	bnez	a0,8000c438 <ediv+0xbc>
8000c630:	00090513          	mv	a0,s2
8000c634:	cecff0ef          	jal	ra,8000bb20 <enan.constprop.12>
8000c638:	d9dff06f          	j	8000c3d4 <ediv+0x58>
8000c63c:	fe051ae3          	bnez	a0,8000c630 <ediv+0x2b4>
8000c640:	00090513          	mv	a0,s2
8000c644:	d15fe0ef          	jal	ra,8000b358 <eclear>
8000c648:	d8dff06f          	j	8000c3d4 <ediv+0x58>
8000c64c:	00048513          	mv	a0,s1
8000c650:	834ff0ef          	jal	ra,8000b684 <eisneg>
8000c654:	00050493          	mv	s1,a0
8000c658:	00040513          	mv	a0,s0
8000c65c:	828ff0ef          	jal	ra,8000b684 <eisneg>
8000c660:	02a48c63          	beq	s1,a0,8000c698 <ediv+0x31c>
8000c664:	ffff87b7          	lui	a5,0xffff8
8000c668:	00f91923          	sh	a5,18(s2)
8000c66c:	00090513          	mv	a0,s2
8000c670:	a58ff0ef          	jal	ra,8000b8c8 <einfin.isra.2>
8000c674:	d61ff06f          	j	8000c3d4 <ediv+0x58>
8000c678:	00278793          	addi	a5,a5,2 # ffff8002 <__stack+0x7ffbb536>
8000c67c:	e0e792e3          	bne	a5,a4,8000c480 <ediv+0x104>
8000c680:	fc1ff06f          	j	8000c640 <ediv+0x2c4>
8000c684:	00278793          	addi	a5,a5,2
8000c688:	e2e792e3          	bne	a5,a4,8000c4ac <ediv+0x130>
8000c68c:	00c15703          	lhu	a4,12(sp)
8000c690:	02815783          	lhu	a5,40(sp)
8000c694:	fcf718e3          	bne	a4,a5,8000c664 <ediv+0x2e8>
8000c698:	00091923          	sh	zero,18(s2)
8000c69c:	fd1ff06f          	j	8000c66c <ediv+0x2f0>
8000c6a0:	ffe40413          	addi	s0,s0,-2
8000c6a4:	01041413          	slli	s0,s0,0x10
8000c6a8:	04410593          	addi	a1,sp,68
8000c6ac:	00c10513          	addi	a0,sp,12
8000c6b0:	01045413          	srli	s0,s0,0x10
8000c6b4:	ec9fe0ef          	jal	ra,8000b57c <esubm>
8000c6b8:	ec5ff06f          	j	8000c57c <ediv+0x200>
8000c6bc:	fff00793          	li	a5,-1
8000c6c0:	02f11423          	sh	a5,40(sp)
8000c6c4:	f4dff06f          	j	8000c610 <ediv+0x294>

8000c6c8 <_ldtoa_r>:
8000c6c8:	0005ae03          	lw	t3,0(a1)
8000c6cc:	0045a303          	lw	t1,4(a1)
8000c6d0:	0085a883          	lw	a7,8(a1)
8000c6d4:	00c5a583          	lw	a1,12(a1)
8000c6d8:	e2010113          	addi	sp,sp,-480
8000c6dc:	1c812c23          	sw	s0,472(sp)
8000c6e0:	02b12623          	sw	a1,44(sp)
8000c6e4:	00078413          	mv	s0,a5
8000c6e8:	04052583          	lw	a1,64(a0)
8000c6ec:	fff00793          	li	a5,-1
8000c6f0:	14f12823          	sw	a5,336(sp)
8000c6f4:	09000793          	li	a5,144
8000c6f8:	1d412423          	sw	s4,456(sp)
8000c6fc:	1d512223          	sw	s5,452(sp)
8000c700:	1b712e23          	sw	s7,444(sp)
8000c704:	1b912a23          	sw	s9,436(sp)
8000c708:	1c112e23          	sw	ra,476(sp)
8000c70c:	1c912a23          	sw	s1,468(sp)
8000c710:	1d212823          	sw	s2,464(sp)
8000c714:	1d312623          	sw	s3,460(sp)
8000c718:	1d612023          	sw	s6,448(sp)
8000c71c:	1b812c23          	sw	s8,440(sp)
8000c720:	1ba12823          	sw	s10,432(sp)
8000c724:	1bb12623          	sw	s11,428(sp)
8000c728:	01012623          	sw	a6,12(sp)
8000c72c:	03c12023          	sw	t3,32(sp)
8000c730:	02612223          	sw	t1,36(sp)
8000c734:	03112423          	sw	a7,40(sp)
8000c738:	14f12a23          	sw	a5,340(sp)
8000c73c:	00050a13          	mv	s4,a0
8000c740:	00060b93          	mv	s7,a2
8000c744:	00068a93          	mv	s5,a3
8000c748:	00070c93          	mv	s9,a4
8000c74c:	02058063          	beqz	a1,8000c76c <_ldtoa_r+0xa4>
8000c750:	04452783          	lw	a5,68(a0)
8000c754:	00100713          	li	a4,1
8000c758:	00f71733          	sll	a4,a4,a5
8000c75c:	00f5a223          	sw	a5,4(a1)
8000c760:	00e5a423          	sw	a4,8(a1)
8000c764:	660010ef          	jal	ra,8000ddc4 <_Bfree>
8000c768:	040a2023          	sw	zero,64(s4)
8000c76c:	02010513          	addi	a0,sp,32
8000c770:	05010593          	addi	a1,sp,80
8000c774:	c44ff0ef          	jal	ra,8000bbb8 <e113toe.isra.8>
8000c778:	05010513          	addi	a0,sp,80
8000c77c:	f09fe0ef          	jal	ra,8000b684 <eisneg>
8000c780:	0e050063          	beqz	a0,8000c860 <_ldtoa_r+0x198>
8000c784:	00100793          	li	a5,1
8000c788:	00f42023          	sw	a5,0(s0)
8000c78c:	00300793          	li	a5,3
8000c790:	0cfb8c63          	beq	s7,a5,8000c868 <_ldtoa_r+0x1a0>
8000c794:	01400913          	li	s2,20
8000c798:	000b8a63          	beqz	s7,8000c7ac <_ldtoa_r+0xe4>
8000c79c:	fffa8913          	addi	s2,s5,-1
8000c7a0:	02a00793          	li	a5,42
8000c7a4:	0127d463          	ble	s2,a5,8000c7ac <_ldtoa_r+0xe4>
8000c7a8:	02a00913          	li	s2,42
8000c7ac:	15412783          	lw	a5,340(sp)
8000c7b0:	05010513          	addi	a0,sp,80
8000c7b4:	00f12823          	sw	a5,16(sp)
8000c7b8:	e99fe0ef          	jal	ra,8000b650 <eisnan>
8000c7bc:	00050413          	mv	s0,a0
8000c7c0:	0a050863          	beqz	a0,8000c870 <_ldtoa_r+0x1a8>
8000c7c4:	800215b7          	lui	a1,0x80021
8000c7c8:	da858593          	addi	a1,a1,-600 # 80020da8 <__stack+0xfffe42dc>
8000c7cc:	11410513          	addi	a0,sp,276
8000c7d0:	00002437          	lui	s0,0x2
8000c7d4:	538020ef          	jal	ra,8000ed0c <sprintf>
8000c7d8:	70f40413          	addi	s0,s0,1807 # 270f <_HEAP_SIZE+0x170f>
8000c7dc:	01012783          	lw	a5,16(sp)
8000c7e0:	05010513          	addi	a0,sp,80
8000c7e4:	16812023          	sw	s0,352(sp)
8000c7e8:	14f12a23          	sw	a5,340(sp)
8000c7ec:	8a8ff0ef          	jal	ra,8000b894 <eisinf>
8000c7f0:	11410993          	addi	s3,sp,276
8000c7f4:	00051863          	bnez	a0,8000c804 <_ldtoa_r+0x13c>
8000c7f8:	05010513          	addi	a0,sp,80
8000c7fc:	e55fe0ef          	jal	ra,8000b650 <eisnan>
8000c800:	180506e3          	beqz	a0,8000d18c <_ldtoa_r+0xac4>
8000c804:	000027b7          	lui	a5,0x2
8000c808:	70f78793          	addi	a5,a5,1807 # 270f <_HEAP_SIZE+0x170f>
8000c80c:	00fca023          	sw	a5,0(s9)
8000c810:	00098793          	mv	a5,s3
8000c814:	02000613          	li	a2,32
8000c818:	02d00693          	li	a3,45
8000c81c:	0007c703          	lbu	a4,0(a5)
8000c820:	1cc704e3          	beq	a4,a2,8000d1e8 <_ldtoa_r+0xb20>
8000c824:	1cd702e3          	beq	a4,a3,8000d1e8 <_ldtoa_r+0xb20>
8000c828:	00098413          	mv	s0,s3
8000c82c:	00178793          	addi	a5,a5,1
8000c830:	fff7c703          	lbu	a4,-1(a5)
8000c834:	00140693          	addi	a3,s0,1
8000c838:	fee68fa3          	sb	a4,-1(a3)
8000c83c:	1a071ae3          	bnez	a4,8000d1f0 <_ldtoa_r+0xb28>
8000c840:	00200713          	li	a4,2
8000c844:	00100793          	li	a5,1
8000c848:	00eb8863          	beq	s7,a4,8000c858 <_ldtoa_r+0x190>
8000c84c:	16012783          	lw	a5,352(sp)
8000c850:	0127d463          	ble	s2,a5,8000c858 <_ldtoa_r+0x190>
8000c854:	00090793          	mv	a5,s2
8000c858:	03000693          	li	a3,48
8000c85c:	1a50006f          	j	8000d200 <_ldtoa_r+0xb38>
8000c860:	00042023          	sw	zero,0(s0)
8000c864:	f29ff06f          	j	8000c78c <_ldtoa_r+0xc4>
8000c868:	000a8913          	mv	s2,s5
8000c86c:	f35ff06f          	j	8000c7a0 <_ldtoa_r+0xd8>
8000c870:	09000793          	li	a5,144
8000c874:	06c10593          	addi	a1,sp,108
8000c878:	05010513          	addi	a0,sp,80
8000c87c:	14f12a23          	sw	a5,340(sp)
8000c880:	aedfe0ef          	jal	ra,8000b36c <emov>
8000c884:	07e15783          	lhu	a5,126(sp)
8000c888:	00012223          	sw	zero,4(sp)
8000c88c:	01079713          	slli	a4,a5,0x10
8000c890:	41075713          	srai	a4,a4,0x10
8000c894:	02075063          	bgez	a4,8000c8b4 <_ldtoa_r+0x1ec>
8000c898:	00008737          	lui	a4,0x8
8000c89c:	fff70713          	addi	a4,a4,-1 # 7fff <_HEAP_SIZE+0x6fff>
8000c8a0:	00e7f7b3          	and	a5,a5,a4
8000c8a4:	06f11f23          	sh	a5,126(sp)
8000c8a8:	000107b7          	lui	a5,0x10
8000c8ac:	fff78793          	addi	a5,a5,-1 # ffff <_HEAP_SIZE+0xefff>
8000c8b0:	00f12223          	sw	a5,4(sp)
8000c8b4:	80020b37          	lui	s6,0x80020
8000c8b8:	294b0513          	addi	a0,s6,660 # 80020294 <__stack+0xfffe37c8>
8000c8bc:	08810593          	addi	a1,sp,136
8000c8c0:	01450513          	addi	a0,a0,20
8000c8c4:	aa9fe0ef          	jal	ra,8000b36c <emov>
8000c8c8:	07e15703          	lhu	a4,126(sp)
8000c8cc:	800204b7          	lui	s1,0x80020
8000c8d0:	294b0993          	addi	s3,s6,660
8000c8d4:	2a848493          	addi	s1,s1,680 # 800202a8 <__stack+0xfffe37dc>
8000c8d8:	1e071ce3          	bnez	a4,8000d2d0 <_ldtoa_r+0xc08>
8000c8dc:	06c10713          	addi	a4,sp,108
8000c8e0:	00000793          	li	a5,0
8000c8e4:	00900693          	li	a3,9
8000c8e8:	00075603          	lhu	a2,0(a4)
8000c8ec:	10061063          	bnez	a2,8000c9ec <_ldtoa_r+0x324>
8000c8f0:	00178793          	addi	a5,a5,1
8000c8f4:	00270713          	addi	a4,a4,2
8000c8f8:	fed798e3          	bne	a5,a3,8000c8e8 <_ldtoa_r+0x220>
8000c8fc:	0c010593          	addi	a1,sp,192
8000c900:	08810513          	addi	a0,sp,136
8000c904:	db9fe0ef          	jal	ra,8000b6bc <emovi>
8000c908:	08810593          	addi	a1,sp,136
8000c90c:	0c010513          	addi	a0,sp,192
8000c910:	a8dfe0ef          	jal	ra,8000b39c <emovz>
8000c914:	0c010593          	addi	a1,sp,192
8000c918:	06c10513          	addi	a0,sp,108
8000c91c:	da1fe0ef          	jal	ra,8000b6bc <emovi>
8000c920:	06c10593          	addi	a1,sp,108
8000c924:	0c010513          	addi	a0,sp,192
8000c928:	a75fe0ef          	jal	ra,8000b39c <emovz>
8000c92c:	15010613          	addi	a2,sp,336
8000c930:	06c10593          	addi	a1,sp,108
8000c934:	08810513          	addi	a0,sp,136
8000c938:	eb0ff0ef          	jal	ra,8000bfe8 <eiremain>
8000c93c:	19c15483          	lhu	s1,412(sp)
8000c940:	00049a63          	bnez	s1,8000c954 <_ldtoa_r+0x28c>
8000c944:	294b0593          	addi	a1,s6,660
8000c948:	06c10513          	addi	a0,sp,108
8000c94c:	e41fe0ef          	jal	ra,8000b78c <ecmp>
8000c950:	6a051463          	bnez	a0,8000cff8 <_ldtoa_r+0x930>
8000c954:	00412783          	lw	a5,4(sp)
8000c958:	6e078663          	beqz	a5,8000d044 <_ldtoa_r+0x97c>
8000c95c:	02d00793          	li	a5,45
8000c960:	10f10a23          	sb	a5,276(sp)
8000c964:	00300793          	li	a5,3
8000c968:	00090993          	mv	s3,s2
8000c96c:	00fb9863          	bne	s7,a5,8000c97c <_ldtoa_r+0x2b4>
8000c970:	008909b3          	add	s3,s2,s0
8000c974:	02a00793          	li	a5,42
8000c978:	1737cce3          	blt	a5,s3,8000d2f0 <_ldtoa_r+0xc28>
8000c97c:	00a00793          	li	a5,10
8000c980:	6cf49663          	bne	s1,a5,8000d04c <_ldtoa_r+0x984>
8000c984:	03100793          	li	a5,49
8000c988:	10f10aa3          	sb	a5,277(sp)
8000c98c:	02e00793          	li	a5,46
8000c990:	10f10b23          	sb	a5,278(sp)
8000c994:	11710c13          	addi	s8,sp,279
8000c998:	01305a63          	blez	s3,8000c9ac <_ldtoa_r+0x2e4>
8000c99c:	03000793          	li	a5,48
8000c9a0:	10f10ba3          	sb	a5,279(sp)
8000c9a4:	fff98993          	addi	s3,s3,-1
8000c9a8:	11810c13          	addi	s8,sp,280
8000c9ac:	00140413          	addi	s0,s0,1
8000c9b0:	6a09d863          	bgez	s3,8000d060 <_ldtoa_r+0x998>
8000c9b4:	800215b7          	lui	a1,0x80021
8000c9b8:	00040613          	mv	a2,s0
8000c9bc:	dcc58593          	addi	a1,a1,-564 # 80020dcc <__stack+0xfffe4300>
8000c9c0:	000c0513          	mv	a0,s8
8000c9c4:	348020ef          	jal	ra,8000ed0c <sprintf>
8000c9c8:	e15ff06f          	j	8000c7dc <_ldtoa_r+0x114>
8000c9cc:	800215b7          	lui	a1,0x80021
8000c9d0:	dbc58593          	addi	a1,a1,-580 # 80020dbc <__stack+0xfffe42f0>
8000c9d4:	df9ff06f          	j	8000c7cc <_ldtoa_r+0x104>
8000c9d8:	07c11783          	lh	a5,124(sp)
8000c9dc:	0007c863          	bltz	a5,8000c9ec <_ldtoa_r+0x324>
8000c9e0:	800215b7          	lui	a1,0x80021
8000c9e4:	dc858593          	addi	a1,a1,-568 # 80020dc8 <__stack+0xfffe42fc>
8000c9e8:	de5ff06f          	j	8000c7cc <_ldtoa_r+0x104>
8000c9ec:	06c10593          	addi	a1,sp,108
8000c9f0:	00048513          	mv	a0,s1
8000c9f4:	d99fe0ef          	jal	ra,8000b78c <ecmp>
8000c9f8:	f00502e3          	beqz	a0,8000c8fc <_ldtoa_r+0x234>
8000c9fc:	46055663          	bgez	a0,8000ce68 <_ldtoa_r+0x7a0>
8000ca00:	0a410593          	addi	a1,sp,164
8000ca04:	06c10513          	addi	a0,sp,108
8000ca08:	965fe0ef          	jal	ra,8000b36c <emov>
8000ca0c:	000047b7          	lui	a5,0x4
8000ca10:	08e78793          	addi	a5,a5,142 # 408e <_HEAP_SIZE+0x308e>
8000ca14:	0af11b23          	sh	a5,182(sp)
8000ca18:	01000793          	li	a5,16
8000ca1c:	00f12423          	sw	a5,8(sp)
8000ca20:	000087b7          	lui	a5,0x8
8000ca24:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
8000ca28:	00f12a23          	sw	a5,20(sp)
8000ca2c:	ffffc7b7          	lui	a5,0xffffc
8000ca30:	00278793          	addi	a5,a5,2 # ffffc002 <__stack+0x7ffbf536>
8000ca34:	00000d13          	li	s10,0
8000ca38:	00f12c23          	sw	a5,24(sp)
8000ca3c:	800207b7          	lui	a5,0x80020
8000ca40:	35c78793          	addi	a5,a5,860 # 8002035c <__stack+0xfffe3890>
8000ca44:	01a78533          	add	a0,a5,s10
8000ca48:	15010693          	addi	a3,sp,336
8000ca4c:	08810613          	addi	a2,sp,136
8000ca50:	0a410593          	addi	a1,sp,164
8000ca54:	929ff0ef          	jal	ra,8000c37c <ediv>
8000ca58:	03c10593          	addi	a1,sp,60
8000ca5c:	08810513          	addi	a0,sp,136
8000ca60:	90dfe0ef          	jal	ra,8000b36c <emov>
8000ca64:	01412783          	lw	a5,20(sp)
8000ca68:	04e15c03          	lhu	s8,78(sp)
8000ca6c:	00fc7733          	and	a4,s8,a5
8000ca70:	01812783          	lw	a5,24(sp)
8000ca74:	00f70733          	add	a4,a4,a5
8000ca78:	04e04a63          	bgtz	a4,8000cacc <_ldtoa_r+0x404>
8000ca7c:	0c010513          	addi	a0,sp,192
8000ca80:	8d9fe0ef          	jal	ra,8000b358 <eclear>
8000ca84:	010c1c13          	slli	s8,s8,0x10
8000ca88:	410c5c13          	srai	s8,s8,0x10
8000ca8c:	100c5463          	bgez	s8,8000cb94 <_ldtoa_r+0x4cc>
8000ca90:	00000793          	li	a5,0
8000ca94:	03c10713          	addi	a4,sp,60
8000ca98:	00f70733          	add	a4,a4,a5
8000ca9c:	00075683          	lhu	a3,0(a4)
8000caa0:	0c010713          	addi	a4,sp,192
8000caa4:	00f70733          	add	a4,a4,a5
8000caa8:	00075703          	lhu	a4,0(a4)
8000caac:	3ae68663          	beq	a3,a4,8000ce58 <_ldtoa_r+0x790>
8000cab0:	00048513          	mv	a0,s1
8000cab4:	b9dfe0ef          	jal	ra,8000b650 <eisnan>
8000cab8:	08050263          	beqz	a0,8000cb3c <_ldtoa_r+0x474>
8000cabc:	0c010593          	addi	a1,sp,192
8000cac0:	00048513          	mv	a0,s1
8000cac4:	8a9fe0ef          	jal	ra,8000b36c <emov>
8000cac8:	0cc0006f          	j	8000cb94 <_ldtoa_r+0x4cc>
8000cacc:	09000793          	li	a5,144
8000cad0:	40e78db3          	sub	s11,a5,a4
8000cad4:	0c010593          	addi	a1,sp,192
8000cad8:	03c10513          	addi	a0,sp,60
8000cadc:	891fe0ef          	jal	ra,8000b36c <emov>
8000cae0:	0bb05a63          	blez	s11,8000cb94 <_ldtoa_r+0x4cc>
8000cae4:	0c010693          	addi	a3,sp,192
8000cae8:	000d8793          	mv	a5,s11
8000caec:	00f00613          	li	a2,15
8000caf0:	02f64e63          	blt	a2,a5,8000cb2c <_ldtoa_r+0x464>
8000caf4:	004dd793          	srli	a5,s11,0x4
8000caf8:	ff000613          	li	a2,-16
8000cafc:	00179693          	slli	a3,a5,0x1
8000cb00:	02c787b3          	mul	a5,a5,a2
8000cb04:	0c010713          	addi	a4,sp,192
8000cb08:	00d706b3          	add	a3,a4,a3
8000cb0c:	0006d703          	lhu	a4,0(a3)
8000cb10:	01b787b3          	add	a5,a5,s11
8000cb14:	00179793          	slli	a5,a5,0x1
8000cb18:	00f987b3          	add	a5,s3,a5
8000cb1c:	12c7d783          	lhu	a5,300(a5)
8000cb20:	00e7f7b3          	and	a5,a5,a4
8000cb24:	00f69023          	sh	a5,0(a3)
8000cb28:	f5dff06f          	j	8000ca84 <_ldtoa_r+0x3bc>
8000cb2c:	00069023          	sh	zero,0(a3)
8000cb30:	ff078793          	addi	a5,a5,-16
8000cb34:	00268693          	addi	a3,a3,2
8000cb38:	fb9ff06f          	j	8000caf0 <_ldtoa_r+0x428>
8000cb3c:	0c010513          	addi	a0,sp,192
8000cb40:	b11fe0ef          	jal	ra,8000b650 <eisnan>
8000cb44:	00050863          	beqz	a0,8000cb54 <_ldtoa_r+0x48c>
8000cb48:	0c010593          	addi	a1,sp,192
8000cb4c:	00058513          	mv	a0,a1
8000cb50:	f75ff06f          	j	8000cac4 <_ldtoa_r+0x3fc>
8000cb54:	00048513          	mv	a0,s1
8000cb58:	d3dfe0ef          	jal	ra,8000b894 <eisinf>
8000cb5c:	00050d93          	mv	s11,a0
8000cb60:	0c010513          	addi	a0,sp,192
8000cb64:	d31fe0ef          	jal	ra,8000b894 <eisinf>
8000cb68:	00050c13          	mv	s8,a0
8000cb6c:	140d8c63          	beqz	s11,8000ccc4 <_ldtoa_r+0x5fc>
8000cb70:	12050463          	beqz	a0,8000cc98 <_ldtoa_r+0x5d0>
8000cb74:	00048513          	mv	a0,s1
8000cb78:	b0dfe0ef          	jal	ra,8000b684 <eisneg>
8000cb7c:	00050c13          	mv	s8,a0
8000cb80:	0c010513          	addi	a0,sp,192
8000cb84:	b01fe0ef          	jal	ra,8000b684 <eisneg>
8000cb88:	10ac1863          	bne	s8,a0,8000cc98 <_ldtoa_r+0x5d0>
8000cb8c:	0c010513          	addi	a0,sp,192
8000cb90:	f91fe0ef          	jal	ra,8000bb20 <enan.constprop.12>
8000cb94:	00000793          	li	a5,0
8000cb98:	08810713          	addi	a4,sp,136
8000cb9c:	00f70733          	add	a4,a4,a5
8000cba0:	00075683          	lhu	a3,0(a4)
8000cba4:	0c010713          	addi	a4,sp,192
8000cba8:	00f70733          	add	a4,a4,a5
8000cbac:	00075703          	lhu	a4,0(a4)
8000cbb0:	02e69263          	bne	a3,a4,8000cbd4 <_ldtoa_r+0x50c>
8000cbb4:	00278793          	addi	a5,a5,2
8000cbb8:	01200713          	li	a4,18
8000cbbc:	fce79ee3          	bne	a5,a4,8000cb98 <_ldtoa_r+0x4d0>
8000cbc0:	0a410593          	addi	a1,sp,164
8000cbc4:	08810513          	addi	a0,sp,136
8000cbc8:	fa4fe0ef          	jal	ra,8000b36c <emov>
8000cbcc:	00812783          	lw	a5,8(sp)
8000cbd0:	00f40433          	add	s0,s0,a5
8000cbd4:	00812783          	lw	a5,8(sp)
8000cbd8:	014d0d13          	addi	s10,s10,20
8000cbdc:	0017d793          	srli	a5,a5,0x1
8000cbe0:	00f12423          	sw	a5,8(sp)
8000cbe4:	06400793          	li	a5,100
8000cbe8:	e4fd1ae3          	bne	s10,a5,8000ca3c <_ldtoa_r+0x374>
8000cbec:	0b615783          	lhu	a5,182(sp)
8000cbf0:	07e15703          	lhu	a4,126(sp)
8000cbf4:	06c10593          	addi	a1,sp,108
8000cbf8:	0a410513          	addi	a0,sp,164
8000cbfc:	00e787b3          	add	a5,a5,a4
8000cc00:	ffffc737          	lui	a4,0xffffc
8000cc04:	f7270713          	addi	a4,a4,-142 # ffffbf72 <__stack+0x7ffbf4a6>
8000cc08:	00e787b3          	add	a5,a5,a4
8000cc0c:	0af11b23          	sh	a5,182(sp)
8000cc10:	f5cfe0ef          	jal	ra,8000b36c <emov>
8000cc14:	00048513          	mv	a0,s1
8000cc18:	08810593          	addi	a1,sp,136
8000cc1c:	f50fe0ef          	jal	ra,8000b36c <emov>
8000cc20:	00000493          	li	s1,0
8000cc24:	00001d37          	lui	s10,0x1
8000cc28:	11898993          	addi	s3,s3,280
8000cc2c:	10400d93          	li	s11,260
8000cc30:	800207b7          	lui	a5,0x80020
8000cc34:	2bc78793          	addi	a5,a5,700 # 800202bc <__stack+0xfffe37f0>
8000cc38:	0a410593          	addi	a1,sp,164
8000cc3c:	00098513          	mv	a0,s3
8000cc40:	00978c33          	add	s8,a5,s1
8000cc44:	b49fe0ef          	jal	ra,8000b78c <ecmp>
8000cc48:	caa04ae3          	bgtz	a0,8000c8fc <_ldtoa_r+0x234>
8000cc4c:	0a410593          	addi	a1,sp,164
8000cc50:	000c0513          	mv	a0,s8
8000cc54:	b39fe0ef          	jal	ra,8000b78c <ecmp>
8000cc58:	02a04863          	bgtz	a0,8000cc88 <_ldtoa_r+0x5c0>
8000cc5c:	0a410613          	addi	a2,sp,164
8000cc60:	00060593          	mv	a1,a2
8000cc64:	15010693          	addi	a3,sp,336
8000cc68:	000c0513          	mv	a0,s8
8000cc6c:	f10ff0ef          	jal	ra,8000c37c <ediv>
8000cc70:	08810613          	addi	a2,sp,136
8000cc74:	15010693          	addi	a3,sp,336
8000cc78:	00060593          	mv	a1,a2
8000cc7c:	000c0513          	mv	a0,s8
8000cc80:	c4cff0ef          	jal	ra,8000c0cc <emul>
8000cc84:	01a40433          	add	s0,s0,s10
8000cc88:	01448493          	addi	s1,s1,20
8000cc8c:	001d5d13          	srli	s10,s10,0x1
8000cc90:	fbb490e3          	bne	s1,s11,8000cc30 <_ldtoa_r+0x568>
8000cc94:	c69ff06f          	j	8000c8fc <_ldtoa_r+0x234>
8000cc98:	00048513          	mv	a0,s1
8000cc9c:	0c010593          	addi	a1,sp,192
8000cca0:	eccfe0ef          	jal	ra,8000b36c <emov>
8000cca4:	0c010513          	addi	a0,sp,192
8000cca8:	9a9fe0ef          	jal	ra,8000b650 <eisnan>
8000ccac:	ee0514e3          	bnez	a0,8000cb94 <_ldtoa_r+0x4cc>
8000ccb0:	0d215783          	lhu	a5,210(sp)
8000ccb4:	ffff8737          	lui	a4,0xffff8
8000ccb8:	00e7c7b3          	xor	a5,a5,a4
8000ccbc:	0cf11923          	sh	a5,210(sp)
8000ccc0:	ed5ff06f          	j	8000cb94 <_ldtoa_r+0x4cc>
8000ccc4:	e80512e3          	bnez	a0,8000cb48 <_ldtoa_r+0x480>
8000ccc8:	0dc10593          	addi	a1,sp,220
8000cccc:	00048513          	mv	a0,s1
8000ccd0:	9edfe0ef          	jal	ra,8000b6bc <emovi>
8000ccd4:	0f810593          	addi	a1,sp,248
8000ccd8:	0c010513          	addi	a0,sp,192
8000ccdc:	9e1fe0ef          	jal	ra,8000b6bc <emovi>
8000cce0:	0dc15703          	lhu	a4,220(sp)
8000cce4:	0fa15d83          	lhu	s11,250(sp)
8000cce8:	0de15783          	lhu	a5,222(sp)
8000ccec:	fff74713          	not	a4,a4
8000ccf0:	01071713          	slli	a4,a4,0x10
8000ccf4:	01075713          	srli	a4,a4,0x10
8000ccf8:	0ce11e23          	sh	a4,220(sp)
8000ccfc:	41b787b3          	sub	a5,a5,s11
8000cd00:	08f05863          	blez	a5,8000cd90 <_ldtoa_r+0x6c8>
8000cd04:	11410593          	addi	a1,sp,276
8000cd08:	0f810513          	addi	a0,sp,248
8000cd0c:	00f12e23          	sw	a5,28(sp)
8000cd10:	e8cfe0ef          	jal	ra,8000b39c <emovz>
8000cd14:	0f810593          	addi	a1,sp,248
8000cd18:	0dc10513          	addi	a0,sp,220
8000cd1c:	e80fe0ef          	jal	ra,8000b39c <emovz>
8000cd20:	0dc10593          	addi	a1,sp,220
8000cd24:	11410513          	addi	a0,sp,276
8000cd28:	e74fe0ef          	jal	ra,8000b39c <emovz>
8000cd2c:	01c12783          	lw	a5,28(sp)
8000cd30:	0fa15d83          	lhu	s11,250(sp)
8000cd34:	40f007b3          	neg	a5,a5
8000cd38:	f6f00713          	li	a4,-145
8000cd3c:	08e7ce63          	blt	a5,a4,8000cdd8 <_ldtoa_r+0x710>
8000cd40:	00078593          	mv	a1,a5
8000cd44:	0dc10513          	addi	a0,sp,220
8000cd48:	ba9fe0ef          	jal	ra,8000b8f0 <eshift.part.3>
8000cd4c:	00050813          	mv	a6,a0
8000cd50:	0dc15703          	lhu	a4,220(sp)
8000cd54:	0f815783          	lhu	a5,248(sp)
8000cd58:	01012e23          	sw	a6,28(sp)
8000cd5c:	0f810593          	addi	a1,sp,248
8000cd60:	0dc10513          	addi	a0,sp,220
8000cd64:	0ef71463          	bne	a4,a5,8000ce4c <_ldtoa_r+0x784>
8000cd68:	fdcfe0ef          	jal	ra,8000b544 <eaddm>
8000cd6c:	01c12803          	lw	a6,28(sp)
8000cd70:	15010793          	addi	a5,sp,336
8000cd74:	04000713          	li	a4,64
8000cd78:	000d8693          	mv	a3,s11
8000cd7c:	000c0613          	mv	a2,s8
8000cd80:	00080593          	mv	a1,a6
8000cd84:	0f810513          	addi	a0,sp,248
8000cd88:	f39fe0ef          	jal	ra,8000bcc0 <emdnorm>
8000cd8c:	04c0006f          	j	8000cdd8 <_ldtoa_r+0x710>
8000cd90:	fa0794e3          	bnez	a5,8000cd38 <_ldtoa_r+0x670>
8000cd94:	0f810593          	addi	a1,sp,248
8000cd98:	0dc10513          	addi	a0,sp,220
8000cd9c:	00e12e23          	sw	a4,28(sp)
8000cda0:	e20fe0ef          	jal	ra,8000b3c0 <ecmpm>
8000cda4:	06051a63          	bnez	a0,8000ce18 <_ldtoa_r+0x750>
8000cda8:	0f815783          	lhu	a5,248(sp)
8000cdac:	01c12703          	lw	a4,28(sp)
8000cdb0:	00e78863          	beq	a5,a4,8000cdc0 <_ldtoa_r+0x6f8>
8000cdb4:	0c010513          	addi	a0,sp,192
8000cdb8:	da0fe0ef          	jal	ra,8000b358 <eclear>
8000cdbc:	dd9ff06f          	j	8000cb94 <_ldtoa_r+0x4cc>
8000cdc0:	020d9463          	bnez	s11,8000cde8 <_ldtoa_r+0x720>
8000cdc4:	0fe11703          	lh	a4,254(sp)
8000cdc8:	00000793          	li	a5,0
8000cdcc:	02074063          	bltz	a4,8000cdec <_ldtoa_r+0x724>
8000cdd0:	0f810513          	addi	a0,sp,248
8000cdd4:	e78fe0ef          	jal	ra,8000b44c <eshup1>
8000cdd8:	0c010593          	addi	a1,sp,192
8000cddc:	0f810513          	addi	a0,sp,248
8000cde0:	d69fe0ef          	jal	ra,8000bb48 <emovo.isra.6>
8000cde4:	db1ff06f          	j	8000cb94 <_ldtoa_r+0x4cc>
8000cde8:	00000793          	li	a5,0
8000cdec:	01600713          	li	a4,22
8000cdf0:	0f810693          	addi	a3,sp,248
8000cdf4:	00f68633          	add	a2,a3,a5
8000cdf8:	00265603          	lhu	a2,2(a2)
8000cdfc:	00060863          	beqz	a2,8000ce0c <_ldtoa_r+0x744>
8000ce00:	001d8d93          	addi	s11,s11,1
8000ce04:	0fb11d23          	sh	s11,250(sp)
8000ce08:	fd1ff06f          	j	8000cdd8 <_ldtoa_r+0x710>
8000ce0c:	00278793          	addi	a5,a5,2
8000ce10:	fee790e3          	bne	a5,a4,8000cdf0 <_ldtoa_r+0x728>
8000ce14:	ff1ff06f          	j	8000ce04 <_ldtoa_r+0x73c>
8000ce18:	00000813          	li	a6,0
8000ce1c:	f2a05ae3          	blez	a0,8000cd50 <_ldtoa_r+0x688>
8000ce20:	11410593          	addi	a1,sp,276
8000ce24:	0f810513          	addi	a0,sp,248
8000ce28:	d74fe0ef          	jal	ra,8000b39c <emovz>
8000ce2c:	0f810593          	addi	a1,sp,248
8000ce30:	0dc10513          	addi	a0,sp,220
8000ce34:	d68fe0ef          	jal	ra,8000b39c <emovz>
8000ce38:	0dc10593          	addi	a1,sp,220
8000ce3c:	11410513          	addi	a0,sp,276
8000ce40:	d5cfe0ef          	jal	ra,8000b39c <emovz>
8000ce44:	000c0813          	mv	a6,s8
8000ce48:	f09ff06f          	j	8000cd50 <_ldtoa_r+0x688>
8000ce4c:	f30fe0ef          	jal	ra,8000b57c <esubm>
8000ce50:	00100c13          	li	s8,1
8000ce54:	f19ff06f          	j	8000cd6c <_ldtoa_r+0x6a4>
8000ce58:	00278793          	addi	a5,a5,2
8000ce5c:	01200713          	li	a4,18
8000ce60:	c2e79ae3          	bne	a5,a4,8000ca94 <_ldtoa_r+0x3cc>
8000ce64:	d31ff06f          	j	8000cb94 <_ldtoa_r+0x4cc>
8000ce68:	07e15783          	lhu	a5,126(sp)
8000ce6c:	11898c13          	addi	s8,s3,280
8000ce70:	0a078863          	beqz	a5,8000cf20 <_ldtoa_r+0x858>
8000ce74:	0c010593          	addi	a1,sp,192
8000ce78:	06c10513          	addi	a0,sp,108
8000ce7c:	00004c37          	lui	s8,0x4
8000ce80:	83dfe0ef          	jal	ra,8000b6bc <emovi>
8000ce84:	ffec0c13          	addi	s8,s8,-2 # 3ffe <_HEAP_SIZE+0x2ffe>
8000ce88:	fd500d13          	li	s10,-43
8000ce8c:	0d815783          	lhu	a5,216(sp)
8000ce90:	0077f793          	andi	a5,a5,7
8000ce94:	06079263          	bnez	a5,8000cef8 <_ldtoa_r+0x830>
8000ce98:	0a410593          	addi	a1,sp,164
8000ce9c:	0c010513          	addi	a0,sp,192
8000cea0:	cfcfe0ef          	jal	ra,8000b39c <emovz>
8000cea4:	0a410513          	addi	a0,sp,164
8000cea8:	d54fe0ef          	jal	ra,8000b3fc <eshdn1>
8000ceac:	0a410513          	addi	a0,sp,164
8000ceb0:	d4cfe0ef          	jal	ra,8000b3fc <eshdn1>
8000ceb4:	0a410593          	addi	a1,sp,164
8000ceb8:	0c010513          	addi	a0,sp,192
8000cebc:	e88fe0ef          	jal	ra,8000b544 <eaddm>
8000cec0:	0a615783          	lhu	a5,166(sp)
8000cec4:	00378793          	addi	a5,a5,3
8000cec8:	0af11323          	sh	a5,166(sp)
8000cecc:	0a815783          	lhu	a5,168(sp)
8000ced0:	10079a63          	bnez	a5,8000cfe4 <_ldtoa_r+0x91c>
8000ced4:	0bc15783          	lhu	a5,188(sp)
8000ced8:	02079063          	bnez	a5,8000cef8 <_ldtoa_r+0x830>
8000cedc:	0a615783          	lhu	a5,166(sp)
8000cee0:	00fc6c63          	bltu	s8,a5,8000cef8 <_ldtoa_r+0x830>
8000cee4:	0c010593          	addi	a1,sp,192
8000cee8:	0a410513          	addi	a0,sp,164
8000ceec:	fff40413          	addi	s0,s0,-1
8000cef0:	cacfe0ef          	jal	ra,8000b39c <emovz>
8000cef4:	f9a41ce3          	bne	s0,s10,8000ce8c <_ldtoa_r+0x7c4>
8000cef8:	06c10593          	addi	a1,sp,108
8000cefc:	0c010513          	addi	a0,sp,192
8000cf00:	c49fe0ef          	jal	ra,8000bb48 <emovo.isra.6>
8000cf04:	0240006f          	j	8000cf28 <_ldtoa_r+0x860>
8000cf08:	06c10613          	addi	a2,sp,108
8000cf0c:	15010693          	addi	a3,sp,336
8000cf10:	00060593          	mv	a1,a2
8000cf14:	000c0513          	mv	a0,s8
8000cf18:	9b4ff0ef          	jal	ra,8000c0cc <emul>
8000cf1c:	fff40413          	addi	s0,s0,-1
8000cf20:	07c11783          	lh	a5,124(sp)
8000cf24:	fe07d2e3          	bgez	a5,8000cf08 <_ldtoa_r+0x840>
8000cf28:	0c010593          	addi	a1,sp,192
8000cf2c:	06c10513          	addi	a0,sp,108
8000cf30:	c3cfe0ef          	jal	ra,8000b36c <emov>
8000cf34:	08810593          	addi	a1,sp,136
8000cf38:	00048513          	mv	a0,s1
8000cf3c:	c30fe0ef          	jal	ra,8000b36c <emov>
8000cf40:	15098793          	addi	a5,s3,336
8000cf44:	00000d13          	li	s10,0
8000cf48:	fffffc37          	lui	s8,0xfffff
8000cf4c:	00f12423          	sw	a5,8(sp)
8000cf50:	00200d93          	li	s11,2
8000cf54:	800207b7          	lui	a5,0x80020
8000cf58:	2bc78793          	addi	a5,a5,700 # 800202bc <__stack+0xfffe37f0>
8000cf5c:	01a789b3          	add	s3,a5,s10
8000cf60:	00812783          	lw	a5,8(sp)
8000cf64:	0c010593          	addi	a1,sp,192
8000cf68:	00048513          	mv	a0,s1
8000cf6c:	01a78733          	add	a4,a5,s10
8000cf70:	00e12a23          	sw	a4,20(sp)
8000cf74:	819fe0ef          	jal	ra,8000b78c <ecmp>
8000cf78:	01412703          	lw	a4,20(sp)
8000cf7c:	04a05863          	blez	a0,8000cfcc <_ldtoa_r+0x904>
8000cf80:	0c010593          	addi	a1,sp,192
8000cf84:	00070513          	mv	a0,a4
8000cf88:	805fe0ef          	jal	ra,8000b78c <ecmp>
8000cf8c:	02054863          	bltz	a0,8000cfbc <_ldtoa_r+0x8f4>
8000cf90:	0c010613          	addi	a2,sp,192
8000cf94:	00060593          	mv	a1,a2
8000cf98:	15010693          	addi	a3,sp,336
8000cf9c:	00098513          	mv	a0,s3
8000cfa0:	92cff0ef          	jal	ra,8000c0cc <emul>
8000cfa4:	08810613          	addi	a2,sp,136
8000cfa8:	15010693          	addi	a3,sp,336
8000cfac:	00060593          	mv	a1,a2
8000cfb0:	00098513          	mv	a0,s3
8000cfb4:	918ff0ef          	jal	ra,8000c0cc <emul>
8000cfb8:	01840433          	add	s0,s0,s8
8000cfbc:	014d0d13          	addi	s10,s10,20 # 1014 <_HEAP_SIZE+0x14>
8000cfc0:	10400793          	li	a5,260
8000cfc4:	03bc4c33          	div	s8,s8,s11
8000cfc8:	f8fd16e3          	bne	s10,a5,8000cf54 <_ldtoa_r+0x88c>
8000cfcc:	08810613          	addi	a2,sp,136
8000cfd0:	15010693          	addi	a3,sp,336
8000cfd4:	00048593          	mv	a1,s1
8000cfd8:	00060513          	mv	a0,a2
8000cfdc:	ba0ff0ef          	jal	ra,8000c37c <ediv>
8000cfe0:	91dff06f          	j	8000c8fc <_ldtoa_r+0x234>
8000cfe4:	0a410513          	addi	a0,sp,164
8000cfe8:	c14fe0ef          	jal	ra,8000b3fc <eshdn1>
8000cfec:	0a615783          	lhu	a5,166(sp)
8000cff0:	00178793          	addi	a5,a5,1
8000cff4:	ed5ff06f          	j	8000cec8 <_ldtoa_r+0x800>
8000cff8:	06c10513          	addi	a0,sp,108
8000cffc:	c50fe0ef          	jal	ra,8000b44c <eshup1>
8000d000:	0a410593          	addi	a1,sp,164
8000d004:	06c10513          	addi	a0,sp,108
8000d008:	b94fe0ef          	jal	ra,8000b39c <emovz>
8000d00c:	0a410513          	addi	a0,sp,164
8000d010:	c3cfe0ef          	jal	ra,8000b44c <eshup1>
8000d014:	0a410513          	addi	a0,sp,164
8000d018:	c34fe0ef          	jal	ra,8000b44c <eshup1>
8000d01c:	06c10593          	addi	a1,sp,108
8000d020:	0a410513          	addi	a0,sp,164
8000d024:	d20fe0ef          	jal	ra,8000b544 <eaddm>
8000d028:	15010613          	addi	a2,sp,336
8000d02c:	06c10593          	addi	a1,sp,108
8000d030:	08810513          	addi	a0,sp,136
8000d034:	fb5fe0ef          	jal	ra,8000bfe8 <eiremain>
8000d038:	fff40413          	addi	s0,s0,-1
8000d03c:	19c15483          	lhu	s1,412(sp)
8000d040:	901ff06f          	j	8000c940 <_ldtoa_r+0x278>
8000d044:	02000793          	li	a5,32
8000d048:	919ff06f          	j	8000c960 <_ldtoa_r+0x298>
8000d04c:	03048493          	addi	s1,s1,48
8000d050:	02e00793          	li	a5,46
8000d054:	10910aa3          	sb	s1,277(sp)
8000d058:	10f10b23          	sb	a5,278(sp)
8000d05c:	11710c13          	addi	s8,sp,279
8000d060:	000c0493          	mv	s1,s8
8000d064:	418487b3          	sub	a5,s1,s8
8000d068:	04f9d663          	ble	a5,s3,8000d0b4 <_ldtoa_r+0x9ec>
8000d06c:	19c15783          	lhu	a5,412(sp)
8000d070:	00400713          	li	a4,4
8000d074:	fff48c13          	addi	s8,s1,-1
8000d078:	92f75ee3          	ble	a5,a4,8000c9b4 <_ldtoa_r+0x2ec>
8000d07c:	00500713          	li	a4,5
8000d080:	08e78463          	beq	a5,a4,8000d108 <_ldtoa_r+0xa40>
8000d084:	000c0793          	mv	a5,s8
8000d088:	02e00613          	li	a2,46
8000d08c:	03800593          	li	a1,56
8000d090:	03000693          	li	a3,48
8000d094:	fff78793          	addi	a5,a5,-1
8000d098:	0007c703          	lbu	a4,0(a5)
8000d09c:	07f77713          	andi	a4,a4,127
8000d0a0:	0a09d663          	bgez	s3,8000d14c <_ldtoa_r+0xa84>
8000d0a4:	03100713          	li	a4,49
8000d0a8:	00e78023          	sb	a4,0(a5)
8000d0ac:	00140413          	addi	s0,s0,1
8000d0b0:	905ff06f          	j	8000c9b4 <_ldtoa_r+0x2ec>
8000d0b4:	06c10513          	addi	a0,sp,108
8000d0b8:	b94fe0ef          	jal	ra,8000b44c <eshup1>
8000d0bc:	0a410593          	addi	a1,sp,164
8000d0c0:	06c10513          	addi	a0,sp,108
8000d0c4:	ad8fe0ef          	jal	ra,8000b39c <emovz>
8000d0c8:	0a410513          	addi	a0,sp,164
8000d0cc:	b80fe0ef          	jal	ra,8000b44c <eshup1>
8000d0d0:	0a410513          	addi	a0,sp,164
8000d0d4:	b78fe0ef          	jal	ra,8000b44c <eshup1>
8000d0d8:	06c10593          	addi	a1,sp,108
8000d0dc:	0a410513          	addi	a0,sp,164
8000d0e0:	c64fe0ef          	jal	ra,8000b544 <eaddm>
8000d0e4:	15010613          	addi	a2,sp,336
8000d0e8:	06c10593          	addi	a1,sp,108
8000d0ec:	08810513          	addi	a0,sp,136
8000d0f0:	ef9fe0ef          	jal	ra,8000bfe8 <eiremain>
8000d0f4:	19c14783          	lbu	a5,412(sp)
8000d0f8:	00148493          	addi	s1,s1,1
8000d0fc:	03078793          	addi	a5,a5,48
8000d100:	fef48fa3          	sb	a5,-1(s1)
8000d104:	f61ff06f          	j	8000d064 <_ldtoa_r+0x99c>
8000d108:	08810593          	addi	a1,sp,136
8000d10c:	06c10513          	addi	a0,sp,108
8000d110:	a39fe0ef          	jal	ra,8000bb48 <emovo.isra.6>
8000d114:	294b0593          	addi	a1,s6,660
8000d118:	08810513          	addi	a0,sp,136
8000d11c:	e70fe0ef          	jal	ra,8000b78c <ecmp>
8000d120:	f60512e3          	bnez	a0,8000d084 <_ldtoa_r+0x9bc>
8000d124:	8809c8e3          	bltz	s3,8000c9b4 <_ldtoa_r+0x2ec>
8000d128:	ffe4c783          	lbu	a5,-2(s1)
8000d12c:	fd278793          	addi	a5,a5,-46
8000d130:	0017b793          	seqz	a5,a5
8000d134:	fff7c793          	not	a5,a5
8000d138:	00fc07b3          	add	a5,s8,a5
8000d13c:	0007c783          	lbu	a5,0(a5)
8000d140:	0017f793          	andi	a5,a5,1
8000d144:	860788e3          	beqz	a5,8000c9b4 <_ldtoa_r+0x2ec>
8000d148:	f3dff06f          	j	8000d084 <_ldtoa_r+0x9bc>
8000d14c:	02c71463          	bne	a4,a2,8000d174 <_ldtoa_r+0xaac>
8000d150:	fff7c703          	lbu	a4,-1(a5)
8000d154:	03800693          	li	a3,56
8000d158:	00e6e863          	bltu	a3,a4,8000d168 <_ldtoa_r+0xaa0>
8000d15c:	00170713          	addi	a4,a4,1 # ffff8001 <__stack+0x7ffbb535>
8000d160:	fee78fa3          	sb	a4,-1(a5)
8000d164:	851ff06f          	j	8000c9b4 <_ldtoa_r+0x2ec>
8000d168:	00140413          	addi	s0,s0,1
8000d16c:	03100713          	li	a4,49
8000d170:	ff1ff06f          	j	8000d160 <_ldtoa_r+0xa98>
8000d174:	00e5e863          	bltu	a1,a4,8000d184 <_ldtoa_r+0xabc>
8000d178:	00170713          	addi	a4,a4,1
8000d17c:	00e78023          	sb	a4,0(a5)
8000d180:	835ff06f          	j	8000c9b4 <_ldtoa_r+0x2ec>
8000d184:	00d78023          	sb	a3,0(a5)
8000d188:	f0dff06f          	j	8000d094 <_ldtoa_r+0x9cc>
8000d18c:	00140413          	addi	s0,s0,1
8000d190:	008ca023          	sw	s0,0(s9)
8000d194:	00098793          	mv	a5,s3
8000d198:	02e00693          	li	a3,46
8000d19c:	0007c703          	lbu	a4,0(a5)
8000d1a0:	00071663          	bnez	a4,8000d1ac <_ldtoa_r+0xae4>
8000d1a4:	04500713          	li	a4,69
8000d1a8:	02c0006f          	j	8000d1d4 <_ldtoa_r+0xb0c>
8000d1ac:	00d70c63          	beq	a4,a3,8000d1c4 <_ldtoa_r+0xafc>
8000d1b0:	00178793          	addi	a5,a5,1
8000d1b4:	fe9ff06f          	j	8000d19c <_ldtoa_r+0xad4>
8000d1b8:	0017c703          	lbu	a4,1(a5)
8000d1bc:	00178793          	addi	a5,a5,1
8000d1c0:	fee78fa3          	sb	a4,-1(a5)
8000d1c4:	0007c703          	lbu	a4,0(a5)
8000d1c8:	fe0718e3          	bnez	a4,8000d1b8 <_ldtoa_r+0xaf0>
8000d1cc:	fd9ff06f          	j	8000d1a4 <_ldtoa_r+0xadc>
8000d1d0:	fff78793          	addi	a5,a5,-1
8000d1d4:	0007c683          	lbu	a3,0(a5)
8000d1d8:	00e68463          	beq	a3,a4,8000d1e0 <_ldtoa_r+0xb18>
8000d1dc:	fef9eae3          	bltu	s3,a5,8000d1d0 <_ldtoa_r+0xb08>
8000d1e0:	00078023          	sb	zero,0(a5)
8000d1e4:	e2cff06f          	j	8000c810 <_ldtoa_r+0x148>
8000d1e8:	00178793          	addi	a5,a5,1
8000d1ec:	e30ff06f          	j	8000c81c <_ldtoa_r+0x154>
8000d1f0:	00068413          	mv	s0,a3
8000d1f4:	e38ff06f          	j	8000c82c <_ldtoa_r+0x164>
8000d1f8:	fff40413          	addi	s0,s0,-1
8000d1fc:	00040023          	sb	zero,0(s0)
8000d200:	fff44703          	lbu	a4,-1(s0)
8000d204:	00d71663          	bne	a4,a3,8000d210 <_ldtoa_r+0xb48>
8000d208:	41340733          	sub	a4,s0,s3
8000d20c:	fee7c6e3          	blt	a5,a4,8000d1f8 <_ldtoa_r+0xb30>
8000d210:	00300793          	li	a5,3
8000d214:	009a8713          	addi	a4,s5,9
8000d218:	02fb9463          	bne	s7,a5,8000d240 <_ldtoa_r+0xb78>
8000d21c:	16012783          	lw	a5,352(sp)
8000d220:	00f90933          	add	s2,s2,a5
8000d224:	00095863          	bgez	s2,8000d234 <_ldtoa_r+0xb6c>
8000d228:	10010a23          	sb	zero,276(sp)
8000d22c:	000ca023          	sw	zero,0(s9)
8000d230:	00098413          	mv	s0,s3
8000d234:	000ca783          	lw	a5,0(s9)
8000d238:	00fa8ab3          	add	s5,s5,a5
8000d23c:	003a8713          	addi	a4,s5,3
8000d240:	040a2223          	sw	zero,68(s4)
8000d244:	00400793          	li	a5,4
8000d248:	01478693          	addi	a3,a5,20
8000d24c:	044a2583          	lw	a1,68(s4)
8000d250:	06d77863          	bleu	a3,a4,8000d2c0 <_ldtoa_r+0xbf8>
8000d254:	000a0513          	mv	a0,s4
8000d258:	2c5000ef          	jal	ra,8000dd1c <_Balloc>
8000d25c:	04aa2023          	sw	a0,64(s4)
8000d260:	00098593          	mv	a1,s3
8000d264:	00050493          	mv	s1,a0
8000d268:	5d1010ef          	jal	ra,8000f038 <strcpy>
8000d26c:	00c12783          	lw	a5,12(sp)
8000d270:	00078863          	beqz	a5,8000d280 <_ldtoa_r+0xbb8>
8000d274:	41340433          	sub	s0,s0,s3
8000d278:	00848433          	add	s0,s1,s0
8000d27c:	0087a023          	sw	s0,0(a5)
8000d280:	1dc12083          	lw	ra,476(sp)
8000d284:	1d812403          	lw	s0,472(sp)
8000d288:	00048513          	mv	a0,s1
8000d28c:	1d012903          	lw	s2,464(sp)
8000d290:	1d412483          	lw	s1,468(sp)
8000d294:	1cc12983          	lw	s3,460(sp)
8000d298:	1c812a03          	lw	s4,456(sp)
8000d29c:	1c412a83          	lw	s5,452(sp)
8000d2a0:	1c012b03          	lw	s6,448(sp)
8000d2a4:	1bc12b83          	lw	s7,444(sp)
8000d2a8:	1b812c03          	lw	s8,440(sp)
8000d2ac:	1b412c83          	lw	s9,436(sp)
8000d2b0:	1b012d03          	lw	s10,432(sp)
8000d2b4:	1ac12d83          	lw	s11,428(sp)
8000d2b8:	1e010113          	addi	sp,sp,480
8000d2bc:	00008067          	ret
8000d2c0:	00158593          	addi	a1,a1,1
8000d2c4:	04ba2223          	sw	a1,68(s4)
8000d2c8:	00179793          	slli	a5,a5,0x1
8000d2cc:	f7dff06f          	j	8000d248 <_ldtoa_r+0xb80>
8000d2d0:	000087b7          	lui	a5,0x8
8000d2d4:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
8000d2d8:	f0f71063          	bne	a4,a5,8000c9d8 <_ldtoa_r+0x310>
8000d2dc:	00412783          	lw	a5,4(sp)
8000d2e0:	ee078663          	beqz	a5,8000c9cc <_ldtoa_r+0x304>
8000d2e4:	800215b7          	lui	a1,0x80021
8000d2e8:	db058593          	addi	a1,a1,-592 # 80020db0 <__stack+0xfffe42e4>
8000d2ec:	ce0ff06f          	j	8000c7cc <_ldtoa_r+0x104>
8000d2f0:	00a00793          	li	a5,10
8000d2f4:	02a00993          	li	s3,42
8000d2f8:	d4f49ae3          	bne	s1,a5,8000d04c <_ldtoa_r+0x984>
8000d2fc:	03100793          	li	a5,49
8000d300:	10f10aa3          	sb	a5,277(sp)
8000d304:	02e00793          	li	a5,46
8000d308:	10f10b23          	sb	a5,278(sp)
8000d30c:	02a00993          	li	s3,42
8000d310:	e8cff06f          	j	8000c99c <_ldtoa_r+0x2d4>

8000d314 <_ldcheck>:
8000d314:	00052783          	lw	a5,0(a0)
8000d318:	fc010113          	addi	sp,sp,-64
8000d31c:	01410593          	addi	a1,sp,20
8000d320:	00f12023          	sw	a5,0(sp)
8000d324:	00452783          	lw	a5,4(a0)
8000d328:	02112e23          	sw	ra,60(sp)
8000d32c:	00f12223          	sw	a5,4(sp)
8000d330:	00852783          	lw	a5,8(a0)
8000d334:	00f12423          	sw	a5,8(sp)
8000d338:	00c52783          	lw	a5,12(a0)
8000d33c:	00010513          	mv	a0,sp
8000d340:	00f12623          	sw	a5,12(sp)
8000d344:	875fe0ef          	jal	ra,8000bbb8 <e113toe.isra.8>
8000d348:	02615783          	lhu	a5,38(sp)
8000d34c:	00000513          	li	a0,0
8000d350:	fff7c793          	not	a5,a5
8000d354:	01179713          	slli	a4,a5,0x11
8000d358:	00071a63          	bnez	a4,8000d36c <_ldcheck+0x58>
8000d35c:	01410513          	addi	a0,sp,20
8000d360:	af0fe0ef          	jal	ra,8000b650 <eisnan>
8000d364:	00153513          	seqz	a0,a0
8000d368:	00150513          	addi	a0,a0,1
8000d36c:	03c12083          	lw	ra,60(sp)
8000d370:	04010113          	addi	sp,sp,64
8000d374:	00008067          	ret

8000d378 <__localeconv_l>:
8000d378:	0f050513          	addi	a0,a0,240
8000d37c:	00008067          	ret

8000d380 <_localeconv_r>:
8000d380:	800217b7          	lui	a5,0x80021
8000d384:	e647a783          	lw	a5,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000d388:	0347a503          	lw	a0,52(a5)
8000d38c:	00051663          	bnez	a0,8000d398 <_localeconv_r+0x18>
8000d390:	80021537          	lui	a0,0x80021
8000d394:	29850513          	addi	a0,a0,664 # 80021298 <__stack+0xfffe47cc>
8000d398:	0f050513          	addi	a0,a0,240
8000d39c:	00008067          	ret

8000d3a0 <localeconv>:
8000d3a0:	800217b7          	lui	a5,0x80021
8000d3a4:	e647a783          	lw	a5,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000d3a8:	0347a503          	lw	a0,52(a5)
8000d3ac:	00051663          	bnez	a0,8000d3b8 <localeconv+0x18>
8000d3b0:	80021537          	lui	a0,0x80021
8000d3b4:	29850513          	addi	a0,a0,664 # 80021298 <__stack+0xfffe47cc>
8000d3b8:	0f050513          	addi	a0,a0,240
8000d3bc:	00008067          	ret

8000d3c0 <_setlocale_r>:
8000d3c0:	ff010113          	addi	sp,sp,-16
8000d3c4:	00912223          	sw	s1,4(sp)
8000d3c8:	00112623          	sw	ra,12(sp)
8000d3cc:	00812423          	sw	s0,8(sp)
8000d3d0:	800214b7          	lui	s1,0x80021
8000d3d4:	04060263          	beqz	a2,8000d418 <_setlocale_r+0x58>
8000d3d8:	800215b7          	lui	a1,0x80021
8000d3dc:	dd458593          	addi	a1,a1,-556 # 80020dd4 <__stack+0xfffe4308>
8000d3e0:	00060513          	mv	a0,a2
8000d3e4:	00060413          	mv	s0,a2
8000d3e8:	2d5010ef          	jal	ra,8000eebc <strcmp>
8000d3ec:	02050663          	beqz	a0,8000d418 <_setlocale_r+0x58>
8000d3f0:	dd048593          	addi	a1,s1,-560 # 80020dd0 <__stack+0xfffe4304>
8000d3f4:	00040513          	mv	a0,s0
8000d3f8:	2c5010ef          	jal	ra,8000eebc <strcmp>
8000d3fc:	00050e63          	beqz	a0,8000d418 <_setlocale_r+0x58>
8000d400:	800215b7          	lui	a1,0x80021
8000d404:	da058593          	addi	a1,a1,-608 # 80020da0 <__stack+0xfffe42d4>
8000d408:	00040513          	mv	a0,s0
8000d40c:	2b1010ef          	jal	ra,8000eebc <strcmp>
8000d410:	00000793          	li	a5,0
8000d414:	00051463          	bnez	a0,8000d41c <_setlocale_r+0x5c>
8000d418:	dd048793          	addi	a5,s1,-560
8000d41c:	00c12083          	lw	ra,12(sp)
8000d420:	00812403          	lw	s0,8(sp)
8000d424:	00412483          	lw	s1,4(sp)
8000d428:	00078513          	mv	a0,a5
8000d42c:	01010113          	addi	sp,sp,16
8000d430:	00008067          	ret

8000d434 <__locale_mb_cur_max>:
8000d434:	800217b7          	lui	a5,0x80021
8000d438:	e647a783          	lw	a5,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000d43c:	0347a783          	lw	a5,52(a5)
8000d440:	00079663          	bnez	a5,8000d44c <__locale_mb_cur_max+0x18>
8000d444:	800217b7          	lui	a5,0x80021
8000d448:	29878793          	addi	a5,a5,664 # 80021298 <__stack+0xfffe47cc>
8000d44c:	1287c503          	lbu	a0,296(a5)
8000d450:	00008067          	ret

8000d454 <__locale_ctype_ptr_l>:
8000d454:	0ec52503          	lw	a0,236(a0)
8000d458:	00008067          	ret

8000d45c <__locale_ctype_ptr>:
8000d45c:	800217b7          	lui	a5,0x80021
8000d460:	e647a783          	lw	a5,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000d464:	0347a783          	lw	a5,52(a5)
8000d468:	00079663          	bnez	a5,8000d474 <__locale_ctype_ptr+0x18>
8000d46c:	800217b7          	lui	a5,0x80021
8000d470:	29878793          	addi	a5,a5,664 # 80021298 <__stack+0xfffe47cc>
8000d474:	0ec7a503          	lw	a0,236(a5)
8000d478:	00008067          	ret

8000d47c <setlocale>:
8000d47c:	800217b7          	lui	a5,0x80021
8000d480:	00058613          	mv	a2,a1
8000d484:	00050593          	mv	a1,a0
8000d488:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000d48c:	f35ff06f          	j	8000d3c0 <_setlocale_r>

8000d490 <__swhatbuf_r>:
8000d490:	fa010113          	addi	sp,sp,-96
8000d494:	04912a23          	sw	s1,84(sp)
8000d498:	00058493          	mv	s1,a1
8000d49c:	00e59583          	lh	a1,14(a1)
8000d4a0:	04812c23          	sw	s0,88(sp)
8000d4a4:	04112e23          	sw	ra,92(sp)
8000d4a8:	00060413          	mv	s0,a2
8000d4ac:	0005de63          	bgez	a1,8000d4c8 <__swhatbuf_r+0x38>
8000d4b0:	00c4d783          	lhu	a5,12(s1)
8000d4b4:	0006a023          	sw	zero,0(a3)
8000d4b8:	0807f793          	andi	a5,a5,128
8000d4bc:	04079863          	bnez	a5,8000d50c <__swhatbuf_r+0x7c>
8000d4c0:	40000793          	li	a5,1024
8000d4c4:	04c0006f          	j	8000d510 <__swhatbuf_r+0x80>
8000d4c8:	01410613          	addi	a2,sp,20
8000d4cc:	00d12623          	sw	a3,12(sp)
8000d4d0:	595040ef          	jal	ra,80012264 <_fstat_r>
8000d4d4:	00c12683          	lw	a3,12(sp)
8000d4d8:	fc054ce3          	bltz	a0,8000d4b0 <__swhatbuf_r+0x20>
8000d4dc:	01812703          	lw	a4,24(sp)
8000d4e0:	0000f7b7          	lui	a5,0xf
8000d4e4:	00001537          	lui	a0,0x1
8000d4e8:	00e7f7b3          	and	a5,a5,a4
8000d4ec:	ffffe737          	lui	a4,0xffffe
8000d4f0:	00e787b3          	add	a5,a5,a4
8000d4f4:	0017b793          	seqz	a5,a5
8000d4f8:	00f6a023          	sw	a5,0(a3)
8000d4fc:	40000793          	li	a5,1024
8000d500:	00f42023          	sw	a5,0(s0)
8000d504:	80050513          	addi	a0,a0,-2048 # 800 <_HEAP_SIZE-0x800>
8000d508:	0100006f          	j	8000d518 <__swhatbuf_r+0x88>
8000d50c:	04000793          	li	a5,64
8000d510:	00f42023          	sw	a5,0(s0)
8000d514:	00000513          	li	a0,0
8000d518:	05c12083          	lw	ra,92(sp)
8000d51c:	05812403          	lw	s0,88(sp)
8000d520:	05412483          	lw	s1,84(sp)
8000d524:	06010113          	addi	sp,sp,96
8000d528:	00008067          	ret

8000d52c <__smakebuf_r>:
8000d52c:	00c5d783          	lhu	a5,12(a1)
8000d530:	fe010113          	addi	sp,sp,-32
8000d534:	00812c23          	sw	s0,24(sp)
8000d538:	00112e23          	sw	ra,28(sp)
8000d53c:	00912a23          	sw	s1,20(sp)
8000d540:	01212823          	sw	s2,16(sp)
8000d544:	0027f793          	andi	a5,a5,2
8000d548:	00058413          	mv	s0,a1
8000d54c:	02078863          	beqz	a5,8000d57c <__smakebuf_r+0x50>
8000d550:	04340793          	addi	a5,s0,67
8000d554:	00f42023          	sw	a5,0(s0)
8000d558:	00f42823          	sw	a5,16(s0)
8000d55c:	00100793          	li	a5,1
8000d560:	00f42a23          	sw	a5,20(s0)
8000d564:	01c12083          	lw	ra,28(sp)
8000d568:	01812403          	lw	s0,24(sp)
8000d56c:	01412483          	lw	s1,20(sp)
8000d570:	01012903          	lw	s2,16(sp)
8000d574:	02010113          	addi	sp,sp,32
8000d578:	00008067          	ret
8000d57c:	00c10693          	addi	a3,sp,12
8000d580:	00810613          	addi	a2,sp,8
8000d584:	00050493          	mv	s1,a0
8000d588:	f09ff0ef          	jal	ra,8000d490 <__swhatbuf_r>
8000d58c:	00812583          	lw	a1,8(sp)
8000d590:	00050913          	mv	s2,a0
8000d594:	00048513          	mv	a0,s1
8000d598:	084000ef          	jal	ra,8000d61c <_malloc_r>
8000d59c:	02051063          	bnez	a0,8000d5bc <__smakebuf_r+0x90>
8000d5a0:	00c41783          	lh	a5,12(s0)
8000d5a4:	2007f713          	andi	a4,a5,512
8000d5a8:	fa071ee3          	bnez	a4,8000d564 <__smakebuf_r+0x38>
8000d5ac:	ffc7f793          	andi	a5,a5,-4
8000d5b0:	0027e793          	ori	a5,a5,2
8000d5b4:	00f41623          	sh	a5,12(s0)
8000d5b8:	f99ff06f          	j	8000d550 <__smakebuf_r+0x24>
8000d5bc:	8000b7b7          	lui	a5,0x8000b
8000d5c0:	bc878793          	addi	a5,a5,-1080 # 8000abc8 <__stack+0xfffce0fc>
8000d5c4:	02f4ae23          	sw	a5,60(s1)
8000d5c8:	00c45783          	lhu	a5,12(s0)
8000d5cc:	00a42023          	sw	a0,0(s0)
8000d5d0:	00a42823          	sw	a0,16(s0)
8000d5d4:	0807e793          	ori	a5,a5,128
8000d5d8:	00f41623          	sh	a5,12(s0)
8000d5dc:	00812783          	lw	a5,8(sp)
8000d5e0:	00f42a23          	sw	a5,20(s0)
8000d5e4:	00c12783          	lw	a5,12(sp)
8000d5e8:	02078263          	beqz	a5,8000d60c <__smakebuf_r+0xe0>
8000d5ec:	00e41583          	lh	a1,14(s0)
8000d5f0:	00048513          	mv	a0,s1
8000d5f4:	120050ef          	jal	ra,80012714 <_isatty_r>
8000d5f8:	00050a63          	beqz	a0,8000d60c <__smakebuf_r+0xe0>
8000d5fc:	00c45783          	lhu	a5,12(s0)
8000d600:	ffc7f793          	andi	a5,a5,-4
8000d604:	0017e793          	ori	a5,a5,1
8000d608:	00f41623          	sh	a5,12(s0)
8000d60c:	00c45783          	lhu	a5,12(s0)
8000d610:	00f96933          	or	s2,s2,a5
8000d614:	01241623          	sh	s2,12(s0)
8000d618:	f4dff06f          	j	8000d564 <__smakebuf_r+0x38>

8000d61c <_malloc_r>:
8000d61c:	fd010113          	addi	sp,sp,-48
8000d620:	02112623          	sw	ra,44(sp)
8000d624:	02812423          	sw	s0,40(sp)
8000d628:	02912223          	sw	s1,36(sp)
8000d62c:	03212023          	sw	s2,32(sp)
8000d630:	01312e23          	sw	s3,28(sp)
8000d634:	01412c23          	sw	s4,24(sp)
8000d638:	01512a23          	sw	s5,20(sp)
8000d63c:	01612823          	sw	s6,16(sp)
8000d640:	01712623          	sw	s7,12(sp)
8000d644:	01812423          	sw	s8,8(sp)
8000d648:	00b58793          	addi	a5,a1,11
8000d64c:	01600713          	li	a4,22
8000d650:	04f77463          	bleu	a5,a4,8000d698 <_malloc_r+0x7c>
8000d654:	ff87f493          	andi	s1,a5,-8
8000d658:	0404d263          	bgez	s1,8000d69c <_malloc_r+0x80>
8000d65c:	00c00793          	li	a5,12
8000d660:	00f52023          	sw	a5,0(a0)
8000d664:	00000513          	li	a0,0
8000d668:	02c12083          	lw	ra,44(sp)
8000d66c:	02812403          	lw	s0,40(sp)
8000d670:	02412483          	lw	s1,36(sp)
8000d674:	02012903          	lw	s2,32(sp)
8000d678:	01c12983          	lw	s3,28(sp)
8000d67c:	01812a03          	lw	s4,24(sp)
8000d680:	01412a83          	lw	s5,20(sp)
8000d684:	01012b03          	lw	s6,16(sp)
8000d688:	00c12b83          	lw	s7,12(sp)
8000d68c:	00812c03          	lw	s8,8(sp)
8000d690:	03010113          	addi	sp,sp,48
8000d694:	00008067          	ret
8000d698:	01000493          	li	s1,16
8000d69c:	fcb4e0e3          	bltu	s1,a1,8000d65c <_malloc_r+0x40>
8000d6a0:	00050993          	mv	s3,a0
8000d6a4:	670000ef          	jal	ra,8000dd14 <__malloc_lock>
8000d6a8:	80021937          	lui	s2,0x80021
8000d6ac:	1f700793          	li	a5,503
8000d6b0:	40490913          	addi	s2,s2,1028 # 80021404 <__stack+0xfffe4938>
8000d6b4:	0497ea63          	bltu	a5,s1,8000d708 <_malloc_r+0xec>
8000d6b8:	00848713          	addi	a4,s1,8
8000d6bc:	00e90733          	add	a4,s2,a4
8000d6c0:	00472403          	lw	s0,4(a4) # ffffe004 <__stack+0x7ffc1538>
8000d6c4:	ff870693          	addi	a3,a4,-8
8000d6c8:	0034d793          	srli	a5,s1,0x3
8000d6cc:	00d41863          	bne	s0,a3,8000d6dc <_malloc_r+0xc0>
8000d6d0:	00c72403          	lw	s0,12(a4)
8000d6d4:	00278793          	addi	a5,a5,2
8000d6d8:	08870063          	beq	a4,s0,8000d758 <_malloc_r+0x13c>
8000d6dc:	00442783          	lw	a5,4(s0)
8000d6e0:	00c42703          	lw	a4,12(s0)
8000d6e4:	00842683          	lw	a3,8(s0)
8000d6e8:	ffc7f793          	andi	a5,a5,-4
8000d6ec:	00f407b3          	add	a5,s0,a5
8000d6f0:	00e6a623          	sw	a4,12(a3)
8000d6f4:	00d72423          	sw	a3,8(a4)
8000d6f8:	0047a703          	lw	a4,4(a5)
8000d6fc:	00176713          	ori	a4,a4,1
8000d700:	00e7a223          	sw	a4,4(a5)
8000d704:	0a80006f          	j	8000d7ac <_malloc_r+0x190>
8000d708:	0094d713          	srli	a4,s1,0x9
8000d70c:	03f00793          	li	a5,63
8000d710:	00070a63          	beqz	a4,8000d724 <_malloc_r+0x108>
8000d714:	00400793          	li	a5,4
8000d718:	0ae7e263          	bltu	a5,a4,8000d7bc <_malloc_r+0x1a0>
8000d71c:	0064d793          	srli	a5,s1,0x6
8000d720:	03878793          	addi	a5,a5,56
8000d724:	00178713          	addi	a4,a5,1
8000d728:	00371713          	slli	a4,a4,0x3
8000d72c:	00e90733          	add	a4,s2,a4
8000d730:	00472403          	lw	s0,4(a4)
8000d734:	ff870593          	addi	a1,a4,-8
8000d738:	00f00513          	li	a0,15
8000d73c:	00b40c63          	beq	s0,a1,8000d754 <_malloc_r+0x138>
8000d740:	00442703          	lw	a4,4(s0)
8000d744:	ffc77713          	andi	a4,a4,-4
8000d748:	40970633          	sub	a2,a4,s1
8000d74c:	0cc55063          	ble	a2,a0,8000d80c <_malloc_r+0x1f0>
8000d750:	fff78793          	addi	a5,a5,-1
8000d754:	00178793          	addi	a5,a5,1
8000d758:	01092403          	lw	s0,16(s2)
8000d75c:	800215b7          	lui	a1,0x80021
8000d760:	00890693          	addi	a3,s2,8
8000d764:	40c58593          	addi	a1,a1,1036 # 8002140c <__stack+0xfffe4940>
8000d768:	12d40863          	beq	s0,a3,8000d898 <_malloc_r+0x27c>
8000d76c:	00442703          	lw	a4,4(s0)
8000d770:	00f00613          	li	a2,15
8000d774:	ffc77713          	andi	a4,a4,-4
8000d778:	40970533          	sub	a0,a4,s1
8000d77c:	0aa65a63          	ble	a0,a2,8000d830 <_malloc_r+0x214>
8000d780:	0014e793          	ori	a5,s1,1
8000d784:	00f42223          	sw	a5,4(s0)
8000d788:	00940633          	add	a2,s0,s1
8000d78c:	00c92a23          	sw	a2,20(s2)
8000d790:	00c92823          	sw	a2,16(s2)
8000d794:	00156793          	ori	a5,a0,1
8000d798:	00d62623          	sw	a3,12(a2)
8000d79c:	00d62423          	sw	a3,8(a2)
8000d7a0:	00f62223          	sw	a5,4(a2)
8000d7a4:	00e40733          	add	a4,s0,a4
8000d7a8:	00a72023          	sw	a0,0(a4)
8000d7ac:	00098513          	mv	a0,s3
8000d7b0:	568000ef          	jal	ra,8000dd18 <__malloc_unlock>
8000d7b4:	00840513          	addi	a0,s0,8
8000d7b8:	eb1ff06f          	j	8000d668 <_malloc_r+0x4c>
8000d7bc:	01400793          	li	a5,20
8000d7c0:	00e7e663          	bltu	a5,a4,8000d7cc <_malloc_r+0x1b0>
8000d7c4:	05b70793          	addi	a5,a4,91
8000d7c8:	f5dff06f          	j	8000d724 <_malloc_r+0x108>
8000d7cc:	05400793          	li	a5,84
8000d7d0:	00e7e863          	bltu	a5,a4,8000d7e0 <_malloc_r+0x1c4>
8000d7d4:	00c4d793          	srli	a5,s1,0xc
8000d7d8:	06e78793          	addi	a5,a5,110
8000d7dc:	f49ff06f          	j	8000d724 <_malloc_r+0x108>
8000d7e0:	15400793          	li	a5,340
8000d7e4:	00e7e863          	bltu	a5,a4,8000d7f4 <_malloc_r+0x1d8>
8000d7e8:	00f4d793          	srli	a5,s1,0xf
8000d7ec:	07778793          	addi	a5,a5,119
8000d7f0:	f35ff06f          	j	8000d724 <_malloc_r+0x108>
8000d7f4:	55400693          	li	a3,1364
8000d7f8:	07e00793          	li	a5,126
8000d7fc:	f2e6e4e3          	bltu	a3,a4,8000d724 <_malloc_r+0x108>
8000d800:	0124d793          	srli	a5,s1,0x12
8000d804:	07c78793          	addi	a5,a5,124
8000d808:	f1dff06f          	j	8000d724 <_malloc_r+0x108>
8000d80c:	00c42683          	lw	a3,12(s0)
8000d810:	00064c63          	bltz	a2,8000d828 <_malloc_r+0x20c>
8000d814:	00842783          	lw	a5,8(s0)
8000d818:	00d7a623          	sw	a3,12(a5)
8000d81c:	00f6a423          	sw	a5,8(a3)
8000d820:	00e407b3          	add	a5,s0,a4
8000d824:	ed5ff06f          	j	8000d6f8 <_malloc_r+0xdc>
8000d828:	00068413          	mv	s0,a3
8000d82c:	f11ff06f          	j	8000d73c <_malloc_r+0x120>
8000d830:	00d92a23          	sw	a3,20(s2)
8000d834:	00d92823          	sw	a3,16(s2)
8000d838:	00054c63          	bltz	a0,8000d850 <_malloc_r+0x234>
8000d83c:	00e40733          	add	a4,s0,a4
8000d840:	00472783          	lw	a5,4(a4)
8000d844:	0017e793          	ori	a5,a5,1
8000d848:	00f72223          	sw	a5,4(a4)
8000d84c:	f61ff06f          	j	8000d7ac <_malloc_r+0x190>
8000d850:	1ff00693          	li	a3,511
8000d854:	00492803          	lw	a6,4(s2)
8000d858:	18e6e063          	bltu	a3,a4,8000d9d8 <_malloc_r+0x3bc>
8000d85c:	00375713          	srli	a4,a4,0x3
8000d860:	40275613          	srai	a2,a4,0x2
8000d864:	00100693          	li	a3,1
8000d868:	00170713          	addi	a4,a4,1
8000d86c:	00c696b3          	sll	a3,a3,a2
8000d870:	00371713          	slli	a4,a4,0x3
8000d874:	00e90733          	add	a4,s2,a4
8000d878:	0106e6b3          	or	a3,a3,a6
8000d87c:	00d92223          	sw	a3,4(s2)
8000d880:	00072683          	lw	a3,0(a4)
8000d884:	ff870613          	addi	a2,a4,-8
8000d888:	00c42623          	sw	a2,12(s0)
8000d88c:	00d42423          	sw	a3,8(s0)
8000d890:	00872023          	sw	s0,0(a4)
8000d894:	0086a623          	sw	s0,12(a3)
8000d898:	4027d713          	srai	a4,a5,0x2
8000d89c:	00100313          	li	t1,1
8000d8a0:	00e31333          	sll	t1,t1,a4
8000d8a4:	00492703          	lw	a4,4(s2)
8000d8a8:	06676a63          	bltu	a4,t1,8000d91c <_malloc_r+0x300>
8000d8ac:	006776b3          	and	a3,a4,t1
8000d8b0:	00069c63          	bnez	a3,8000d8c8 <_malloc_r+0x2ac>
8000d8b4:	ffc7f793          	andi	a5,a5,-4
8000d8b8:	00131313          	slli	t1,t1,0x1
8000d8bc:	006776b3          	and	a3,a4,t1
8000d8c0:	00478793          	addi	a5,a5,4
8000d8c4:	fe068ae3          	beqz	a3,8000d8b8 <_malloc_r+0x29c>
8000d8c8:	00f00e13          	li	t3,15
8000d8cc:	00379693          	slli	a3,a5,0x3
8000d8d0:	00d906b3          	add	a3,s2,a3
8000d8d4:	00068813          	mv	a6,a3
8000d8d8:	00078513          	mv	a0,a5
8000d8dc:	00c82403          	lw	s0,12(a6)
8000d8e0:	1b041c63          	bne	s0,a6,8000da98 <_malloc_r+0x47c>
8000d8e4:	00150513          	addi	a0,a0,1
8000d8e8:	00357713          	andi	a4,a0,3
8000d8ec:	00880813          	addi	a6,a6,8
8000d8f0:	fe0716e3          	bnez	a4,8000d8dc <_malloc_r+0x2c0>
8000d8f4:	0037f713          	andi	a4,a5,3
8000d8f8:	20071e63          	bnez	a4,8000db14 <_malloc_r+0x4f8>
8000d8fc:	00492703          	lw	a4,4(s2)
8000d900:	fff34793          	not	a5,t1
8000d904:	00f777b3          	and	a5,a4,a5
8000d908:	00f92223          	sw	a5,4(s2)
8000d90c:	00492703          	lw	a4,4(s2)
8000d910:	00131313          	slli	t1,t1,0x1
8000d914:	00676463          	bltu	a4,t1,8000d91c <_malloc_r+0x300>
8000d918:	22031263          	bnez	t1,8000db3c <_malloc_r+0x520>
8000d91c:	00892b83          	lw	s7,8(s2)
8000d920:	004ba403          	lw	s0,4(s7)
8000d924:	ffc47a93          	andi	s5,s0,-4
8000d928:	009ae863          	bltu	s5,s1,8000d938 <_malloc_r+0x31c>
8000d92c:	409a8733          	sub	a4,s5,s1
8000d930:	00f00793          	li	a5,15
8000d934:	32e7c463          	blt	a5,a4,8000dc5c <_malloc_r+0x640>
8000d938:	800217b7          	lui	a5,0x80021
8000d93c:	80021a37          	lui	s4,0x80021
8000d940:	e2c7a403          	lw	s0,-468(a5) # 80020e2c <__stack+0xfffe4360>
8000d944:	e68a2703          	lw	a4,-408(s4) # 80020e68 <__stack+0xfffe439c>
8000d948:	fff00793          	li	a5,-1
8000d94c:	00848433          	add	s0,s1,s0
8000d950:	1ef71a63          	bne	a4,a5,8000db44 <_malloc_r+0x528>
8000d954:	01040413          	addi	s0,s0,16
8000d958:	00040593          	mv	a1,s0
8000d95c:	00098513          	mv	a0,s3
8000d960:	24c010ef          	jal	ra,8000ebac <_sbrk_r>
8000d964:	fff00793          	li	a5,-1
8000d968:	00050b13          	mv	s6,a0
8000d96c:	26f50e63          	beq	a0,a5,8000dbe8 <_malloc_r+0x5cc>
8000d970:	015b87b3          	add	a5,s7,s5
8000d974:	00f57463          	bleu	a5,a0,8000d97c <_malloc_r+0x360>
8000d978:	272b9863          	bne	s7,s2,8000dbe8 <_malloc_r+0x5cc>
8000d97c:	8003bc37          	lui	s8,0x8003b
8000d980:	a00c0693          	addi	a3,s8,-1536 # 8003aa00 <__stack+0xffffdf34>
8000d984:	0006a703          	lw	a4,0(a3)
8000d988:	a00c0c13          	addi	s8,s8,-1536
8000d98c:	00e40733          	add	a4,s0,a4
8000d990:	00e6a023          	sw	a4,0(a3)
8000d994:	1d679463          	bne	a5,s6,8000db5c <_malloc_r+0x540>
8000d998:	01479693          	slli	a3,a5,0x14
8000d99c:	1c069063          	bnez	a3,8000db5c <_malloc_r+0x540>
8000d9a0:	00892783          	lw	a5,8(s2)
8000d9a4:	008a8433          	add	s0,s5,s0
8000d9a8:	00146413          	ori	s0,s0,1
8000d9ac:	0087a223          	sw	s0,4(a5)
8000d9b0:	80021737          	lui	a4,0x80021
8000d9b4:	000c2783          	lw	a5,0(s8)
8000d9b8:	e2872683          	lw	a3,-472(a4) # 80020e28 <__stack+0xfffe435c>
8000d9bc:	00f6f463          	bleu	a5,a3,8000d9c4 <_malloc_r+0x3a8>
8000d9c0:	e2f72423          	sw	a5,-472(a4)
8000d9c4:	80021737          	lui	a4,0x80021
8000d9c8:	e2472683          	lw	a3,-476(a4) # 80020e24 <__stack+0xfffe4358>
8000d9cc:	20f6fe63          	bleu	a5,a3,8000dbe8 <_malloc_r+0x5cc>
8000d9d0:	e2f72223          	sw	a5,-476(a4)
8000d9d4:	2140006f          	j	8000dbe8 <_malloc_r+0x5cc>
8000d9d8:	00975613          	srli	a2,a4,0x9
8000d9dc:	00400693          	li	a3,4
8000d9e0:	04c6e663          	bltu	a3,a2,8000da2c <_malloc_r+0x410>
8000d9e4:	00675693          	srli	a3,a4,0x6
8000d9e8:	03868693          	addi	a3,a3,56
8000d9ec:	00168613          	addi	a2,a3,1
8000d9f0:	00361613          	slli	a2,a2,0x3
8000d9f4:	00c90633          	add	a2,s2,a2
8000d9f8:	ff860513          	addi	a0,a2,-8
8000d9fc:	00062603          	lw	a2,0(a2)
8000da00:	08c51263          	bne	a0,a2,8000da84 <_malloc_r+0x468>
8000da04:	4026d693          	srai	a3,a3,0x2
8000da08:	00100713          	li	a4,1
8000da0c:	00d716b3          	sll	a3,a4,a3
8000da10:	0106e6b3          	or	a3,a3,a6
8000da14:	00d92223          	sw	a3,4(s2)
8000da18:	00a42623          	sw	a0,12(s0)
8000da1c:	00c42423          	sw	a2,8(s0)
8000da20:	00852423          	sw	s0,8(a0)
8000da24:	00862623          	sw	s0,12(a2)
8000da28:	e71ff06f          	j	8000d898 <_malloc_r+0x27c>
8000da2c:	01400693          	li	a3,20
8000da30:	00c6e663          	bltu	a3,a2,8000da3c <_malloc_r+0x420>
8000da34:	05b60693          	addi	a3,a2,91
8000da38:	fb5ff06f          	j	8000d9ec <_malloc_r+0x3d0>
8000da3c:	05400693          	li	a3,84
8000da40:	00c6e863          	bltu	a3,a2,8000da50 <_malloc_r+0x434>
8000da44:	00c75693          	srli	a3,a4,0xc
8000da48:	06e68693          	addi	a3,a3,110
8000da4c:	fa1ff06f          	j	8000d9ec <_malloc_r+0x3d0>
8000da50:	15400693          	li	a3,340
8000da54:	00c6e863          	bltu	a3,a2,8000da64 <_malloc_r+0x448>
8000da58:	00f75693          	srli	a3,a4,0xf
8000da5c:	07768693          	addi	a3,a3,119
8000da60:	f8dff06f          	j	8000d9ec <_malloc_r+0x3d0>
8000da64:	55400513          	li	a0,1364
8000da68:	07e00693          	li	a3,126
8000da6c:	f8c560e3          	bltu	a0,a2,8000d9ec <_malloc_r+0x3d0>
8000da70:	01275693          	srli	a3,a4,0x12
8000da74:	07c68693          	addi	a3,a3,124
8000da78:	f75ff06f          	j	8000d9ec <_malloc_r+0x3d0>
8000da7c:	00862603          	lw	a2,8(a2)
8000da80:	00c50863          	beq	a0,a2,8000da90 <_malloc_r+0x474>
8000da84:	00462683          	lw	a3,4(a2)
8000da88:	ffc6f693          	andi	a3,a3,-4
8000da8c:	fed768e3          	bltu	a4,a3,8000da7c <_malloc_r+0x460>
8000da90:	00c62503          	lw	a0,12(a2)
8000da94:	f85ff06f          	j	8000da18 <_malloc_r+0x3fc>
8000da98:	00442703          	lw	a4,4(s0)
8000da9c:	00c42603          	lw	a2,12(s0)
8000daa0:	ffc77713          	andi	a4,a4,-4
8000daa4:	409708b3          	sub	a7,a4,s1
8000daa8:	051e5063          	ble	a7,t3,8000dae8 <_malloc_r+0x4cc>
8000daac:	0014e793          	ori	a5,s1,1
8000dab0:	00f42223          	sw	a5,4(s0)
8000dab4:	00842783          	lw	a5,8(s0)
8000dab8:	009406b3          	add	a3,s0,s1
8000dabc:	00e40733          	add	a4,s0,a4
8000dac0:	00c7a623          	sw	a2,12(a5)
8000dac4:	00f62423          	sw	a5,8(a2)
8000dac8:	00d92a23          	sw	a3,20(s2)
8000dacc:	00d92823          	sw	a3,16(s2)
8000dad0:	0018e793          	ori	a5,a7,1
8000dad4:	00b6a623          	sw	a1,12(a3)
8000dad8:	00b6a423          	sw	a1,8(a3)
8000dadc:	00f6a223          	sw	a5,4(a3)
8000dae0:	01172023          	sw	a7,0(a4)
8000dae4:	cc9ff06f          	j	8000d7ac <_malloc_r+0x190>
8000dae8:	0208c263          	bltz	a7,8000db0c <_malloc_r+0x4f0>
8000daec:	00e40733          	add	a4,s0,a4
8000daf0:	00472783          	lw	a5,4(a4)
8000daf4:	0017e793          	ori	a5,a5,1
8000daf8:	00f72223          	sw	a5,4(a4)
8000dafc:	00842783          	lw	a5,8(s0)
8000db00:	00c7a623          	sw	a2,12(a5)
8000db04:	00f62423          	sw	a5,8(a2)
8000db08:	ca5ff06f          	j	8000d7ac <_malloc_r+0x190>
8000db0c:	00060413          	mv	s0,a2
8000db10:	dd1ff06f          	j	8000d8e0 <_malloc_r+0x2c4>
8000db14:	ff868713          	addi	a4,a3,-8
8000db18:	0006a683          	lw	a3,0(a3)
8000db1c:	fff78793          	addi	a5,a5,-1
8000db20:	dce68ae3          	beq	a3,a4,8000d8f4 <_malloc_r+0x2d8>
8000db24:	de9ff06f          	j	8000d90c <_malloc_r+0x2f0>
8000db28:	00478793          	addi	a5,a5,4
8000db2c:	00131313          	slli	t1,t1,0x1
8000db30:	006776b3          	and	a3,a4,t1
8000db34:	fe068ae3          	beqz	a3,8000db28 <_malloc_r+0x50c>
8000db38:	d95ff06f          	j	8000d8cc <_malloc_r+0x2b0>
8000db3c:	00050793          	mv	a5,a0
8000db40:	ff1ff06f          	j	8000db30 <_malloc_r+0x514>
8000db44:	000017b7          	lui	a5,0x1
8000db48:	00f78793          	addi	a5,a5,15 # 100f <_HEAP_SIZE+0xf>
8000db4c:	00f40433          	add	s0,s0,a5
8000db50:	fffff7b7          	lui	a5,0xfffff
8000db54:	00f47433          	and	s0,s0,a5
8000db58:	e01ff06f          	j	8000d958 <_malloc_r+0x33c>
8000db5c:	e68a2603          	lw	a2,-408(s4)
8000db60:	fff00693          	li	a3,-1
8000db64:	0ad61663          	bne	a2,a3,8000dc10 <_malloc_r+0x5f4>
8000db68:	e76a2423          	sw	s6,-408(s4)
8000db6c:	007b7593          	andi	a1,s6,7
8000db70:	00058863          	beqz	a1,8000db80 <_malloc_r+0x564>
8000db74:	00800793          	li	a5,8
8000db78:	40b785b3          	sub	a1,a5,a1
8000db7c:	00bb0b33          	add	s6,s6,a1
8000db80:	000017b7          	lui	a5,0x1
8000db84:	00f585b3          	add	a1,a1,a5
8000db88:	008b0433          	add	s0,s6,s0
8000db8c:	fff78793          	addi	a5,a5,-1 # fff <_HEAP_SIZE-0x1>
8000db90:	00f47433          	and	s0,s0,a5
8000db94:	40858a33          	sub	s4,a1,s0
8000db98:	000a0593          	mv	a1,s4
8000db9c:	00098513          	mv	a0,s3
8000dba0:	00c010ef          	jal	ra,8000ebac <_sbrk_r>
8000dba4:	fff00793          	li	a5,-1
8000dba8:	00f51663          	bne	a0,a5,8000dbb4 <_malloc_r+0x598>
8000dbac:	000b0513          	mv	a0,s6
8000dbb0:	00000a13          	li	s4,0
8000dbb4:	000c2783          	lw	a5,0(s8)
8000dbb8:	41650533          	sub	a0,a0,s6
8000dbbc:	01692423          	sw	s6,8(s2)
8000dbc0:	014787b3          	add	a5,a5,s4
8000dbc4:	01450a33          	add	s4,a0,s4
8000dbc8:	001a6a13          	ori	s4,s4,1
8000dbcc:	00fc2023          	sw	a5,0(s8)
8000dbd0:	014b2223          	sw	s4,4(s6)
8000dbd4:	dd2b8ee3          	beq	s7,s2,8000d9b0 <_malloc_r+0x394>
8000dbd8:	00f00713          	li	a4,15
8000dbdc:	05576263          	bltu	a4,s5,8000dc20 <_malloc_r+0x604>
8000dbe0:	00100793          	li	a5,1
8000dbe4:	00fb2223          	sw	a5,4(s6)
8000dbe8:	00892783          	lw	a5,8(s2)
8000dbec:	0047a783          	lw	a5,4(a5)
8000dbf0:	ffc7f793          	andi	a5,a5,-4
8000dbf4:	40978733          	sub	a4,a5,s1
8000dbf8:	0097e663          	bltu	a5,s1,8000dc04 <_malloc_r+0x5e8>
8000dbfc:	00f00793          	li	a5,15
8000dc00:	04e7ce63          	blt	a5,a4,8000dc5c <_malloc_r+0x640>
8000dc04:	00098513          	mv	a0,s3
8000dc08:	110000ef          	jal	ra,8000dd18 <__malloc_unlock>
8000dc0c:	a59ff06f          	j	8000d664 <_malloc_r+0x48>
8000dc10:	40fb07b3          	sub	a5,s6,a5
8000dc14:	00e787b3          	add	a5,a5,a4
8000dc18:	00fc2023          	sw	a5,0(s8)
8000dc1c:	f51ff06f          	j	8000db6c <_malloc_r+0x550>
8000dc20:	004ba783          	lw	a5,4(s7)
8000dc24:	ff4a8413          	addi	s0,s5,-12
8000dc28:	ff847413          	andi	s0,s0,-8
8000dc2c:	0017f793          	andi	a5,a5,1
8000dc30:	0087e7b3          	or	a5,a5,s0
8000dc34:	00fba223          	sw	a5,4(s7)
8000dc38:	00500693          	li	a3,5
8000dc3c:	008b87b3          	add	a5,s7,s0
8000dc40:	00d7a223          	sw	a3,4(a5)
8000dc44:	00d7a423          	sw	a3,8(a5)
8000dc48:	d68774e3          	bleu	s0,a4,8000d9b0 <_malloc_r+0x394>
8000dc4c:	008b8593          	addi	a1,s7,8
8000dc50:	00098513          	mv	a0,s3
8000dc54:	b4cfd0ef          	jal	ra,8000afa0 <_free_r>
8000dc58:	d59ff06f          	j	8000d9b0 <_malloc_r+0x394>
8000dc5c:	00892403          	lw	s0,8(s2)
8000dc60:	0014e793          	ori	a5,s1,1
8000dc64:	00f42223          	sw	a5,4(s0)
8000dc68:	009407b3          	add	a5,s0,s1
8000dc6c:	00f92423          	sw	a5,8(s2)
8000dc70:	a8dff06f          	j	8000d6fc <_malloc_r+0xe0>

8000dc74 <_mbtowc_r>:
8000dc74:	800217b7          	lui	a5,0x80021
8000dc78:	e647a783          	lw	a5,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000dc7c:	0347a783          	lw	a5,52(a5)
8000dc80:	00079663          	bnez	a5,8000dc8c <_mbtowc_r+0x18>
8000dc84:	800217b7          	lui	a5,0x80021
8000dc88:	29878793          	addi	a5,a5,664 # 80021298 <__stack+0xfffe47cc>
8000dc8c:	0e47a303          	lw	t1,228(a5)
8000dc90:	00030067          	jr	t1

8000dc94 <__ascii_mbtowc>:
8000dc94:	02059a63          	bnez	a1,8000dcc8 <__ascii_mbtowc+0x34>
8000dc98:	ff010113          	addi	sp,sp,-16
8000dc9c:	00c10593          	addi	a1,sp,12
8000dca0:	00000513          	li	a0,0
8000dca4:	00060e63          	beqz	a2,8000dcc0 <__ascii_mbtowc+0x2c>
8000dca8:	ffe00513          	li	a0,-2
8000dcac:	00068a63          	beqz	a3,8000dcc0 <__ascii_mbtowc+0x2c>
8000dcb0:	00064783          	lbu	a5,0(a2)
8000dcb4:	00f5a023          	sw	a5,0(a1)
8000dcb8:	00064503          	lbu	a0,0(a2)
8000dcbc:	00a03533          	snez	a0,a0
8000dcc0:	01010113          	addi	sp,sp,16
8000dcc4:	00008067          	ret
8000dcc8:	00000513          	li	a0,0
8000dccc:	02060063          	beqz	a2,8000dcec <__ascii_mbtowc+0x58>
8000dcd0:	ffe00513          	li	a0,-2
8000dcd4:	00068c63          	beqz	a3,8000dcec <__ascii_mbtowc+0x58>
8000dcd8:	00064783          	lbu	a5,0(a2)
8000dcdc:	00f5a023          	sw	a5,0(a1)
8000dce0:	00064503          	lbu	a0,0(a2)
8000dce4:	00a03533          	snez	a0,a0
8000dce8:	00008067          	ret
8000dcec:	00008067          	ret

8000dcf0 <memchr>:
8000dcf0:	0ff5f593          	andi	a1,a1,255
8000dcf4:	00c50633          	add	a2,a0,a2
8000dcf8:	00c51663          	bne	a0,a2,8000dd04 <memchr+0x14>
8000dcfc:	00000513          	li	a0,0
8000dd00:	00008067          	ret
8000dd04:	00054783          	lbu	a5,0(a0)
8000dd08:	feb78ce3          	beq	a5,a1,8000dd00 <memchr+0x10>
8000dd0c:	00150513          	addi	a0,a0,1
8000dd10:	fe9ff06f          	j	8000dcf8 <memchr+0x8>

8000dd14 <__malloc_lock>:
8000dd14:	00008067          	ret

8000dd18 <__malloc_unlock>:
8000dd18:	00008067          	ret

8000dd1c <_Balloc>:
8000dd1c:	04c52783          	lw	a5,76(a0)
8000dd20:	ff010113          	addi	sp,sp,-16
8000dd24:	00912223          	sw	s1,4(sp)
8000dd28:	01212023          	sw	s2,0(sp)
8000dd2c:	00112623          	sw	ra,12(sp)
8000dd30:	00812423          	sw	s0,8(sp)
8000dd34:	00050493          	mv	s1,a0
8000dd38:	00058913          	mv	s2,a1
8000dd3c:	04078263          	beqz	a5,8000dd80 <_Balloc+0x64>
8000dd40:	04c4a703          	lw	a4,76(s1)
8000dd44:	00291793          	slli	a5,s2,0x2
8000dd48:	00f707b3          	add	a5,a4,a5
8000dd4c:	0007a503          	lw	a0,0(a5)
8000dd50:	06051063          	bnez	a0,8000ddb0 <_Balloc+0x94>
8000dd54:	00100413          	li	s0,1
8000dd58:	01241433          	sll	s0,s0,s2
8000dd5c:	00540613          	addi	a2,s0,5
8000dd60:	00261613          	slli	a2,a2,0x2
8000dd64:	00100593          	li	a1,1
8000dd68:	00048513          	mv	a0,s1
8000dd6c:	18c040ef          	jal	ra,80011ef8 <_calloc_r>
8000dd70:	02050263          	beqz	a0,8000dd94 <_Balloc+0x78>
8000dd74:	01252223          	sw	s2,4(a0)
8000dd78:	00852423          	sw	s0,8(a0)
8000dd7c:	03c0006f          	j	8000ddb8 <_Balloc+0x9c>
8000dd80:	02100613          	li	a2,33
8000dd84:	00400593          	li	a1,4
8000dd88:	170040ef          	jal	ra,80011ef8 <_calloc_r>
8000dd8c:	04a4a623          	sw	a0,76(s1)
8000dd90:	fa0518e3          	bnez	a0,8000dd40 <_Balloc+0x24>
8000dd94:	00000513          	li	a0,0
8000dd98:	00c12083          	lw	ra,12(sp)
8000dd9c:	00812403          	lw	s0,8(sp)
8000dda0:	00412483          	lw	s1,4(sp)
8000dda4:	00012903          	lw	s2,0(sp)
8000dda8:	01010113          	addi	sp,sp,16
8000ddac:	00008067          	ret
8000ddb0:	00052703          	lw	a4,0(a0)
8000ddb4:	00e7a023          	sw	a4,0(a5)
8000ddb8:	00052823          	sw	zero,16(a0)
8000ddbc:	00052623          	sw	zero,12(a0)
8000ddc0:	fd9ff06f          	j	8000dd98 <_Balloc+0x7c>

8000ddc4 <_Bfree>:
8000ddc4:	02058063          	beqz	a1,8000dde4 <_Bfree+0x20>
8000ddc8:	0045a783          	lw	a5,4(a1)
8000ddcc:	00279713          	slli	a4,a5,0x2
8000ddd0:	04c52783          	lw	a5,76(a0)
8000ddd4:	00e787b3          	add	a5,a5,a4
8000ddd8:	0007a703          	lw	a4,0(a5)
8000dddc:	00e5a023          	sw	a4,0(a1)
8000dde0:	00b7a023          	sw	a1,0(a5)
8000dde4:	00008067          	ret

8000dde8 <__multadd>:
8000dde8:	fd010113          	addi	sp,sp,-48
8000ddec:	01312e23          	sw	s3,28(sp)
8000ddf0:	00050993          	mv	s3,a0
8000ddf4:	00010537          	lui	a0,0x10
8000ddf8:	02812423          	sw	s0,40(sp)
8000ddfc:	02912223          	sw	s1,36(sp)
8000de00:	00058413          	mv	s0,a1
8000de04:	0105a483          	lw	s1,16(a1)
8000de08:	02112623          	sw	ra,44(sp)
8000de0c:	03212023          	sw	s2,32(sp)
8000de10:	01458593          	addi	a1,a1,20
8000de14:	00000813          	li	a6,0
8000de18:	fff50513          	addi	a0,a0,-1 # ffff <_HEAP_SIZE+0xefff>
8000de1c:	0005a783          	lw	a5,0(a1)
8000de20:	00458593          	addi	a1,a1,4
8000de24:	00180813          	addi	a6,a6,1
8000de28:	00a7f733          	and	a4,a5,a0
8000de2c:	02c70733          	mul	a4,a4,a2
8000de30:	0107d793          	srli	a5,a5,0x10
8000de34:	02c787b3          	mul	a5,a5,a2
8000de38:	00d70733          	add	a4,a4,a3
8000de3c:	01075693          	srli	a3,a4,0x10
8000de40:	00a77733          	and	a4,a4,a0
8000de44:	00d787b3          	add	a5,a5,a3
8000de48:	0107d693          	srli	a3,a5,0x10
8000de4c:	01079793          	slli	a5,a5,0x10
8000de50:	00e787b3          	add	a5,a5,a4
8000de54:	fef5ae23          	sw	a5,-4(a1)
8000de58:	fc9842e3          	blt	a6,s1,8000de1c <__multadd+0x34>
8000de5c:	06068463          	beqz	a3,8000dec4 <__multadd+0xdc>
8000de60:	00842783          	lw	a5,8(s0)
8000de64:	04f4c463          	blt	s1,a5,8000deac <__multadd+0xc4>
8000de68:	00442583          	lw	a1,4(s0)
8000de6c:	00098513          	mv	a0,s3
8000de70:	00d12623          	sw	a3,12(sp)
8000de74:	00158593          	addi	a1,a1,1
8000de78:	ea5ff0ef          	jal	ra,8000dd1c <_Balloc>
8000de7c:	01042603          	lw	a2,16(s0)
8000de80:	00c40593          	addi	a1,s0,12
8000de84:	00050913          	mv	s2,a0
8000de88:	00260613          	addi	a2,a2,2
8000de8c:	00261613          	slli	a2,a2,0x2
8000de90:	00c50513          	addi	a0,a0,12
8000de94:	eacfa0ef          	jal	ra,80008540 <memcpy>
8000de98:	00040593          	mv	a1,s0
8000de9c:	00098513          	mv	a0,s3
8000dea0:	f25ff0ef          	jal	ra,8000ddc4 <_Bfree>
8000dea4:	00c12683          	lw	a3,12(sp)
8000dea8:	00090413          	mv	s0,s2
8000deac:	00448793          	addi	a5,s1,4
8000deb0:	00279793          	slli	a5,a5,0x2
8000deb4:	00f407b3          	add	a5,s0,a5
8000deb8:	00d7a223          	sw	a3,4(a5)
8000debc:	00148493          	addi	s1,s1,1
8000dec0:	00942823          	sw	s1,16(s0)
8000dec4:	00040513          	mv	a0,s0
8000dec8:	02c12083          	lw	ra,44(sp)
8000decc:	02812403          	lw	s0,40(sp)
8000ded0:	02412483          	lw	s1,36(sp)
8000ded4:	02012903          	lw	s2,32(sp)
8000ded8:	01c12983          	lw	s3,28(sp)
8000dedc:	03010113          	addi	sp,sp,48
8000dee0:	00008067          	ret

8000dee4 <__s2b>:
8000dee4:	fd010113          	addi	sp,sp,-48
8000dee8:	00868793          	addi	a5,a3,8
8000deec:	01512a23          	sw	s5,20(sp)
8000def0:	00068a93          	mv	s5,a3
8000def4:	00900693          	li	a3,9
8000def8:	02812423          	sw	s0,40(sp)
8000defc:	02912223          	sw	s1,36(sp)
8000df00:	01412c23          	sw	s4,24(sp)
8000df04:	00058413          	mv	s0,a1
8000df08:	02d7c7b3          	div	a5,a5,a3
8000df0c:	02112623          	sw	ra,44(sp)
8000df10:	03212023          	sw	s2,32(sp)
8000df14:	01312e23          	sw	s3,28(sp)
8000df18:	00050a13          	mv	s4,a0
8000df1c:	00060493          	mv	s1,a2
8000df20:	00100693          	li	a3,1
8000df24:	00000593          	li	a1,0
8000df28:	08f6c663          	blt	a3,a5,8000dfb4 <__s2b+0xd0>
8000df2c:	000a0513          	mv	a0,s4
8000df30:	00e12623          	sw	a4,12(sp)
8000df34:	de9ff0ef          	jal	ra,8000dd1c <_Balloc>
8000df38:	00c12703          	lw	a4,12(sp)
8000df3c:	00100793          	li	a5,1
8000df40:	00f52823          	sw	a5,16(a0)
8000df44:	00e52a23          	sw	a4,20(a0)
8000df48:	00900793          	li	a5,9
8000df4c:	0697da63          	ble	s1,a5,8000dfc0 <__s2b+0xdc>
8000df50:	00940913          	addi	s2,s0,9
8000df54:	00090993          	mv	s3,s2
8000df58:	00940433          	add	s0,s0,s1
8000df5c:	00198993          	addi	s3,s3,1
8000df60:	fff9c683          	lbu	a3,-1(s3)
8000df64:	00050593          	mv	a1,a0
8000df68:	00a00613          	li	a2,10
8000df6c:	fd068693          	addi	a3,a3,-48
8000df70:	000a0513          	mv	a0,s4
8000df74:	e75ff0ef          	jal	ra,8000dde8 <__multadd>
8000df78:	fe8992e3          	bne	s3,s0,8000df5c <__s2b+0x78>
8000df7c:	00990433          	add	s0,s2,s1
8000df80:	ff840413          	addi	s0,s0,-8
8000df84:	408484b3          	sub	s1,s1,s0
8000df88:	009407b3          	add	a5,s0,s1
8000df8c:	0557c063          	blt	a5,s5,8000dfcc <__s2b+0xe8>
8000df90:	02c12083          	lw	ra,44(sp)
8000df94:	02812403          	lw	s0,40(sp)
8000df98:	02412483          	lw	s1,36(sp)
8000df9c:	02012903          	lw	s2,32(sp)
8000dfa0:	01c12983          	lw	s3,28(sp)
8000dfa4:	01812a03          	lw	s4,24(sp)
8000dfa8:	01412a83          	lw	s5,20(sp)
8000dfac:	03010113          	addi	sp,sp,48
8000dfb0:	00008067          	ret
8000dfb4:	00169693          	slli	a3,a3,0x1
8000dfb8:	00158593          	addi	a1,a1,1
8000dfbc:	f6dff06f          	j	8000df28 <__s2b+0x44>
8000dfc0:	00a40413          	addi	s0,s0,10
8000dfc4:	00900493          	li	s1,9
8000dfc8:	fbdff06f          	j	8000df84 <__s2b+0xa0>
8000dfcc:	00140413          	addi	s0,s0,1
8000dfd0:	fff44683          	lbu	a3,-1(s0)
8000dfd4:	00050593          	mv	a1,a0
8000dfd8:	00a00613          	li	a2,10
8000dfdc:	fd068693          	addi	a3,a3,-48
8000dfe0:	000a0513          	mv	a0,s4
8000dfe4:	e05ff0ef          	jal	ra,8000dde8 <__multadd>
8000dfe8:	fa1ff06f          	j	8000df88 <__s2b+0xa4>

8000dfec <__hi0bits>:
8000dfec:	ffff0737          	lui	a4,0xffff0
8000dff0:	00e57733          	and	a4,a0,a4
8000dff4:	00050793          	mv	a5,a0
8000dff8:	00000513          	li	a0,0
8000dffc:	00071663          	bnez	a4,8000e008 <__hi0bits+0x1c>
8000e000:	01079793          	slli	a5,a5,0x10
8000e004:	01000513          	li	a0,16
8000e008:	ff000737          	lui	a4,0xff000
8000e00c:	00e7f733          	and	a4,a5,a4
8000e010:	00071663          	bnez	a4,8000e01c <__hi0bits+0x30>
8000e014:	00850513          	addi	a0,a0,8
8000e018:	00879793          	slli	a5,a5,0x8
8000e01c:	f0000737          	lui	a4,0xf0000
8000e020:	00e7f733          	and	a4,a5,a4
8000e024:	00071663          	bnez	a4,8000e030 <__hi0bits+0x44>
8000e028:	00450513          	addi	a0,a0,4
8000e02c:	00479793          	slli	a5,a5,0x4
8000e030:	c0000737          	lui	a4,0xc0000
8000e034:	00e7f733          	and	a4,a5,a4
8000e038:	00071663          	bnez	a4,8000e044 <__hi0bits+0x58>
8000e03c:	00250513          	addi	a0,a0,2
8000e040:	00279793          	slli	a5,a5,0x2
8000e044:	0007cc63          	bltz	a5,8000e05c <__hi0bits+0x70>
8000e048:	00179713          	slli	a4,a5,0x1
8000e04c:	00075663          	bgez	a4,8000e058 <__hi0bits+0x6c>
8000e050:	00150513          	addi	a0,a0,1
8000e054:	00008067          	ret
8000e058:	02000513          	li	a0,32
8000e05c:	00008067          	ret

8000e060 <__lo0bits>:
8000e060:	00052783          	lw	a5,0(a0)
8000e064:	0077f713          	andi	a4,a5,7
8000e068:	02070e63          	beqz	a4,8000e0a4 <__lo0bits+0x44>
8000e06c:	0017f693          	andi	a3,a5,1
8000e070:	00000713          	li	a4,0
8000e074:	00069c63          	bnez	a3,8000e08c <__lo0bits+0x2c>
8000e078:	0027f713          	andi	a4,a5,2
8000e07c:	00070c63          	beqz	a4,8000e094 <__lo0bits+0x34>
8000e080:	0017d793          	srli	a5,a5,0x1
8000e084:	00f52023          	sw	a5,0(a0)
8000e088:	00100713          	li	a4,1
8000e08c:	00070513          	mv	a0,a4
8000e090:	00008067          	ret
8000e094:	0027d793          	srli	a5,a5,0x2
8000e098:	00f52023          	sw	a5,0(a0)
8000e09c:	00200713          	li	a4,2
8000e0a0:	fedff06f          	j	8000e08c <__lo0bits+0x2c>
8000e0a4:	01079693          	slli	a3,a5,0x10
8000e0a8:	0106d693          	srli	a3,a3,0x10
8000e0ac:	00000713          	li	a4,0
8000e0b0:	00069663          	bnez	a3,8000e0bc <__lo0bits+0x5c>
8000e0b4:	0107d793          	srli	a5,a5,0x10
8000e0b8:	01000713          	li	a4,16
8000e0bc:	0ff7f693          	andi	a3,a5,255
8000e0c0:	00069663          	bnez	a3,8000e0cc <__lo0bits+0x6c>
8000e0c4:	00870713          	addi	a4,a4,8 # c0000008 <__stack+0x3ffc353c>
8000e0c8:	0087d793          	srli	a5,a5,0x8
8000e0cc:	00f7f693          	andi	a3,a5,15
8000e0d0:	00069663          	bnez	a3,8000e0dc <__lo0bits+0x7c>
8000e0d4:	00470713          	addi	a4,a4,4
8000e0d8:	0047d793          	srli	a5,a5,0x4
8000e0dc:	0037f693          	andi	a3,a5,3
8000e0e0:	00069663          	bnez	a3,8000e0ec <__lo0bits+0x8c>
8000e0e4:	00270713          	addi	a4,a4,2
8000e0e8:	0027d793          	srli	a5,a5,0x2
8000e0ec:	0017f693          	andi	a3,a5,1
8000e0f0:	00069863          	bnez	a3,8000e100 <__lo0bits+0xa0>
8000e0f4:	0017d793          	srli	a5,a5,0x1
8000e0f8:	00078863          	beqz	a5,8000e108 <__lo0bits+0xa8>
8000e0fc:	00170713          	addi	a4,a4,1
8000e100:	00f52023          	sw	a5,0(a0)
8000e104:	f89ff06f          	j	8000e08c <__lo0bits+0x2c>
8000e108:	02000713          	li	a4,32
8000e10c:	f81ff06f          	j	8000e08c <__lo0bits+0x2c>

8000e110 <__i2b>:
8000e110:	ff010113          	addi	sp,sp,-16
8000e114:	00812423          	sw	s0,8(sp)
8000e118:	00058413          	mv	s0,a1
8000e11c:	00100593          	li	a1,1
8000e120:	00112623          	sw	ra,12(sp)
8000e124:	bf9ff0ef          	jal	ra,8000dd1c <_Balloc>
8000e128:	00852a23          	sw	s0,20(a0)
8000e12c:	00c12083          	lw	ra,12(sp)
8000e130:	00812403          	lw	s0,8(sp)
8000e134:	00100713          	li	a4,1
8000e138:	00e52823          	sw	a4,16(a0)
8000e13c:	01010113          	addi	sp,sp,16
8000e140:	00008067          	ret

8000e144 <__multiply>:
8000e144:	0105a703          	lw	a4,16(a1)
8000e148:	01062783          	lw	a5,16(a2)
8000e14c:	fd010113          	addi	sp,sp,-48
8000e150:	02912223          	sw	s1,36(sp)
8000e154:	02112623          	sw	ra,44(sp)
8000e158:	02812423          	sw	s0,40(sp)
8000e15c:	03212023          	sw	s2,32(sp)
8000e160:	01312e23          	sw	s3,28(sp)
8000e164:	00058493          	mv	s1,a1
8000e168:	00f75663          	ble	a5,a4,8000e174 <__multiply+0x30>
8000e16c:	00060493          	mv	s1,a2
8000e170:	00058613          	mv	a2,a1
8000e174:	0104a983          	lw	s3,16(s1)
8000e178:	01062903          	lw	s2,16(a2)
8000e17c:	0084a783          	lw	a5,8(s1)
8000e180:	0044a583          	lw	a1,4(s1)
8000e184:	01298433          	add	s0,s3,s2
8000e188:	0087d463          	ble	s0,a5,8000e190 <__multiply+0x4c>
8000e18c:	00158593          	addi	a1,a1,1
8000e190:	00c12623          	sw	a2,12(sp)
8000e194:	b89ff0ef          	jal	ra,8000dd1c <_Balloc>
8000e198:	00c12603          	lw	a2,12(sp)
8000e19c:	01450813          	addi	a6,a0,20
8000e1a0:	00241313          	slli	t1,s0,0x2
8000e1a4:	00680333          	add	t1,a6,t1
8000e1a8:	00080793          	mv	a5,a6
8000e1ac:	0467ec63          	bltu	a5,t1,8000e204 <__multiply+0xc0>
8000e1b0:	01448593          	addi	a1,s1,20
8000e1b4:	00299893          	slli	a7,s3,0x2
8000e1b8:	01460613          	addi	a2,a2,20
8000e1bc:	00291e13          	slli	t3,s2,0x2
8000e1c0:	000106b7          	lui	a3,0x10
8000e1c4:	011588b3          	add	a7,a1,a7
8000e1c8:	01c60e33          	add	t3,a2,t3
8000e1cc:	fff68693          	addi	a3,a3,-1 # ffff <_HEAP_SIZE+0xefff>
8000e1d0:	05c66063          	bltu	a2,t3,8000e210 <__multiply+0xcc>
8000e1d4:	00805863          	blez	s0,8000e1e4 <__multiply+0xa0>
8000e1d8:	ffc30313          	addi	t1,t1,-4
8000e1dc:	00032783          	lw	a5,0(t1)
8000e1e0:	12078663          	beqz	a5,8000e30c <__multiply+0x1c8>
8000e1e4:	00852823          	sw	s0,16(a0)
8000e1e8:	02c12083          	lw	ra,44(sp)
8000e1ec:	02812403          	lw	s0,40(sp)
8000e1f0:	02412483          	lw	s1,36(sp)
8000e1f4:	02012903          	lw	s2,32(sp)
8000e1f8:	01c12983          	lw	s3,28(sp)
8000e1fc:	03010113          	addi	sp,sp,48
8000e200:	00008067          	ret
8000e204:	0007a023          	sw	zero,0(a5)
8000e208:	00478793          	addi	a5,a5,4
8000e20c:	fa1ff06f          	j	8000e1ac <__multiply+0x68>
8000e210:	00062f03          	lw	t5,0(a2)
8000e214:	00df7f33          	and	t5,t5,a3
8000e218:	060f0463          	beqz	t5,8000e280 <__multiply+0x13c>
8000e21c:	00080f93          	mv	t6,a6
8000e220:	00058293          	mv	t0,a1
8000e224:	00000493          	li	s1,0
8000e228:	0002a703          	lw	a4,0(t0) # 800086dc <memset+0xb4>
8000e22c:	000fa383          	lw	t2,0(t6)
8000e230:	00428293          	addi	t0,t0,4
8000e234:	00d77eb3          	and	t4,a4,a3
8000e238:	03ee8eb3          	mul	t4,t4,t5
8000e23c:	00d3f7b3          	and	a5,t2,a3
8000e240:	0103d393          	srli	t2,t2,0x10
8000e244:	00fe8eb3          	add	t4,t4,a5
8000e248:	01075793          	srli	a5,a4,0x10
8000e24c:	03e787b3          	mul	a5,a5,t5
8000e250:	009e8eb3          	add	t4,t4,s1
8000e254:	010ed713          	srli	a4,t4,0x10
8000e258:	00defeb3          	and	t4,t4,a3
8000e25c:	007787b3          	add	a5,a5,t2
8000e260:	00e787b3          	add	a5,a5,a4
8000e264:	0107d493          	srli	s1,a5,0x10
8000e268:	01079793          	slli	a5,a5,0x10
8000e26c:	004f8713          	addi	a4,t6,4
8000e270:	01d7e7b3          	or	a5,a5,t4
8000e274:	fef72e23          	sw	a5,-4(a4)
8000e278:	0912e263          	bltu	t0,a7,8000e2fc <__multiply+0x1b8>
8000e27c:	009fa223          	sw	s1,4(t6)
8000e280:	00265283          	lhu	t0,2(a2)
8000e284:	06028663          	beqz	t0,8000e2f0 <__multiply+0x1ac>
8000e288:	00082783          	lw	a5,0(a6)
8000e28c:	00080e93          	mv	t4,a6
8000e290:	00058f13          	mv	t5,a1
8000e294:	00000f93          	li	t6,0
8000e298:	000f2703          	lw	a4,0(t5)
8000e29c:	002ed383          	lhu	t2,2(t4)
8000e2a0:	00d7f7b3          	and	a5,a5,a3
8000e2a4:	00d77733          	and	a4,a4,a3
8000e2a8:	02570733          	mul	a4,a4,t0
8000e2ac:	004f0f13          	addi	t5,t5,4
8000e2b0:	00770733          	add	a4,a4,t2
8000e2b4:	01f70733          	add	a4,a4,t6
8000e2b8:	01071f93          	slli	t6,a4,0x10
8000e2bc:	00ffe7b3          	or	a5,t6,a5
8000e2c0:	004e8393          	addi	t2,t4,4
8000e2c4:	fef3ae23          	sw	a5,-4(t2)
8000e2c8:	ffef5783          	lhu	a5,-2(t5)
8000e2cc:	004eaf83          	lw	t6,4(t4)
8000e2d0:	01075713          	srli	a4,a4,0x10
8000e2d4:	025787b3          	mul	a5,a5,t0
8000e2d8:	00dfffb3          	and	t6,t6,a3
8000e2dc:	01f787b3          	add	a5,a5,t6
8000e2e0:	00e787b3          	add	a5,a5,a4
8000e2e4:	0107df93          	srli	t6,a5,0x10
8000e2e8:	011f6e63          	bltu	t5,a7,8000e304 <__multiply+0x1c0>
8000e2ec:	00fea223          	sw	a5,4(t4)
8000e2f0:	00460613          	addi	a2,a2,4
8000e2f4:	00480813          	addi	a6,a6,4
8000e2f8:	ed9ff06f          	j	8000e1d0 <__multiply+0x8c>
8000e2fc:	00070f93          	mv	t6,a4
8000e300:	f29ff06f          	j	8000e228 <__multiply+0xe4>
8000e304:	00038e93          	mv	t4,t2
8000e308:	f91ff06f          	j	8000e298 <__multiply+0x154>
8000e30c:	fff40413          	addi	s0,s0,-1
8000e310:	ec5ff06f          	j	8000e1d4 <__multiply+0x90>

8000e314 <__pow5mult>:
8000e314:	fe010113          	addi	sp,sp,-32
8000e318:	00912a23          	sw	s1,20(sp)
8000e31c:	01212823          	sw	s2,16(sp)
8000e320:	01312623          	sw	s3,12(sp)
8000e324:	00112e23          	sw	ra,28(sp)
8000e328:	00812c23          	sw	s0,24(sp)
8000e32c:	01412423          	sw	s4,8(sp)
8000e330:	00367793          	andi	a5,a2,3
8000e334:	00050913          	mv	s2,a0
8000e338:	00060493          	mv	s1,a2
8000e33c:	00058993          	mv	s3,a1
8000e340:	02078463          	beqz	a5,8000e368 <__pow5mult+0x54>
8000e344:	fff78793          	addi	a5,a5,-1
8000e348:	80020737          	lui	a4,0x80020
8000e34c:	4e870713          	addi	a4,a4,1256 # 800204e8 <__stack+0xfffe3a1c>
8000e350:	00279793          	slli	a5,a5,0x2
8000e354:	00f707b3          	add	a5,a4,a5
8000e358:	0007a603          	lw	a2,0(a5)
8000e35c:	00000693          	li	a3,0
8000e360:	a89ff0ef          	jal	ra,8000dde8 <__multadd>
8000e364:	00050993          	mv	s3,a0
8000e368:	4024d493          	srai	s1,s1,0x2
8000e36c:	08048063          	beqz	s1,8000e3ec <__pow5mult+0xd8>
8000e370:	04892403          	lw	s0,72(s2)
8000e374:	00041e63          	bnez	s0,8000e390 <__pow5mult+0x7c>
8000e378:	27100593          	li	a1,625
8000e37c:	00090513          	mv	a0,s2
8000e380:	d91ff0ef          	jal	ra,8000e110 <__i2b>
8000e384:	04a92423          	sw	a0,72(s2)
8000e388:	00050413          	mv	s0,a0
8000e38c:	00052023          	sw	zero,0(a0)
8000e390:	0014f793          	andi	a5,s1,1
8000e394:	02078463          	beqz	a5,8000e3bc <__pow5mult+0xa8>
8000e398:	00098593          	mv	a1,s3
8000e39c:	00040613          	mv	a2,s0
8000e3a0:	00090513          	mv	a0,s2
8000e3a4:	da1ff0ef          	jal	ra,8000e144 <__multiply>
8000e3a8:	00050a13          	mv	s4,a0
8000e3ac:	00098593          	mv	a1,s3
8000e3b0:	00090513          	mv	a0,s2
8000e3b4:	a11ff0ef          	jal	ra,8000ddc4 <_Bfree>
8000e3b8:	000a0993          	mv	s3,s4
8000e3bc:	4014d493          	srai	s1,s1,0x1
8000e3c0:	02048663          	beqz	s1,8000e3ec <__pow5mult+0xd8>
8000e3c4:	00042503          	lw	a0,0(s0)
8000e3c8:	00051e63          	bnez	a0,8000e3e4 <__pow5mult+0xd0>
8000e3cc:	00040613          	mv	a2,s0
8000e3d0:	00040593          	mv	a1,s0
8000e3d4:	00090513          	mv	a0,s2
8000e3d8:	d6dff0ef          	jal	ra,8000e144 <__multiply>
8000e3dc:	00a42023          	sw	a0,0(s0)
8000e3e0:	00052023          	sw	zero,0(a0)
8000e3e4:	00050413          	mv	s0,a0
8000e3e8:	fa9ff06f          	j	8000e390 <__pow5mult+0x7c>
8000e3ec:	01c12083          	lw	ra,28(sp)
8000e3f0:	01812403          	lw	s0,24(sp)
8000e3f4:	00098513          	mv	a0,s3
8000e3f8:	01412483          	lw	s1,20(sp)
8000e3fc:	01012903          	lw	s2,16(sp)
8000e400:	00c12983          	lw	s3,12(sp)
8000e404:	00812a03          	lw	s4,8(sp)
8000e408:	02010113          	addi	sp,sp,32
8000e40c:	00008067          	ret

8000e410 <__lshift>:
8000e410:	fd010113          	addi	sp,sp,-48
8000e414:	02912223          	sw	s1,36(sp)
8000e418:	00058493          	mv	s1,a1
8000e41c:	01312e23          	sw	s3,28(sp)
8000e420:	0104a983          	lw	s3,16(s1)
8000e424:	02812423          	sw	s0,40(sp)
8000e428:	0045a583          	lw	a1,4(a1)
8000e42c:	40565413          	srai	s0,a2,0x5
8000e430:	0084a783          	lw	a5,8(s1)
8000e434:	013409b3          	add	s3,s0,s3
8000e438:	03212023          	sw	s2,32(sp)
8000e43c:	01512a23          	sw	s5,20(sp)
8000e440:	02112623          	sw	ra,44(sp)
8000e444:	01412c23          	sw	s4,24(sp)
8000e448:	00050a93          	mv	s5,a0
8000e44c:	00198913          	addi	s2,s3,1
8000e450:	0d27c663          	blt	a5,s2,8000e51c <__lshift+0x10c>
8000e454:	000a8513          	mv	a0,s5
8000e458:	00c12623          	sw	a2,12(sp)
8000e45c:	8c1ff0ef          	jal	ra,8000dd1c <_Balloc>
8000e460:	00c12603          	lw	a2,12(sp)
8000e464:	01450793          	addi	a5,a0,20
8000e468:	00050a13          	mv	s4,a0
8000e46c:	00078693          	mv	a3,a5
8000e470:	00000713          	li	a4,0
8000e474:	00468693          	addi	a3,a3,4
8000e478:	0a874863          	blt	a4,s0,8000e528 <__lshift+0x118>
8000e47c:	00045463          	bgez	s0,8000e484 <__lshift+0x74>
8000e480:	00000413          	li	s0,0
8000e484:	0104a683          	lw	a3,16(s1)
8000e488:	00241413          	slli	s0,s0,0x2
8000e48c:	00878733          	add	a4,a5,s0
8000e490:	00269693          	slli	a3,a3,0x2
8000e494:	01448793          	addi	a5,s1,20
8000e498:	01f67613          	andi	a2,a2,31
8000e49c:	00d786b3          	add	a3,a5,a3
8000e4a0:	08060e63          	beqz	a2,8000e53c <__lshift+0x12c>
8000e4a4:	02000813          	li	a6,32
8000e4a8:	40c80833          	sub	a6,a6,a2
8000e4ac:	00000593          	li	a1,0
8000e4b0:	0007a503          	lw	a0,0(a5)
8000e4b4:	00470893          	addi	a7,a4,4
8000e4b8:	00478793          	addi	a5,a5,4
8000e4bc:	00c51533          	sll	a0,a0,a2
8000e4c0:	00b565b3          	or	a1,a0,a1
8000e4c4:	feb8ae23          	sw	a1,-4(a7)
8000e4c8:	ffc7a583          	lw	a1,-4(a5)
8000e4cc:	0105d5b3          	srl	a1,a1,a6
8000e4d0:	06d7e263          	bltu	a5,a3,8000e534 <__lshift+0x124>
8000e4d4:	00b72223          	sw	a1,4(a4)
8000e4d8:	00058463          	beqz	a1,8000e4e0 <__lshift+0xd0>
8000e4dc:	00298913          	addi	s2,s3,2
8000e4e0:	fff90913          	addi	s2,s2,-1
8000e4e4:	012a2823          	sw	s2,16(s4)
8000e4e8:	000a8513          	mv	a0,s5
8000e4ec:	00048593          	mv	a1,s1
8000e4f0:	8d5ff0ef          	jal	ra,8000ddc4 <_Bfree>
8000e4f4:	02c12083          	lw	ra,44(sp)
8000e4f8:	02812403          	lw	s0,40(sp)
8000e4fc:	000a0513          	mv	a0,s4
8000e500:	02412483          	lw	s1,36(sp)
8000e504:	02012903          	lw	s2,32(sp)
8000e508:	01c12983          	lw	s3,28(sp)
8000e50c:	01812a03          	lw	s4,24(sp)
8000e510:	01412a83          	lw	s5,20(sp)
8000e514:	03010113          	addi	sp,sp,48
8000e518:	00008067          	ret
8000e51c:	00158593          	addi	a1,a1,1
8000e520:	00179793          	slli	a5,a5,0x1
8000e524:	f2dff06f          	j	8000e450 <__lshift+0x40>
8000e528:	fe06ae23          	sw	zero,-4(a3)
8000e52c:	00170713          	addi	a4,a4,1
8000e530:	f45ff06f          	j	8000e474 <__lshift+0x64>
8000e534:	00088713          	mv	a4,a7
8000e538:	f79ff06f          	j	8000e4b0 <__lshift+0xa0>
8000e53c:	00478793          	addi	a5,a5,4
8000e540:	ffc7a603          	lw	a2,-4(a5)
8000e544:	00470713          	addi	a4,a4,4
8000e548:	fec72e23          	sw	a2,-4(a4)
8000e54c:	fed7e8e3          	bltu	a5,a3,8000e53c <__lshift+0x12c>
8000e550:	f91ff06f          	j	8000e4e0 <__lshift+0xd0>

8000e554 <__mcmp>:
8000e554:	01052783          	lw	a5,16(a0)
8000e558:	0105a703          	lw	a4,16(a1)
8000e55c:	40e787b3          	sub	a5,a5,a4
8000e560:	02079c63          	bnez	a5,8000e598 <__mcmp+0x44>
8000e564:	00271713          	slli	a4,a4,0x2
8000e568:	01450513          	addi	a0,a0,20
8000e56c:	01458593          	addi	a1,a1,20
8000e570:	00e506b3          	add	a3,a0,a4
8000e574:	00e585b3          	add	a1,a1,a4
8000e578:	ffc68693          	addi	a3,a3,-4
8000e57c:	ffc58593          	addi	a1,a1,-4
8000e580:	0006a603          	lw	a2,0(a3)
8000e584:	0005a703          	lw	a4,0(a1)
8000e588:	00e60c63          	beq	a2,a4,8000e5a0 <__mcmp+0x4c>
8000e58c:	fff00793          	li	a5,-1
8000e590:	00e66463          	bltu	a2,a4,8000e598 <__mcmp+0x44>
8000e594:	00100793          	li	a5,1
8000e598:	00078513          	mv	a0,a5
8000e59c:	00008067          	ret
8000e5a0:	fcd56ce3          	bltu	a0,a3,8000e578 <__mcmp+0x24>
8000e5a4:	ff5ff06f          	j	8000e598 <__mcmp+0x44>

8000e5a8 <__mdiff>:
8000e5a8:	fe010113          	addi	sp,sp,-32
8000e5ac:	00912a23          	sw	s1,20(sp)
8000e5b0:	00058493          	mv	s1,a1
8000e5b4:	01312623          	sw	s3,12(sp)
8000e5b8:	00060593          	mv	a1,a2
8000e5bc:	00050993          	mv	s3,a0
8000e5c0:	00048513          	mv	a0,s1
8000e5c4:	00812c23          	sw	s0,24(sp)
8000e5c8:	00112e23          	sw	ra,28(sp)
8000e5cc:	01212823          	sw	s2,16(sp)
8000e5d0:	00060413          	mv	s0,a2
8000e5d4:	f81ff0ef          	jal	ra,8000e554 <__mcmp>
8000e5d8:	02051c63          	bnez	a0,8000e610 <__mdiff+0x68>
8000e5dc:	00000593          	li	a1,0
8000e5e0:	00098513          	mv	a0,s3
8000e5e4:	f38ff0ef          	jal	ra,8000dd1c <_Balloc>
8000e5e8:	00100793          	li	a5,1
8000e5ec:	00f52823          	sw	a5,16(a0)
8000e5f0:	00052a23          	sw	zero,20(a0)
8000e5f4:	01c12083          	lw	ra,28(sp)
8000e5f8:	01812403          	lw	s0,24(sp)
8000e5fc:	01412483          	lw	s1,20(sp)
8000e600:	01012903          	lw	s2,16(sp)
8000e604:	00c12983          	lw	s3,12(sp)
8000e608:	02010113          	addi	sp,sp,32
8000e60c:	00008067          	ret
8000e610:	00100913          	li	s2,1
8000e614:	00054a63          	bltz	a0,8000e628 <__mdiff+0x80>
8000e618:	00040793          	mv	a5,s0
8000e61c:	00000913          	li	s2,0
8000e620:	00048413          	mv	s0,s1
8000e624:	00078493          	mv	s1,a5
8000e628:	00442583          	lw	a1,4(s0)
8000e62c:	00098513          	mv	a0,s3
8000e630:	eecff0ef          	jal	ra,8000dd1c <_Balloc>
8000e634:	01042303          	lw	t1,16(s0)
8000e638:	0104a883          	lw	a7,16(s1)
8000e63c:	01440613          	addi	a2,s0,20
8000e640:	00231e13          	slli	t3,t1,0x2
8000e644:	01448813          	addi	a6,s1,20
8000e648:	00289893          	slli	a7,a7,0x2
8000e64c:	00010eb7          	lui	t4,0x10
8000e650:	01252623          	sw	s2,12(a0)
8000e654:	01c60e33          	add	t3,a2,t3
8000e658:	011808b3          	add	a7,a6,a7
8000e65c:	01450693          	addi	a3,a0,20
8000e660:	00000f13          	li	t5,0
8000e664:	fffe8e93          	addi	t4,t4,-1 # ffff <_HEAP_SIZE+0xefff>
8000e668:	00062703          	lw	a4,0(a2)
8000e66c:	00082f83          	lw	t6,0(a6)
8000e670:	00468693          	addi	a3,a3,4
8000e674:	01d775b3          	and	a1,a4,t4
8000e678:	01dff7b3          	and	a5,t6,t4
8000e67c:	01e585b3          	add	a1,a1,t5
8000e680:	40f585b3          	sub	a1,a1,a5
8000e684:	010fdf93          	srli	t6,t6,0x10
8000e688:	01075793          	srli	a5,a4,0x10
8000e68c:	41f787b3          	sub	a5,a5,t6
8000e690:	4105d713          	srai	a4,a1,0x10
8000e694:	00e787b3          	add	a5,a5,a4
8000e698:	4107df13          	srai	t5,a5,0x10
8000e69c:	01d5f5b3          	and	a1,a1,t4
8000e6a0:	01079793          	slli	a5,a5,0x10
8000e6a4:	00b7e7b3          	or	a5,a5,a1
8000e6a8:	00480813          	addi	a6,a6,4
8000e6ac:	fef6ae23          	sw	a5,-4(a3)
8000e6b0:	00460613          	addi	a2,a2,4
8000e6b4:	fb186ae3          	bltu	a6,a7,8000e668 <__mdiff+0xc0>
8000e6b8:	000105b7          	lui	a1,0x10
8000e6bc:	fff58593          	addi	a1,a1,-1 # ffff <_HEAP_SIZE+0xefff>
8000e6c0:	01c66c63          	bltu	a2,t3,8000e6d8 <__mdiff+0x130>
8000e6c4:	ffc68693          	addi	a3,a3,-4
8000e6c8:	0006a783          	lw	a5,0(a3)
8000e6cc:	04078263          	beqz	a5,8000e710 <__mdiff+0x168>
8000e6d0:	00652823          	sw	t1,16(a0)
8000e6d4:	f21ff06f          	j	8000e5f4 <__mdiff+0x4c>
8000e6d8:	00062783          	lw	a5,0(a2)
8000e6dc:	00468693          	addi	a3,a3,4
8000e6e0:	00460613          	addi	a2,a2,4
8000e6e4:	00b7f733          	and	a4,a5,a1
8000e6e8:	01e70733          	add	a4,a4,t5
8000e6ec:	41075813          	srai	a6,a4,0x10
8000e6f0:	0107d793          	srli	a5,a5,0x10
8000e6f4:	010787b3          	add	a5,a5,a6
8000e6f8:	4107df13          	srai	t5,a5,0x10
8000e6fc:	00b77733          	and	a4,a4,a1
8000e700:	01079793          	slli	a5,a5,0x10
8000e704:	00e7e7b3          	or	a5,a5,a4
8000e708:	fef6ae23          	sw	a5,-4(a3)
8000e70c:	fb5ff06f          	j	8000e6c0 <__mdiff+0x118>
8000e710:	fff30313          	addi	t1,t1,-1
8000e714:	fb1ff06f          	j	8000e6c4 <__mdiff+0x11c>

8000e718 <__ulp>:
8000e718:	7ff007b7          	lui	a5,0x7ff00
8000e71c:	00b7f5b3          	and	a1,a5,a1
8000e720:	fcc007b7          	lui	a5,0xfcc00
8000e724:	00f585b3          	add	a1,a1,a5
8000e728:	00b05863          	blez	a1,8000e738 <__ulp+0x20>
8000e72c:	00000793          	li	a5,0
8000e730:	00078513          	mv	a0,a5
8000e734:	00008067          	ret
8000e738:	40b005b3          	neg	a1,a1
8000e73c:	4145d793          	srai	a5,a1,0x14
8000e740:	01300713          	li	a4,19
8000e744:	00f74863          	blt	a4,a5,8000e754 <__ulp+0x3c>
8000e748:	000805b7          	lui	a1,0x80
8000e74c:	40f5d5b3          	sra	a1,a1,a5
8000e750:	fddff06f          	j	8000e72c <__ulp+0x14>
8000e754:	fec78793          	addi	a5,a5,-20 # fcbfffec <__stack+0x7cbc3520>
8000e758:	01e00693          	li	a3,30
8000e75c:	00000593          	li	a1,0
8000e760:	00100713          	li	a4,1
8000e764:	00f6c663          	blt	a3,a5,8000e770 <__ulp+0x58>
8000e768:	fff7c793          	not	a5,a5
8000e76c:	00f71733          	sll	a4,a4,a5
8000e770:	00070793          	mv	a5,a4
8000e774:	fbdff06f          	j	8000e730 <__ulp+0x18>

8000e778 <__b2d>:
8000e778:	fd010113          	addi	sp,sp,-48
8000e77c:	02912223          	sw	s1,36(sp)
8000e780:	01052483          	lw	s1,16(a0)
8000e784:	01312e23          	sw	s3,28(sp)
8000e788:	01450993          	addi	s3,a0,20
8000e78c:	00249493          	slli	s1,s1,0x2
8000e790:	009984b3          	add	s1,s3,s1
8000e794:	02812423          	sw	s0,40(sp)
8000e798:	ffc4a403          	lw	s0,-4(s1)
8000e79c:	03212023          	sw	s2,32(sp)
8000e7a0:	00b12623          	sw	a1,12(sp)
8000e7a4:	00040513          	mv	a0,s0
8000e7a8:	02112623          	sw	ra,44(sp)
8000e7ac:	841ff0ef          	jal	ra,8000dfec <__hi0bits>
8000e7b0:	00c12583          	lw	a1,12(sp)
8000e7b4:	02000793          	li	a5,32
8000e7b8:	40a787b3          	sub	a5,a5,a0
8000e7bc:	00f5a023          	sw	a5,0(a1) # 80000 <_HEAP_SIZE+0x7f000>
8000e7c0:	00a00793          	li	a5,10
8000e7c4:	ffc48913          	addi	s2,s1,-4
8000e7c8:	04a7cc63          	blt	a5,a0,8000e820 <__b2d+0xa8>
8000e7cc:	00b00793          	li	a5,11
8000e7d0:	40a787b3          	sub	a5,a5,a0
8000e7d4:	3ff00737          	lui	a4,0x3ff00
8000e7d8:	00f456b3          	srl	a3,s0,a5
8000e7dc:	00e6e6b3          	or	a3,a3,a4
8000e7e0:	00000713          	li	a4,0
8000e7e4:	0129f463          	bleu	s2,s3,8000e7ec <__b2d+0x74>
8000e7e8:	ff84a703          	lw	a4,-8(s1)
8000e7ec:	01550513          	addi	a0,a0,21
8000e7f0:	00a41533          	sll	a0,s0,a0
8000e7f4:	00f757b3          	srl	a5,a4,a5
8000e7f8:	00f567b3          	or	a5,a0,a5
8000e7fc:	02c12083          	lw	ra,44(sp)
8000e800:	02812403          	lw	s0,40(sp)
8000e804:	02412483          	lw	s1,36(sp)
8000e808:	02012903          	lw	s2,32(sp)
8000e80c:	01c12983          	lw	s3,28(sp)
8000e810:	00078513          	mv	a0,a5
8000e814:	00068593          	mv	a1,a3
8000e818:	03010113          	addi	sp,sp,48
8000e81c:	00008067          	ret
8000e820:	00000793          	li	a5,0
8000e824:	0129f663          	bleu	s2,s3,8000e830 <__b2d+0xb8>
8000e828:	ff84a783          	lw	a5,-8(s1)
8000e82c:	ff848913          	addi	s2,s1,-8
8000e830:	ff550513          	addi	a0,a0,-11
8000e834:	02050e63          	beqz	a0,8000e870 <__b2d+0xf8>
8000e838:	02000713          	li	a4,32
8000e83c:	40a70633          	sub	a2,a4,a0
8000e840:	00a41433          	sll	s0,s0,a0
8000e844:	3ff00737          	lui	a4,0x3ff00
8000e848:	00e46433          	or	s0,s0,a4
8000e84c:	00c7d6b3          	srl	a3,a5,a2
8000e850:	00d466b3          	or	a3,s0,a3
8000e854:	00000713          	li	a4,0
8000e858:	0129f463          	bleu	s2,s3,8000e860 <__b2d+0xe8>
8000e85c:	ffc92703          	lw	a4,-4(s2)
8000e860:	00a797b3          	sll	a5,a5,a0
8000e864:	00c75733          	srl	a4,a4,a2
8000e868:	00e7e7b3          	or	a5,a5,a4
8000e86c:	f91ff06f          	j	8000e7fc <__b2d+0x84>
8000e870:	3ff006b7          	lui	a3,0x3ff00
8000e874:	00d466b3          	or	a3,s0,a3
8000e878:	f85ff06f          	j	8000e7fc <__b2d+0x84>

8000e87c <__d2b>:
8000e87c:	fd010113          	addi	sp,sp,-48
8000e880:	02812423          	sw	s0,40(sp)
8000e884:	00058413          	mv	s0,a1
8000e888:	00100593          	li	a1,1
8000e88c:	02912223          	sw	s1,36(sp)
8000e890:	03212023          	sw	s2,32(sp)
8000e894:	00060493          	mv	s1,a2
8000e898:	01312e23          	sw	s3,28(sp)
8000e89c:	01412c23          	sw	s4,24(sp)
8000e8a0:	00070913          	mv	s2,a4
8000e8a4:	02112623          	sw	ra,44(sp)
8000e8a8:	00068a13          	mv	s4,a3
8000e8ac:	c70ff0ef          	jal	ra,8000dd1c <_Balloc>
8000e8b0:	00100737          	lui	a4,0x100
8000e8b4:	fff70793          	addi	a5,a4,-1 # fffff <_HEAP_SIZE+0xfefff>
8000e8b8:	0097f7b3          	and	a5,a5,s1
8000e8bc:	0144d493          	srli	s1,s1,0x14
8000e8c0:	7ff4f493          	andi	s1,s1,2047
8000e8c4:	00050993          	mv	s3,a0
8000e8c8:	08049a63          	bnez	s1,8000e95c <__d2b+0xe0>
8000e8cc:	00f12623          	sw	a5,12(sp)
8000e8d0:	08040e63          	beqz	s0,8000e96c <__d2b+0xf0>
8000e8d4:	00810513          	addi	a0,sp,8
8000e8d8:	00812423          	sw	s0,8(sp)
8000e8dc:	f84ff0ef          	jal	ra,8000e060 <__lo0bits>
8000e8e0:	00812683          	lw	a3,8(sp)
8000e8e4:	08050063          	beqz	a0,8000e964 <__d2b+0xe8>
8000e8e8:	00c12703          	lw	a4,12(sp)
8000e8ec:	02000793          	li	a5,32
8000e8f0:	40a787b3          	sub	a5,a5,a0
8000e8f4:	00f717b3          	sll	a5,a4,a5
8000e8f8:	00d7e7b3          	or	a5,a5,a3
8000e8fc:	00a75733          	srl	a4,a4,a0
8000e900:	00f9aa23          	sw	a5,20(s3)
8000e904:	00e12623          	sw	a4,12(sp)
8000e908:	00c12403          	lw	s0,12(sp)
8000e90c:	0089ac23          	sw	s0,24(s3)
8000e910:	00803433          	snez	s0,s0
8000e914:	00140413          	addi	s0,s0,1
8000e918:	0089a823          	sw	s0,16(s3)
8000e91c:	06048a63          	beqz	s1,8000e990 <__d2b+0x114>
8000e920:	bcd48493          	addi	s1,s1,-1075
8000e924:	00a484b3          	add	s1,s1,a0
8000e928:	03500793          	li	a5,53
8000e92c:	009a2023          	sw	s1,0(s4)
8000e930:	40a78533          	sub	a0,a5,a0
8000e934:	00a92023          	sw	a0,0(s2)
8000e938:	02c12083          	lw	ra,44(sp)
8000e93c:	02812403          	lw	s0,40(sp)
8000e940:	00098513          	mv	a0,s3
8000e944:	02412483          	lw	s1,36(sp)
8000e948:	02012903          	lw	s2,32(sp)
8000e94c:	01c12983          	lw	s3,28(sp)
8000e950:	01812a03          	lw	s4,24(sp)
8000e954:	03010113          	addi	sp,sp,48
8000e958:	00008067          	ret
8000e95c:	00e7e7b3          	or	a5,a5,a4
8000e960:	f6dff06f          	j	8000e8cc <__d2b+0x50>
8000e964:	00d9aa23          	sw	a3,20(s3)
8000e968:	fa1ff06f          	j	8000e908 <__d2b+0x8c>
8000e96c:	00c10513          	addi	a0,sp,12
8000e970:	ef0ff0ef          	jal	ra,8000e060 <__lo0bits>
8000e974:	00c12783          	lw	a5,12(sp)
8000e978:	02050513          	addi	a0,a0,32
8000e97c:	00100413          	li	s0,1
8000e980:	00f9aa23          	sw	a5,20(s3)
8000e984:	00100793          	li	a5,1
8000e988:	00f9a823          	sw	a5,16(s3)
8000e98c:	f91ff06f          	j	8000e91c <__d2b+0xa0>
8000e990:	00241793          	slli	a5,s0,0x2
8000e994:	bce50513          	addi	a0,a0,-1074
8000e998:	00f987b3          	add	a5,s3,a5
8000e99c:	00aa2023          	sw	a0,0(s4)
8000e9a0:	0107a503          	lw	a0,16(a5)
8000e9a4:	00541413          	slli	s0,s0,0x5
8000e9a8:	e44ff0ef          	jal	ra,8000dfec <__hi0bits>
8000e9ac:	40a40433          	sub	s0,s0,a0
8000e9b0:	00892023          	sw	s0,0(s2)
8000e9b4:	f85ff06f          	j	8000e938 <__d2b+0xbc>

8000e9b8 <__ratio>:
8000e9b8:	fd010113          	addi	sp,sp,-48
8000e9bc:	03212023          	sw	s2,32(sp)
8000e9c0:	00058913          	mv	s2,a1
8000e9c4:	00810593          	addi	a1,sp,8
8000e9c8:	02112623          	sw	ra,44(sp)
8000e9cc:	02812423          	sw	s0,40(sp)
8000e9d0:	02912223          	sw	s1,36(sp)
8000e9d4:	01312e23          	sw	s3,28(sp)
8000e9d8:	01412c23          	sw	s4,24(sp)
8000e9dc:	00050a13          	mv	s4,a0
8000e9e0:	d99ff0ef          	jal	ra,8000e778 <__b2d>
8000e9e4:	00050993          	mv	s3,a0
8000e9e8:	00058493          	mv	s1,a1
8000e9ec:	00058413          	mv	s0,a1
8000e9f0:	00090513          	mv	a0,s2
8000e9f4:	00c10593          	addi	a1,sp,12
8000e9f8:	d81ff0ef          	jal	ra,8000e778 <__b2d>
8000e9fc:	01092783          	lw	a5,16(s2)
8000ea00:	010a2703          	lw	a4,16(s4)
8000ea04:	00812683          	lw	a3,8(sp)
8000ea08:	40f70733          	sub	a4,a4,a5
8000ea0c:	00c12783          	lw	a5,12(sp)
8000ea10:	00571713          	slli	a4,a4,0x5
8000ea14:	40f686b3          	sub	a3,a3,a5
8000ea18:	00d707b3          	add	a5,a4,a3
8000ea1c:	04f05463          	blez	a5,8000ea64 <__ratio+0xac>
8000ea20:	01479793          	slli	a5,a5,0x14
8000ea24:	00058613          	mv	a2,a1
8000ea28:	00978433          	add	s0,a5,s1
8000ea2c:	00060713          	mv	a4,a2
8000ea30:	00040593          	mv	a1,s0
8000ea34:	00050613          	mv	a2,a0
8000ea38:	00070693          	mv	a3,a4
8000ea3c:	00098513          	mv	a0,s3
8000ea40:	4e9050ef          	jal	ra,80014728 <__divdf3>
8000ea44:	02c12083          	lw	ra,44(sp)
8000ea48:	02812403          	lw	s0,40(sp)
8000ea4c:	02412483          	lw	s1,36(sp)
8000ea50:	02012903          	lw	s2,32(sp)
8000ea54:	01c12983          	lw	s3,28(sp)
8000ea58:	01812a03          	lw	s4,24(sp)
8000ea5c:	03010113          	addi	sp,sp,48
8000ea60:	00008067          	ret
8000ea64:	fff00737          	lui	a4,0xfff00
8000ea68:	02e787b3          	mul	a5,a5,a4
8000ea6c:	00b78633          	add	a2,a5,a1
8000ea70:	fbdff06f          	j	8000ea2c <__ratio+0x74>

8000ea74 <_mprec_log10>:
8000ea74:	ff010113          	addi	sp,sp,-16
8000ea78:	00812423          	sw	s0,8(sp)
8000ea7c:	00112623          	sw	ra,12(sp)
8000ea80:	01212223          	sw	s2,4(sp)
8000ea84:	01312023          	sw	s3,0(sp)
8000ea88:	01700793          	li	a5,23
8000ea8c:	00050413          	mv	s0,a0
8000ea90:	02a7ca63          	blt	a5,a0,8000eac4 <_mprec_log10+0x50>
8000ea94:	800207b7          	lui	a5,0x80020
8000ea98:	00351413          	slli	s0,a0,0x3
8000ea9c:	4e878793          	addi	a5,a5,1256 # 800204e8 <__stack+0xfffe3a1c>
8000eaa0:	00878433          	add	s0,a5,s0
8000eaa4:	01042503          	lw	a0,16(s0)
8000eaa8:	01442583          	lw	a1,20(s0)
8000eaac:	00c12083          	lw	ra,12(sp)
8000eab0:	00812403          	lw	s0,8(sp)
8000eab4:	00412903          	lw	s2,4(sp)
8000eab8:	00012983          	lw	s3,0(sp)
8000eabc:	01010113          	addi	sp,sp,16
8000eac0:	00008067          	ret
8000eac4:	800217b7          	lui	a5,0x80021
8000eac8:	e307a503          	lw	a0,-464(a5) # 80020e30 <__stack+0xfffe4364>
8000eacc:	e347a583          	lw	a1,-460(a5)
8000ead0:	800217b7          	lui	a5,0x80021
8000ead4:	e387a903          	lw	s2,-456(a5) # 80020e38 <__stack+0xfffe436c>
8000ead8:	e3c7a983          	lw	s3,-452(a5)
8000eadc:	00090613          	mv	a2,s2
8000eae0:	00098693          	mv	a3,s3
8000eae4:	fff40413          	addi	s0,s0,-1
8000eae8:	31c060ef          	jal	ra,80014e04 <__muldf3>
8000eaec:	fe0418e3          	bnez	s0,8000eadc <_mprec_log10+0x68>
8000eaf0:	fbdff06f          	j	8000eaac <_mprec_log10+0x38>

8000eaf4 <__copybits>:
8000eaf4:	fff58793          	addi	a5,a1,-1
8000eaf8:	01062703          	lw	a4,16(a2)
8000eafc:	4057d793          	srai	a5,a5,0x5
8000eb00:	00178793          	addi	a5,a5,1
8000eb04:	00279793          	slli	a5,a5,0x2
8000eb08:	01460693          	addi	a3,a2,20
8000eb0c:	00271713          	slli	a4,a4,0x2
8000eb10:	00f507b3          	add	a5,a0,a5
8000eb14:	00e68733          	add	a4,a3,a4
8000eb18:	00e6e663          	bltu	a3,a4,8000eb24 <__copybits+0x30>
8000eb1c:	00f56e63          	bltu	a0,a5,8000eb38 <__copybits+0x44>
8000eb20:	00008067          	ret
8000eb24:	00468693          	addi	a3,a3,4 # 3ff00004 <_HEAP_SIZE+0x3feff004>
8000eb28:	ffc6a603          	lw	a2,-4(a3)
8000eb2c:	00450513          	addi	a0,a0,4
8000eb30:	fec52e23          	sw	a2,-4(a0)
8000eb34:	fe5ff06f          	j	8000eb18 <__copybits+0x24>
8000eb38:	00450513          	addi	a0,a0,4
8000eb3c:	fe052e23          	sw	zero,-4(a0)
8000eb40:	fddff06f          	j	8000eb1c <__copybits+0x28>

8000eb44 <__any_on>:
8000eb44:	01052683          	lw	a3,16(a0)
8000eb48:	4055d793          	srai	a5,a1,0x5
8000eb4c:	01450713          	addi	a4,a0,20
8000eb50:	04f6c063          	blt	a3,a5,8000eb90 <__any_on+0x4c>
8000eb54:	02d7d463          	ble	a3,a5,8000eb7c <__any_on+0x38>
8000eb58:	01f5f593          	andi	a1,a1,31
8000eb5c:	02058063          	beqz	a1,8000eb7c <__any_on+0x38>
8000eb60:	00279693          	slli	a3,a5,0x2
8000eb64:	00d706b3          	add	a3,a4,a3
8000eb68:	0006a603          	lw	a2,0(a3)
8000eb6c:	00100513          	li	a0,1
8000eb70:	00b656b3          	srl	a3,a2,a1
8000eb74:	00b695b3          	sll	a1,a3,a1
8000eb78:	02b61863          	bne	a2,a1,8000eba8 <__any_on+0x64>
8000eb7c:	00279793          	slli	a5,a5,0x2
8000eb80:	00f707b3          	add	a5,a4,a5
8000eb84:	00f76a63          	bltu	a4,a5,8000eb98 <__any_on+0x54>
8000eb88:	00000513          	li	a0,0
8000eb8c:	00008067          	ret
8000eb90:	00068793          	mv	a5,a3
8000eb94:	fe9ff06f          	j	8000eb7c <__any_on+0x38>
8000eb98:	ffc78793          	addi	a5,a5,-4
8000eb9c:	0007a683          	lw	a3,0(a5)
8000eba0:	fe0682e3          	beqz	a3,8000eb84 <__any_on+0x40>
8000eba4:	00100513          	li	a0,1
8000eba8:	00008067          	ret

8000ebac <_sbrk_r>:
8000ebac:	ff010113          	addi	sp,sp,-16
8000ebb0:	00812423          	sw	s0,8(sp)
8000ebb4:	00912223          	sw	s1,4(sp)
8000ebb8:	8003b437          	lui	s0,0x8003b
8000ebbc:	00050493          	mv	s1,a0
8000ebc0:	00058513          	mv	a0,a1
8000ebc4:	00112623          	sw	ra,12(sp)
8000ebc8:	ac042423          	sw	zero,-1336(s0) # 8003aac8 <__stack+0xffffdffc>
8000ebcc:	fd9f70ef          	jal	ra,80006ba4 <_sbrk>
8000ebd0:	fff00793          	li	a5,-1
8000ebd4:	00f51863          	bne	a0,a5,8000ebe4 <_sbrk_r+0x38>
8000ebd8:	ac842783          	lw	a5,-1336(s0)
8000ebdc:	00078463          	beqz	a5,8000ebe4 <_sbrk_r+0x38>
8000ebe0:	00f4a023          	sw	a5,0(s1)
8000ebe4:	00c12083          	lw	ra,12(sp)
8000ebe8:	00812403          	lw	s0,8(sp)
8000ebec:	00412483          	lw	s1,4(sp)
8000ebf0:	01010113          	addi	sp,sp,16
8000ebf4:	00008067          	ret

8000ebf8 <frexp>:
8000ebf8:	ff010113          	addi	sp,sp,-16
8000ebfc:	00912223          	sw	s1,4(sp)
8000ec00:	800004b7          	lui	s1,0x80000
8000ec04:	00812423          	sw	s0,8(sp)
8000ec08:	00112623          	sw	ra,12(sp)
8000ec0c:	fff4c493          	not	s1,s1
8000ec10:	00b4f733          	and	a4,s1,a1
8000ec14:	00062023          	sw	zero,0(a2)
8000ec18:	7ff00837          	lui	a6,0x7ff00
8000ec1c:	00050693          	mv	a3,a0
8000ec20:	00058793          	mv	a5,a1
8000ec24:	00060413          	mv	s0,a2
8000ec28:	07075263          	ble	a6,a4,8000ec8c <frexp+0x94>
8000ec2c:	00a76833          	or	a6,a4,a0
8000ec30:	04080e63          	beqz	a6,8000ec8c <frexp+0x94>
8000ec34:	001007b7          	lui	a5,0x100
8000ec38:	00058613          	mv	a2,a1
8000ec3c:	02f75463          	ble	a5,a4,8000ec64 <frexp+0x6c>
8000ec40:	800217b7          	lui	a5,0x80021
8000ec44:	e407a603          	lw	a2,-448(a5) # 80020e40 <__stack+0xfffe4374>
8000ec48:	e447a683          	lw	a3,-444(a5)
8000ec4c:	1b8060ef          	jal	ra,80014e04 <__muldf3>
8000ec50:	fca00793          	li	a5,-54
8000ec54:	00050693          	mv	a3,a0
8000ec58:	00058613          	mv	a2,a1
8000ec5c:	00b4f733          	and	a4,s1,a1
8000ec60:	00f42023          	sw	a5,0(s0)
8000ec64:	00042783          	lw	a5,0(s0)
8000ec68:	41475713          	srai	a4,a4,0x14
8000ec6c:	c0270713          	addi	a4,a4,-1022 # ffeffc02 <__stack+0x7fec3136>
8000ec70:	00e78733          	add	a4,a5,a4
8000ec74:	801007b7          	lui	a5,0x80100
8000ec78:	fff78793          	addi	a5,a5,-1 # 800fffff <__stack+0xc3533>
8000ec7c:	00f67633          	and	a2,a2,a5
8000ec80:	3fe007b7          	lui	a5,0x3fe00
8000ec84:	00e42023          	sw	a4,0(s0)
8000ec88:	00f667b3          	or	a5,a2,a5
8000ec8c:	00c12083          	lw	ra,12(sp)
8000ec90:	00812403          	lw	s0,8(sp)
8000ec94:	00412483          	lw	s1,4(sp)
8000ec98:	00068513          	mv	a0,a3
8000ec9c:	00078593          	mv	a1,a5
8000eca0:	01010113          	addi	sp,sp,16
8000eca4:	00008067          	ret

8000eca8 <_sprintf_r>:
8000eca8:	f6010113          	addi	sp,sp,-160
8000ecac:	08f12a23          	sw	a5,148(sp)
8000ecb0:	800007b7          	lui	a5,0x80000
8000ecb4:	fff7c793          	not	a5,a5
8000ecb8:	00f12e23          	sw	a5,28(sp)
8000ecbc:	00f12823          	sw	a5,16(sp)
8000ecc0:	ffff07b7          	lui	a5,0xffff0
8000ecc4:	08d12623          	sw	a3,140(sp)
8000ecc8:	00b12423          	sw	a1,8(sp)
8000eccc:	00b12c23          	sw	a1,24(sp)
8000ecd0:	20878793          	addi	a5,a5,520 # ffff0208 <__stack+0x7ffb373c>
8000ecd4:	08c10693          	addi	a3,sp,140
8000ecd8:	00810593          	addi	a1,sp,8
8000ecdc:	06112e23          	sw	ra,124(sp)
8000ece0:	00f12a23          	sw	a5,20(sp)
8000ece4:	08e12823          	sw	a4,144(sp)
8000ece8:	09012c23          	sw	a6,152(sp)
8000ecec:	09112e23          	sw	a7,156(sp)
8000ecf0:	00d12223          	sw	a3,4(sp)
8000ecf4:	3c4000ef          	jal	ra,8000f0b8 <_svfprintf_r>
8000ecf8:	00812783          	lw	a5,8(sp)
8000ecfc:	00078023          	sb	zero,0(a5)
8000ed00:	07c12083          	lw	ra,124(sp)
8000ed04:	0a010113          	addi	sp,sp,160
8000ed08:	00008067          	ret

8000ed0c <sprintf>:
8000ed0c:	f6010113          	addi	sp,sp,-160
8000ed10:	08f12a23          	sw	a5,148(sp)
8000ed14:	800007b7          	lui	a5,0x80000
8000ed18:	fff7c793          	not	a5,a5
8000ed1c:	00f12e23          	sw	a5,28(sp)
8000ed20:	00f12823          	sw	a5,16(sp)
8000ed24:	ffff07b7          	lui	a5,0xffff0
8000ed28:	20878793          	addi	a5,a5,520 # ffff0208 <__stack+0x7ffb373c>
8000ed2c:	00f12a23          	sw	a5,20(sp)
8000ed30:	800217b7          	lui	a5,0x80021
8000ed34:	00a12423          	sw	a0,8(sp)
8000ed38:	00a12c23          	sw	a0,24(sp)
8000ed3c:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000ed40:	08c12423          	sw	a2,136(sp)
8000ed44:	08d12623          	sw	a3,140(sp)
8000ed48:	00058613          	mv	a2,a1
8000ed4c:	08810693          	addi	a3,sp,136
8000ed50:	00810593          	addi	a1,sp,8
8000ed54:	06112e23          	sw	ra,124(sp)
8000ed58:	08e12823          	sw	a4,144(sp)
8000ed5c:	09012c23          	sw	a6,152(sp)
8000ed60:	09112e23          	sw	a7,156(sp)
8000ed64:	00d12223          	sw	a3,4(sp)
8000ed68:	350000ef          	jal	ra,8000f0b8 <_svfprintf_r>
8000ed6c:	00812783          	lw	a5,8(sp)
8000ed70:	00078023          	sb	zero,0(a5)
8000ed74:	07c12083          	lw	ra,124(sp)
8000ed78:	0a010113          	addi	sp,sp,160
8000ed7c:	00008067          	ret

8000ed80 <__sread>:
8000ed80:	ff010113          	addi	sp,sp,-16
8000ed84:	00812423          	sw	s0,8(sp)
8000ed88:	00058413          	mv	s0,a1
8000ed8c:	00e59583          	lh	a1,14(a1)
8000ed90:	00112623          	sw	ra,12(sp)
8000ed94:	275030ef          	jal	ra,80012808 <_read_r>
8000ed98:	02054063          	bltz	a0,8000edb8 <__sread+0x38>
8000ed9c:	05042783          	lw	a5,80(s0)
8000eda0:	00a787b3          	add	a5,a5,a0
8000eda4:	04f42823          	sw	a5,80(s0)
8000eda8:	00c12083          	lw	ra,12(sp)
8000edac:	00812403          	lw	s0,8(sp)
8000edb0:	01010113          	addi	sp,sp,16
8000edb4:	00008067          	ret
8000edb8:	00c45783          	lhu	a5,12(s0)
8000edbc:	fffff737          	lui	a4,0xfffff
8000edc0:	fff70713          	addi	a4,a4,-1 # ffffefff <__stack+0x7ffc2533>
8000edc4:	00e7f7b3          	and	a5,a5,a4
8000edc8:	00f41623          	sh	a5,12(s0)
8000edcc:	fddff06f          	j	8000eda8 <__sread+0x28>

8000edd0 <__seofread>:
8000edd0:	00000513          	li	a0,0
8000edd4:	00008067          	ret

8000edd8 <__swrite>:
8000edd8:	00c5d783          	lhu	a5,12(a1)
8000eddc:	fe010113          	addi	sp,sp,-32
8000ede0:	00812c23          	sw	s0,24(sp)
8000ede4:	00912a23          	sw	s1,20(sp)
8000ede8:	01212823          	sw	s2,16(sp)
8000edec:	01312623          	sw	s3,12(sp)
8000edf0:	00112e23          	sw	ra,28(sp)
8000edf4:	1007f793          	andi	a5,a5,256
8000edf8:	00050493          	mv	s1,a0
8000edfc:	00058413          	mv	s0,a1
8000ee00:	00060913          	mv	s2,a2
8000ee04:	00068993          	mv	s3,a3
8000ee08:	00078a63          	beqz	a5,8000ee1c <__swrite+0x44>
8000ee0c:	00e59583          	lh	a1,14(a1)
8000ee10:	00200693          	li	a3,2
8000ee14:	00000613          	li	a2,0
8000ee18:	149030ef          	jal	ra,80012760 <_lseek_r>
8000ee1c:	00c45783          	lhu	a5,12(s0)
8000ee20:	fffff737          	lui	a4,0xfffff
8000ee24:	fff70713          	addi	a4,a4,-1 # ffffefff <__stack+0x7ffc2533>
8000ee28:	00e7f7b3          	and	a5,a5,a4
8000ee2c:	00f41623          	sh	a5,12(s0)
8000ee30:	00e41583          	lh	a1,14(s0)
8000ee34:	01812403          	lw	s0,24(sp)
8000ee38:	01c12083          	lw	ra,28(sp)
8000ee3c:	00098693          	mv	a3,s3
8000ee40:	00090613          	mv	a2,s2
8000ee44:	00c12983          	lw	s3,12(sp)
8000ee48:	01012903          	lw	s2,16(sp)
8000ee4c:	00048513          	mv	a0,s1
8000ee50:	01412483          	lw	s1,20(sp)
8000ee54:	02010113          	addi	sp,sp,32
8000ee58:	04c0306f          	j	80011ea4 <_write_r>

8000ee5c <__sseek>:
8000ee5c:	ff010113          	addi	sp,sp,-16
8000ee60:	00812423          	sw	s0,8(sp)
8000ee64:	00058413          	mv	s0,a1
8000ee68:	00e59583          	lh	a1,14(a1)
8000ee6c:	00112623          	sw	ra,12(sp)
8000ee70:	0f1030ef          	jal	ra,80012760 <_lseek_r>
8000ee74:	fff00793          	li	a5,-1
8000ee78:	00c45703          	lhu	a4,12(s0)
8000ee7c:	02f51263          	bne	a0,a5,8000eea0 <__sseek+0x44>
8000ee80:	fffff7b7          	lui	a5,0xfffff
8000ee84:	fff78793          	addi	a5,a5,-1 # ffffefff <__stack+0x7ffc2533>
8000ee88:	00e7f7b3          	and	a5,a5,a4
8000ee8c:	00f41623          	sh	a5,12(s0)
8000ee90:	00c12083          	lw	ra,12(sp)
8000ee94:	00812403          	lw	s0,8(sp)
8000ee98:	01010113          	addi	sp,sp,16
8000ee9c:	00008067          	ret
8000eea0:	000017b7          	lui	a5,0x1
8000eea4:	00f767b3          	or	a5,a4,a5
8000eea8:	00f41623          	sh	a5,12(s0)
8000eeac:	04a42823          	sw	a0,80(s0)
8000eeb0:	fe1ff06f          	j	8000ee90 <__sseek+0x34>

8000eeb4 <__sclose>:
8000eeb4:	00e59583          	lh	a1,14(a1)
8000eeb8:	0dc0306f          	j	80011f94 <_close_r>

8000eebc <strcmp>:
8000eebc:	00b56733          	or	a4,a0,a1
8000eec0:	fff00393          	li	t2,-1
8000eec4:	00377713          	andi	a4,a4,3
8000eec8:	10071063          	bnez	a4,8000efc8 <strcmp+0x10c>
8000eecc:	7f7f87b7          	lui	a5,0x7f7f8
8000eed0:	f7f78793          	addi	a5,a5,-129 # 7f7f7f7f <_HEAP_SIZE+0x7f7f6f7f>
8000eed4:	00052603          	lw	a2,0(a0)
8000eed8:	0005a683          	lw	a3,0(a1)
8000eedc:	00f672b3          	and	t0,a2,a5
8000eee0:	00f66333          	or	t1,a2,a5
8000eee4:	00f282b3          	add	t0,t0,a5
8000eee8:	0062e2b3          	or	t0,t0,t1
8000eeec:	10729263          	bne	t0,t2,8000eff0 <strcmp+0x134>
8000eef0:	08d61663          	bne	a2,a3,8000ef7c <strcmp+0xc0>
8000eef4:	00452603          	lw	a2,4(a0)
8000eef8:	0045a683          	lw	a3,4(a1)
8000eefc:	00f672b3          	and	t0,a2,a5
8000ef00:	00f66333          	or	t1,a2,a5
8000ef04:	00f282b3          	add	t0,t0,a5
8000ef08:	0062e2b3          	or	t0,t0,t1
8000ef0c:	0c729e63          	bne	t0,t2,8000efe8 <strcmp+0x12c>
8000ef10:	06d61663          	bne	a2,a3,8000ef7c <strcmp+0xc0>
8000ef14:	00852603          	lw	a2,8(a0)
8000ef18:	0085a683          	lw	a3,8(a1)
8000ef1c:	00f672b3          	and	t0,a2,a5
8000ef20:	00f66333          	or	t1,a2,a5
8000ef24:	00f282b3          	add	t0,t0,a5
8000ef28:	0062e2b3          	or	t0,t0,t1
8000ef2c:	0c729863          	bne	t0,t2,8000effc <strcmp+0x140>
8000ef30:	04d61663          	bne	a2,a3,8000ef7c <strcmp+0xc0>
8000ef34:	00c52603          	lw	a2,12(a0)
8000ef38:	00c5a683          	lw	a3,12(a1)
8000ef3c:	00f672b3          	and	t0,a2,a5
8000ef40:	00f66333          	or	t1,a2,a5
8000ef44:	00f282b3          	add	t0,t0,a5
8000ef48:	0062e2b3          	or	t0,t0,t1
8000ef4c:	0c729263          	bne	t0,t2,8000f010 <strcmp+0x154>
8000ef50:	02d61663          	bne	a2,a3,8000ef7c <strcmp+0xc0>
8000ef54:	01052603          	lw	a2,16(a0)
8000ef58:	0105a683          	lw	a3,16(a1)
8000ef5c:	00f672b3          	and	t0,a2,a5
8000ef60:	00f66333          	or	t1,a2,a5
8000ef64:	00f282b3          	add	t0,t0,a5
8000ef68:	0062e2b3          	or	t0,t0,t1
8000ef6c:	0a729c63          	bne	t0,t2,8000f024 <strcmp+0x168>
8000ef70:	01450513          	addi	a0,a0,20
8000ef74:	01458593          	addi	a1,a1,20
8000ef78:	f4d60ee3          	beq	a2,a3,8000eed4 <strcmp+0x18>
8000ef7c:	01061713          	slli	a4,a2,0x10
8000ef80:	01069793          	slli	a5,a3,0x10
8000ef84:	00f71e63          	bne	a4,a5,8000efa0 <strcmp+0xe4>
8000ef88:	01065713          	srli	a4,a2,0x10
8000ef8c:	0106d793          	srli	a5,a3,0x10
8000ef90:	40f70533          	sub	a0,a4,a5
8000ef94:	0ff57593          	andi	a1,a0,255
8000ef98:	02059063          	bnez	a1,8000efb8 <strcmp+0xfc>
8000ef9c:	00008067          	ret
8000efa0:	01075713          	srli	a4,a4,0x10
8000efa4:	0107d793          	srli	a5,a5,0x10
8000efa8:	40f70533          	sub	a0,a4,a5
8000efac:	0ff57593          	andi	a1,a0,255
8000efb0:	00059463          	bnez	a1,8000efb8 <strcmp+0xfc>
8000efb4:	00008067          	ret
8000efb8:	0ff77713          	andi	a4,a4,255
8000efbc:	0ff7f793          	andi	a5,a5,255
8000efc0:	40f70533          	sub	a0,a4,a5
8000efc4:	00008067          	ret
8000efc8:	00054603          	lbu	a2,0(a0)
8000efcc:	0005c683          	lbu	a3,0(a1)
8000efd0:	00150513          	addi	a0,a0,1
8000efd4:	00158593          	addi	a1,a1,1
8000efd8:	00d61463          	bne	a2,a3,8000efe0 <strcmp+0x124>
8000efdc:	fe0616e3          	bnez	a2,8000efc8 <strcmp+0x10c>
8000efe0:	40d60533          	sub	a0,a2,a3
8000efe4:	00008067          	ret
8000efe8:	00450513          	addi	a0,a0,4
8000efec:	00458593          	addi	a1,a1,4
8000eff0:	fcd61ce3          	bne	a2,a3,8000efc8 <strcmp+0x10c>
8000eff4:	00000513          	li	a0,0
8000eff8:	00008067          	ret
8000effc:	00850513          	addi	a0,a0,8
8000f000:	00858593          	addi	a1,a1,8
8000f004:	fcd612e3          	bne	a2,a3,8000efc8 <strcmp+0x10c>
8000f008:	00000513          	li	a0,0
8000f00c:	00008067          	ret
8000f010:	00c50513          	addi	a0,a0,12
8000f014:	00c58593          	addi	a1,a1,12
8000f018:	fad618e3          	bne	a2,a3,8000efc8 <strcmp+0x10c>
8000f01c:	00000513          	li	a0,0
8000f020:	00008067          	ret
8000f024:	01050513          	addi	a0,a0,16
8000f028:	01058593          	addi	a1,a1,16
8000f02c:	f8d61ee3          	bne	a2,a3,8000efc8 <strcmp+0x10c>
8000f030:	00000513          	li	a0,0
8000f034:	00008067          	ret

8000f038 <strcpy>:
8000f038:	00050793          	mv	a5,a0
8000f03c:	0005c703          	lbu	a4,0(a1)
8000f040:	00178793          	addi	a5,a5,1
8000f044:	00158593          	addi	a1,a1,1
8000f048:	fee78fa3          	sb	a4,-1(a5)
8000f04c:	fe0718e3          	bnez	a4,8000f03c <strcpy+0x4>
8000f050:	00008067          	ret

8000f054 <strlen>:
8000f054:	00050793          	mv	a5,a0
8000f058:	00178793          	addi	a5,a5,1
8000f05c:	fff7c703          	lbu	a4,-1(a5)
8000f060:	fe071ce3          	bnez	a4,8000f058 <strlen+0x4>
8000f064:	40a78533          	sub	a0,a5,a0
8000f068:	fff50513          	addi	a0,a0,-1
8000f06c:	00008067          	ret

8000f070 <strncpy>:
8000f070:	00050713          	mv	a4,a0
8000f074:	00061463          	bnez	a2,8000f07c <strncpy+0xc>
8000f078:	00008067          	ret
8000f07c:	00158593          	addi	a1,a1,1
8000f080:	fff5c683          	lbu	a3,-1(a1)
8000f084:	00170793          	addi	a5,a4,1
8000f088:	fff60813          	addi	a6,a2,-1
8000f08c:	fed78fa3          	sb	a3,-1(a5)
8000f090:	00069863          	bnez	a3,8000f0a0 <strncpy+0x30>
8000f094:	00c70733          	add	a4,a4,a2
8000f098:	00e79a63          	bne	a5,a4,8000f0ac <strncpy+0x3c>
8000f09c:	00008067          	ret
8000f0a0:	00078713          	mv	a4,a5
8000f0a4:	00080613          	mv	a2,a6
8000f0a8:	fcdff06f          	j	8000f074 <strncpy+0x4>
8000f0ac:	00178793          	addi	a5,a5,1
8000f0b0:	fe078fa3          	sb	zero,-1(a5)
8000f0b4:	fe5ff06f          	j	8000f098 <strncpy+0x28>

8000f0b8 <_svfprintf_r>:
8000f0b8:	e2010113          	addi	sp,sp,-480
8000f0bc:	1c112e23          	sw	ra,476(sp)
8000f0c0:	1c912a23          	sw	s1,468(sp)
8000f0c4:	1d212823          	sw	s2,464(sp)
8000f0c8:	1d312623          	sw	s3,460(sp)
8000f0cc:	1d512223          	sw	s5,452(sp)
8000f0d0:	00058993          	mv	s3,a1
8000f0d4:	00060493          	mv	s1,a2
8000f0d8:	00068a93          	mv	s5,a3
8000f0dc:	1c812c23          	sw	s0,472(sp)
8000f0e0:	1d412423          	sw	s4,456(sp)
8000f0e4:	1d612023          	sw	s6,448(sp)
8000f0e8:	1b712e23          	sw	s7,444(sp)
8000f0ec:	1b812c23          	sw	s8,440(sp)
8000f0f0:	1b912a23          	sw	s9,436(sp)
8000f0f4:	1ba12823          	sw	s10,432(sp)
8000f0f8:	1bb12623          	sw	s11,428(sp)
8000f0fc:	00050913          	mv	s2,a0
8000f100:	a80fe0ef          	jal	ra,8000d380 <_localeconv_r>
8000f104:	00052783          	lw	a5,0(a0)
8000f108:	00078513          	mv	a0,a5
8000f10c:	02f12a23          	sw	a5,52(sp)
8000f110:	f45ff0ef          	jal	ra,8000f054 <strlen>
8000f114:	00c9d783          	lhu	a5,12(s3)
8000f118:	02a12023          	sw	a0,32(sp)
8000f11c:	0e012023          	sw	zero,224(sp)
8000f120:	0e012223          	sw	zero,228(sp)
8000f124:	0e012423          	sw	zero,232(sp)
8000f128:	0e012623          	sw	zero,236(sp)
8000f12c:	0807f793          	andi	a5,a5,128
8000f130:	04078063          	beqz	a5,8000f170 <_svfprintf_r+0xb8>
8000f134:	0109a783          	lw	a5,16(s3)
8000f138:	02079c63          	bnez	a5,8000f170 <_svfprintf_r+0xb8>
8000f13c:	04000593          	li	a1,64
8000f140:	00090513          	mv	a0,s2
8000f144:	cd8fe0ef          	jal	ra,8000d61c <_malloc_r>
8000f148:	00a9a023          	sw	a0,0(s3)
8000f14c:	00a9a823          	sw	a0,16(s3)
8000f150:	00051c63          	bnez	a0,8000f168 <_svfprintf_r+0xb0>
8000f154:	00c00793          	li	a5,12
8000f158:	00f92023          	sw	a5,0(s2)
8000f15c:	fff00793          	li	a5,-1
8000f160:	02f12223          	sw	a5,36(sp)
8000f164:	5a00006f          	j	8000f704 <_svfprintf_r+0x64c>
8000f168:	04000793          	li	a5,64
8000f16c:	00f9aa23          	sw	a5,20(s3)
8000f170:	800207b7          	lui	a5,0x80020
8000f174:	61078793          	addi	a5,a5,1552 # 80020610 <__stack+0xfffe3b44>
8000f178:	04f12623          	sw	a5,76(sp)
8000f17c:	800207b7          	lui	a5,0x80020
8000f180:	0fc10893          	addi	a7,sp,252
8000f184:	78c78793          	addi	a5,a5,1932 # 8002078c <__stack+0xfffe3cc0>
8000f188:	0d112a23          	sw	a7,212(sp)
8000f18c:	0c012e23          	sw	zero,220(sp)
8000f190:	0c012c23          	sw	zero,216(sp)
8000f194:	00000a13          	li	s4,0
8000f198:	04012023          	sw	zero,64(sp)
8000f19c:	02012e23          	sw	zero,60(sp)
8000f1a0:	00012823          	sw	zero,16(sp)
8000f1a4:	02012823          	sw	zero,48(sp)
8000f1a8:	02012c23          	sw	zero,56(sp)
8000f1ac:	02012223          	sw	zero,36(sp)
8000f1b0:	00f12a23          	sw	a5,20(sp)
8000f1b4:	00048413          	mv	s0,s1
8000f1b8:	02500713          	li	a4,37
8000f1bc:	00044783          	lbu	a5,0(s0)
8000f1c0:	00078463          	beqz	a5,8000f1c8 <_svfprintf_r+0x110>
8000f1c4:	0ce79063          	bne	a5,a4,8000f284 <_svfprintf_r+0x1cc>
8000f1c8:	40940b33          	sub	s6,s0,s1
8000f1cc:	040b0a63          	beqz	s6,8000f220 <_svfprintf_r+0x168>
8000f1d0:	0dc12783          	lw	a5,220(sp)
8000f1d4:	0098a023          	sw	s1,0(a7)
8000f1d8:	0168a223          	sw	s6,4(a7)
8000f1dc:	016787b3          	add	a5,a5,s6
8000f1e0:	0cf12e23          	sw	a5,220(sp)
8000f1e4:	0d812783          	lw	a5,216(sp)
8000f1e8:	00700713          	li	a4,7
8000f1ec:	00888893          	addi	a7,a7,8
8000f1f0:	00178793          	addi	a5,a5,1
8000f1f4:	0cf12c23          	sw	a5,216(sp)
8000f1f8:	00f75e63          	ble	a5,a4,8000f214 <_svfprintf_r+0x15c>
8000f1fc:	0d410613          	addi	a2,sp,212
8000f200:	00098593          	mv	a1,s3
8000f204:	00090513          	mv	a0,s2
8000f208:	4fd030ef          	jal	ra,80012f04 <__ssprint_r>
8000f20c:	4e051663          	bnez	a0,8000f6f8 <_svfprintf_r+0x640>
8000f210:	0fc10893          	addi	a7,sp,252
8000f214:	02412783          	lw	a5,36(sp)
8000f218:	016787b3          	add	a5,a5,s6
8000f21c:	02f12223          	sw	a5,36(sp)
8000f220:	00044783          	lbu	a5,0(s0)
8000f224:	00079463          	bnez	a5,8000f22c <_svfprintf_r+0x174>
8000f228:	5ad0106f          	j	80010fd4 <_svfprintf_r+0x1f1c>
8000f22c:	00140793          	addi	a5,s0,1
8000f230:	00f12e23          	sw	a5,28(sp)
8000f234:	0a010ba3          	sb	zero,183(sp)
8000f238:	fff00b13          	li	s6,-1
8000f23c:	02012423          	sw	zero,40(sp)
8000f240:	00000413          	li	s0,0
8000f244:	00a00c13          	li	s8,10
8000f248:	02a00b93          	li	s7,42
8000f24c:	05a00613          	li	a2,90
8000f250:	00900713          	li	a4,9
8000f254:	01c12783          	lw	a5,28(sp)
8000f258:	0007cd03          	lbu	s10,0(a5)
8000f25c:	00178793          	addi	a5,a5,1
8000f260:	00f12e23          	sw	a5,28(sp)
8000f264:	fe0d0793          	addi	a5,s10,-32
8000f268:	00f67463          	bleu	a5,a2,8000f270 <_svfprintf_r+0x1b8>
8000f26c:	29c0106f          	j	80010508 <_svfprintf_r+0x1450>
8000f270:	04c12683          	lw	a3,76(sp)
8000f274:	00279793          	slli	a5,a5,0x2
8000f278:	00d787b3          	add	a5,a5,a3
8000f27c:	0007a783          	lw	a5,0(a5)
8000f280:	00078067          	jr	a5
8000f284:	00140413          	addi	s0,s0,1
8000f288:	f35ff06f          	j	8000f1bc <_svfprintf_r+0x104>
8000f28c:	800217b7          	lui	a5,0x80021
8000f290:	d9078793          	addi	a5,a5,-624 # 80020d90 <__stack+0xfffe42c4>
8000f294:	04f12023          	sw	a5,64(sp)
8000f298:	02047793          	andi	a5,s0,32
8000f29c:	00079463          	bnez	a5,8000f2a4 <_svfprintf_r+0x1ec>
8000f2a0:	0840106f          	j	80010324 <_svfprintf_r+0x126c>
8000f2a4:	007a8a93          	addi	s5,s5,7
8000f2a8:	ff8afa93          	andi	s5,s5,-8
8000f2ac:	000aac03          	lw	s8,0(s5)
8000f2b0:	004aac83          	lw	s9,4(s5)
8000f2b4:	008a8793          	addi	a5,s5,8
8000f2b8:	00f12c23          	sw	a5,24(sp)
8000f2bc:	00147793          	andi	a5,s0,1
8000f2c0:	00078e63          	beqz	a5,8000f2dc <_svfprintf_r+0x224>
8000f2c4:	019c67b3          	or	a5,s8,s9
8000f2c8:	00078a63          	beqz	a5,8000f2dc <_svfprintf_r+0x224>
8000f2cc:	03000793          	li	a5,48
8000f2d0:	0af10c23          	sb	a5,184(sp)
8000f2d4:	0ba10ca3          	sb	s10,185(sp)
8000f2d8:	00246413          	ori	s0,s0,2
8000f2dc:	bff47413          	andi	s0,s0,-1025
8000f2e0:	00200793          	li	a5,2
8000f2e4:	4510006f          	j	8000ff34 <_svfprintf_r+0xe7c>
8000f2e8:	00090513          	mv	a0,s2
8000f2ec:	01112623          	sw	a7,12(sp)
8000f2f0:	890fe0ef          	jal	ra,8000d380 <_localeconv_r>
8000f2f4:	00452783          	lw	a5,4(a0)
8000f2f8:	00078513          	mv	a0,a5
8000f2fc:	02f12c23          	sw	a5,56(sp)
8000f300:	d55ff0ef          	jal	ra,8000f054 <strlen>
8000f304:	02a12823          	sw	a0,48(sp)
8000f308:	00090513          	mv	a0,s2
8000f30c:	874fe0ef          	jal	ra,8000d380 <_localeconv_r>
8000f310:	00852783          	lw	a5,8(a0)
8000f314:	00c12883          	lw	a7,12(sp)
8000f318:	00f12823          	sw	a5,16(sp)
8000f31c:	03012783          	lw	a5,48(sp)
8000f320:	f20786e3          	beqz	a5,8000f24c <_svfprintf_r+0x194>
8000f324:	01012783          	lw	a5,16(sp)
8000f328:	f20782e3          	beqz	a5,8000f24c <_svfprintf_r+0x194>
8000f32c:	0007c783          	lbu	a5,0(a5)
8000f330:	f0078ee3          	beqz	a5,8000f24c <_svfprintf_r+0x194>
8000f334:	40046413          	ori	s0,s0,1024
8000f338:	f15ff06f          	j	8000f24c <_svfprintf_r+0x194>
8000f33c:	0b714783          	lbu	a5,183(sp)
8000f340:	f00796e3          	bnez	a5,8000f24c <_svfprintf_r+0x194>
8000f344:	02000793          	li	a5,32
8000f348:	0af10ba3          	sb	a5,183(sp)
8000f34c:	f01ff06f          	j	8000f24c <_svfprintf_r+0x194>
8000f350:	00146413          	ori	s0,s0,1
8000f354:	ef9ff06f          	j	8000f24c <_svfprintf_r+0x194>
8000f358:	000aa783          	lw	a5,0(s5)
8000f35c:	004a8a93          	addi	s5,s5,4
8000f360:	02f12423          	sw	a5,40(sp)
8000f364:	ee07d4e3          	bgez	a5,8000f24c <_svfprintf_r+0x194>
8000f368:	40f007b3          	neg	a5,a5
8000f36c:	02f12423          	sw	a5,40(sp)
8000f370:	00446413          	ori	s0,s0,4
8000f374:	ed9ff06f          	j	8000f24c <_svfprintf_r+0x194>
8000f378:	02b00793          	li	a5,43
8000f37c:	fcdff06f          	j	8000f348 <_svfprintf_r+0x290>
8000f380:	01c12683          	lw	a3,28(sp)
8000f384:	01c12783          	lw	a5,28(sp)
8000f388:	0006cd03          	lbu	s10,0(a3)
8000f38c:	00178793          	addi	a5,a5,1
8000f390:	037d1e63          	bne	s10,s7,8000f3cc <_svfprintf_r+0x314>
8000f394:	000aab03          	lw	s6,0(s5)
8000f398:	004a8713          	addi	a4,s5,4
8000f39c:	000b5463          	bgez	s6,8000f3a4 <_svfprintf_r+0x2ec>
8000f3a0:	fff00b13          	li	s6,-1
8000f3a4:	00070a93          	mv	s5,a4
8000f3a8:	00f12e23          	sw	a5,28(sp)
8000f3ac:	ea1ff06f          	j	8000f24c <_svfprintf_r+0x194>
8000f3b0:	038b0333          	mul	t1,s6,s8
8000f3b4:	00178793          	addi	a5,a5,1
8000f3b8:	fff7cd03          	lbu	s10,-1(a5)
8000f3bc:	00d30b33          	add	s6,t1,a3
8000f3c0:	fd0d0693          	addi	a3,s10,-48
8000f3c4:	fed776e3          	bleu	a3,a4,8000f3b0 <_svfprintf_r+0x2f8>
8000f3c8:	e99ff06f          	j	8000f260 <_svfprintf_r+0x1a8>
8000f3cc:	00000b13          	li	s6,0
8000f3d0:	ff1ff06f          	j	8000f3c0 <_svfprintf_r+0x308>
8000f3d4:	08046413          	ori	s0,s0,128
8000f3d8:	e75ff06f          	j	8000f24c <_svfprintf_r+0x194>
8000f3dc:	01c12783          	lw	a5,28(sp)
8000f3e0:	02012423          	sw	zero,40(sp)
8000f3e4:	02812683          	lw	a3,40(sp)
8000f3e8:	fd0d0d13          	addi	s10,s10,-48
8000f3ec:	00178793          	addi	a5,a5,1
8000f3f0:	038686b3          	mul	a3,a3,s8
8000f3f4:	00dd06b3          	add	a3,s10,a3
8000f3f8:	fff7cd03          	lbu	s10,-1(a5)
8000f3fc:	02d12423          	sw	a3,40(sp)
8000f400:	fd0d0693          	addi	a3,s10,-48
8000f404:	fed770e3          	bleu	a3,a4,8000f3e4 <_svfprintf_r+0x32c>
8000f408:	e59ff06f          	j	8000f260 <_svfprintf_r+0x1a8>
8000f40c:	00846413          	ori	s0,s0,8
8000f410:	e3dff06f          	j	8000f24c <_svfprintf_r+0x194>
8000f414:	01c12783          	lw	a5,28(sp)
8000f418:	0007c703          	lbu	a4,0(a5)
8000f41c:	06800793          	li	a5,104
8000f420:	00f71c63          	bne	a4,a5,8000f438 <_svfprintf_r+0x380>
8000f424:	01c12783          	lw	a5,28(sp)
8000f428:	20046413          	ori	s0,s0,512
8000f42c:	00178793          	addi	a5,a5,1
8000f430:	00f12e23          	sw	a5,28(sp)
8000f434:	e19ff06f          	j	8000f24c <_svfprintf_r+0x194>
8000f438:	04046413          	ori	s0,s0,64
8000f43c:	e11ff06f          	j	8000f24c <_svfprintf_r+0x194>
8000f440:	01c12783          	lw	a5,28(sp)
8000f444:	0007c703          	lbu	a4,0(a5)
8000f448:	06c00793          	li	a5,108
8000f44c:	00f71c63          	bne	a4,a5,8000f464 <_svfprintf_r+0x3ac>
8000f450:	01c12783          	lw	a5,28(sp)
8000f454:	00178793          	addi	a5,a5,1
8000f458:	00f12e23          	sw	a5,28(sp)
8000f45c:	02046413          	ori	s0,s0,32
8000f460:	dedff06f          	j	8000f24c <_svfprintf_r+0x194>
8000f464:	01046413          	ori	s0,s0,16
8000f468:	de5ff06f          	j	8000f24c <_svfprintf_r+0x194>
8000f46c:	004a8793          	addi	a5,s5,4
8000f470:	00f12c23          	sw	a5,24(sp)
8000f474:	000aa783          	lw	a5,0(s5)
8000f478:	0a010ba3          	sb	zero,183(sp)
8000f47c:	12f10e23          	sb	a5,316(sp)
8000f480:	00012623          	sw	zero,12(sp)
8000f484:	00100b13          	li	s6,1
8000f488:	00000a93          	li	s5,0
8000f48c:	00000c13          	li	s8,0
8000f490:	00000b93          	li	s7,0
8000f494:	00000c93          	li	s9,0
8000f498:	13c10493          	addi	s1,sp,316
8000f49c:	3a10006f          	j	8001003c <_svfprintf_r+0xf84>
8000f4a0:	01046413          	ori	s0,s0,16
8000f4a4:	02047793          	andi	a5,s0,32
8000f4a8:	04078e63          	beqz	a5,8000f504 <_svfprintf_r+0x44c>
8000f4ac:	007a8a93          	addi	s5,s5,7
8000f4b0:	ff8afa93          	andi	s5,s5,-8
8000f4b4:	000aac03          	lw	s8,0(s5)
8000f4b8:	004aac83          	lw	s9,4(s5)
8000f4bc:	008a8793          	addi	a5,s5,8
8000f4c0:	00f12c23          	sw	a5,24(sp)
8000f4c4:	000cde63          	bgez	s9,8000f4e0 <_svfprintf_r+0x428>
8000f4c8:	41800c33          	neg	s8,s8
8000f4cc:	018037b3          	snez	a5,s8
8000f4d0:	41900cb3          	neg	s9,s9
8000f4d4:	40fc8cb3          	sub	s9,s9,a5
8000f4d8:	02d00793          	li	a5,45
8000f4dc:	0af10ba3          	sb	a5,183(sp)
8000f4e0:	fff00793          	li	a5,-1
8000f4e4:	66fb1ee3          	bne	s6,a5,80010360 <_svfprintf_r+0x12a8>
8000f4e8:	700c90e3          	bnez	s9,800103e8 <_svfprintf_r+0x1330>
8000f4ec:	00900793          	li	a5,9
8000f4f0:	6f87ece3          	bltu	a5,s8,800103e8 <_svfprintf_r+0x1330>
8000f4f4:	030c0c13          	addi	s8,s8,48
8000f4f8:	19810fa3          	sb	s8,415(sp)
8000f4fc:	19f10493          	addi	s1,sp,415
8000f500:	6c10006f          	j	800103c0 <_svfprintf_r+0x1308>
8000f504:	004a8793          	addi	a5,s5,4
8000f508:	00f12c23          	sw	a5,24(sp)
8000f50c:	01047793          	andi	a5,s0,16
8000f510:	00078863          	beqz	a5,8000f520 <_svfprintf_r+0x468>
8000f514:	000aac03          	lw	s8,0(s5)
8000f518:	41fc5c93          	srai	s9,s8,0x1f
8000f51c:	fa9ff06f          	j	8000f4c4 <_svfprintf_r+0x40c>
8000f520:	04047793          	andi	a5,s0,64
8000f524:	000aac03          	lw	s8,0(s5)
8000f528:	00078863          	beqz	a5,8000f538 <_svfprintf_r+0x480>
8000f52c:	010c1c13          	slli	s8,s8,0x10
8000f530:	410c5c13          	srai	s8,s8,0x10
8000f534:	fe5ff06f          	j	8000f518 <_svfprintf_r+0x460>
8000f538:	20047793          	andi	a5,s0,512
8000f53c:	fc078ee3          	beqz	a5,8000f518 <_svfprintf_r+0x460>
8000f540:	018c1c13          	slli	s8,s8,0x18
8000f544:	418c5c13          	srai	s8,s8,0x18
8000f548:	fd1ff06f          	j	8000f518 <_svfprintf_r+0x460>
8000f54c:	00847793          	andi	a5,s0,8
8000f550:	0a078e63          	beqz	a5,8000f60c <_svfprintf_r+0x554>
8000f554:	004a8793          	addi	a5,s5,4
8000f558:	00f12c23          	sw	a5,24(sp)
8000f55c:	000aa783          	lw	a5,0(s5)
8000f560:	0007a603          	lw	a2,0(a5)
8000f564:	0047a683          	lw	a3,4(a5)
8000f568:	0087a703          	lw	a4,8(a5)
8000f56c:	00c7a783          	lw	a5,12(a5)
8000f570:	0ec12023          	sw	a2,224(sp)
8000f574:	0ed12223          	sw	a3,228(sp)
8000f578:	0ee12423          	sw	a4,232(sp)
8000f57c:	0ef12623          	sw	a5,236(sp)
8000f580:	0e010513          	addi	a0,sp,224
8000f584:	01112623          	sw	a7,12(sp)
8000f588:	d8dfd0ef          	jal	ra,8000d314 <_ldcheck>
8000f58c:	0aa12e23          	sw	a0,188(sp)
8000f590:	00200793          	li	a5,2
8000f594:	00c12883          	lw	a7,12(sp)
8000f598:	0cf51663          	bne	a0,a5,8000f664 <_svfprintf_r+0x5ac>
8000f59c:	0e012783          	lw	a5,224(sp)
8000f5a0:	09010593          	addi	a1,sp,144
8000f5a4:	0a010513          	addi	a0,sp,160
8000f5a8:	0af12023          	sw	a5,160(sp)
8000f5ac:	0e412783          	lw	a5,228(sp)
8000f5b0:	08012823          	sw	zero,144(sp)
8000f5b4:	08012a23          	sw	zero,148(sp)
8000f5b8:	0af12223          	sw	a5,164(sp)
8000f5bc:	0e812783          	lw	a5,232(sp)
8000f5c0:	08012c23          	sw	zero,152(sp)
8000f5c4:	08012e23          	sw	zero,156(sp)
8000f5c8:	0af12423          	sw	a5,168(sp)
8000f5cc:	0ec12783          	lw	a5,236(sp)
8000f5d0:	0af12623          	sw	a5,172(sp)
8000f5d4:	034060ef          	jal	ra,80015608 <__letf2>
8000f5d8:	00c12883          	lw	a7,12(sp)
8000f5dc:	00055663          	bgez	a0,8000f5e8 <_svfprintf_r+0x530>
8000f5e0:	02d00793          	li	a5,45
8000f5e4:	0af10ba3          	sb	a5,183(sp)
8000f5e8:	04700793          	li	a5,71
8000f5ec:	07a7c663          	blt	a5,s10,8000f658 <_svfprintf_r+0x5a0>
8000f5f0:	800214b7          	lui	s1,0x80021
8000f5f4:	d6c48493          	addi	s1,s1,-660 # 80020d6c <__stack+0xfffe42a0>
8000f5f8:	f7f47413          	andi	s0,s0,-129
8000f5fc:	00012623          	sw	zero,12(sp)
8000f600:	00300b13          	li	s6,3
8000f604:	00000a93          	li	s5,0
8000f608:	5c90006f          	j	800103d0 <_svfprintf_r+0x1318>
8000f60c:	007a8a93          	addi	s5,s5,7
8000f610:	ff8afa93          	andi	s5,s5,-8
8000f614:	000aa583          	lw	a1,0(s5)
8000f618:	004aa603          	lw	a2,4(s5)
8000f61c:	008a8793          	addi	a5,s5,8
8000f620:	0a010513          	addi	a0,sp,160
8000f624:	01112623          	sw	a7,12(sp)
8000f628:	00f12c23          	sw	a5,24(sp)
8000f62c:	11d080ef          	jal	ra,80017f48 <__extenddftf2>
8000f630:	0a012783          	lw	a5,160(sp)
8000f634:	00c12883          	lw	a7,12(sp)
8000f638:	0ef12023          	sw	a5,224(sp)
8000f63c:	0a412783          	lw	a5,164(sp)
8000f640:	0ef12223          	sw	a5,228(sp)
8000f644:	0a812783          	lw	a5,168(sp)
8000f648:	0ef12423          	sw	a5,232(sp)
8000f64c:	0ac12783          	lw	a5,172(sp)
8000f650:	0ef12623          	sw	a5,236(sp)
8000f654:	f2dff06f          	j	8000f580 <_svfprintf_r+0x4c8>
8000f658:	800214b7          	lui	s1,0x80021
8000f65c:	d7048493          	addi	s1,s1,-656 # 80020d70 <__stack+0xfffe42a4>
8000f660:	f99ff06f          	j	8000f5f8 <_svfprintf_r+0x540>
8000f664:	00100793          	li	a5,1
8000f668:	02f51a63          	bne	a0,a5,8000f69c <_svfprintf_r+0x5e4>
8000f66c:	0ec12783          	lw	a5,236(sp)
8000f670:	0007d663          	bgez	a5,8000f67c <_svfprintf_r+0x5c4>
8000f674:	02d00793          	li	a5,45
8000f678:	0af10ba3          	sb	a5,183(sp)
8000f67c:	04700793          	li	a5,71
8000f680:	01a7c863          	blt	a5,s10,8000f690 <_svfprintf_r+0x5d8>
8000f684:	800214b7          	lui	s1,0x80021
8000f688:	d7448493          	addi	s1,s1,-652 # 80020d74 <__stack+0xfffe42a8>
8000f68c:	f6dff06f          	j	8000f5f8 <_svfprintf_r+0x540>
8000f690:	800214b7          	lui	s1,0x80021
8000f694:	d7848493          	addi	s1,s1,-648 # 80020d78 <__stack+0xfffe42ac>
8000f698:	f61ff06f          	j	8000f5f8 <_svfprintf_r+0x540>
8000f69c:	fdfd7b93          	andi	s7,s10,-33
8000f6a0:	04100793          	li	a5,65
8000f6a4:	0afb9063          	bne	s7,a5,8000f744 <_svfprintf_r+0x68c>
8000f6a8:	03000793          	li	a5,48
8000f6ac:	0af10c23          	sb	a5,184(sp)
8000f6b0:	06100713          	li	a4,97
8000f6b4:	05800793          	li	a5,88
8000f6b8:	00ed1463          	bne	s10,a4,8000f6c0 <_svfprintf_r+0x608>
8000f6bc:	07800793          	li	a5,120
8000f6c0:	0af10ca3          	sb	a5,185(sp)
8000f6c4:	06300793          	li	a5,99
8000f6c8:	00246413          	ori	s0,s0,2
8000f6cc:	4f67d263          	ble	s6,a5,8000fbb0 <_svfprintf_r+0xaf8>
8000f6d0:	001b0593          	addi	a1,s6,1
8000f6d4:	00090513          	mv	a0,s2
8000f6d8:	01112623          	sw	a7,12(sp)
8000f6dc:	f41fd0ef          	jal	ra,8000d61c <_malloc_r>
8000f6e0:	00050493          	mv	s1,a0
8000f6e4:	00c12883          	lw	a7,12(sp)
8000f6e8:	4c051a63          	bnez	a0,8000fbbc <_svfprintf_r+0xb04>
8000f6ec:	00c9d783          	lhu	a5,12(s3)
8000f6f0:	0407e793          	ori	a5,a5,64
8000f6f4:	00f99623          	sh	a5,12(s3)
8000f6f8:	00c9d783          	lhu	a5,12(s3)
8000f6fc:	0407f793          	andi	a5,a5,64
8000f700:	a4079ee3          	bnez	a5,8000f15c <_svfprintf_r+0xa4>
8000f704:	1dc12083          	lw	ra,476(sp)
8000f708:	1d812403          	lw	s0,472(sp)
8000f70c:	02412503          	lw	a0,36(sp)
8000f710:	1d412483          	lw	s1,468(sp)
8000f714:	1d012903          	lw	s2,464(sp)
8000f718:	1cc12983          	lw	s3,460(sp)
8000f71c:	1c812a03          	lw	s4,456(sp)
8000f720:	1c412a83          	lw	s5,452(sp)
8000f724:	1c012b03          	lw	s6,448(sp)
8000f728:	1bc12b83          	lw	s7,444(sp)
8000f72c:	1b812c03          	lw	s8,440(sp)
8000f730:	1b412c83          	lw	s9,436(sp)
8000f734:	1b012d03          	lw	s10,432(sp)
8000f738:	1ac12d83          	lw	s11,428(sp)
8000f73c:	1e010113          	addi	sp,sp,480
8000f740:	00008067          	ret
8000f744:	fff00793          	li	a5,-1
8000f748:	46fb0e63          	beq	s6,a5,8000fbc4 <_svfprintf_r+0xb0c>
8000f74c:	04700793          	li	a5,71
8000f750:	00012623          	sw	zero,12(sp)
8000f754:	00fb9463          	bne	s7,a5,8000f75c <_svfprintf_r+0x6a4>
8000f758:	460b0c63          	beqz	s6,8000fbd0 <_svfprintf_r+0xb18>
8000f75c:	0ec12a83          	lw	s5,236(sp)
8000f760:	10046793          	ori	a5,s0,256
8000f764:	02f12623          	sw	a5,44(sp)
8000f768:	04012223          	sw	zero,68(sp)
8000f76c:	0e012e03          	lw	t3,224(sp)
8000f770:	0e412d83          	lw	s11,228(sp)
8000f774:	0e812c83          	lw	s9,232(sp)
8000f778:	000ada63          	bgez	s5,8000f78c <_svfprintf_r+0x6d4>
8000f77c:	800007b7          	lui	a5,0x80000
8000f780:	0157cab3          	xor	s5,a5,s5
8000f784:	02d00793          	li	a5,45
8000f788:	04f12223          	sw	a5,68(sp)
8000f78c:	04100793          	li	a5,65
8000f790:	48fb9a63          	bne	s7,a5,8000fc24 <_svfprintf_r+0xb6c>
8000f794:	0a010513          	addi	a0,sp,160
8000f798:	05112c23          	sw	a7,88(sp)
8000f79c:	0bc12023          	sw	t3,160(sp)
8000f7a0:	0b912423          	sw	s9,168(sp)
8000f7a4:	0bb12223          	sw	s11,164(sp)
8000f7a8:	0b512623          	sw	s5,172(sp)
8000f7ac:	1c1080ef          	jal	ra,8001816c <__trunctfdf2>
8000f7b0:	0bc10613          	addi	a2,sp,188
8000f7b4:	c44ff0ef          	jal	ra,8000ebf8 <frexp>
8000f7b8:	00058613          	mv	a2,a1
8000f7bc:	00050593          	mv	a1,a0
8000f7c0:	0a010513          	addi	a0,sp,160
8000f7c4:	784080ef          	jal	ra,80017f48 <__extenddftf2>
8000f7c8:	0a012783          	lw	a5,160(sp)
8000f7cc:	07010613          	addi	a2,sp,112
8000f7d0:	08010593          	addi	a1,sp,128
8000f7d4:	08f12023          	sw	a5,128(sp)
8000f7d8:	0a412783          	lw	a5,164(sp)
8000f7dc:	09010513          	addi	a0,sp,144
8000f7e0:	06012823          	sw	zero,112(sp)
8000f7e4:	08f12223          	sw	a5,132(sp)
8000f7e8:	0a812783          	lw	a5,168(sp)
8000f7ec:	06012a23          	sw	zero,116(sp)
8000f7f0:	06012c23          	sw	zero,120(sp)
8000f7f4:	08f12423          	sw	a5,136(sp)
8000f7f8:	0ac12783          	lw	a5,172(sp)
8000f7fc:	08f12623          	sw	a5,140(sp)
8000f800:	3ffc07b7          	lui	a5,0x3ffc0
8000f804:	06f12e23          	sw	a5,124(sp)
8000f808:	761050ef          	jal	ra,80015768 <__multf3>
8000f80c:	09012803          	lw	a6,144(sp)
8000f810:	09412603          	lw	a2,148(sp)
8000f814:	09812683          	lw	a3,152(sp)
8000f818:	09c12c83          	lw	s9,156(sp)
8000f81c:	09010593          	addi	a1,sp,144
8000f820:	0a010513          	addi	a0,sp,160
8000f824:	0b012023          	sw	a6,160(sp)
8000f828:	05012a23          	sw	a6,84(sp)
8000f82c:	0ac12223          	sw	a2,164(sp)
8000f830:	04c12823          	sw	a2,80(sp)
8000f834:	0ad12423          	sw	a3,168(sp)
8000f838:	04d12423          	sw	a3,72(sp)
8000f83c:	0b912623          	sw	s9,172(sp)
8000f840:	08012823          	sw	zero,144(sp)
8000f844:	08012a23          	sw	zero,148(sp)
8000f848:	08012c23          	sw	zero,152(sp)
8000f84c:	08012e23          	sw	zero,156(sp)
8000f850:	38d050ef          	jal	ra,800153dc <__eqtf2>
8000f854:	04812683          	lw	a3,72(sp)
8000f858:	05012603          	lw	a2,80(sp)
8000f85c:	05412803          	lw	a6,84(sp)
8000f860:	05812883          	lw	a7,88(sp)
8000f864:	00051663          	bnez	a0,8000f870 <_svfprintf_r+0x7b8>
8000f868:	00100713          	li	a4,1
8000f86c:	0ae12e23          	sw	a4,188(sp)
8000f870:	06100713          	li	a4,97
8000f874:	36ed1463          	bne	s10,a4,8000fbdc <_svfprintf_r+0xb24>
8000f878:	80021a37          	lui	s4,0x80021
8000f87c:	d7ca0a13          	addi	s4,s4,-644 # 80020d7c <__stack+0xfffe42b0>
8000f880:	fffb0e13          	addi	t3,s6,-1
8000f884:	00048d93          	mv	s11,s1
8000f888:	400307b7          	lui	a5,0x40030
8000f88c:	09010593          	addi	a1,sp,144
8000f890:	08c12a23          	sw	a2,148(sp)
8000f894:	0a010513          	addi	a0,sp,160
8000f898:	08010613          	addi	a2,sp,128
8000f89c:	05112c23          	sw	a7,88(sp)
8000f8a0:	05c12a23          	sw	t3,84(sp)
8000f8a4:	09012823          	sw	a6,144(sp)
8000f8a8:	08f12623          	sw	a5,140(sp)
8000f8ac:	08d12c23          	sw	a3,152(sp)
8000f8b0:	09912e23          	sw	s9,156(sp)
8000f8b4:	08012023          	sw	zero,128(sp)
8000f8b8:	08012223          	sw	zero,132(sp)
8000f8bc:	08012423          	sw	zero,136(sp)
8000f8c0:	6a9050ef          	jal	ra,80015768 <__multf3>
8000f8c4:	0a012603          	lw	a2,160(sp)
8000f8c8:	0a412683          	lw	a3,164(sp)
8000f8cc:	0a010513          	addi	a0,sp,160
8000f8d0:	04c12823          	sw	a2,80(sp)
8000f8d4:	04d12423          	sw	a3,72(sp)
8000f8d8:	38c080ef          	jal	ra,80017c64 <__fixtfsi>
8000f8dc:	00050593          	mv	a1,a0
8000f8e0:	00050a93          	mv	s5,a0
8000f8e4:	0a010513          	addi	a0,sp,160
8000f8e8:	0a812c83          	lw	s9,168(sp)
8000f8ec:	0ac12c03          	lw	s8,172(sp)
8000f8f0:	4d8080ef          	jal	ra,80017dc8 <__floatsitf>
8000f8f4:	0a012783          	lw	a5,160(sp)
8000f8f8:	05012603          	lw	a2,80(sp)
8000f8fc:	04812683          	lw	a3,72(sp)
8000f900:	06f12823          	sw	a5,112(sp)
8000f904:	0a412783          	lw	a5,164(sp)
8000f908:	08c12023          	sw	a2,128(sp)
8000f90c:	08010593          	addi	a1,sp,128
8000f910:	06f12a23          	sw	a5,116(sp)
8000f914:	0a812783          	lw	a5,168(sp)
8000f918:	07010613          	addi	a2,sp,112
8000f91c:	09010513          	addi	a0,sp,144
8000f920:	06f12c23          	sw	a5,120(sp)
8000f924:	0ac12783          	lw	a5,172(sp)
8000f928:	09912423          	sw	s9,136(sp)
8000f92c:	09812623          	sw	s8,140(sp)
8000f930:	06f12e23          	sw	a5,124(sp)
8000f934:	08d12223          	sw	a3,132(sp)
8000f938:	66d060ef          	jal	ra,800167a4 <__subtf3>
8000f93c:	015a05b3          	add	a1,s4,s5
8000f940:	0005c583          	lbu	a1,0(a1)
8000f944:	05412e03          	lw	t3,84(sp)
8000f948:	09c12c03          	lw	s8,156(sp)
8000f94c:	001d8d93          	addi	s11,s11,1
8000f950:	09012283          	lw	t0,144(sp)
8000f954:	09412f83          	lw	t6,148(sp)
8000f958:	09812f03          	lw	t5,152(sp)
8000f95c:	05c12423          	sw	t3,72(sp)
8000f960:	febd8fa3          	sb	a1,-1(s11)
8000f964:	fff00793          	li	a5,-1
8000f968:	000c0c93          	mv	s9,s8
8000f96c:	05812883          	lw	a7,88(sp)
8000f970:	06fe0c63          	beq	t3,a5,8000f9e8 <_svfprintf_r+0x930>
8000f974:	fffe0e13          	addi	t3,t3,-1
8000f978:	09010593          	addi	a1,sp,144
8000f97c:	0a010513          	addi	a0,sp,160
8000f980:	07e12623          	sw	t5,108(sp)
8000f984:	07f12423          	sw	t6,104(sp)
8000f988:	06512223          	sw	t0,100(sp)
8000f98c:	07112023          	sw	a7,96(sp)
8000f990:	05c12e23          	sw	t3,92(sp)
8000f994:	0a512023          	sw	t0,160(sp)
8000f998:	04512c23          	sw	t0,88(sp)
8000f99c:	0bf12223          	sw	t6,164(sp)
8000f9a0:	05f12a23          	sw	t6,84(sp)
8000f9a4:	0be12423          	sw	t5,168(sp)
8000f9a8:	05e12823          	sw	t5,80(sp)
8000f9ac:	0b812623          	sw	s8,172(sp)
8000f9b0:	08012823          	sw	zero,144(sp)
8000f9b4:	08012a23          	sw	zero,148(sp)
8000f9b8:	08012c23          	sw	zero,152(sp)
8000f9bc:	08012e23          	sw	zero,156(sp)
8000f9c0:	21d050ef          	jal	ra,800153dc <__eqtf2>
8000f9c4:	05012683          	lw	a3,80(sp)
8000f9c8:	05412603          	lw	a2,84(sp)
8000f9cc:	05812803          	lw	a6,88(sp)
8000f9d0:	05c12e03          	lw	t3,92(sp)
8000f9d4:	06012883          	lw	a7,96(sp)
8000f9d8:	06412283          	lw	t0,100(sp)
8000f9dc:	06812f83          	lw	t6,104(sp)
8000f9e0:	06c12f03          	lw	t5,108(sp)
8000f9e4:	ea0512e3          	bnez	a0,8000f888 <_svfprintf_r+0x7d0>
8000f9e8:	3ffe0cb7          	lui	s9,0x3ffe0
8000f9ec:	09010593          	addi	a1,sp,144
8000f9f0:	0a010513          	addi	a0,sp,160
8000f9f4:	05112823          	sw	a7,80(sp)
8000f9f8:	0a512023          	sw	t0,160(sp)
8000f9fc:	04512e23          	sw	t0,92(sp)
8000fa00:	0bf12223          	sw	t6,164(sp)
8000fa04:	05f12c23          	sw	t6,88(sp)
8000fa08:	0be12423          	sw	t5,168(sp)
8000fa0c:	05e12a23          	sw	t5,84(sp)
8000fa10:	0b812623          	sw	s8,172(sp)
8000fa14:	08012823          	sw	zero,144(sp)
8000fa18:	08012a23          	sw	zero,148(sp)
8000fa1c:	08012c23          	sw	zero,152(sp)
8000fa20:	09912e23          	sw	s9,156(sp)
8000fa24:	285050ef          	jal	ra,800154a8 <__getf2>
8000fa28:	05012883          	lw	a7,80(sp)
8000fa2c:	04a04663          	bgtz	a0,8000fa78 <_svfprintf_r+0x9c0>
8000fa30:	05c12283          	lw	t0,92(sp)
8000fa34:	05812f83          	lw	t6,88(sp)
8000fa38:	05412f03          	lw	t5,84(sp)
8000fa3c:	09010593          	addi	a1,sp,144
8000fa40:	0a010513          	addi	a0,sp,160
8000fa44:	0a512023          	sw	t0,160(sp)
8000fa48:	0bf12223          	sw	t6,164(sp)
8000fa4c:	0be12423          	sw	t5,168(sp)
8000fa50:	0b812623          	sw	s8,172(sp)
8000fa54:	08012823          	sw	zero,144(sp)
8000fa58:	08012a23          	sw	zero,148(sp)
8000fa5c:	08012c23          	sw	zero,152(sp)
8000fa60:	09912e23          	sw	s9,156(sp)
8000fa64:	179050ef          	jal	ra,800153dc <__eqtf2>
8000fa68:	05012883          	lw	a7,80(sp)
8000fa6c:	1a051263          	bnez	a0,8000fc10 <_svfprintf_r+0xb58>
8000fa70:	001afa93          	andi	s5,s5,1
8000fa74:	180a8e63          	beqz	s5,8000fc10 <_svfprintf_r+0xb58>
8000fa78:	00fa4603          	lbu	a2,15(s4)
8000fa7c:	0db12623          	sw	s11,204(sp)
8000fa80:	03000593          	li	a1,48
8000fa84:	0cc12683          	lw	a3,204(sp)
8000fa88:	fff68793          	addi	a5,a3,-1
8000fa8c:	0cf12623          	sw	a5,204(sp)
8000fa90:	fff6c783          	lbu	a5,-1(a3)
8000fa94:	14c78a63          	beq	a5,a2,8000fbe8 <_svfprintf_r+0xb30>
8000fa98:	03900613          	li	a2,57
8000fa9c:	14c79a63          	bne	a5,a2,8000fbf0 <_svfprintf_r+0xb38>
8000faa0:	00aa4783          	lbu	a5,10(s4)
8000faa4:	fef68fa3          	sb	a5,-1(a3)
8000faa8:	000d8a13          	mv	s4,s11
8000faac:	04700713          	li	a4,71
8000fab0:	409a0a33          	sub	s4,s4,s1
8000fab4:	0bc12c83          	lw	s9,188(sp)
8000fab8:	2aeb9863          	bne	s7,a4,8000fd68 <_svfprintf_r+0xcb0>
8000fabc:	ffd00713          	li	a4,-3
8000fac0:	00ecc463          	blt	s9,a4,8000fac8 <_svfprintf_r+0xa10>
8000fac4:	339b5463          	ble	s9,s6,8000fdec <_svfprintf_r+0xd34>
8000fac8:	ffed0d13          	addi	s10,s10,-2
8000facc:	fffc8693          	addi	a3,s9,-1 # 3ffdffff <_HEAP_SIZE+0x3ffdefff>
8000fad0:	0ad12e23          	sw	a3,188(sp)
8000fad4:	fdfd7613          	andi	a2,s10,-33
8000fad8:	04100513          	li	a0,65
8000fadc:	0ffd7713          	andi	a4,s10,255
8000fae0:	00000593          	li	a1,0
8000fae4:	00a61863          	bne	a2,a0,8000faf4 <_svfprintf_r+0xa3c>
8000fae8:	00f70713          	addi	a4,a4,15
8000faec:	0ff77713          	andi	a4,a4,255
8000faf0:	00100593          	li	a1,1
8000faf4:	0ce10223          	sb	a4,196(sp)
8000faf8:	02b00793          	li	a5,43
8000fafc:	0006d863          	bgez	a3,8000fb0c <_svfprintf_r+0xa54>
8000fb00:	00100693          	li	a3,1
8000fb04:	419686b3          	sub	a3,a3,s9
8000fb08:	02d00793          	li	a5,45
8000fb0c:	0cf102a3          	sb	a5,197(sp)
8000fb10:	00900793          	li	a5,9
8000fb14:	28d7de63          	ble	a3,a5,8000fdb0 <_svfprintf_r+0xcf8>
8000fb18:	0d310713          	addi	a4,sp,211
8000fb1c:	00070513          	mv	a0,a4
8000fb20:	00a00593          	li	a1,10
8000fb24:	00900813          	li	a6,9
8000fb28:	02b6e7b3          	rem	a5,a3,a1
8000fb2c:	fff70613          	addi	a2,a4,-1
8000fb30:	02b6c6b3          	div	a3,a3,a1
8000fb34:	03078793          	addi	a5,a5,48 # 40030030 <_HEAP_SIZE+0x4002f030>
8000fb38:	fef70fa3          	sb	a5,-1(a4)
8000fb3c:	24d84c63          	blt	a6,a3,8000fd94 <_svfprintf_r+0xcdc>
8000fb40:	03068793          	addi	a5,a3,48
8000fb44:	fef60fa3          	sb	a5,-1(a2)
8000fb48:	ffe70713          	addi	a4,a4,-2
8000fb4c:	0c610613          	addi	a2,sp,198
8000fb50:	24a76663          	bltu	a4,a0,8000fd9c <_svfprintf_r+0xce4>
8000fb54:	0c410793          	addi	a5,sp,196
8000fb58:	40f607b3          	sub	a5,a2,a5
8000fb5c:	02f12e23          	sw	a5,60(sp)
8000fb60:	01478b33          	add	s6,a5,s4
8000fb64:	00100793          	li	a5,1
8000fb68:	0147c663          	blt	a5,s4,8000fb74 <_svfprintf_r+0xabc>
8000fb6c:	00147793          	andi	a5,s0,1
8000fb70:	00078663          	beqz	a5,8000fb7c <_svfprintf_r+0xac4>
8000fb74:	02012783          	lw	a5,32(sp)
8000fb78:	00fb0b33          	add	s6,s6,a5
8000fb7c:	bff47413          	andi	s0,s0,-1025
8000fb80:	10046793          	ori	a5,s0,256
8000fb84:	02f12623          	sw	a5,44(sp)
8000fb88:	00000c13          	li	s8,0
8000fb8c:	00000b93          	li	s7,0
8000fb90:	00000c93          	li	s9,0
8000fb94:	04412783          	lw	a5,68(sp)
8000fb98:	00078663          	beqz	a5,8000fba4 <_svfprintf_r+0xaec>
8000fb9c:	02d00713          	li	a4,45
8000fba0:	0ae10ba3          	sb	a4,183(sp)
8000fba4:	02c12403          	lw	s0,44(sp)
8000fba8:	00000a93          	li	s5,0
8000fbac:	4900006f          	j	8001003c <_svfprintf_r+0xf84>
8000fbb0:	00012623          	sw	zero,12(sp)
8000fbb4:	13c10493          	addi	s1,sp,316
8000fbb8:	ba5ff06f          	j	8000f75c <_svfprintf_r+0x6a4>
8000fbbc:	00a12623          	sw	a0,12(sp)
8000fbc0:	b9dff06f          	j	8000f75c <_svfprintf_r+0x6a4>
8000fbc4:	00012623          	sw	zero,12(sp)
8000fbc8:	00600b13          	li	s6,6
8000fbcc:	b91ff06f          	j	8000f75c <_svfprintf_r+0x6a4>
8000fbd0:	01612623          	sw	s6,12(sp)
8000fbd4:	00100b13          	li	s6,1
8000fbd8:	b85ff06f          	j	8000f75c <_svfprintf_r+0x6a4>
8000fbdc:	80021a37          	lui	s4,0x80021
8000fbe0:	d90a0a13          	addi	s4,s4,-624 # 80020d90 <__stack+0xfffe42c4>
8000fbe4:	c9dff06f          	j	8000f880 <_svfprintf_r+0x7c8>
8000fbe8:	feb68fa3          	sb	a1,-1(a3)
8000fbec:	e99ff06f          	j	8000fa84 <_svfprintf_r+0x9cc>
8000fbf0:	00178793          	addi	a5,a5,1
8000fbf4:	0ff7f793          	andi	a5,a5,255
8000fbf8:	eadff06f          	j	8000faa4 <_svfprintf_r+0x9ec>
8000fbfc:	001a0a13          	addi	s4,s4,1
8000fc00:	feea0fa3          	sb	a4,-1(s4)
8000fc04:	414c07b3          	sub	a5,s8,s4
8000fc08:	fe07dae3          	bgez	a5,8000fbfc <_svfprintf_r+0xb44>
8000fc0c:	ea1ff06f          	j	8000faac <_svfprintf_r+0x9f4>
8000fc10:	04812783          	lw	a5,72(sp)
8000fc14:	000d8a13          	mv	s4,s11
8000fc18:	03000713          	li	a4,48
8000fc1c:	00fd8c33          	add	s8,s11,a5
8000fc20:	fe5ff06f          	j	8000fc04 <_svfprintf_r+0xb4c>
8000fc24:	04600793          	li	a5,70
8000fc28:	00fb8e63          	beq	s7,a5,8000fc44 <_svfprintf_r+0xb8c>
8000fc2c:	04500793          	li	a5,69
8000fc30:	001b0c13          	addi	s8,s6,1
8000fc34:	00fb8463          	beq	s7,a5,8000fc3c <_svfprintf_r+0xb84>
8000fc38:	000b0c13          	mv	s8,s6
8000fc3c:	00200613          	li	a2,2
8000fc40:	00c0006f          	j	8000fc4c <_svfprintf_r+0xb94>
8000fc44:	000b0c13          	mv	s8,s6
8000fc48:	00300613          	li	a2,3
8000fc4c:	0c010793          	addi	a5,sp,192
8000fc50:	0cc10813          	addi	a6,sp,204
8000fc54:	0bc10713          	addi	a4,sp,188
8000fc58:	000c0693          	mv	a3,s8
8000fc5c:	0a010593          	addi	a1,sp,160
8000fc60:	00090513          	mv	a0,s2
8000fc64:	05112823          	sw	a7,80(sp)
8000fc68:	0bc12023          	sw	t3,160(sp)
8000fc6c:	05c12423          	sw	t3,72(sp)
8000fc70:	0bb12223          	sw	s11,164(sp)
8000fc74:	0b912423          	sw	s9,168(sp)
8000fc78:	0b512623          	sw	s5,172(sp)
8000fc7c:	a4dfc0ef          	jal	ra,8000c6c8 <_ldtoa_r>
8000fc80:	04700793          	li	a5,71
8000fc84:	00050493          	mv	s1,a0
8000fc88:	04812e03          	lw	t3,72(sp)
8000fc8c:	05012883          	lw	a7,80(sp)
8000fc90:	00fb9663          	bne	s7,a5,8000fc9c <_svfprintf_r+0xbe4>
8000fc94:	00147793          	andi	a5,s0,1
8000fc98:	0a078863          	beqz	a5,8000fd48 <_svfprintf_r+0xc90>
8000fc9c:	04600793          	li	a5,70
8000fca0:	01848a33          	add	s4,s1,s8
8000fca4:	06fb9263          	bne	s7,a5,8000fd08 <_svfprintf_r+0xc50>
8000fca8:	0004c703          	lbu	a4,0(s1)
8000fcac:	03000793          	li	a5,48
8000fcb0:	04f71863          	bne	a4,a5,8000fd00 <_svfprintf_r+0xc48>
8000fcb4:	09010593          	addi	a1,sp,144
8000fcb8:	0a010513          	addi	a0,sp,160
8000fcbc:	05112823          	sw	a7,80(sp)
8000fcc0:	0bc12023          	sw	t3,160(sp)
8000fcc4:	05c12423          	sw	t3,72(sp)
8000fcc8:	0bb12223          	sw	s11,164(sp)
8000fccc:	0b912423          	sw	s9,168(sp)
8000fcd0:	0b512623          	sw	s5,172(sp)
8000fcd4:	08012823          	sw	zero,144(sp)
8000fcd8:	08012a23          	sw	zero,148(sp)
8000fcdc:	08012c23          	sw	zero,152(sp)
8000fce0:	08012e23          	sw	zero,156(sp)
8000fce4:	6f8050ef          	jal	ra,800153dc <__eqtf2>
8000fce8:	04812e03          	lw	t3,72(sp)
8000fcec:	05012883          	lw	a7,80(sp)
8000fcf0:	00050863          	beqz	a0,8000fd00 <_svfprintf_r+0xc48>
8000fcf4:	00100793          	li	a5,1
8000fcf8:	41878c33          	sub	s8,a5,s8
8000fcfc:	0b812e23          	sw	s8,188(sp)
8000fd00:	0bc12783          	lw	a5,188(sp)
8000fd04:	00fa0a33          	add	s4,s4,a5
8000fd08:	09010593          	addi	a1,sp,144
8000fd0c:	0a010513          	addi	a0,sp,160
8000fd10:	05112423          	sw	a7,72(sp)
8000fd14:	0bc12023          	sw	t3,160(sp)
8000fd18:	0bb12223          	sw	s11,164(sp)
8000fd1c:	0b912423          	sw	s9,168(sp)
8000fd20:	0b512623          	sw	s5,172(sp)
8000fd24:	08012823          	sw	zero,144(sp)
8000fd28:	08012a23          	sw	zero,148(sp)
8000fd2c:	08012c23          	sw	zero,152(sp)
8000fd30:	08012e23          	sw	zero,156(sp)
8000fd34:	6a8050ef          	jal	ra,800153dc <__eqtf2>
8000fd38:	04812883          	lw	a7,72(sp)
8000fd3c:	03000713          	li	a4,48
8000fd40:	00051e63          	bnez	a0,8000fd5c <_svfprintf_r+0xca4>
8000fd44:	0d412623          	sw	s4,204(sp)
8000fd48:	0cc12a03          	lw	s4,204(sp)
8000fd4c:	d61ff06f          	j	8000faac <_svfprintf_r+0x9f4>
8000fd50:	00178693          	addi	a3,a5,1
8000fd54:	0cd12623          	sw	a3,204(sp)
8000fd58:	00e78023          	sb	a4,0(a5)
8000fd5c:	0cc12783          	lw	a5,204(sp)
8000fd60:	ff47e8e3          	bltu	a5,s4,8000fd50 <_svfprintf_r+0xc98>
8000fd64:	fe5ff06f          	j	8000fd48 <_svfprintf_r+0xc90>
8000fd68:	04600713          	li	a4,70
8000fd6c:	d6eb90e3          	bne	s7,a4,8000facc <_svfprintf_r+0xa14>
8000fd70:	07905263          	blez	s9,8000fdd4 <_svfprintf_r+0xd1c>
8000fd74:	000b1663          	bnez	s6,8000fd80 <_svfprintf_r+0xcc8>
8000fd78:	00147713          	andi	a4,s0,1
8000fd7c:	0c070263          	beqz	a4,8000fe40 <_svfprintf_r+0xd88>
8000fd80:	02012783          	lw	a5,32(sp)
8000fd84:	00fc8733          	add	a4,s9,a5
8000fd88:	00eb0b33          	add	s6,s6,a4
8000fd8c:	06600d13          	li	s10,102
8000fd90:	0940006f          	j	8000fe24 <_svfprintf_r+0xd6c>
8000fd94:	00060713          	mv	a4,a2
8000fd98:	d91ff06f          	j	8000fb28 <_svfprintf_r+0xa70>
8000fd9c:	00170713          	addi	a4,a4,1
8000fda0:	fff74783          	lbu	a5,-1(a4)
8000fda4:	00160613          	addi	a2,a2,1
8000fda8:	fef60fa3          	sb	a5,-1(a2)
8000fdac:	da5ff06f          	j	8000fb50 <_svfprintf_r+0xa98>
8000fdb0:	0c610713          	addi	a4,sp,198
8000fdb4:	00059863          	bnez	a1,8000fdc4 <_svfprintf_r+0xd0c>
8000fdb8:	03000793          	li	a5,48
8000fdbc:	0cf10323          	sb	a5,198(sp)
8000fdc0:	0c710713          	addi	a4,sp,199
8000fdc4:	03068793          	addi	a5,a3,48
8000fdc8:	00170613          	addi	a2,a4,1
8000fdcc:	00f70023          	sb	a5,0(a4)
8000fdd0:	d85ff06f          	j	8000fb54 <_svfprintf_r+0xa9c>
8000fdd4:	000b1663          	bnez	s6,8000fde0 <_svfprintf_r+0xd28>
8000fdd8:	00147713          	andi	a4,s0,1
8000fddc:	06070663          	beqz	a4,8000fe48 <_svfprintf_r+0xd90>
8000fde0:	02012783          	lw	a5,32(sp)
8000fde4:	00178713          	addi	a4,a5,1
8000fde8:	fa1ff06f          	j	8000fd88 <_svfprintf_r+0xcd0>
8000fdec:	034cc063          	blt	s9,s4,8000fe0c <_svfprintf_r+0xd54>
8000fdf0:	00147713          	andi	a4,s0,1
8000fdf4:	000c8b13          	mv	s6,s9
8000fdf8:	00070663          	beqz	a4,8000fe04 <_svfprintf_r+0xd4c>
8000fdfc:	02012783          	lw	a5,32(sp)
8000fe00:	00fc8b33          	add	s6,s9,a5
8000fe04:	06700d13          	li	s10,103
8000fe08:	01c0006f          	j	8000fe24 <_svfprintf_r+0xd6c>
8000fe0c:	02012783          	lw	a5,32(sp)
8000fe10:	06700d13          	li	s10,103
8000fe14:	00fa0b33          	add	s6,s4,a5
8000fe18:	01904663          	bgtz	s9,8000fe24 <_svfprintf_r+0xd6c>
8000fe1c:	419b0333          	sub	t1,s6,s9
8000fe20:	00130b13          	addi	s6,t1,1
8000fe24:	40047b93          	andi	s7,s0,1024
8000fe28:	00000c13          	li	s8,0
8000fe2c:	d60b84e3          	beqz	s7,8000fb94 <_svfprintf_r+0xadc>
8000fe30:	00000b93          	li	s7,0
8000fe34:	d79050e3          	blez	s9,8000fb94 <_svfprintf_r+0xadc>
8000fe38:	0ff00693          	li	a3,255
8000fe3c:	0380006f          	j	8000fe74 <_svfprintf_r+0xdbc>
8000fe40:	000c8b13          	mv	s6,s9
8000fe44:	f49ff06f          	j	8000fd8c <_svfprintf_r+0xcd4>
8000fe48:	06600d13          	li	s10,102
8000fe4c:	00100b13          	li	s6,1
8000fe50:	fd5ff06f          	j	8000fe24 <_svfprintf_r+0xd6c>
8000fe54:	03975663          	ble	s9,a4,8000fe80 <_svfprintf_r+0xdc8>
8000fe58:	01012783          	lw	a5,16(sp)
8000fe5c:	40ec8cb3          	sub	s9,s9,a4
8000fe60:	0017c703          	lbu	a4,1(a5)
8000fe64:	02070863          	beqz	a4,8000fe94 <_svfprintf_r+0xddc>
8000fe68:	00178793          	addi	a5,a5,1
8000fe6c:	001b8b93          	addi	s7,s7,1
8000fe70:	00f12823          	sw	a5,16(sp)
8000fe74:	01012783          	lw	a5,16(sp)
8000fe78:	0007c703          	lbu	a4,0(a5)
8000fe7c:	fcd71ce3          	bne	a4,a3,8000fe54 <_svfprintf_r+0xd9c>
8000fe80:	03012783          	lw	a5,48(sp)
8000fe84:	018b8733          	add	a4,s7,s8
8000fe88:	02f70733          	mul	a4,a4,a5
8000fe8c:	01670b33          	add	s6,a4,s6
8000fe90:	d05ff06f          	j	8000fb94 <_svfprintf_r+0xadc>
8000fe94:	001c0c13          	addi	s8,s8,1
8000fe98:	fddff06f          	j	8000fe74 <_svfprintf_r+0xdbc>
8000fe9c:	004a8713          	addi	a4,s5,4
8000fea0:	00e12c23          	sw	a4,24(sp)
8000fea4:	02047713          	andi	a4,s0,32
8000fea8:	000aa783          	lw	a5,0(s5)
8000feac:	02070063          	beqz	a4,8000fecc <_svfprintf_r+0xe14>
8000feb0:	02412703          	lw	a4,36(sp)
8000feb4:	00e7a023          	sw	a4,0(a5)
8000feb8:	41f75713          	srai	a4,a4,0x1f
8000febc:	00e7a223          	sw	a4,4(a5)
8000fec0:	01812a83          	lw	s5,24(sp)
8000fec4:	01c12483          	lw	s1,28(sp)
8000fec8:	aecff06f          	j	8000f1b4 <_svfprintf_r+0xfc>
8000fecc:	01047713          	andi	a4,s0,16
8000fed0:	00070863          	beqz	a4,8000fee0 <_svfprintf_r+0xe28>
8000fed4:	02412703          	lw	a4,36(sp)
8000fed8:	00e7a023          	sw	a4,0(a5)
8000fedc:	fe5ff06f          	j	8000fec0 <_svfprintf_r+0xe08>
8000fee0:	04047713          	andi	a4,s0,64
8000fee4:	00070863          	beqz	a4,8000fef4 <_svfprintf_r+0xe3c>
8000fee8:	02415703          	lhu	a4,36(sp)
8000feec:	00e79023          	sh	a4,0(a5)
8000fef0:	fd1ff06f          	j	8000fec0 <_svfprintf_r+0xe08>
8000fef4:	20047413          	andi	s0,s0,512
8000fef8:	fc040ee3          	beqz	s0,8000fed4 <_svfprintf_r+0xe1c>
8000fefc:	02414703          	lbu	a4,36(sp)
8000ff00:	00e78023          	sb	a4,0(a5)
8000ff04:	fbdff06f          	j	8000fec0 <_svfprintf_r+0xe08>
8000ff08:	01046413          	ori	s0,s0,16
8000ff0c:	02047793          	andi	a5,s0,32
8000ff10:	04078863          	beqz	a5,8000ff60 <_svfprintf_r+0xea8>
8000ff14:	007a8a93          	addi	s5,s5,7
8000ff18:	ff8afa93          	andi	s5,s5,-8
8000ff1c:	000aac03          	lw	s8,0(s5)
8000ff20:	004aac83          	lw	s9,4(s5)
8000ff24:	008a8793          	addi	a5,s5,8
8000ff28:	00f12c23          	sw	a5,24(sp)
8000ff2c:	bff47413          	andi	s0,s0,-1025
8000ff30:	00000793          	li	a5,0
8000ff34:	0a010ba3          	sb	zero,183(sp)
8000ff38:	fff00713          	li	a4,-1
8000ff3c:	42eb0863          	beq	s6,a4,8001036c <_svfprintf_r+0x12b4>
8000ff40:	00040713          	mv	a4,s0
8000ff44:	019c66b3          	or	a3,s8,s9
8000ff48:	f7f47413          	andi	s0,s0,-129
8000ff4c:	42069063          	bnez	a3,8001036c <_svfprintf_r+0x12b4>
8000ff50:	580b0e63          	beqz	s6,800104ec <_svfprintf_r+0x1434>
8000ff54:	00100713          	li	a4,1
8000ff58:	40e79e63          	bne	a5,a4,80010374 <_svfprintf_r+0x12bc>
8000ff5c:	d98ff06f          	j	8000f4f4 <_svfprintf_r+0x43c>
8000ff60:	004a8793          	addi	a5,s5,4
8000ff64:	00f12c23          	sw	a5,24(sp)
8000ff68:	01047793          	andi	a5,s0,16
8000ff6c:	00078663          	beqz	a5,8000ff78 <_svfprintf_r+0xec0>
8000ff70:	000aac03          	lw	s8,0(s5)
8000ff74:	0100006f          	j	8000ff84 <_svfprintf_r+0xecc>
8000ff78:	04047793          	andi	a5,s0,64
8000ff7c:	00078863          	beqz	a5,8000ff8c <_svfprintf_r+0xed4>
8000ff80:	000adc03          	lhu	s8,0(s5)
8000ff84:	00000c93          	li	s9,0
8000ff88:	fa5ff06f          	j	8000ff2c <_svfprintf_r+0xe74>
8000ff8c:	20047793          	andi	a5,s0,512
8000ff90:	fe0780e3          	beqz	a5,8000ff70 <_svfprintf_r+0xeb8>
8000ff94:	000acc03          	lbu	s8,0(s5)
8000ff98:	fedff06f          	j	8000ff84 <_svfprintf_r+0xecc>
8000ff9c:	004a8793          	addi	a5,s5,4
8000ffa0:	00f12c23          	sw	a5,24(sp)
8000ffa4:	ffff87b7          	lui	a5,0xffff8
8000ffa8:	8307c793          	xori	a5,a5,-2000
8000ffac:	0af11c23          	sh	a5,184(sp)
8000ffb0:	800217b7          	lui	a5,0x80021
8000ffb4:	d7c78793          	addi	a5,a5,-644 # 80020d7c <__stack+0xfffe42b0>
8000ffb8:	04f12023          	sw	a5,64(sp)
8000ffbc:	000aac03          	lw	s8,0(s5)
8000ffc0:	00000c93          	li	s9,0
8000ffc4:	00246413          	ori	s0,s0,2
8000ffc8:	00200793          	li	a5,2
8000ffcc:	07800d13          	li	s10,120
8000ffd0:	f65ff06f          	j	8000ff34 <_svfprintf_r+0xe7c>
8000ffd4:	004a8793          	addi	a5,s5,4
8000ffd8:	00f12c23          	sw	a5,24(sp)
8000ffdc:	0a010ba3          	sb	zero,183(sp)
8000ffe0:	fff00793          	li	a5,-1
8000ffe4:	03112623          	sw	a7,44(sp)
8000ffe8:	000aa483          	lw	s1,0(s5)
8000ffec:	02fb0663          	beq	s6,a5,80010018 <_svfprintf_r+0xf60>
8000fff0:	000b0613          	mv	a2,s6
8000fff4:	00000593          	li	a1,0
8000fff8:	00048513          	mv	a0,s1
8000fffc:	cf5fd0ef          	jal	ra,8000dcf0 <memchr>
80010000:	00a12623          	sw	a0,12(sp)
80010004:	02c12883          	lw	a7,44(sp)
80010008:	de050e63          	beqz	a0,8000f604 <_svfprintf_r+0x54c>
8001000c:	40950b33          	sub	s6,a0,s1
80010010:	00012623          	sw	zero,12(sp)
80010014:	df0ff06f          	j	8000f604 <_svfprintf_r+0x54c>
80010018:	00048513          	mv	a0,s1
8001001c:	838ff0ef          	jal	ra,8000f054 <strlen>
80010020:	02c12883          	lw	a7,44(sp)
80010024:	00050b13          	mv	s6,a0
80010028:	00012623          	sw	zero,12(sp)
8001002c:	00000a93          	li	s5,0
80010030:	00000c13          	li	s8,0
80010034:	00000b93          	li	s7,0
80010038:	00000c93          	li	s9,0
8001003c:	03512623          	sw	s5,44(sp)
80010040:	016ad463          	ble	s6,s5,80010048 <_svfprintf_r+0xf90>
80010044:	03612623          	sw	s6,44(sp)
80010048:	0b714703          	lbu	a4,183(sp)
8001004c:	00070863          	beqz	a4,8001005c <_svfprintf_r+0xfa4>
80010050:	02c12783          	lw	a5,44(sp)
80010054:	00178793          	addi	a5,a5,1
80010058:	02f12623          	sw	a5,44(sp)
8001005c:	00247d93          	andi	s11,s0,2
80010060:	000d8863          	beqz	s11,80010070 <_svfprintf_r+0xfb8>
80010064:	02c12783          	lw	a5,44(sp)
80010068:	00278793          	addi	a5,a5,2
8001006c:	02f12623          	sw	a5,44(sp)
80010070:	08447793          	andi	a5,s0,132
80010074:	04f12223          	sw	a5,68(sp)
80010078:	06079863          	bnez	a5,800100e8 <_svfprintf_r+0x1030>
8001007c:	02812783          	lw	a5,40(sp)
80010080:	02c12703          	lw	a4,44(sp)
80010084:	40e78e33          	sub	t3,a5,a4
80010088:	07c05063          	blez	t3,800100e8 <_svfprintf_r+0x1030>
8001008c:	80020eb7          	lui	t4,0x80020
80010090:	01000f13          	li	t5,16
80010094:	77ce8e93          	addi	t4,t4,1916 # 8002077c <__stack+0xfffe3cb0>
80010098:	00700f93          	li	t6,7
8001009c:	0d812683          	lw	a3,216(sp)
800100a0:	01d8a023          	sw	t4,0(a7)
800100a4:	0dc12703          	lw	a4,220(sp)
800100a8:	00168693          	addi	a3,a3,1
800100ac:	00888613          	addi	a2,a7,8
800100b0:	47cf4663          	blt	t5,t3,8001051c <_svfprintf_r+0x1464>
800100b4:	00ee0733          	add	a4,t3,a4
800100b8:	01c8a223          	sw	t3,4(a7)
800100bc:	0ce12e23          	sw	a4,220(sp)
800100c0:	0cd12c23          	sw	a3,216(sp)
800100c4:	00700713          	li	a4,7
800100c8:	00060893          	mv	a7,a2
800100cc:	00d75e63          	ble	a3,a4,800100e8 <_svfprintf_r+0x1030>
800100d0:	0d410613          	addi	a2,sp,212
800100d4:	00098593          	mv	a1,s3
800100d8:	00090513          	mv	a0,s2
800100dc:	629020ef          	jal	ra,80012f04 <__ssprint_r>
800100e0:	680518e3          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
800100e4:	0fc10893          	addi	a7,sp,252
800100e8:	0b714703          	lbu	a4,183(sp)
800100ec:	04070863          	beqz	a4,8001013c <_svfprintf_r+0x1084>
800100f0:	0b710713          	addi	a4,sp,183
800100f4:	00e8a023          	sw	a4,0(a7)
800100f8:	00100713          	li	a4,1
800100fc:	00e8a223          	sw	a4,4(a7)
80010100:	0dc12703          	lw	a4,220(sp)
80010104:	00700693          	li	a3,7
80010108:	00888893          	addi	a7,a7,8
8001010c:	00170713          	addi	a4,a4,1
80010110:	0ce12e23          	sw	a4,220(sp)
80010114:	0d812703          	lw	a4,216(sp)
80010118:	00170713          	addi	a4,a4,1
8001011c:	0ce12c23          	sw	a4,216(sp)
80010120:	00e6de63          	ble	a4,a3,8001013c <_svfprintf_r+0x1084>
80010124:	0d410613          	addi	a2,sp,212
80010128:	00098593          	mv	a1,s3
8001012c:	00090513          	mv	a0,s2
80010130:	5d5020ef          	jal	ra,80012f04 <__ssprint_r>
80010134:	62051ee3          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010138:	0fc10893          	addi	a7,sp,252
8001013c:	040d8863          	beqz	s11,8001018c <_svfprintf_r+0x10d4>
80010140:	0b810713          	addi	a4,sp,184
80010144:	00e8a023          	sw	a4,0(a7)
80010148:	00200713          	li	a4,2
8001014c:	00e8a223          	sw	a4,4(a7)
80010150:	0dc12703          	lw	a4,220(sp)
80010154:	00700693          	li	a3,7
80010158:	00888893          	addi	a7,a7,8
8001015c:	00270713          	addi	a4,a4,2
80010160:	0ce12e23          	sw	a4,220(sp)
80010164:	0d812703          	lw	a4,216(sp)
80010168:	00170713          	addi	a4,a4,1
8001016c:	0ce12c23          	sw	a4,216(sp)
80010170:	00e6de63          	ble	a4,a3,8001018c <_svfprintf_r+0x10d4>
80010174:	0d410613          	addi	a2,sp,212
80010178:	00098593          	mv	a1,s3
8001017c:	00090513          	mv	a0,s2
80010180:	585020ef          	jal	ra,80012f04 <__ssprint_r>
80010184:	5e0516e3          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010188:	0fc10893          	addi	a7,sp,252
8001018c:	04412783          	lw	a5,68(sp)
80010190:	08000713          	li	a4,128
80010194:	06e79663          	bne	a5,a4,80010200 <_svfprintf_r+0x1148>
80010198:	02812783          	lw	a5,40(sp)
8001019c:	02c12703          	lw	a4,44(sp)
800101a0:	40e78db3          	sub	s11,a5,a4
800101a4:	05b05e63          	blez	s11,80010200 <_svfprintf_r+0x1148>
800101a8:	01000793          	li	a5,16
800101ac:	00700e13          	li	t3,7
800101b0:	0d812703          	lw	a4,216(sp)
800101b4:	0dc12683          	lw	a3,220(sp)
800101b8:	00888613          	addi	a2,a7,8
800101bc:	00170713          	addi	a4,a4,1
800101c0:	3bb7ca63          	blt	a5,s11,80010574 <_svfprintf_r+0x14bc>
800101c4:	01412783          	lw	a5,20(sp)
800101c8:	01b8a223          	sw	s11,4(a7)
800101cc:	00dd8db3          	add	s11,s11,a3
800101d0:	00f8a023          	sw	a5,0(a7)
800101d4:	0db12e23          	sw	s11,220(sp)
800101d8:	0ce12c23          	sw	a4,216(sp)
800101dc:	00700693          	li	a3,7
800101e0:	00060893          	mv	a7,a2
800101e4:	00e6de63          	ble	a4,a3,80010200 <_svfprintf_r+0x1148>
800101e8:	0d410613          	addi	a2,sp,212
800101ec:	00098593          	mv	a1,s3
800101f0:	00090513          	mv	a0,s2
800101f4:	511020ef          	jal	ra,80012f04 <__ssprint_r>
800101f8:	56051ce3          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
800101fc:	0fc10893          	addi	a7,sp,252
80010200:	416a8ab3          	sub	s5,s5,s6
80010204:	05505e63          	blez	s5,80010260 <_svfprintf_r+0x11a8>
80010208:	01000d93          	li	s11,16
8001020c:	00700813          	li	a6,7
80010210:	01412783          	lw	a5,20(sp)
80010214:	0d812703          	lw	a4,216(sp)
80010218:	0dc12683          	lw	a3,220(sp)
8001021c:	00f8a023          	sw	a5,0(a7)
80010220:	00170713          	addi	a4,a4,1
80010224:	00888613          	addi	a2,a7,8
80010228:	395dce63          	blt	s11,s5,800105c4 <_svfprintf_r+0x150c>
8001022c:	0158a223          	sw	s5,4(a7)
80010230:	00da8ab3          	add	s5,s5,a3
80010234:	0d512e23          	sw	s5,220(sp)
80010238:	0ce12c23          	sw	a4,216(sp)
8001023c:	00700693          	li	a3,7
80010240:	00060893          	mv	a7,a2
80010244:	00e6de63          	ble	a4,a3,80010260 <_svfprintf_r+0x11a8>
80010248:	0d410613          	addi	a2,sp,212
8001024c:	00098593          	mv	a1,s3
80010250:	00090513          	mv	a0,s2
80010254:	4b1020ef          	jal	ra,80012f04 <__ssprint_r>
80010258:	50051ce3          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
8001025c:	0fc10893          	addi	a7,sp,252
80010260:	10047713          	andi	a4,s0,256
80010264:	0dc12d83          	lw	s11,220(sp)
80010268:	38071e63          	bnez	a4,80010604 <_svfprintf_r+0x154c>
8001026c:	01bb0333          	add	t1,s6,s11
80010270:	0098a023          	sw	s1,0(a7)
80010274:	0168a223          	sw	s6,4(a7)
80010278:	0c612e23          	sw	t1,220(sp)
8001027c:	0d812783          	lw	a5,216(sp)
80010280:	00700713          	li	a4,7
80010284:	00888893          	addi	a7,a7,8
80010288:	00178793          	addi	a5,a5,1
8001028c:	0cf12c23          	sw	a5,216(sp)
80010290:	4af75c63          	ble	a5,a4,80010748 <_svfprintf_r+0x1690>
80010294:	0d410613          	addi	a2,sp,212
80010298:	00098593          	mv	a1,s3
8001029c:	00090513          	mv	a0,s2
800102a0:	465020ef          	jal	ra,80012f04 <__ssprint_r>
800102a4:	4c0516e3          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
800102a8:	0fc10893          	addi	a7,sp,252
800102ac:	49c0006f          	j	80010748 <_svfprintf_r+0x1690>
800102b0:	01046413          	ori	s0,s0,16
800102b4:	02047793          	andi	a5,s0,32
800102b8:	02078263          	beqz	a5,800102dc <_svfprintf_r+0x1224>
800102bc:	007a8a93          	addi	s5,s5,7
800102c0:	ff8afa93          	andi	s5,s5,-8
800102c4:	000aac03          	lw	s8,0(s5)
800102c8:	004aac83          	lw	s9,4(s5)
800102cc:	008a8793          	addi	a5,s5,8
800102d0:	00f12c23          	sw	a5,24(sp)
800102d4:	00100793          	li	a5,1
800102d8:	c5dff06f          	j	8000ff34 <_svfprintf_r+0xe7c>
800102dc:	004a8793          	addi	a5,s5,4
800102e0:	00f12c23          	sw	a5,24(sp)
800102e4:	01047793          	andi	a5,s0,16
800102e8:	00078663          	beqz	a5,800102f4 <_svfprintf_r+0x123c>
800102ec:	000aac03          	lw	s8,0(s5)
800102f0:	0100006f          	j	80010300 <_svfprintf_r+0x1248>
800102f4:	04047793          	andi	a5,s0,64
800102f8:	00078863          	beqz	a5,80010308 <_svfprintf_r+0x1250>
800102fc:	000adc03          	lhu	s8,0(s5)
80010300:	00000c93          	li	s9,0
80010304:	fd1ff06f          	j	800102d4 <_svfprintf_r+0x121c>
80010308:	20047793          	andi	a5,s0,512
8001030c:	fe0780e3          	beqz	a5,800102ec <_svfprintf_r+0x1234>
80010310:	000acc03          	lbu	s8,0(s5)
80010314:	fedff06f          	j	80010300 <_svfprintf_r+0x1248>
80010318:	800217b7          	lui	a5,0x80021
8001031c:	d7c78793          	addi	a5,a5,-644 # 80020d7c <__stack+0xfffe42b0>
80010320:	f75fe06f          	j	8000f294 <_svfprintf_r+0x1dc>
80010324:	004a8793          	addi	a5,s5,4
80010328:	00f12c23          	sw	a5,24(sp)
8001032c:	01047793          	andi	a5,s0,16
80010330:	00078663          	beqz	a5,8001033c <_svfprintf_r+0x1284>
80010334:	000aac03          	lw	s8,0(s5)
80010338:	0100006f          	j	80010348 <_svfprintf_r+0x1290>
8001033c:	04047793          	andi	a5,s0,64
80010340:	00078863          	beqz	a5,80010350 <_svfprintf_r+0x1298>
80010344:	000adc03          	lhu	s8,0(s5)
80010348:	00000c93          	li	s9,0
8001034c:	f71fe06f          	j	8000f2bc <_svfprintf_r+0x204>
80010350:	20047793          	andi	a5,s0,512
80010354:	fe0780e3          	beqz	a5,80010334 <_svfprintf_r+0x127c>
80010358:	000acc03          	lbu	s8,0(s5)
8001035c:	fedff06f          	j	80010348 <_svfprintf_r+0x1290>
80010360:	00040713          	mv	a4,s0
80010364:	00100793          	li	a5,1
80010368:	bddff06f          	j	8000ff44 <_svfprintf_r+0xe8c>
8001036c:	00100713          	li	a4,1
80010370:	96e78c63          	beq	a5,a4,8000f4e8 <_svfprintf_r+0x430>
80010374:	00200713          	li	a4,2
80010378:	12e78e63          	beq	a5,a4,800104b4 <_svfprintf_r+0x13fc>
8001037c:	1a010793          	addi	a5,sp,416
80010380:	01dc9693          	slli	a3,s9,0x1d
80010384:	007c7713          	andi	a4,s8,7
80010388:	003c5c13          	srli	s8,s8,0x3
8001038c:	03070713          	addi	a4,a4,48
80010390:	0186ec33          	or	s8,a3,s8
80010394:	003cdc93          	srli	s9,s9,0x3
80010398:	fee78fa3          	sb	a4,-1(a5)
8001039c:	019c66b3          	or	a3,s8,s9
800103a0:	fff78493          	addi	s1,a5,-1
800103a4:	02069e63          	bnez	a3,800103e0 <_svfprintf_r+0x1328>
800103a8:	00147693          	andi	a3,s0,1
800103ac:	00068a63          	beqz	a3,800103c0 <_svfprintf_r+0x1308>
800103b0:	03000693          	li	a3,48
800103b4:	00d70663          	beq	a4,a3,800103c0 <_svfprintf_r+0x1308>
800103b8:	fed48fa3          	sb	a3,-1(s1)
800103bc:	ffe78493          	addi	s1,a5,-2
800103c0:	1a010793          	addi	a5,sp,416
800103c4:	000b0a93          	mv	s5,s6
800103c8:	00012623          	sw	zero,12(sp)
800103cc:	40978b33          	sub	s6,a5,s1
800103d0:	00000c13          	li	s8,0
800103d4:	00000b93          	li	s7,0
800103d8:	00000c93          	li	s9,0
800103dc:	c61ff06f          	j	8001003c <_svfprintf_r+0xf84>
800103e0:	00048793          	mv	a5,s1
800103e4:	f9dff06f          	j	80010380 <_svfprintf_r+0x12c8>
800103e8:	00000a13          	li	s4,0
800103ec:	1a010d93          	addi	s11,sp,416
800103f0:	40047a93          	andi	s5,s0,1024
800103f4:	00900b93          	li	s7,9
800103f8:	00a00613          	li	a2,10
800103fc:	00000693          	li	a3,0
80010400:	000c0513          	mv	a0,s8
80010404:	000c8593          	mv	a1,s9
80010408:	01112623          	sw	a7,12(sp)
8001040c:	70d030ef          	jal	ra,80014318 <__umoddi3>
80010410:	03050513          	addi	a0,a0,48
80010414:	fead8fa3          	sb	a0,-1(s11)
80010418:	fffd8493          	addi	s1,s11,-1
8001041c:	001a0a13          	addi	s4,s4,1
80010420:	00c12883          	lw	a7,12(sp)
80010424:	040a8e63          	beqz	s5,80010480 <_svfprintf_r+0x13c8>
80010428:	01012783          	lw	a5,16(sp)
8001042c:	0007c783          	lbu	a5,0(a5)
80010430:	04fa1863          	bne	s4,a5,80010480 <_svfprintf_r+0x13c8>
80010434:	0ff00793          	li	a5,255
80010438:	04fa0463          	beq	s4,a5,80010480 <_svfprintf_r+0x13c8>
8001043c:	000c9463          	bnez	s9,80010444 <_svfprintf_r+0x138c>
80010440:	058bf063          	bleu	s8,s7,80010480 <_svfprintf_r+0x13c8>
80010444:	03012783          	lw	a5,48(sp)
80010448:	03812583          	lw	a1,56(sp)
8001044c:	01112623          	sw	a7,12(sp)
80010450:	40f484b3          	sub	s1,s1,a5
80010454:	00078613          	mv	a2,a5
80010458:	00048513          	mv	a0,s1
8001045c:	c15fe0ef          	jal	ra,8000f070 <strncpy>
80010460:	01012783          	lw	a5,16(sp)
80010464:	00000a13          	li	s4,0
80010468:	00c12883          	lw	a7,12(sp)
8001046c:	0017c783          	lbu	a5,1(a5)
80010470:	00078863          	beqz	a5,80010480 <_svfprintf_r+0x13c8>
80010474:	01012783          	lw	a5,16(sp)
80010478:	00178793          	addi	a5,a5,1
8001047c:	00f12823          	sw	a5,16(sp)
80010480:	000c0513          	mv	a0,s8
80010484:	000c8593          	mv	a1,s9
80010488:	00a00613          	li	a2,10
8001048c:	00000693          	li	a3,0
80010490:	01112623          	sw	a7,12(sp)
80010494:	251030ef          	jal	ra,80013ee4 <__udivdi3>
80010498:	00058c93          	mv	s9,a1
8001049c:	00a5e5b3          	or	a1,a1,a0
800104a0:	00050c13          	mv	s8,a0
800104a4:	00c12883          	lw	a7,12(sp)
800104a8:	f0058ce3          	beqz	a1,800103c0 <_svfprintf_r+0x1308>
800104ac:	00048d93          	mv	s11,s1
800104b0:	f49ff06f          	j	800103f8 <_svfprintf_r+0x1340>
800104b4:	1a010493          	addi	s1,sp,416
800104b8:	04012703          	lw	a4,64(sp)
800104bc:	00fc7793          	andi	a5,s8,15
800104c0:	fff48493          	addi	s1,s1,-1
800104c4:	00f707b3          	add	a5,a4,a5
800104c8:	0007c783          	lbu	a5,0(a5)
800104cc:	004c5c13          	srli	s8,s8,0x4
800104d0:	00f48023          	sb	a5,0(s1)
800104d4:	01cc9793          	slli	a5,s9,0x1c
800104d8:	0187ec33          	or	s8,a5,s8
800104dc:	004cdc93          	srli	s9,s9,0x4
800104e0:	019c67b3          	or	a5,s8,s9
800104e4:	fc079ae3          	bnez	a5,800104b8 <_svfprintf_r+0x1400>
800104e8:	ed9ff06f          	j	800103c0 <_svfprintf_r+0x1308>
800104ec:	1a010493          	addi	s1,sp,416
800104f0:	ec0798e3          	bnez	a5,800103c0 <_svfprintf_r+0x1308>
800104f4:	00177713          	andi	a4,a4,1
800104f8:	ec0704e3          	beqz	a4,800103c0 <_svfprintf_r+0x1308>
800104fc:	03000793          	li	a5,48
80010500:	18f10fa3          	sb	a5,415(sp)
80010504:	ff9fe06f          	j	8000f4fc <_svfprintf_r+0x444>
80010508:	2c0d06e3          	beqz	s10,80010fd4 <_svfprintf_r+0x1f1c>
8001050c:	13a10e23          	sb	s10,316(sp)
80010510:	0a010ba3          	sb	zero,183(sp)
80010514:	01512c23          	sw	s5,24(sp)
80010518:	f69fe06f          	j	8000f480 <_svfprintf_r+0x3c8>
8001051c:	01070713          	addi	a4,a4,16
80010520:	01e8a223          	sw	t5,4(a7)
80010524:	0ce12e23          	sw	a4,220(sp)
80010528:	0cd12c23          	sw	a3,216(sp)
8001052c:	02dfde63          	ble	a3,t6,80010568 <_svfprintf_r+0x14b0>
80010530:	0d410613          	addi	a2,sp,212
80010534:	00098593          	mv	a1,s3
80010538:	00090513          	mv	a0,s2
8001053c:	05f12c23          	sw	t6,88(sp)
80010540:	05d12a23          	sw	t4,84(sp)
80010544:	05e12823          	sw	t5,80(sp)
80010548:	05c12423          	sw	t3,72(sp)
8001054c:	1b9020ef          	jal	ra,80012f04 <__ssprint_r>
80010550:	220510e3          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010554:	05812f83          	lw	t6,88(sp)
80010558:	05412e83          	lw	t4,84(sp)
8001055c:	05012f03          	lw	t5,80(sp)
80010560:	04812e03          	lw	t3,72(sp)
80010564:	0fc10613          	addi	a2,sp,252
80010568:	ff0e0e13          	addi	t3,t3,-16
8001056c:	00060893          	mv	a7,a2
80010570:	b2dff06f          	j	8001009c <_svfprintf_r+0xfe4>
80010574:	01412583          	lw	a1,20(sp)
80010578:	01068693          	addi	a3,a3,16
8001057c:	00f8a223          	sw	a5,4(a7)
80010580:	00b8a023          	sw	a1,0(a7)
80010584:	0cd12e23          	sw	a3,220(sp)
80010588:	0ce12c23          	sw	a4,216(sp)
8001058c:	02ee5663          	ble	a4,t3,800105b8 <_svfprintf_r+0x1500>
80010590:	0d410613          	addi	a2,sp,212
80010594:	00098593          	mv	a1,s3
80010598:	00090513          	mv	a0,s2
8001059c:	05c12423          	sw	t3,72(sp)
800105a0:	04f12223          	sw	a5,68(sp)
800105a4:	161020ef          	jal	ra,80012f04 <__ssprint_r>
800105a8:	1c0514e3          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
800105ac:	04812e03          	lw	t3,72(sp)
800105b0:	04412783          	lw	a5,68(sp)
800105b4:	0fc10613          	addi	a2,sp,252
800105b8:	ff0d8d93          	addi	s11,s11,-16
800105bc:	00060893          	mv	a7,a2
800105c0:	bf1ff06f          	j	800101b0 <_svfprintf_r+0x10f8>
800105c4:	01068693          	addi	a3,a3,16
800105c8:	01b8a223          	sw	s11,4(a7)
800105cc:	0cd12e23          	sw	a3,220(sp)
800105d0:	0ce12c23          	sw	a4,216(sp)
800105d4:	02e85263          	ble	a4,a6,800105f8 <_svfprintf_r+0x1540>
800105d8:	0d410613          	addi	a2,sp,212
800105dc:	00098593          	mv	a1,s3
800105e0:	00090513          	mv	a0,s2
800105e4:	05012223          	sw	a6,68(sp)
800105e8:	11d020ef          	jal	ra,80012f04 <__ssprint_r>
800105ec:	180512e3          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
800105f0:	04412803          	lw	a6,68(sp)
800105f4:	0fc10613          	addi	a2,sp,252
800105f8:	ff0a8a93          	addi	s5,s5,-16
800105fc:	00060893          	mv	a7,a2
80010600:	c11ff06f          	j	80010210 <_svfprintf_r+0x1158>
80010604:	06500713          	li	a4,101
80010608:	71a75263          	ble	s10,a4,80010d0c <_svfprintf_r+0x1c54>
8001060c:	0e012703          	lw	a4,224(sp)
80010610:	09010593          	addi	a1,sp,144
80010614:	0a010513          	addi	a0,sp,160
80010618:	0ae12023          	sw	a4,160(sp)
8001061c:	0e412703          	lw	a4,228(sp)
80010620:	05112223          	sw	a7,68(sp)
80010624:	08012823          	sw	zero,144(sp)
80010628:	0ae12223          	sw	a4,164(sp)
8001062c:	0e812703          	lw	a4,232(sp)
80010630:	08012a23          	sw	zero,148(sp)
80010634:	08012c23          	sw	zero,152(sp)
80010638:	0ae12423          	sw	a4,168(sp)
8001063c:	0ec12703          	lw	a4,236(sp)
80010640:	08012e23          	sw	zero,156(sp)
80010644:	0ae12623          	sw	a4,172(sp)
80010648:	595040ef          	jal	ra,800153dc <__eqtf2>
8001064c:	04412883          	lw	a7,68(sp)
80010650:	18051263          	bnez	a0,800107d4 <_svfprintf_r+0x171c>
80010654:	800217b7          	lui	a5,0x80021
80010658:	da478793          	addi	a5,a5,-604 # 80020da4 <__stack+0xfffe42d8>
8001065c:	00f8a023          	sw	a5,0(a7)
80010660:	00100793          	li	a5,1
80010664:	00f8a223          	sw	a5,4(a7)
80010668:	0d812783          	lw	a5,216(sp)
8001066c:	001d8d93          	addi	s11,s11,1
80010670:	0db12e23          	sw	s11,220(sp)
80010674:	00178793          	addi	a5,a5,1
80010678:	0cf12c23          	sw	a5,216(sp)
8001067c:	00700713          	li	a4,7
80010680:	00888893          	addi	a7,a7,8
80010684:	00f75e63          	ble	a5,a4,800106a0 <_svfprintf_r+0x15e8>
80010688:	0d410613          	addi	a2,sp,212
8001068c:	00098593          	mv	a1,s3
80010690:	00090513          	mv	a0,s2
80010694:	071020ef          	jal	ra,80012f04 <__ssprint_r>
80010698:	0c051ce3          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
8001069c:	0fc10893          	addi	a7,sp,252
800106a0:	0bc12783          	lw	a5,188(sp)
800106a4:	0147c663          	blt	a5,s4,800106b0 <_svfprintf_r+0x15f8>
800106a8:	00147793          	andi	a5,s0,1
800106ac:	08078e63          	beqz	a5,80010748 <_svfprintf_r+0x1690>
800106b0:	03412783          	lw	a5,52(sp)
800106b4:	02012703          	lw	a4,32(sp)
800106b8:	00888893          	addi	a7,a7,8
800106bc:	fef8ac23          	sw	a5,-8(a7)
800106c0:	02012783          	lw	a5,32(sp)
800106c4:	fef8ae23          	sw	a5,-4(a7)
800106c8:	0dc12783          	lw	a5,220(sp)
800106cc:	00e787b3          	add	a5,a5,a4
800106d0:	0cf12e23          	sw	a5,220(sp)
800106d4:	0d812783          	lw	a5,216(sp)
800106d8:	00700713          	li	a4,7
800106dc:	00178793          	addi	a5,a5,1
800106e0:	0cf12c23          	sw	a5,216(sp)
800106e4:	00f75e63          	ble	a5,a4,80010700 <_svfprintf_r+0x1648>
800106e8:	0d410613          	addi	a2,sp,212
800106ec:	00098593          	mv	a1,s3
800106f0:	00090513          	mv	a0,s2
800106f4:	011020ef          	jal	ra,80012f04 <__ssprint_r>
800106f8:	06051ce3          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
800106fc:	0fc10893          	addi	a7,sp,252
80010700:	fffa0493          	addi	s1,s4,-1
80010704:	04905263          	blez	s1,80010748 <_svfprintf_r+0x1690>
80010708:	01000a93          	li	s5,16
8001070c:	00700b93          	li	s7,7
80010710:	01412603          	lw	a2,20(sp)
80010714:	0d812783          	lw	a5,216(sp)
80010718:	0dc12703          	lw	a4,220(sp)
8001071c:	00c8a023          	sw	a2,0(a7)
80010720:	00178793          	addi	a5,a5,1
80010724:	00888693          	addi	a3,a7,8
80010728:	069aca63          	blt	s5,s1,8001079c <_svfprintf_r+0x16e4>
8001072c:	0098a223          	sw	s1,4(a7)
80010730:	00e484b3          	add	s1,s1,a4
80010734:	0c912e23          	sw	s1,220(sp)
80010738:	0cf12c23          	sw	a5,216(sp)
8001073c:	00700713          	li	a4,7
80010740:	00068893          	mv	a7,a3
80010744:	b4f748e3          	blt	a4,a5,80010294 <_svfprintf_r+0x11dc>
80010748:	00447413          	andi	s0,s0,4
8001074c:	7c041263          	bnez	s0,80010f10 <_svfprintf_r+0x1e58>
80010750:	02812d03          	lw	s10,40(sp)
80010754:	02c12783          	lw	a5,44(sp)
80010758:	00fd5463          	ble	a5,s10,80010760 <_svfprintf_r+0x16a8>
8001075c:	00078d13          	mv	s10,a5
80010760:	02412783          	lw	a5,36(sp)
80010764:	01a787b3          	add	a5,a5,s10
80010768:	02f12223          	sw	a5,36(sp)
8001076c:	0dc12783          	lw	a5,220(sp)
80010770:	00078c63          	beqz	a5,80010788 <_svfprintf_r+0x16d0>
80010774:	0d410613          	addi	a2,sp,212
80010778:	00098593          	mv	a1,s3
8001077c:	00090513          	mv	a0,s2
80010780:	784020ef          	jal	ra,80012f04 <__ssprint_r>
80010784:	7e051663          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010788:	00c12783          	lw	a5,12(sp)
8001078c:	0c012c23          	sw	zero,216(sp)
80010790:	02079ae3          	bnez	a5,80010fc4 <_svfprintf_r+0x1f0c>
80010794:	0fc10893          	addi	a7,sp,252
80010798:	f28ff06f          	j	8000fec0 <_svfprintf_r+0xe08>
8001079c:	01070713          	addi	a4,a4,16
800107a0:	0158a223          	sw	s5,4(a7)
800107a4:	0ce12e23          	sw	a4,220(sp)
800107a8:	0cf12c23          	sw	a5,216(sp)
800107ac:	00fbde63          	ble	a5,s7,800107c8 <_svfprintf_r+0x1710>
800107b0:	0d410613          	addi	a2,sp,212
800107b4:	00098593          	mv	a1,s3
800107b8:	00090513          	mv	a0,s2
800107bc:	748020ef          	jal	ra,80012f04 <__ssprint_r>
800107c0:	7a051863          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
800107c4:	0fc10693          	addi	a3,sp,252
800107c8:	ff048493          	addi	s1,s1,-16
800107cc:	00068893          	mv	a7,a3
800107d0:	f41ff06f          	j	80010710 <_svfprintf_r+0x1658>
800107d4:	0bc12703          	lw	a4,188(sp)
800107d8:	16e04463          	bgtz	a4,80010940 <_svfprintf_r+0x1888>
800107dc:	800217b7          	lui	a5,0x80021
800107e0:	da478793          	addi	a5,a5,-604 # 80020da4 <__stack+0xfffe42d8>
800107e4:	00f8a023          	sw	a5,0(a7)
800107e8:	00100793          	li	a5,1
800107ec:	00f8a223          	sw	a5,4(a7)
800107f0:	0d812783          	lw	a5,216(sp)
800107f4:	001d8d93          	addi	s11,s11,1
800107f8:	0db12e23          	sw	s11,220(sp)
800107fc:	00178793          	addi	a5,a5,1
80010800:	0cf12c23          	sw	a5,216(sp)
80010804:	00700713          	li	a4,7
80010808:	00888893          	addi	a7,a7,8
8001080c:	00f75e63          	ble	a5,a4,80010828 <_svfprintf_r+0x1770>
80010810:	0d410613          	addi	a2,sp,212
80010814:	00098593          	mv	a1,s3
80010818:	00090513          	mv	a0,s2
8001081c:	6e8020ef          	jal	ra,80012f04 <__ssprint_r>
80010820:	74051863          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010824:	0fc10893          	addi	a7,sp,252
80010828:	0bc12783          	lw	a5,188(sp)
8001082c:	00079863          	bnez	a5,8001083c <_svfprintf_r+0x1784>
80010830:	000a1663          	bnez	s4,8001083c <_svfprintf_r+0x1784>
80010834:	00147793          	andi	a5,s0,1
80010838:	f00788e3          	beqz	a5,80010748 <_svfprintf_r+0x1690>
8001083c:	03412783          	lw	a5,52(sp)
80010840:	02012703          	lw	a4,32(sp)
80010844:	00888893          	addi	a7,a7,8
80010848:	fef8ac23          	sw	a5,-8(a7)
8001084c:	02012783          	lw	a5,32(sp)
80010850:	fef8ae23          	sw	a5,-4(a7)
80010854:	0dc12783          	lw	a5,220(sp)
80010858:	00e787b3          	add	a5,a5,a4
8001085c:	0cf12e23          	sw	a5,220(sp)
80010860:	0d812783          	lw	a5,216(sp)
80010864:	00700713          	li	a4,7
80010868:	00178793          	addi	a5,a5,1
8001086c:	0cf12c23          	sw	a5,216(sp)
80010870:	00f75e63          	ble	a5,a4,8001088c <_svfprintf_r+0x17d4>
80010874:	0d410613          	addi	a2,sp,212
80010878:	00098593          	mv	a1,s3
8001087c:	00090513          	mv	a0,s2
80010880:	684020ef          	jal	ra,80012f04 <__ssprint_r>
80010884:	6e051663          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010888:	0fc10893          	addi	a7,sp,252
8001088c:	0bc12a83          	lw	s5,188(sp)
80010890:	060ad063          	bgez	s5,800108f0 <_svfprintf_r+0x1838>
80010894:	41500ab3          	neg	s5,s5
80010898:	00088713          	mv	a4,a7
8001089c:	01000b93          	li	s7,16
800108a0:	00700c13          	li	s8,7
800108a4:	01412603          	lw	a2,20(sp)
800108a8:	0d812783          	lw	a5,216(sp)
800108ac:	0dc12683          	lw	a3,220(sp)
800108b0:	00c72023          	sw	a2,0(a4)
800108b4:	00178793          	addi	a5,a5,1
800108b8:	00888893          	addi	a7,a7,8
800108bc:	055bc663          	blt	s7,s5,80010908 <_svfprintf_r+0x1850>
800108c0:	01572223          	sw	s5,4(a4)
800108c4:	00da8ab3          	add	s5,s5,a3
800108c8:	0d512e23          	sw	s5,220(sp)
800108cc:	0cf12c23          	sw	a5,216(sp)
800108d0:	00700713          	li	a4,7
800108d4:	00f75e63          	ble	a5,a4,800108f0 <_svfprintf_r+0x1838>
800108d8:	0d410613          	addi	a2,sp,212
800108dc:	00098593          	mv	a1,s3
800108e0:	00090513          	mv	a0,s2
800108e4:	620020ef          	jal	ra,80012f04 <__ssprint_r>
800108e8:	68051463          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
800108ec:	0fc10893          	addi	a7,sp,252
800108f0:	0dc12783          	lw	a5,220(sp)
800108f4:	0098a023          	sw	s1,0(a7)
800108f8:	0148a223          	sw	s4,4(a7)
800108fc:	014787b3          	add	a5,a5,s4
80010900:	0cf12e23          	sw	a5,220(sp)
80010904:	979ff06f          	j	8001027c <_svfprintf_r+0x11c4>
80010908:	01068693          	addi	a3,a3,16
8001090c:	01772223          	sw	s7,4(a4)
80010910:	0cd12e23          	sw	a3,220(sp)
80010914:	0cf12c23          	sw	a5,216(sp)
80010918:	00fc5e63          	ble	a5,s8,80010934 <_svfprintf_r+0x187c>
8001091c:	0d410613          	addi	a2,sp,212
80010920:	00098593          	mv	a1,s3
80010924:	00090513          	mv	a0,s2
80010928:	5dc020ef          	jal	ra,80012f04 <__ssprint_r>
8001092c:	64051263          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010930:	0fc10893          	addi	a7,sp,252
80010934:	ff0a8a93          	addi	s5,s5,-16
80010938:	00088713          	mv	a4,a7
8001093c:	f69ff06f          	j	800108a4 <_svfprintf_r+0x17ec>
80010940:	000c8a93          	mv	s5,s9
80010944:	019a5463          	ble	s9,s4,8001094c <_svfprintf_r+0x1894>
80010948:	000a0a93          	mv	s5,s4
8001094c:	05505263          	blez	s5,80010990 <_svfprintf_r+0x18d8>
80010950:	0d812703          	lw	a4,216(sp)
80010954:	01ba8db3          	add	s11,s5,s11
80010958:	0098a023          	sw	s1,0(a7)
8001095c:	00170713          	addi	a4,a4,1
80010960:	0158a223          	sw	s5,4(a7)
80010964:	0db12e23          	sw	s11,220(sp)
80010968:	0ce12c23          	sw	a4,216(sp)
8001096c:	00700693          	li	a3,7
80010970:	00888893          	addi	a7,a7,8
80010974:	00e6de63          	ble	a4,a3,80010990 <_svfprintf_r+0x18d8>
80010978:	0d410613          	addi	a2,sp,212
8001097c:	00098593          	mv	a1,s3
80010980:	00090513          	mv	a0,s2
80010984:	580020ef          	jal	ra,80012f04 <__ssprint_r>
80010988:	5e051463          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
8001098c:	0fc10893          	addi	a7,sp,252
80010990:	000ad463          	bgez	s5,80010998 <_svfprintf_r+0x18e0>
80010994:	00000a93          	li	s5,0
80010998:	415c8ab3          	sub	s5,s9,s5
8001099c:	05505e63          	blez	s5,800109f8 <_svfprintf_r+0x1940>
800109a0:	01000d13          	li	s10,16
800109a4:	00700d93          	li	s11,7
800109a8:	01412783          	lw	a5,20(sp)
800109ac:	0d812703          	lw	a4,216(sp)
800109b0:	0dc12683          	lw	a3,220(sp)
800109b4:	00f8a023          	sw	a5,0(a7)
800109b8:	00170713          	addi	a4,a4,1
800109bc:	00888613          	addi	a2,a7,8
800109c0:	195d4c63          	blt	s10,s5,80010b58 <_svfprintf_r+0x1aa0>
800109c4:	0158a223          	sw	s5,4(a7)
800109c8:	00da8ab3          	add	s5,s5,a3
800109cc:	0d512e23          	sw	s5,220(sp)
800109d0:	0ce12c23          	sw	a4,216(sp)
800109d4:	00700693          	li	a3,7
800109d8:	00060893          	mv	a7,a2
800109dc:	00e6de63          	ble	a4,a3,800109f8 <_svfprintf_r+0x1940>
800109e0:	0d410613          	addi	a2,sp,212
800109e4:	00098593          	mv	a1,s3
800109e8:	00090513          	mv	a0,s2
800109ec:	518020ef          	jal	ra,80012f04 <__ssprint_r>
800109f0:	58051063          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
800109f4:	0fc10893          	addi	a7,sp,252
800109f8:	40047793          	andi	a5,s0,1024
800109fc:	01948ab3          	add	s5,s1,s9
80010a00:	02078063          	beqz	a5,80010a20 <_svfprintf_r+0x1968>
80010a04:	00700d13          	li	s10,7
80010a08:	01448db3          	add	s11,s1,s4
80010a0c:	180b9263          	bnez	s7,80010b90 <_svfprintf_r+0x1ad8>
80010a10:	180c1263          	bnez	s8,80010b94 <_svfprintf_r+0x1adc>
80010a14:	014487b3          	add	a5,s1,s4
80010a18:	0157f463          	bleu	s5,a5,80010a20 <_svfprintf_r+0x1968>
80010a1c:	00078a93          	mv	s5,a5
80010a20:	0bc12783          	lw	a5,188(sp)
80010a24:	0147c663          	blt	a5,s4,80010a30 <_svfprintf_r+0x1978>
80010a28:	00147793          	andi	a5,s0,1
80010a2c:	04078a63          	beqz	a5,80010a80 <_svfprintf_r+0x19c8>
80010a30:	03412783          	lw	a5,52(sp)
80010a34:	02012703          	lw	a4,32(sp)
80010a38:	00888893          	addi	a7,a7,8
80010a3c:	fef8ac23          	sw	a5,-8(a7)
80010a40:	02012783          	lw	a5,32(sp)
80010a44:	fef8ae23          	sw	a5,-4(a7)
80010a48:	0dc12783          	lw	a5,220(sp)
80010a4c:	00e787b3          	add	a5,a5,a4
80010a50:	0cf12e23          	sw	a5,220(sp)
80010a54:	0d812783          	lw	a5,216(sp)
80010a58:	00700713          	li	a4,7
80010a5c:	00178793          	addi	a5,a5,1
80010a60:	0cf12c23          	sw	a5,216(sp)
80010a64:	00f75e63          	ble	a5,a4,80010a80 <_svfprintf_r+0x19c8>
80010a68:	0d410613          	addi	a2,sp,212
80010a6c:	00098593          	mv	a1,s3
80010a70:	00090513          	mv	a0,s2
80010a74:	490020ef          	jal	ra,80012f04 <__ssprint_r>
80010a78:	4e051c63          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010a7c:	0fc10893          	addi	a7,sp,252
80010a80:	014484b3          	add	s1,s1,s4
80010a84:	415487b3          	sub	a5,s1,s5
80010a88:	0bc12483          	lw	s1,188(sp)
80010a8c:	409a04b3          	sub	s1,s4,s1
80010a90:	0097d463          	ble	s1,a5,80010a98 <_svfprintf_r+0x19e0>
80010a94:	00078493          	mv	s1,a5
80010a98:	04905463          	blez	s1,80010ae0 <_svfprintf_r+0x1a28>
80010a9c:	0dc12783          	lw	a5,220(sp)
80010aa0:	0158a023          	sw	s5,0(a7)
80010aa4:	0098a223          	sw	s1,4(a7)
80010aa8:	00f487b3          	add	a5,s1,a5
80010aac:	0cf12e23          	sw	a5,220(sp)
80010ab0:	0d812783          	lw	a5,216(sp)
80010ab4:	00700713          	li	a4,7
80010ab8:	00888893          	addi	a7,a7,8
80010abc:	00178793          	addi	a5,a5,1
80010ac0:	0cf12c23          	sw	a5,216(sp)
80010ac4:	00f75e63          	ble	a5,a4,80010ae0 <_svfprintf_r+0x1a28>
80010ac8:	0d410613          	addi	a2,sp,212
80010acc:	00098593          	mv	a1,s3
80010ad0:	00090513          	mv	a0,s2
80010ad4:	430020ef          	jal	ra,80012f04 <__ssprint_r>
80010ad8:	48051c63          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010adc:	0fc10893          	addi	a7,sp,252
80010ae0:	00048793          	mv	a5,s1
80010ae4:	0004d463          	bgez	s1,80010aec <_svfprintf_r+0x1a34>
80010ae8:	00000793          	li	a5,0
80010aec:	0bc12483          	lw	s1,188(sp)
80010af0:	409a04b3          	sub	s1,s4,s1
80010af4:	40f484b3          	sub	s1,s1,a5
80010af8:	c49058e3          	blez	s1,80010748 <_svfprintf_r+0x1690>
80010afc:	01000a93          	li	s5,16
80010b00:	00700b93          	li	s7,7
80010b04:	01412603          	lw	a2,20(sp)
80010b08:	0d812783          	lw	a5,216(sp)
80010b0c:	0dc12703          	lw	a4,220(sp)
80010b10:	00c8a023          	sw	a2,0(a7)
80010b14:	00178793          	addi	a5,a5,1
80010b18:	00888693          	addi	a3,a7,8
80010b1c:	c09ad8e3          	ble	s1,s5,8001072c <_svfprintf_r+0x1674>
80010b20:	01070713          	addi	a4,a4,16
80010b24:	0158a223          	sw	s5,4(a7)
80010b28:	0ce12e23          	sw	a4,220(sp)
80010b2c:	0cf12c23          	sw	a5,216(sp)
80010b30:	00fbde63          	ble	a5,s7,80010b4c <_svfprintf_r+0x1a94>
80010b34:	0d410613          	addi	a2,sp,212
80010b38:	00098593          	mv	a1,s3
80010b3c:	00090513          	mv	a0,s2
80010b40:	3c4020ef          	jal	ra,80012f04 <__ssprint_r>
80010b44:	42051663          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010b48:	0fc10693          	addi	a3,sp,252
80010b4c:	ff048493          	addi	s1,s1,-16
80010b50:	00068893          	mv	a7,a3
80010b54:	fb1ff06f          	j	80010b04 <_svfprintf_r+0x1a4c>
80010b58:	01068693          	addi	a3,a3,16
80010b5c:	01a8a223          	sw	s10,4(a7)
80010b60:	0cd12e23          	sw	a3,220(sp)
80010b64:	0ce12c23          	sw	a4,216(sp)
80010b68:	00edde63          	ble	a4,s11,80010b84 <_svfprintf_r+0x1acc>
80010b6c:	0d410613          	addi	a2,sp,212
80010b70:	00098593          	mv	a1,s3
80010b74:	00090513          	mv	a0,s2
80010b78:	38c020ef          	jal	ra,80012f04 <__ssprint_r>
80010b7c:	3e051a63          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010b80:	0fc10613          	addi	a2,sp,252
80010b84:	ff0a8a93          	addi	s5,s5,-16
80010b88:	00060893          	mv	a7,a2
80010b8c:	e1dff06f          	j	800109a8 <_svfprintf_r+0x18f0>
80010b90:	0c0c0e63          	beqz	s8,80010c6c <_svfprintf_r+0x1bb4>
80010b94:	fffc0c13          	addi	s8,s8,-1
80010b98:	03812783          	lw	a5,56(sp)
80010b9c:	03012703          	lw	a4,48(sp)
80010ba0:	00888893          	addi	a7,a7,8
80010ba4:	fef8ac23          	sw	a5,-8(a7)
80010ba8:	03012783          	lw	a5,48(sp)
80010bac:	fef8ae23          	sw	a5,-4(a7)
80010bb0:	0dc12783          	lw	a5,220(sp)
80010bb4:	00e787b3          	add	a5,a5,a4
80010bb8:	0cf12e23          	sw	a5,220(sp)
80010bbc:	0d812783          	lw	a5,216(sp)
80010bc0:	00178793          	addi	a5,a5,1
80010bc4:	0cf12c23          	sw	a5,216(sp)
80010bc8:	00fd5e63          	ble	a5,s10,80010be4 <_svfprintf_r+0x1b2c>
80010bcc:	0d410613          	addi	a2,sp,212
80010bd0:	00098593          	mv	a1,s3
80010bd4:	00090513          	mv	a0,s2
80010bd8:	32c020ef          	jal	ra,80012f04 <__ssprint_r>
80010bdc:	38051a63          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010be0:	0fc10893          	addi	a7,sp,252
80010be4:	01012783          	lw	a5,16(sp)
80010be8:	415d8733          	sub	a4,s11,s5
80010bec:	0007cb03          	lbu	s6,0(a5)
80010bf0:	01675463          	ble	s6,a4,80010bf8 <_svfprintf_r+0x1b40>
80010bf4:	00070b13          	mv	s6,a4
80010bf8:	05605263          	blez	s6,80010c3c <_svfprintf_r+0x1b84>
80010bfc:	0dc12703          	lw	a4,220(sp)
80010c00:	0158a023          	sw	s5,0(a7)
80010c04:	0168a223          	sw	s6,4(a7)
80010c08:	00eb0733          	add	a4,s6,a4
80010c0c:	0ce12e23          	sw	a4,220(sp)
80010c10:	0d812703          	lw	a4,216(sp)
80010c14:	00888893          	addi	a7,a7,8
80010c18:	00170713          	addi	a4,a4,1
80010c1c:	0ce12c23          	sw	a4,216(sp)
80010c20:	00ed5e63          	ble	a4,s10,80010c3c <_svfprintf_r+0x1b84>
80010c24:	0d410613          	addi	a2,sp,212
80010c28:	00098593          	mv	a1,s3
80010c2c:	00090513          	mv	a0,s2
80010c30:	2d4020ef          	jal	ra,80012f04 <__ssprint_r>
80010c34:	32051e63          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010c38:	0fc10893          	addi	a7,sp,252
80010c3c:	000b0713          	mv	a4,s6
80010c40:	000b5463          	bgez	s6,80010c48 <_svfprintf_r+0x1b90>
80010c44:	00000713          	li	a4,0
80010c48:	01012783          	lw	a5,16(sp)
80010c4c:	01000813          	li	a6,16
80010c50:	0007c783          	lbu	a5,0(a5)
80010c54:	40e78b33          	sub	s6,a5,a4
80010c58:	07604263          	bgtz	s6,80010cbc <_svfprintf_r+0x1c04>
80010c5c:	01012783          	lw	a5,16(sp)
80010c60:	0007c783          	lbu	a5,0(a5)
80010c64:	00fa8ab3          	add	s5,s5,a5
80010c68:	da5ff06f          	j	80010a0c <_svfprintf_r+0x1954>
80010c6c:	01012783          	lw	a5,16(sp)
80010c70:	fffb8b93          	addi	s7,s7,-1
80010c74:	fff78793          	addi	a5,a5,-1
80010c78:	00f12823          	sw	a5,16(sp)
80010c7c:	f1dff06f          	j	80010b98 <_svfprintf_r+0x1ae0>
80010c80:	01068693          	addi	a3,a3,16
80010c84:	0108a223          	sw	a6,4(a7)
80010c88:	0cd12e23          	sw	a3,220(sp)
80010c8c:	0ce12c23          	sw	a4,216(sp)
80010c90:	02ed5263          	ble	a4,s10,80010cb4 <_svfprintf_r+0x1bfc>
80010c94:	0d410613          	addi	a2,sp,212
80010c98:	00098593          	mv	a1,s3
80010c9c:	00090513          	mv	a0,s2
80010ca0:	05012223          	sw	a6,68(sp)
80010ca4:	260020ef          	jal	ra,80012f04 <__ssprint_r>
80010ca8:	2c051463          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010cac:	04412803          	lw	a6,68(sp)
80010cb0:	0fc10613          	addi	a2,sp,252
80010cb4:	ff0b0b13          	addi	s6,s6,-16
80010cb8:	00060893          	mv	a7,a2
80010cbc:	01412783          	lw	a5,20(sp)
80010cc0:	0d812703          	lw	a4,216(sp)
80010cc4:	0dc12683          	lw	a3,220(sp)
80010cc8:	00f8a023          	sw	a5,0(a7)
80010ccc:	00170713          	addi	a4,a4,1
80010cd0:	00888613          	addi	a2,a7,8
80010cd4:	fb6846e3          	blt	a6,s6,80010c80 <_svfprintf_r+0x1bc8>
80010cd8:	00db07b3          	add	a5,s6,a3
80010cdc:	0168a223          	sw	s6,4(a7)
80010ce0:	0cf12e23          	sw	a5,220(sp)
80010ce4:	0ce12c23          	sw	a4,216(sp)
80010ce8:	00060893          	mv	a7,a2
80010cec:	f6ed58e3          	ble	a4,s10,80010c5c <_svfprintf_r+0x1ba4>
80010cf0:	0d410613          	addi	a2,sp,212
80010cf4:	00098593          	mv	a1,s3
80010cf8:	00090513          	mv	a0,s2
80010cfc:	208020ef          	jal	ra,80012f04 <__ssprint_r>
80010d00:	26051863          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010d04:	0fc10893          	addi	a7,sp,252
80010d08:	f55ff06f          	j	80010c5c <_svfprintf_r+0x1ba4>
80010d0c:	0d812783          	lw	a5,216(sp)
80010d10:	00100713          	li	a4,1
80010d14:	0098a023          	sw	s1,0(a7)
80010d18:	001d8d93          	addi	s11,s11,1
80010d1c:	00178793          	addi	a5,a5,1
80010d20:	00888b93          	addi	s7,a7,8
80010d24:	01474663          	blt	a4,s4,80010d30 <_svfprintf_r+0x1c78>
80010d28:	00147693          	andi	a3,s0,1
80010d2c:	1c068663          	beqz	a3,80010ef8 <_svfprintf_r+0x1e40>
80010d30:	00100713          	li	a4,1
80010d34:	00e8a223          	sw	a4,4(a7)
80010d38:	0db12e23          	sw	s11,220(sp)
80010d3c:	0cf12c23          	sw	a5,216(sp)
80010d40:	00700713          	li	a4,7
80010d44:	00f75e63          	ble	a5,a4,80010d60 <_svfprintf_r+0x1ca8>
80010d48:	0d410613          	addi	a2,sp,212
80010d4c:	00098593          	mv	a1,s3
80010d50:	00090513          	mv	a0,s2
80010d54:	1b0020ef          	jal	ra,80012f04 <__ssprint_r>
80010d58:	20051c63          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010d5c:	0fc10b93          	addi	s7,sp,252
80010d60:	03412783          	lw	a5,52(sp)
80010d64:	02012703          	lw	a4,32(sp)
80010d68:	008b8b93          	addi	s7,s7,8
80010d6c:	fefbac23          	sw	a5,-8(s7)
80010d70:	02012783          	lw	a5,32(sp)
80010d74:	fefbae23          	sw	a5,-4(s7)
80010d78:	0dc12783          	lw	a5,220(sp)
80010d7c:	00e787b3          	add	a5,a5,a4
80010d80:	0cf12e23          	sw	a5,220(sp)
80010d84:	0d812783          	lw	a5,216(sp)
80010d88:	00700713          	li	a4,7
80010d8c:	00178793          	addi	a5,a5,1
80010d90:	0cf12c23          	sw	a5,216(sp)
80010d94:	00f75e63          	ble	a5,a4,80010db0 <_svfprintf_r+0x1cf8>
80010d98:	0d410613          	addi	a2,sp,212
80010d9c:	00098593          	mv	a1,s3
80010da0:	00090513          	mv	a0,s2
80010da4:	160020ef          	jal	ra,80012f04 <__ssprint_r>
80010da8:	1c051463          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010dac:	0fc10b93          	addi	s7,sp,252
80010db0:	0e012783          	lw	a5,224(sp)
80010db4:	09010593          	addi	a1,sp,144
80010db8:	0a010513          	addi	a0,sp,160
80010dbc:	0af12023          	sw	a5,160(sp)
80010dc0:	0e412783          	lw	a5,228(sp)
80010dc4:	fffa0a93          	addi	s5,s4,-1
80010dc8:	08012823          	sw	zero,144(sp)
80010dcc:	0af12223          	sw	a5,164(sp)
80010dd0:	0e812783          	lw	a5,232(sp)
80010dd4:	08012a23          	sw	zero,148(sp)
80010dd8:	08012c23          	sw	zero,152(sp)
80010ddc:	0af12423          	sw	a5,168(sp)
80010de0:	0ec12783          	lw	a5,236(sp)
80010de4:	08012e23          	sw	zero,156(sp)
80010de8:	0af12623          	sw	a5,172(sp)
80010dec:	5f0040ef          	jal	ra,800153dc <__eqtf2>
80010df0:	08050663          	beqz	a0,80010e7c <_svfprintf_r+0x1dc4>
80010df4:	0dc12783          	lw	a5,220(sp)
80010df8:	0d812703          	lw	a4,216(sp)
80010dfc:	00148493          	addi	s1,s1,1
80010e00:	fff78793          	addi	a5,a5,-1
80010e04:	014787b3          	add	a5,a5,s4
80010e08:	00170713          	addi	a4,a4,1
80010e0c:	009ba023          	sw	s1,0(s7)
80010e10:	015ba223          	sw	s5,4(s7)
80010e14:	0cf12e23          	sw	a5,220(sp)
80010e18:	0ce12c23          	sw	a4,216(sp)
80010e1c:	00700793          	li	a5,7
80010e20:	008b8b93          	addi	s7,s7,8
80010e24:	00e7de63          	ble	a4,a5,80010e40 <_svfprintf_r+0x1d88>
80010e28:	0d410613          	addi	a2,sp,212
80010e2c:	00098593          	mv	a1,s3
80010e30:	00090513          	mv	a0,s2
80010e34:	0d0020ef          	jal	ra,80012f04 <__ssprint_r>
80010e38:	12051c63          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010e3c:	0fc10b93          	addi	s7,sp,252
80010e40:	0c410793          	addi	a5,sp,196
80010e44:	00fba023          	sw	a5,0(s7)
80010e48:	03c12783          	lw	a5,60(sp)
80010e4c:	03c12703          	lw	a4,60(sp)
80010e50:	008b8893          	addi	a7,s7,8
80010e54:	00fba223          	sw	a5,4(s7)
80010e58:	0dc12783          	lw	a5,220(sp)
80010e5c:	00e787b3          	add	a5,a5,a4
80010e60:	0cf12e23          	sw	a5,220(sp)
80010e64:	0d812783          	lw	a5,216(sp)
80010e68:	00700713          	li	a4,7
80010e6c:	00178793          	addi	a5,a5,1
80010e70:	0cf12c23          	sw	a5,216(sp)
80010e74:	8cf75ae3          	ble	a5,a4,80010748 <_svfprintf_r+0x1690>
80010e78:	c1cff06f          	j	80010294 <_svfprintf_r+0x11dc>
80010e7c:	fd5052e3          	blez	s5,80010e40 <_svfprintf_r+0x1d88>
80010e80:	01000493          	li	s1,16
80010e84:	00700c13          	li	s8,7
80010e88:	01412603          	lw	a2,20(sp)
80010e8c:	0d812703          	lw	a4,216(sp)
80010e90:	0dc12783          	lw	a5,220(sp)
80010e94:	00cba023          	sw	a2,0(s7)
80010e98:	00170713          	addi	a4,a4,1
80010e9c:	008b8693          	addi	a3,s7,8
80010ea0:	0354c063          	blt	s1,s5,80010ec0 <_svfprintf_r+0x1e08>
80010ea4:	00fa87b3          	add	a5,s5,a5
80010ea8:	015ba223          	sw	s5,4(s7)
80010eac:	0cf12e23          	sw	a5,220(sp)
80010eb0:	0ce12c23          	sw	a4,216(sp)
80010eb4:	00700793          	li	a5,7
80010eb8:	00068b93          	mv	s7,a3
80010ebc:	f69ff06f          	j	80010e24 <_svfprintf_r+0x1d6c>
80010ec0:	01078793          	addi	a5,a5,16
80010ec4:	009ba223          	sw	s1,4(s7)
80010ec8:	0cf12e23          	sw	a5,220(sp)
80010ecc:	0ce12c23          	sw	a4,216(sp)
80010ed0:	00ec5e63          	ble	a4,s8,80010eec <_svfprintf_r+0x1e34>
80010ed4:	0d410613          	addi	a2,sp,212
80010ed8:	00098593          	mv	a1,s3
80010edc:	00090513          	mv	a0,s2
80010ee0:	024020ef          	jal	ra,80012f04 <__ssprint_r>
80010ee4:	08051663          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010ee8:	0fc10693          	addi	a3,sp,252
80010eec:	ff0a8a93          	addi	s5,s5,-16
80010ef0:	00068b93          	mv	s7,a3
80010ef4:	f95ff06f          	j	80010e88 <_svfprintf_r+0x1dd0>
80010ef8:	00e8a223          	sw	a4,4(a7)
80010efc:	0db12e23          	sw	s11,220(sp)
80010f00:	0cf12c23          	sw	a5,216(sp)
80010f04:	00700713          	li	a4,7
80010f08:	f2f75ce3          	ble	a5,a4,80010e40 <_svfprintf_r+0x1d88>
80010f0c:	f1dff06f          	j	80010e28 <_svfprintf_r+0x1d70>
80010f10:	02812783          	lw	a5,40(sp)
80010f14:	02c12703          	lw	a4,44(sp)
80010f18:	40e78433          	sub	s0,a5,a4
80010f1c:	82805ae3          	blez	s0,80010750 <_svfprintf_r+0x1698>
80010f20:	800204b7          	lui	s1,0x80020
80010f24:	01000a93          	li	s5,16
80010f28:	77c48493          	addi	s1,s1,1916 # 8002077c <__stack+0xfffe3cb0>
80010f2c:	00700b93          	li	s7,7
80010f30:	0d812783          	lw	a5,216(sp)
80010f34:	0098a023          	sw	s1,0(a7)
80010f38:	0dc12703          	lw	a4,220(sp)
80010f3c:	00178793          	addi	a5,a5,1
80010f40:	048ac663          	blt	s5,s0,80010f8c <_svfprintf_r+0x1ed4>
80010f44:	0088a223          	sw	s0,4(a7)
80010f48:	00e40433          	add	s0,s0,a4
80010f4c:	0c812e23          	sw	s0,220(sp)
80010f50:	0cf12c23          	sw	a5,216(sp)
80010f54:	00700713          	li	a4,7
80010f58:	fef75c63          	ble	a5,a4,80010750 <_svfprintf_r+0x1698>
80010f5c:	0d410613          	addi	a2,sp,212
80010f60:	00098593          	mv	a1,s3
80010f64:	00090513          	mv	a0,s2
80010f68:	79d010ef          	jal	ra,80012f04 <__ssprint_r>
80010f6c:	fe050263          	beqz	a0,80010750 <_svfprintf_r+0x1698>
80010f70:	00c12783          	lw	a5,12(sp)
80010f74:	00079463          	bnez	a5,80010f7c <_svfprintf_r+0x1ec4>
80010f78:	f80fe06f          	j	8000f6f8 <_svfprintf_r+0x640>
80010f7c:	00078593          	mv	a1,a5
80010f80:	00090513          	mv	a0,s2
80010f84:	81cfa0ef          	jal	ra,8000afa0 <_free_r>
80010f88:	f70fe06f          	j	8000f6f8 <_svfprintf_r+0x640>
80010f8c:	01070713          	addi	a4,a4,16
80010f90:	0158a223          	sw	s5,4(a7)
80010f94:	0ce12e23          	sw	a4,220(sp)
80010f98:	0cf12c23          	sw	a5,216(sp)
80010f9c:	00888893          	addi	a7,a7,8
80010fa0:	00fbde63          	ble	a5,s7,80010fbc <_svfprintf_r+0x1f04>
80010fa4:	0d410613          	addi	a2,sp,212
80010fa8:	00098593          	mv	a1,s3
80010fac:	00090513          	mv	a0,s2
80010fb0:	755010ef          	jal	ra,80012f04 <__ssprint_r>
80010fb4:	fa051ee3          	bnez	a0,80010f70 <_svfprintf_r+0x1eb8>
80010fb8:	0fc10893          	addi	a7,sp,252
80010fbc:	ff040413          	addi	s0,s0,-16
80010fc0:	f71ff06f          	j	80010f30 <_svfprintf_r+0x1e78>
80010fc4:	00c12583          	lw	a1,12(sp)
80010fc8:	00090513          	mv	a0,s2
80010fcc:	fd5f90ef          	jal	ra,8000afa0 <_free_r>
80010fd0:	fc4ff06f          	j	80010794 <_svfprintf_r+0x16dc>
80010fd4:	0dc12783          	lw	a5,220(sp)
80010fd8:	00079463          	bnez	a5,80010fe0 <_svfprintf_r+0x1f28>
80010fdc:	f1cfe06f          	j	8000f6f8 <_svfprintf_r+0x640>
80010fe0:	0d410613          	addi	a2,sp,212
80010fe4:	00098593          	mv	a1,s3
80010fe8:	00090513          	mv	a0,s2
80010fec:	719010ef          	jal	ra,80012f04 <__ssprint_r>
80010ff0:	f08fe06f          	j	8000f6f8 <_svfprintf_r+0x640>

80010ff4 <__sprint_r>:
80010ff4:	00862783          	lw	a5,8(a2)
80010ff8:	fd010113          	addi	sp,sp,-48
80010ffc:	02812423          	sw	s0,40(sp)
80011000:	02112623          	sw	ra,44(sp)
80011004:	02912223          	sw	s1,36(sp)
80011008:	03212023          	sw	s2,32(sp)
8001100c:	01312e23          	sw	s3,28(sp)
80011010:	01412c23          	sw	s4,24(sp)
80011014:	01512a23          	sw	s5,20(sp)
80011018:	01612823          	sw	s6,16(sp)
8001101c:	01712623          	sw	s7,12(sp)
80011020:	01812423          	sw	s8,8(sp)
80011024:	00060413          	mv	s0,a2
80011028:	02079e63          	bnez	a5,80011064 <__sprint_r+0x70>
8001102c:	00062223          	sw	zero,4(a2)
80011030:	00000513          	li	a0,0
80011034:	02c12083          	lw	ra,44(sp)
80011038:	02812403          	lw	s0,40(sp)
8001103c:	02412483          	lw	s1,36(sp)
80011040:	02012903          	lw	s2,32(sp)
80011044:	01c12983          	lw	s3,28(sp)
80011048:	01812a03          	lw	s4,24(sp)
8001104c:	01412a83          	lw	s5,20(sp)
80011050:	01012b03          	lw	s6,16(sp)
80011054:	00c12b83          	lw	s7,12(sp)
80011058:	00812c03          	lw	s8,8(sp)
8001105c:	03010113          	addi	sp,sp,48
80011060:	00008067          	ret
80011064:	0645a783          	lw	a5,100(a1)
80011068:	00058913          	mv	s2,a1
8001106c:	01279713          	slli	a4,a5,0x12
80011070:	06075a63          	bgez	a4,800110e4 <__sprint_r+0xf0>
80011074:	00062483          	lw	s1,0(a2)
80011078:	00050a13          	mv	s4,a0
8001107c:	fff00b93          	li	s7,-1
80011080:	00842783          	lw	a5,8(s0)
80011084:	00079a63          	bnez	a5,80011098 <__sprint_r+0xa4>
80011088:	00000513          	li	a0,0
8001108c:	00042423          	sw	zero,8(s0)
80011090:	00042223          	sw	zero,4(s0)
80011094:	fa1ff06f          	j	80011034 <__sprint_r+0x40>
80011098:	0044a983          	lw	s3,4(s1)
8001109c:	0004ab03          	lw	s6,0(s1)
800110a0:	00000a93          	li	s5,0
800110a4:	0029dc13          	srli	s8,s3,0x2
800110a8:	018ace63          	blt	s5,s8,800110c4 <__sprint_r+0xd0>
800110ac:	00842783          	lw	a5,8(s0)
800110b0:	ffc9f993          	andi	s3,s3,-4
800110b4:	00848493          	addi	s1,s1,8
800110b8:	413789b3          	sub	s3,a5,s3
800110bc:	01342423          	sw	s3,8(s0)
800110c0:	fc1ff06f          	j	80011080 <__sprint_r+0x8c>
800110c4:	000b2583          	lw	a1,0(s6)
800110c8:	00090613          	mv	a2,s2
800110cc:	000a0513          	mv	a0,s4
800110d0:	110010ef          	jal	ra,800121e0 <_fputwc_r>
800110d4:	004b0b13          	addi	s6,s6,4
800110d8:	01750a63          	beq	a0,s7,800110ec <__sprint_r+0xf8>
800110dc:	001a8a93          	addi	s5,s5,1
800110e0:	fc9ff06f          	j	800110a8 <__sprint_r+0xb4>
800110e4:	1d0010ef          	jal	ra,800122b4 <__sfvwrite_r>
800110e8:	fa5ff06f          	j	8001108c <__sprint_r+0x98>
800110ec:	fff00513          	li	a0,-1
800110f0:	f9dff06f          	j	8001108c <__sprint_r+0x98>

800110f4 <_vfiprintf_r>:
800110f4:	ed010113          	addi	sp,sp,-304
800110f8:	12812423          	sw	s0,296(sp)
800110fc:	13212023          	sw	s2,288(sp)
80011100:	11312e23          	sw	s3,284(sp)
80011104:	11412c23          	sw	s4,280(sp)
80011108:	12112623          	sw	ra,300(sp)
8001110c:	12912223          	sw	s1,292(sp)
80011110:	11512a23          	sw	s5,276(sp)
80011114:	11612823          	sw	s6,272(sp)
80011118:	11712623          	sw	s7,268(sp)
8001111c:	11812423          	sw	s8,264(sp)
80011120:	11912223          	sw	s9,260(sp)
80011124:	11a12023          	sw	s10,256(sp)
80011128:	0fb12e23          	sw	s11,252(sp)
8001112c:	00050993          	mv	s3,a0
80011130:	00058413          	mv	s0,a1
80011134:	00060a13          	mv	s4,a2
80011138:	00068913          	mv	s2,a3
8001113c:	00050863          	beqz	a0,8001114c <_vfiprintf_r+0x58>
80011140:	03852783          	lw	a5,56(a0)
80011144:	00079463          	bnez	a5,8001114c <_vfiprintf_r+0x58>
80011148:	b95f90ef          	jal	ra,8000acdc <__sinit>
8001114c:	00c41783          	lh	a5,12(s0)
80011150:	01279713          	slli	a4,a5,0x12
80011154:	02074263          	bltz	a4,80011178 <_vfiprintf_r+0x84>
80011158:	000026b7          	lui	a3,0x2
8001115c:	06442703          	lw	a4,100(s0)
80011160:	00d7e7b3          	or	a5,a5,a3
80011164:	00f41623          	sh	a5,12(s0)
80011168:	ffffe7b7          	lui	a5,0xffffe
8001116c:	fff78793          	addi	a5,a5,-1 # ffffdfff <__stack+0x7ffc1533>
80011170:	00f777b3          	and	a5,a4,a5
80011174:	06f42223          	sw	a5,100(s0)
80011178:	00c45783          	lhu	a5,12(s0)
8001117c:	0087f793          	andi	a5,a5,8
80011180:	06078e63          	beqz	a5,800111fc <_vfiprintf_r+0x108>
80011184:	01042783          	lw	a5,16(s0)
80011188:	06078a63          	beqz	a5,800111fc <_vfiprintf_r+0x108>
8001118c:	00c45783          	lhu	a5,12(s0)
80011190:	00a00713          	li	a4,10
80011194:	01a7f793          	andi	a5,a5,26
80011198:	06e79e63          	bne	a5,a4,80011214 <_vfiprintf_r+0x120>
8001119c:	00e41783          	lh	a5,14(s0)
800111a0:	0607ca63          	bltz	a5,80011214 <_vfiprintf_r+0x120>
800111a4:	00090693          	mv	a3,s2
800111a8:	000a0613          	mv	a2,s4
800111ac:	00040593          	mv	a1,s0
800111b0:	00098513          	mv	a0,s3
800111b4:	3e5000ef          	jal	ra,80011d98 <__sbprintf>
800111b8:	00050b93          	mv	s7,a0
800111bc:	12c12083          	lw	ra,300(sp)
800111c0:	12812403          	lw	s0,296(sp)
800111c4:	000b8513          	mv	a0,s7
800111c8:	12412483          	lw	s1,292(sp)
800111cc:	12012903          	lw	s2,288(sp)
800111d0:	11c12983          	lw	s3,284(sp)
800111d4:	11812a03          	lw	s4,280(sp)
800111d8:	11412a83          	lw	s5,276(sp)
800111dc:	11012b03          	lw	s6,272(sp)
800111e0:	10c12b83          	lw	s7,268(sp)
800111e4:	10812c03          	lw	s8,264(sp)
800111e8:	10412c83          	lw	s9,260(sp)
800111ec:	10012d03          	lw	s10,256(sp)
800111f0:	0fc12d83          	lw	s11,252(sp)
800111f4:	13010113          	addi	sp,sp,304
800111f8:	00008067          	ret
800111fc:	00040593          	mv	a1,s0
80011200:	00098513          	mv	a0,s3
80011204:	dfcf90ef          	jal	ra,8000a800 <__swsetup_r>
80011208:	f80502e3          	beqz	a0,8001118c <_vfiprintf_r+0x98>
8001120c:	fff00b93          	li	s7,-1
80011210:	fadff06f          	j	800111bc <_vfiprintf_r+0xc8>
80011214:	800207b7          	lui	a5,0x80020
80011218:	79c78793          	addi	a5,a5,1948 # 8002079c <__stack+0xfffe3cd0>
8001121c:	00f12e23          	sw	a5,28(sp)
80011220:	800217b7          	lui	a5,0x80021
80011224:	04c10b13          	addi	s6,sp,76
80011228:	91878793          	addi	a5,a5,-1768 # 80020918 <__stack+0xfffe3e4c>
8001122c:	05612023          	sw	s6,64(sp)
80011230:	04012423          	sw	zero,72(sp)
80011234:	04012223          	sw	zero,68(sp)
80011238:	000b0713          	mv	a4,s6
8001123c:	00012423          	sw	zero,8(sp)
80011240:	00012223          	sw	zero,4(sp)
80011244:	00012623          	sw	zero,12(sp)
80011248:	00012a23          	sw	zero,20(sp)
8001124c:	00000b93          	li	s7,0
80011250:	00f12823          	sw	a5,16(sp)
80011254:	000a0493          	mv	s1,s4
80011258:	02500693          	li	a3,37
8001125c:	0004c783          	lbu	a5,0(s1)
80011260:	00078463          	beqz	a5,80011268 <_vfiprintf_r+0x174>
80011264:	0ad79263          	bne	a5,a3,80011308 <_vfiprintf_r+0x214>
80011268:	41448ab3          	sub	s5,s1,s4
8001126c:	040a8663          	beqz	s5,800112b8 <_vfiprintf_r+0x1c4>
80011270:	04812783          	lw	a5,72(sp)
80011274:	01472023          	sw	s4,0(a4)
80011278:	01572223          	sw	s5,4(a4)
8001127c:	015787b3          	add	a5,a5,s5
80011280:	04f12423          	sw	a5,72(sp)
80011284:	04412783          	lw	a5,68(sp)
80011288:	00700693          	li	a3,7
8001128c:	00870713          	addi	a4,a4,8
80011290:	00178793          	addi	a5,a5,1
80011294:	04f12223          	sw	a5,68(sp)
80011298:	00f6de63          	ble	a5,a3,800112b4 <_vfiprintf_r+0x1c0>
8001129c:	04010613          	addi	a2,sp,64
800112a0:	00040593          	mv	a1,s0
800112a4:	00098513          	mv	a0,s3
800112a8:	d4dff0ef          	jal	ra,80010ff4 <__sprint_r>
800112ac:	260518e3          	bnez	a0,80011d1c <_vfiprintf_r+0xc28>
800112b0:	000b0713          	mv	a4,s6
800112b4:	015b8bb3          	add	s7,s7,s5
800112b8:	0004c783          	lbu	a5,0(s1)
800112bc:	2a0784e3          	beqz	a5,80011d64 <_vfiprintf_r+0xc70>
800112c0:	00148a13          	addi	s4,s1,1
800112c4:	02010da3          	sb	zero,59(sp)
800112c8:	fff00493          	li	s1,-1
800112cc:	00000a93          	li	s5,0
800112d0:	00000d13          	li	s10,0
800112d4:	00a00c13          	li	s8,10
800112d8:	02a00c93          	li	s9,42
800112dc:	05a00813          	li	a6,90
800112e0:	00900593          	li	a1,9
800112e4:	000a4603          	lbu	a2,0(s4)
800112e8:	001a0a13          	addi	s4,s4,1
800112ec:	fe060693          	addi	a3,a2,-32
800112f0:	0cd86ee3          	bltu	a6,a3,80011bcc <_vfiprintf_r+0xad8>
800112f4:	01c12783          	lw	a5,28(sp)
800112f8:	00269693          	slli	a3,a3,0x2
800112fc:	00f686b3          	add	a3,a3,a5
80011300:	0006a683          	lw	a3,0(a3) # 2000 <_HEAP_SIZE+0x1000>
80011304:	00068067          	jr	a3
80011308:	00148493          	addi	s1,s1,1
8001130c:	f51ff06f          	j	8001125c <_vfiprintf_r+0x168>
80011310:	800216b7          	lui	a3,0x80021
80011314:	d9068793          	addi	a5,a3,-624 # 80020d90 <__stack+0xfffe42c4>
80011318:	00f12423          	sw	a5,8(sp)
8001131c:	020d7693          	andi	a3,s10,32
80011320:	6c068063          	beqz	a3,800119e0 <_vfiprintf_r+0x8ec>
80011324:	00790913          	addi	s2,s2,7
80011328:	ff897913          	andi	s2,s2,-8
8001132c:	00092883          	lw	a7,0(s2)
80011330:	00492c83          	lw	s9,4(s2)
80011334:	00890c13          	addi	s8,s2,8
80011338:	001d7693          	andi	a3,s10,1
8001133c:	00068e63          	beqz	a3,80011358 <_vfiprintf_r+0x264>
80011340:	0198e6b3          	or	a3,a7,s9
80011344:	00068a63          	beqz	a3,80011358 <_vfiprintf_r+0x264>
80011348:	03000693          	li	a3,48
8001134c:	02d10e23          	sb	a3,60(sp)
80011350:	02c10ea3          	sb	a2,61(sp)
80011354:	002d6d13          	ori	s10,s10,2
80011358:	bffd7d13          	andi	s10,s10,-1025
8001135c:	31c0006f          	j	80011678 <_vfiprintf_r+0x584>
80011360:	00098513          	mv	a0,s3
80011364:	00e12023          	sw	a4,0(sp)
80011368:	818fc0ef          	jal	ra,8000d380 <_localeconv_r>
8001136c:	00452783          	lw	a5,4(a0)
80011370:	00078513          	mv	a0,a5
80011374:	00f12a23          	sw	a5,20(sp)
80011378:	cddfd0ef          	jal	ra,8000f054 <strlen>
8001137c:	00a12623          	sw	a0,12(sp)
80011380:	00098513          	mv	a0,s3
80011384:	ffdfb0ef          	jal	ra,8000d380 <_localeconv_r>
80011388:	00852783          	lw	a5,8(a0)
8001138c:	00012703          	lw	a4,0(sp)
80011390:	00f12223          	sw	a5,4(sp)
80011394:	00c12783          	lw	a5,12(sp)
80011398:	f40782e3          	beqz	a5,800112dc <_vfiprintf_r+0x1e8>
8001139c:	00412783          	lw	a5,4(sp)
800113a0:	f2078ee3          	beqz	a5,800112dc <_vfiprintf_r+0x1e8>
800113a4:	0007c683          	lbu	a3,0(a5)
800113a8:	f2068ae3          	beqz	a3,800112dc <_vfiprintf_r+0x1e8>
800113ac:	400d6d13          	ori	s10,s10,1024
800113b0:	f2dff06f          	j	800112dc <_vfiprintf_r+0x1e8>
800113b4:	03b14683          	lbu	a3,59(sp)
800113b8:	f20692e3          	bnez	a3,800112dc <_vfiprintf_r+0x1e8>
800113bc:	02000693          	li	a3,32
800113c0:	02d10da3          	sb	a3,59(sp)
800113c4:	f19ff06f          	j	800112dc <_vfiprintf_r+0x1e8>
800113c8:	001d6d13          	ori	s10,s10,1
800113cc:	f11ff06f          	j	800112dc <_vfiprintf_r+0x1e8>
800113d0:	00092a83          	lw	s5,0(s2)
800113d4:	00490913          	addi	s2,s2,4
800113d8:	f00ad2e3          	bgez	s5,800112dc <_vfiprintf_r+0x1e8>
800113dc:	41500ab3          	neg	s5,s5
800113e0:	004d6d13          	ori	s10,s10,4
800113e4:	ef9ff06f          	j	800112dc <_vfiprintf_r+0x1e8>
800113e8:	02b00693          	li	a3,43
800113ec:	fd5ff06f          	j	800113c0 <_vfiprintf_r+0x2cc>
800113f0:	000a4603          	lbu	a2,0(s4)
800113f4:	001a0693          	addi	a3,s4,1
800113f8:	05961063          	bne	a2,s9,80011438 <_vfiprintf_r+0x344>
800113fc:	00092483          	lw	s1,0(s2)
80011400:	00490613          	addi	a2,s2,4
80011404:	0004d463          	bgez	s1,8001140c <_vfiprintf_r+0x318>
80011408:	fff00493          	li	s1,-1
8001140c:	00060913          	mv	s2,a2
80011410:	00068a13          	mv	s4,a3
80011414:	ec9ff06f          	j	800112dc <_vfiprintf_r+0x1e8>
80011418:	038484b3          	mul	s1,s1,s8
8001141c:	00168693          	addi	a3,a3,1
80011420:	fff6c603          	lbu	a2,-1(a3)
80011424:	00a484b3          	add	s1,s1,a0
80011428:	fd060513          	addi	a0,a2,-48
8001142c:	fea5f6e3          	bleu	a0,a1,80011418 <_vfiprintf_r+0x324>
80011430:	00068a13          	mv	s4,a3
80011434:	eb9ff06f          	j	800112ec <_vfiprintf_r+0x1f8>
80011438:	00000493          	li	s1,0
8001143c:	fedff06f          	j	80011428 <_vfiprintf_r+0x334>
80011440:	080d6d13          	ori	s10,s10,128
80011444:	e99ff06f          	j	800112dc <_vfiprintf_r+0x1e8>
80011448:	000a0693          	mv	a3,s4
8001144c:	00000a93          	li	s5,0
80011450:	038a8ab3          	mul	s5,s5,s8
80011454:	fd060613          	addi	a2,a2,-48
80011458:	00168693          	addi	a3,a3,1
8001145c:	01560ab3          	add	s5,a2,s5
80011460:	fff6c603          	lbu	a2,-1(a3)
80011464:	fd060513          	addi	a0,a2,-48
80011468:	fea5f4e3          	bleu	a0,a1,80011450 <_vfiprintf_r+0x35c>
8001146c:	fc5ff06f          	j	80011430 <_vfiprintf_r+0x33c>
80011470:	000a4603          	lbu	a2,0(s4)
80011474:	06800693          	li	a3,104
80011478:	00d61863          	bne	a2,a3,80011488 <_vfiprintf_r+0x394>
8001147c:	001a0a13          	addi	s4,s4,1
80011480:	200d6d13          	ori	s10,s10,512
80011484:	e59ff06f          	j	800112dc <_vfiprintf_r+0x1e8>
80011488:	040d6d13          	ori	s10,s10,64
8001148c:	e51ff06f          	j	800112dc <_vfiprintf_r+0x1e8>
80011490:	000a4603          	lbu	a2,0(s4)
80011494:	06c00693          	li	a3,108
80011498:	00d61863          	bne	a2,a3,800114a8 <_vfiprintf_r+0x3b4>
8001149c:	001a0a13          	addi	s4,s4,1
800114a0:	020d6d13          	ori	s10,s10,32
800114a4:	e39ff06f          	j	800112dc <_vfiprintf_r+0x1e8>
800114a8:	010d6d13          	ori	s10,s10,16
800114ac:	e31ff06f          	j	800112dc <_vfiprintf_r+0x1e8>
800114b0:	00092683          	lw	a3,0(s2)
800114b4:	00490c13          	addi	s8,s2,4
800114b8:	02010da3          	sb	zero,59(sp)
800114bc:	08d10623          	sb	a3,140(sp)
800114c0:	00100493          	li	s1,1
800114c4:	00000c93          	li	s9,0
800114c8:	08c10913          	addi	s2,sp,140
800114cc:	1ec0006f          	j	800116b8 <_vfiprintf_r+0x5c4>
800114d0:	010d6d13          	ori	s10,s10,16
800114d4:	020d7693          	andi	a3,s10,32
800114d8:	04068c63          	beqz	a3,80011530 <_vfiprintf_r+0x43c>
800114dc:	00790913          	addi	s2,s2,7
800114e0:	ff897913          	andi	s2,s2,-8
800114e4:	00092883          	lw	a7,0(s2)
800114e8:	00492c83          	lw	s9,4(s2)
800114ec:	00890c13          	addi	s8,s2,8
800114f0:	000cde63          	bgez	s9,8001150c <_vfiprintf_r+0x418>
800114f4:	411008b3          	neg	a7,a7
800114f8:	011036b3          	snez	a3,a7
800114fc:	41900333          	neg	t1,s9
80011500:	40d30cb3          	sub	s9,t1,a3
80011504:	02d00693          	li	a3,45
80011508:	02d10da3          	sb	a3,59(sp)
8001150c:	fff00693          	li	a3,-1
80011510:	50d49463          	bne	s1,a3,80011a18 <_vfiprintf_r+0x924>
80011514:	560c9e63          	bnez	s9,80011a90 <_vfiprintf_r+0x99c>
80011518:	00900693          	li	a3,9
8001151c:	5716ea63          	bltu	a3,a7,80011a90 <_vfiprintf_r+0x99c>
80011520:	03088893          	addi	a7,a7,48
80011524:	0f1107a3          	sb	a7,239(sp)
80011528:	0ef10913          	addi	s2,sp,239
8001152c:	54c0006f          	j	80011a78 <_vfiprintf_r+0x984>
80011530:	010d7693          	andi	a3,s10,16
80011534:	00490c13          	addi	s8,s2,4
80011538:	00068863          	beqz	a3,80011548 <_vfiprintf_r+0x454>
8001153c:	00092883          	lw	a7,0(s2)
80011540:	41f8dc93          	srai	s9,a7,0x1f
80011544:	fadff06f          	j	800114f0 <_vfiprintf_r+0x3fc>
80011548:	040d7693          	andi	a3,s10,64
8001154c:	00092883          	lw	a7,0(s2)
80011550:	00068863          	beqz	a3,80011560 <_vfiprintf_r+0x46c>
80011554:	01089893          	slli	a7,a7,0x10
80011558:	4108d893          	srai	a7,a7,0x10
8001155c:	fe5ff06f          	j	80011540 <_vfiprintf_r+0x44c>
80011560:	200d7693          	andi	a3,s10,512
80011564:	fc068ee3          	beqz	a3,80011540 <_vfiprintf_r+0x44c>
80011568:	01889893          	slli	a7,a7,0x18
8001156c:	4188d893          	srai	a7,a7,0x18
80011570:	fd1ff06f          	j	80011540 <_vfiprintf_r+0x44c>
80011574:	020d7613          	andi	a2,s10,32
80011578:	00092683          	lw	a3,0(s2)
8001157c:	00490913          	addi	s2,s2,4
80011580:	00060a63          	beqz	a2,80011594 <_vfiprintf_r+0x4a0>
80011584:	41fbd793          	srai	a5,s7,0x1f
80011588:	0176a023          	sw	s7,0(a3)
8001158c:	00f6a223          	sw	a5,4(a3)
80011590:	cc5ff06f          	j	80011254 <_vfiprintf_r+0x160>
80011594:	010d7613          	andi	a2,s10,16
80011598:	00060663          	beqz	a2,800115a4 <_vfiprintf_r+0x4b0>
8001159c:	0176a023          	sw	s7,0(a3)
800115a0:	cb5ff06f          	j	80011254 <_vfiprintf_r+0x160>
800115a4:	040d7613          	andi	a2,s10,64
800115a8:	00060663          	beqz	a2,800115b4 <_vfiprintf_r+0x4c0>
800115ac:	01769023          	sh	s7,0(a3)
800115b0:	ca5ff06f          	j	80011254 <_vfiprintf_r+0x160>
800115b4:	200d7793          	andi	a5,s10,512
800115b8:	fe0782e3          	beqz	a5,8001159c <_vfiprintf_r+0x4a8>
800115bc:	01768023          	sb	s7,0(a3)
800115c0:	c95ff06f          	j	80011254 <_vfiprintf_r+0x160>
800115c4:	010d6d13          	ori	s10,s10,16
800115c8:	020d7693          	andi	a3,s10,32
800115cc:	04068663          	beqz	a3,80011618 <_vfiprintf_r+0x524>
800115d0:	00790913          	addi	s2,s2,7
800115d4:	ff897913          	andi	s2,s2,-8
800115d8:	00092883          	lw	a7,0(s2)
800115dc:	00492c83          	lw	s9,4(s2)
800115e0:	00890c13          	addi	s8,s2,8
800115e4:	bffd7d13          	andi	s10,s10,-1025
800115e8:	00000693          	li	a3,0
800115ec:	02010da3          	sb	zero,59(sp)
800115f0:	fff00613          	li	a2,-1
800115f4:	42c48863          	beq	s1,a2,80011a24 <_vfiprintf_r+0x930>
800115f8:	000d0613          	mv	a2,s10
800115fc:	0198e5b3          	or	a1,a7,s9
80011600:	f7fd7d13          	andi	s10,s10,-129
80011604:	42059063          	bnez	a1,80011a24 <_vfiprintf_r+0x930>
80011608:	5a048463          	beqz	s1,80011bb0 <_vfiprintf_r+0xabc>
8001160c:	00100613          	li	a2,1
80011610:	40c69e63          	bne	a3,a2,80011a2c <_vfiprintf_r+0x938>
80011614:	f0dff06f          	j	80011520 <_vfiprintf_r+0x42c>
80011618:	010d7693          	andi	a3,s10,16
8001161c:	00490c13          	addi	s8,s2,4
80011620:	00068663          	beqz	a3,8001162c <_vfiprintf_r+0x538>
80011624:	00092883          	lw	a7,0(s2)
80011628:	0100006f          	j	80011638 <_vfiprintf_r+0x544>
8001162c:	040d7693          	andi	a3,s10,64
80011630:	00068863          	beqz	a3,80011640 <_vfiprintf_r+0x54c>
80011634:	00095883          	lhu	a7,0(s2)
80011638:	00000c93          	li	s9,0
8001163c:	fa9ff06f          	j	800115e4 <_vfiprintf_r+0x4f0>
80011640:	200d7693          	andi	a3,s10,512
80011644:	fe0680e3          	beqz	a3,80011624 <_vfiprintf_r+0x530>
80011648:	00094883          	lbu	a7,0(s2)
8001164c:	fedff06f          	j	80011638 <_vfiprintf_r+0x544>
80011650:	ffff86b7          	lui	a3,0xffff8
80011654:	8306c693          	xori	a3,a3,-2000
80011658:	02d11e23          	sh	a3,60(sp)
8001165c:	00092883          	lw	a7,0(s2)
80011660:	800216b7          	lui	a3,0x80021
80011664:	d7c68793          	addi	a5,a3,-644 # 80020d7c <__stack+0xfffe42b0>
80011668:	00490c13          	addi	s8,s2,4
8001166c:	00000c93          	li	s9,0
80011670:	002d6d13          	ori	s10,s10,2
80011674:	00f12423          	sw	a5,8(sp)
80011678:	00200693          	li	a3,2
8001167c:	f71ff06f          	j	800115ec <_vfiprintf_r+0x4f8>
80011680:	02010da3          	sb	zero,59(sp)
80011684:	fff00693          	li	a3,-1
80011688:	00e12023          	sw	a4,0(sp)
8001168c:	00490c13          	addi	s8,s2,4
80011690:	00092903          	lw	s2,0(s2)
80011694:	2cd48463          	beq	s1,a3,8001195c <_vfiprintf_r+0x868>
80011698:	00048613          	mv	a2,s1
8001169c:	00000593          	li	a1,0
800116a0:	00090513          	mv	a0,s2
800116a4:	e4cfc0ef          	jal	ra,8000dcf0 <memchr>
800116a8:	00000c93          	li	s9,0
800116ac:	00012703          	lw	a4,0(sp)
800116b0:	00050463          	beqz	a0,800116b8 <_vfiprintf_r+0x5c4>
800116b4:	412504b3          	sub	s1,a0,s2
800116b8:	01912023          	sw	s9,0(sp)
800116bc:	009cd463          	ble	s1,s9,800116c4 <_vfiprintf_r+0x5d0>
800116c0:	00912023          	sw	s1,0(sp)
800116c4:	03b14683          	lbu	a3,59(sp)
800116c8:	00068863          	beqz	a3,800116d8 <_vfiprintf_r+0x5e4>
800116cc:	00012783          	lw	a5,0(sp)
800116d0:	00178793          	addi	a5,a5,1
800116d4:	00f12023          	sw	a5,0(sp)
800116d8:	002d7d93          	andi	s11,s10,2
800116dc:	000d8863          	beqz	s11,800116ec <_vfiprintf_r+0x5f8>
800116e0:	00012783          	lw	a5,0(sp)
800116e4:	00278793          	addi	a5,a5,2
800116e8:	00f12023          	sw	a5,0(sp)
800116ec:	084d7793          	andi	a5,s10,132
800116f0:	00f12c23          	sw	a5,24(sp)
800116f4:	06079663          	bnez	a5,80011760 <_vfiprintf_r+0x66c>
800116f8:	00012783          	lw	a5,0(sp)
800116fc:	40fa86b3          	sub	a3,s5,a5
80011700:	06d05063          	blez	a3,80011760 <_vfiprintf_r+0x66c>
80011704:	800217b7          	lui	a5,0x80021
80011708:	01000893          	li	a7,16
8001170c:	90878813          	addi	a6,a5,-1784 # 80020908 <__stack+0xfffe3e3c>
80011710:	00700313          	li	t1,7
80011714:	04412603          	lw	a2,68(sp)
80011718:	01072023          	sw	a6,0(a4)
8001171c:	04812583          	lw	a1,72(sp)
80011720:	00160613          	addi	a2,a2,1
80011724:	00870513          	addi	a0,a4,8
80011728:	4ad8cc63          	blt	a7,a3,80011be0 <_vfiprintf_r+0xaec>
8001172c:	00d72223          	sw	a3,4(a4)
80011730:	00b686b3          	add	a3,a3,a1
80011734:	04d12423          	sw	a3,72(sp)
80011738:	04c12223          	sw	a2,68(sp)
8001173c:	00700693          	li	a3,7
80011740:	00050713          	mv	a4,a0
80011744:	00c6de63          	ble	a2,a3,80011760 <_vfiprintf_r+0x66c>
80011748:	04010613          	addi	a2,sp,64
8001174c:	00040593          	mv	a1,s0
80011750:	00098513          	mv	a0,s3
80011754:	8a1ff0ef          	jal	ra,80010ff4 <__sprint_r>
80011758:	5c051263          	bnez	a0,80011d1c <_vfiprintf_r+0xc28>
8001175c:	000b0713          	mv	a4,s6
80011760:	03b14683          	lbu	a3,59(sp)
80011764:	04068863          	beqz	a3,800117b4 <_vfiprintf_r+0x6c0>
80011768:	03b10613          	addi	a2,sp,59
8001176c:	00c72023          	sw	a2,0(a4)
80011770:	00100613          	li	a2,1
80011774:	04412683          	lw	a3,68(sp)
80011778:	00c72223          	sw	a2,4(a4)
8001177c:	04812603          	lw	a2,72(sp)
80011780:	00168693          	addi	a3,a3,1
80011784:	04d12223          	sw	a3,68(sp)
80011788:	00160613          	addi	a2,a2,1
8001178c:	04c12423          	sw	a2,72(sp)
80011790:	00700613          	li	a2,7
80011794:	00870713          	addi	a4,a4,8
80011798:	00d65e63          	ble	a3,a2,800117b4 <_vfiprintf_r+0x6c0>
8001179c:	04010613          	addi	a2,sp,64
800117a0:	00040593          	mv	a1,s0
800117a4:	00098513          	mv	a0,s3
800117a8:	84dff0ef          	jal	ra,80010ff4 <__sprint_r>
800117ac:	56051863          	bnez	a0,80011d1c <_vfiprintf_r+0xc28>
800117b0:	000b0713          	mv	a4,s6
800117b4:	040d8863          	beqz	s11,80011804 <_vfiprintf_r+0x710>
800117b8:	03c10613          	addi	a2,sp,60
800117bc:	00c72023          	sw	a2,0(a4)
800117c0:	00200613          	li	a2,2
800117c4:	04412683          	lw	a3,68(sp)
800117c8:	00c72223          	sw	a2,4(a4)
800117cc:	04812603          	lw	a2,72(sp)
800117d0:	00168693          	addi	a3,a3,1
800117d4:	04d12223          	sw	a3,68(sp)
800117d8:	00260613          	addi	a2,a2,2
800117dc:	04c12423          	sw	a2,72(sp)
800117e0:	00700613          	li	a2,7
800117e4:	00870713          	addi	a4,a4,8
800117e8:	00d65e63          	ble	a3,a2,80011804 <_vfiprintf_r+0x710>
800117ec:	04010613          	addi	a2,sp,64
800117f0:	00040593          	mv	a1,s0
800117f4:	00098513          	mv	a0,s3
800117f8:	ffcff0ef          	jal	ra,80010ff4 <__sprint_r>
800117fc:	52051063          	bnez	a0,80011d1c <_vfiprintf_r+0xc28>
80011800:	000b0713          	mv	a4,s6
80011804:	01812783          	lw	a5,24(sp)
80011808:	08000693          	li	a3,128
8001180c:	06d79463          	bne	a5,a3,80011874 <_vfiprintf_r+0x780>
80011810:	00012783          	lw	a5,0(sp)
80011814:	40fa8db3          	sub	s11,s5,a5
80011818:	05b05e63          	blez	s11,80011874 <_vfiprintf_r+0x780>
8001181c:	01000813          	li	a6,16
80011820:	00700893          	li	a7,7
80011824:	01012783          	lw	a5,16(sp)
80011828:	04412683          	lw	a3,68(sp)
8001182c:	04812603          	lw	a2,72(sp)
80011830:	00f72023          	sw	a5,0(a4)
80011834:	00168693          	addi	a3,a3,1
80011838:	00870593          	addi	a1,a4,8
8001183c:	3fb84e63          	blt	a6,s11,80011c38 <_vfiprintf_r+0xb44>
80011840:	01b72223          	sw	s11,4(a4)
80011844:	00cd8db3          	add	s11,s11,a2
80011848:	05b12423          	sw	s11,72(sp)
8001184c:	04d12223          	sw	a3,68(sp)
80011850:	00700613          	li	a2,7
80011854:	00058713          	mv	a4,a1
80011858:	00d65e63          	ble	a3,a2,80011874 <_vfiprintf_r+0x780>
8001185c:	04010613          	addi	a2,sp,64
80011860:	00040593          	mv	a1,s0
80011864:	00098513          	mv	a0,s3
80011868:	f8cff0ef          	jal	ra,80010ff4 <__sprint_r>
8001186c:	4a051863          	bnez	a0,80011d1c <_vfiprintf_r+0xc28>
80011870:	000b0713          	mv	a4,s6
80011874:	409c8cb3          	sub	s9,s9,s1
80011878:	05905e63          	blez	s9,800118d4 <_vfiprintf_r+0x7e0>
8001187c:	01000d93          	li	s11,16
80011880:	00700813          	li	a6,7
80011884:	01012783          	lw	a5,16(sp)
80011888:	04412683          	lw	a3,68(sp)
8001188c:	04812603          	lw	a2,72(sp)
80011890:	00f72023          	sw	a5,0(a4)
80011894:	00168693          	addi	a3,a3,1
80011898:	00870593          	addi	a1,a4,8
8001189c:	3f9dc263          	blt	s11,s9,80011c80 <_vfiprintf_r+0xb8c>
800118a0:	01972223          	sw	s9,4(a4)
800118a4:	00cc8cb3          	add	s9,s9,a2
800118a8:	05912423          	sw	s9,72(sp)
800118ac:	04d12223          	sw	a3,68(sp)
800118b0:	00700613          	li	a2,7
800118b4:	00058713          	mv	a4,a1
800118b8:	00d65e63          	ble	a3,a2,800118d4 <_vfiprintf_r+0x7e0>
800118bc:	04010613          	addi	a2,sp,64
800118c0:	00040593          	mv	a1,s0
800118c4:	00098513          	mv	a0,s3
800118c8:	f2cff0ef          	jal	ra,80010ff4 <__sprint_r>
800118cc:	44051863          	bnez	a0,80011d1c <_vfiprintf_r+0xc28>
800118d0:	000b0713          	mv	a4,s6
800118d4:	04812683          	lw	a3,72(sp)
800118d8:	00972223          	sw	s1,4(a4)
800118dc:	01272023          	sw	s2,0(a4)
800118e0:	009684b3          	add	s1,a3,s1
800118e4:	04412683          	lw	a3,68(sp)
800118e8:	04912423          	sw	s1,72(sp)
800118ec:	00700613          	li	a2,7
800118f0:	00168693          	addi	a3,a3,1
800118f4:	04d12223          	sw	a3,68(sp)
800118f8:	00870713          	addi	a4,a4,8
800118fc:	00d65e63          	ble	a3,a2,80011918 <_vfiprintf_r+0x824>
80011900:	04010613          	addi	a2,sp,64
80011904:	00040593          	mv	a1,s0
80011908:	00098513          	mv	a0,s3
8001190c:	ee8ff0ef          	jal	ra,80010ff4 <__sprint_r>
80011910:	40051663          	bnez	a0,80011d1c <_vfiprintf_r+0xc28>
80011914:	000b0713          	mv	a4,s6
80011918:	004d7793          	andi	a5,s10,4
8001191c:	3a079263          	bnez	a5,80011cc0 <_vfiprintf_r+0xbcc>
80011920:	00012783          	lw	a5,0(sp)
80011924:	00fad463          	ble	a5,s5,8001192c <_vfiprintf_r+0x838>
80011928:	00078a93          	mv	s5,a5
8001192c:	04812783          	lw	a5,72(sp)
80011930:	015b8bb3          	add	s7,s7,s5
80011934:	00078c63          	beqz	a5,8001194c <_vfiprintf_r+0x858>
80011938:	04010613          	addi	a2,sp,64
8001193c:	00040593          	mv	a1,s0
80011940:	00098513          	mv	a0,s3
80011944:	eb0ff0ef          	jal	ra,80010ff4 <__sprint_r>
80011948:	3c051a63          	bnez	a0,80011d1c <_vfiprintf_r+0xc28>
8001194c:	04012223          	sw	zero,68(sp)
80011950:	000c0913          	mv	s2,s8
80011954:	000b0713          	mv	a4,s6
80011958:	8fdff06f          	j	80011254 <_vfiprintf_r+0x160>
8001195c:	00090513          	mv	a0,s2
80011960:	ef4fd0ef          	jal	ra,8000f054 <strlen>
80011964:	00050493          	mv	s1,a0
80011968:	00000c93          	li	s9,0
8001196c:	00012703          	lw	a4,0(sp)
80011970:	d49ff06f          	j	800116b8 <_vfiprintf_r+0x5c4>
80011974:	010d6d13          	ori	s10,s10,16
80011978:	020d7693          	andi	a3,s10,32
8001197c:	02068063          	beqz	a3,8001199c <_vfiprintf_r+0x8a8>
80011980:	00790913          	addi	s2,s2,7
80011984:	ff897913          	andi	s2,s2,-8
80011988:	00092883          	lw	a7,0(s2)
8001198c:	00492c83          	lw	s9,4(s2)
80011990:	00890c13          	addi	s8,s2,8
80011994:	00100693          	li	a3,1
80011998:	c55ff06f          	j	800115ec <_vfiprintf_r+0x4f8>
8001199c:	010d7693          	andi	a3,s10,16
800119a0:	00490c13          	addi	s8,s2,4
800119a4:	00068663          	beqz	a3,800119b0 <_vfiprintf_r+0x8bc>
800119a8:	00092883          	lw	a7,0(s2)
800119ac:	0100006f          	j	800119bc <_vfiprintf_r+0x8c8>
800119b0:	040d7693          	andi	a3,s10,64
800119b4:	00068863          	beqz	a3,800119c4 <_vfiprintf_r+0x8d0>
800119b8:	00095883          	lhu	a7,0(s2)
800119bc:	00000c93          	li	s9,0
800119c0:	fd5ff06f          	j	80011994 <_vfiprintf_r+0x8a0>
800119c4:	200d7693          	andi	a3,s10,512
800119c8:	fe0680e3          	beqz	a3,800119a8 <_vfiprintf_r+0x8b4>
800119cc:	00094883          	lbu	a7,0(s2)
800119d0:	fedff06f          	j	800119bc <_vfiprintf_r+0x8c8>
800119d4:	800216b7          	lui	a3,0x80021
800119d8:	d7c68793          	addi	a5,a3,-644 # 80020d7c <__stack+0xfffe42b0>
800119dc:	93dff06f          	j	80011318 <_vfiprintf_r+0x224>
800119e0:	010d7693          	andi	a3,s10,16
800119e4:	00490c13          	addi	s8,s2,4
800119e8:	00068663          	beqz	a3,800119f4 <_vfiprintf_r+0x900>
800119ec:	00092883          	lw	a7,0(s2)
800119f0:	0100006f          	j	80011a00 <_vfiprintf_r+0x90c>
800119f4:	040d7693          	andi	a3,s10,64
800119f8:	00068863          	beqz	a3,80011a08 <_vfiprintf_r+0x914>
800119fc:	00095883          	lhu	a7,0(s2)
80011a00:	00000c93          	li	s9,0
80011a04:	935ff06f          	j	80011338 <_vfiprintf_r+0x244>
80011a08:	200d7693          	andi	a3,s10,512
80011a0c:	fe0680e3          	beqz	a3,800119ec <_vfiprintf_r+0x8f8>
80011a10:	00094883          	lbu	a7,0(s2)
80011a14:	fedff06f          	j	80011a00 <_vfiprintf_r+0x90c>
80011a18:	000d0613          	mv	a2,s10
80011a1c:	00100693          	li	a3,1
80011a20:	bddff06f          	j	800115fc <_vfiprintf_r+0x508>
80011a24:	00100613          	li	a2,1
80011a28:	aec686e3          	beq	a3,a2,80011514 <_vfiprintf_r+0x420>
80011a2c:	00200613          	li	a2,2
80011a30:	14c68463          	beq	a3,a2,80011b78 <_vfiprintf_r+0xa84>
80011a34:	0f010693          	addi	a3,sp,240
80011a38:	01dc9593          	slli	a1,s9,0x1d
80011a3c:	0078f613          	andi	a2,a7,7
80011a40:	0038d893          	srli	a7,a7,0x3
80011a44:	03060613          	addi	a2,a2,48
80011a48:	0115e8b3          	or	a7,a1,a7
80011a4c:	003cdc93          	srli	s9,s9,0x3
80011a50:	fec68fa3          	sb	a2,-1(a3)
80011a54:	0198e5b3          	or	a1,a7,s9
80011a58:	fff68913          	addi	s2,a3,-1
80011a5c:	02059663          	bnez	a1,80011a88 <_vfiprintf_r+0x994>
80011a60:	001d7593          	andi	a1,s10,1
80011a64:	00058a63          	beqz	a1,80011a78 <_vfiprintf_r+0x984>
80011a68:	03000593          	li	a1,48
80011a6c:	00b60663          	beq	a2,a1,80011a78 <_vfiprintf_r+0x984>
80011a70:	feb90fa3          	sb	a1,-1(s2)
80011a74:	ffe68913          	addi	s2,a3,-2
80011a78:	0f010793          	addi	a5,sp,240
80011a7c:	00048c93          	mv	s9,s1
80011a80:	412784b3          	sub	s1,a5,s2
80011a84:	c35ff06f          	j	800116b8 <_vfiprintf_r+0x5c4>
80011a88:	00090693          	mv	a3,s2
80011a8c:	fadff06f          	j	80011a38 <_vfiprintf_r+0x944>
80011a90:	400d7793          	andi	a5,s10,1024
80011a94:	00000d93          	li	s11,0
80011a98:	0f010e13          	addi	t3,sp,240
80011a9c:	00f12023          	sw	a5,0(sp)
80011aa0:	00088513          	mv	a0,a7
80011aa4:	00a00613          	li	a2,10
80011aa8:	00000693          	li	a3,0
80011aac:	000c8593          	mv	a1,s9
80011ab0:	02e12223          	sw	a4,36(sp)
80011ab4:	fffe0913          	addi	s2,t3,-1
80011ab8:	03c12023          	sw	t3,32(sp)
80011abc:	01112c23          	sw	a7,24(sp)
80011ac0:	059020ef          	jal	ra,80014318 <__umoddi3>
80011ac4:	02012e03          	lw	t3,32(sp)
80011ac8:	00012783          	lw	a5,0(sp)
80011acc:	03050513          	addi	a0,a0,48
80011ad0:	feae0fa3          	sb	a0,-1(t3)
80011ad4:	001d8d93          	addi	s11,s11,1
80011ad8:	01812883          	lw	a7,24(sp)
80011adc:	02412703          	lw	a4,36(sp)
80011ae0:	06078263          	beqz	a5,80011b44 <_vfiprintf_r+0xa50>
80011ae4:	00412783          	lw	a5,4(sp)
80011ae8:	0007c683          	lbu	a3,0(a5)
80011aec:	05b69c63          	bne	a3,s11,80011b44 <_vfiprintf_r+0xa50>
80011af0:	0ff00793          	li	a5,255
80011af4:	04fd8863          	beq	s11,a5,80011b44 <_vfiprintf_r+0xa50>
80011af8:	000c9663          	bnez	s9,80011b04 <_vfiprintf_r+0xa10>
80011afc:	00900793          	li	a5,9
80011b00:	0517f263          	bleu	a7,a5,80011b44 <_vfiprintf_r+0xa50>
80011b04:	00c12783          	lw	a5,12(sp)
80011b08:	01412583          	lw	a1,20(sp)
80011b0c:	03112023          	sw	a7,32(sp)
80011b10:	40f90933          	sub	s2,s2,a5
80011b14:	00078613          	mv	a2,a5
80011b18:	00090513          	mv	a0,s2
80011b1c:	00e12c23          	sw	a4,24(sp)
80011b20:	d50fd0ef          	jal	ra,8000f070 <strncpy>
80011b24:	00412783          	lw	a5,4(sp)
80011b28:	00000d93          	li	s11,0
80011b2c:	01812703          	lw	a4,24(sp)
80011b30:	0017c683          	lbu	a3,1(a5)
80011b34:	02012883          	lw	a7,32(sp)
80011b38:	00068663          	beqz	a3,80011b44 <_vfiprintf_r+0xa50>
80011b3c:	00178793          	addi	a5,a5,1
80011b40:	00f12223          	sw	a5,4(sp)
80011b44:	00088513          	mv	a0,a7
80011b48:	000c8593          	mv	a1,s9
80011b4c:	00a00613          	li	a2,10
80011b50:	00000693          	li	a3,0
80011b54:	00e12c23          	sw	a4,24(sp)
80011b58:	38c020ef          	jal	ra,80013ee4 <__udivdi3>
80011b5c:	00058c93          	mv	s9,a1
80011b60:	00a5e5b3          	or	a1,a1,a0
80011b64:	00050893          	mv	a7,a0
80011b68:	01812703          	lw	a4,24(sp)
80011b6c:	f00586e3          	beqz	a1,80011a78 <_vfiprintf_r+0x984>
80011b70:	00090e13          	mv	t3,s2
80011b74:	f2dff06f          	j	80011aa0 <_vfiprintf_r+0x9ac>
80011b78:	0f010913          	addi	s2,sp,240
80011b7c:	00812783          	lw	a5,8(sp)
80011b80:	00f8f693          	andi	a3,a7,15
80011b84:	fff90913          	addi	s2,s2,-1
80011b88:	00d786b3          	add	a3,a5,a3
80011b8c:	0006c683          	lbu	a3,0(a3)
80011b90:	0048d893          	srli	a7,a7,0x4
80011b94:	00d90023          	sb	a3,0(s2)
80011b98:	01cc9693          	slli	a3,s9,0x1c
80011b9c:	0116e8b3          	or	a7,a3,a7
80011ba0:	004cdc93          	srli	s9,s9,0x4
80011ba4:	0198e6b3          	or	a3,a7,s9
80011ba8:	fc069ae3          	bnez	a3,80011b7c <_vfiprintf_r+0xa88>
80011bac:	ecdff06f          	j	80011a78 <_vfiprintf_r+0x984>
80011bb0:	0f010913          	addi	s2,sp,240
80011bb4:	ec0692e3          	bnez	a3,80011a78 <_vfiprintf_r+0x984>
80011bb8:	00167613          	andi	a2,a2,1
80011bbc:	ea060ee3          	beqz	a2,80011a78 <_vfiprintf_r+0x984>
80011bc0:	03000693          	li	a3,48
80011bc4:	0ed107a3          	sb	a3,239(sp)
80011bc8:	961ff06f          	j	80011528 <_vfiprintf_r+0x434>
80011bcc:	18060c63          	beqz	a2,80011d64 <_vfiprintf_r+0xc70>
80011bd0:	08c10623          	sb	a2,140(sp)
80011bd4:	02010da3          	sb	zero,59(sp)
80011bd8:	00090c13          	mv	s8,s2
80011bdc:	8e5ff06f          	j	800114c0 <_vfiprintf_r+0x3cc>
80011be0:	01058593          	addi	a1,a1,16
80011be4:	01172223          	sw	a7,4(a4)
80011be8:	04b12423          	sw	a1,72(sp)
80011bec:	04c12223          	sw	a2,68(sp)
80011bf0:	02c35e63          	ble	a2,t1,80011c2c <_vfiprintf_r+0xb38>
80011bf4:	04010613          	addi	a2,sp,64
80011bf8:	00040593          	mv	a1,s0
80011bfc:	00098513          	mv	a0,s3
80011c00:	02612623          	sw	t1,44(sp)
80011c04:	03012423          	sw	a6,40(sp)
80011c08:	03112223          	sw	a7,36(sp)
80011c0c:	02d12023          	sw	a3,32(sp)
80011c10:	be4ff0ef          	jal	ra,80010ff4 <__sprint_r>
80011c14:	10051463          	bnez	a0,80011d1c <_vfiprintf_r+0xc28>
80011c18:	02c12303          	lw	t1,44(sp)
80011c1c:	02812803          	lw	a6,40(sp)
80011c20:	02412883          	lw	a7,36(sp)
80011c24:	02012683          	lw	a3,32(sp)
80011c28:	000b0513          	mv	a0,s6
80011c2c:	ff068693          	addi	a3,a3,-16
80011c30:	00050713          	mv	a4,a0
80011c34:	ae1ff06f          	j	80011714 <_vfiprintf_r+0x620>
80011c38:	01060613          	addi	a2,a2,16
80011c3c:	01072223          	sw	a6,4(a4)
80011c40:	04c12423          	sw	a2,72(sp)
80011c44:	04d12223          	sw	a3,68(sp)
80011c48:	02d8d663          	ble	a3,a7,80011c74 <_vfiprintf_r+0xb80>
80011c4c:	04010613          	addi	a2,sp,64
80011c50:	00040593          	mv	a1,s0
80011c54:	00098513          	mv	a0,s3
80011c58:	03112023          	sw	a7,32(sp)
80011c5c:	01012c23          	sw	a6,24(sp)
80011c60:	b94ff0ef          	jal	ra,80010ff4 <__sprint_r>
80011c64:	0a051c63          	bnez	a0,80011d1c <_vfiprintf_r+0xc28>
80011c68:	02012883          	lw	a7,32(sp)
80011c6c:	01812803          	lw	a6,24(sp)
80011c70:	000b0593          	mv	a1,s6
80011c74:	ff0d8d93          	addi	s11,s11,-16
80011c78:	00058713          	mv	a4,a1
80011c7c:	ba9ff06f          	j	80011824 <_vfiprintf_r+0x730>
80011c80:	01060613          	addi	a2,a2,16
80011c84:	01b72223          	sw	s11,4(a4)
80011c88:	04c12423          	sw	a2,72(sp)
80011c8c:	04d12223          	sw	a3,68(sp)
80011c90:	02d85263          	ble	a3,a6,80011cb4 <_vfiprintf_r+0xbc0>
80011c94:	04010613          	addi	a2,sp,64
80011c98:	00040593          	mv	a1,s0
80011c9c:	00098513          	mv	a0,s3
80011ca0:	01012c23          	sw	a6,24(sp)
80011ca4:	b50ff0ef          	jal	ra,80010ff4 <__sprint_r>
80011ca8:	06051a63          	bnez	a0,80011d1c <_vfiprintf_r+0xc28>
80011cac:	01812803          	lw	a6,24(sp)
80011cb0:	000b0593          	mv	a1,s6
80011cb4:	ff0c8c93          	addi	s9,s9,-16
80011cb8:	00058713          	mv	a4,a1
80011cbc:	bc9ff06f          	j	80011884 <_vfiprintf_r+0x790>
80011cc0:	00012783          	lw	a5,0(sp)
80011cc4:	40fa84b3          	sub	s1,s5,a5
80011cc8:	c4905ce3          	blez	s1,80011920 <_vfiprintf_r+0x82c>
80011ccc:	800217b7          	lui	a5,0x80021
80011cd0:	01000c93          	li	s9,16
80011cd4:	90878913          	addi	s2,a5,-1784 # 80020908 <__stack+0xfffe3e3c>
80011cd8:	00700d93          	li	s11,7
80011cdc:	04412783          	lw	a5,68(sp)
80011ce0:	01272023          	sw	s2,0(a4)
80011ce4:	04812683          	lw	a3,72(sp)
80011ce8:	00178793          	addi	a5,a5,1
80011cec:	049cc063          	blt	s9,s1,80011d2c <_vfiprintf_r+0xc38>
80011cf0:	00972223          	sw	s1,4(a4)
80011cf4:	00d484b3          	add	s1,s1,a3
80011cf8:	04912423          	sw	s1,72(sp)
80011cfc:	04f12223          	sw	a5,68(sp)
80011d00:	00700713          	li	a4,7
80011d04:	c0f75ee3          	ble	a5,a4,80011920 <_vfiprintf_r+0x82c>
80011d08:	04010613          	addi	a2,sp,64
80011d0c:	00040593          	mv	a1,s0
80011d10:	00098513          	mv	a0,s3
80011d14:	ae0ff0ef          	jal	ra,80010ff4 <__sprint_r>
80011d18:	c00504e3          	beqz	a0,80011920 <_vfiprintf_r+0x82c>
80011d1c:	00c45783          	lhu	a5,12(s0)
80011d20:	0407f793          	andi	a5,a5,64
80011d24:	c8078c63          	beqz	a5,800111bc <_vfiprintf_r+0xc8>
80011d28:	ce4ff06f          	j	8001120c <_vfiprintf_r+0x118>
80011d2c:	01068693          	addi	a3,a3,16
80011d30:	01972223          	sw	s9,4(a4)
80011d34:	04d12423          	sw	a3,72(sp)
80011d38:	04f12223          	sw	a5,68(sp)
80011d3c:	00870713          	addi	a4,a4,8
80011d40:	00fdde63          	ble	a5,s11,80011d5c <_vfiprintf_r+0xc68>
80011d44:	04010613          	addi	a2,sp,64
80011d48:	00040593          	mv	a1,s0
80011d4c:	00098513          	mv	a0,s3
80011d50:	aa4ff0ef          	jal	ra,80010ff4 <__sprint_r>
80011d54:	fc0514e3          	bnez	a0,80011d1c <_vfiprintf_r+0xc28>
80011d58:	000b0713          	mv	a4,s6
80011d5c:	ff048493          	addi	s1,s1,-16
80011d60:	f7dff06f          	j	80011cdc <_vfiprintf_r+0xbe8>
80011d64:	04812783          	lw	a5,72(sp)
80011d68:	fa078ae3          	beqz	a5,80011d1c <_vfiprintf_r+0xc28>
80011d6c:	04010613          	addi	a2,sp,64
80011d70:	00040593          	mv	a1,s0
80011d74:	00098513          	mv	a0,s3
80011d78:	a7cff0ef          	jal	ra,80010ff4 <__sprint_r>
80011d7c:	fa1ff06f          	j	80011d1c <_vfiprintf_r+0xc28>

80011d80 <vfiprintf>:
80011d80:	800217b7          	lui	a5,0x80021
80011d84:	00060693          	mv	a3,a2
80011d88:	00058613          	mv	a2,a1
80011d8c:	00050593          	mv	a1,a0
80011d90:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
80011d94:	b60ff06f          	j	800110f4 <_vfiprintf_r>

80011d98 <__sbprintf>:
80011d98:	00c5d783          	lhu	a5,12(a1)
80011d9c:	b8010113          	addi	sp,sp,-1152
80011da0:	46812c23          	sw	s0,1144(sp)
80011da4:	ffd7f793          	andi	a5,a5,-3
80011da8:	00f11a23          	sh	a5,20(sp)
80011dac:	0645a783          	lw	a5,100(a1)
80011db0:	00058413          	mv	s0,a1
80011db4:	46912a23          	sw	s1,1140(sp)
80011db8:	06f12623          	sw	a5,108(sp)
80011dbc:	00e5d783          	lhu	a5,14(a1)
80011dc0:	47212823          	sw	s2,1136(sp)
80011dc4:	46112e23          	sw	ra,1148(sp)
80011dc8:	00f11b23          	sh	a5,22(sp)
80011dcc:	01c5a783          	lw	a5,28(a1)
80011dd0:	00050913          	mv	s2,a0
80011dd4:	02012023          	sw	zero,32(sp)
80011dd8:	02f12223          	sw	a5,36(sp)
80011ddc:	0245a783          	lw	a5,36(a1)
80011de0:	00810593          	addi	a1,sp,8
80011de4:	02f12623          	sw	a5,44(sp)
80011de8:	07010793          	addi	a5,sp,112
80011dec:	00f12423          	sw	a5,8(sp)
80011df0:	00f12c23          	sw	a5,24(sp)
80011df4:	40000793          	li	a5,1024
80011df8:	00f12823          	sw	a5,16(sp)
80011dfc:	00f12e23          	sw	a5,28(sp)
80011e00:	af4ff0ef          	jal	ra,800110f4 <_vfiprintf_r>
80011e04:	00050493          	mv	s1,a0
80011e08:	00054c63          	bltz	a0,80011e20 <__sbprintf+0x88>
80011e0c:	00810593          	addi	a1,sp,8
80011e10:	00090513          	mv	a0,s2
80011e14:	d2df80ef          	jal	ra,8000ab40 <_fflush_r>
80011e18:	00050463          	beqz	a0,80011e20 <__sbprintf+0x88>
80011e1c:	fff00493          	li	s1,-1
80011e20:	01415783          	lhu	a5,20(sp)
80011e24:	0407f793          	andi	a5,a5,64
80011e28:	00078863          	beqz	a5,80011e38 <__sbprintf+0xa0>
80011e2c:	00c45783          	lhu	a5,12(s0)
80011e30:	0407e793          	ori	a5,a5,64
80011e34:	00f41623          	sh	a5,12(s0)
80011e38:	47c12083          	lw	ra,1148(sp)
80011e3c:	47812403          	lw	s0,1144(sp)
80011e40:	00048513          	mv	a0,s1
80011e44:	47012903          	lw	s2,1136(sp)
80011e48:	47412483          	lw	s1,1140(sp)
80011e4c:	48010113          	addi	sp,sp,1152
80011e50:	00008067          	ret

80011e54 <_wctomb_r>:
80011e54:	800217b7          	lui	a5,0x80021
80011e58:	e647a783          	lw	a5,-412(a5) # 80020e64 <__stack+0xfffe4398>
80011e5c:	0347a783          	lw	a5,52(a5)
80011e60:	00079663          	bnez	a5,80011e6c <_wctomb_r+0x18>
80011e64:	800217b7          	lui	a5,0x80021
80011e68:	29878793          	addi	a5,a5,664 # 80021298 <__stack+0xfffe47cc>
80011e6c:	0e07a303          	lw	t1,224(a5)
80011e70:	00030067          	jr	t1

80011e74 <__ascii_wctomb>:
80011e74:	02058463          	beqz	a1,80011e9c <__ascii_wctomb+0x28>
80011e78:	0ff00793          	li	a5,255
80011e7c:	00c7fa63          	bleu	a2,a5,80011e90 <__ascii_wctomb+0x1c>
80011e80:	08a00793          	li	a5,138
80011e84:	00f52023          	sw	a5,0(a0)
80011e88:	fff00513          	li	a0,-1
80011e8c:	00008067          	ret
80011e90:	00c58023          	sb	a2,0(a1)
80011e94:	00100513          	li	a0,1
80011e98:	00008067          	ret
80011e9c:	00000513          	li	a0,0
80011ea0:	00008067          	ret

80011ea4 <_write_r>:
80011ea4:	ff010113          	addi	sp,sp,-16
80011ea8:	00812423          	sw	s0,8(sp)
80011eac:	00912223          	sw	s1,4(sp)
80011eb0:	8003b437          	lui	s0,0x8003b
80011eb4:	00050493          	mv	s1,a0
80011eb8:	00058513          	mv	a0,a1
80011ebc:	00060593          	mv	a1,a2
80011ec0:	00068613          	mv	a2,a3
80011ec4:	00112623          	sw	ra,12(sp)
80011ec8:	ac042423          	sw	zero,-1336(s0) # 8003aac8 <__stack+0xffffdffc>
80011ecc:	d15f40ef          	jal	ra,80006be0 <_write>
80011ed0:	fff00793          	li	a5,-1
80011ed4:	00f51863          	bne	a0,a5,80011ee4 <_write_r+0x40>
80011ed8:	ac842783          	lw	a5,-1336(s0)
80011edc:	00078463          	beqz	a5,80011ee4 <_write_r+0x40>
80011ee0:	00f4a023          	sw	a5,0(s1)
80011ee4:	00c12083          	lw	ra,12(sp)
80011ee8:	00812403          	lw	s0,8(sp)
80011eec:	00412483          	lw	s1,4(sp)
80011ef0:	01010113          	addi	sp,sp,16
80011ef4:	00008067          	ret

80011ef8 <_calloc_r>:
80011ef8:	02c585b3          	mul	a1,a1,a2
80011efc:	ff010113          	addi	sp,sp,-16
80011f00:	00812423          	sw	s0,8(sp)
80011f04:	00112623          	sw	ra,12(sp)
80011f08:	f14fb0ef          	jal	ra,8000d61c <_malloc_r>
80011f0c:	00050413          	mv	s0,a0
80011f10:	04050263          	beqz	a0,80011f54 <_calloc_r+0x5c>
80011f14:	ffc52603          	lw	a2,-4(a0)
80011f18:	02400713          	li	a4,36
80011f1c:	ffc67613          	andi	a2,a2,-4
80011f20:	ffc60613          	addi	a2,a2,-4
80011f24:	06c76263          	bltu	a4,a2,80011f88 <_calloc_r+0x90>
80011f28:	01300693          	li	a3,19
80011f2c:	00050793          	mv	a5,a0
80011f30:	00c6fc63          	bleu	a2,a3,80011f48 <_calloc_r+0x50>
80011f34:	00052023          	sw	zero,0(a0)
80011f38:	00052223          	sw	zero,4(a0)
80011f3c:	01b00793          	li	a5,27
80011f40:	02c7e463          	bltu	a5,a2,80011f68 <_calloc_r+0x70>
80011f44:	00850793          	addi	a5,a0,8
80011f48:	0007a023          	sw	zero,0(a5)
80011f4c:	0007a223          	sw	zero,4(a5)
80011f50:	0007a423          	sw	zero,8(a5)
80011f54:	00040513          	mv	a0,s0
80011f58:	00c12083          	lw	ra,12(sp)
80011f5c:	00812403          	lw	s0,8(sp)
80011f60:	01010113          	addi	sp,sp,16
80011f64:	00008067          	ret
80011f68:	00052423          	sw	zero,8(a0)
80011f6c:	00052623          	sw	zero,12(a0)
80011f70:	01050793          	addi	a5,a0,16
80011f74:	fce61ae3          	bne	a2,a4,80011f48 <_calloc_r+0x50>
80011f78:	00052823          	sw	zero,16(a0)
80011f7c:	01850793          	addi	a5,a0,24
80011f80:	00052a23          	sw	zero,20(a0)
80011f84:	fc5ff06f          	j	80011f48 <_calloc_r+0x50>
80011f88:	00000593          	li	a1,0
80011f8c:	e9cf60ef          	jal	ra,80008628 <memset>
80011f90:	fc5ff06f          	j	80011f54 <_calloc_r+0x5c>

80011f94 <_close_r>:
80011f94:	ff010113          	addi	sp,sp,-16
80011f98:	00812423          	sw	s0,8(sp)
80011f9c:	00912223          	sw	s1,4(sp)
80011fa0:	8003b437          	lui	s0,0x8003b
80011fa4:	00050493          	mv	s1,a0
80011fa8:	00058513          	mv	a0,a1
80011fac:	00112623          	sw	ra,12(sp)
80011fb0:	ac042423          	sw	zero,-1336(s0) # 8003aac8 <__stack+0xffffdffc>
80011fb4:	c99f40ef          	jal	ra,80006c4c <_close>
80011fb8:	fff00793          	li	a5,-1
80011fbc:	00f51863          	bne	a0,a5,80011fcc <_close_r+0x38>
80011fc0:	ac842783          	lw	a5,-1336(s0)
80011fc4:	00078463          	beqz	a5,80011fcc <_close_r+0x38>
80011fc8:	00f4a023          	sw	a5,0(s1)
80011fcc:	00c12083          	lw	ra,12(sp)
80011fd0:	00812403          	lw	s0,8(sp)
80011fd4:	00412483          	lw	s1,4(sp)
80011fd8:	01010113          	addi	sp,sp,16
80011fdc:	00008067          	ret

80011fe0 <_fclose_r>:
80011fe0:	ff010113          	addi	sp,sp,-16
80011fe4:	00112623          	sw	ra,12(sp)
80011fe8:	00812423          	sw	s0,8(sp)
80011fec:	00912223          	sw	s1,4(sp)
80011ff0:	01212023          	sw	s2,0(sp)
80011ff4:	02059263          	bnez	a1,80012018 <_fclose_r+0x38>
80011ff8:	00000913          	li	s2,0
80011ffc:	00c12083          	lw	ra,12(sp)
80012000:	00812403          	lw	s0,8(sp)
80012004:	00090513          	mv	a0,s2
80012008:	00412483          	lw	s1,4(sp)
8001200c:	00012903          	lw	s2,0(sp)
80012010:	01010113          	addi	sp,sp,16
80012014:	00008067          	ret
80012018:	00050493          	mv	s1,a0
8001201c:	00058413          	mv	s0,a1
80012020:	00050863          	beqz	a0,80012030 <_fclose_r+0x50>
80012024:	03852783          	lw	a5,56(a0)
80012028:	00079463          	bnez	a5,80012030 <_fclose_r+0x50>
8001202c:	cb1f80ef          	jal	ra,8000acdc <__sinit>
80012030:	00c41783          	lh	a5,12(s0)
80012034:	fc0782e3          	beqz	a5,80011ff8 <_fclose_r+0x18>
80012038:	00040593          	mv	a1,s0
8001203c:	00048513          	mv	a0,s1
80012040:	8f9f80ef          	jal	ra,8000a938 <__sflush_r>
80012044:	02c42783          	lw	a5,44(s0)
80012048:	00050913          	mv	s2,a0
8001204c:	00078c63          	beqz	a5,80012064 <_fclose_r+0x84>
80012050:	01c42583          	lw	a1,28(s0)
80012054:	00048513          	mv	a0,s1
80012058:	000780e7          	jalr	a5
8001205c:	00055463          	bgez	a0,80012064 <_fclose_r+0x84>
80012060:	fff00913          	li	s2,-1
80012064:	00c45783          	lhu	a5,12(s0)
80012068:	0807f793          	andi	a5,a5,128
8001206c:	00078863          	beqz	a5,8001207c <_fclose_r+0x9c>
80012070:	01042583          	lw	a1,16(s0)
80012074:	00048513          	mv	a0,s1
80012078:	f29f80ef          	jal	ra,8000afa0 <_free_r>
8001207c:	03042583          	lw	a1,48(s0)
80012080:	00058c63          	beqz	a1,80012098 <_fclose_r+0xb8>
80012084:	04040793          	addi	a5,s0,64
80012088:	00f58663          	beq	a1,a5,80012094 <_fclose_r+0xb4>
8001208c:	00048513          	mv	a0,s1
80012090:	f11f80ef          	jal	ra,8000afa0 <_free_r>
80012094:	02042823          	sw	zero,48(s0)
80012098:	04442583          	lw	a1,68(s0)
8001209c:	00058863          	beqz	a1,800120ac <_fclose_r+0xcc>
800120a0:	00048513          	mv	a0,s1
800120a4:	efdf80ef          	jal	ra,8000afa0 <_free_r>
800120a8:	04042223          	sw	zero,68(s0)
800120ac:	da1f80ef          	jal	ra,8000ae4c <__sfp_lock_acquire>
800120b0:	00041623          	sh	zero,12(s0)
800120b4:	d9df80ef          	jal	ra,8000ae50 <__sfp_lock_release>
800120b8:	f45ff06f          	j	80011ffc <_fclose_r+0x1c>

800120bc <fclose>:
800120bc:	800217b7          	lui	a5,0x80021
800120c0:	00050593          	mv	a1,a0
800120c4:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
800120c8:	f19ff06f          	j	80011fe0 <_fclose_r>

800120cc <__fputwc>:
800120cc:	fd010113          	addi	sp,sp,-48
800120d0:	02812423          	sw	s0,40(sp)
800120d4:	02912223          	sw	s1,36(sp)
800120d8:	01412c23          	sw	s4,24(sp)
800120dc:	02112623          	sw	ra,44(sp)
800120e0:	03212023          	sw	s2,32(sp)
800120e4:	01312e23          	sw	s3,28(sp)
800120e8:	01512a23          	sw	s5,20(sp)
800120ec:	01612823          	sw	s6,16(sp)
800120f0:	00050a13          	mv	s4,a0
800120f4:	00058493          	mv	s1,a1
800120f8:	00060413          	mv	s0,a2
800120fc:	b38fb0ef          	jal	ra,8000d434 <__locale_mb_cur_max>
80012100:	00100793          	li	a5,1
80012104:	04f51a63          	bne	a0,a5,80012158 <__fputwc+0x8c>
80012108:	fff48793          	addi	a5,s1,-1
8001210c:	0fe00713          	li	a4,254
80012110:	04f76463          	bltu	a4,a5,80012158 <__fputwc+0x8c>
80012114:	00910623          	sb	s1,12(sp)
80012118:	00100993          	li	s3,1
8001211c:	00000913          	li	s2,0
80012120:	fff00a93          	li	s5,-1
80012124:	00a00b13          	li	s6,10
80012128:	07391263          	bne	s2,s3,8001218c <__fputwc+0xc0>
8001212c:	00048513          	mv	a0,s1
80012130:	02c12083          	lw	ra,44(sp)
80012134:	02812403          	lw	s0,40(sp)
80012138:	02412483          	lw	s1,36(sp)
8001213c:	02012903          	lw	s2,32(sp)
80012140:	01c12983          	lw	s3,28(sp)
80012144:	01812a03          	lw	s4,24(sp)
80012148:	01412a83          	lw	s5,20(sp)
8001214c:	01012b03          	lw	s6,16(sp)
80012150:	03010113          	addi	sp,sp,48
80012154:	00008067          	ret
80012158:	05c40693          	addi	a3,s0,92
8001215c:	00048613          	mv	a2,s1
80012160:	00c10593          	addi	a1,sp,12
80012164:	000a0513          	mv	a0,s4
80012168:	4d9010ef          	jal	ra,80013e40 <_wcrtomb_r>
8001216c:	fff00793          	li	a5,-1
80012170:	00050993          	mv	s3,a0
80012174:	faf514e3          	bne	a0,a5,8001211c <__fputwc+0x50>
80012178:	00c45783          	lhu	a5,12(s0)
8001217c:	0407e793          	ori	a5,a5,64
80012180:	00f41623          	sh	a5,12(s0)
80012184:	fff00513          	li	a0,-1
80012188:	fa9ff06f          	j	80012130 <__fputwc+0x64>
8001218c:	00c10793          	addi	a5,sp,12
80012190:	012787b3          	add	a5,a5,s2
80012194:	0007c583          	lbu	a1,0(a5)
80012198:	00842783          	lw	a5,8(s0)
8001219c:	fff78793          	addi	a5,a5,-1
800121a0:	00f42423          	sw	a5,8(s0)
800121a4:	0007d863          	bgez	a5,800121b4 <__fputwc+0xe8>
800121a8:	01842703          	lw	a4,24(s0)
800121ac:	02e7c063          	blt	a5,a4,800121cc <__fputwc+0x100>
800121b0:	01658e63          	beq	a1,s6,800121cc <__fputwc+0x100>
800121b4:	00042783          	lw	a5,0(s0)
800121b8:	00178713          	addi	a4,a5,1
800121bc:	00e42023          	sw	a4,0(s0)
800121c0:	00b78023          	sb	a1,0(a5)
800121c4:	00190913          	addi	s2,s2,1
800121c8:	f61ff06f          	j	80012128 <__fputwc+0x5c>
800121cc:	00040613          	mv	a2,s0
800121d0:	000a0513          	mv	a0,s4
800121d4:	329010ef          	jal	ra,80013cfc <__swbuf_r>
800121d8:	ff5516e3          	bne	a0,s5,800121c4 <__fputwc+0xf8>
800121dc:	fa9ff06f          	j	80012184 <__fputwc+0xb8>

800121e0 <_fputwc_r>:
800121e0:	00c61783          	lh	a5,12(a2)
800121e4:	01279713          	slli	a4,a5,0x12
800121e8:	02074063          	bltz	a4,80012208 <_fputwc_r+0x28>
800121ec:	06462703          	lw	a4,100(a2)
800121f0:	000026b7          	lui	a3,0x2
800121f4:	00d7e7b3          	or	a5,a5,a3
800121f8:	00f61623          	sh	a5,12(a2)
800121fc:	000027b7          	lui	a5,0x2
80012200:	00f767b3          	or	a5,a4,a5
80012204:	06f62223          	sw	a5,100(a2)
80012208:	ec5ff06f          	j	800120cc <__fputwc>

8001220c <fputwc>:
8001220c:	fe010113          	addi	sp,sp,-32
80012210:	800217b7          	lui	a5,0x80021
80012214:	00812c23          	sw	s0,24(sp)
80012218:	e647a403          	lw	s0,-412(a5) # 80020e64 <__stack+0xfffe4398>
8001221c:	00912a23          	sw	s1,20(sp)
80012220:	00112e23          	sw	ra,28(sp)
80012224:	00050493          	mv	s1,a0
80012228:	00058613          	mv	a2,a1
8001222c:	00040e63          	beqz	s0,80012248 <fputwc+0x3c>
80012230:	03842783          	lw	a5,56(s0)
80012234:	00079a63          	bnez	a5,80012248 <fputwc+0x3c>
80012238:	00040513          	mv	a0,s0
8001223c:	00b12623          	sw	a1,12(sp)
80012240:	a9df80ef          	jal	ra,8000acdc <__sinit>
80012244:	00c12603          	lw	a2,12(sp)
80012248:	00040513          	mv	a0,s0
8001224c:	01812403          	lw	s0,24(sp)
80012250:	01c12083          	lw	ra,28(sp)
80012254:	00048593          	mv	a1,s1
80012258:	01412483          	lw	s1,20(sp)
8001225c:	02010113          	addi	sp,sp,32
80012260:	f81ff06f          	j	800121e0 <_fputwc_r>

80012264 <_fstat_r>:
80012264:	ff010113          	addi	sp,sp,-16
80012268:	00812423          	sw	s0,8(sp)
8001226c:	00912223          	sw	s1,4(sp)
80012270:	8003b437          	lui	s0,0x8003b
80012274:	00050493          	mv	s1,a0
80012278:	00058513          	mv	a0,a1
8001227c:	00060593          	mv	a1,a2
80012280:	00112623          	sw	ra,12(sp)
80012284:	ac042423          	sw	zero,-1336(s0) # 8003aac8 <__stack+0xffffdffc>
80012288:	a89f40ef          	jal	ra,80006d10 <_fstat>
8001228c:	fff00793          	li	a5,-1
80012290:	00f51863          	bne	a0,a5,800122a0 <_fstat_r+0x3c>
80012294:	ac842783          	lw	a5,-1336(s0)
80012298:	00078463          	beqz	a5,800122a0 <_fstat_r+0x3c>
8001229c:	00f4a023          	sw	a5,0(s1)
800122a0:	00c12083          	lw	ra,12(sp)
800122a4:	00812403          	lw	s0,8(sp)
800122a8:	00412483          	lw	s1,4(sp)
800122ac:	01010113          	addi	sp,sp,16
800122b0:	00008067          	ret

800122b4 <__sfvwrite_r>:
800122b4:	00862783          	lw	a5,8(a2)
800122b8:	00079863          	bnez	a5,800122c8 <__sfvwrite_r+0x14>
800122bc:	00000793          	li	a5,0
800122c0:	00078513          	mv	a0,a5
800122c4:	00008067          	ret
800122c8:	00c5d783          	lhu	a5,12(a1)
800122cc:	fb010113          	addi	sp,sp,-80
800122d0:	04812423          	sw	s0,72(sp)
800122d4:	05212023          	sw	s2,64(sp)
800122d8:	03512a23          	sw	s5,52(sp)
800122dc:	04112623          	sw	ra,76(sp)
800122e0:	04912223          	sw	s1,68(sp)
800122e4:	03312e23          	sw	s3,60(sp)
800122e8:	03412c23          	sw	s4,56(sp)
800122ec:	03612823          	sw	s6,48(sp)
800122f0:	03712623          	sw	s7,44(sp)
800122f4:	03812423          	sw	s8,40(sp)
800122f8:	03912223          	sw	s9,36(sp)
800122fc:	03a12023          	sw	s10,32(sp)
80012300:	01b12e23          	sw	s11,28(sp)
80012304:	0087f793          	andi	a5,a5,8
80012308:	00060a93          	mv	s5,a2
8001230c:	00058413          	mv	s0,a1
80012310:	00050913          	mv	s2,a0
80012314:	0e078263          	beqz	a5,800123f8 <__sfvwrite_r+0x144>
80012318:	0105a783          	lw	a5,16(a1)
8001231c:	0c078e63          	beqz	a5,800123f8 <__sfvwrite_r+0x144>
80012320:	00c45783          	lhu	a5,12(s0)
80012324:	000aaa03          	lw	s4,0(s5)
80012328:	0027f713          	andi	a4,a5,2
8001232c:	16071a63          	bnez	a4,800124a0 <__sfvwrite_r+0x1ec>
80012330:	0017f793          	andi	a5,a5,1
80012334:	20078463          	beqz	a5,8001253c <__sfvwrite_r+0x288>
80012338:	00000b93          	li	s7,0
8001233c:	00000513          	li	a0,0
80012340:	00000b13          	li	s6,0
80012344:	00000993          	li	s3,0
80012348:	36098463          	beqz	s3,800126b0 <__sfvwrite_r+0x3fc>
8001234c:	02051263          	bnez	a0,80012370 <__sfvwrite_r+0xbc>
80012350:	00098613          	mv	a2,s3
80012354:	00a00593          	li	a1,10
80012358:	000b0513          	mv	a0,s6
8001235c:	995fb0ef          	jal	ra,8000dcf0 <memchr>
80012360:	00198b93          	addi	s7,s3,1
80012364:	00050663          	beqz	a0,80012370 <__sfvwrite_r+0xbc>
80012368:	00150513          	addi	a0,a0,1
8001236c:	41650bb3          	sub	s7,a0,s6
80012370:	000b8c13          	mv	s8,s7
80012374:	0179f463          	bleu	s7,s3,8001237c <__sfvwrite_r+0xc8>
80012378:	00098c13          	mv	s8,s3
8001237c:	00042503          	lw	a0,0(s0)
80012380:	01042783          	lw	a5,16(s0)
80012384:	01442683          	lw	a3,20(s0)
80012388:	32a7fe63          	bleu	a0,a5,800126c4 <__sfvwrite_r+0x410>
8001238c:	00842483          	lw	s1,8(s0)
80012390:	009684b3          	add	s1,a3,s1
80012394:	3384d863          	ble	s8,s1,800126c4 <__sfvwrite_r+0x410>
80012398:	000b0593          	mv	a1,s6
8001239c:	00048613          	mv	a2,s1
800123a0:	414000ef          	jal	ra,800127b4 <memmove>
800123a4:	00042783          	lw	a5,0(s0)
800123a8:	00040593          	mv	a1,s0
800123ac:	00090513          	mv	a0,s2
800123b0:	009787b3          	add	a5,a5,s1
800123b4:	00f42023          	sw	a5,0(s0)
800123b8:	f88f80ef          	jal	ra,8000ab40 <_fflush_r>
800123bc:	16051663          	bnez	a0,80012528 <__sfvwrite_r+0x274>
800123c0:	409b8bb3          	sub	s7,s7,s1
800123c4:	00100513          	li	a0,1
800123c8:	000b9a63          	bnez	s7,800123dc <__sfvwrite_r+0x128>
800123cc:	00040593          	mv	a1,s0
800123d0:	00090513          	mv	a0,s2
800123d4:	f6cf80ef          	jal	ra,8000ab40 <_fflush_r>
800123d8:	14051863          	bnez	a0,80012528 <__sfvwrite_r+0x274>
800123dc:	008aa783          	lw	a5,8(s5)
800123e0:	009b0b33          	add	s6,s6,s1
800123e4:	409989b3          	sub	s3,s3,s1
800123e8:	409784b3          	sub	s1,a5,s1
800123ec:	009aa423          	sw	s1,8(s5)
800123f0:	f4049ce3          	bnez	s1,80012348 <__sfvwrite_r+0x94>
800123f4:	0680006f          	j	8001245c <__sfvwrite_r+0x1a8>
800123f8:	00040593          	mv	a1,s0
800123fc:	00090513          	mv	a0,s2
80012400:	c00f80ef          	jal	ra,8000a800 <__swsetup_r>
80012404:	fff00793          	li	a5,-1
80012408:	f0050ce3          	beqz	a0,80012320 <__sfvwrite_r+0x6c>
8001240c:	0540006f          	j	80012460 <__sfvwrite_r+0x1ac>
80012410:	000a2983          	lw	s3,0(s4)
80012414:	004a2483          	lw	s1,4(s4)
80012418:	008a0a13          	addi	s4,s4,8
8001241c:	fe048ae3          	beqz	s1,80012410 <__sfvwrite_r+0x15c>
80012420:	00048693          	mv	a3,s1
80012424:	009b7463          	bleu	s1,s6,8001242c <__sfvwrite_r+0x178>
80012428:	000b0693          	mv	a3,s6
8001242c:	02442783          	lw	a5,36(s0)
80012430:	01c42583          	lw	a1,28(s0)
80012434:	00098613          	mv	a2,s3
80012438:	00090513          	mv	a0,s2
8001243c:	000780e7          	jalr	a5
80012440:	0ea05463          	blez	a0,80012528 <__sfvwrite_r+0x274>
80012444:	008aa783          	lw	a5,8(s5)
80012448:	00a989b3          	add	s3,s3,a0
8001244c:	40a484b3          	sub	s1,s1,a0
80012450:	40a78533          	sub	a0,a5,a0
80012454:	00aaa423          	sw	a0,8(s5)
80012458:	fc0512e3          	bnez	a0,8001241c <__sfvwrite_r+0x168>
8001245c:	00000793          	li	a5,0
80012460:	04c12083          	lw	ra,76(sp)
80012464:	04812403          	lw	s0,72(sp)
80012468:	04412483          	lw	s1,68(sp)
8001246c:	04012903          	lw	s2,64(sp)
80012470:	03c12983          	lw	s3,60(sp)
80012474:	03812a03          	lw	s4,56(sp)
80012478:	03412a83          	lw	s5,52(sp)
8001247c:	03012b03          	lw	s6,48(sp)
80012480:	02c12b83          	lw	s7,44(sp)
80012484:	02812c03          	lw	s8,40(sp)
80012488:	02412c83          	lw	s9,36(sp)
8001248c:	02012d03          	lw	s10,32(sp)
80012490:	01c12d83          	lw	s11,28(sp)
80012494:	00078513          	mv	a0,a5
80012498:	05010113          	addi	sp,sp,80
8001249c:	00008067          	ret
800124a0:	80000b37          	lui	s6,0x80000
800124a4:	00000993          	li	s3,0
800124a8:	00000493          	li	s1,0
800124ac:	c00b4b13          	xori	s6,s6,-1024
800124b0:	f6dff06f          	j	8001241c <__sfvwrite_r+0x168>
800124b4:	000a2b03          	lw	s6,0(s4)
800124b8:	004a2483          	lw	s1,4(s4)
800124bc:	008a0a13          	addi	s4,s4,8
800124c0:	fe048ae3          	beqz	s1,800124b4 <__sfvwrite_r+0x200>
800124c4:	00c45703          	lhu	a4,12(s0)
800124c8:	00842783          	lw	a5,8(s0)
800124cc:	00042503          	lw	a0,0(s0)
800124d0:	20077693          	andi	a3,a4,512
800124d4:	14068863          	beqz	a3,80012624 <__sfvwrite_r+0x370>
800124d8:	0cf4e263          	bltu	s1,a5,8001259c <__sfvwrite_r+0x2e8>
800124dc:	48077693          	andi	a3,a4,1152
800124e0:	0a068e63          	beqz	a3,8001259c <__sfvwrite_r+0x2e8>
800124e4:	01442d83          	lw	s11,20(s0)
800124e8:	01042583          	lw	a1,16(s0)
800124ec:	03bc8db3          	mul	s11,s9,s11
800124f0:	40b509b3          	sub	s3,a0,a1
800124f4:	00198793          	addi	a5,s3,1
800124f8:	009787b3          	add	a5,a5,s1
800124fc:	03adcdb3          	div	s11,s11,s10
80012500:	00fdf463          	bleu	a5,s11,80012508 <__sfvwrite_r+0x254>
80012504:	00078d93          	mv	s11,a5
80012508:	40077713          	andi	a4,a4,1024
8001250c:	0e070463          	beqz	a4,800125f4 <__sfvwrite_r+0x340>
80012510:	000d8593          	mv	a1,s11
80012514:	00090513          	mv	a0,s2
80012518:	904fb0ef          	jal	ra,8000d61c <_malloc_r>
8001251c:	04051063          	bnez	a0,8001255c <__sfvwrite_r+0x2a8>
80012520:	00c00793          	li	a5,12
80012524:	00f92023          	sw	a5,0(s2)
80012528:	00c45783          	lhu	a5,12(s0)
8001252c:	0407e793          	ori	a5,a5,64
80012530:	00f41623          	sh	a5,12(s0)
80012534:	fff00793          	li	a5,-1
80012538:	f29ff06f          	j	80012460 <__sfvwrite_r+0x1ac>
8001253c:	80000bb7          	lui	s7,0x80000
80012540:	ffebcc13          	xori	s8,s7,-2
80012544:	00000b13          	li	s6,0
80012548:	00000493          	li	s1,0
8001254c:	fffbcb93          	not	s7,s7
80012550:	00300c93          	li	s9,3
80012554:	00200d13          	li	s10,2
80012558:	f69ff06f          	j	800124c0 <__sfvwrite_r+0x20c>
8001255c:	01042583          	lw	a1,16(s0)
80012560:	00098613          	mv	a2,s3
80012564:	00a12623          	sw	a0,12(sp)
80012568:	fd9f50ef          	jal	ra,80008540 <memcpy>
8001256c:	00c45703          	lhu	a4,12(s0)
80012570:	00c12783          	lw	a5,12(sp)
80012574:	b7f77713          	andi	a4,a4,-1153
80012578:	08076713          	ori	a4,a4,128
8001257c:	00e41623          	sh	a4,12(s0)
80012580:	00f42823          	sw	a5,16(s0)
80012584:	01b42a23          	sw	s11,20(s0)
80012588:	013787b3          	add	a5,a5,s3
8001258c:	413d8db3          	sub	s11,s11,s3
80012590:	00f42023          	sw	a5,0(s0)
80012594:	01b42423          	sw	s11,8(s0)
80012598:	00048793          	mv	a5,s1
8001259c:	00048993          	mv	s3,s1
800125a0:	00f4f463          	bleu	a5,s1,800125a8 <__sfvwrite_r+0x2f4>
800125a4:	00048793          	mv	a5,s1
800125a8:	00042503          	lw	a0,0(s0)
800125ac:	00078613          	mv	a2,a5
800125b0:	000b0593          	mv	a1,s6
800125b4:	00f12623          	sw	a5,12(sp)
800125b8:	1fc000ef          	jal	ra,800127b4 <memmove>
800125bc:	00842703          	lw	a4,8(s0)
800125c0:	00c12783          	lw	a5,12(sp)
800125c4:	40f70733          	sub	a4,a4,a5
800125c8:	00e42423          	sw	a4,8(s0)
800125cc:	00042703          	lw	a4,0(s0)
800125d0:	00f707b3          	add	a5,a4,a5
800125d4:	00f42023          	sw	a5,0(s0)
800125d8:	008aa783          	lw	a5,8(s5)
800125dc:	013b0b33          	add	s6,s6,s3
800125e0:	413484b3          	sub	s1,s1,s3
800125e4:	413789b3          	sub	s3,a5,s3
800125e8:	013aa423          	sw	s3,8(s5)
800125ec:	ec099ae3          	bnez	s3,800124c0 <__sfvwrite_r+0x20c>
800125f0:	e6dff06f          	j	8001245c <__sfvwrite_r+0x1a8>
800125f4:	000d8613          	mv	a2,s11
800125f8:	00090513          	mv	a0,s2
800125fc:	260000ef          	jal	ra,8001285c <_realloc_r>
80012600:	00050793          	mv	a5,a0
80012604:	f6051ee3          	bnez	a0,80012580 <__sfvwrite_r+0x2cc>
80012608:	01042583          	lw	a1,16(s0)
8001260c:	00090513          	mv	a0,s2
80012610:	991f80ef          	jal	ra,8000afa0 <_free_r>
80012614:	00c45783          	lhu	a5,12(s0)
80012618:	f7f7f793          	andi	a5,a5,-129
8001261c:	00f41623          	sh	a5,12(s0)
80012620:	f01ff06f          	j	80012520 <__sfvwrite_r+0x26c>
80012624:	01042703          	lw	a4,16(s0)
80012628:	00a76663          	bltu	a4,a0,80012634 <__sfvwrite_r+0x380>
8001262c:	01442683          	lw	a3,20(s0)
80012630:	04d4f663          	bleu	a3,s1,8001267c <__sfvwrite_r+0x3c8>
80012634:	00078993          	mv	s3,a5
80012638:	00f4f463          	bleu	a5,s1,80012640 <__sfvwrite_r+0x38c>
8001263c:	00048993          	mv	s3,s1
80012640:	00098613          	mv	a2,s3
80012644:	000b0593          	mv	a1,s6
80012648:	16c000ef          	jal	ra,800127b4 <memmove>
8001264c:	00842783          	lw	a5,8(s0)
80012650:	00042703          	lw	a4,0(s0)
80012654:	413787b3          	sub	a5,a5,s3
80012658:	01370733          	add	a4,a4,s3
8001265c:	00f42423          	sw	a5,8(s0)
80012660:	00e42023          	sw	a4,0(s0)
80012664:	f6079ae3          	bnez	a5,800125d8 <__sfvwrite_r+0x324>
80012668:	00040593          	mv	a1,s0
8001266c:	00090513          	mv	a0,s2
80012670:	cd0f80ef          	jal	ra,8000ab40 <_fflush_r>
80012674:	f60502e3          	beqz	a0,800125d8 <__sfvwrite_r+0x324>
80012678:	eb1ff06f          	j	80012528 <__sfvwrite_r+0x274>
8001267c:	000b8793          	mv	a5,s7
80012680:	009c6463          	bltu	s8,s1,80012688 <__sfvwrite_r+0x3d4>
80012684:	00048793          	mv	a5,s1
80012688:	02d7c7b3          	div	a5,a5,a3
8001268c:	02442703          	lw	a4,36(s0)
80012690:	01c42583          	lw	a1,28(s0)
80012694:	000b0613          	mv	a2,s6
80012698:	00090513          	mv	a0,s2
8001269c:	02d786b3          	mul	a3,a5,a3
800126a0:	000700e7          	jalr	a4
800126a4:	00050993          	mv	s3,a0
800126a8:	f2a048e3          	bgtz	a0,800125d8 <__sfvwrite_r+0x324>
800126ac:	e7dff06f          	j	80012528 <__sfvwrite_r+0x274>
800126b0:	000a2b03          	lw	s6,0(s4)
800126b4:	004a2983          	lw	s3,4(s4)
800126b8:	00000513          	li	a0,0
800126bc:	008a0a13          	addi	s4,s4,8
800126c0:	c89ff06f          	j	80012348 <__sfvwrite_r+0x94>
800126c4:	02dc4263          	blt	s8,a3,800126e8 <__sfvwrite_r+0x434>
800126c8:	02442783          	lw	a5,36(s0)
800126cc:	01c42583          	lw	a1,28(s0)
800126d0:	000b0613          	mv	a2,s6
800126d4:	00090513          	mv	a0,s2
800126d8:	000780e7          	jalr	a5
800126dc:	00050493          	mv	s1,a0
800126e0:	cea040e3          	bgtz	a0,800123c0 <__sfvwrite_r+0x10c>
800126e4:	e45ff06f          	j	80012528 <__sfvwrite_r+0x274>
800126e8:	000c0613          	mv	a2,s8
800126ec:	000b0593          	mv	a1,s6
800126f0:	0c4000ef          	jal	ra,800127b4 <memmove>
800126f4:	00842783          	lw	a5,8(s0)
800126f8:	000c0493          	mv	s1,s8
800126fc:	418787b3          	sub	a5,a5,s8
80012700:	00f42423          	sw	a5,8(s0)
80012704:	00042783          	lw	a5,0(s0)
80012708:	018787b3          	add	a5,a5,s8
8001270c:	00f42023          	sw	a5,0(s0)
80012710:	cb1ff06f          	j	800123c0 <__sfvwrite_r+0x10c>

80012714 <_isatty_r>:
80012714:	ff010113          	addi	sp,sp,-16
80012718:	00812423          	sw	s0,8(sp)
8001271c:	00912223          	sw	s1,4(sp)
80012720:	8003b437          	lui	s0,0x8003b
80012724:	00050493          	mv	s1,a0
80012728:	00058513          	mv	a0,a1
8001272c:	00112623          	sw	ra,12(sp)
80012730:	ac042423          	sw	zero,-1336(s0) # 8003aac8 <__stack+0xffffdffc>
80012734:	e1cf40ef          	jal	ra,80006d50 <_isatty>
80012738:	fff00793          	li	a5,-1
8001273c:	00f51863          	bne	a0,a5,8001274c <_isatty_r+0x38>
80012740:	ac842783          	lw	a5,-1336(s0)
80012744:	00078463          	beqz	a5,8001274c <_isatty_r+0x38>
80012748:	00f4a023          	sw	a5,0(s1)
8001274c:	00c12083          	lw	ra,12(sp)
80012750:	00812403          	lw	s0,8(sp)
80012754:	00412483          	lw	s1,4(sp)
80012758:	01010113          	addi	sp,sp,16
8001275c:	00008067          	ret

80012760 <_lseek_r>:
80012760:	ff010113          	addi	sp,sp,-16
80012764:	00812423          	sw	s0,8(sp)
80012768:	00912223          	sw	s1,4(sp)
8001276c:	8003b437          	lui	s0,0x8003b
80012770:	00050493          	mv	s1,a0
80012774:	00058513          	mv	a0,a1
80012778:	00060593          	mv	a1,a2
8001277c:	00068613          	mv	a2,a3
80012780:	00112623          	sw	ra,12(sp)
80012784:	ac042423          	sw	zero,-1336(s0) # 8003aac8 <__stack+0xffffdffc>
80012788:	d00f40ef          	jal	ra,80006c88 <_lseek>
8001278c:	fff00793          	li	a5,-1
80012790:	00f51863          	bne	a0,a5,800127a0 <_lseek_r+0x40>
80012794:	ac842783          	lw	a5,-1336(s0)
80012798:	00078463          	beqz	a5,800127a0 <_lseek_r+0x40>
8001279c:	00f4a023          	sw	a5,0(s1)
800127a0:	00c12083          	lw	ra,12(sp)
800127a4:	00812403          	lw	s0,8(sp)
800127a8:	00412483          	lw	s1,4(sp)
800127ac:	01010113          	addi	sp,sp,16
800127b0:	00008067          	ret

800127b4 <memmove>:
800127b4:	00c50733          	add	a4,a0,a2
800127b8:	00a5e863          	bltu	a1,a0,800127c8 <memmove+0x14>
800127bc:	00050793          	mv	a5,a0
800127c0:	02e79a63          	bne	a5,a4,800127f4 <memmove+0x40>
800127c4:	00008067          	ret
800127c8:	00c587b3          	add	a5,a1,a2
800127cc:	40f60633          	sub	a2,a2,a5
800127d0:	fef576e3          	bleu	a5,a0,800127bc <memmove+0x8>
800127d4:	00c786b3          	add	a3,a5,a2
800127d8:	00069463          	bnez	a3,800127e0 <memmove+0x2c>
800127dc:	00008067          	ret
800127e0:	fff78793          	addi	a5,a5,-1
800127e4:	0007c683          	lbu	a3,0(a5)
800127e8:	fff70713          	addi	a4,a4,-1
800127ec:	00d70023          	sb	a3,0(a4)
800127f0:	fe5ff06f          	j	800127d4 <memmove+0x20>
800127f4:	00158593          	addi	a1,a1,1
800127f8:	fff5c683          	lbu	a3,-1(a1)
800127fc:	00178793          	addi	a5,a5,1
80012800:	fed78fa3          	sb	a3,-1(a5)
80012804:	fbdff06f          	j	800127c0 <memmove+0xc>

80012808 <_read_r>:
80012808:	ff010113          	addi	sp,sp,-16
8001280c:	00812423          	sw	s0,8(sp)
80012810:	00912223          	sw	s1,4(sp)
80012814:	8003b437          	lui	s0,0x8003b
80012818:	00050493          	mv	s1,a0
8001281c:	00058513          	mv	a0,a1
80012820:	00060593          	mv	a1,a2
80012824:	00068613          	mv	a2,a3
80012828:	00112623          	sw	ra,12(sp)
8001282c:	ac042423          	sw	zero,-1336(s0) # 8003aac8 <__stack+0xffffdffc>
80012830:	c9cf40ef          	jal	ra,80006ccc <_read>
80012834:	fff00793          	li	a5,-1
80012838:	00f51863          	bne	a0,a5,80012848 <_read_r+0x40>
8001283c:	ac842783          	lw	a5,-1336(s0)
80012840:	00078463          	beqz	a5,80012848 <_read_r+0x40>
80012844:	00f4a023          	sw	a5,0(s1)
80012848:	00c12083          	lw	ra,12(sp)
8001284c:	00812403          	lw	s0,8(sp)
80012850:	00412483          	lw	s1,4(sp)
80012854:	01010113          	addi	sp,sp,16
80012858:	00008067          	ret

8001285c <_realloc_r>:
8001285c:	fc010113          	addi	sp,sp,-64
80012860:	02812c23          	sw	s0,56(sp)
80012864:	02112e23          	sw	ra,60(sp)
80012868:	00058413          	mv	s0,a1
8001286c:	02912a23          	sw	s1,52(sp)
80012870:	03212823          	sw	s2,48(sp)
80012874:	03312623          	sw	s3,44(sp)
80012878:	03412423          	sw	s4,40(sp)
8001287c:	03512223          	sw	s5,36(sp)
80012880:	03612023          	sw	s6,32(sp)
80012884:	01712e23          	sw	s7,28(sp)
80012888:	01812c23          	sw	s8,24(sp)
8001288c:	00060593          	mv	a1,a2
80012890:	02041a63          	bnez	s0,800128c4 <_realloc_r+0x68>
80012894:	03812403          	lw	s0,56(sp)
80012898:	03c12083          	lw	ra,60(sp)
8001289c:	03412483          	lw	s1,52(sp)
800128a0:	03012903          	lw	s2,48(sp)
800128a4:	02c12983          	lw	s3,44(sp)
800128a8:	02812a03          	lw	s4,40(sp)
800128ac:	02412a83          	lw	s5,36(sp)
800128b0:	02012b03          	lw	s6,32(sp)
800128b4:	01c12b83          	lw	s7,28(sp)
800128b8:	01812c03          	lw	s8,24(sp)
800128bc:	04010113          	addi	sp,sp,64
800128c0:	d5dfa06f          	j	8000d61c <_malloc_r>
800128c4:	00050a93          	mv	s5,a0
800128c8:	00c12623          	sw	a2,12(sp)
800128cc:	c48fb0ef          	jal	ra,8000dd14 <__malloc_lock>
800128d0:	00c12583          	lw	a1,12(sp)
800128d4:	ffc42683          	lw	a3,-4(s0)
800128d8:	01600793          	li	a5,22
800128dc:	00b58993          	addi	s3,a1,11
800128e0:	ff840b93          	addi	s7,s0,-8
800128e4:	ffc6f913          	andi	s2,a3,-4
800128e8:	0537f663          	bleu	s3,a5,80012934 <_realloc_r+0xd8>
800128ec:	ff89fb13          	andi	s6,s3,-8
800128f0:	040b5463          	bgez	s6,80012938 <_realloc_r+0xdc>
800128f4:	00c00793          	li	a5,12
800128f8:	00faa023          	sw	a5,0(s5)
800128fc:	00000a13          	li	s4,0
80012900:	03c12083          	lw	ra,60(sp)
80012904:	03812403          	lw	s0,56(sp)
80012908:	000a0513          	mv	a0,s4
8001290c:	03412483          	lw	s1,52(sp)
80012910:	03012903          	lw	s2,48(sp)
80012914:	02c12983          	lw	s3,44(sp)
80012918:	02812a03          	lw	s4,40(sp)
8001291c:	02412a83          	lw	s5,36(sp)
80012920:	02012b03          	lw	s6,32(sp)
80012924:	01c12b83          	lw	s7,28(sp)
80012928:	01812c03          	lw	s8,24(sp)
8001292c:	04010113          	addi	sp,sp,64
80012930:	00008067          	ret
80012934:	01000b13          	li	s6,16
80012938:	fabb6ee3          	bltu	s6,a1,800128f4 <_realloc_r+0x98>
8001293c:	45695c63          	ble	s6,s2,80012d94 <_realloc_r+0x538>
80012940:	80021c37          	lui	s8,0x80021
80012944:	404c0713          	addi	a4,s8,1028 # 80021404 <__stack+0xfffe4938>
80012948:	00872603          	lw	a2,8(a4)
8001294c:	012b87b3          	add	a5,s7,s2
80012950:	0047a703          	lw	a4,4(a5)
80012954:	404c0c13          	addi	s8,s8,1028
80012958:	00f60c63          	beq	a2,a5,80012970 <_realloc_r+0x114>
8001295c:	ffe77513          	andi	a0,a4,-2
80012960:	00a78533          	add	a0,a5,a0
80012964:	00452503          	lw	a0,4(a0)
80012968:	00157513          	andi	a0,a0,1
8001296c:	0a051a63          	bnez	a0,80012a20 <_realloc_r+0x1c4>
80012970:	ffc77713          	andi	a4,a4,-4
80012974:	00e909b3          	add	s3,s2,a4
80012978:	04f61063          	bne	a2,a5,800129b8 <_realloc_r+0x15c>
8001297c:	010b0513          	addi	a0,s6,16 # 80000010 <__stack+0xfffc3544>
80012980:	0aa9c463          	blt	s3,a0,80012a28 <_realloc_r+0x1cc>
80012984:	016b8bb3          	add	s7,s7,s6
80012988:	416989b3          	sub	s3,s3,s6
8001298c:	017c2423          	sw	s7,8(s8)
80012990:	0019e993          	ori	s3,s3,1
80012994:	013ba223          	sw	s3,4(s7) # 80000004 <__stack+0xfffc3538>
80012998:	ffc42983          	lw	s3,-4(s0)
8001299c:	000a8513          	mv	a0,s5
800129a0:	00040a13          	mv	s4,s0
800129a4:	0019f993          	andi	s3,s3,1
800129a8:	0169e9b3          	or	s3,s3,s6
800129ac:	ff342e23          	sw	s3,-4(s0)
800129b0:	b68fb0ef          	jal	ra,8000dd18 <__malloc_unlock>
800129b4:	f4dff06f          	j	80012900 <_realloc_r+0xa4>
800129b8:	0769c863          	blt	s3,s6,80012a28 <_realloc_r+0x1cc>
800129bc:	00c7a703          	lw	a4,12(a5)
800129c0:	0087a783          	lw	a5,8(a5)
800129c4:	00e7a623          	sw	a4,12(a5)
800129c8:	00f72423          	sw	a5,8(a4)
800129cc:	004ba703          	lw	a4,4(s7)
800129d0:	416986b3          	sub	a3,s3,s6
800129d4:	00f00613          	li	a2,15
800129d8:	00177713          	andi	a4,a4,1
800129dc:	013b87b3          	add	a5,s7,s3
800129e0:	3ad67e63          	bleu	a3,a2,80012d9c <_realloc_r+0x540>
800129e4:	00eb69b3          	or	s3,s6,a4
800129e8:	013ba223          	sw	s3,4(s7)
800129ec:	016b85b3          	add	a1,s7,s6
800129f0:	0016e693          	ori	a3,a3,1
800129f4:	00d5a223          	sw	a3,4(a1)
800129f8:	0047a703          	lw	a4,4(a5)
800129fc:	00858593          	addi	a1,a1,8
80012a00:	000a8513          	mv	a0,s5
80012a04:	00176713          	ori	a4,a4,1
80012a08:	00e7a223          	sw	a4,4(a5)
80012a0c:	d94f80ef          	jal	ra,8000afa0 <_free_r>
80012a10:	000a8513          	mv	a0,s5
80012a14:	b04fb0ef          	jal	ra,8000dd18 <__malloc_unlock>
80012a18:	008b8a13          	addi	s4,s7,8
80012a1c:	ee5ff06f          	j	80012900 <_realloc_r+0xa4>
80012a20:	00000713          	li	a4,0
80012a24:	00000793          	li	a5,0
80012a28:	0016f693          	andi	a3,a3,1
80012a2c:	28069263          	bnez	a3,80012cb0 <_realloc_r+0x454>
80012a30:	ff842483          	lw	s1,-8(s0)
80012a34:	409b84b3          	sub	s1,s7,s1
80012a38:	0044aa03          	lw	s4,4(s1)
80012a3c:	ffca7a13          	andi	s4,s4,-4
80012a40:	012a0a33          	add	s4,s4,s2
80012a44:	1a078c63          	beqz	a5,80012bfc <_realloc_r+0x3a0>
80012a48:	014709b3          	add	s3,a4,s4
80012a4c:	0ef61663          	bne	a2,a5,80012b38 <_realloc_r+0x2dc>
80012a50:	010b0793          	addi	a5,s6,16
80012a54:	1af9c463          	blt	s3,a5,80012bfc <_realloc_r+0x3a0>
80012a58:	0084a703          	lw	a4,8(s1)
80012a5c:	00c4a783          	lw	a5,12(s1)
80012a60:	ffc90613          	addi	a2,s2,-4
80012a64:	00848a13          	addi	s4,s1,8
80012a68:	00f72623          	sw	a5,12(a4)
80012a6c:	00e7a423          	sw	a4,8(a5)
80012a70:	02400713          	li	a4,36
80012a74:	0ac76a63          	bltu	a4,a2,80012b28 <_realloc_r+0x2cc>
80012a78:	01300693          	li	a3,19
80012a7c:	000a0793          	mv	a5,s4
80012a80:	02c6f263          	bleu	a2,a3,80012aa4 <_realloc_r+0x248>
80012a84:	00042783          	lw	a5,0(s0)
80012a88:	00f4a423          	sw	a5,8(s1)
80012a8c:	00442783          	lw	a5,4(s0)
80012a90:	00f4a623          	sw	a5,12(s1)
80012a94:	01b00793          	li	a5,27
80012a98:	04c7ea63          	bltu	a5,a2,80012aec <_realloc_r+0x290>
80012a9c:	00840413          	addi	s0,s0,8
80012aa0:	01048793          	addi	a5,s1,16
80012aa4:	00042703          	lw	a4,0(s0)
80012aa8:	00e7a023          	sw	a4,0(a5)
80012aac:	00442703          	lw	a4,4(s0)
80012ab0:	00e7a223          	sw	a4,4(a5)
80012ab4:	00842703          	lw	a4,8(s0)
80012ab8:	00e7a423          	sw	a4,8(a5)
80012abc:	016487b3          	add	a5,s1,s6
80012ac0:	416989b3          	sub	s3,s3,s6
80012ac4:	00fc2423          	sw	a5,8(s8)
80012ac8:	0019e993          	ori	s3,s3,1
80012acc:	0137a223          	sw	s3,4(a5)
80012ad0:	0044a783          	lw	a5,4(s1)
80012ad4:	0017f793          	andi	a5,a5,1
80012ad8:	0167e9b3          	or	s3,a5,s6
80012adc:	0134a223          	sw	s3,4(s1)
80012ae0:	000a8513          	mv	a0,s5
80012ae4:	a34fb0ef          	jal	ra,8000dd18 <__malloc_unlock>
80012ae8:	e19ff06f          	j	80012900 <_realloc_r+0xa4>
80012aec:	00842783          	lw	a5,8(s0)
80012af0:	00f4a823          	sw	a5,16(s1)
80012af4:	00c42783          	lw	a5,12(s0)
80012af8:	00f4aa23          	sw	a5,20(s1)
80012afc:	00e60863          	beq	a2,a4,80012b0c <_realloc_r+0x2b0>
80012b00:	01040413          	addi	s0,s0,16
80012b04:	01848793          	addi	a5,s1,24
80012b08:	f9dff06f          	j	80012aa4 <_realloc_r+0x248>
80012b0c:	01042783          	lw	a5,16(s0)
80012b10:	01840413          	addi	s0,s0,24
80012b14:	00f4ac23          	sw	a5,24(s1)
80012b18:	ffc42703          	lw	a4,-4(s0)
80012b1c:	02048793          	addi	a5,s1,32
80012b20:	00e4ae23          	sw	a4,28(s1)
80012b24:	f81ff06f          	j	80012aa4 <_realloc_r+0x248>
80012b28:	00040593          	mv	a1,s0
80012b2c:	000a0513          	mv	a0,s4
80012b30:	c85ff0ef          	jal	ra,800127b4 <memmove>
80012b34:	f89ff06f          	j	80012abc <_realloc_r+0x260>
80012b38:	0d69c263          	blt	s3,s6,80012bfc <_realloc_r+0x3a0>
80012b3c:	00c7a703          	lw	a4,12(a5)
80012b40:	0087a783          	lw	a5,8(a5)
80012b44:	ffc90613          	addi	a2,s2,-4
80012b48:	00848513          	addi	a0,s1,8
80012b4c:	00e7a623          	sw	a4,12(a5)
80012b50:	00f72423          	sw	a5,8(a4)
80012b54:	0084a703          	lw	a4,8(s1)
80012b58:	00c4a783          	lw	a5,12(s1)
80012b5c:	00f72623          	sw	a5,12(a4)
80012b60:	00e7a423          	sw	a4,8(a5)
80012b64:	02400793          	li	a5,36
80012b68:	08c7e463          	bltu	a5,a2,80012bf0 <_realloc_r+0x394>
80012b6c:	01300713          	li	a4,19
80012b70:	02c77263          	bleu	a2,a4,80012b94 <_realloc_r+0x338>
80012b74:	00042703          	lw	a4,0(s0)
80012b78:	00e4a423          	sw	a4,8(s1)
80012b7c:	00442703          	lw	a4,4(s0)
80012b80:	00e4a623          	sw	a4,12(s1)
80012b84:	01b00713          	li	a4,27
80012b88:	02c76663          	bltu	a4,a2,80012bb4 <_realloc_r+0x358>
80012b8c:	00840413          	addi	s0,s0,8
80012b90:	01048513          	addi	a0,s1,16
80012b94:	00042783          	lw	a5,0(s0)
80012b98:	00f52023          	sw	a5,0(a0)
80012b9c:	00442783          	lw	a5,4(s0)
80012ba0:	00f52223          	sw	a5,4(a0)
80012ba4:	00842783          	lw	a5,8(s0)
80012ba8:	00f52423          	sw	a5,8(a0)
80012bac:	00048b93          	mv	s7,s1
80012bb0:	e1dff06f          	j	800129cc <_realloc_r+0x170>
80012bb4:	00842703          	lw	a4,8(s0)
80012bb8:	00e4a823          	sw	a4,16(s1)
80012bbc:	00c42703          	lw	a4,12(s0)
80012bc0:	00e4aa23          	sw	a4,20(s1)
80012bc4:	00f60863          	beq	a2,a5,80012bd4 <_realloc_r+0x378>
80012bc8:	01040413          	addi	s0,s0,16
80012bcc:	01848513          	addi	a0,s1,24
80012bd0:	fc5ff06f          	j	80012b94 <_realloc_r+0x338>
80012bd4:	01042783          	lw	a5,16(s0)
80012bd8:	02048513          	addi	a0,s1,32
80012bdc:	01840413          	addi	s0,s0,24
80012be0:	00f4ac23          	sw	a5,24(s1)
80012be4:	ffc42783          	lw	a5,-4(s0)
80012be8:	00f4ae23          	sw	a5,28(s1)
80012bec:	fa9ff06f          	j	80012b94 <_realloc_r+0x338>
80012bf0:	00040593          	mv	a1,s0
80012bf4:	bc1ff0ef          	jal	ra,800127b4 <memmove>
80012bf8:	fb5ff06f          	j	80012bac <_realloc_r+0x350>
80012bfc:	0b6a4a63          	blt	s4,s6,80012cb0 <_realloc_r+0x454>
80012c00:	00c4a783          	lw	a5,12(s1)
80012c04:	0084a703          	lw	a4,8(s1)
80012c08:	ffc90613          	addi	a2,s2,-4
80012c0c:	00848513          	addi	a0,s1,8
80012c10:	00f72623          	sw	a5,12(a4)
80012c14:	00e7a423          	sw	a4,8(a5)
80012c18:	02400793          	li	a5,36
80012c1c:	08c7e463          	bltu	a5,a2,80012ca4 <_realloc_r+0x448>
80012c20:	01300713          	li	a4,19
80012c24:	02c77263          	bleu	a2,a4,80012c48 <_realloc_r+0x3ec>
80012c28:	00042703          	lw	a4,0(s0)
80012c2c:	00e4a423          	sw	a4,8(s1)
80012c30:	00442703          	lw	a4,4(s0)
80012c34:	00e4a623          	sw	a4,12(s1)
80012c38:	01b00713          	li	a4,27
80012c3c:	02c76663          	bltu	a4,a2,80012c68 <_realloc_r+0x40c>
80012c40:	00840413          	addi	s0,s0,8
80012c44:	01048513          	addi	a0,s1,16
80012c48:	00042783          	lw	a5,0(s0)
80012c4c:	00f52023          	sw	a5,0(a0)
80012c50:	00442783          	lw	a5,4(s0)
80012c54:	00f52223          	sw	a5,4(a0)
80012c58:	00842783          	lw	a5,8(s0)
80012c5c:	00f52423          	sw	a5,8(a0)
80012c60:	000a0993          	mv	s3,s4
80012c64:	f49ff06f          	j	80012bac <_realloc_r+0x350>
80012c68:	00842703          	lw	a4,8(s0)
80012c6c:	00e4a823          	sw	a4,16(s1)
80012c70:	00c42703          	lw	a4,12(s0)
80012c74:	00e4aa23          	sw	a4,20(s1)
80012c78:	00f60863          	beq	a2,a5,80012c88 <_realloc_r+0x42c>
80012c7c:	01040413          	addi	s0,s0,16
80012c80:	01848513          	addi	a0,s1,24
80012c84:	fc5ff06f          	j	80012c48 <_realloc_r+0x3ec>
80012c88:	01042783          	lw	a5,16(s0)
80012c8c:	02048513          	addi	a0,s1,32
80012c90:	01840413          	addi	s0,s0,24
80012c94:	00f4ac23          	sw	a5,24(s1)
80012c98:	ffc42783          	lw	a5,-4(s0)
80012c9c:	00f4ae23          	sw	a5,28(s1)
80012ca0:	fa9ff06f          	j	80012c48 <_realloc_r+0x3ec>
80012ca4:	00040593          	mv	a1,s0
80012ca8:	b0dff0ef          	jal	ra,800127b4 <memmove>
80012cac:	fb5ff06f          	j	80012c60 <_realloc_r+0x404>
80012cb0:	000a8513          	mv	a0,s5
80012cb4:	969fa0ef          	jal	ra,8000d61c <_malloc_r>
80012cb8:	00050a13          	mv	s4,a0
80012cbc:	e20502e3          	beqz	a0,80012ae0 <_realloc_r+0x284>
80012cc0:	ffc42783          	lw	a5,-4(s0)
80012cc4:	ff850713          	addi	a4,a0,-8
80012cc8:	ffe7f793          	andi	a5,a5,-2
80012ccc:	00fb87b3          	add	a5,s7,a5
80012cd0:	00e79a63          	bne	a5,a4,80012ce4 <_realloc_r+0x488>
80012cd4:	ffc52983          	lw	s3,-4(a0)
80012cd8:	ffc9f993          	andi	s3,s3,-4
80012cdc:	012989b3          	add	s3,s3,s2
80012ce0:	cedff06f          	j	800129cc <_realloc_r+0x170>
80012ce4:	ffc90613          	addi	a2,s2,-4
80012ce8:	02400793          	li	a5,36
80012cec:	08c7ee63          	bltu	a5,a2,80012d88 <_realloc_r+0x52c>
80012cf0:	01300713          	li	a4,19
80012cf4:	08c77463          	bleu	a2,a4,80012d7c <_realloc_r+0x520>
80012cf8:	00042703          	lw	a4,0(s0)
80012cfc:	00e52023          	sw	a4,0(a0)
80012d00:	00442703          	lw	a4,4(s0)
80012d04:	00e52223          	sw	a4,4(a0)
80012d08:	01b00713          	li	a4,27
80012d0c:	02c76a63          	bltu	a4,a2,80012d40 <_realloc_r+0x4e4>
80012d10:	00840713          	addi	a4,s0,8
80012d14:	00850793          	addi	a5,a0,8
80012d18:	00072683          	lw	a3,0(a4)
80012d1c:	00d7a023          	sw	a3,0(a5)
80012d20:	00472683          	lw	a3,4(a4)
80012d24:	00d7a223          	sw	a3,4(a5)
80012d28:	00872703          	lw	a4,8(a4)
80012d2c:	00e7a423          	sw	a4,8(a5)
80012d30:	00040593          	mv	a1,s0
80012d34:	000a8513          	mv	a0,s5
80012d38:	a68f80ef          	jal	ra,8000afa0 <_free_r>
80012d3c:	da5ff06f          	j	80012ae0 <_realloc_r+0x284>
80012d40:	00842703          	lw	a4,8(s0)
80012d44:	00e52423          	sw	a4,8(a0)
80012d48:	00c42703          	lw	a4,12(s0)
80012d4c:	00e52623          	sw	a4,12(a0)
80012d50:	00f60863          	beq	a2,a5,80012d60 <_realloc_r+0x504>
80012d54:	01040713          	addi	a4,s0,16
80012d58:	01050793          	addi	a5,a0,16
80012d5c:	fbdff06f          	j	80012d18 <_realloc_r+0x4bc>
80012d60:	01042783          	lw	a5,16(s0)
80012d64:	01840713          	addi	a4,s0,24
80012d68:	00f52823          	sw	a5,16(a0)
80012d6c:	01442683          	lw	a3,20(s0)
80012d70:	01850793          	addi	a5,a0,24
80012d74:	00d52a23          	sw	a3,20(a0)
80012d78:	fa1ff06f          	j	80012d18 <_realloc_r+0x4bc>
80012d7c:	00050793          	mv	a5,a0
80012d80:	00040713          	mv	a4,s0
80012d84:	f95ff06f          	j	80012d18 <_realloc_r+0x4bc>
80012d88:	00040593          	mv	a1,s0
80012d8c:	a29ff0ef          	jal	ra,800127b4 <memmove>
80012d90:	fa1ff06f          	j	80012d30 <_realloc_r+0x4d4>
80012d94:	00090993          	mv	s3,s2
80012d98:	c35ff06f          	j	800129cc <_realloc_r+0x170>
80012d9c:	00e9e9b3          	or	s3,s3,a4
80012da0:	013ba223          	sw	s3,4(s7)
80012da4:	0047a703          	lw	a4,4(a5)
80012da8:	00176713          	ori	a4,a4,1
80012dac:	00e7a223          	sw	a4,4(a5)
80012db0:	c61ff06f          	j	80012a10 <_realloc_r+0x1b4>

80012db4 <cleanup_glue>:
80012db4:	ff010113          	addi	sp,sp,-16
80012db8:	00812423          	sw	s0,8(sp)
80012dbc:	00058413          	mv	s0,a1
80012dc0:	0005a583          	lw	a1,0(a1)
80012dc4:	00912223          	sw	s1,4(sp)
80012dc8:	00112623          	sw	ra,12(sp)
80012dcc:	00050493          	mv	s1,a0
80012dd0:	00058463          	beqz	a1,80012dd8 <cleanup_glue+0x24>
80012dd4:	fe1ff0ef          	jal	ra,80012db4 <cleanup_glue>
80012dd8:	00040593          	mv	a1,s0
80012ddc:	00812403          	lw	s0,8(sp)
80012de0:	00c12083          	lw	ra,12(sp)
80012de4:	00048513          	mv	a0,s1
80012de8:	00412483          	lw	s1,4(sp)
80012dec:	01010113          	addi	sp,sp,16
80012df0:	9b0f806f          	j	8000afa0 <_free_r>

80012df4 <_reclaim_reent>:
80012df4:	800217b7          	lui	a5,0x80021
80012df8:	e647a783          	lw	a5,-412(a5) # 80020e64 <__stack+0xfffe4398>
80012dfc:	10a78263          	beq	a5,a0,80012f00 <_reclaim_reent+0x10c>
80012e00:	04c52783          	lw	a5,76(a0)
80012e04:	fe010113          	addi	sp,sp,-32
80012e08:	00812c23          	sw	s0,24(sp)
80012e0c:	00912a23          	sw	s1,20(sp)
80012e10:	01212823          	sw	s2,16(sp)
80012e14:	00112e23          	sw	ra,28(sp)
80012e18:	01312623          	sw	s3,12(sp)
80012e1c:	00050413          	mv	s0,a0
80012e20:	00000493          	li	s1,0
80012e24:	08000913          	li	s2,128
80012e28:	04079463          	bnez	a5,80012e70 <_reclaim_reent+0x7c>
80012e2c:	04042583          	lw	a1,64(s0)
80012e30:	00058663          	beqz	a1,80012e3c <_reclaim_reent+0x48>
80012e34:	00040513          	mv	a0,s0
80012e38:	968f80ef          	jal	ra,8000afa0 <_free_r>
80012e3c:	14842583          	lw	a1,328(s0)
80012e40:	04058c63          	beqz	a1,80012e98 <_reclaim_reent+0xa4>
80012e44:	14c40493          	addi	s1,s0,332
80012e48:	04958863          	beq	a1,s1,80012e98 <_reclaim_reent+0xa4>
80012e4c:	0005a903          	lw	s2,0(a1)
80012e50:	00040513          	mv	a0,s0
80012e54:	94cf80ef          	jal	ra,8000afa0 <_free_r>
80012e58:	00090593          	mv	a1,s2
80012e5c:	fedff06f          	j	80012e48 <_reclaim_reent+0x54>
80012e60:	009585b3          	add	a1,a1,s1
80012e64:	0005a583          	lw	a1,0(a1)
80012e68:	00059e63          	bnez	a1,80012e84 <_reclaim_reent+0x90>
80012e6c:	00448493          	addi	s1,s1,4
80012e70:	04c42583          	lw	a1,76(s0)
80012e74:	ff2496e3          	bne	s1,s2,80012e60 <_reclaim_reent+0x6c>
80012e78:	00040513          	mv	a0,s0
80012e7c:	924f80ef          	jal	ra,8000afa0 <_free_r>
80012e80:	fadff06f          	j	80012e2c <_reclaim_reent+0x38>
80012e84:	0005a983          	lw	s3,0(a1)
80012e88:	00040513          	mv	a0,s0
80012e8c:	914f80ef          	jal	ra,8000afa0 <_free_r>
80012e90:	00098593          	mv	a1,s3
80012e94:	fd5ff06f          	j	80012e68 <_reclaim_reent+0x74>
80012e98:	05442583          	lw	a1,84(s0)
80012e9c:	00058663          	beqz	a1,80012ea8 <_reclaim_reent+0xb4>
80012ea0:	00040513          	mv	a0,s0
80012ea4:	8fcf80ef          	jal	ra,8000afa0 <_free_r>
80012ea8:	03842783          	lw	a5,56(s0)
80012eac:	02078c63          	beqz	a5,80012ee4 <_reclaim_reent+0xf0>
80012eb0:	03c42783          	lw	a5,60(s0)
80012eb4:	00040513          	mv	a0,s0
80012eb8:	000780e7          	jalr	a5
80012ebc:	2e042583          	lw	a1,736(s0)
80012ec0:	02058263          	beqz	a1,80012ee4 <_reclaim_reent+0xf0>
80012ec4:	00040513          	mv	a0,s0
80012ec8:	01812403          	lw	s0,24(sp)
80012ecc:	01c12083          	lw	ra,28(sp)
80012ed0:	01412483          	lw	s1,20(sp)
80012ed4:	01012903          	lw	s2,16(sp)
80012ed8:	00c12983          	lw	s3,12(sp)
80012edc:	02010113          	addi	sp,sp,32
80012ee0:	ed5ff06f          	j	80012db4 <cleanup_glue>
80012ee4:	01c12083          	lw	ra,28(sp)
80012ee8:	01812403          	lw	s0,24(sp)
80012eec:	01412483          	lw	s1,20(sp)
80012ef0:	01012903          	lw	s2,16(sp)
80012ef4:	00c12983          	lw	s3,12(sp)
80012ef8:	02010113          	addi	sp,sp,32
80012efc:	00008067          	ret
80012f00:	00008067          	ret

80012f04 <__ssprint_r>:
80012f04:	00862783          	lw	a5,8(a2)
80012f08:	fd010113          	addi	sp,sp,-48
80012f0c:	01312e23          	sw	s3,28(sp)
80012f10:	02112623          	sw	ra,44(sp)
80012f14:	02812423          	sw	s0,40(sp)
80012f18:	02912223          	sw	s1,36(sp)
80012f1c:	03212023          	sw	s2,32(sp)
80012f20:	01412c23          	sw	s4,24(sp)
80012f24:	01512a23          	sw	s5,20(sp)
80012f28:	01612823          	sw	s6,16(sp)
80012f2c:	01712623          	sw	s7,12(sp)
80012f30:	01812423          	sw	s8,8(sp)
80012f34:	01912223          	sw	s9,4(sp)
80012f38:	01a12023          	sw	s10,0(sp)
80012f3c:	00060993          	mv	s3,a2
80012f40:	12078463          	beqz	a5,80013068 <__ssprint_r+0x164>
80012f44:	00062a83          	lw	s5,0(a2)
80012f48:	00050a13          	mv	s4,a0
80012f4c:	00058413          	mv	s0,a1
80012f50:	00000b13          	li	s6,0
80012f54:	00000913          	li	s2,0
80012f58:	00300b93          	li	s7,3
80012f5c:	00200c13          	li	s8,2
80012f60:	08090063          	beqz	s2,80012fe0 <__ssprint_r+0xdc>
80012f64:	00842d03          	lw	s10,8(s0)
80012f68:	0da96063          	bltu	s2,s10,80013028 <__ssprint_r+0x124>
80012f6c:	00c45783          	lhu	a5,12(s0)
80012f70:	4807f713          	andi	a4,a5,1152
80012f74:	0a070a63          	beqz	a4,80013028 <__ssprint_r+0x124>
80012f78:	00042483          	lw	s1,0(s0)
80012f7c:	01042583          	lw	a1,16(s0)
80012f80:	40b48cb3          	sub	s9,s1,a1
80012f84:	01442483          	lw	s1,20(s0)
80012f88:	001c8713          	addi	a4,s9,1
80012f8c:	01270733          	add	a4,a4,s2
80012f90:	029b84b3          	mul	s1,s7,s1
80012f94:	0384c4b3          	div	s1,s1,s8
80012f98:	00e4f463          	bleu	a4,s1,80012fa0 <__ssprint_r+0x9c>
80012f9c:	00070493          	mv	s1,a4
80012fa0:	4007f793          	andi	a5,a5,1024
80012fa4:	10078263          	beqz	a5,800130a8 <__ssprint_r+0x1a4>
80012fa8:	00048593          	mv	a1,s1
80012fac:	000a0513          	mv	a0,s4
80012fb0:	e6cfa0ef          	jal	ra,8000d61c <_malloc_r>
80012fb4:	00050d13          	mv	s10,a0
80012fb8:	02051c63          	bnez	a0,80012ff0 <__ssprint_r+0xec>
80012fbc:	00c00793          	li	a5,12
80012fc0:	00fa2023          	sw	a5,0(s4)
80012fc4:	00c45783          	lhu	a5,12(s0)
80012fc8:	fff00513          	li	a0,-1
80012fcc:	0407e793          	ori	a5,a5,64
80012fd0:	00f41623          	sh	a5,12(s0)
80012fd4:	0009a423          	sw	zero,8(s3)
80012fd8:	0009a223          	sw	zero,4(s3)
80012fdc:	0940006f          	j	80013070 <__ssprint_r+0x16c>
80012fe0:	000aab03          	lw	s6,0(s5)
80012fe4:	004aa903          	lw	s2,4(s5)
80012fe8:	008a8a93          	addi	s5,s5,8
80012fec:	f75ff06f          	j	80012f60 <__ssprint_r+0x5c>
80012ff0:	01042583          	lw	a1,16(s0)
80012ff4:	000c8613          	mv	a2,s9
80012ff8:	d48f50ef          	jal	ra,80008540 <memcpy>
80012ffc:	00c45783          	lhu	a5,12(s0)
80013000:	b7f7f793          	andi	a5,a5,-1153
80013004:	0807e793          	ori	a5,a5,128
80013008:	00f41623          	sh	a5,12(s0)
8001300c:	01a42823          	sw	s10,16(s0)
80013010:	00942a23          	sw	s1,20(s0)
80013014:	019d0d33          	add	s10,s10,s9
80013018:	419484b3          	sub	s1,s1,s9
8001301c:	01a42023          	sw	s10,0(s0)
80013020:	00942423          	sw	s1,8(s0)
80013024:	00090d13          	mv	s10,s2
80013028:	01a97463          	bleu	s10,s2,80013030 <__ssprint_r+0x12c>
8001302c:	00090d13          	mv	s10,s2
80013030:	00042503          	lw	a0,0(s0)
80013034:	000d0613          	mv	a2,s10
80013038:	000b0593          	mv	a1,s6
8001303c:	f78ff0ef          	jal	ra,800127b4 <memmove>
80013040:	00842783          	lw	a5,8(s0)
80013044:	41a787b3          	sub	a5,a5,s10
80013048:	00f42423          	sw	a5,8(s0)
8001304c:	00042783          	lw	a5,0(s0)
80013050:	01a78d33          	add	s10,a5,s10
80013054:	0089a783          	lw	a5,8(s3)
80013058:	01a42023          	sw	s10,0(s0)
8001305c:	41278933          	sub	s2,a5,s2
80013060:	0129a423          	sw	s2,8(s3)
80013064:	f6091ee3          	bnez	s2,80012fe0 <__ssprint_r+0xdc>
80013068:	0009a223          	sw	zero,4(s3)
8001306c:	00000513          	li	a0,0
80013070:	02c12083          	lw	ra,44(sp)
80013074:	02812403          	lw	s0,40(sp)
80013078:	02412483          	lw	s1,36(sp)
8001307c:	02012903          	lw	s2,32(sp)
80013080:	01c12983          	lw	s3,28(sp)
80013084:	01812a03          	lw	s4,24(sp)
80013088:	01412a83          	lw	s5,20(sp)
8001308c:	01012b03          	lw	s6,16(sp)
80013090:	00c12b83          	lw	s7,12(sp)
80013094:	00812c03          	lw	s8,8(sp)
80013098:	00412c83          	lw	s9,4(sp)
8001309c:	00012d03          	lw	s10,0(sp)
800130a0:	03010113          	addi	sp,sp,48
800130a4:	00008067          	ret
800130a8:	00048613          	mv	a2,s1
800130ac:	000a0513          	mv	a0,s4
800130b0:	facff0ef          	jal	ra,8001285c <_realloc_r>
800130b4:	00050d13          	mv	s10,a0
800130b8:	f4051ae3          	bnez	a0,8001300c <__ssprint_r+0x108>
800130bc:	01042583          	lw	a1,16(s0)
800130c0:	000a0513          	mv	a0,s4
800130c4:	eddf70ef          	jal	ra,8000afa0 <_free_r>
800130c8:	ef5ff06f          	j	80012fbc <__ssprint_r+0xb8>

800130cc <_svfiprintf_r>:
800130cc:	00c5d783          	lhu	a5,12(a1)
800130d0:	ed010113          	addi	sp,sp,-304
800130d4:	12912223          	sw	s1,292(sp)
800130d8:	13212023          	sw	s2,288(sp)
800130dc:	11312e23          	sw	s3,284(sp)
800130e0:	11512a23          	sw	s5,276(sp)
800130e4:	12112623          	sw	ra,300(sp)
800130e8:	12812423          	sw	s0,296(sp)
800130ec:	11412c23          	sw	s4,280(sp)
800130f0:	11612823          	sw	s6,272(sp)
800130f4:	11712623          	sw	s7,268(sp)
800130f8:	11812423          	sw	s8,264(sp)
800130fc:	11912223          	sw	s9,260(sp)
80013100:	11a12023          	sw	s10,256(sp)
80013104:	0fb12e23          	sw	s11,252(sp)
80013108:	0807f793          	andi	a5,a5,128
8001310c:	00050a93          	mv	s5,a0
80013110:	00058913          	mv	s2,a1
80013114:	00060993          	mv	s3,a2
80013118:	00068493          	mv	s1,a3
8001311c:	02078c63          	beqz	a5,80013154 <_svfiprintf_r+0x88>
80013120:	0105a783          	lw	a5,16(a1)
80013124:	02079863          	bnez	a5,80013154 <_svfiprintf_r+0x88>
80013128:	04000593          	li	a1,64
8001312c:	cf0fa0ef          	jal	ra,8000d61c <_malloc_r>
80013130:	00a92023          	sw	a0,0(s2)
80013134:	00a92823          	sw	a0,16(s2)
80013138:	00051a63          	bnez	a0,8001314c <_svfiprintf_r+0x80>
8001313c:	00c00793          	li	a5,12
80013140:	00faa023          	sw	a5,0(s5)
80013144:	fff00b93          	li	s7,-1
80013148:	3210006f          	j	80013c68 <_svfiprintf_r+0xb9c>
8001314c:	04000793          	li	a5,64
80013150:	00f92a23          	sw	a5,20(s2)
80013154:	800217b7          	lui	a5,0x80021
80013158:	a2c78793          	addi	a5,a5,-1492 # 80020a2c <__stack+0xfffe3f60>
8001315c:	00f12e23          	sw	a5,28(sp)
80013160:	800217b7          	lui	a5,0x80021
80013164:	04c10b13          	addi	s6,sp,76
80013168:	ba878793          	addi	a5,a5,-1112 # 80020ba8 <__stack+0xfffe40dc>
8001316c:	05612023          	sw	s6,64(sp)
80013170:	04012423          	sw	zero,72(sp)
80013174:	04012223          	sw	zero,68(sp)
80013178:	000b0713          	mv	a4,s6
8001317c:	00012423          	sw	zero,8(sp)
80013180:	00012223          	sw	zero,4(sp)
80013184:	00012623          	sw	zero,12(sp)
80013188:	00012a23          	sw	zero,20(sp)
8001318c:	00000b93          	li	s7,0
80013190:	00f12823          	sw	a5,16(sp)
80013194:	00098413          	mv	s0,s3
80013198:	02500693          	li	a3,37
8001319c:	00044783          	lbu	a5,0(s0)
800131a0:	00078463          	beqz	a5,800131a8 <_svfiprintf_r+0xdc>
800131a4:	0ad79263          	bne	a5,a3,80013248 <_svfiprintf_r+0x17c>
800131a8:	41340a33          	sub	s4,s0,s3
800131ac:	040a0663          	beqz	s4,800131f8 <_svfiprintf_r+0x12c>
800131b0:	04812783          	lw	a5,72(sp)
800131b4:	01372023          	sw	s3,0(a4)
800131b8:	01472223          	sw	s4,4(a4)
800131bc:	014787b3          	add	a5,a5,s4
800131c0:	04f12423          	sw	a5,72(sp)
800131c4:	04412783          	lw	a5,68(sp)
800131c8:	00700693          	li	a3,7
800131cc:	00870713          	addi	a4,a4,8
800131d0:	00178793          	addi	a5,a5,1
800131d4:	04f12223          	sw	a5,68(sp)
800131d8:	00f6de63          	ble	a5,a3,800131f4 <_svfiprintf_r+0x128>
800131dc:	04010613          	addi	a2,sp,64
800131e0:	00090593          	mv	a1,s2
800131e4:	000a8513          	mv	a0,s5
800131e8:	d1dff0ef          	jal	ra,80012f04 <__ssprint_r>
800131ec:	260518e3          	bnez	a0,80013c5c <_svfiprintf_r+0xb90>
800131f0:	000b0713          	mv	a4,s6
800131f4:	014b8bb3          	add	s7,s7,s4
800131f8:	00044783          	lbu	a5,0(s0)
800131fc:	2e0782e3          	beqz	a5,80013ce0 <_svfiprintf_r+0xc14>
80013200:	00140993          	addi	s3,s0,1
80013204:	02010da3          	sb	zero,59(sp)
80013208:	fff00413          	li	s0,-1
8001320c:	00000a13          	li	s4,0
80013210:	00000d13          	li	s10,0
80013214:	00a00c13          	li	s8,10
80013218:	02a00c93          	li	s9,42
8001321c:	05a00813          	li	a6,90
80013220:	00900593          	li	a1,9
80013224:	0009c603          	lbu	a2,0(s3)
80013228:	00198993          	addi	s3,s3,1
8001322c:	fe060693          	addi	a3,a2,-32
80013230:	0cd86ee3          	bltu	a6,a3,80013b0c <_svfiprintf_r+0xa40>
80013234:	01c12783          	lw	a5,28(sp)
80013238:	00269693          	slli	a3,a3,0x2
8001323c:	00f686b3          	add	a3,a3,a5
80013240:	0006a683          	lw	a3,0(a3) # 2000 <_HEAP_SIZE+0x1000>
80013244:	00068067          	jr	a3
80013248:	00140413          	addi	s0,s0,1
8001324c:	f51ff06f          	j	8001319c <_svfiprintf_r+0xd0>
80013250:	800216b7          	lui	a3,0x80021
80013254:	d9068793          	addi	a5,a3,-624 # 80020d90 <__stack+0xfffe42c4>
80013258:	00f12423          	sw	a5,8(sp)
8001325c:	020d7693          	andi	a3,s10,32
80013260:	6c068063          	beqz	a3,80013920 <_svfiprintf_r+0x854>
80013264:	00748493          	addi	s1,s1,7
80013268:	ff84f493          	andi	s1,s1,-8
8001326c:	0004a883          	lw	a7,0(s1)
80013270:	0044ac83          	lw	s9,4(s1)
80013274:	00848c13          	addi	s8,s1,8
80013278:	001d7693          	andi	a3,s10,1
8001327c:	00068e63          	beqz	a3,80013298 <_svfiprintf_r+0x1cc>
80013280:	0198e6b3          	or	a3,a7,s9
80013284:	00068a63          	beqz	a3,80013298 <_svfiprintf_r+0x1cc>
80013288:	03000693          	li	a3,48
8001328c:	02d10e23          	sb	a3,60(sp)
80013290:	02c10ea3          	sb	a2,61(sp)
80013294:	002d6d13          	ori	s10,s10,2
80013298:	bffd7d13          	andi	s10,s10,-1025
8001329c:	31c0006f          	j	800135b8 <_svfiprintf_r+0x4ec>
800132a0:	000a8513          	mv	a0,s5
800132a4:	00e12023          	sw	a4,0(sp)
800132a8:	8d8fa0ef          	jal	ra,8000d380 <_localeconv_r>
800132ac:	00452783          	lw	a5,4(a0)
800132b0:	00078513          	mv	a0,a5
800132b4:	00f12a23          	sw	a5,20(sp)
800132b8:	d9dfb0ef          	jal	ra,8000f054 <strlen>
800132bc:	00a12623          	sw	a0,12(sp)
800132c0:	000a8513          	mv	a0,s5
800132c4:	8bcfa0ef          	jal	ra,8000d380 <_localeconv_r>
800132c8:	00852783          	lw	a5,8(a0)
800132cc:	00012703          	lw	a4,0(sp)
800132d0:	00f12223          	sw	a5,4(sp)
800132d4:	00c12783          	lw	a5,12(sp)
800132d8:	f40782e3          	beqz	a5,8001321c <_svfiprintf_r+0x150>
800132dc:	00412783          	lw	a5,4(sp)
800132e0:	f2078ee3          	beqz	a5,8001321c <_svfiprintf_r+0x150>
800132e4:	0007c683          	lbu	a3,0(a5)
800132e8:	f2068ae3          	beqz	a3,8001321c <_svfiprintf_r+0x150>
800132ec:	400d6d13          	ori	s10,s10,1024
800132f0:	f2dff06f          	j	8001321c <_svfiprintf_r+0x150>
800132f4:	03b14683          	lbu	a3,59(sp)
800132f8:	f20692e3          	bnez	a3,8001321c <_svfiprintf_r+0x150>
800132fc:	02000693          	li	a3,32
80013300:	02d10da3          	sb	a3,59(sp)
80013304:	f19ff06f          	j	8001321c <_svfiprintf_r+0x150>
80013308:	001d6d13          	ori	s10,s10,1
8001330c:	f11ff06f          	j	8001321c <_svfiprintf_r+0x150>
80013310:	0004aa03          	lw	s4,0(s1)
80013314:	00448493          	addi	s1,s1,4
80013318:	f00a52e3          	bgez	s4,8001321c <_svfiprintf_r+0x150>
8001331c:	41400a33          	neg	s4,s4
80013320:	004d6d13          	ori	s10,s10,4
80013324:	ef9ff06f          	j	8001321c <_svfiprintf_r+0x150>
80013328:	02b00693          	li	a3,43
8001332c:	fd5ff06f          	j	80013300 <_svfiprintf_r+0x234>
80013330:	0009c603          	lbu	a2,0(s3)
80013334:	00198693          	addi	a3,s3,1
80013338:	05961063          	bne	a2,s9,80013378 <_svfiprintf_r+0x2ac>
8001333c:	0004a403          	lw	s0,0(s1)
80013340:	00448613          	addi	a2,s1,4
80013344:	00045463          	bgez	s0,8001334c <_svfiprintf_r+0x280>
80013348:	fff00413          	li	s0,-1
8001334c:	00060493          	mv	s1,a2
80013350:	00068993          	mv	s3,a3
80013354:	ec9ff06f          	j	8001321c <_svfiprintf_r+0x150>
80013358:	03840433          	mul	s0,s0,s8
8001335c:	00168693          	addi	a3,a3,1
80013360:	fff6c603          	lbu	a2,-1(a3)
80013364:	00a40433          	add	s0,s0,a0
80013368:	fd060513          	addi	a0,a2,-48
8001336c:	fea5f6e3          	bleu	a0,a1,80013358 <_svfiprintf_r+0x28c>
80013370:	00068993          	mv	s3,a3
80013374:	eb9ff06f          	j	8001322c <_svfiprintf_r+0x160>
80013378:	00000413          	li	s0,0
8001337c:	fedff06f          	j	80013368 <_svfiprintf_r+0x29c>
80013380:	080d6d13          	ori	s10,s10,128
80013384:	e99ff06f          	j	8001321c <_svfiprintf_r+0x150>
80013388:	00098693          	mv	a3,s3
8001338c:	00000a13          	li	s4,0
80013390:	038a0a33          	mul	s4,s4,s8
80013394:	fd060613          	addi	a2,a2,-48
80013398:	00168693          	addi	a3,a3,1
8001339c:	01460a33          	add	s4,a2,s4
800133a0:	fff6c603          	lbu	a2,-1(a3)
800133a4:	fd060513          	addi	a0,a2,-48
800133a8:	fea5f4e3          	bleu	a0,a1,80013390 <_svfiprintf_r+0x2c4>
800133ac:	fc5ff06f          	j	80013370 <_svfiprintf_r+0x2a4>
800133b0:	0009c603          	lbu	a2,0(s3)
800133b4:	06800693          	li	a3,104
800133b8:	00d61863          	bne	a2,a3,800133c8 <_svfiprintf_r+0x2fc>
800133bc:	00198993          	addi	s3,s3,1
800133c0:	200d6d13          	ori	s10,s10,512
800133c4:	e59ff06f          	j	8001321c <_svfiprintf_r+0x150>
800133c8:	040d6d13          	ori	s10,s10,64
800133cc:	e51ff06f          	j	8001321c <_svfiprintf_r+0x150>
800133d0:	0009c603          	lbu	a2,0(s3)
800133d4:	06c00693          	li	a3,108
800133d8:	00d61863          	bne	a2,a3,800133e8 <_svfiprintf_r+0x31c>
800133dc:	00198993          	addi	s3,s3,1
800133e0:	020d6d13          	ori	s10,s10,32
800133e4:	e39ff06f          	j	8001321c <_svfiprintf_r+0x150>
800133e8:	010d6d13          	ori	s10,s10,16
800133ec:	e31ff06f          	j	8001321c <_svfiprintf_r+0x150>
800133f0:	0004a683          	lw	a3,0(s1)
800133f4:	00448c13          	addi	s8,s1,4
800133f8:	02010da3          	sb	zero,59(sp)
800133fc:	08d10623          	sb	a3,140(sp)
80013400:	00100413          	li	s0,1
80013404:	00000c93          	li	s9,0
80013408:	08c10493          	addi	s1,sp,140
8001340c:	1ec0006f          	j	800135f8 <_svfiprintf_r+0x52c>
80013410:	010d6d13          	ori	s10,s10,16
80013414:	020d7693          	andi	a3,s10,32
80013418:	04068c63          	beqz	a3,80013470 <_svfiprintf_r+0x3a4>
8001341c:	00748493          	addi	s1,s1,7
80013420:	ff84f493          	andi	s1,s1,-8
80013424:	0004a883          	lw	a7,0(s1)
80013428:	0044ac83          	lw	s9,4(s1)
8001342c:	00848c13          	addi	s8,s1,8
80013430:	000cde63          	bgez	s9,8001344c <_svfiprintf_r+0x380>
80013434:	411008b3          	neg	a7,a7
80013438:	011036b3          	snez	a3,a7
8001343c:	41900333          	neg	t1,s9
80013440:	40d30cb3          	sub	s9,t1,a3
80013444:	02d00693          	li	a3,45
80013448:	02d10da3          	sb	a3,59(sp)
8001344c:	fff00693          	li	a3,-1
80013450:	50d41463          	bne	s0,a3,80013958 <_svfiprintf_r+0x88c>
80013454:	560c9e63          	bnez	s9,800139d0 <_svfiprintf_r+0x904>
80013458:	00900693          	li	a3,9
8001345c:	5716ea63          	bltu	a3,a7,800139d0 <_svfiprintf_r+0x904>
80013460:	03088893          	addi	a7,a7,48
80013464:	0f1107a3          	sb	a7,239(sp)
80013468:	0ef10493          	addi	s1,sp,239
8001346c:	54c0006f          	j	800139b8 <_svfiprintf_r+0x8ec>
80013470:	010d7693          	andi	a3,s10,16
80013474:	00448c13          	addi	s8,s1,4
80013478:	00068863          	beqz	a3,80013488 <_svfiprintf_r+0x3bc>
8001347c:	0004a883          	lw	a7,0(s1)
80013480:	41f8dc93          	srai	s9,a7,0x1f
80013484:	fadff06f          	j	80013430 <_svfiprintf_r+0x364>
80013488:	040d7693          	andi	a3,s10,64
8001348c:	0004a883          	lw	a7,0(s1)
80013490:	00068863          	beqz	a3,800134a0 <_svfiprintf_r+0x3d4>
80013494:	01089893          	slli	a7,a7,0x10
80013498:	4108d893          	srai	a7,a7,0x10
8001349c:	fe5ff06f          	j	80013480 <_svfiprintf_r+0x3b4>
800134a0:	200d7693          	andi	a3,s10,512
800134a4:	fc068ee3          	beqz	a3,80013480 <_svfiprintf_r+0x3b4>
800134a8:	01889893          	slli	a7,a7,0x18
800134ac:	4188d893          	srai	a7,a7,0x18
800134b0:	fd1ff06f          	j	80013480 <_svfiprintf_r+0x3b4>
800134b4:	020d7613          	andi	a2,s10,32
800134b8:	0004a683          	lw	a3,0(s1)
800134bc:	00448493          	addi	s1,s1,4
800134c0:	00060a63          	beqz	a2,800134d4 <_svfiprintf_r+0x408>
800134c4:	41fbd793          	srai	a5,s7,0x1f
800134c8:	0176a023          	sw	s7,0(a3)
800134cc:	00f6a223          	sw	a5,4(a3)
800134d0:	cc5ff06f          	j	80013194 <_svfiprintf_r+0xc8>
800134d4:	010d7613          	andi	a2,s10,16
800134d8:	00060663          	beqz	a2,800134e4 <_svfiprintf_r+0x418>
800134dc:	0176a023          	sw	s7,0(a3)
800134e0:	cb5ff06f          	j	80013194 <_svfiprintf_r+0xc8>
800134e4:	040d7613          	andi	a2,s10,64
800134e8:	00060663          	beqz	a2,800134f4 <_svfiprintf_r+0x428>
800134ec:	01769023          	sh	s7,0(a3)
800134f0:	ca5ff06f          	j	80013194 <_svfiprintf_r+0xc8>
800134f4:	200d7793          	andi	a5,s10,512
800134f8:	fe0782e3          	beqz	a5,800134dc <_svfiprintf_r+0x410>
800134fc:	01768023          	sb	s7,0(a3)
80013500:	c95ff06f          	j	80013194 <_svfiprintf_r+0xc8>
80013504:	010d6d13          	ori	s10,s10,16
80013508:	020d7693          	andi	a3,s10,32
8001350c:	04068663          	beqz	a3,80013558 <_svfiprintf_r+0x48c>
80013510:	00748493          	addi	s1,s1,7
80013514:	ff84f493          	andi	s1,s1,-8
80013518:	0004a883          	lw	a7,0(s1)
8001351c:	0044ac83          	lw	s9,4(s1)
80013520:	00848c13          	addi	s8,s1,8
80013524:	bffd7d13          	andi	s10,s10,-1025
80013528:	00000693          	li	a3,0
8001352c:	02010da3          	sb	zero,59(sp)
80013530:	fff00613          	li	a2,-1
80013534:	42c40863          	beq	s0,a2,80013964 <_svfiprintf_r+0x898>
80013538:	000d0613          	mv	a2,s10
8001353c:	0198e5b3          	or	a1,a7,s9
80013540:	f7fd7d13          	andi	s10,s10,-129
80013544:	42059063          	bnez	a1,80013964 <_svfiprintf_r+0x898>
80013548:	5a040463          	beqz	s0,80013af0 <_svfiprintf_r+0xa24>
8001354c:	00100613          	li	a2,1
80013550:	40c69e63          	bne	a3,a2,8001396c <_svfiprintf_r+0x8a0>
80013554:	f0dff06f          	j	80013460 <_svfiprintf_r+0x394>
80013558:	010d7693          	andi	a3,s10,16
8001355c:	00448c13          	addi	s8,s1,4
80013560:	00068663          	beqz	a3,8001356c <_svfiprintf_r+0x4a0>
80013564:	0004a883          	lw	a7,0(s1)
80013568:	0100006f          	j	80013578 <_svfiprintf_r+0x4ac>
8001356c:	040d7693          	andi	a3,s10,64
80013570:	00068863          	beqz	a3,80013580 <_svfiprintf_r+0x4b4>
80013574:	0004d883          	lhu	a7,0(s1)
80013578:	00000c93          	li	s9,0
8001357c:	fa9ff06f          	j	80013524 <_svfiprintf_r+0x458>
80013580:	200d7693          	andi	a3,s10,512
80013584:	fe0680e3          	beqz	a3,80013564 <_svfiprintf_r+0x498>
80013588:	0004c883          	lbu	a7,0(s1)
8001358c:	fedff06f          	j	80013578 <_svfiprintf_r+0x4ac>
80013590:	ffff86b7          	lui	a3,0xffff8
80013594:	8306c693          	xori	a3,a3,-2000
80013598:	02d11e23          	sh	a3,60(sp)
8001359c:	0004a883          	lw	a7,0(s1)
800135a0:	800216b7          	lui	a3,0x80021
800135a4:	d7c68793          	addi	a5,a3,-644 # 80020d7c <__stack+0xfffe42b0>
800135a8:	00448c13          	addi	s8,s1,4
800135ac:	00000c93          	li	s9,0
800135b0:	002d6d13          	ori	s10,s10,2
800135b4:	00f12423          	sw	a5,8(sp)
800135b8:	00200693          	li	a3,2
800135bc:	f71ff06f          	j	8001352c <_svfiprintf_r+0x460>
800135c0:	02010da3          	sb	zero,59(sp)
800135c4:	fff00693          	li	a3,-1
800135c8:	00e12023          	sw	a4,0(sp)
800135cc:	00448c13          	addi	s8,s1,4
800135d0:	0004a483          	lw	s1,0(s1)
800135d4:	2cd40463          	beq	s0,a3,8001389c <_svfiprintf_r+0x7d0>
800135d8:	00040613          	mv	a2,s0
800135dc:	00000593          	li	a1,0
800135e0:	00048513          	mv	a0,s1
800135e4:	f0cfa0ef          	jal	ra,8000dcf0 <memchr>
800135e8:	00000c93          	li	s9,0
800135ec:	00012703          	lw	a4,0(sp)
800135f0:	00050463          	beqz	a0,800135f8 <_svfiprintf_r+0x52c>
800135f4:	40950433          	sub	s0,a0,s1
800135f8:	01912023          	sw	s9,0(sp)
800135fc:	008cd463          	ble	s0,s9,80013604 <_svfiprintf_r+0x538>
80013600:	00812023          	sw	s0,0(sp)
80013604:	03b14683          	lbu	a3,59(sp)
80013608:	00068863          	beqz	a3,80013618 <_svfiprintf_r+0x54c>
8001360c:	00012783          	lw	a5,0(sp)
80013610:	00178793          	addi	a5,a5,1
80013614:	00f12023          	sw	a5,0(sp)
80013618:	002d7d93          	andi	s11,s10,2
8001361c:	000d8863          	beqz	s11,8001362c <_svfiprintf_r+0x560>
80013620:	00012783          	lw	a5,0(sp)
80013624:	00278793          	addi	a5,a5,2
80013628:	00f12023          	sw	a5,0(sp)
8001362c:	084d7793          	andi	a5,s10,132
80013630:	00f12c23          	sw	a5,24(sp)
80013634:	06079663          	bnez	a5,800136a0 <_svfiprintf_r+0x5d4>
80013638:	00012783          	lw	a5,0(sp)
8001363c:	40fa06b3          	sub	a3,s4,a5
80013640:	06d05063          	blez	a3,800136a0 <_svfiprintf_r+0x5d4>
80013644:	800217b7          	lui	a5,0x80021
80013648:	01000893          	li	a7,16
8001364c:	b9878813          	addi	a6,a5,-1128 # 80020b98 <__stack+0xfffe40cc>
80013650:	00700313          	li	t1,7
80013654:	04412603          	lw	a2,68(sp)
80013658:	01072023          	sw	a6,0(a4)
8001365c:	04812583          	lw	a1,72(sp)
80013660:	00160613          	addi	a2,a2,1
80013664:	00870513          	addi	a0,a4,8
80013668:	4ad8cc63          	blt	a7,a3,80013b20 <_svfiprintf_r+0xa54>
8001366c:	00d72223          	sw	a3,4(a4)
80013670:	00b686b3          	add	a3,a3,a1
80013674:	04d12423          	sw	a3,72(sp)
80013678:	04c12223          	sw	a2,68(sp)
8001367c:	00700693          	li	a3,7
80013680:	00050713          	mv	a4,a0
80013684:	00c6de63          	ble	a2,a3,800136a0 <_svfiprintf_r+0x5d4>
80013688:	04010613          	addi	a2,sp,64
8001368c:	00090593          	mv	a1,s2
80013690:	000a8513          	mv	a0,s5
80013694:	871ff0ef          	jal	ra,80012f04 <__ssprint_r>
80013698:	5c051263          	bnez	a0,80013c5c <_svfiprintf_r+0xb90>
8001369c:	000b0713          	mv	a4,s6
800136a0:	03b14683          	lbu	a3,59(sp)
800136a4:	04068863          	beqz	a3,800136f4 <_svfiprintf_r+0x628>
800136a8:	03b10613          	addi	a2,sp,59
800136ac:	00c72023          	sw	a2,0(a4)
800136b0:	00100613          	li	a2,1
800136b4:	04412683          	lw	a3,68(sp)
800136b8:	00c72223          	sw	a2,4(a4)
800136bc:	04812603          	lw	a2,72(sp)
800136c0:	00168693          	addi	a3,a3,1
800136c4:	04d12223          	sw	a3,68(sp)
800136c8:	00160613          	addi	a2,a2,1
800136cc:	04c12423          	sw	a2,72(sp)
800136d0:	00700613          	li	a2,7
800136d4:	00870713          	addi	a4,a4,8
800136d8:	00d65e63          	ble	a3,a2,800136f4 <_svfiprintf_r+0x628>
800136dc:	04010613          	addi	a2,sp,64
800136e0:	00090593          	mv	a1,s2
800136e4:	000a8513          	mv	a0,s5
800136e8:	81dff0ef          	jal	ra,80012f04 <__ssprint_r>
800136ec:	56051863          	bnez	a0,80013c5c <_svfiprintf_r+0xb90>
800136f0:	000b0713          	mv	a4,s6
800136f4:	040d8863          	beqz	s11,80013744 <_svfiprintf_r+0x678>
800136f8:	03c10613          	addi	a2,sp,60
800136fc:	00c72023          	sw	a2,0(a4)
80013700:	00200613          	li	a2,2
80013704:	04412683          	lw	a3,68(sp)
80013708:	00c72223          	sw	a2,4(a4)
8001370c:	04812603          	lw	a2,72(sp)
80013710:	00168693          	addi	a3,a3,1
80013714:	04d12223          	sw	a3,68(sp)
80013718:	00260613          	addi	a2,a2,2
8001371c:	04c12423          	sw	a2,72(sp)
80013720:	00700613          	li	a2,7
80013724:	00870713          	addi	a4,a4,8
80013728:	00d65e63          	ble	a3,a2,80013744 <_svfiprintf_r+0x678>
8001372c:	04010613          	addi	a2,sp,64
80013730:	00090593          	mv	a1,s2
80013734:	000a8513          	mv	a0,s5
80013738:	fccff0ef          	jal	ra,80012f04 <__ssprint_r>
8001373c:	52051063          	bnez	a0,80013c5c <_svfiprintf_r+0xb90>
80013740:	000b0713          	mv	a4,s6
80013744:	01812783          	lw	a5,24(sp)
80013748:	08000693          	li	a3,128
8001374c:	06d79463          	bne	a5,a3,800137b4 <_svfiprintf_r+0x6e8>
80013750:	00012783          	lw	a5,0(sp)
80013754:	40fa0db3          	sub	s11,s4,a5
80013758:	05b05e63          	blez	s11,800137b4 <_svfiprintf_r+0x6e8>
8001375c:	01000813          	li	a6,16
80013760:	00700893          	li	a7,7
80013764:	01012783          	lw	a5,16(sp)
80013768:	04412683          	lw	a3,68(sp)
8001376c:	04812603          	lw	a2,72(sp)
80013770:	00f72023          	sw	a5,0(a4)
80013774:	00168693          	addi	a3,a3,1
80013778:	00870593          	addi	a1,a4,8
8001377c:	3fb84e63          	blt	a6,s11,80013b78 <_svfiprintf_r+0xaac>
80013780:	01b72223          	sw	s11,4(a4)
80013784:	00cd8db3          	add	s11,s11,a2
80013788:	05b12423          	sw	s11,72(sp)
8001378c:	04d12223          	sw	a3,68(sp)
80013790:	00700613          	li	a2,7
80013794:	00058713          	mv	a4,a1
80013798:	00d65e63          	ble	a3,a2,800137b4 <_svfiprintf_r+0x6e8>
8001379c:	04010613          	addi	a2,sp,64
800137a0:	00090593          	mv	a1,s2
800137a4:	000a8513          	mv	a0,s5
800137a8:	f5cff0ef          	jal	ra,80012f04 <__ssprint_r>
800137ac:	4a051863          	bnez	a0,80013c5c <_svfiprintf_r+0xb90>
800137b0:	000b0713          	mv	a4,s6
800137b4:	408c8cb3          	sub	s9,s9,s0
800137b8:	05905e63          	blez	s9,80013814 <_svfiprintf_r+0x748>
800137bc:	01000d93          	li	s11,16
800137c0:	00700813          	li	a6,7
800137c4:	01012783          	lw	a5,16(sp)
800137c8:	04412683          	lw	a3,68(sp)
800137cc:	04812603          	lw	a2,72(sp)
800137d0:	00f72023          	sw	a5,0(a4)
800137d4:	00168693          	addi	a3,a3,1
800137d8:	00870593          	addi	a1,a4,8
800137dc:	3f9dc263          	blt	s11,s9,80013bc0 <_svfiprintf_r+0xaf4>
800137e0:	01972223          	sw	s9,4(a4)
800137e4:	00cc8cb3          	add	s9,s9,a2
800137e8:	05912423          	sw	s9,72(sp)
800137ec:	04d12223          	sw	a3,68(sp)
800137f0:	00700613          	li	a2,7
800137f4:	00058713          	mv	a4,a1
800137f8:	00d65e63          	ble	a3,a2,80013814 <_svfiprintf_r+0x748>
800137fc:	04010613          	addi	a2,sp,64
80013800:	00090593          	mv	a1,s2
80013804:	000a8513          	mv	a0,s5
80013808:	efcff0ef          	jal	ra,80012f04 <__ssprint_r>
8001380c:	44051863          	bnez	a0,80013c5c <_svfiprintf_r+0xb90>
80013810:	000b0713          	mv	a4,s6
80013814:	04812683          	lw	a3,72(sp)
80013818:	00872223          	sw	s0,4(a4)
8001381c:	00972023          	sw	s1,0(a4)
80013820:	00868433          	add	s0,a3,s0
80013824:	04412683          	lw	a3,68(sp)
80013828:	04812423          	sw	s0,72(sp)
8001382c:	00700613          	li	a2,7
80013830:	00168693          	addi	a3,a3,1
80013834:	04d12223          	sw	a3,68(sp)
80013838:	00870713          	addi	a4,a4,8
8001383c:	00d65e63          	ble	a3,a2,80013858 <_svfiprintf_r+0x78c>
80013840:	04010613          	addi	a2,sp,64
80013844:	00090593          	mv	a1,s2
80013848:	000a8513          	mv	a0,s5
8001384c:	eb8ff0ef          	jal	ra,80012f04 <__ssprint_r>
80013850:	40051663          	bnez	a0,80013c5c <_svfiprintf_r+0xb90>
80013854:	000b0713          	mv	a4,s6
80013858:	004d7793          	andi	a5,s10,4
8001385c:	3a079263          	bnez	a5,80013c00 <_svfiprintf_r+0xb34>
80013860:	00012783          	lw	a5,0(sp)
80013864:	00fa5463          	ble	a5,s4,8001386c <_svfiprintf_r+0x7a0>
80013868:	00078a13          	mv	s4,a5
8001386c:	04812783          	lw	a5,72(sp)
80013870:	014b8bb3          	add	s7,s7,s4
80013874:	00078c63          	beqz	a5,8001388c <_svfiprintf_r+0x7c0>
80013878:	04010613          	addi	a2,sp,64
8001387c:	00090593          	mv	a1,s2
80013880:	000a8513          	mv	a0,s5
80013884:	e80ff0ef          	jal	ra,80012f04 <__ssprint_r>
80013888:	3c051a63          	bnez	a0,80013c5c <_svfiprintf_r+0xb90>
8001388c:	04012223          	sw	zero,68(sp)
80013890:	000c0493          	mv	s1,s8
80013894:	000b0713          	mv	a4,s6
80013898:	8fdff06f          	j	80013194 <_svfiprintf_r+0xc8>
8001389c:	00048513          	mv	a0,s1
800138a0:	fb4fb0ef          	jal	ra,8000f054 <strlen>
800138a4:	00050413          	mv	s0,a0
800138a8:	00000c93          	li	s9,0
800138ac:	00012703          	lw	a4,0(sp)
800138b0:	d49ff06f          	j	800135f8 <_svfiprintf_r+0x52c>
800138b4:	010d6d13          	ori	s10,s10,16
800138b8:	020d7693          	andi	a3,s10,32
800138bc:	02068063          	beqz	a3,800138dc <_svfiprintf_r+0x810>
800138c0:	00748493          	addi	s1,s1,7
800138c4:	ff84f493          	andi	s1,s1,-8
800138c8:	0004a883          	lw	a7,0(s1)
800138cc:	0044ac83          	lw	s9,4(s1)
800138d0:	00848c13          	addi	s8,s1,8
800138d4:	00100693          	li	a3,1
800138d8:	c55ff06f          	j	8001352c <_svfiprintf_r+0x460>
800138dc:	010d7693          	andi	a3,s10,16
800138e0:	00448c13          	addi	s8,s1,4
800138e4:	00068663          	beqz	a3,800138f0 <_svfiprintf_r+0x824>
800138e8:	0004a883          	lw	a7,0(s1)
800138ec:	0100006f          	j	800138fc <_svfiprintf_r+0x830>
800138f0:	040d7693          	andi	a3,s10,64
800138f4:	00068863          	beqz	a3,80013904 <_svfiprintf_r+0x838>
800138f8:	0004d883          	lhu	a7,0(s1)
800138fc:	00000c93          	li	s9,0
80013900:	fd5ff06f          	j	800138d4 <_svfiprintf_r+0x808>
80013904:	200d7693          	andi	a3,s10,512
80013908:	fe0680e3          	beqz	a3,800138e8 <_svfiprintf_r+0x81c>
8001390c:	0004c883          	lbu	a7,0(s1)
80013910:	fedff06f          	j	800138fc <_svfiprintf_r+0x830>
80013914:	800216b7          	lui	a3,0x80021
80013918:	d7c68793          	addi	a5,a3,-644 # 80020d7c <__stack+0xfffe42b0>
8001391c:	93dff06f          	j	80013258 <_svfiprintf_r+0x18c>
80013920:	010d7693          	andi	a3,s10,16
80013924:	00448c13          	addi	s8,s1,4
80013928:	00068663          	beqz	a3,80013934 <_svfiprintf_r+0x868>
8001392c:	0004a883          	lw	a7,0(s1)
80013930:	0100006f          	j	80013940 <_svfiprintf_r+0x874>
80013934:	040d7693          	andi	a3,s10,64
80013938:	00068863          	beqz	a3,80013948 <_svfiprintf_r+0x87c>
8001393c:	0004d883          	lhu	a7,0(s1)
80013940:	00000c93          	li	s9,0
80013944:	935ff06f          	j	80013278 <_svfiprintf_r+0x1ac>
80013948:	200d7693          	andi	a3,s10,512
8001394c:	fe0680e3          	beqz	a3,8001392c <_svfiprintf_r+0x860>
80013950:	0004c883          	lbu	a7,0(s1)
80013954:	fedff06f          	j	80013940 <_svfiprintf_r+0x874>
80013958:	000d0613          	mv	a2,s10
8001395c:	00100693          	li	a3,1
80013960:	bddff06f          	j	8001353c <_svfiprintf_r+0x470>
80013964:	00100613          	li	a2,1
80013968:	aec686e3          	beq	a3,a2,80013454 <_svfiprintf_r+0x388>
8001396c:	00200613          	li	a2,2
80013970:	14c68463          	beq	a3,a2,80013ab8 <_svfiprintf_r+0x9ec>
80013974:	0f010693          	addi	a3,sp,240
80013978:	01dc9593          	slli	a1,s9,0x1d
8001397c:	0078f613          	andi	a2,a7,7
80013980:	0038d893          	srli	a7,a7,0x3
80013984:	03060613          	addi	a2,a2,48
80013988:	0115e8b3          	or	a7,a1,a7
8001398c:	003cdc93          	srli	s9,s9,0x3
80013990:	fec68fa3          	sb	a2,-1(a3)
80013994:	0198e5b3          	or	a1,a7,s9
80013998:	fff68493          	addi	s1,a3,-1
8001399c:	02059663          	bnez	a1,800139c8 <_svfiprintf_r+0x8fc>
800139a0:	001d7593          	andi	a1,s10,1
800139a4:	00058a63          	beqz	a1,800139b8 <_svfiprintf_r+0x8ec>
800139a8:	03000593          	li	a1,48
800139ac:	00b60663          	beq	a2,a1,800139b8 <_svfiprintf_r+0x8ec>
800139b0:	feb48fa3          	sb	a1,-1(s1)
800139b4:	ffe68493          	addi	s1,a3,-2
800139b8:	0f010793          	addi	a5,sp,240
800139bc:	00040c93          	mv	s9,s0
800139c0:	40978433          	sub	s0,a5,s1
800139c4:	c35ff06f          	j	800135f8 <_svfiprintf_r+0x52c>
800139c8:	00048693          	mv	a3,s1
800139cc:	fadff06f          	j	80013978 <_svfiprintf_r+0x8ac>
800139d0:	400d7793          	andi	a5,s10,1024
800139d4:	00000d93          	li	s11,0
800139d8:	0f010e13          	addi	t3,sp,240
800139dc:	00f12023          	sw	a5,0(sp)
800139e0:	00088513          	mv	a0,a7
800139e4:	00a00613          	li	a2,10
800139e8:	00000693          	li	a3,0
800139ec:	000c8593          	mv	a1,s9
800139f0:	02e12223          	sw	a4,36(sp)
800139f4:	fffe0493          	addi	s1,t3,-1
800139f8:	03c12023          	sw	t3,32(sp)
800139fc:	01112c23          	sw	a7,24(sp)
80013a00:	119000ef          	jal	ra,80014318 <__umoddi3>
80013a04:	02012e03          	lw	t3,32(sp)
80013a08:	00012783          	lw	a5,0(sp)
80013a0c:	03050513          	addi	a0,a0,48
80013a10:	feae0fa3          	sb	a0,-1(t3)
80013a14:	001d8d93          	addi	s11,s11,1
80013a18:	01812883          	lw	a7,24(sp)
80013a1c:	02412703          	lw	a4,36(sp)
80013a20:	06078263          	beqz	a5,80013a84 <_svfiprintf_r+0x9b8>
80013a24:	00412783          	lw	a5,4(sp)
80013a28:	0007c683          	lbu	a3,0(a5)
80013a2c:	05b69c63          	bne	a3,s11,80013a84 <_svfiprintf_r+0x9b8>
80013a30:	0ff00793          	li	a5,255
80013a34:	04fd8863          	beq	s11,a5,80013a84 <_svfiprintf_r+0x9b8>
80013a38:	000c9663          	bnez	s9,80013a44 <_svfiprintf_r+0x978>
80013a3c:	00900793          	li	a5,9
80013a40:	0517f263          	bleu	a7,a5,80013a84 <_svfiprintf_r+0x9b8>
80013a44:	00c12783          	lw	a5,12(sp)
80013a48:	01412583          	lw	a1,20(sp)
80013a4c:	03112023          	sw	a7,32(sp)
80013a50:	40f484b3          	sub	s1,s1,a5
80013a54:	00078613          	mv	a2,a5
80013a58:	00048513          	mv	a0,s1
80013a5c:	00e12c23          	sw	a4,24(sp)
80013a60:	e10fb0ef          	jal	ra,8000f070 <strncpy>
80013a64:	00412783          	lw	a5,4(sp)
80013a68:	00000d93          	li	s11,0
80013a6c:	01812703          	lw	a4,24(sp)
80013a70:	0017c683          	lbu	a3,1(a5)
80013a74:	02012883          	lw	a7,32(sp)
80013a78:	00068663          	beqz	a3,80013a84 <_svfiprintf_r+0x9b8>
80013a7c:	00178793          	addi	a5,a5,1
80013a80:	00f12223          	sw	a5,4(sp)
80013a84:	00088513          	mv	a0,a7
80013a88:	000c8593          	mv	a1,s9
80013a8c:	00a00613          	li	a2,10
80013a90:	00000693          	li	a3,0
80013a94:	00e12c23          	sw	a4,24(sp)
80013a98:	44c000ef          	jal	ra,80013ee4 <__udivdi3>
80013a9c:	00058c93          	mv	s9,a1
80013aa0:	00a5e5b3          	or	a1,a1,a0
80013aa4:	00050893          	mv	a7,a0
80013aa8:	01812703          	lw	a4,24(sp)
80013aac:	f00586e3          	beqz	a1,800139b8 <_svfiprintf_r+0x8ec>
80013ab0:	00048e13          	mv	t3,s1
80013ab4:	f2dff06f          	j	800139e0 <_svfiprintf_r+0x914>
80013ab8:	0f010493          	addi	s1,sp,240
80013abc:	00812783          	lw	a5,8(sp)
80013ac0:	00f8f693          	andi	a3,a7,15
80013ac4:	fff48493          	addi	s1,s1,-1
80013ac8:	00d786b3          	add	a3,a5,a3
80013acc:	0006c683          	lbu	a3,0(a3)
80013ad0:	0048d893          	srli	a7,a7,0x4
80013ad4:	00d48023          	sb	a3,0(s1)
80013ad8:	01cc9693          	slli	a3,s9,0x1c
80013adc:	0116e8b3          	or	a7,a3,a7
80013ae0:	004cdc93          	srli	s9,s9,0x4
80013ae4:	0198e6b3          	or	a3,a7,s9
80013ae8:	fc069ae3          	bnez	a3,80013abc <_svfiprintf_r+0x9f0>
80013aec:	ecdff06f          	j	800139b8 <_svfiprintf_r+0x8ec>
80013af0:	0f010493          	addi	s1,sp,240
80013af4:	ec0692e3          	bnez	a3,800139b8 <_svfiprintf_r+0x8ec>
80013af8:	00167613          	andi	a2,a2,1
80013afc:	ea060ee3          	beqz	a2,800139b8 <_svfiprintf_r+0x8ec>
80013b00:	03000693          	li	a3,48
80013b04:	0ed107a3          	sb	a3,239(sp)
80013b08:	961ff06f          	j	80013468 <_svfiprintf_r+0x39c>
80013b0c:	1c060a63          	beqz	a2,80013ce0 <_svfiprintf_r+0xc14>
80013b10:	08c10623          	sb	a2,140(sp)
80013b14:	02010da3          	sb	zero,59(sp)
80013b18:	00048c13          	mv	s8,s1
80013b1c:	8e5ff06f          	j	80013400 <_svfiprintf_r+0x334>
80013b20:	01058593          	addi	a1,a1,16
80013b24:	01172223          	sw	a7,4(a4)
80013b28:	04b12423          	sw	a1,72(sp)
80013b2c:	04c12223          	sw	a2,68(sp)
80013b30:	02c35e63          	ble	a2,t1,80013b6c <_svfiprintf_r+0xaa0>
80013b34:	04010613          	addi	a2,sp,64
80013b38:	00090593          	mv	a1,s2
80013b3c:	000a8513          	mv	a0,s5
80013b40:	02612623          	sw	t1,44(sp)
80013b44:	03012423          	sw	a6,40(sp)
80013b48:	03112223          	sw	a7,36(sp)
80013b4c:	02d12023          	sw	a3,32(sp)
80013b50:	bb4ff0ef          	jal	ra,80012f04 <__ssprint_r>
80013b54:	10051463          	bnez	a0,80013c5c <_svfiprintf_r+0xb90>
80013b58:	02c12303          	lw	t1,44(sp)
80013b5c:	02812803          	lw	a6,40(sp)
80013b60:	02412883          	lw	a7,36(sp)
80013b64:	02012683          	lw	a3,32(sp)
80013b68:	000b0513          	mv	a0,s6
80013b6c:	ff068693          	addi	a3,a3,-16
80013b70:	00050713          	mv	a4,a0
80013b74:	ae1ff06f          	j	80013654 <_svfiprintf_r+0x588>
80013b78:	01060613          	addi	a2,a2,16
80013b7c:	01072223          	sw	a6,4(a4)
80013b80:	04c12423          	sw	a2,72(sp)
80013b84:	04d12223          	sw	a3,68(sp)
80013b88:	02d8d663          	ble	a3,a7,80013bb4 <_svfiprintf_r+0xae8>
80013b8c:	04010613          	addi	a2,sp,64
80013b90:	00090593          	mv	a1,s2
80013b94:	000a8513          	mv	a0,s5
80013b98:	03112023          	sw	a7,32(sp)
80013b9c:	01012c23          	sw	a6,24(sp)
80013ba0:	b64ff0ef          	jal	ra,80012f04 <__ssprint_r>
80013ba4:	0a051c63          	bnez	a0,80013c5c <_svfiprintf_r+0xb90>
80013ba8:	02012883          	lw	a7,32(sp)
80013bac:	01812803          	lw	a6,24(sp)
80013bb0:	000b0593          	mv	a1,s6
80013bb4:	ff0d8d93          	addi	s11,s11,-16
80013bb8:	00058713          	mv	a4,a1
80013bbc:	ba9ff06f          	j	80013764 <_svfiprintf_r+0x698>
80013bc0:	01060613          	addi	a2,a2,16
80013bc4:	01b72223          	sw	s11,4(a4)
80013bc8:	04c12423          	sw	a2,72(sp)
80013bcc:	04d12223          	sw	a3,68(sp)
80013bd0:	02d85263          	ble	a3,a6,80013bf4 <_svfiprintf_r+0xb28>
80013bd4:	04010613          	addi	a2,sp,64
80013bd8:	00090593          	mv	a1,s2
80013bdc:	000a8513          	mv	a0,s5
80013be0:	01012c23          	sw	a6,24(sp)
80013be4:	b20ff0ef          	jal	ra,80012f04 <__ssprint_r>
80013be8:	06051a63          	bnez	a0,80013c5c <_svfiprintf_r+0xb90>
80013bec:	01812803          	lw	a6,24(sp)
80013bf0:	000b0593          	mv	a1,s6
80013bf4:	ff0c8c93          	addi	s9,s9,-16
80013bf8:	00058713          	mv	a4,a1
80013bfc:	bc9ff06f          	j	800137c4 <_svfiprintf_r+0x6f8>
80013c00:	00012783          	lw	a5,0(sp)
80013c04:	40fa0433          	sub	s0,s4,a5
80013c08:	c4805ce3          	blez	s0,80013860 <_svfiprintf_r+0x794>
80013c0c:	800217b7          	lui	a5,0x80021
80013c10:	01000c93          	li	s9,16
80013c14:	b9878493          	addi	s1,a5,-1128 # 80020b98 <__stack+0xfffe40cc>
80013c18:	00700d93          	li	s11,7
80013c1c:	04412783          	lw	a5,68(sp)
80013c20:	00972023          	sw	s1,0(a4)
80013c24:	04812683          	lw	a3,72(sp)
80013c28:	00178793          	addi	a5,a5,1
80013c2c:	068cce63          	blt	s9,s0,80013ca8 <_svfiprintf_r+0xbdc>
80013c30:	00872223          	sw	s0,4(a4)
80013c34:	00d40433          	add	s0,s0,a3
80013c38:	04812423          	sw	s0,72(sp)
80013c3c:	04f12223          	sw	a5,68(sp)
80013c40:	00700713          	li	a4,7
80013c44:	c0f75ee3          	ble	a5,a4,80013860 <_svfiprintf_r+0x794>
80013c48:	04010613          	addi	a2,sp,64
80013c4c:	00090593          	mv	a1,s2
80013c50:	000a8513          	mv	a0,s5
80013c54:	ab0ff0ef          	jal	ra,80012f04 <__ssprint_r>
80013c58:	c00504e3          	beqz	a0,80013860 <_svfiprintf_r+0x794>
80013c5c:	00c95783          	lhu	a5,12(s2)
80013c60:	0407f793          	andi	a5,a5,64
80013c64:	ce079063          	bnez	a5,80013144 <_svfiprintf_r+0x78>
80013c68:	12c12083          	lw	ra,300(sp)
80013c6c:	12812403          	lw	s0,296(sp)
80013c70:	000b8513          	mv	a0,s7
80013c74:	12412483          	lw	s1,292(sp)
80013c78:	12012903          	lw	s2,288(sp)
80013c7c:	11c12983          	lw	s3,284(sp)
80013c80:	11812a03          	lw	s4,280(sp)
80013c84:	11412a83          	lw	s5,276(sp)
80013c88:	11012b03          	lw	s6,272(sp)
80013c8c:	10c12b83          	lw	s7,268(sp)
80013c90:	10812c03          	lw	s8,264(sp)
80013c94:	10412c83          	lw	s9,260(sp)
80013c98:	10012d03          	lw	s10,256(sp)
80013c9c:	0fc12d83          	lw	s11,252(sp)
80013ca0:	13010113          	addi	sp,sp,304
80013ca4:	00008067          	ret
80013ca8:	01068693          	addi	a3,a3,16
80013cac:	01972223          	sw	s9,4(a4)
80013cb0:	04d12423          	sw	a3,72(sp)
80013cb4:	04f12223          	sw	a5,68(sp)
80013cb8:	00870713          	addi	a4,a4,8
80013cbc:	00fdde63          	ble	a5,s11,80013cd8 <_svfiprintf_r+0xc0c>
80013cc0:	04010613          	addi	a2,sp,64
80013cc4:	00090593          	mv	a1,s2
80013cc8:	000a8513          	mv	a0,s5
80013ccc:	a38ff0ef          	jal	ra,80012f04 <__ssprint_r>
80013cd0:	f80516e3          	bnez	a0,80013c5c <_svfiprintf_r+0xb90>
80013cd4:	000b0713          	mv	a4,s6
80013cd8:	ff040413          	addi	s0,s0,-16
80013cdc:	f41ff06f          	j	80013c1c <_svfiprintf_r+0xb50>
80013ce0:	04812783          	lw	a5,72(sp)
80013ce4:	f6078ce3          	beqz	a5,80013c5c <_svfiprintf_r+0xb90>
80013ce8:	04010613          	addi	a2,sp,64
80013cec:	00090593          	mv	a1,s2
80013cf0:	000a8513          	mv	a0,s5
80013cf4:	a10ff0ef          	jal	ra,80012f04 <__ssprint_r>
80013cf8:	f65ff06f          	j	80013c5c <_svfiprintf_r+0xb90>

80013cfc <__swbuf_r>:
80013cfc:	fe010113          	addi	sp,sp,-32
80013d00:	00812c23          	sw	s0,24(sp)
80013d04:	00912a23          	sw	s1,20(sp)
80013d08:	01212823          	sw	s2,16(sp)
80013d0c:	00112e23          	sw	ra,28(sp)
80013d10:	01312623          	sw	s3,12(sp)
80013d14:	00050913          	mv	s2,a0
80013d18:	00058493          	mv	s1,a1
80013d1c:	00060413          	mv	s0,a2
80013d20:	00050863          	beqz	a0,80013d30 <__swbuf_r+0x34>
80013d24:	03852783          	lw	a5,56(a0)
80013d28:	00079463          	bnez	a5,80013d30 <__swbuf_r+0x34>
80013d2c:	fb1f60ef          	jal	ra,8000acdc <__sinit>
80013d30:	01842783          	lw	a5,24(s0)
80013d34:	00f42423          	sw	a5,8(s0)
80013d38:	00c45783          	lhu	a5,12(s0)
80013d3c:	0087f793          	andi	a5,a5,8
80013d40:	08078a63          	beqz	a5,80013dd4 <__swbuf_r+0xd8>
80013d44:	01042783          	lw	a5,16(s0)
80013d48:	08078663          	beqz	a5,80013dd4 <__swbuf_r+0xd8>
80013d4c:	00c41783          	lh	a5,12(s0)
80013d50:	0ff4f993          	andi	s3,s1,255
80013d54:	0ff4f493          	andi	s1,s1,255
80013d58:	01279713          	slli	a4,a5,0x12
80013d5c:	0a075663          	bgez	a4,80013e08 <__swbuf_r+0x10c>
80013d60:	01042783          	lw	a5,16(s0)
80013d64:	00042503          	lw	a0,0(s0)
80013d68:	40f50533          	sub	a0,a0,a5
80013d6c:	01442783          	lw	a5,20(s0)
80013d70:	00f54a63          	blt	a0,a5,80013d84 <__swbuf_r+0x88>
80013d74:	00040593          	mv	a1,s0
80013d78:	00090513          	mv	a0,s2
80013d7c:	dc5f60ef          	jal	ra,8000ab40 <_fflush_r>
80013d80:	06051263          	bnez	a0,80013de4 <__swbuf_r+0xe8>
80013d84:	00842783          	lw	a5,8(s0)
80013d88:	00150513          	addi	a0,a0,1
80013d8c:	fff78793          	addi	a5,a5,-1
80013d90:	00f42423          	sw	a5,8(s0)
80013d94:	00042783          	lw	a5,0(s0)
80013d98:	00178713          	addi	a4,a5,1
80013d9c:	00e42023          	sw	a4,0(s0)
80013da0:	01378023          	sb	s3,0(a5)
80013da4:	01442783          	lw	a5,20(s0)
80013da8:	00a78c63          	beq	a5,a0,80013dc0 <__swbuf_r+0xc4>
80013dac:	00c45783          	lhu	a5,12(s0)
80013db0:	0017f793          	andi	a5,a5,1
80013db4:	02078a63          	beqz	a5,80013de8 <__swbuf_r+0xec>
80013db8:	00a00793          	li	a5,10
80013dbc:	02f49663          	bne	s1,a5,80013de8 <__swbuf_r+0xec>
80013dc0:	00040593          	mv	a1,s0
80013dc4:	00090513          	mv	a0,s2
80013dc8:	d79f60ef          	jal	ra,8000ab40 <_fflush_r>
80013dcc:	00050e63          	beqz	a0,80013de8 <__swbuf_r+0xec>
80013dd0:	0140006f          	j	80013de4 <__swbuf_r+0xe8>
80013dd4:	00040593          	mv	a1,s0
80013dd8:	00090513          	mv	a0,s2
80013ddc:	a25f60ef          	jal	ra,8000a800 <__swsetup_r>
80013de0:	f60506e3          	beqz	a0,80013d4c <__swbuf_r+0x50>
80013de4:	fff00493          	li	s1,-1
80013de8:	01c12083          	lw	ra,28(sp)
80013dec:	01812403          	lw	s0,24(sp)
80013df0:	00048513          	mv	a0,s1
80013df4:	01012903          	lw	s2,16(sp)
80013df8:	01412483          	lw	s1,20(sp)
80013dfc:	00c12983          	lw	s3,12(sp)
80013e00:	02010113          	addi	sp,sp,32
80013e04:	00008067          	ret
80013e08:	00002737          	lui	a4,0x2
80013e0c:	00e7e7b3          	or	a5,a5,a4
80013e10:	00f41623          	sh	a5,12(s0)
80013e14:	06442783          	lw	a5,100(s0)
80013e18:	ffffe737          	lui	a4,0xffffe
80013e1c:	fff70713          	addi	a4,a4,-1 # ffffdfff <__stack+0x7ffc1533>
80013e20:	00e7f7b3          	and	a5,a5,a4
80013e24:	06f42223          	sw	a5,100(s0)
80013e28:	f39ff06f          	j	80013d60 <__swbuf_r+0x64>

80013e2c <__swbuf>:
80013e2c:	800217b7          	lui	a5,0x80021
80013e30:	00058613          	mv	a2,a1
80013e34:	00050593          	mv	a1,a0
80013e38:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
80013e3c:	ec1ff06f          	j	80013cfc <__swbuf_r>

80013e40 <_wcrtomb_r>:
80013e40:	800217b7          	lui	a5,0x80021
80013e44:	e647a783          	lw	a5,-412(a5) # 80020e64 <__stack+0xfffe4398>
80013e48:	fe010113          	addi	sp,sp,-32
80013e4c:	00812c23          	sw	s0,24(sp)
80013e50:	00912a23          	sw	s1,20(sp)
80013e54:	00112e23          	sw	ra,28(sp)
80013e58:	00050413          	mv	s0,a0
80013e5c:	00068493          	mv	s1,a3
80013e60:	0347a783          	lw	a5,52(a5)
80013e64:	04059863          	bnez	a1,80013eb4 <_wcrtomb_r+0x74>
80013e68:	00079663          	bnez	a5,80013e74 <_wcrtomb_r+0x34>
80013e6c:	800217b7          	lui	a5,0x80021
80013e70:	29878793          	addi	a5,a5,664 # 80021298 <__stack+0xfffe47cc>
80013e74:	0e07a783          	lw	a5,224(a5)
80013e78:	00048693          	mv	a3,s1
80013e7c:	00000613          	li	a2,0
80013e80:	00410593          	addi	a1,sp,4
80013e84:	00040513          	mv	a0,s0
80013e88:	000780e7          	jalr	a5
80013e8c:	fff00793          	li	a5,-1
80013e90:	00f51863          	bne	a0,a5,80013ea0 <_wcrtomb_r+0x60>
80013e94:	0004a023          	sw	zero,0(s1)
80013e98:	08a00793          	li	a5,138
80013e9c:	00f42023          	sw	a5,0(s0)
80013ea0:	01c12083          	lw	ra,28(sp)
80013ea4:	01812403          	lw	s0,24(sp)
80013ea8:	01412483          	lw	s1,20(sp)
80013eac:	02010113          	addi	sp,sp,32
80013eb0:	00008067          	ret
80013eb4:	00079663          	bnez	a5,80013ec0 <_wcrtomb_r+0x80>
80013eb8:	800217b7          	lui	a5,0x80021
80013ebc:	29878793          	addi	a5,a5,664 # 80021298 <__stack+0xfffe47cc>
80013ec0:	0e07a783          	lw	a5,224(a5)
80013ec4:	00048693          	mv	a3,s1
80013ec8:	fbdff06f          	j	80013e84 <_wcrtomb_r+0x44>

80013ecc <wcrtomb>:
80013ecc:	800217b7          	lui	a5,0x80021
80013ed0:	00060693          	mv	a3,a2
80013ed4:	00058613          	mv	a2,a1
80013ed8:	00050593          	mv	a1,a0
80013edc:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
80013ee0:	f61ff06f          	j	80013e40 <_wcrtomb_r>

80013ee4 <__udivdi3>:
#endif

#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
80013ee4:	00058793          	mv	a5,a1
  d0 = dd.s.low;
80013ee8:	00060813          	mv	a6,a2
  d1 = dd.s.high;
80013eec:	00068893          	mv	a7,a3
  n0 = nn.s.low;
80013ef0:	00050313          	mv	t1,a0
  if (d1 == 0)
80013ef4:	28069663          	bnez	a3,80014180 <__udivdi3+0x29c>
80013ef8:	80021737          	lui	a4,0x80021
80013efc:	c6c70713          	addi	a4,a4,-916 # 80020c6c <__stack+0xfffe41a0>
      if (d0 > n1)
80013f00:	0ec5f663          	bleu	a2,a1,80013fec <__udivdi3+0x108>
	  count_leading_zeros (bm, d0);
80013f04:	000106b7          	lui	a3,0x10
80013f08:	0cd67863          	bleu	a3,a2,80013fd8 <__udivdi3+0xf4>
80013f0c:	0ff00693          	li	a3,255
80013f10:	00c6b6b3          	sltu	a3,a3,a2
80013f14:	00369693          	slli	a3,a3,0x3
80013f18:	00d658b3          	srl	a7,a2,a3
80013f1c:	01170733          	add	a4,a4,a7
80013f20:	00074703          	lbu	a4,0(a4)
80013f24:	00d706b3          	add	a3,a4,a3
80013f28:	02000713          	li	a4,32
80013f2c:	40d70733          	sub	a4,a4,a3
	  if (bm != 0)
80013f30:	00070c63          	beqz	a4,80013f48 <__udivdi3+0x64>
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
80013f34:	00e797b3          	sll	a5,a5,a4
80013f38:	00d556b3          	srl	a3,a0,a3
	      d0 = d0 << bm;
80013f3c:	00e61833          	sll	a6,a2,a4
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
80013f40:	00f6e5b3          	or	a1,a3,a5
	      n0 = n0 << bm;
80013f44:	00e51333          	sll	t1,a0,a4
	  udiv_qrnnd (q0, n0, n1, n0, d0);
80013f48:	01085513          	srli	a0,a6,0x10
80013f4c:	02a5d7b3          	divu	a5,a1,a0
80013f50:	01081613          	slli	a2,a6,0x10
80013f54:	01065613          	srli	a2,a2,0x10
80013f58:	01035693          	srli	a3,t1,0x10
80013f5c:	02a5f733          	remu	a4,a1,a0
80013f60:	02f605b3          	mul	a1,a2,a5
80013f64:	01071713          	slli	a4,a4,0x10
80013f68:	00d766b3          	or	a3,a4,a3
80013f6c:	00078713          	mv	a4,a5
80013f70:	00b6fe63          	bleu	a1,a3,80013f8c <__udivdi3+0xa8>
80013f74:	010686b3          	add	a3,a3,a6
80013f78:	fff78713          	addi	a4,a5,-1
80013f7c:	0106e863          	bltu	a3,a6,80013f8c <__udivdi3+0xa8>
80013f80:	00b6f663          	bleu	a1,a3,80013f8c <__udivdi3+0xa8>
80013f84:	ffe78713          	addi	a4,a5,-2
80013f88:	010686b3          	add	a3,a3,a6
80013f8c:	40b686b3          	sub	a3,a3,a1
80013f90:	02a6f7b3          	remu	a5,a3,a0
80013f94:	01031313          	slli	t1,t1,0x10
80013f98:	01035313          	srli	t1,t1,0x10
80013f9c:	02a6d6b3          	divu	a3,a3,a0
80013fa0:	01079793          	slli	a5,a5,0x10
80013fa4:	0067e333          	or	t1,a5,t1
80013fa8:	02d605b3          	mul	a1,a2,a3
80013fac:	00068513          	mv	a0,a3
80013fb0:	00b37c63          	bleu	a1,t1,80013fc8 <__udivdi3+0xe4>
80013fb4:	00680333          	add	t1,a6,t1
80013fb8:	fff68513          	addi	a0,a3,-1 # ffff <_HEAP_SIZE+0xefff>
80013fbc:	01036663          	bltu	t1,a6,80013fc8 <__udivdi3+0xe4>
80013fc0:	00b37463          	bleu	a1,t1,80013fc8 <__udivdi3+0xe4>
80013fc4:	ffe68513          	addi	a0,a3,-2
80013fc8:	01071713          	slli	a4,a4,0x10
80013fcc:	00a76733          	or	a4,a4,a0
	      q1 = 0;
80013fd0:	00000593          	li	a1,0
80013fd4:	0e40006f          	j	800140b8 <__udivdi3+0x1d4>
	  count_leading_zeros (bm, d0);
80013fd8:	010008b7          	lui	a7,0x1000
80013fdc:	01000693          	li	a3,16
80013fe0:	f3166ce3          	bltu	a2,a7,80013f18 <__udivdi3+0x34>
80013fe4:	01800693          	li	a3,24
80013fe8:	f31ff06f          	j	80013f18 <__udivdi3+0x34>
	  if (d0 == 0)
80013fec:	00061663          	bnez	a2,80013ff8 <__udivdi3+0x114>
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
80013ff0:	00100693          	li	a3,1
80013ff4:	02c6d833          	divu	a6,a3,a2
	  count_leading_zeros (bm, d0);
80013ff8:	000106b7          	lui	a3,0x10
80013ffc:	0cd87263          	bleu	a3,a6,800140c0 <__udivdi3+0x1dc>
80014000:	0ff00693          	li	a3,255
80014004:	0106f463          	bleu	a6,a3,8001400c <__udivdi3+0x128>
80014008:	00800893          	li	a7,8
8001400c:	011856b3          	srl	a3,a6,a7
80014010:	00d70733          	add	a4,a4,a3
80014014:	00074683          	lbu	a3,0(a4)
80014018:	02000713          	li	a4,32
8001401c:	011686b3          	add	a3,a3,a7
80014020:	40d70733          	sub	a4,a4,a3
	  if (bm == 0)
80014024:	0a071863          	bnez	a4,800140d4 <__udivdi3+0x1f0>
	      n1 -= d0;
80014028:	410787b3          	sub	a5,a5,a6
	      q1 = 1;
8001402c:	00100593          	li	a1,1
	  udiv_qrnnd (q0, n0, n1, n0, d0);
80014030:	01085613          	srli	a2,a6,0x10
80014034:	01081893          	slli	a7,a6,0x10
80014038:	0108d893          	srli	a7,a7,0x10
8001403c:	01035693          	srli	a3,t1,0x10
80014040:	02c7f733          	remu	a4,a5,a2
80014044:	02c7d7b3          	divu	a5,a5,a2
80014048:	01071713          	slli	a4,a4,0x10
8001404c:	00d766b3          	or	a3,a4,a3
80014050:	02f88533          	mul	a0,a7,a5
80014054:	00078713          	mv	a4,a5
80014058:	00a6fe63          	bleu	a0,a3,80014074 <__udivdi3+0x190>
8001405c:	010686b3          	add	a3,a3,a6
80014060:	fff78713          	addi	a4,a5,-1
80014064:	0106e863          	bltu	a3,a6,80014074 <__udivdi3+0x190>
80014068:	00a6f663          	bleu	a0,a3,80014074 <__udivdi3+0x190>
8001406c:	ffe78713          	addi	a4,a5,-2
80014070:	010686b3          	add	a3,a3,a6
80014074:	40a686b3          	sub	a3,a3,a0
80014078:	02c6f7b3          	remu	a5,a3,a2
8001407c:	01031313          	slli	t1,t1,0x10
80014080:	01035313          	srli	t1,t1,0x10
80014084:	02c6d6b3          	divu	a3,a3,a2
80014088:	01079793          	slli	a5,a5,0x10
8001408c:	0067e333          	or	t1,a5,t1
80014090:	02d888b3          	mul	a7,a7,a3
80014094:	00068513          	mv	a0,a3
80014098:	01137c63          	bleu	a7,t1,800140b0 <__udivdi3+0x1cc>
8001409c:	00680333          	add	t1,a6,t1
800140a0:	fff68513          	addi	a0,a3,-1 # ffff <_HEAP_SIZE+0xefff>
800140a4:	01036663          	bltu	t1,a6,800140b0 <__udivdi3+0x1cc>
800140a8:	01137463          	bleu	a7,t1,800140b0 <__udivdi3+0x1cc>
800140ac:	ffe68513          	addi	a0,a3,-2
800140b0:	01071713          	slli	a4,a4,0x10
800140b4:	00a76733          	or	a4,a4,a0
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
800140b8:	00070513          	mv	a0,a4
800140bc:	00008067          	ret
	  count_leading_zeros (bm, d0);
800140c0:	010006b7          	lui	a3,0x1000
800140c4:	01000893          	li	a7,16
800140c8:	f4d862e3          	bltu	a6,a3,8001400c <__udivdi3+0x128>
800140cc:	01800893          	li	a7,24
800140d0:	f3dff06f          	j	8001400c <__udivdi3+0x128>
	      d0 = d0 << bm;
800140d4:	00e81833          	sll	a6,a6,a4
	      n2 = n1 >> b;
800140d8:	00d7d5b3          	srl	a1,a5,a3
	      n0 = n0 << bm;
800140dc:	00e51333          	sll	t1,a0,a4
	      n1 = (n1 << bm) | (n0 >> b);
800140e0:	00d556b3          	srl	a3,a0,a3
	      udiv_qrnnd (q1, n1, n2, n1, d0);
800140e4:	01085513          	srli	a0,a6,0x10
	      n1 = (n1 << bm) | (n0 >> b);
800140e8:	00e797b3          	sll	a5,a5,a4
	      udiv_qrnnd (q1, n1, n2, n1, d0);
800140ec:	02a5f733          	remu	a4,a1,a0
	      n1 = (n1 << bm) | (n0 >> b);
800140f0:	00f6e8b3          	or	a7,a3,a5
	      udiv_qrnnd (q1, n1, n2, n1, d0);
800140f4:	01081793          	slli	a5,a6,0x10
800140f8:	0107d793          	srli	a5,a5,0x10
800140fc:	0108d613          	srli	a2,a7,0x10
80014100:	02a5d5b3          	divu	a1,a1,a0
80014104:	01071713          	slli	a4,a4,0x10
80014108:	00c76733          	or	a4,a4,a2
8001410c:	02b786b3          	mul	a3,a5,a1
80014110:	00058613          	mv	a2,a1
80014114:	00d77e63          	bleu	a3,a4,80014130 <__udivdi3+0x24c>
80014118:	01070733          	add	a4,a4,a6
8001411c:	fff58613          	addi	a2,a1,-1
80014120:	01076863          	bltu	a4,a6,80014130 <__udivdi3+0x24c>
80014124:	00d77663          	bleu	a3,a4,80014130 <__udivdi3+0x24c>
80014128:	ffe58613          	addi	a2,a1,-2
8001412c:	01070733          	add	a4,a4,a6
80014130:	40d706b3          	sub	a3,a4,a3
80014134:	02a6f733          	remu	a4,a3,a0
80014138:	01089893          	slli	a7,a7,0x10
8001413c:	0108d893          	srli	a7,a7,0x10
80014140:	02a6d6b3          	divu	a3,a3,a0
80014144:	01071713          	slli	a4,a4,0x10
80014148:	02d785b3          	mul	a1,a5,a3
8001414c:	011767b3          	or	a5,a4,a7
80014150:	00068713          	mv	a4,a3
80014154:	00b7fe63          	bleu	a1,a5,80014170 <__udivdi3+0x28c>
80014158:	010787b3          	add	a5,a5,a6
8001415c:	fff68713          	addi	a4,a3,-1 # ffffff <_HEAP_SIZE+0xffefff>
80014160:	0107e863          	bltu	a5,a6,80014170 <__udivdi3+0x28c>
80014164:	00b7f663          	bleu	a1,a5,80014170 <__udivdi3+0x28c>
80014168:	ffe68713          	addi	a4,a3,-2
8001416c:	010787b3          	add	a5,a5,a6
80014170:	40b787b3          	sub	a5,a5,a1
80014174:	01061593          	slli	a1,a2,0x10
80014178:	00e5e5b3          	or	a1,a1,a4
8001417c:	eb5ff06f          	j	80014030 <__udivdi3+0x14c>
      if (d1 > n1)
80014180:	18d5e663          	bltu	a1,a3,8001430c <__udivdi3+0x428>
	  count_leading_zeros (bm, d1);
80014184:	00010737          	lui	a4,0x10
80014188:	04e6f463          	bleu	a4,a3,800141d0 <__udivdi3+0x2ec>
8001418c:	0ff00813          	li	a6,255
80014190:	00d83733          	sltu	a4,a6,a3
80014194:	00371713          	slli	a4,a4,0x3
80014198:	80021837          	lui	a6,0x80021
8001419c:	c6c80813          	addi	a6,a6,-916 # 80020c6c <__stack+0xfffe41a0>
800141a0:	00e6d5b3          	srl	a1,a3,a4
800141a4:	010585b3          	add	a1,a1,a6
800141a8:	0005c803          	lbu	a6,0(a1)
800141ac:	02000593          	li	a1,32
800141b0:	00e80833          	add	a6,a6,a4
800141b4:	410585b3          	sub	a1,a1,a6
	  if (bm == 0)
800141b8:	02059663          	bnez	a1,800141e4 <__udivdi3+0x300>
		  q0 = 1;
800141bc:	00100713          	li	a4,1
	      if (n1 > d1 || n0 >= d0)
800141c0:	eef6ece3          	bltu	a3,a5,800140b8 <__udivdi3+0x1d4>
800141c4:	00c53533          	sltu	a0,a0,a2
800141c8:	00154713          	xori	a4,a0,1
800141cc:	eedff06f          	j	800140b8 <__udivdi3+0x1d4>
	  count_leading_zeros (bm, d1);
800141d0:	010005b7          	lui	a1,0x1000
800141d4:	01000713          	li	a4,16
800141d8:	fcb6e0e3          	bltu	a3,a1,80014198 <__udivdi3+0x2b4>
800141dc:	01800713          	li	a4,24
800141e0:	fb9ff06f          	j	80014198 <__udivdi3+0x2b4>
	      d1 = (d1 << bm) | (d0 >> b);
800141e4:	01065733          	srl	a4,a2,a6
800141e8:	00b696b3          	sll	a3,a3,a1
800141ec:	00d766b3          	or	a3,a4,a3
	      udiv_qrnnd (q0, n1, n2, n1, d1);
800141f0:	0106de93          	srli	t4,a3,0x10
	      n2 = n1 >> b;
800141f4:	0107d733          	srl	a4,a5,a6
	      udiv_qrnnd (q0, n1, n2, n1, d1);
800141f8:	03d778b3          	remu	a7,a4,t4
	      n1 = (n1 << bm) | (n0 >> b);
800141fc:	00b797b3          	sll	a5,a5,a1
80014200:	01055833          	srl	a6,a0,a6
80014204:	00f86333          	or	t1,a6,a5
	      udiv_qrnnd (q0, n1, n2, n1, d1);
80014208:	01069793          	slli	a5,a3,0x10
8001420c:	0107d793          	srli	a5,a5,0x10
80014210:	01035813          	srli	a6,t1,0x10
	      d0 = d0 << bm;
80014214:	00b61633          	sll	a2,a2,a1
	      udiv_qrnnd (q0, n1, n2, n1, d1);
80014218:	03d75733          	divu	a4,a4,t4
8001421c:	01089893          	slli	a7,a7,0x10
80014220:	0108e833          	or	a6,a7,a6
80014224:	02e78f33          	mul	t5,a5,a4
80014228:	00070e13          	mv	t3,a4
8001422c:	01e87e63          	bleu	t5,a6,80014248 <__udivdi3+0x364>
80014230:	00d80833          	add	a6,a6,a3
80014234:	fff70e13          	addi	t3,a4,-1 # ffff <_HEAP_SIZE+0xefff>
80014238:	00d86863          	bltu	a6,a3,80014248 <__udivdi3+0x364>
8001423c:	01e87663          	bleu	t5,a6,80014248 <__udivdi3+0x364>
80014240:	ffe70e13          	addi	t3,a4,-2
80014244:	00d80833          	add	a6,a6,a3
80014248:	41e80833          	sub	a6,a6,t5
8001424c:	03d878b3          	remu	a7,a6,t4
80014250:	03d85833          	divu	a6,a6,t4
80014254:	01089893          	slli	a7,a7,0x10
80014258:	03078eb3          	mul	t4,a5,a6
8001425c:	01031793          	slli	a5,t1,0x10
80014260:	0107d793          	srli	a5,a5,0x10
80014264:	00f8e7b3          	or	a5,a7,a5
80014268:	00080713          	mv	a4,a6
8001426c:	01d7fe63          	bleu	t4,a5,80014288 <__udivdi3+0x3a4>
80014270:	00d787b3          	add	a5,a5,a3
80014274:	fff80713          	addi	a4,a6,-1
80014278:	00d7e863          	bltu	a5,a3,80014288 <__udivdi3+0x3a4>
8001427c:	01d7f663          	bleu	t4,a5,80014288 <__udivdi3+0x3a4>
80014280:	ffe80713          	addi	a4,a6,-2
80014284:	00d787b3          	add	a5,a5,a3
80014288:	010e1e13          	slli	t3,t3,0x10
8001428c:	41d787b3          	sub	a5,a5,t4
	      umul_ppmm (m1, m0, q0, d0);
80014290:	00010eb7          	lui	t4,0x10
	      udiv_qrnnd (q0, n1, n2, n1, d1);
80014294:	00ee6733          	or	a4,t3,a4
	      umul_ppmm (m1, m0, q0, d0);
80014298:	fffe8813          	addi	a6,t4,-1 # ffff <_HEAP_SIZE+0xefff>
8001429c:	01077333          	and	t1,a4,a6
800142a0:	01075893          	srli	a7,a4,0x10
800142a4:	01067833          	and	a6,a2,a6
800142a8:	01065613          	srli	a2,a2,0x10
800142ac:	03030e33          	mul	t3,t1,a6
800142b0:	03088833          	mul	a6,a7,a6
800142b4:	010e5693          	srli	a3,t3,0x10
800142b8:	02c30333          	mul	t1,t1,a2
800142bc:	01030333          	add	t1,t1,a6
800142c0:	006686b3          	add	a3,a3,t1
800142c4:	02c888b3          	mul	a7,a7,a2
800142c8:	0106f463          	bleu	a6,a3,800142d0 <__udivdi3+0x3ec>
800142cc:	01d888b3          	add	a7,a7,t4
800142d0:	0106d613          	srli	a2,a3,0x10
800142d4:	011608b3          	add	a7,a2,a7
	      if (m1 > n1 || (m1 == n1 && m0 > n0))
800142d8:	0317e663          	bltu	a5,a7,80014304 <__udivdi3+0x420>
800142dc:	cf179ae3          	bne	a5,a7,80013fd0 <__udivdi3+0xec>
	      umul_ppmm (m1, m0, q0, d0);
800142e0:	000107b7          	lui	a5,0x10
800142e4:	fff78793          	addi	a5,a5,-1 # ffff <_HEAP_SIZE+0xefff>
800142e8:	00f6f6b3          	and	a3,a3,a5
800142ec:	01069693          	slli	a3,a3,0x10
800142f0:	00fe7e33          	and	t3,t3,a5
	      n0 = n0 << bm;
800142f4:	00b51533          	sll	a0,a0,a1
	      umul_ppmm (m1, m0, q0, d0);
800142f8:	01c686b3          	add	a3,a3,t3
	      q1 = 0;
800142fc:	00000593          	li	a1,0
	      if (m1 > n1 || (m1 == n1 && m0 > n0))
80014300:	dad57ce3          	bleu	a3,a0,800140b8 <__udivdi3+0x1d4>
		  q0--;
80014304:	fff70713          	addi	a4,a4,-1
80014308:	cc9ff06f          	j	80013fd0 <__udivdi3+0xec>
	  q1 = 0;
8001430c:	00000593          	li	a1,0
	  q0 = 0;
80014310:	00000713          	li	a4,0
80014314:	da5ff06f          	j	800140b8 <__udivdi3+0x1d4>

80014318 <__umoddi3>:
  d0 = dd.s.low;
80014318:	00060893          	mv	a7,a2
  d1 = dd.s.high;
8001431c:	00068713          	mv	a4,a3
  n0 = nn.s.low;
80014320:	00050793          	mv	a5,a0
  n1 = nn.s.high;
80014324:	00058813          	mv	a6,a1
  if (d1 == 0)
80014328:	22069c63          	bnez	a3,80014560 <__umoddi3+0x248>
8001432c:	800216b7          	lui	a3,0x80021
80014330:	c6c68693          	addi	a3,a3,-916 # 80020c6c <__stack+0xfffe41a0>
      if (d0 > n1)
80014334:	0cc5fc63          	bleu	a2,a1,8001440c <__umoddi3+0xf4>
	  count_leading_zeros (bm, d0);
80014338:	00010337          	lui	t1,0x10
8001433c:	0a667e63          	bleu	t1,a2,800143f8 <__umoddi3+0xe0>
80014340:	0ff00313          	li	t1,255
80014344:	00c37463          	bleu	a2,t1,8001434c <__umoddi3+0x34>
80014348:	00800713          	li	a4,8
8001434c:	00e65333          	srl	t1,a2,a4
80014350:	006686b3          	add	a3,a3,t1
80014354:	0006ce03          	lbu	t3,0(a3)
80014358:	02000313          	li	t1,32
8001435c:	00ee0e33          	add	t3,t3,a4
80014360:	41c30333          	sub	t1,t1,t3
	  if (bm != 0)
80014364:	00030c63          	beqz	t1,8001437c <__umoddi3+0x64>
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
80014368:	006595b3          	sll	a1,a1,t1
8001436c:	01c55e33          	srl	t3,a0,t3
	      d0 = d0 << bm;
80014370:	006618b3          	sll	a7,a2,t1
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
80014374:	00be6833          	or	a6,t3,a1
	      n0 = n0 << bm;
80014378:	006517b3          	sll	a5,a0,t1
	  udiv_qrnnd (q0, n0, n1, n0, d0);
8001437c:	0108d613          	srli	a2,a7,0x10
80014380:	02c87733          	remu	a4,a6,a2
80014384:	01089513          	slli	a0,a7,0x10
80014388:	01055513          	srli	a0,a0,0x10
8001438c:	0107d693          	srli	a3,a5,0x10
80014390:	02c85833          	divu	a6,a6,a2
80014394:	01071713          	slli	a4,a4,0x10
80014398:	00d766b3          	or	a3,a4,a3
8001439c:	03050833          	mul	a6,a0,a6
800143a0:	0106fa63          	bleu	a6,a3,800143b4 <__umoddi3+0x9c>
800143a4:	011686b3          	add	a3,a3,a7
800143a8:	0116e663          	bltu	a3,a7,800143b4 <__umoddi3+0x9c>
800143ac:	0106f463          	bleu	a6,a3,800143b4 <__umoddi3+0x9c>
800143b0:	011686b3          	add	a3,a3,a7
800143b4:	410686b3          	sub	a3,a3,a6
800143b8:	02c6f733          	remu	a4,a3,a2
800143bc:	01079793          	slli	a5,a5,0x10
800143c0:	0107d793          	srli	a5,a5,0x10
800143c4:	02c6d6b3          	divu	a3,a3,a2
800143c8:	02d506b3          	mul	a3,a0,a3
800143cc:	01071513          	slli	a0,a4,0x10
800143d0:	00f567b3          	or	a5,a0,a5
800143d4:	00d7fa63          	bleu	a3,a5,800143e8 <__umoddi3+0xd0>
800143d8:	011787b3          	add	a5,a5,a7
800143dc:	0117e663          	bltu	a5,a7,800143e8 <__umoddi3+0xd0>
800143e0:	00d7f463          	bleu	a3,a5,800143e8 <__umoddi3+0xd0>
800143e4:	011787b3          	add	a5,a5,a7
800143e8:	40d787b3          	sub	a5,a5,a3
	  rr.s.low = n0 >> bm;
800143ec:	0067d533          	srl	a0,a5,t1
	  *rp = rr.ll;
800143f0:	00000593          	li	a1,0
}
800143f4:	00008067          	ret
	  count_leading_zeros (bm, d0);
800143f8:	01000337          	lui	t1,0x1000
800143fc:	01000713          	li	a4,16
80014400:	f46666e3          	bltu	a2,t1,8001434c <__umoddi3+0x34>
80014404:	01800713          	li	a4,24
80014408:	f45ff06f          	j	8001434c <__umoddi3+0x34>
	  if (d0 == 0)
8001440c:	00061663          	bnez	a2,80014418 <__umoddi3+0x100>
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
80014410:	00100613          	li	a2,1
80014414:	031658b3          	divu	a7,a2,a7
	  count_leading_zeros (bm, d0);
80014418:	00010637          	lui	a2,0x10
8001441c:	0ac8f263          	bleu	a2,a7,800144c0 <__umoddi3+0x1a8>
80014420:	0ff00613          	li	a2,255
80014424:	01167463          	bleu	a7,a2,8001442c <__umoddi3+0x114>
80014428:	00800713          	li	a4,8
8001442c:	00e8d633          	srl	a2,a7,a4
80014430:	00c686b3          	add	a3,a3,a2
80014434:	0006ce03          	lbu	t3,0(a3)
80014438:	02000313          	li	t1,32
8001443c:	00ee0e33          	add	t3,t3,a4
80014440:	41c30333          	sub	t1,t1,t3
	  if (bm == 0)
80014444:	08031863          	bnez	t1,800144d4 <__umoddi3+0x1bc>
	      n1 -= d0;
80014448:	411585b3          	sub	a1,a1,a7
	  udiv_qrnnd (q0, n0, n1, n0, d0);
8001444c:	0108d713          	srli	a4,a7,0x10
80014450:	01089513          	slli	a0,a7,0x10
80014454:	01055513          	srli	a0,a0,0x10
80014458:	0107d613          	srli	a2,a5,0x10
8001445c:	02e5f6b3          	remu	a3,a1,a4
80014460:	02e5d5b3          	divu	a1,a1,a4
80014464:	01069693          	slli	a3,a3,0x10
80014468:	00c6e6b3          	or	a3,a3,a2
8001446c:	02b505b3          	mul	a1,a0,a1
80014470:	00b6fa63          	bleu	a1,a3,80014484 <__umoddi3+0x16c>
80014474:	011686b3          	add	a3,a3,a7
80014478:	0116e663          	bltu	a3,a7,80014484 <__umoddi3+0x16c>
8001447c:	00b6f463          	bleu	a1,a3,80014484 <__umoddi3+0x16c>
80014480:	011686b3          	add	a3,a3,a7
80014484:	40b685b3          	sub	a1,a3,a1
80014488:	02e5f6b3          	remu	a3,a1,a4
8001448c:	01079793          	slli	a5,a5,0x10
80014490:	0107d793          	srli	a5,a5,0x10
80014494:	02e5d5b3          	divu	a1,a1,a4
80014498:	02b505b3          	mul	a1,a0,a1
8001449c:	01069513          	slli	a0,a3,0x10
800144a0:	00f567b3          	or	a5,a0,a5
800144a4:	00b7fa63          	bleu	a1,a5,800144b8 <__umoddi3+0x1a0>
800144a8:	011787b3          	add	a5,a5,a7
800144ac:	0117e663          	bltu	a5,a7,800144b8 <__umoddi3+0x1a0>
800144b0:	00b7f463          	bleu	a1,a5,800144b8 <__umoddi3+0x1a0>
800144b4:	011787b3          	add	a5,a5,a7
800144b8:	40b787b3          	sub	a5,a5,a1
800144bc:	f31ff06f          	j	800143ec <__umoddi3+0xd4>
	  count_leading_zeros (bm, d0);
800144c0:	01000637          	lui	a2,0x1000
800144c4:	01000713          	li	a4,16
800144c8:	f6c8e2e3          	bltu	a7,a2,8001442c <__umoddi3+0x114>
800144cc:	01800713          	li	a4,24
800144d0:	f5dff06f          	j	8001442c <__umoddi3+0x114>
	      d0 = d0 << bm;
800144d4:	006898b3          	sll	a7,a7,t1
	      n2 = n1 >> b;
800144d8:	01c5d733          	srl	a4,a1,t3
	      n0 = n0 << bm;
800144dc:	006517b3          	sll	a5,a0,t1
	      n1 = (n1 << bm) | (n0 >> b);
800144e0:	01c55e33          	srl	t3,a0,t3
	      udiv_qrnnd (q1, n1, n2, n1, d0);
800144e4:	0108d513          	srli	a0,a7,0x10
800144e8:	02a776b3          	remu	a3,a4,a0
	      n1 = (n1 << bm) | (n0 >> b);
800144ec:	006595b3          	sll	a1,a1,t1
800144f0:	00be6e33          	or	t3,t3,a1
	      udiv_qrnnd (q1, n1, n2, n1, d0);
800144f4:	01089593          	slli	a1,a7,0x10
800144f8:	0105d593          	srli	a1,a1,0x10
800144fc:	010e5613          	srli	a2,t3,0x10
80014500:	02a75733          	divu	a4,a4,a0
80014504:	01069693          	slli	a3,a3,0x10
80014508:	00c6e6b3          	or	a3,a3,a2
8001450c:	02e58733          	mul	a4,a1,a4
80014510:	00e6fa63          	bleu	a4,a3,80014524 <__umoddi3+0x20c>
80014514:	011686b3          	add	a3,a3,a7
80014518:	0116e663          	bltu	a3,a7,80014524 <__umoddi3+0x20c>
8001451c:	00e6f463          	bleu	a4,a3,80014524 <__umoddi3+0x20c>
80014520:	011686b3          	add	a3,a3,a7
80014524:	40e68633          	sub	a2,a3,a4
80014528:	02a676b3          	remu	a3,a2,a0
8001452c:	010e1e13          	slli	t3,t3,0x10
80014530:	010e5e13          	srli	t3,t3,0x10
80014534:	02a65633          	divu	a2,a2,a0
80014538:	01069693          	slli	a3,a3,0x10
8001453c:	02c58633          	mul	a2,a1,a2
80014540:	01c6e5b3          	or	a1,a3,t3
80014544:	00c5fa63          	bleu	a2,a1,80014558 <__umoddi3+0x240>
80014548:	011585b3          	add	a1,a1,a7
8001454c:	0115e663          	bltu	a1,a7,80014558 <__umoddi3+0x240>
80014550:	00c5f463          	bleu	a2,a1,80014558 <__umoddi3+0x240>
80014554:	011585b3          	add	a1,a1,a7
80014558:	40c585b3          	sub	a1,a1,a2
8001455c:	ef1ff06f          	j	8001444c <__umoddi3+0x134>
      if (d1 > n1)
80014560:	e8d5eae3          	bltu	a1,a3,800143f4 <__umoddi3+0xdc>
	  count_leading_zeros (bm, d1);
80014564:	00010737          	lui	a4,0x10
80014568:	04e6fc63          	bleu	a4,a3,800145c0 <__umoddi3+0x2a8>
8001456c:	0ff00e93          	li	t4,255
80014570:	00deb733          	sltu	a4,t4,a3
80014574:	00371713          	slli	a4,a4,0x3
80014578:	80021337          	lui	t1,0x80021
8001457c:	00e6d8b3          	srl	a7,a3,a4
80014580:	c6c30313          	addi	t1,t1,-916 # 80020c6c <__stack+0xfffe41a0>
80014584:	006888b3          	add	a7,a7,t1
80014588:	0008ce83          	lbu	t4,0(a7) # 1000000 <_HEAP_SIZE+0xfff000>
8001458c:	02000e13          	li	t3,32
80014590:	00ee8eb3          	add	t4,t4,a4
80014594:	41de0e33          	sub	t3,t3,t4
	  if (bm == 0)
80014598:	020e1e63          	bnez	t3,800145d4 <__umoddi3+0x2bc>
	      if (n1 > d1 || n0 >= d0)
8001459c:	00b6e463          	bltu	a3,a1,800145a4 <__umoddi3+0x28c>
800145a0:	00c56a63          	bltu	a0,a2,800145b4 <__umoddi3+0x29c>
		  sub_ddmmss (n1, n0, n1, n0, d1, d0);
800145a4:	40c507b3          	sub	a5,a0,a2
800145a8:	40d585b3          	sub	a1,a1,a3
800145ac:	00f53533          	sltu	a0,a0,a5
800145b0:	40a58833          	sub	a6,a1,a0
		  *rp = rr.ll;
800145b4:	00078513          	mv	a0,a5
800145b8:	00080593          	mv	a1,a6
800145bc:	e39ff06f          	j	800143f4 <__umoddi3+0xdc>
	  count_leading_zeros (bm, d1);
800145c0:	010008b7          	lui	a7,0x1000
800145c4:	01000713          	li	a4,16
800145c8:	fb16e8e3          	bltu	a3,a7,80014578 <__umoddi3+0x260>
800145cc:	01800713          	li	a4,24
800145d0:	fa9ff06f          	j	80014578 <__umoddi3+0x260>
	      d1 = (d1 << bm) | (d0 >> b);
800145d4:	01d65733          	srl	a4,a2,t4
800145d8:	01c696b3          	sll	a3,a3,t3
800145dc:	00d766b3          	or	a3,a4,a3
	      n1 = (n1 << bm) | (n0 >> b);
800145e0:	01d557b3          	srl	a5,a0,t4
	      n2 = n1 >> b;
800145e4:	01d5d733          	srl	a4,a1,t4
	      n1 = (n1 << bm) | (n0 >> b);
800145e8:	01c595b3          	sll	a1,a1,t3
800145ec:	00b7e7b3          	or	a5,a5,a1
	      udiv_qrnnd (q0, n1, n2, n1, d1);
800145f0:	0106d593          	srli	a1,a3,0x10
800145f4:	02b77333          	remu	t1,a4,a1
800145f8:	01069f13          	slli	t5,a3,0x10
800145fc:	010f5f13          	srli	t5,t5,0x10
80014600:	0107d893          	srli	a7,a5,0x10
	      d0 = d0 << bm;
80014604:	01c61633          	sll	a2,a2,t3
	      n0 = n0 << bm;
80014608:	01c51533          	sll	a0,a0,t3
	      udiv_qrnnd (q0, n1, n2, n1, d1);
8001460c:	02b75733          	divu	a4,a4,a1
80014610:	01031313          	slli	t1,t1,0x10
80014614:	011368b3          	or	a7,t1,a7
80014618:	02ef0833          	mul	a6,t5,a4
8001461c:	00070313          	mv	t1,a4
80014620:	0108fe63          	bleu	a6,a7,8001463c <__umoddi3+0x324>
80014624:	00d888b3          	add	a7,a7,a3
80014628:	fff70313          	addi	t1,a4,-1 # ffff <_HEAP_SIZE+0xefff>
8001462c:	00d8e863          	bltu	a7,a3,8001463c <__umoddi3+0x324>
80014630:	0108f663          	bleu	a6,a7,8001463c <__umoddi3+0x324>
80014634:	ffe70313          	addi	t1,a4,-2
80014638:	00d888b3          	add	a7,a7,a3
8001463c:	410888b3          	sub	a7,a7,a6
80014640:	02b8ffb3          	remu	t6,a7,a1
80014644:	02b8d8b3          	divu	a7,a7,a1
80014648:	010f9f93          	slli	t6,t6,0x10
8001464c:	031f05b3          	mul	a1,t5,a7
80014650:	01079f13          	slli	t5,a5,0x10
80014654:	010f5f13          	srli	t5,t5,0x10
80014658:	01efef33          	or	t5,t6,t5
8001465c:	00088713          	mv	a4,a7
80014660:	00bf7e63          	bleu	a1,t5,8001467c <__umoddi3+0x364>
80014664:	00df0f33          	add	t5,t5,a3
80014668:	fff88713          	addi	a4,a7,-1 # ffffff <_HEAP_SIZE+0xffefff>
8001466c:	00df6863          	bltu	t5,a3,8001467c <__umoddi3+0x364>
80014670:	00bf7663          	bleu	a1,t5,8001467c <__umoddi3+0x364>
80014674:	ffe88713          	addi	a4,a7,-2
80014678:	00df0f33          	add	t5,t5,a3
8001467c:	01031313          	slli	t1,t1,0x10
	      umul_ppmm (m1, m0, q0, d0);
80014680:	000108b7          	lui	a7,0x10
	      udiv_qrnnd (q0, n1, n2, n1, d1);
80014684:	00e36333          	or	t1,t1,a4
	      umul_ppmm (m1, m0, q0, d0);
80014688:	fff88793          	addi	a5,a7,-1 # ffff <_HEAP_SIZE+0xefff>
8001468c:	01065813          	srli	a6,a2,0x10
	      udiv_qrnnd (q0, n1, n2, n1, d1);
80014690:	40bf0f33          	sub	t5,t5,a1
	      umul_ppmm (m1, m0, q0, d0);
80014694:	00f375b3          	and	a1,t1,a5
80014698:	01035313          	srli	t1,t1,0x10
8001469c:	00f677b3          	and	a5,a2,a5
800146a0:	02f58733          	mul	a4,a1,a5
800146a4:	02f307b3          	mul	a5,t1,a5
800146a8:	030585b3          	mul	a1,a1,a6
800146ac:	03030333          	mul	t1,t1,a6
800146b0:	00f585b3          	add	a1,a1,a5
800146b4:	01075813          	srli	a6,a4,0x10
800146b8:	00b80833          	add	a6,a6,a1
800146bc:	00f87463          	bleu	a5,a6,800146c4 <__umoddi3+0x3ac>
800146c0:	01130333          	add	t1,t1,a7
800146c4:	000107b7          	lui	a5,0x10
800146c8:	fff78793          	addi	a5,a5,-1 # ffff <_HEAP_SIZE+0xefff>
800146cc:	01085593          	srli	a1,a6,0x10
800146d0:	00f87833          	and	a6,a6,a5
800146d4:	01081813          	slli	a6,a6,0x10
800146d8:	00f77733          	and	a4,a4,a5
800146dc:	006585b3          	add	a1,a1,t1
800146e0:	00e80733          	add	a4,a6,a4
	      if (m1 > n1 || (m1 == n1 && m0 > n0))
800146e4:	00bf6663          	bltu	t5,a1,800146f0 <__umoddi3+0x3d8>
800146e8:	00bf1e63          	bne	t5,a1,80014704 <__umoddi3+0x3ec>
800146ec:	00e57c63          	bleu	a4,a0,80014704 <__umoddi3+0x3ec>
		  sub_ddmmss (m1, m0, m1, m0, d1, d0);
800146f0:	40c70633          	sub	a2,a4,a2
800146f4:	00c73733          	sltu	a4,a4,a2
800146f8:	40d585b3          	sub	a1,a1,a3
800146fc:	40e585b3          	sub	a1,a1,a4
80014700:	00060713          	mv	a4,a2
		  sub_ddmmss (n1, n0, n1, n0, m1, m0);
80014704:	40e50733          	sub	a4,a0,a4
80014708:	00e53533          	sltu	a0,a0,a4
8001470c:	40bf05b3          	sub	a1,t5,a1
80014710:	40a585b3          	sub	a1,a1,a0
		  rr.s.low = (n1 << b) | (n0 >> bm);
80014714:	01d597b3          	sll	a5,a1,t4
80014718:	01c75733          	srl	a4,a4,t3
		  *rp = rr.ll;
8001471c:	00e7e533          	or	a0,a5,a4
80014720:	01c5d5b3          	srl	a1,a1,t3
  return w;
80014724:	cd1ff06f          	j	800143f4 <__umoddi3+0xdc>

80014728 <__divdf3>:
#include "soft-fp.h"
#include "double.h"

DFtype
__divdf3 (DFtype a, DFtype b)
{
80014728:	fd010113          	addi	sp,sp,-48
8001472c:	02812423          	sw	s0,40(sp)
80014730:	02912223          	sw	s1,36(sp)
80014734:	01612823          	sw	s6,16(sp)
80014738:	00050413          	mv	s0,a0
8001473c:	00050b13          	mv	s6,a0
  FP_DECL_D (B);
  FP_DECL_D (R);
  DFtype r;

  FP_INIT_ROUNDMODE;
  FP_UNPACK_D (A, a);
80014740:	001004b7          	lui	s1,0x100
80014744:	0145d513          	srli	a0,a1,0x14
{
80014748:	03212023          	sw	s2,32(sp)
8001474c:	01312e23          	sw	s3,28(sp)
80014750:	01712623          	sw	s7,12(sp)
  FP_UNPACK_D (A, a);
80014754:	fff48493          	addi	s1,s1,-1 # fffff <_HEAP_SIZE+0xfefff>
{
80014758:	02112623          	sw	ra,44(sp)
8001475c:	01412c23          	sw	s4,24(sp)
80014760:	01512a23          	sw	s5,20(sp)
  FP_UNPACK_D (A, a);
80014764:	7ff57513          	andi	a0,a0,2047
{
80014768:	00060b93          	mv	s7,a2
8001476c:	00068993          	mv	s3,a3
  FP_UNPACK_D (A, a);
80014770:	00b4f4b3          	and	s1,s1,a1
80014774:	01f5d913          	srli	s2,a1,0x1f
80014778:	0a050463          	beqz	a0,80014820 <__divdf3+0xf8>
8001477c:	7ff00793          	li	a5,2047
80014780:	10f50463          	beq	a0,a5,80014888 <__divdf3+0x160>
80014784:	00349493          	slli	s1,s1,0x3
80014788:	008006b7          	lui	a3,0x800
8001478c:	00d4e4b3          	or	s1,s1,a3
80014790:	01db5a93          	srli	s5,s6,0x1d
80014794:	009aeab3          	or	s5,s5,s1
80014798:	003b1413          	slli	s0,s6,0x3
8001479c:	c0150a13          	addi	s4,a0,-1023
800147a0:	00000b13          	li	s6,0
  FP_UNPACK_D (B, b);
800147a4:	0149d513          	srli	a0,s3,0x14
800147a8:	001004b7          	lui	s1,0x100
800147ac:	fff48493          	addi	s1,s1,-1 # fffff <_HEAP_SIZE+0xfefff>
800147b0:	7ff57513          	andi	a0,a0,2047
800147b4:	0134f4b3          	and	s1,s1,s3
800147b8:	000b8f93          	mv	t6,s7
800147bc:	01f9d993          	srli	s3,s3,0x1f
800147c0:	10050063          	beqz	a0,800148c0 <__divdf3+0x198>
800147c4:	7ff00793          	li	a5,2047
800147c8:	16f50063          	beq	a0,a5,80014928 <__divdf3+0x200>
800147cc:	008007b7          	lui	a5,0x800
800147d0:	00349493          	slli	s1,s1,0x3
800147d4:	00f4e4b3          	or	s1,s1,a5
800147d8:	01dbd793          	srli	a5,s7,0x1d
800147dc:	0097e7b3          	or	a5,a5,s1
800147e0:	003b9f93          	slli	t6,s7,0x3
800147e4:	c0150513          	addi	a0,a0,-1023
800147e8:	00000713          	li	a4,0
  FP_DIV_D (R, A, B);
800147ec:	002b1693          	slli	a3,s6,0x2
800147f0:	00e6e6b3          	or	a3,a3,a4
800147f4:	fff68693          	addi	a3,a3,-1 # 7fffff <_HEAP_SIZE+0x7fefff>
800147f8:	00e00593          	li	a1,14
800147fc:	01394633          	xor	a2,s2,s3
80014800:	40aa0533          	sub	a0,s4,a0
80014804:	14d5ee63          	bltu	a1,a3,80014960 <__divdf3+0x238>
80014808:	800215b7          	lui	a1,0x80021
8001480c:	00269693          	slli	a3,a3,0x2
80014810:	bb858593          	addi	a1,a1,-1096 # 80020bb8 <__stack+0xfffe40ec>
80014814:	00b686b3          	add	a3,a3,a1
80014818:	0006a683          	lw	a3,0(a3)
8001481c:	00068067          	jr	a3
  FP_UNPACK_D (A, a);
80014820:	0164eab3          	or	s5,s1,s6
80014824:	060a8e63          	beqz	s5,800148a0 <__divdf3+0x178>
80014828:	04048063          	beqz	s1,80014868 <__divdf3+0x140>
8001482c:	00048513          	mv	a0,s1
80014830:	495030ef          	jal	ra,800184c4 <__clzsi2>
80014834:	ff550793          	addi	a5,a0,-11
80014838:	01c00713          	li	a4,28
8001483c:	02f74e63          	blt	a4,a5,80014878 <__divdf3+0x150>
80014840:	01d00a93          	li	s5,29
80014844:	ff850413          	addi	s0,a0,-8
80014848:	40fa8ab3          	sub	s5,s5,a5
8001484c:	008494b3          	sll	s1,s1,s0
80014850:	015b5ab3          	srl	s5,s6,s5
80014854:	009aeab3          	or	s5,s5,s1
80014858:	008b1433          	sll	s0,s6,s0
8001485c:	c0d00a13          	li	s4,-1011
80014860:	40aa0a33          	sub	s4,s4,a0
80014864:	f3dff06f          	j	800147a0 <__divdf3+0x78>
80014868:	000b0513          	mv	a0,s6
8001486c:	459030ef          	jal	ra,800184c4 <__clzsi2>
80014870:	02050513          	addi	a0,a0,32
80014874:	fc1ff06f          	j	80014834 <__divdf3+0x10c>
80014878:	fd850493          	addi	s1,a0,-40
8001487c:	009b1ab3          	sll	s5,s6,s1
80014880:	00000413          	li	s0,0
80014884:	fd9ff06f          	j	8001485c <__divdf3+0x134>
80014888:	0164eab3          	or	s5,s1,s6
8001488c:	020a8263          	beqz	s5,800148b0 <__divdf3+0x188>
80014890:	00048a93          	mv	s5,s1
80014894:	7ff00a13          	li	s4,2047
80014898:	00300b13          	li	s6,3
8001489c:	f09ff06f          	j	800147a4 <__divdf3+0x7c>
800148a0:	00000413          	li	s0,0
800148a4:	00000a13          	li	s4,0
800148a8:	00100b13          	li	s6,1
800148ac:	ef9ff06f          	j	800147a4 <__divdf3+0x7c>
800148b0:	00000413          	li	s0,0
800148b4:	7ff00a13          	li	s4,2047
800148b8:	00200b13          	li	s6,2
800148bc:	ee9ff06f          	j	800147a4 <__divdf3+0x7c>
  FP_UNPACK_D (B, b);
800148c0:	0174e7b3          	or	a5,s1,s7
800148c4:	06078e63          	beqz	a5,80014940 <__divdf3+0x218>
800148c8:	04048063          	beqz	s1,80014908 <__divdf3+0x1e0>
800148cc:	00048513          	mv	a0,s1
800148d0:	3f5030ef          	jal	ra,800184c4 <__clzsi2>
800148d4:	ff550713          	addi	a4,a0,-11
800148d8:	01c00793          	li	a5,28
800148dc:	02e7ce63          	blt	a5,a4,80014918 <__divdf3+0x1f0>
800148e0:	01d00793          	li	a5,29
800148e4:	ff850f93          	addi	t6,a0,-8
800148e8:	40e787b3          	sub	a5,a5,a4
800148ec:	01f494b3          	sll	s1,s1,t6
800148f0:	00fbd7b3          	srl	a5,s7,a5
800148f4:	0097e7b3          	or	a5,a5,s1
800148f8:	01fb9fb3          	sll	t6,s7,t6
800148fc:	c0d00613          	li	a2,-1011
80014900:	40a60533          	sub	a0,a2,a0
80014904:	ee5ff06f          	j	800147e8 <__divdf3+0xc0>
80014908:	000b8513          	mv	a0,s7
8001490c:	3b9030ef          	jal	ra,800184c4 <__clzsi2>
80014910:	02050513          	addi	a0,a0,32
80014914:	fc1ff06f          	j	800148d4 <__divdf3+0x1ac>
80014918:	fd850793          	addi	a5,a0,-40
8001491c:	00fb97b3          	sll	a5,s7,a5
80014920:	00000f93          	li	t6,0
80014924:	fd9ff06f          	j	800148fc <__divdf3+0x1d4>
80014928:	0174e7b3          	or	a5,s1,s7
8001492c:	02078263          	beqz	a5,80014950 <__divdf3+0x228>
80014930:	00048793          	mv	a5,s1
80014934:	7ff00513          	li	a0,2047
80014938:	00300713          	li	a4,3
8001493c:	eb1ff06f          	j	800147ec <__divdf3+0xc4>
80014940:	00000f93          	li	t6,0
80014944:	00000513          	li	a0,0
80014948:	00100713          	li	a4,1
8001494c:	ea1ff06f          	j	800147ec <__divdf3+0xc4>
80014950:	00000f93          	li	t6,0
80014954:	7ff00513          	li	a0,2047
80014958:	00200713          	li	a4,2
8001495c:	e91ff06f          	j	800147ec <__divdf3+0xc4>
  FP_DIV_D (R, A, B);
80014960:	0157e663          	bltu	a5,s5,8001496c <__divdf3+0x244>
80014964:	36fa9063          	bne	s5,a5,80014cc4 <__divdf3+0x59c>
80014968:	35f46e63          	bltu	s0,t6,80014cc4 <__divdf3+0x59c>
8001496c:	01fa9593          	slli	a1,s5,0x1f
80014970:	00145693          	srli	a3,s0,0x1
80014974:	01f41713          	slli	a4,s0,0x1f
80014978:	001ada93          	srli	s5,s5,0x1
8001497c:	00d5e433          	or	s0,a1,a3
80014980:	00879793          	slli	a5,a5,0x8
80014984:	018fd813          	srli	a6,t6,0x18
80014988:	00f86833          	or	a6,a6,a5
8001498c:	01085e93          	srli	t4,a6,0x10
80014990:	03dad5b3          	divu	a1,s5,t4
80014994:	01081e13          	slli	t3,a6,0x10
80014998:	010e5e13          	srli	t3,t3,0x10
8001499c:	01045693          	srli	a3,s0,0x10
800149a0:	008f9893          	slli	a7,t6,0x8
800149a4:	03daf4b3          	remu	s1,s5,t4
800149a8:	00058f93          	mv	t6,a1
800149ac:	02be07b3          	mul	a5,t3,a1
800149b0:	01049493          	slli	s1,s1,0x10
800149b4:	0096e6b3          	or	a3,a3,s1
800149b8:	00f6fe63          	bleu	a5,a3,800149d4 <__divdf3+0x2ac>
800149bc:	010686b3          	add	a3,a3,a6
800149c0:	fff58f93          	addi	t6,a1,-1
800149c4:	0106e863          	bltu	a3,a6,800149d4 <__divdf3+0x2ac>
800149c8:	00f6f663          	bleu	a5,a3,800149d4 <__divdf3+0x2ac>
800149cc:	ffe58f93          	addi	t6,a1,-2
800149d0:	010686b3          	add	a3,a3,a6
800149d4:	40f686b3          	sub	a3,a3,a5
800149d8:	03d6d333          	divu	t1,a3,t4
800149dc:	01041413          	slli	s0,s0,0x10
800149e0:	01045413          	srli	s0,s0,0x10
800149e4:	03d6f6b3          	remu	a3,a3,t4
800149e8:	00030793          	mv	a5,t1
800149ec:	026e05b3          	mul	a1,t3,t1
800149f0:	01069693          	slli	a3,a3,0x10
800149f4:	00d466b3          	or	a3,s0,a3
800149f8:	00b6fe63          	bleu	a1,a3,80014a14 <__divdf3+0x2ec>
800149fc:	010686b3          	add	a3,a3,a6
80014a00:	fff30793          	addi	a5,t1,-1
80014a04:	0106e863          	bltu	a3,a6,80014a14 <__divdf3+0x2ec>
80014a08:	00b6f663          	bleu	a1,a3,80014a14 <__divdf3+0x2ec>
80014a0c:	ffe30793          	addi	a5,t1,-2
80014a10:	010686b3          	add	a3,a3,a6
80014a14:	40b68433          	sub	s0,a3,a1
80014a18:	010f9f93          	slli	t6,t6,0x10
80014a1c:	000105b7          	lui	a1,0x10
80014a20:	00ffefb3          	or	t6,t6,a5
80014a24:	fff58313          	addi	t1,a1,-1 # ffff <_HEAP_SIZE+0xefff>
80014a28:	010fd693          	srli	a3,t6,0x10
80014a2c:	006ff7b3          	and	a5,t6,t1
80014a30:	0108df13          	srli	t5,a7,0x10
80014a34:	0068f333          	and	t1,a7,t1
80014a38:	026783b3          	mul	t2,a5,t1
80014a3c:	026684b3          	mul	s1,a3,t1
80014a40:	02ff07b3          	mul	a5,t5,a5
80014a44:	03e682b3          	mul	t0,a3,t5
80014a48:	009786b3          	add	a3,a5,s1
80014a4c:	0103d793          	srli	a5,t2,0x10
80014a50:	00d787b3          	add	a5,a5,a3
80014a54:	0097f463          	bleu	s1,a5,80014a5c <__divdf3+0x334>
80014a58:	00b282b3          	add	t0,t0,a1
80014a5c:	0107d693          	srli	a3,a5,0x10
80014a60:	005686b3          	add	a3,a3,t0
80014a64:	000102b7          	lui	t0,0x10
80014a68:	fff28293          	addi	t0,t0,-1 # ffff <_HEAP_SIZE+0xefff>
80014a6c:	0057f5b3          	and	a1,a5,t0
80014a70:	01059593          	slli	a1,a1,0x10
80014a74:	0053f3b3          	and	t2,t2,t0
80014a78:	007585b3          	add	a1,a1,t2
80014a7c:	00d46863          	bltu	s0,a3,80014a8c <__divdf3+0x364>
80014a80:	000f8793          	mv	a5,t6
80014a84:	04d41463          	bne	s0,a3,80014acc <__divdf3+0x3a4>
80014a88:	04b77263          	bleu	a1,a4,80014acc <__divdf3+0x3a4>
80014a8c:	01170733          	add	a4,a4,a7
80014a90:	011732b3          	sltu	t0,a4,a7
80014a94:	010282b3          	add	t0,t0,a6
80014a98:	00540433          	add	s0,s0,t0
80014a9c:	ffff8793          	addi	a5,t6,-1
80014aa0:	00886663          	bltu	a6,s0,80014aac <__divdf3+0x384>
80014aa4:	02881463          	bne	a6,s0,80014acc <__divdf3+0x3a4>
80014aa8:	03176263          	bltu	a4,a7,80014acc <__divdf3+0x3a4>
80014aac:	00d46663          	bltu	s0,a3,80014ab8 <__divdf3+0x390>
80014ab0:	00869e63          	bne	a3,s0,80014acc <__divdf3+0x3a4>
80014ab4:	00b77c63          	bleu	a1,a4,80014acc <__divdf3+0x3a4>
80014ab8:	01170733          	add	a4,a4,a7
80014abc:	ffef8793          	addi	a5,t6,-2
80014ac0:	01173fb3          	sltu	t6,a4,a7
80014ac4:	010f8fb3          	add	t6,t6,a6
80014ac8:	01f40433          	add	s0,s0,t6
80014acc:	40b705b3          	sub	a1,a4,a1
80014ad0:	40d40433          	sub	s0,s0,a3
80014ad4:	00b73733          	sltu	a4,a4,a1
80014ad8:	40e40433          	sub	s0,s0,a4
80014adc:	fff00f93          	li	t6,-1
80014ae0:	12880463          	beq	a6,s0,80014c08 <__divdf3+0x4e0>
80014ae4:	03d452b3          	divu	t0,s0,t4
80014ae8:	0105d693          	srli	a3,a1,0x10
80014aec:	03d47433          	remu	s0,s0,t4
80014af0:	00028713          	mv	a4,t0
80014af4:	025e0fb3          	mul	t6,t3,t0
80014af8:	01041413          	slli	s0,s0,0x10
80014afc:	0086e433          	or	s0,a3,s0
80014b00:	01f47e63          	bleu	t6,s0,80014b1c <__divdf3+0x3f4>
80014b04:	01040433          	add	s0,s0,a6
80014b08:	fff28713          	addi	a4,t0,-1
80014b0c:	01046863          	bltu	s0,a6,80014b1c <__divdf3+0x3f4>
80014b10:	01f47663          	bleu	t6,s0,80014b1c <__divdf3+0x3f4>
80014b14:	ffe28713          	addi	a4,t0,-2
80014b18:	01040433          	add	s0,s0,a6
80014b1c:	41f40433          	sub	s0,s0,t6
80014b20:	03d456b3          	divu	a3,s0,t4
80014b24:	01059593          	slli	a1,a1,0x10
80014b28:	0105d593          	srli	a1,a1,0x10
80014b2c:	03d47433          	remu	s0,s0,t4
80014b30:	02de0e33          	mul	t3,t3,a3
80014b34:	01041413          	slli	s0,s0,0x10
80014b38:	0085e433          	or	s0,a1,s0
80014b3c:	00068593          	mv	a1,a3
80014b40:	01c47e63          	bleu	t3,s0,80014b5c <__divdf3+0x434>
80014b44:	01040433          	add	s0,s0,a6
80014b48:	fff68593          	addi	a1,a3,-1
80014b4c:	01046863          	bltu	s0,a6,80014b5c <__divdf3+0x434>
80014b50:	01c47663          	bleu	t3,s0,80014b5c <__divdf3+0x434>
80014b54:	ffe68593          	addi	a1,a3,-2
80014b58:	01040433          	add	s0,s0,a6
80014b5c:	01071713          	slli	a4,a4,0x10
80014b60:	00b765b3          	or	a1,a4,a1
80014b64:	01059713          	slli	a4,a1,0x10
80014b68:	01075713          	srli	a4,a4,0x10
80014b6c:	41c40433          	sub	s0,s0,t3
80014b70:	0105de13          	srli	t3,a1,0x10
80014b74:	02670eb3          	mul	t4,a4,t1
80014b78:	026e0333          	mul	t1,t3,t1
80014b7c:	03cf0e33          	mul	t3,t5,t3
80014b80:	02ef0f33          	mul	t5,t5,a4
80014b84:	010ed713          	srli	a4,t4,0x10
80014b88:	006f0f33          	add	t5,t5,t1
80014b8c:	01e70733          	add	a4,a4,t5
80014b90:	00677663          	bleu	t1,a4,80014b9c <__divdf3+0x474>
80014b94:	000106b7          	lui	a3,0x10
80014b98:	00de0e33          	add	t3,t3,a3
80014b9c:	01075313          	srli	t1,a4,0x10
80014ba0:	01c30333          	add	t1,t1,t3
80014ba4:	00010e37          	lui	t3,0x10
80014ba8:	fffe0e13          	addi	t3,t3,-1 # ffff <_HEAP_SIZE+0xefff>
80014bac:	01c776b3          	and	a3,a4,t3
80014bb0:	01069693          	slli	a3,a3,0x10
80014bb4:	01cefeb3          	and	t4,t4,t3
80014bb8:	01d686b3          	add	a3,a3,t4
80014bbc:	00646863          	bltu	s0,t1,80014bcc <__divdf3+0x4a4>
80014bc0:	00058f93          	mv	t6,a1
80014bc4:	04641063          	bne	s0,t1,80014c04 <__divdf3+0x4dc>
80014bc8:	04068063          	beqz	a3,80014c08 <__divdf3+0x4e0>
80014bcc:	00880433          	add	s0,a6,s0
80014bd0:	fff58f93          	addi	t6,a1,-1
80014bd4:	03046463          	bltu	s0,a6,80014bfc <__divdf3+0x4d4>
80014bd8:	00646663          	bltu	s0,t1,80014be4 <__divdf3+0x4bc>
80014bdc:	02641463          	bne	s0,t1,80014c04 <__divdf3+0x4dc>
80014be0:	02d8f063          	bleu	a3,a7,80014c00 <__divdf3+0x4d8>
80014be4:	00189713          	slli	a4,a7,0x1
80014be8:	011738b3          	sltu	a7,a4,a7
80014bec:	01088833          	add	a6,a7,a6
80014bf0:	ffe58f93          	addi	t6,a1,-2
80014bf4:	01040433          	add	s0,s0,a6
80014bf8:	00070893          	mv	a7,a4
80014bfc:	00641463          	bne	s0,t1,80014c04 <__divdf3+0x4dc>
80014c00:	01168463          	beq	a3,a7,80014c08 <__divdf3+0x4e0>
80014c04:	001fef93          	ori	t6,t6,1
  FP_PACK_D (r, R);
80014c08:	3ff50693          	addi	a3,a0,1023
80014c0c:	10d05a63          	blez	a3,80014d20 <__divdf3+0x5f8>
80014c10:	007ff713          	andi	a4,t6,7
80014c14:	02070063          	beqz	a4,80014c34 <__divdf3+0x50c>
80014c18:	00fff713          	andi	a4,t6,15
80014c1c:	00400593          	li	a1,4
80014c20:	00b70a63          	beq	a4,a1,80014c34 <__divdf3+0x50c>
80014c24:	004f8593          	addi	a1,t6,4
80014c28:	01f5bfb3          	sltu	t6,a1,t6
80014c2c:	01f787b3          	add	a5,a5,t6
80014c30:	00058f93          	mv	t6,a1
80014c34:	00779713          	slli	a4,a5,0x7
80014c38:	00075a63          	bgez	a4,80014c4c <__divdf3+0x524>
80014c3c:	ff000737          	lui	a4,0xff000
80014c40:	fff70713          	addi	a4,a4,-1 # feffffff <__stack+0x7efc3533>
80014c44:	00e7f7b3          	and	a5,a5,a4
80014c48:	40050693          	addi	a3,a0,1024
80014c4c:	7fe00713          	li	a4,2046
80014c50:	18d74a63          	blt	a4,a3,80014de4 <__divdf3+0x6bc>
80014c54:	01d79713          	slli	a4,a5,0x1d
80014c58:	003fdf93          	srli	t6,t6,0x3
80014c5c:	01f76733          	or	a4,a4,t6
80014c60:	0037d793          	srli	a5,a5,0x3
80014c64:	001005b7          	lui	a1,0x100
80014c68:	fff58593          	addi	a1,a1,-1 # fffff <_HEAP_SIZE+0xfefff>
80014c6c:	00b7f7b3          	and	a5,a5,a1
80014c70:	801005b7          	lui	a1,0x80100
80014c74:	fff58593          	addi	a1,a1,-1 # 800fffff <__stack+0xc3533>
80014c78:	7ff6f693          	andi	a3,a3,2047
80014c7c:	01469693          	slli	a3,a3,0x14
80014c80:	00b7f7b3          	and	a5,a5,a1
  FP_HANDLE_EXCEPTIONS;

  return r;
}
80014c84:	02c12083          	lw	ra,44(sp)
80014c88:	02812403          	lw	s0,40(sp)
  FP_PACK_D (r, R);
80014c8c:	01f61613          	slli	a2,a2,0x1f
80014c90:	00d7e7b3          	or	a5,a5,a3
80014c94:	00c7e6b3          	or	a3,a5,a2
}
80014c98:	02412483          	lw	s1,36(sp)
80014c9c:	02012903          	lw	s2,32(sp)
80014ca0:	01c12983          	lw	s3,28(sp)
80014ca4:	01812a03          	lw	s4,24(sp)
80014ca8:	01412a83          	lw	s5,20(sp)
80014cac:	01012b03          	lw	s6,16(sp)
80014cb0:	00c12b83          	lw	s7,12(sp)
80014cb4:	00070513          	mv	a0,a4
80014cb8:	00068593          	mv	a1,a3
80014cbc:	03010113          	addi	sp,sp,48
80014cc0:	00008067          	ret
  FP_DIV_D (R, A, B);
80014cc4:	fff50513          	addi	a0,a0,-1
80014cc8:	00000713          	li	a4,0
80014ccc:	cb5ff06f          	j	80014980 <__divdf3+0x258>
  FP_UNPACK_D (A, a);
80014cd0:	00090613          	mv	a2,s2
  FP_DIV_D (R, A, B);
80014cd4:	000a8793          	mv	a5,s5
80014cd8:	00040f93          	mv	t6,s0
80014cdc:	000b0713          	mv	a4,s6
  FP_PACK_D (r, R);
80014ce0:	00200693          	li	a3,2
80014ce4:	10d70063          	beq	a4,a3,80014de4 <__divdf3+0x6bc>
80014ce8:	00300693          	li	a3,3
80014cec:	0ed70263          	beq	a4,a3,80014dd0 <__divdf3+0x6a8>
80014cf0:	00100693          	li	a3,1
80014cf4:	f0d71ae3          	bne	a4,a3,80014c08 <__divdf3+0x4e0>
80014cf8:	00000793          	li	a5,0
80014cfc:	00000713          	li	a4,0
80014d00:	0940006f          	j	80014d94 <__divdf3+0x66c>
  FP_UNPACK_D (B, b);
80014d04:	00098613          	mv	a2,s3
  FP_DIV_D (R, A, B);
80014d08:	fd9ff06f          	j	80014ce0 <__divdf3+0x5b8>
80014d0c:	000807b7          	lui	a5,0x80
80014d10:	00000f93          	li	t6,0
80014d14:	00000613          	li	a2,0
80014d18:	00300713          	li	a4,3
80014d1c:	fc5ff06f          	j	80014ce0 <__divdf3+0x5b8>
  FP_PACK_D (r, R);
80014d20:	00100593          	li	a1,1
80014d24:	40d585b3          	sub	a1,a1,a3
80014d28:	03800713          	li	a4,56
80014d2c:	fcb746e3          	blt	a4,a1,80014cf8 <__divdf3+0x5d0>
80014d30:	01f00713          	li	a4,31
80014d34:	06b74463          	blt	a4,a1,80014d9c <__divdf3+0x674>
80014d38:	41e50513          	addi	a0,a0,1054
80014d3c:	00a79733          	sll	a4,a5,a0
80014d40:	00bfd6b3          	srl	a3,t6,a1
80014d44:	00af9533          	sll	a0,t6,a0
80014d48:	00d76733          	or	a4,a4,a3
80014d4c:	00a03533          	snez	a0,a0
80014d50:	00a76733          	or	a4,a4,a0
80014d54:	00b7d7b3          	srl	a5,a5,a1
80014d58:	00777693          	andi	a3,a4,7
80014d5c:	02068063          	beqz	a3,80014d7c <__divdf3+0x654>
80014d60:	00f77693          	andi	a3,a4,15
80014d64:	00400593          	li	a1,4
80014d68:	00b68a63          	beq	a3,a1,80014d7c <__divdf3+0x654>
80014d6c:	00470693          	addi	a3,a4,4
80014d70:	00e6b733          	sltu	a4,a3,a4
80014d74:	00e787b3          	add	a5,a5,a4
80014d78:	00068713          	mv	a4,a3
80014d7c:	00879693          	slli	a3,a5,0x8
80014d80:	0606ca63          	bltz	a3,80014df4 <__divdf3+0x6cc>
80014d84:	01d79693          	slli	a3,a5,0x1d
80014d88:	00375713          	srli	a4,a4,0x3
80014d8c:	00e6e733          	or	a4,a3,a4
80014d90:	0037d793          	srli	a5,a5,0x3
80014d94:	00000693          	li	a3,0
80014d98:	ecdff06f          	j	80014c64 <__divdf3+0x53c>
80014d9c:	fe100713          	li	a4,-31
80014da0:	40d70733          	sub	a4,a4,a3
80014da4:	02000813          	li	a6,32
80014da8:	00e7d733          	srl	a4,a5,a4
80014dac:	00000693          	li	a3,0
80014db0:	01058663          	beq	a1,a6,80014dbc <__divdf3+0x694>
80014db4:	43e50513          	addi	a0,a0,1086
80014db8:	00a796b3          	sll	a3,a5,a0
80014dbc:	01f6e533          	or	a0,a3,t6
80014dc0:	00a03533          	snez	a0,a0
80014dc4:	00a76733          	or	a4,a4,a0
80014dc8:	00000793          	li	a5,0
80014dcc:	f8dff06f          	j	80014d58 <__divdf3+0x630>
80014dd0:	000807b7          	lui	a5,0x80
80014dd4:	00000713          	li	a4,0
80014dd8:	7ff00693          	li	a3,2047
80014ddc:	00000613          	li	a2,0
80014de0:	e85ff06f          	j	80014c64 <__divdf3+0x53c>
80014de4:	00000793          	li	a5,0
80014de8:	00000713          	li	a4,0
80014dec:	7ff00693          	li	a3,2047
80014df0:	e75ff06f          	j	80014c64 <__divdf3+0x53c>
80014df4:	00000793          	li	a5,0
80014df8:	00000713          	li	a4,0
80014dfc:	00100693          	li	a3,1
80014e00:	e65ff06f          	j	80014c64 <__divdf3+0x53c>

80014e04 <__muldf3>:
#include "soft-fp.h"
#include "double.h"

DFtype
__muldf3 (DFtype a, DFtype b)
{
80014e04:	fd010113          	addi	sp,sp,-48
80014e08:	03212023          	sw	s2,32(sp)
80014e0c:	01512a23          	sw	s5,20(sp)
  FP_DECL_D (B);
  FP_DECL_D (R);
  DFtype r;

  FP_INIT_ROUNDMODE;
  FP_UNPACK_D (A, a);
80014e10:	00100937          	lui	s2,0x100
80014e14:	0145da93          	srli	s5,a1,0x14
{
80014e18:	01312e23          	sw	s3,28(sp)
80014e1c:	01412c23          	sw	s4,24(sp)
80014e20:	01612823          	sw	s6,16(sp)
80014e24:	01712623          	sw	s7,12(sp)
  FP_UNPACK_D (A, a);
80014e28:	fff90913          	addi	s2,s2,-1 # fffff <_HEAP_SIZE+0xfefff>
{
80014e2c:	02112623          	sw	ra,44(sp)
80014e30:	02812423          	sw	s0,40(sp)
80014e34:	02912223          	sw	s1,36(sp)
  FP_UNPACK_D (A, a);
80014e38:	7ffafa93          	andi	s5,s5,2047
{
80014e3c:	00050b13          	mv	s6,a0
80014e40:	00060b93          	mv	s7,a2
80014e44:	00068a13          	mv	s4,a3
  FP_UNPACK_D (A, a);
80014e48:	00b97933          	and	s2,s2,a1
80014e4c:	01f5d993          	srli	s3,a1,0x1f
80014e50:	0a0a8663          	beqz	s5,80014efc <__muldf3+0xf8>
80014e54:	7ff00793          	li	a5,2047
80014e58:	10fa8463          	beq	s5,a5,80014f60 <__muldf3+0x15c>
80014e5c:	00800437          	lui	s0,0x800
80014e60:	00391913          	slli	s2,s2,0x3
80014e64:	00896933          	or	s2,s2,s0
80014e68:	01d55413          	srli	s0,a0,0x1d
80014e6c:	01246433          	or	s0,s0,s2
80014e70:	00351493          	slli	s1,a0,0x3
80014e74:	c01a8a93          	addi	s5,s5,-1023
80014e78:	00000b13          	li	s6,0
  FP_UNPACK_D (B, b);
80014e7c:	014a5513          	srli	a0,s4,0x14
80014e80:	00100937          	lui	s2,0x100
80014e84:	fff90913          	addi	s2,s2,-1 # fffff <_HEAP_SIZE+0xfefff>
80014e88:	7ff57513          	andi	a0,a0,2047
80014e8c:	01497933          	and	s2,s2,s4
80014e90:	000b8713          	mv	a4,s7
80014e94:	01fa5a13          	srli	s4,s4,0x1f
80014e98:	10050263          	beqz	a0,80014f9c <__muldf3+0x198>
80014e9c:	7ff00793          	li	a5,2047
80014ea0:	16f50263          	beq	a0,a5,80015004 <__muldf3+0x200>
80014ea4:	008007b7          	lui	a5,0x800
80014ea8:	00391913          	slli	s2,s2,0x3
80014eac:	00f96933          	or	s2,s2,a5
80014eb0:	01dbd793          	srli	a5,s7,0x1d
80014eb4:	0127e7b3          	or	a5,a5,s2
80014eb8:	003b9713          	slli	a4,s7,0x3
80014ebc:	c0150513          	addi	a0,a0,-1023
80014ec0:	00000693          	li	a3,0
  FP_MUL_D (R, A, B);
80014ec4:	002b1593          	slli	a1,s6,0x2
80014ec8:	00d5e5b3          	or	a1,a1,a3
80014ecc:	00aa8533          	add	a0,s5,a0
80014ed0:	fff58593          	addi	a1,a1,-1
80014ed4:	00e00893          	li	a7,14
80014ed8:	0149c633          	xor	a2,s3,s4
80014edc:	00150813          	addi	a6,a0,1
80014ee0:	14b8ee63          	bltu	a7,a1,8001503c <__muldf3+0x238>
80014ee4:	80021537          	lui	a0,0x80021
80014ee8:	00259593          	slli	a1,a1,0x2
80014eec:	bf450513          	addi	a0,a0,-1036 # 80020bf4 <__stack+0xfffe4128>
80014ef0:	00a585b3          	add	a1,a1,a0
80014ef4:	0005a583          	lw	a1,0(a1)
80014ef8:	00058067          	jr	a1
  FP_UNPACK_D (A, a);
80014efc:	00a96433          	or	s0,s2,a0
80014f00:	06040e63          	beqz	s0,80014f7c <__muldf3+0x178>
80014f04:	04090063          	beqz	s2,80014f44 <__muldf3+0x140>
80014f08:	00090513          	mv	a0,s2
80014f0c:	5b8030ef          	jal	ra,800184c4 <__clzsi2>
80014f10:	ff550793          	addi	a5,a0,-11
80014f14:	01c00713          	li	a4,28
80014f18:	02f74c63          	blt	a4,a5,80014f50 <__muldf3+0x14c>
80014f1c:	01d00413          	li	s0,29
80014f20:	ff850493          	addi	s1,a0,-8
80014f24:	40f40433          	sub	s0,s0,a5
80014f28:	00991933          	sll	s2,s2,s1
80014f2c:	008b5433          	srl	s0,s6,s0
80014f30:	01246433          	or	s0,s0,s2
80014f34:	009b14b3          	sll	s1,s6,s1
80014f38:	c0d00a93          	li	s5,-1011
80014f3c:	40aa8ab3          	sub	s5,s5,a0
80014f40:	f39ff06f          	j	80014e78 <__muldf3+0x74>
80014f44:	580030ef          	jal	ra,800184c4 <__clzsi2>
80014f48:	02050513          	addi	a0,a0,32
80014f4c:	fc5ff06f          	j	80014f10 <__muldf3+0x10c>
80014f50:	fd850413          	addi	s0,a0,-40
80014f54:	008b1433          	sll	s0,s6,s0
80014f58:	00000493          	li	s1,0
80014f5c:	fddff06f          	j	80014f38 <__muldf3+0x134>
80014f60:	00a96433          	or	s0,s2,a0
80014f64:	02040463          	beqz	s0,80014f8c <__muldf3+0x188>
80014f68:	00050493          	mv	s1,a0
80014f6c:	00090413          	mv	s0,s2
80014f70:	7ff00a93          	li	s5,2047
80014f74:	00300b13          	li	s6,3
80014f78:	f05ff06f          	j	80014e7c <__muldf3+0x78>
80014f7c:	00000493          	li	s1,0
80014f80:	00000a93          	li	s5,0
80014f84:	00100b13          	li	s6,1
80014f88:	ef5ff06f          	j	80014e7c <__muldf3+0x78>
80014f8c:	00000493          	li	s1,0
80014f90:	7ff00a93          	li	s5,2047
80014f94:	00200b13          	li	s6,2
80014f98:	ee5ff06f          	j	80014e7c <__muldf3+0x78>
  FP_UNPACK_D (B, b);
80014f9c:	017967b3          	or	a5,s2,s7
80014fa0:	06078e63          	beqz	a5,8001501c <__muldf3+0x218>
80014fa4:	04090063          	beqz	s2,80014fe4 <__muldf3+0x1e0>
80014fa8:	00090513          	mv	a0,s2
80014fac:	518030ef          	jal	ra,800184c4 <__clzsi2>
80014fb0:	ff550693          	addi	a3,a0,-11
80014fb4:	01c00793          	li	a5,28
80014fb8:	02d7ce63          	blt	a5,a3,80014ff4 <__muldf3+0x1f0>
80014fbc:	01d00793          	li	a5,29
80014fc0:	ff850713          	addi	a4,a0,-8
80014fc4:	40d787b3          	sub	a5,a5,a3
80014fc8:	00e91933          	sll	s2,s2,a4
80014fcc:	00fbd7b3          	srl	a5,s7,a5
80014fd0:	0127e7b3          	or	a5,a5,s2
80014fd4:	00eb9733          	sll	a4,s7,a4
80014fd8:	c0d00693          	li	a3,-1011
80014fdc:	40a68533          	sub	a0,a3,a0
80014fe0:	ee1ff06f          	j	80014ec0 <__muldf3+0xbc>
80014fe4:	000b8513          	mv	a0,s7
80014fe8:	4dc030ef          	jal	ra,800184c4 <__clzsi2>
80014fec:	02050513          	addi	a0,a0,32
80014ff0:	fc1ff06f          	j	80014fb0 <__muldf3+0x1ac>
80014ff4:	fd850793          	addi	a5,a0,-40
80014ff8:	00fb97b3          	sll	a5,s7,a5
80014ffc:	00000713          	li	a4,0
80015000:	fd9ff06f          	j	80014fd8 <__muldf3+0x1d4>
80015004:	017967b3          	or	a5,s2,s7
80015008:	02078263          	beqz	a5,8001502c <__muldf3+0x228>
8001500c:	00090793          	mv	a5,s2
80015010:	7ff00513          	li	a0,2047
80015014:	00300693          	li	a3,3
80015018:	eadff06f          	j	80014ec4 <__muldf3+0xc0>
8001501c:	00000713          	li	a4,0
80015020:	00000513          	li	a0,0
80015024:	00100693          	li	a3,1
80015028:	e9dff06f          	j	80014ec4 <__muldf3+0xc0>
8001502c:	00000713          	li	a4,0
80015030:	7ff00513          	li	a0,2047
80015034:	00200693          	li	a3,2
80015038:	e8dff06f          	j	80014ec4 <__muldf3+0xc0>
8001503c:	00010fb7          	lui	t6,0x10
80015040:	ffff8f13          	addi	t5,t6,-1 # ffff <_HEAP_SIZE+0xefff>
  FP_MUL_D (R, A, B);
80015044:	0104d693          	srli	a3,s1,0x10
80015048:	01075313          	srli	t1,a4,0x10
8001504c:	01e4f4b3          	and	s1,s1,t5
80015050:	01e77733          	and	a4,a4,t5
80015054:	029308b3          	mul	a7,t1,s1
80015058:	029705b3          	mul	a1,a4,s1
8001505c:	02e682b3          	mul	t0,a3,a4
80015060:	00588e33          	add	t3,a7,t0
80015064:	0105d893          	srli	a7,a1,0x10
80015068:	01c888b3          	add	a7,a7,t3
8001506c:	02668eb3          	mul	t4,a3,t1
80015070:	0058f463          	bleu	t0,a7,80015078 <__muldf3+0x274>
80015074:	01fe8eb3          	add	t4,t4,t6
80015078:	0108d913          	srli	s2,a7,0x10
8001507c:	01e8f8b3          	and	a7,a7,t5
80015080:	0107df93          	srli	t6,a5,0x10
80015084:	01e5f5b3          	and	a1,a1,t5
80015088:	01e7f3b3          	and	t2,a5,t5
8001508c:	01089893          	slli	a7,a7,0x10
80015090:	00b888b3          	add	a7,a7,a1
80015094:	027687b3          	mul	a5,a3,t2
80015098:	029385b3          	mul	a1,t2,s1
8001509c:	029f84b3          	mul	s1,t6,s1
800150a0:	00f48e33          	add	t3,s1,a5
800150a4:	0105d493          	srli	s1,a1,0x10
800150a8:	01c484b3          	add	s1,s1,t3
800150ac:	03f686b3          	mul	a3,a3,t6
800150b0:	00f4f663          	bleu	a5,s1,800150bc <__muldf3+0x2b8>
800150b4:	000107b7          	lui	a5,0x10
800150b8:	00f686b3          	add	a3,a3,a5
800150bc:	0104df13          	srli	t5,s1,0x10
800150c0:	000109b7          	lui	s3,0x10
800150c4:	00df0f33          	add	t5,t5,a3
800150c8:	fff98693          	addi	a3,s3,-1 # ffff <_HEAP_SIZE+0xefff>
800150cc:	00d4f4b3          	and	s1,s1,a3
800150d0:	00d5f5b3          	and	a1,a1,a3
800150d4:	01045793          	srli	a5,s0,0x10
800150d8:	01049493          	slli	s1,s1,0x10
800150dc:	00d47433          	and	s0,s0,a3
800150e0:	00b484b3          	add	s1,s1,a1
800150e4:	028706b3          	mul	a3,a4,s0
800150e8:	00990933          	add	s2,s2,s1
800150ec:	02e78e33          	mul	t3,a5,a4
800150f0:	028305b3          	mul	a1,t1,s0
800150f4:	02f30733          	mul	a4,t1,a5
800150f8:	01c58333          	add	t1,a1,t3
800150fc:	0106d593          	srli	a1,a3,0x10
80015100:	006585b3          	add	a1,a1,t1
80015104:	01c5f463          	bleu	t3,a1,8001510c <__muldf3+0x308>
80015108:	01370733          	add	a4,a4,s3
8001510c:	0105d313          	srli	t1,a1,0x10
80015110:	000109b7          	lui	s3,0x10
80015114:	00e302b3          	add	t0,t1,a4
80015118:	fff98713          	addi	a4,s3,-1 # ffff <_HEAP_SIZE+0xefff>
8001511c:	00e5f5b3          	and	a1,a1,a4
80015120:	00e6f6b3          	and	a3,a3,a4
80015124:	02838333          	mul	t1,t2,s0
80015128:	01059593          	slli	a1,a1,0x10
8001512c:	00d585b3          	add	a1,a1,a3
80015130:	02778733          	mul	a4,a5,t2
80015134:	028f8433          	mul	s0,t6,s0
80015138:	02ff8e33          	mul	t3,t6,a5
8001513c:	00e40433          	add	s0,s0,a4
80015140:	01035793          	srli	a5,t1,0x10
80015144:	00878433          	add	s0,a5,s0
80015148:	00e47463          	bleu	a4,s0,80015150 <__muldf3+0x34c>
8001514c:	013e0e33          	add	t3,t3,s3
80015150:	000107b7          	lui	a5,0x10
80015154:	fff78793          	addi	a5,a5,-1 # ffff <_HEAP_SIZE+0xefff>
80015158:	00f476b3          	and	a3,s0,a5
8001515c:	00f37333          	and	t1,t1,a5
80015160:	01069693          	slli	a3,a3,0x10
80015164:	012e8eb3          	add	t4,t4,s2
80015168:	006686b3          	add	a3,a3,t1
8001516c:	009eb4b3          	sltu	s1,t4,s1
80015170:	01e686b3          	add	a3,a3,t5
80015174:	009687b3          	add	a5,a3,s1
80015178:	00be8eb3          	add	t4,t4,a1
8001517c:	00beb5b3          	sltu	a1,t4,a1
80015180:	00578333          	add	t1,a5,t0
80015184:	00b30fb3          	add	t6,t1,a1
80015188:	01e6b6b3          	sltu	a3,a3,t5
8001518c:	0097b7b3          	sltu	a5,a5,s1
80015190:	00f6e7b3          	or	a5,a3,a5
80015194:	01045413          	srli	s0,s0,0x10
80015198:	00533333          	sltu	t1,t1,t0
8001519c:	00bfb5b3          	sltu	a1,t6,a1
800151a0:	008787b3          	add	a5,a5,s0
800151a4:	00b365b3          	or	a1,t1,a1
800151a8:	00b787b3          	add	a5,a5,a1
800151ac:	01c787b3          	add	a5,a5,t3
800151b0:	017fd713          	srli	a4,t6,0x17
800151b4:	00979793          	slli	a5,a5,0x9
800151b8:	00e7e7b3          	or	a5,a5,a4
800151bc:	009e9713          	slli	a4,t4,0x9
800151c0:	01176733          	or	a4,a4,a7
800151c4:	00e03733          	snez	a4,a4
800151c8:	017ede93          	srli	t4,t4,0x17
800151cc:	009f9693          	slli	a3,t6,0x9
800151d0:	01d76733          	or	a4,a4,t4
800151d4:	00d76733          	or	a4,a4,a3
800151d8:	00779693          	slli	a3,a5,0x7
800151dc:	1006da63          	bgez	a3,800152f0 <__muldf3+0x4ec>
800151e0:	00175693          	srli	a3,a4,0x1
800151e4:	00177713          	andi	a4,a4,1
800151e8:	00e6e733          	or	a4,a3,a4
800151ec:	01f79693          	slli	a3,a5,0x1f
800151f0:	00d76733          	or	a4,a4,a3
800151f4:	0017d793          	srli	a5,a5,0x1
  FP_PACK_D (r, R);
800151f8:	3ff80593          	addi	a1,a6,1023
800151fc:	0eb05e63          	blez	a1,800152f8 <__muldf3+0x4f4>
80015200:	00777693          	andi	a3,a4,7
80015204:	02068063          	beqz	a3,80015224 <__muldf3+0x420>
80015208:	00f77693          	andi	a3,a4,15
8001520c:	00400513          	li	a0,4
80015210:	00a68a63          	beq	a3,a0,80015224 <__muldf3+0x420>
80015214:	00470693          	addi	a3,a4,4
80015218:	00e6b733          	sltu	a4,a3,a4
8001521c:	00e787b3          	add	a5,a5,a4
80015220:	00068713          	mv	a4,a3
80015224:	00779693          	slli	a3,a5,0x7
80015228:	0006da63          	bgez	a3,8001523c <__muldf3+0x438>
8001522c:	ff0006b7          	lui	a3,0xff000
80015230:	fff68693          	addi	a3,a3,-1 # feffffff <__stack+0x7efc3533>
80015234:	00d7f7b3          	and	a5,a5,a3
80015238:	40080593          	addi	a1,a6,1024
8001523c:	7fe00693          	li	a3,2046
80015240:	16b6ce63          	blt	a3,a1,800153bc <__muldf3+0x5b8>
80015244:	00375693          	srli	a3,a4,0x3
80015248:	01d79713          	slli	a4,a5,0x1d
8001524c:	00d76733          	or	a4,a4,a3
80015250:	0037d793          	srli	a5,a5,0x3
80015254:	001006b7          	lui	a3,0x100
80015258:	fff68693          	addi	a3,a3,-1 # fffff <_HEAP_SIZE+0xfefff>
8001525c:	00d7f7b3          	and	a5,a5,a3
80015260:	7ff5f693          	andi	a3,a1,2047
80015264:	801005b7          	lui	a1,0x80100
80015268:	fff58593          	addi	a1,a1,-1 # 800fffff <__stack+0xc3533>
8001526c:	01469693          	slli	a3,a3,0x14
80015270:	00b7f7b3          	and	a5,a5,a1
  FP_HANDLE_EXCEPTIONS;

  return r;
}
80015274:	02c12083          	lw	ra,44(sp)
80015278:	02812403          	lw	s0,40(sp)
  FP_PACK_D (r, R);
8001527c:	01f61613          	slli	a2,a2,0x1f
80015280:	00d7e7b3          	or	a5,a5,a3
80015284:	00c7e6b3          	or	a3,a5,a2
}
80015288:	02412483          	lw	s1,36(sp)
8001528c:	02012903          	lw	s2,32(sp)
80015290:	01c12983          	lw	s3,28(sp)
80015294:	01812a03          	lw	s4,24(sp)
80015298:	01412a83          	lw	s5,20(sp)
8001529c:	01012b03          	lw	s6,16(sp)
800152a0:	00c12b83          	lw	s7,12(sp)
800152a4:	00070513          	mv	a0,a4
800152a8:	00068593          	mv	a1,a3
800152ac:	03010113          	addi	sp,sp,48
800152b0:	00008067          	ret
  FP_UNPACK_D (A, a);
800152b4:	00098613          	mv	a2,s3
  FP_MUL_D (R, A, B);
800152b8:	00040793          	mv	a5,s0
800152bc:	00048713          	mv	a4,s1
800152c0:	000b0693          	mv	a3,s6
  FP_PACK_D (r, R);
800152c4:	00200593          	li	a1,2
800152c8:	0eb68a63          	beq	a3,a1,800153bc <__muldf3+0x5b8>
800152cc:	00300593          	li	a1,3
800152d0:	0cb68c63          	beq	a3,a1,800153a8 <__muldf3+0x5a4>
800152d4:	00100593          	li	a1,1
800152d8:	f2b690e3          	bne	a3,a1,800151f8 <__muldf3+0x3f4>
800152dc:	00000793          	li	a5,0
800152e0:	00000713          	li	a4,0
800152e4:	0880006f          	j	8001536c <__muldf3+0x568>
  FP_UNPACK_D (B, b);
800152e8:	000a0613          	mv	a2,s4
800152ec:	fd9ff06f          	j	800152c4 <__muldf3+0x4c0>
  FP_MUL_D (R, A, B);
800152f0:	00050813          	mv	a6,a0
800152f4:	f05ff06f          	j	800151f8 <__muldf3+0x3f4>
  FP_PACK_D (r, R);
800152f8:	00100513          	li	a0,1
800152fc:	40b50533          	sub	a0,a0,a1
80015300:	03800693          	li	a3,56
80015304:	fca6cce3          	blt	a3,a0,800152dc <__muldf3+0x4d8>
80015308:	01f00693          	li	a3,31
8001530c:	06a6c463          	blt	a3,a0,80015374 <__muldf3+0x570>
80015310:	41e80813          	addi	a6,a6,1054
80015314:	010796b3          	sll	a3,a5,a6
80015318:	00a755b3          	srl	a1,a4,a0
8001531c:	01071733          	sll	a4,a4,a6
80015320:	00b6e6b3          	or	a3,a3,a1
80015324:	00e03733          	snez	a4,a4
80015328:	00e6e733          	or	a4,a3,a4
8001532c:	00a7d7b3          	srl	a5,a5,a0
80015330:	00777693          	andi	a3,a4,7
80015334:	02068063          	beqz	a3,80015354 <__muldf3+0x550>
80015338:	00f77693          	andi	a3,a4,15
8001533c:	00400593          	li	a1,4
80015340:	00b68a63          	beq	a3,a1,80015354 <__muldf3+0x550>
80015344:	00470693          	addi	a3,a4,4
80015348:	00e6b733          	sltu	a4,a3,a4
8001534c:	00e787b3          	add	a5,a5,a4
80015350:	00068713          	mv	a4,a3
80015354:	00879693          	slli	a3,a5,0x8
80015358:	0606ca63          	bltz	a3,800153cc <__muldf3+0x5c8>
8001535c:	01d79693          	slli	a3,a5,0x1d
80015360:	00375713          	srli	a4,a4,0x3
80015364:	00e6e733          	or	a4,a3,a4
80015368:	0037d793          	srli	a5,a5,0x3
8001536c:	00000593          	li	a1,0
80015370:	ee5ff06f          	j	80015254 <__muldf3+0x450>
80015374:	fe100693          	li	a3,-31
80015378:	40b686b3          	sub	a3,a3,a1
8001537c:	02000893          	li	a7,32
80015380:	00d7d6b3          	srl	a3,a5,a3
80015384:	00000593          	li	a1,0
80015388:	01150663          	beq	a0,a7,80015394 <__muldf3+0x590>
8001538c:	43e80813          	addi	a6,a6,1086
80015390:	010795b3          	sll	a1,a5,a6
80015394:	00e5e733          	or	a4,a1,a4
80015398:	00e03733          	snez	a4,a4
8001539c:	00e6e733          	or	a4,a3,a4
800153a0:	00000793          	li	a5,0
800153a4:	f8dff06f          	j	80015330 <__muldf3+0x52c>
800153a8:	000807b7          	lui	a5,0x80
800153ac:	00000713          	li	a4,0
800153b0:	7ff00593          	li	a1,2047
800153b4:	00000613          	li	a2,0
800153b8:	e9dff06f          	j	80015254 <__muldf3+0x450>
800153bc:	00000793          	li	a5,0
800153c0:	00000713          	li	a4,0
800153c4:	7ff00593          	li	a1,2047
800153c8:	e8dff06f          	j	80015254 <__muldf3+0x450>
800153cc:	00000793          	li	a5,0
800153d0:	00000713          	li	a4,0
800153d4:	00100593          	li	a1,1
800153d8:	e7dff06f          	j	80015254 <__muldf3+0x450>

800153dc <__eqtf2>:
#include "soft-fp.h"
#include "quad.h"

CMPtype
__eqtf2 (TFtype a, TFtype b)
{
800153dc:	00c52783          	lw	a5,12(a0)
800153e0:	0005af03          	lw	t5,0(a1)
800153e4:	0045af83          	lw	t6,4(a1)
800153e8:	0085a283          	lw	t0,8(a1)
800153ec:	00c5a583          	lw	a1,12(a1)
  FP_DECL_Q (A);
  FP_DECL_Q (B);
  CMPtype r;

  FP_INIT_EXCEPTIONS;
  FP_UNPACK_RAW_Q (A, a);
800153f0:	00008737          	lui	a4,0x8
800153f4:	0107d693          	srli	a3,a5,0x10
800153f8:	fff70713          	addi	a4,a4,-1 # 7fff <_HEAP_SIZE+0x6fff>
800153fc:	01079813          	slli	a6,a5,0x10
  FP_UNPACK_RAW_Q (B, b);
80015400:	01059e93          	slli	t4,a1,0x10
  FP_UNPACK_RAW_Q (A, a);
80015404:	01f7d613          	srli	a2,a5,0x1f
80015408:	00e6f6b3          	and	a3,a3,a4
  FP_UNPACK_RAW_Q (B, b);
8001540c:	0105d793          	srli	a5,a1,0x10
{
80015410:	ff010113          	addi	sp,sp,-16
80015414:	00052883          	lw	a7,0(a0)
80015418:	00452303          	lw	t1,4(a0)
8001541c:	00852e03          	lw	t3,8(a0)
  FP_UNPACK_RAW_Q (A, a);
80015420:	01085813          	srli	a6,a6,0x10
  FP_UNPACK_RAW_Q (B, b);
80015424:	010ede93          	srli	t4,t4,0x10
80015428:	00e7f7b3          	and	a5,a5,a4
8001542c:	01f5d593          	srli	a1,a1,0x1f
  FP_CMP_EQ_Q (r, A, B, 1);
80015430:	02e69063          	bne	a3,a4,80015450 <__eqtf2+0x74>
80015434:	0068e733          	or	a4,a7,t1
80015438:	01c76733          	or	a4,a4,t3
8001543c:	01076733          	or	a4,a4,a6
80015440:	00100513          	li	a0,1
80015444:	04071a63          	bnez	a4,80015498 <__eqtf2+0xbc>
80015448:	04d79863          	bne	a5,a3,80015498 <__eqtf2+0xbc>
8001544c:	0080006f          	j	80015454 <__eqtf2+0x78>
80015450:	00e79c63          	bne	a5,a4,80015468 <__eqtf2+0x8c>
80015454:	01ff6733          	or	a4,t5,t6
80015458:	00576733          	or	a4,a4,t0
8001545c:	01d76733          	or	a4,a4,t4
80015460:	00100513          	li	a0,1
80015464:	02071a63          	bnez	a4,80015498 <__eqtf2+0xbc>
80015468:	00100513          	li	a0,1
8001546c:	02d79663          	bne	a5,a3,80015498 <__eqtf2+0xbc>
80015470:	03e89463          	bne	a7,t5,80015498 <__eqtf2+0xbc>
80015474:	03f31263          	bne	t1,t6,80015498 <__eqtf2+0xbc>
80015478:	025e1063          	bne	t3,t0,80015498 <__eqtf2+0xbc>
8001547c:	01d81e63          	bne	a6,t4,80015498 <__eqtf2+0xbc>
80015480:	02b60063          	beq	a2,a1,800154a0 <__eqtf2+0xc4>
80015484:	00079a63          	bnez	a5,80015498 <__eqtf2+0xbc>
80015488:	0068e533          	or	a0,a7,t1
8001548c:	01c56533          	or	a0,a0,t3
80015490:	01056533          	or	a0,a0,a6
80015494:	00a03533          	snez	a0,a0
  FP_HANDLE_EXCEPTIONS;

  return r;
}
80015498:	01010113          	addi	sp,sp,16
8001549c:	00008067          	ret
  FP_CMP_EQ_Q (r, A, B, 1);
800154a0:	00000513          	li	a0,0
800154a4:	ff5ff06f          	j	80015498 <__eqtf2+0xbc>

800154a8 <__getf2>:
#include "soft-fp.h"
#include "quad.h"

CMPtype
__getf2 (TFtype a, TFtype b)
{
800154a8:	00c52783          	lw	a5,12(a0)
800154ac:	00c5a883          	lw	a7,12(a1)
800154b0:	00052f03          	lw	t5,0(a0)
800154b4:	00452603          	lw	a2,4(a0)
800154b8:	00852803          	lw	a6,8(a0)
  FP_DECL_Q (A);
  FP_DECL_Q (B);
  CMPtype r;

  FP_INIT_EXCEPTIONS;
  FP_UNPACK_RAW_Q (A, a);
800154bc:	00008537          	lui	a0,0x8
800154c0:	0107d713          	srli	a4,a5,0x10
800154c4:	fff50513          	addi	a0,a0,-1 # 7fff <_HEAP_SIZE+0x6fff>
  FP_UNPACK_RAW_Q (B, b);
800154c8:	01089e93          	slli	t4,a7,0x10
800154cc:	0108d693          	srli	a3,a7,0x10
{
800154d0:	0005a283          	lw	t0,0(a1)
800154d4:	0045a303          	lw	t1,4(a1)
800154d8:	0085ae03          	lw	t3,8(a1)
  FP_UNPACK_RAW_Q (A, a);
800154dc:	00a77733          	and	a4,a4,a0
800154e0:	01079593          	slli	a1,a5,0x10
{
800154e4:	ff010113          	addi	sp,sp,-16
  FP_UNPACK_RAW_Q (A, a);
800154e8:	0105d593          	srli	a1,a1,0x10
800154ec:	01f7d793          	srli	a5,a5,0x1f
  FP_UNPACK_RAW_Q (B, b);
800154f0:	010ede93          	srli	t4,t4,0x10
800154f4:	00a6f6b3          	and	a3,a3,a0
800154f8:	01f8d893          	srli	a7,a7,0x1f
  FP_CMP_Q (r, A, B, -2, 2);
800154fc:	02a71063          	bne	a4,a0,8001551c <__getf2+0x74>
80015500:	00cf6fb3          	or	t6,t5,a2
80015504:	010fefb3          	or	t6,t6,a6
80015508:	00bfefb3          	or	t6,t6,a1
8001550c:	ffe00513          	li	a0,-2
80015510:	0e0f8063          	beqz	t6,800155f0 <__getf2+0x148>
  FP_HANDLE_EXCEPTIONS;

  return r;
}
80015514:	01010113          	addi	sp,sp,16
80015518:	00008067          	ret
  FP_CMP_Q (r, A, B, -2, 2);
8001551c:	02a69863          	bne	a3,a0,8001554c <__getf2+0xa4>
80015520:	0062efb3          	or	t6,t0,t1
80015524:	01cfefb3          	or	t6,t6,t3
80015528:	01dfefb3          	or	t6,t6,t4
8001552c:	ffe00513          	li	a0,-2
80015530:	fe0f92e3          	bnez	t6,80015514 <__getf2+0x6c>
80015534:	04071263          	bnez	a4,80015578 <__getf2+0xd0>
80015538:	00cf6533          	or	a0,t5,a2
8001553c:	01056533          	or	a0,a0,a6
80015540:	00b56533          	or	a0,a0,a1
80015544:	00153513          	seqz	a0,a0
80015548:	02c0006f          	j	80015574 <__getf2+0xcc>
8001554c:	0a071463          	bnez	a4,800155f4 <__getf2+0x14c>
80015550:	00cf6533          	or	a0,t5,a2
80015554:	01056533          	or	a0,a0,a6
80015558:	00b56533          	or	a0,a0,a1
8001555c:	00153513          	seqz	a0,a0
80015560:	00069a63          	bnez	a3,80015574 <__getf2+0xcc>
80015564:	0062efb3          	or	t6,t0,t1
80015568:	01cfefb3          	or	t6,t6,t3
8001556c:	01dfefb3          	or	t6,t6,t4
80015570:	060f8c63          	beqz	t6,800155e8 <__getf2+0x140>
80015574:	00051a63          	bnez	a0,80015588 <__getf2+0xe0>
80015578:	01178e63          	beq	a5,a7,80015594 <__getf2+0xec>
8001557c:	00100513          	li	a0,1
80015580:	f8078ae3          	beqz	a5,80015514 <__getf2+0x6c>
80015584:	0080006f          	j	8001558c <__getf2+0xe4>
80015588:	f80896e3          	bnez	a7,80015514 <__getf2+0x6c>
8001558c:	fff00513          	li	a0,-1
80015590:	f85ff06f          	j	80015514 <__getf2+0x6c>
80015594:	fee6c4e3          	blt	a3,a4,8001557c <__getf2+0xd4>
80015598:	00d75a63          	ble	a3,a4,800155ac <__getf2+0x104>
8001559c:	fff00513          	li	a0,-1
800155a0:	f6078ae3          	beqz	a5,80015514 <__getf2+0x6c>
800155a4:	00100513          	li	a0,1
800155a8:	f6dff06f          	j	80015514 <__getf2+0x6c>
800155ac:	fcbee8e3          	bltu	t4,a1,8001557c <__getf2+0xd4>
800155b0:	03d59663          	bne	a1,t4,800155dc <__getf2+0x134>
800155b4:	fd0e64e3          	bltu	t3,a6,8001557c <__getf2+0xd4>
800155b8:	05c81463          	bne	a6,t3,80015600 <__getf2+0x158>
800155bc:	fcc360e3          	bltu	t1,a2,8001557c <__getf2+0xd4>
800155c0:	00661463          	bne	a2,t1,800155c8 <__getf2+0x120>
800155c4:	fbe2ece3          	bltu	t0,t5,8001557c <__getf2+0xd4>
800155c8:	fc666ae3          	bltu	a2,t1,8001559c <__getf2+0xf4>
800155cc:	00000513          	li	a0,0
800155d0:	f46612e3          	bne	a2,t1,80015514 <__getf2+0x6c>
800155d4:	fc5f64e3          	bltu	t5,t0,8001559c <__getf2+0xf4>
800155d8:	f3dff06f          	j	80015514 <__getf2+0x6c>
800155dc:	fdd5e0e3          	bltu	a1,t4,8001559c <__getf2+0xf4>
800155e0:	00000513          	li	a0,0
800155e4:	f31ff06f          	j	80015514 <__getf2+0x6c>
800155e8:	fe051ce3          	bnez	a0,800155e0 <__getf2+0x138>
800155ec:	f91ff06f          	j	8001557c <__getf2+0xd4>
800155f0:	f2e688e3          	beq	a3,a4,80015520 <__getf2+0x78>
800155f4:	00000513          	li	a0,0
800155f8:	f60686e3          	beqz	a3,80015564 <__getf2+0xbc>
800155fc:	f7dff06f          	j	80015578 <__getf2+0xd0>
80015600:	f9c86ee3          	bltu	a6,t3,8001559c <__getf2+0xf4>
80015604:	fddff06f          	j	800155e0 <__getf2+0x138>

80015608 <__letf2>:
#include "soft-fp.h"
#include "quad.h"

CMPtype
__letf2 (TFtype a, TFtype b)
{
80015608:	00c52783          	lw	a5,12(a0)
8001560c:	00c5a883          	lw	a7,12(a1)
80015610:	00052f03          	lw	t5,0(a0)
80015614:	00452603          	lw	a2,4(a0)
80015618:	00852803          	lw	a6,8(a0)
  FP_DECL_Q (A);
  FP_DECL_Q (B);
  CMPtype r;

  FP_INIT_EXCEPTIONS;
  FP_UNPACK_RAW_Q (A, a);
8001561c:	00008537          	lui	a0,0x8
80015620:	0107d713          	srli	a4,a5,0x10
80015624:	fff50513          	addi	a0,a0,-1 # 7fff <_HEAP_SIZE+0x6fff>
  FP_UNPACK_RAW_Q (B, b);
80015628:	01089e93          	slli	t4,a7,0x10
8001562c:	0108d693          	srli	a3,a7,0x10
{
80015630:	0005a283          	lw	t0,0(a1)
80015634:	0045a303          	lw	t1,4(a1)
80015638:	0085ae03          	lw	t3,8(a1)
  FP_UNPACK_RAW_Q (A, a);
8001563c:	00a77733          	and	a4,a4,a0
80015640:	01079593          	slli	a1,a5,0x10
{
80015644:	ff010113          	addi	sp,sp,-16
  FP_UNPACK_RAW_Q (A, a);
80015648:	0105d593          	srli	a1,a1,0x10
8001564c:	01f7d793          	srli	a5,a5,0x1f
  FP_UNPACK_RAW_Q (B, b);
80015650:	010ede93          	srli	t4,t4,0x10
80015654:	00a6f6b3          	and	a3,a3,a0
80015658:	01f8d893          	srli	a7,a7,0x1f
  FP_CMP_Q (r, A, B, 2, 2);
8001565c:	02a71063          	bne	a4,a0,8001567c <__letf2+0x74>
80015660:	00cf6fb3          	or	t6,t5,a2
80015664:	010fefb3          	or	t6,t6,a6
80015668:	00bfefb3          	or	t6,t6,a1
8001566c:	00200513          	li	a0,2
80015670:	0e0f8063          	beqz	t6,80015750 <__letf2+0x148>
  FP_HANDLE_EXCEPTIONS;

  return r;
}
80015674:	01010113          	addi	sp,sp,16
80015678:	00008067          	ret
  FP_CMP_Q (r, A, B, 2, 2);
8001567c:	02a69863          	bne	a3,a0,800156ac <__letf2+0xa4>
80015680:	0062efb3          	or	t6,t0,t1
80015684:	01cfefb3          	or	t6,t6,t3
80015688:	01dfefb3          	or	t6,t6,t4
8001568c:	00200513          	li	a0,2
80015690:	fe0f92e3          	bnez	t6,80015674 <__letf2+0x6c>
80015694:	04071263          	bnez	a4,800156d8 <__letf2+0xd0>
80015698:	00cf6533          	or	a0,t5,a2
8001569c:	01056533          	or	a0,a0,a6
800156a0:	00b56533          	or	a0,a0,a1
800156a4:	00153513          	seqz	a0,a0
800156a8:	02c0006f          	j	800156d4 <__letf2+0xcc>
800156ac:	0a071463          	bnez	a4,80015754 <__letf2+0x14c>
800156b0:	00cf6533          	or	a0,t5,a2
800156b4:	01056533          	or	a0,a0,a6
800156b8:	00b56533          	or	a0,a0,a1
800156bc:	00153513          	seqz	a0,a0
800156c0:	00069a63          	bnez	a3,800156d4 <__letf2+0xcc>
800156c4:	0062efb3          	or	t6,t0,t1
800156c8:	01cfefb3          	or	t6,t6,t3
800156cc:	01dfefb3          	or	t6,t6,t4
800156d0:	060f8c63          	beqz	t6,80015748 <__letf2+0x140>
800156d4:	00051a63          	bnez	a0,800156e8 <__letf2+0xe0>
800156d8:	01178e63          	beq	a5,a7,800156f4 <__letf2+0xec>
800156dc:	00100513          	li	a0,1
800156e0:	f8078ae3          	beqz	a5,80015674 <__letf2+0x6c>
800156e4:	0080006f          	j	800156ec <__letf2+0xe4>
800156e8:	f80896e3          	bnez	a7,80015674 <__letf2+0x6c>
800156ec:	fff00513          	li	a0,-1
800156f0:	f85ff06f          	j	80015674 <__letf2+0x6c>
800156f4:	fee6c4e3          	blt	a3,a4,800156dc <__letf2+0xd4>
800156f8:	00d75a63          	ble	a3,a4,8001570c <__letf2+0x104>
800156fc:	fff00513          	li	a0,-1
80015700:	f6078ae3          	beqz	a5,80015674 <__letf2+0x6c>
80015704:	00100513          	li	a0,1
80015708:	f6dff06f          	j	80015674 <__letf2+0x6c>
8001570c:	fcbee8e3          	bltu	t4,a1,800156dc <__letf2+0xd4>
80015710:	03d59663          	bne	a1,t4,8001573c <__letf2+0x134>
80015714:	fd0e64e3          	bltu	t3,a6,800156dc <__letf2+0xd4>
80015718:	05c81463          	bne	a6,t3,80015760 <__letf2+0x158>
8001571c:	fcc360e3          	bltu	t1,a2,800156dc <__letf2+0xd4>
80015720:	00661463          	bne	a2,t1,80015728 <__letf2+0x120>
80015724:	fbe2ece3          	bltu	t0,t5,800156dc <__letf2+0xd4>
80015728:	fc666ae3          	bltu	a2,t1,800156fc <__letf2+0xf4>
8001572c:	00000513          	li	a0,0
80015730:	f46612e3          	bne	a2,t1,80015674 <__letf2+0x6c>
80015734:	fc5f64e3          	bltu	t5,t0,800156fc <__letf2+0xf4>
80015738:	f3dff06f          	j	80015674 <__letf2+0x6c>
8001573c:	fdd5e0e3          	bltu	a1,t4,800156fc <__letf2+0xf4>
80015740:	00000513          	li	a0,0
80015744:	f31ff06f          	j	80015674 <__letf2+0x6c>
80015748:	fe051ce3          	bnez	a0,80015740 <__letf2+0x138>
8001574c:	f91ff06f          	j	800156dc <__letf2+0xd4>
80015750:	f2e688e3          	beq	a3,a4,80015680 <__letf2+0x78>
80015754:	00000513          	li	a0,0
80015758:	f60686e3          	beqz	a3,800156c4 <__letf2+0xbc>
8001575c:	f7dff06f          	j	800156d8 <__letf2+0xd0>
80015760:	f9c86ee3          	bltu	a6,t3,800156fc <__letf2+0xf4>
80015764:	fddff06f          	j	80015740 <__letf2+0x138>

80015768 <__multf3>:
#include "soft-fp.h"
#include "quad.h"

TFtype
__multf3 (TFtype a, TFtype b)
{
80015768:	f4010113          	addi	sp,sp,-192
8001576c:	0b312623          	sw	s3,172(sp)
80015770:	00c5a983          	lw	s3,12(a1)
80015774:	0005a683          	lw	a3,0(a1)
80015778:	0045a783          	lw	a5,4(a1)
8001577c:	00a12623          	sw	a0,12(sp)
80015780:	0085a503          	lw	a0,8(a1)
80015784:	01099713          	slli	a4,s3,0x10
80015788:	0b212823          	sw	s2,176(sp)
8001578c:	0b412423          	sw	s4,168(sp)
80015790:	0b512223          	sw	s5,164(sp)
80015794:	0b612023          	sw	s6,160(sp)
80015798:	00062a03          	lw	s4,0(a2) # 1000000 <_HEAP_SIZE+0xfff000>
8001579c:	00462b03          	lw	s6,4(a2)
800157a0:	00862a83          	lw	s5,8(a2)
800157a4:	00c62903          	lw	s2,12(a2)
  FP_DECL_Q (B);
  FP_DECL_Q (R);
  TFtype r;

  FP_INIT_ROUNDMODE;
  FP_UNPACK_Q (A, a);
800157a8:	00008637          	lui	a2,0x8
{
800157ac:	0a912a23          	sw	s1,180(sp)
800157b0:	01075713          	srli	a4,a4,0x10
  FP_UNPACK_Q (A, a);
800157b4:	0109d493          	srli	s1,s3,0x10
800157b8:	fff60613          	addi	a2,a2,-1 # 7fff <_HEAP_SIZE+0x6fff>
800157bc:	07312623          	sw	s3,108(sp)
{
800157c0:	0a112e23          	sw	ra,188(sp)
800157c4:	0a812c23          	sw	s0,184(sp)
800157c8:	09712e23          	sw	s7,156(sp)
800157cc:	09812c23          	sw	s8,152(sp)
800157d0:	09912a23          	sw	s9,148(sp)
800157d4:	09a12823          	sw	s10,144(sp)
800157d8:	09b12623          	sw	s11,140(sp)
  FP_UNPACK_Q (A, a);
800157dc:	06d12023          	sw	a3,96(sp)
800157e0:	06f12223          	sw	a5,100(sp)
800157e4:	06a12423          	sw	a0,104(sp)
800157e8:	02d12823          	sw	a3,48(sp)
800157ec:	02f12a23          	sw	a5,52(sp)
800157f0:	02a12c23          	sw	a0,56(sp)
800157f4:	02e12e23          	sw	a4,60(sp)
800157f8:	00c4f4b3          	and	s1,s1,a2
800157fc:	01f9d993          	srli	s3,s3,0x1f
80015800:	12048863          	beqz	s1,80015930 <__multf3+0x1c8>
80015804:	24c48863          	beq	s1,a2,80015a54 <__multf3+0x2ec>
80015808:	000107b7          	lui	a5,0x10
8001580c:	00f767b3          	or	a5,a4,a5
80015810:	02f12e23          	sw	a5,60(sp)
80015814:	03010613          	addi	a2,sp,48
80015818:	03c10793          	addi	a5,sp,60
8001581c:	0007a703          	lw	a4,0(a5) # 10000 <_HEAP_SIZE+0xf000>
80015820:	ffc7a683          	lw	a3,-4(a5)
80015824:	ffc78793          	addi	a5,a5,-4
80015828:	00371713          	slli	a4,a4,0x3
8001582c:	01d6d693          	srli	a3,a3,0x1d
80015830:	00d76733          	or	a4,a4,a3
80015834:	00e7a223          	sw	a4,4(a5)
80015838:	fef612e3          	bne	a2,a5,8001581c <__multf3+0xb4>
8001583c:	03012783          	lw	a5,48(sp)
80015840:	ffffc537          	lui	a0,0xffffc
80015844:	00150513          	addi	a0,a0,1 # ffffc001 <__stack+0x7ffbf535>
80015848:	00379793          	slli	a5,a5,0x3
8001584c:	02f12823          	sw	a5,48(sp)
80015850:	00a484b3          	add	s1,s1,a0
80015854:	00000b93          	li	s7,0
80015858:	01091793          	slli	a5,s2,0x10
  FP_UNPACK_Q (B, b);
8001585c:	00008737          	lui	a4,0x8
80015860:	01095513          	srli	a0,s2,0x10
80015864:	0107d793          	srli	a5,a5,0x10
80015868:	fff70713          	addi	a4,a4,-1 # 7fff <_HEAP_SIZE+0x6fff>
8001586c:	07212623          	sw	s2,108(sp)
80015870:	07412023          	sw	s4,96(sp)
80015874:	07612223          	sw	s6,100(sp)
80015878:	07512423          	sw	s5,104(sp)
8001587c:	05412023          	sw	s4,64(sp)
80015880:	05612223          	sw	s6,68(sp)
80015884:	05512423          	sw	s5,72(sp)
80015888:	04f12623          	sw	a5,76(sp)
8001588c:	00e57533          	and	a0,a0,a4
80015890:	01f95913          	srli	s2,s2,0x1f
80015894:	1e050463          	beqz	a0,80015a7c <__multf3+0x314>
80015898:	30e50663          	beq	a0,a4,80015ba4 <__multf3+0x43c>
8001589c:	00010ab7          	lui	s5,0x10
800158a0:	0157eab3          	or	s5,a5,s5
800158a4:	05512623          	sw	s5,76(sp)
800158a8:	04010613          	addi	a2,sp,64
800158ac:	04c10793          	addi	a5,sp,76
800158b0:	0007a703          	lw	a4,0(a5)
800158b4:	ffc7a683          	lw	a3,-4(a5)
800158b8:	ffc78793          	addi	a5,a5,-4
800158bc:	00371713          	slli	a4,a4,0x3
800158c0:	01d6d693          	srli	a3,a3,0x1d
800158c4:	00d76733          	or	a4,a4,a3
800158c8:	00e7a223          	sw	a4,4(a5)
800158cc:	fef612e3          	bne	a2,a5,800158b0 <__multf3+0x148>
800158d0:	04012783          	lw	a5,64(sp)
800158d4:	00379793          	slli	a5,a5,0x3
800158d8:	04f12023          	sw	a5,64(sp)
800158dc:	ffffc7b7          	lui	a5,0xffffc
800158e0:	00178793          	addi	a5,a5,1 # ffffc001 <__stack+0x7ffbf535>
800158e4:	00f50533          	add	a0,a0,a5
800158e8:	00000713          	li	a4,0
  FP_MUL_Q (R, A, B);
800158ec:	0129c7b3          	xor	a5,s3,s2
800158f0:	00f12823          	sw	a5,16(sp)
800158f4:	009507b3          	add	a5,a0,s1
800158f8:	02f12023          	sw	a5,32(sp)
800158fc:	00178793          	addi	a5,a5,1
80015900:	00f12e23          	sw	a5,28(sp)
80015904:	002b9793          	slli	a5,s7,0x2
80015908:	00e7e7b3          	or	a5,a5,a4
8001590c:	fff78793          	addi	a5,a5,-1
80015910:	00e00693          	li	a3,14
80015914:	2af6ec63          	bltu	a3,a5,80015bcc <__multf3+0x464>
80015918:	800216b7          	lui	a3,0x80021
8001591c:	00279793          	slli	a5,a5,0x2
80015920:	c3068693          	addi	a3,a3,-976 # 80020c30 <__stack+0xfffe4164>
80015924:	00d787b3          	add	a5,a5,a3
80015928:	0007a783          	lw	a5,0(a5)
8001592c:	00078067          	jr	a5
  FP_UNPACK_Q (A, a);
80015930:	00d7e633          	or	a2,a5,a3
80015934:	00a66633          	or	a2,a2,a0
80015938:	00e66633          	or	a2,a2,a4
8001593c:	12060a63          	beqz	a2,80015a70 <__multf3+0x308>
80015940:	04070e63          	beqz	a4,8001599c <__multf3+0x234>
80015944:	00070513          	mv	a0,a4
80015948:	37d020ef          	jal	ra,800184c4 <__clzsi2>
8001594c:	ff450713          	addi	a4,a0,-12
80015950:	40575793          	srai	a5,a4,0x5
80015954:	01f77713          	andi	a4,a4,31
80015958:	06070c63          	beqz	a4,800159d0 <__multf3+0x268>
8001595c:	ffc00693          	li	a3,-4
80015960:	02d786b3          	mul	a3,a5,a3
80015964:	02000813          	li	a6,32
80015968:	00279593          	slli	a1,a5,0x2
8001596c:	ff000e13          	li	t3,-16
80015970:	40e80833          	sub	a6,a6,a4
80015974:	ffc68693          	addi	a3,a3,-4
80015978:	09c69463          	bne	a3,t3,80015a00 <__multf3+0x298>
8001597c:	08010693          	addi	a3,sp,128
80015980:	00b685b3          	add	a1,a3,a1
80015984:	03012683          	lw	a3,48(sp)
80015988:	fff78793          	addi	a5,a5,-1
8001598c:	00e69733          	sll	a4,a3,a4
80015990:	fae5a823          	sw	a4,-80(a1)
80015994:	fff00693          	li	a3,-1
80015998:	0a80006f          	j	80015a40 <__multf3+0x2d8>
8001599c:	00050863          	beqz	a0,800159ac <__multf3+0x244>
800159a0:	325020ef          	jal	ra,800184c4 <__clzsi2>
800159a4:	02050513          	addi	a0,a0,32
800159a8:	fa5ff06f          	j	8001594c <__multf3+0x1e4>
800159ac:	00078a63          	beqz	a5,800159c0 <__multf3+0x258>
800159b0:	00078513          	mv	a0,a5
800159b4:	311020ef          	jal	ra,800184c4 <__clzsi2>
800159b8:	04050513          	addi	a0,a0,64
800159bc:	f91ff06f          	j	8001594c <__multf3+0x1e4>
800159c0:	00068513          	mv	a0,a3
800159c4:	301020ef          	jal	ra,800184c4 <__clzsi2>
800159c8:	06050513          	addi	a0,a0,96
800159cc:	f81ff06f          	j	8001594c <__multf3+0x1e4>
800159d0:	ffc00613          	li	a2,-4
800159d4:	02c78633          	mul	a2,a5,a2
800159d8:	03010713          	addi	a4,sp,48
800159dc:	00300693          	li	a3,3
800159e0:	00c705b3          	add	a1,a4,a2
800159e4:	00c5a583          	lw	a1,12(a1)
800159e8:	fff68693          	addi	a3,a3,-1
800159ec:	ffc70713          	addi	a4,a4,-4
800159f0:	00b72823          	sw	a1,16(a4)
800159f4:	fef6d6e3          	ble	a5,a3,800159e0 <__multf3+0x278>
800159f8:	fff78793          	addi	a5,a5,-1
800159fc:	f99ff06f          	j	80015994 <__multf3+0x22c>
80015a00:	03010613          	addi	a2,sp,48
80015a04:	00d60333          	add	t1,a2,a3
80015a08:	00d588b3          	add	a7,a1,a3
80015a0c:	011608b3          	add	a7,a2,a7
80015a10:	00c32603          	lw	a2,12(t1)
80015a14:	01032303          	lw	t1,16(t1)
80015a18:	01065633          	srl	a2,a2,a6
80015a1c:	00e31333          	sll	t1,t1,a4
80015a20:	00666633          	or	a2,a2,t1
80015a24:	00c8a823          	sw	a2,16(a7)
80015a28:	f4dff06f          	j	80015974 <__multf3+0x20c>
80015a2c:	00279713          	slli	a4,a5,0x2
80015a30:	03010613          	addi	a2,sp,48
80015a34:	00e60733          	add	a4,a2,a4
80015a38:	00072023          	sw	zero,0(a4)
80015a3c:	fff78793          	addi	a5,a5,-1
80015a40:	fed796e3          	bne	a5,a3,80015a2c <__multf3+0x2c4>
80015a44:	ffffc4b7          	lui	s1,0xffffc
80015a48:	01148493          	addi	s1,s1,17 # ffffc011 <__stack+0x7ffbf545>
80015a4c:	40a484b3          	sub	s1,s1,a0
80015a50:	e05ff06f          	j	80015854 <__multf3+0xec>
80015a54:	00d7e7b3          	or	a5,a5,a3
80015a58:	00a7e7b3          	or	a5,a5,a0
80015a5c:	00e7e7b3          	or	a5,a5,a4
80015a60:	00200b93          	li	s7,2
80015a64:	de078ae3          	beqz	a5,80015858 <__multf3+0xf0>
80015a68:	00300b93          	li	s7,3
80015a6c:	dedff06f          	j	80015858 <__multf3+0xf0>
80015a70:	00000493          	li	s1,0
80015a74:	00100b93          	li	s7,1
80015a78:	de1ff06f          	j	80015858 <__multf3+0xf0>
  FP_UNPACK_Q (B, b);
80015a7c:	016a6733          	or	a4,s4,s6
80015a80:	01576733          	or	a4,a4,s5
80015a84:	00f76733          	or	a4,a4,a5
80015a88:	12070c63          	beqz	a4,80015bc0 <__multf3+0x458>
80015a8c:	04078e63          	beqz	a5,80015ae8 <__multf3+0x380>
80015a90:	00078513          	mv	a0,a5
80015a94:	231020ef          	jal	ra,800184c4 <__clzsi2>
80015a98:	ff450713          	addi	a4,a0,-12
80015a9c:	40575793          	srai	a5,a4,0x5
80015aa0:	01f77713          	andi	a4,a4,31
80015aa4:	06070e63          	beqz	a4,80015b20 <__multf3+0x3b8>
80015aa8:	ffc00693          	li	a3,-4
80015aac:	02d786b3          	mul	a3,a5,a3
80015ab0:	02000813          	li	a6,32
80015ab4:	00279593          	slli	a1,a5,0x2
80015ab8:	ff000e13          	li	t3,-16
80015abc:	40e80833          	sub	a6,a6,a4
80015ac0:	ffc68693          	addi	a3,a3,-4
80015ac4:	09c69663          	bne	a3,t3,80015b50 <__multf3+0x3e8>
80015ac8:	08010693          	addi	a3,sp,128
80015acc:	00b685b3          	add	a1,a3,a1
80015ad0:	04012683          	lw	a3,64(sp)
80015ad4:	fff78793          	addi	a5,a5,-1
80015ad8:	00e69733          	sll	a4,a3,a4
80015adc:	fce5a023          	sw	a4,-64(a1)
80015ae0:	fff00693          	li	a3,-1
80015ae4:	0ac0006f          	j	80015b90 <__multf3+0x428>
80015ae8:	000a8a63          	beqz	s5,80015afc <__multf3+0x394>
80015aec:	000a8513          	mv	a0,s5
80015af0:	1d5020ef          	jal	ra,800184c4 <__clzsi2>
80015af4:	02050513          	addi	a0,a0,32
80015af8:	fa1ff06f          	j	80015a98 <__multf3+0x330>
80015afc:	000b0a63          	beqz	s6,80015b10 <__multf3+0x3a8>
80015b00:	000b0513          	mv	a0,s6
80015b04:	1c1020ef          	jal	ra,800184c4 <__clzsi2>
80015b08:	04050513          	addi	a0,a0,64
80015b0c:	f8dff06f          	j	80015a98 <__multf3+0x330>
80015b10:	000a0513          	mv	a0,s4
80015b14:	1b1020ef          	jal	ra,800184c4 <__clzsi2>
80015b18:	06050513          	addi	a0,a0,96
80015b1c:	f7dff06f          	j	80015a98 <__multf3+0x330>
80015b20:	ffc00613          	li	a2,-4
80015b24:	02c78633          	mul	a2,a5,a2
80015b28:	04010713          	addi	a4,sp,64
80015b2c:	00300693          	li	a3,3
80015b30:	00c705b3          	add	a1,a4,a2
80015b34:	00c5a583          	lw	a1,12(a1)
80015b38:	fff68693          	addi	a3,a3,-1
80015b3c:	ffc70713          	addi	a4,a4,-4
80015b40:	00b72823          	sw	a1,16(a4)
80015b44:	fef6d6e3          	ble	a5,a3,80015b30 <__multf3+0x3c8>
80015b48:	fff78793          	addi	a5,a5,-1
80015b4c:	f95ff06f          	j	80015ae0 <__multf3+0x378>
80015b50:	04010613          	addi	a2,sp,64
80015b54:	00d60333          	add	t1,a2,a3
80015b58:	00d588b3          	add	a7,a1,a3
80015b5c:	011608b3          	add	a7,a2,a7
80015b60:	00c32603          	lw	a2,12(t1)
80015b64:	01032303          	lw	t1,16(t1)
80015b68:	01065633          	srl	a2,a2,a6
80015b6c:	00e31333          	sll	t1,t1,a4
80015b70:	00666633          	or	a2,a2,t1
80015b74:	00c8a823          	sw	a2,16(a7)
80015b78:	f49ff06f          	j	80015ac0 <__multf3+0x358>
80015b7c:	00279713          	slli	a4,a5,0x2
80015b80:	04010613          	addi	a2,sp,64
80015b84:	00e60733          	add	a4,a2,a4
80015b88:	00072023          	sw	zero,0(a4)
80015b8c:	fff78793          	addi	a5,a5,-1
80015b90:	fed796e3          	bne	a5,a3,80015b7c <__multf3+0x414>
80015b94:	ffffc7b7          	lui	a5,0xffffc
80015b98:	01178793          	addi	a5,a5,17 # ffffc011 <__stack+0x7ffbf545>
80015b9c:	40a78533          	sub	a0,a5,a0
80015ba0:	d49ff06f          	j	800158e8 <__multf3+0x180>
80015ba4:	016a6a33          	or	s4,s4,s6
80015ba8:	015a6ab3          	or	s5,s4,s5
80015bac:	00faeab3          	or	s5,s5,a5
80015bb0:	00200713          	li	a4,2
80015bb4:	d20a8ce3          	beqz	s5,800158ec <__multf3+0x184>
80015bb8:	00300713          	li	a4,3
80015bbc:	d31ff06f          	j	800158ec <__multf3+0x184>
80015bc0:	00000513          	li	a0,0
80015bc4:	00100713          	li	a4,1
80015bc8:	d25ff06f          	j	800158ec <__multf3+0x184>
  FP_MUL_Q (R, A, B);
80015bcc:	03012703          	lw	a4,48(sp)
80015bd0:	04012e03          	lw	t3,64(sp)
80015bd4:	00010537          	lui	a0,0x10
80015bd8:	fff50693          	addi	a3,a0,-1 # ffff <_HEAP_SIZE+0xefff>
80015bdc:	01075f93          	srli	t6,a4,0x10
80015be0:	010e5a93          	srli	s5,t3,0x10
80015be4:	00d77733          	and	a4,a4,a3
80015be8:	00de7e33          	and	t3,t3,a3
80015bec:	02ea87b3          	mul	a5,s5,a4
80015bf0:	02ee0633          	mul	a2,t3,a4
80015bf4:	03cf8833          	mul	a6,t6,t3
80015bf8:	010785b3          	add	a1,a5,a6
80015bfc:	01065793          	srli	a5,a2,0x10
80015c00:	00b787b3          	add	a5,a5,a1
80015c04:	035f8b33          	mul	s6,t6,s5
80015c08:	0107f463          	bleu	a6,a5,80015c10 <__multf3+0x4a8>
80015c0c:	00ab0b33          	add	s6,s6,a0
80015c10:	04412f03          	lw	t5,68(sp)
80015c14:	0107d293          	srli	t0,a5,0x10
80015c18:	00d7f7b3          	and	a5,a5,a3
80015c1c:	00d67633          	and	a2,a2,a3
80015c20:	01079793          	slli	a5,a5,0x10
80015c24:	00c787b3          	add	a5,a5,a2
80015c28:	010f5493          	srli	s1,t5,0x10
80015c2c:	00df7f33          	and	t5,t5,a3
80015c30:	02f12223          	sw	a5,36(sp)
80015c34:	06f12023          	sw	a5,96(sp)
80015c38:	02ef06b3          	mul	a3,t5,a4
80015c3c:	02e487b3          	mul	a5,s1,a4
80015c40:	03ef8633          	mul	a2,t6,t5
80015c44:	00c78533          	add	a0,a5,a2
80015c48:	0106d793          	srli	a5,a3,0x10
80015c4c:	00a787b3          	add	a5,a5,a0
80015c50:	029f8a33          	mul	s4,t6,s1
80015c54:	00c7f663          	bleu	a2,a5,80015c60 <__multf3+0x4f8>
80015c58:	00010637          	lui	a2,0x10
80015c5c:	00ca0a33          	add	s4,s4,a2
80015c60:	00010637          	lui	a2,0x10
80015c64:	fff60593          	addi	a1,a2,-1 # ffff <_HEAP_SIZE+0xefff>
80015c68:	00b7f533          	and	a0,a5,a1
80015c6c:	0107dd93          	srli	s11,a5,0x10
80015c70:	03412783          	lw	a5,52(sp)
80015c74:	00b6f6b3          	and	a3,a3,a1
80015c78:	01051513          	slli	a0,a0,0x10
80015c7c:	0107d913          	srli	s2,a5,0x10
80015c80:	00b7f5b3          	and	a1,a5,a1
80015c84:	00d50533          	add	a0,a0,a3
80015c88:	02ba87b3          	mul	a5,s5,a1
80015c8c:	00a282b3          	add	t0,t0,a0
80015c90:	02be06b3          	mul	a3,t3,a1
80015c94:	03c90333          	mul	t1,s2,t3
80015c98:	00678833          	add	a6,a5,t1
80015c9c:	0106d793          	srli	a5,a3,0x10
80015ca0:	010787b3          	add	a5,a5,a6
80015ca4:	032a88b3          	mul	a7,s5,s2
80015ca8:	0067f463          	bleu	t1,a5,80015cb0 <__multf3+0x548>
80015cac:	00c888b3          	add	a7,a7,a2
80015cb0:	0107d993          	srli	s3,a5,0x10
80015cb4:	011989b3          	add	s3,s3,a7
80015cb8:	000108b7          	lui	a7,0x10
80015cbc:	fff88613          	addi	a2,a7,-1 # ffff <_HEAP_SIZE+0xefff>
80015cc0:	00c7f833          	and	a6,a5,a2
80015cc4:	00c6f6b3          	and	a3,a3,a2
80015cc8:	01081813          	slli	a6,a6,0x10
80015ccc:	00d80833          	add	a6,a6,a3
80015cd0:	03e58633          	mul	a2,a1,t5
80015cd4:	03e907b3          	mul	a5,s2,t5
80015cd8:	01065e93          	srli	t4,a2,0x10
80015cdc:	02b486b3          	mul	a3,s1,a1
80015ce0:	00f686b3          	add	a3,a3,a5
80015ce4:	00de86b3          	add	a3,t4,a3
80015ce8:	03248333          	mul	t1,s1,s2
80015cec:	00f6f463          	bleu	a5,a3,80015cf4 <__multf3+0x58c>
80015cf0:	01130333          	add	t1,t1,a7
80015cf4:	0106d793          	srli	a5,a3,0x10
80015cf8:	04812e83          	lw	t4,72(sp)
80015cfc:	006787b3          	add	a5,a5,t1
80015d00:	000103b7          	lui	t2,0x10
80015d04:	02f12423          	sw	a5,40(sp)
80015d08:	fff38793          	addi	a5,t2,-1 # ffff <_HEAP_SIZE+0xefff>
80015d0c:	010ed413          	srli	s0,t4,0x10
80015d10:	00fefeb3          	and	t4,t4,a5
80015d14:	02e408b3          	mul	a7,s0,a4
80015d18:	00f67633          	and	a2,a2,a5
80015d1c:	00f6f6b3          	and	a3,a3,a5
80015d20:	01069693          	slli	a3,a3,0x10
80015d24:	00c686b3          	add	a3,a3,a2
80015d28:	02ee8333          	mul	t1,t4,a4
80015d2c:	03df8bb3          	mul	s7,t6,t4
80015d30:	017887b3          	add	a5,a7,s7
80015d34:	01035893          	srli	a7,t1,0x10
80015d38:	00f888b3          	add	a7,a7,a5
80015d3c:	028f8633          	mul	a2,t6,s0
80015d40:	0178f463          	bleu	s7,a7,80015d48 <__multf3+0x5e0>
80015d44:	00760633          	add	a2,a2,t2
80015d48:	0108d793          	srli	a5,a7,0x10
80015d4c:	00010c37          	lui	s8,0x10
80015d50:	00c787b3          	add	a5,a5,a2
80015d54:	fffc0613          	addi	a2,s8,-1 # ffff <_HEAP_SIZE+0xefff>
80015d58:	02f12623          	sw	a5,44(sp)
80015d5c:	00c8f7b3          	and	a5,a7,a2
80015d60:	03812883          	lw	a7,56(sp)
80015d64:	00c37333          	and	t1,t1,a2
80015d68:	01079793          	slli	a5,a5,0x10
80015d6c:	0108d393          	srli	t2,a7,0x10
80015d70:	00c8f633          	and	a2,a7,a2
80015d74:	006787b3          	add	a5,a5,t1
80015d78:	03c608b3          	mul	a7,a2,t3
80015d7c:	03c38cb3          	mul	s9,t2,t3
80015d80:	0108dd13          	srli	s10,a7,0x10
80015d84:	02ca8333          	mul	t1,s5,a2
80015d88:	01930333          	add	t1,t1,s9
80015d8c:	006d0333          	add	t1,s10,t1
80015d90:	027a8bb3          	mul	s7,s5,t2
80015d94:	01937463          	bleu	s9,t1,80015d9c <__multf3+0x634>
80015d98:	018b8bb3          	add	s7,s7,s8
80015d9c:	01035c13          	srli	s8,t1,0x10
80015da0:	017c0bb3          	add	s7,s8,s7
80015da4:	00010c37          	lui	s8,0x10
80015da8:	005b02b3          	add	t0,s6,t0
80015dac:	fffc0c93          	addi	s9,s8,-1 # ffff <_HEAP_SIZE+0xefff>
80015db0:	00a2b533          	sltu	a0,t0,a0
80015db4:	01937333          	and	t1,t1,s9
80015db8:	00ad8db3          	add	s11,s11,a0
80015dbc:	01031313          	slli	t1,t1,0x10
80015dc0:	0198f8b3          	and	a7,a7,s9
80015dc4:	014d8a33          	add	s4,s11,s4
80015dc8:	011308b3          	add	a7,t1,a7
80015dcc:	01028333          	add	t1,t0,a6
80015dd0:	01033833          	sltu	a6,t1,a6
80015dd4:	00612a23          	sw	t1,20(sp)
80015dd8:	06612223          	sw	t1,100(sp)
80015ddc:	013a0333          	add	t1,s4,s3
80015de0:	01030b33          	add	s6,t1,a6
80015de4:	013339b3          	sltu	s3,t1,s3
80015de8:	010b3833          	sltu	a6,s6,a6
80015dec:	0109e833          	or	a6,s3,a6
80015df0:	00aa3533          	sltu	a0,s4,a0
80015df4:	00a80533          	add	a0,a6,a0
80015df8:	02812803          	lw	a6,40(sp)
80015dfc:	00db02b3          	add	t0,s6,a3
80015e00:	02812983          	lw	s3,40(sp)
80015e04:	00d2b6b3          	sltu	a3,t0,a3
80015e08:	01050533          	add	a0,a0,a6
80015e0c:	02c12303          	lw	t1,44(sp)
80015e10:	00d50833          	add	a6,a0,a3
80015e14:	00f282b3          	add	t0,t0,a5
80015e18:	01353533          	sltu	a0,a0,s3
80015e1c:	00d836b3          	sltu	a3,a6,a3
80015e20:	00f2b7b3          	sltu	a5,t0,a5
80015e24:	00680db3          	add	s11,a6,t1
80015e28:	00d566b3          	or	a3,a0,a3
80015e2c:	02c12503          	lw	a0,44(sp)
80015e30:	00fd8333          	add	t1,s11,a5
80015e34:	011282b3          	add	t0,t0,a7
80015e38:	0112b8b3          	sltu	a7,t0,a7
80015e3c:	00f337b3          	sltu	a5,t1,a5
80015e40:	00512c23          	sw	t0,24(sp)
80015e44:	06512423          	sw	t0,104(sp)
80015e48:	017302b3          	add	t0,t1,s7
80015e4c:	04c12303          	lw	t1,76(sp)
80015e50:	01128d33          	add	s10,t0,a7
80015e54:	00adbdb3          	sltu	s11,s11,a0
80015e58:	00fde7b3          	or	a5,s11,a5
80015e5c:	0172bbb3          	sltu	s7,t0,s7
80015e60:	011d38b3          	sltu	a7,s10,a7
80015e64:	00f686b3          	add	a3,a3,a5
80015e68:	01035293          	srli	t0,t1,0x10
80015e6c:	011bea33          	or	s4,s7,a7
80015e70:	01937333          	and	t1,t1,s9
80015e74:	02e307b3          	mul	a5,t1,a4
80015e78:	01468a33          	add	s4,a3,s4
80015e7c:	02e28733          	mul	a4,t0,a4
80015e80:	0107d893          	srli	a7,a5,0x10
80015e84:	026f86b3          	mul	a3,t6,t1
80015e88:	00d70733          	add	a4,a4,a3
80015e8c:	00e888b3          	add	a7,a7,a4
80015e90:	025f8fb3          	mul	t6,t6,t0
80015e94:	00d8f463          	bleu	a3,a7,80015e9c <__multf3+0x734>
80015e98:	018f8fb3          	add	t6,t6,s8
80015e9c:	03c12983          	lw	s3,60(sp)
80015ea0:	000106b7          	lui	a3,0x10
80015ea4:	fff68513          	addi	a0,a3,-1 # ffff <_HEAP_SIZE+0xefff>
80015ea8:	0108d713          	srli	a4,a7,0x10
80015eac:	00a8f8b3          	and	a7,a7,a0
80015eb0:	01f70733          	add	a4,a4,t6
80015eb4:	00a7f7b3          	and	a5,a5,a0
80015eb8:	0109df93          	srli	t6,s3,0x10
80015ebc:	01089893          	slli	a7,a7,0x10
80015ec0:	00a9f9b3          	and	s3,s3,a0
80015ec4:	00f888b3          	add	a7,a7,a5
80015ec8:	03fa8b33          	mul	s6,s5,t6
80015ecc:	00070d93          	mv	s11,a4
80015ed0:	033e07b3          	mul	a5,t3,s3
80015ed4:	033a8ab3          	mul	s5,s5,s3
80015ed8:	0107d813          	srli	a6,a5,0x10
80015edc:	03cf8e33          	mul	t3,t6,t3
80015ee0:	01ca8ab3          	add	s5,s5,t3
80015ee4:	01580ab3          	add	s5,a6,s5
80015ee8:	01caf463          	bleu	t3,s5,80015ef0 <__multf3+0x788>
80015eec:	00db0b33          	add	s6,s6,a3
80015ef0:	010ad813          	srli	a6,s5,0x10
80015ef4:	01680733          	add	a4,a6,s6
80015ef8:	00010b37          	lui	s6,0x10
80015efc:	02e12423          	sw	a4,40(sp)
80015f00:	fffb0713          	addi	a4,s6,-1 # ffff <_HEAP_SIZE+0xefff>
80015f04:	00eaf833          	and	a6,s5,a4
80015f08:	00e7f7b3          	and	a5,a5,a4
80015f0c:	01081813          	slli	a6,a6,0x10
80015f10:	00f80833          	add	a6,a6,a5
80015f14:	02be86b3          	mul	a3,t4,a1
80015f18:	03d90e33          	mul	t3,s2,t4
80015f1c:	0106d513          	srli	a0,a3,0x10
80015f20:	02b407b3          	mul	a5,s0,a1
80015f24:	01c787b3          	add	a5,a5,t3
80015f28:	00f507b3          	add	a5,a0,a5
80015f2c:	02890733          	mul	a4,s2,s0
80015f30:	01c7f463          	bleu	t3,a5,80015f38 <__multf3+0x7d0>
80015f34:	01670733          	add	a4,a4,s6
80015f38:	0107d513          	srli	a0,a5,0x10
80015f3c:	00e50733          	add	a4,a0,a4
80015f40:	00010b37          	lui	s6,0x10
80015f44:	02e12623          	sw	a4,44(sp)
80015f48:	fffb0713          	addi	a4,s6,-1 # ffff <_HEAP_SIZE+0xefff>
80015f4c:	00e7f533          	and	a0,a5,a4
80015f50:	00e6f6b3          	and	a3,a3,a4
80015f54:	03e38e33          	mul	t3,t2,t5
80015f58:	01051513          	slli	a0,a0,0x10
80015f5c:	00d50533          	add	a0,a0,a3
80015f60:	03e60733          	mul	a4,a2,t5
80015f64:	02c487b3          	mul	a5,s1,a2
80015f68:	01075693          	srli	a3,a4,0x10
80015f6c:	01c787b3          	add	a5,a5,t3
80015f70:	00f687b3          	add	a5,a3,a5
80015f74:	02748ab3          	mul	s5,s1,t2
80015f78:	01c7f463          	bleu	t3,a5,80015f80 <__multf3+0x818>
80015f7c:	016a8ab3          	add	s5,s5,s6
80015f80:	000106b7          	lui	a3,0x10
80015f84:	fff68e13          	addi	t3,a3,-1 # ffff <_HEAP_SIZE+0xefff>
80015f88:	01c7f6b3          	and	a3,a5,t3
80015f8c:	0107db93          	srli	s7,a5,0x10
80015f90:	011d07b3          	add	a5,s10,a7
80015f94:	01c77733          	and	a4,a4,t3
80015f98:	0117b8b3          	sltu	a7,a5,a7
80015f9c:	01ba0a33          	add	s4,s4,s11
80015fa0:	01069693          	slli	a3,a3,0x10
80015fa4:	00e686b3          	add	a3,a3,a4
80015fa8:	011a0d33          	add	s10,s4,a7
80015fac:	02812703          	lw	a4,40(sp)
80015fb0:	011d38b3          	sltu	a7,s10,a7
80015fb4:	01ba3a33          	sltu	s4,s4,s11
80015fb8:	010787b3          	add	a5,a5,a6
80015fbc:	011a6a33          	or	s4,s4,a7
80015fc0:	02812883          	lw	a7,40(sp)
80015fc4:	0107b833          	sltu	a6,a5,a6
80015fc8:	00ed0b33          	add	s6,s10,a4
80015fcc:	02c12703          	lw	a4,44(sp)
80015fd0:	010b0cb3          	add	s9,s6,a6
80015fd4:	00a787b3          	add	a5,a5,a0
80015fd8:	011b3b33          	sltu	s6,s6,a7
80015fdc:	010cb833          	sltu	a6,s9,a6
80015fe0:	00a7b533          	sltu	a0,a5,a0
80015fe4:	00ec8733          	add	a4,s9,a4
80015fe8:	010b6b33          	or	s6,s6,a6
80015fec:	02c12803          	lw	a6,44(sp)
80015ff0:	00a70c33          	add	s8,a4,a0
80015ff4:	015b8bb3          	add	s7,s7,s5
80015ff8:	00d787b3          	add	a5,a5,a3
80015ffc:	00d7b6b3          	sltu	a3,a5,a3
80016000:	017c0ab3          	add	s5,s8,s7
80016004:	00da8e33          	add	t3,s5,a3
80016008:	01073733          	sltu	a4,a4,a6
8001600c:	00ac3533          	sltu	a0,s8,a0
80016010:	00a76733          	or	a4,a4,a0
80016014:	00de36b3          	sltu	a3,t3,a3
80016018:	016a0a33          	add	s4,s4,s6
8001601c:	017abab3          	sltu	s5,s5,s7
80016020:	00ea0a33          	add	s4,s4,a4
80016024:	00daeab3          	or	s5,s5,a3
80016028:	015a06b3          	add	a3,s4,s5
8001602c:	02ce8833          	mul	a6,t4,a2
80016030:	06f12623          	sw	a5,108(sp)
80016034:	03d38a33          	mul	s4,t2,t4
80016038:	01085513          	srli	a0,a6,0x10
8001603c:	02c40733          	mul	a4,s0,a2
80016040:	01470733          	add	a4,a4,s4
80016044:	00e50733          	add	a4,a0,a4
80016048:	027408b3          	mul	a7,s0,t2
8001604c:	01477663          	bleu	s4,a4,80016058 <__multf3+0x8f0>
80016050:	00010537          	lui	a0,0x10
80016054:	00a888b3          	add	a7,a7,a0
80016058:	00010a37          	lui	s4,0x10
8001605c:	01075513          	srli	a0,a4,0x10
80016060:	fffa0a93          	addi	s5,s4,-1 # ffff <_HEAP_SIZE+0xefff>
80016064:	011508b3          	add	a7,a0,a7
80016068:	01577533          	and	a0,a4,s5
8001606c:	01587833          	and	a6,a6,s5
80016070:	01051513          	slli	a0,a0,0x10
80016074:	02690ab3          	mul	s5,s2,t1
80016078:	01050533          	add	a0,a0,a6
8001607c:	02b30833          	mul	a6,t1,a1
80016080:	02b285b3          	mul	a1,t0,a1
80016084:	01085713          	srli	a4,a6,0x10
80016088:	015585b3          	add	a1,a1,s5
8001608c:	00b70733          	add	a4,a4,a1
80016090:	02590933          	mul	s2,s2,t0
80016094:	01577463          	bleu	s5,a4,8001609c <__multf3+0x934>
80016098:	01490933          	add	s2,s2,s4
8001609c:	00010ab7          	lui	s5,0x10
800160a0:	01075593          	srli	a1,a4,0x10
800160a4:	fffa8a13          	addi	s4,s5,-1 # ffff <_HEAP_SIZE+0xefff>
800160a8:	01487833          	and	a6,a6,s4
800160ac:	01258933          	add	s2,a1,s2
800160b0:	014775b3          	and	a1,a4,s4
800160b4:	01059593          	slli	a1,a1,0x10
800160b8:	03e98733          	mul	a4,s3,t5
800160bc:	010585b3          	add	a1,a1,a6
800160c0:	03ef8f33          	mul	t5,t6,t5
800160c4:	01075813          	srli	a6,a4,0x10
800160c8:	03f48a33          	mul	s4,s1,t6
800160cc:	033484b3          	mul	s1,s1,s3
800160d0:	01e484b3          	add	s1,s1,t5
800160d4:	009804b3          	add	s1,a6,s1
800160d8:	01e4f463          	bleu	t5,s1,800160e0 <__multf3+0x978>
800160dc:	015a0a33          	add	s4,s4,s5
800160e0:	0104db13          	srli	s6,s1,0x10
800160e4:	014b0b33          	add	s6,s6,s4
800160e8:	00010a37          	lui	s4,0x10
800160ec:	fffa0f13          	addi	t5,s4,-1 # ffff <_HEAP_SIZE+0xefff>
800160f0:	01e4f833          	and	a6,s1,t5
800160f4:	01e77733          	and	a4,a4,t5
800160f8:	026384b3          	mul	s1,t2,t1
800160fc:	01081813          	slli	a6,a6,0x10
80016100:	00e80833          	add	a6,a6,a4
80016104:	02660f33          	mul	t5,a2,t1
80016108:	02c28633          	mul	a2,t0,a2
8001610c:	010f5713          	srli	a4,t5,0x10
80016110:	00960633          	add	a2,a2,s1
80016114:	00c70633          	add	a2,a4,a2
80016118:	025383b3          	mul	t2,t2,t0
8001611c:	00967463          	bleu	s1,a2,80016124 <__multf3+0x9bc>
80016120:	014383b3          	add	t2,t2,s4
80016124:	00010a37          	lui	s4,0x10
80016128:	01065713          	srli	a4,a2,0x10
8001612c:	fffa0493          	addi	s1,s4,-1 # ffff <_HEAP_SIZE+0xefff>
80016130:	007703b3          	add	t2,a4,t2
80016134:	00967733          	and	a4,a2,s1
80016138:	009f7f33          	and	t5,t5,s1
8001613c:	01071713          	slli	a4,a4,0x10
80016140:	01e70733          	add	a4,a4,t5
80016144:	03340633          	mul	a2,s0,s3
80016148:	033e8f33          	mul	t5,t4,s3
8001614c:	03df8eb3          	mul	t4,t6,t4
80016150:	010f5a93          	srli	s5,t5,0x10
80016154:	01d60633          	add	a2,a2,t4
80016158:	00ca8633          	add	a2,s5,a2
8001615c:	03f404b3          	mul	s1,s0,t6
80016160:	01d67463          	bleu	t4,a2,80016168 <__multf3+0xa00>
80016164:	014484b3          	add	s1,s1,s4
80016168:	01065c13          	srli	s8,a2,0x10
8001616c:	00010cb7          	lui	s9,0x10
80016170:	009c0c33          	add	s8,s8,s1
80016174:	00ae0e33          	add	t3,t3,a0
80016178:	fffc8493          	addi	s1,s9,-1 # ffff <_HEAP_SIZE+0xefff>
8001617c:	00ae3533          	sltu	a0,t3,a0
80016180:	011686b3          	add	a3,a3,a7
80016184:	00967633          	and	a2,a2,s1
80016188:	00a68db3          	add	s11,a3,a0
8001618c:	009f7f33          	and	t5,t5,s1
80016190:	00be0e33          	add	t3,t3,a1
80016194:	01061613          	slli	a2,a2,0x10
80016198:	01e60633          	add	a2,a2,t5
8001619c:	00be35b3          	sltu	a1,t3,a1
800161a0:	012d8f33          	add	t5,s11,s2
800161a4:	010e0e33          	add	t3,t3,a6
800161a8:	00bf0d33          	add	s10,t5,a1
800161ac:	016d0eb3          	add	t4,s10,s6
800161b0:	07c12823          	sw	t3,112(sp)
800161b4:	010e3e33          	sltu	t3,t3,a6
800161b8:	01ce8a33          	add	s4,t4,t3
800161bc:	0116b6b3          	sltu	a3,a3,a7
800161c0:	00bd35b3          	sltu	a1,s10,a1
800161c4:	00adb533          	sltu	a0,s11,a0
800161c8:	012f3933          	sltu	s2,t5,s2
800161cc:	00a6e533          	or	a0,a3,a0
800161d0:	00b96933          	or	s2,s2,a1
800161d4:	016ebeb3          	sltu	t4,t4,s6
800161d8:	01ca3e33          	sltu	t3,s4,t3
800161dc:	01250533          	add	a0,a0,s2
800161e0:	01ceeeb3          	or	t4,t4,t3
800161e4:	00ea0833          	add	a6,s4,a4
800161e8:	01d50533          	add	a0,a0,t4
800161ec:	00e83733          	sltu	a4,a6,a4
800161f0:	00750533          	add	a0,a0,t2
800161f4:	00e506b3          	add	a3,a0,a4
800161f8:	007533b3          	sltu	t2,a0,t2
800161fc:	03330533          	mul	a0,t1,s3
80016200:	00c80833          	add	a6,a6,a2
80016204:	00e6b733          	sltu	a4,a3,a4
80016208:	00c83633          	sltu	a2,a6,a2
8001620c:	018686b3          	add	a3,a3,s8
80016210:	00c685b3          	add	a1,a3,a2
80016214:	0186bc33          	sltu	s8,a3,s8
80016218:	00c5b633          	sltu	a2,a1,a2
8001621c:	07012a23          	sw	a6,116(sp)
80016220:	00e3e733          	or	a4,t2,a4
80016224:	026f8333          	mul	t1,t6,t1
80016228:	01055693          	srli	a3,a0,0x10
8001622c:	00cc6633          	or	a2,s8,a2
80016230:	033289b3          	mul	s3,t0,s3
80016234:	006989b3          	add	s3,s3,t1
80016238:	03f28fb3          	mul	t6,t0,t6
8001623c:	013682b3          	add	t0,a3,s3
80016240:	0062f463          	bleu	t1,t0,80016248 <__multf3+0xae0>
80016244:	019f8fb3          	add	t6,t6,s9
80016248:	0092f6b3          	and	a3,t0,s1
8001624c:	01069693          	slli	a3,a3,0x10
80016250:	009574b3          	and	s1,a0,s1
80016254:	009684b3          	add	s1,a3,s1
80016258:	0102d293          	srli	t0,t0,0x10
8001625c:	009585b3          	add	a1,a1,s1
80016260:	00e282b3          	add	t0,t0,a4
80016264:	01412683          	lw	a3,20(sp)
80016268:	02412703          	lw	a4,36(sp)
8001626c:	00c282b3          	add	t0,t0,a2
80016270:	0095b4b3          	sltu	s1,a1,s1
80016274:	009282b3          	add	t0,t0,s1
80016278:	01f28fb3          	add	t6,t0,t6
8001627c:	00d762b3          	or	t0,a4,a3
80016280:	01812703          	lw	a4,24(sp)
80016284:	00d79793          	slli	a5,a5,0xd
80016288:	07f12e23          	sw	t6,124(sp)
8001628c:	005762b3          	or	t0,a4,t0
80016290:	06b12c23          	sw	a1,120(sp)
80016294:	0057e7b3          	or	a5,a5,t0
80016298:	06010713          	addi	a4,sp,96
8001629c:	00000613          	li	a2,0
800162a0:	00400513          	li	a0,4
800162a4:	00c72683          	lw	a3,12(a4)
800162a8:	01072583          	lw	a1,16(a4)
800162ac:	00160613          	addi	a2,a2,1
800162b0:	0136d693          	srli	a3,a3,0x13
800162b4:	00d59593          	slli	a1,a1,0xd
800162b8:	00b6e6b3          	or	a3,a3,a1
800162bc:	00d72023          	sw	a3,0(a4)
800162c0:	00470713          	addi	a4,a4,4
800162c4:	fea610e3          	bne	a2,a0,800162a4 <__multf3+0xb3c>
800162c8:	06012703          	lw	a4,96(sp)
800162cc:	06812683          	lw	a3,104(sp)
800162d0:	00f037b3          	snez	a5,a5
800162d4:	00e7e7b3          	or	a5,a5,a4
800162d8:	04d12c23          	sw	a3,88(sp)
800162dc:	06c12703          	lw	a4,108(sp)
800162e0:	06412683          	lw	a3,100(sp)
800162e4:	04f12823          	sw	a5,80(sp)
800162e8:	04e12e23          	sw	a4,92(sp)
800162ec:	04d12a23          	sw	a3,84(sp)
800162f0:	00b71693          	slli	a3,a4,0xb
800162f4:	2406d463          	bgez	a3,8001653c <__multf3+0xdd4>
800162f8:	01f79793          	slli	a5,a5,0x1f
800162fc:	05010713          	addi	a4,sp,80
80016300:	00000613          	li	a2,0
80016304:	00300513          	li	a0,3
80016308:	00072683          	lw	a3,0(a4)
8001630c:	00472583          	lw	a1,4(a4)
80016310:	00160613          	addi	a2,a2,1
80016314:	0016d693          	srli	a3,a3,0x1
80016318:	01f59593          	slli	a1,a1,0x1f
8001631c:	00b6e6b3          	or	a3,a3,a1
80016320:	00d72023          	sw	a3,0(a4)
80016324:	00470713          	addi	a4,a4,4
80016328:	fea610e3          	bne	a2,a0,80016308 <__multf3+0xba0>
8001632c:	05c12703          	lw	a4,92(sp)
80016330:	00f037b3          	snez	a5,a5
80016334:	00175713          	srli	a4,a4,0x1
80016338:	04e12e23          	sw	a4,92(sp)
8001633c:	05012703          	lw	a4,80(sp)
80016340:	00f767b3          	or	a5,a4,a5
80016344:	04f12823          	sw	a5,80(sp)
  FP_PACK_Q (r, R);
80016348:	01c12703          	lw	a4,28(sp)
8001634c:	000047b7          	lui	a5,0x4
80016350:	fff78793          	addi	a5,a5,-1 # 3fff <_HEAP_SIZE+0x2fff>
80016354:	00f707b3          	add	a5,a4,a5
80016358:	20f05463          	blez	a5,80016560 <__multf3+0xdf8>
8001635c:	05012703          	lw	a4,80(sp)
80016360:	00777693          	andi	a3,a4,7
80016364:	04068463          	beqz	a3,800163ac <__multf3+0xc44>
80016368:	00f77693          	andi	a3,a4,15
8001636c:	00400613          	li	a2,4
80016370:	02c68e63          	beq	a3,a2,800163ac <__multf3+0xc44>
80016374:	05412683          	lw	a3,84(sp)
80016378:	00470713          	addi	a4,a4,4
8001637c:	04e12823          	sw	a4,80(sp)
80016380:	00473713          	sltiu	a4,a4,4
80016384:	00d706b3          	add	a3,a4,a3
80016388:	00e6b733          	sltu	a4,a3,a4
8001638c:	04d12a23          	sw	a3,84(sp)
80016390:	05812683          	lw	a3,88(sp)
80016394:	00d706b3          	add	a3,a4,a3
80016398:	04d12c23          	sw	a3,88(sp)
8001639c:	00e6b6b3          	sltu	a3,a3,a4
800163a0:	05c12703          	lw	a4,92(sp)
800163a4:	00e686b3          	add	a3,a3,a4
800163a8:	04d12e23          	sw	a3,92(sp)
800163ac:	05c12703          	lw	a4,92(sp)
800163b0:	00b71693          	slli	a3,a4,0xb
800163b4:	0206d063          	bgez	a3,800163d4 <__multf3+0xc6c>
800163b8:	fff007b7          	lui	a5,0xfff00
800163bc:	fff78793          	addi	a5,a5,-1 # ffefffff <__stack+0x7fec3533>
800163c0:	00f77733          	and	a4,a4,a5
800163c4:	04e12e23          	sw	a4,92(sp)
800163c8:	01c12703          	lw	a4,28(sp)
800163cc:	000047b7          	lui	a5,0x4
800163d0:	00f707b3          	add	a5,a4,a5
800163d4:	05010713          	addi	a4,sp,80
800163d8:	00000613          	li	a2,0
800163dc:	00300513          	li	a0,3
800163e0:	00072683          	lw	a3,0(a4)
800163e4:	00472583          	lw	a1,4(a4)
800163e8:	00160613          	addi	a2,a2,1
800163ec:	0036d693          	srli	a3,a3,0x3
800163f0:	01d59593          	slli	a1,a1,0x1d
800163f4:	00b6e6b3          	or	a3,a3,a1
800163f8:	00d72023          	sw	a3,0(a4)
800163fc:	00470713          	addi	a4,a4,4
80016400:	fea610e3          	bne	a2,a0,800163e0 <__multf3+0xc78>
80016404:	00008737          	lui	a4,0x8
80016408:	ffe70693          	addi	a3,a4,-2 # 7ffe <_HEAP_SIZE+0x6ffe>
8001640c:	12f6ce63          	blt	a3,a5,80016548 <__multf3+0xde0>
80016410:	05c12703          	lw	a4,92(sp)
80016414:	00375713          	srli	a4,a4,0x3
80016418:	04e12e23          	sw	a4,92(sp)
8001641c:	05c12703          	lw	a4,92(sp)
80016420:	800106b7          	lui	a3,0x80010
80016424:	fff68693          	addi	a3,a3,-1 # 8000ffff <__stack+0xfffd3533>
80016428:	06e11623          	sh	a4,108(sp)
8001642c:	00008737          	lui	a4,0x8
80016430:	fff70713          	addi	a4,a4,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016434:	00e7f7b3          	and	a5,a5,a4
80016438:	06c12703          	lw	a4,108(sp)
8001643c:	01079793          	slli	a5,a5,0x10
  FP_HANDLE_EXCEPTIONS;

  return r;
}
80016440:	0bc12083          	lw	ra,188(sp)
  FP_PACK_Q (r, R);
80016444:	00d77733          	and	a4,a4,a3
80016448:	00f767b3          	or	a5,a4,a5
8001644c:	01012703          	lw	a4,16(sp)
80016450:	800006b7          	lui	a3,0x80000
80016454:	fff6c693          	not	a3,a3
80016458:	01f71713          	slli	a4,a4,0x1f
8001645c:	00d7f7b3          	and	a5,a5,a3
80016460:	00e7e7b3          	or	a5,a5,a4
  return r;
80016464:	00c12683          	lw	a3,12(sp)
80016468:	05012703          	lw	a4,80(sp)
}
8001646c:	0b812403          	lw	s0,184(sp)
  return r;
80016470:	00f6a623          	sw	a5,12(a3) # 8000000c <__stack+0xfffc3540>
80016474:	00e6a023          	sw	a4,0(a3)
80016478:	05412703          	lw	a4,84(sp)
}
8001647c:	0b412483          	lw	s1,180(sp)
80016480:	0b012903          	lw	s2,176(sp)
  return r;
80016484:	00e6a223          	sw	a4,4(a3)
80016488:	05812703          	lw	a4,88(sp)
}
8001648c:	0ac12983          	lw	s3,172(sp)
80016490:	0a812a03          	lw	s4,168(sp)
  return r;
80016494:	00e6a423          	sw	a4,8(a3)
}
80016498:	0a412a83          	lw	s5,164(sp)
8001649c:	0a012b03          	lw	s6,160(sp)
800164a0:	09c12b83          	lw	s7,156(sp)
800164a4:	09812c03          	lw	s8,152(sp)
800164a8:	09412c83          	lw	s9,148(sp)
800164ac:	09012d03          	lw	s10,144(sp)
800164b0:	08c12d83          	lw	s11,140(sp)
800164b4:	00068513          	mv	a0,a3
800164b8:	0c010113          	addi	sp,sp,192
800164bc:	00008067          	ret
  FP_UNPACK_Q (A, a);
800164c0:	01312823          	sw	s3,16(sp)
  FP_MUL_Q (R, A, B);
800164c4:	03012783          	lw	a5,48(sp)
800164c8:	04f12823          	sw	a5,80(sp)
800164cc:	03412783          	lw	a5,52(sp)
800164d0:	04f12a23          	sw	a5,84(sp)
800164d4:	03812783          	lw	a5,56(sp)
800164d8:	04f12c23          	sw	a5,88(sp)
800164dc:	03c12783          	lw	a5,60(sp)
800164e0:	04f12e23          	sw	a5,92(sp)
  FP_PACK_Q (r, R);
800164e4:	00200793          	li	a5,2
800164e8:	28fb8063          	beq	s7,a5,80016768 <__multf3+0x1000>
800164ec:	00300793          	li	a5,3
800164f0:	28fb8a63          	beq	s7,a5,80016784 <__multf3+0x101c>
800164f4:	00100793          	li	a5,1
800164f8:	e4fb98e3          	bne	s7,a5,80016348 <__multf3+0xbe0>
800164fc:	04012e23          	sw	zero,92(sp)
80016500:	04012c23          	sw	zero,88(sp)
80016504:	04012a23          	sw	zero,84(sp)
80016508:	04012823          	sw	zero,80(sp)
8001650c:	21c0006f          	j	80016728 <__multf3+0xfc0>
  FP_UNPACK_Q (B, b);
80016510:	01212823          	sw	s2,16(sp)
  FP_MUL_Q (R, A, B);
80016514:	04012783          	lw	a5,64(sp)
80016518:	00070b93          	mv	s7,a4
8001651c:	04f12823          	sw	a5,80(sp)
80016520:	04412783          	lw	a5,68(sp)
80016524:	04f12a23          	sw	a5,84(sp)
80016528:	04812783          	lw	a5,72(sp)
8001652c:	04f12c23          	sw	a5,88(sp)
80016530:	04c12783          	lw	a5,76(sp)
80016534:	04f12e23          	sw	a5,92(sp)
80016538:	fadff06f          	j	800164e4 <__multf3+0xd7c>
8001653c:	02012783          	lw	a5,32(sp)
80016540:	00f12e23          	sw	a5,28(sp)
80016544:	e05ff06f          	j	80016348 <__multf3+0xbe0>
  FP_PACK_Q (r, R);
80016548:	04012e23          	sw	zero,92(sp)
8001654c:	04012c23          	sw	zero,88(sp)
80016550:	04012a23          	sw	zero,84(sp)
80016554:	04012823          	sw	zero,80(sp)
80016558:	fff70793          	addi	a5,a4,-1
8001655c:	ec1ff06f          	j	8001641c <__multf3+0xcb4>
80016560:	00100693          	li	a3,1
80016564:	40f687b3          	sub	a5,a3,a5
80016568:	07400713          	li	a4,116
8001656c:	1cf74263          	blt	a4,a5,80016730 <__multf3+0xfc8>
80016570:	4057d613          	srai	a2,a5,0x5
80016574:	01f7f693          	andi	a3,a5,31
80016578:	00000713          	li	a4,0
8001657c:	00000793          	li	a5,0
80016580:	00271593          	slli	a1,a4,0x2
80016584:	02c71263          	bne	a4,a2,800165a8 <__multf3+0xe40>
80016588:	04069863          	bnez	a3,800165d8 <__multf3+0xe70>
8001658c:	00300513          	li	a0,3
80016590:	05010613          	addi	a2,sp,80
80016594:	40e50533          	sub	a0,a0,a4
80016598:	02d55463          	ble	a3,a0,800165c0 <__multf3+0xe58>
8001659c:	00400693          	li	a3,4
800165a0:	40e68733          	sub	a4,a3,a4
800165a4:	0840006f          	j	80016628 <__multf3+0xec0>
800165a8:	05010513          	addi	a0,sp,80
800165ac:	00b505b3          	add	a1,a0,a1
800165b0:	0005a583          	lw	a1,0(a1)
800165b4:	00170713          	addi	a4,a4,1
800165b8:	00b7e7b3          	or	a5,a5,a1
800165bc:	fc5ff06f          	j	80016580 <__multf3+0xe18>
800165c0:	00b60833          	add	a6,a2,a1
800165c4:	00082803          	lw	a6,0(a6)
800165c8:	00168693          	addi	a3,a3,1
800165cc:	00460613          	addi	a2,a2,4
800165d0:	ff062e23          	sw	a6,-4(a2)
800165d4:	fc5ff06f          	j	80016598 <__multf3+0xe30>
800165d8:	08010613          	addi	a2,sp,128
800165dc:	00b60633          	add	a2,a2,a1
800165e0:	fd062603          	lw	a2,-48(a2)
800165e4:	02000813          	li	a6,32
800165e8:	40d80833          	sub	a6,a6,a3
800165ec:	01061633          	sll	a2,a2,a6
800165f0:	00c7e7b3          	or	a5,a5,a2
800165f4:	00300613          	li	a2,3
800165f8:	05010893          	addi	a7,sp,80
800165fc:	00000313          	li	t1,0
80016600:	40e60633          	sub	a2,a2,a4
80016604:	02c34663          	blt	t1,a2,80016630 <__multf3+0xec8>
80016608:	00400593          	li	a1,4
8001660c:	40e58733          	sub	a4,a1,a4
80016610:	00261613          	slli	a2,a2,0x2
80016614:	08010593          	addi	a1,sp,128
80016618:	00c58633          	add	a2,a1,a2
8001661c:	05c12583          	lw	a1,92(sp)
80016620:	00d5d6b3          	srl	a3,a1,a3
80016624:	fcd62823          	sw	a3,-48(a2)
80016628:	00400613          	li	a2,4
8001662c:	0400006f          	j	8001666c <__multf3+0xf04>
80016630:	00b88e33          	add	t3,a7,a1
80016634:	000e2503          	lw	a0,0(t3)
80016638:	004e2e03          	lw	t3,4(t3)
8001663c:	00130313          	addi	t1,t1,1
80016640:	00d55533          	srl	a0,a0,a3
80016644:	010e1e33          	sll	t3,t3,a6
80016648:	01c56533          	or	a0,a0,t3
8001664c:	00a8a023          	sw	a0,0(a7)
80016650:	00488893          	addi	a7,a7,4
80016654:	fb1ff06f          	j	80016604 <__multf3+0xe9c>
80016658:	00271693          	slli	a3,a4,0x2
8001665c:	05010593          	addi	a1,sp,80
80016660:	00d586b3          	add	a3,a1,a3
80016664:	0006a023          	sw	zero,0(a3)
80016668:	00170713          	addi	a4,a4,1
8001666c:	fec716e3          	bne	a4,a2,80016658 <__multf3+0xef0>
80016670:	05012683          	lw	a3,80(sp)
80016674:	00f037b3          	snez	a5,a5
80016678:	00d7e7b3          	or	a5,a5,a3
8001667c:	04f12823          	sw	a5,80(sp)
80016680:	0077f693          	andi	a3,a5,7
80016684:	04068263          	beqz	a3,800166c8 <__multf3+0xf60>
80016688:	00f7f693          	andi	a3,a5,15
8001668c:	02e68e63          	beq	a3,a4,800166c8 <__multf3+0xf60>
80016690:	05412703          	lw	a4,84(sp)
80016694:	00478793          	addi	a5,a5,4 # 4004 <_HEAP_SIZE+0x3004>
80016698:	04f12823          	sw	a5,80(sp)
8001669c:	0047b793          	sltiu	a5,a5,4
800166a0:	00e78733          	add	a4,a5,a4
800166a4:	00f737b3          	sltu	a5,a4,a5
800166a8:	04e12a23          	sw	a4,84(sp)
800166ac:	05812703          	lw	a4,88(sp)
800166b0:	00e78733          	add	a4,a5,a4
800166b4:	04e12c23          	sw	a4,88(sp)
800166b8:	00f73733          	sltu	a4,a4,a5
800166bc:	05c12783          	lw	a5,92(sp)
800166c0:	00f70733          	add	a4,a4,a5
800166c4:	04e12e23          	sw	a4,92(sp)
800166c8:	05c12783          	lw	a5,92(sp)
800166cc:	00c79713          	slli	a4,a5,0xc
800166d0:	00075e63          	bgez	a4,800166ec <__multf3+0xf84>
800166d4:	04012e23          	sw	zero,92(sp)
800166d8:	04012c23          	sw	zero,88(sp)
800166dc:	04012a23          	sw	zero,84(sp)
800166e0:	04012823          	sw	zero,80(sp)
800166e4:	00100793          	li	a5,1
800166e8:	d35ff06f          	j	8001641c <__multf3+0xcb4>
800166ec:	05010793          	addi	a5,sp,80
800166f0:	00000693          	li	a3,0
800166f4:	00300593          	li	a1,3
800166f8:	0007a703          	lw	a4,0(a5)
800166fc:	0047a603          	lw	a2,4(a5)
80016700:	00168693          	addi	a3,a3,1
80016704:	00375713          	srli	a4,a4,0x3
80016708:	01d61613          	slli	a2,a2,0x1d
8001670c:	00c76733          	or	a4,a4,a2
80016710:	00e7a023          	sw	a4,0(a5)
80016714:	00478793          	addi	a5,a5,4
80016718:	feb690e3          	bne	a3,a1,800166f8 <__multf3+0xf90>
8001671c:	05c12783          	lw	a5,92(sp)
80016720:	0037d793          	srli	a5,a5,0x3
80016724:	04f12e23          	sw	a5,92(sp)
80016728:	00000793          	li	a5,0
8001672c:	cf1ff06f          	j	8001641c <__multf3+0xcb4>
80016730:	05412783          	lw	a5,84(sp)
80016734:	05012703          	lw	a4,80(sp)
80016738:	00f76733          	or	a4,a4,a5
8001673c:	05812783          	lw	a5,88(sp)
80016740:	00f76733          	or	a4,a4,a5
80016744:	05c12783          	lw	a5,92(sp)
80016748:	00f76733          	or	a4,a4,a5
8001674c:	00000793          	li	a5,0
80016750:	cc0706e3          	beqz	a4,8001641c <__multf3+0xcb4>
80016754:	04012e23          	sw	zero,92(sp)
80016758:	04012c23          	sw	zero,88(sp)
8001675c:	04012a23          	sw	zero,84(sp)
80016760:	04012823          	sw	zero,80(sp)
80016764:	cb9ff06f          	j	8001641c <__multf3+0xcb4>
80016768:	000087b7          	lui	a5,0x8
8001676c:	04012e23          	sw	zero,92(sp)
80016770:	04012c23          	sw	zero,88(sp)
80016774:	04012a23          	sw	zero,84(sp)
80016778:	04012823          	sw	zero,80(sp)
8001677c:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016780:	c9dff06f          	j	8001641c <__multf3+0xcb4>
80016784:	000087b7          	lui	a5,0x8
80016788:	04f12e23          	sw	a5,92(sp)
8001678c:	04012c23          	sw	zero,88(sp)
80016790:	04012a23          	sw	zero,84(sp)
80016794:	04012823          	sw	zero,80(sp)
80016798:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
8001679c:	00012823          	sw	zero,16(sp)
800167a0:	c7dff06f          	j	8001641c <__multf3+0xcb4>

800167a4 <__subtf3>:
#include "soft-fp.h"
#include "quad.h"

TFtype
__subtf3 (TFtype a, TFtype b)
{
800167a4:	fa010113          	addi	sp,sp,-96
800167a8:	0085a783          	lw	a5,8(a1)
800167ac:	05212823          	sw	s2,80(sp)
800167b0:	00c5a903          	lw	s2,12(a1)
800167b4:	0005a683          	lw	a3,0(a1)
800167b8:	0045a703          	lw	a4,4(a1)
800167bc:	04912a23          	sw	s1,84(sp)
  FP_DECL_Q (B);
  FP_DECL_Q (R);
  TFtype r;

  FP_INIT_ROUNDMODE;
  FP_UNPACK_SEMIRAW_Q (A, a);
800167c0:	02f12c23          	sw	a5,56(sp)
{
800167c4:	00050493          	mv	s1,a0
  FP_UNPACK_SEMIRAW_Q (A, a);
800167c8:	00f12c23          	sw	a5,24(sp)
{
800167cc:	00062e03          	lw	t3,0(a2)
  FP_UNPACK_SEMIRAW_Q (A, a);
800167d0:	01091793          	slli	a5,s2,0x10
{
800167d4:	00462303          	lw	t1,4(a2)
800167d8:	00862883          	lw	a7,8(a2)
800167dc:	00c62503          	lw	a0,12(a2)
800167e0:	04812c23          	sw	s0,88(sp)
  FP_UNPACK_SEMIRAW_Q (A, a);
800167e4:	0107d793          	srli	a5,a5,0x10
800167e8:	00191413          	slli	s0,s2,0x1
800167ec:	03212e23          	sw	s2,60(sp)
{
800167f0:	04112e23          	sw	ra,92(sp)
800167f4:	05312623          	sw	s3,76(sp)
800167f8:	05412423          	sw	s4,72(sp)
800167fc:	05512223          	sw	s5,68(sp)
  FP_UNPACK_SEMIRAW_Q (A, a);
80016800:	02d12823          	sw	a3,48(sp)
80016804:	02e12a23          	sw	a4,52(sp)
80016808:	00d12823          	sw	a3,16(sp)
8001680c:	00e12a23          	sw	a4,20(sp)
80016810:	00f12e23          	sw	a5,28(sp)
80016814:	01145413          	srli	s0,s0,0x11
80016818:	01f95913          	srli	s2,s2,0x1f
8001681c:	01010813          	addi	a6,sp,16
80016820:	01c10593          	addi	a1,sp,28
80016824:	0005a783          	lw	a5,0(a1)
80016828:	ffc5a703          	lw	a4,-4(a1)
8001682c:	ffc58593          	addi	a1,a1,-4
80016830:	00379793          	slli	a5,a5,0x3
80016834:	01d75713          	srli	a4,a4,0x1d
80016838:	00e7e7b3          	or	a5,a5,a4
8001683c:	00f5a223          	sw	a5,4(a1)
80016840:	feb812e3          	bne	a6,a1,80016824 <__subtf3+0x80>
80016844:	01012683          	lw	a3,16(sp)
  FP_UNPACK_SEMIRAW_Q (B, b);
80016848:	01051793          	slli	a5,a0,0x10
8001684c:	00151613          	slli	a2,a0,0x1
  FP_UNPACK_SEMIRAW_Q (A, a);
80016850:	00369693          	slli	a3,a3,0x3
  FP_UNPACK_SEMIRAW_Q (B, b);
80016854:	0107d793          	srli	a5,a5,0x10
80016858:	02612a23          	sw	t1,52(sp)
8001685c:	03112c23          	sw	a7,56(sp)
80016860:	02a12e23          	sw	a0,60(sp)
80016864:	02612223          	sw	t1,36(sp)
80016868:	03112423          	sw	a7,40(sp)
  FP_UNPACK_SEMIRAW_Q (A, a);
8001686c:	00d12823          	sw	a3,16(sp)
  FP_UNPACK_SEMIRAW_Q (B, b);
80016870:	03c12823          	sw	t3,48(sp)
80016874:	03c12023          	sw	t3,32(sp)
80016878:	02f12623          	sw	a5,44(sp)
8001687c:	01165613          	srli	a2,a2,0x11
80016880:	01f55513          	srli	a0,a0,0x1f
80016884:	02010893          	addi	a7,sp,32
80016888:	02c10313          	addi	t1,sp,44
8001688c:	00032783          	lw	a5,0(t1)
80016890:	ffc32703          	lw	a4,-4(t1)
80016894:	ffc30313          	addi	t1,t1,-4
80016898:	00379793          	slli	a5,a5,0x3
8001689c:	01d75713          	srli	a4,a4,0x1d
800168a0:	00e7e7b3          	or	a5,a5,a4
800168a4:	00f32223          	sw	a5,4(t1)
800168a8:	fe6892e3          	bne	a7,t1,8001688c <__subtf3+0xe8>
800168ac:	02012783          	lw	a5,32(sp)
  FP_SUB_Q (R, A, B);
800168b0:	00008737          	lui	a4,0x8
800168b4:	fff70713          	addi	a4,a4,-1 # 7fff <_HEAP_SIZE+0x6fff>
  FP_UNPACK_SEMIRAW_Q (B, b);
800168b8:	00379793          	slli	a5,a5,0x3
800168bc:	02f12023          	sw	a5,32(sp)
  FP_SUB_Q (R, A, B);
800168c0:	02e61063          	bne	a2,a4,800168e0 <__subtf3+0x13c>
800168c4:	02812e03          	lw	t3,40(sp)
800168c8:	02412703          	lw	a4,36(sp)
800168cc:	01c76733          	or	a4,a4,t3
800168d0:	02c12e03          	lw	t3,44(sp)
800168d4:	01c76733          	or	a4,a4,t3
800168d8:	00f76733          	or	a4,a4,a5
800168dc:	00071463          	bnez	a4,800168e4 <__subtf3+0x140>
800168e0:	00154513          	xori	a0,a0,1
800168e4:	40c40733          	sub	a4,s0,a2
800168e8:	112518e3          	bne	a0,s2,800171f8 <__subtf3+0xa54>
800168ec:	30e05463          	blez	a4,80016bf4 <__subtf3+0x450>
800168f0:	14061863          	bnez	a2,80016a40 <__subtf3+0x29c>
800168f4:	02412503          	lw	a0,36(sp)
800168f8:	02812583          	lw	a1,40(sp)
800168fc:	02c12803          	lw	a6,44(sp)
80016900:	00b56633          	or	a2,a0,a1
80016904:	01066633          	or	a2,a2,a6
80016908:	00f66633          	or	a2,a2,a5
8001690c:	02061463          	bnez	a2,80016934 <__subtf3+0x190>
80016910:	01412783          	lw	a5,20(sp)
80016914:	02d12823          	sw	a3,48(sp)
80016918:	00070413          	mv	s0,a4
8001691c:	02f12a23          	sw	a5,52(sp)
80016920:	01812783          	lw	a5,24(sp)
80016924:	02f12c23          	sw	a5,56(sp)
80016928:	01c12783          	lw	a5,28(sp)
8001692c:	02f12e23          	sw	a5,60(sp)
80016930:	3080006f          	j	80016c38 <__subtf3+0x494>
80016934:	fff70613          	addi	a2,a4,-1
80016938:	0c061e63          	bnez	a2,80016a14 <__subtf3+0x270>
8001693c:	01412703          	lw	a4,20(sp)
80016940:	00f687b3          	add	a5,a3,a5
80016944:	00d7b6b3          	sltu	a3,a5,a3
80016948:	00e50633          	add	a2,a0,a4
8001694c:	02f12823          	sw	a5,48(sp)
80016950:	00d607b3          	add	a5,a2,a3
80016954:	00d7b6b3          	sltu	a3,a5,a3
80016958:	02f12a23          	sw	a5,52(sp)
8001695c:	01812783          	lw	a5,24(sp)
80016960:	00e63733          	sltu	a4,a2,a4
80016964:	00d766b3          	or	a3,a4,a3
80016968:	00f58733          	add	a4,a1,a5
8001696c:	00d70633          	add	a2,a4,a3
80016970:	00f737b3          	sltu	a5,a4,a5
80016974:	01c12703          	lw	a4,28(sp)
80016978:	00d636b3          	sltu	a3,a2,a3
8001697c:	00d7e7b3          	or	a5,a5,a3
80016980:	00e80833          	add	a6,a6,a4
80016984:	010787b3          	add	a5,a5,a6
80016988:	02c12c23          	sw	a2,56(sp)
8001698c:	02f12e23          	sw	a5,60(sp)
80016990:	00100413          	li	s0,1
80016994:	03c12783          	lw	a5,60(sp)
80016998:	00c79713          	slli	a4,a5,0xc
8001699c:	28075e63          	bgez	a4,80016c38 <__subtf3+0x494>
800169a0:	fff80737          	lui	a4,0xfff80
800169a4:	fff70713          	addi	a4,a4,-1 # fff7ffff <__stack+0x7ff43533>
800169a8:	00e7f7b3          	and	a5,a5,a4
800169ac:	02f12e23          	sw	a5,60(sp)
800169b0:	03012783          	lw	a5,48(sp)
800169b4:	00140413          	addi	s0,s0,1 # 800001 <_HEAP_SIZE+0x7ff001>
800169b8:	03010713          	addi	a4,sp,48
800169bc:	01f79793          	slli	a5,a5,0x1f
800169c0:	00000613          	li	a2,0
800169c4:	00300513          	li	a0,3
800169c8:	00072683          	lw	a3,0(a4)
800169cc:	00472583          	lw	a1,4(a4)
800169d0:	00160613          	addi	a2,a2,1
800169d4:	0016d693          	srli	a3,a3,0x1
800169d8:	01f59593          	slli	a1,a1,0x1f
800169dc:	00b6e6b3          	or	a3,a3,a1
800169e0:	00d72023          	sw	a3,0(a4)
800169e4:	00470713          	addi	a4,a4,4
800169e8:	fea610e3          	bne	a2,a0,800169c8 <__subtf3+0x224>
800169ec:	03c12703          	lw	a4,60(sp)
800169f0:	00f037b3          	snez	a5,a5
800169f4:	00175713          	srli	a4,a4,0x1
800169f8:	02e12e23          	sw	a4,60(sp)
800169fc:	03012703          	lw	a4,48(sp)
80016a00:	00f767b3          	or	a5,a4,a5
80016a04:	02f12823          	sw	a5,48(sp)
80016a08:	000087b7          	lui	a5,0x8
80016a0c:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016a10:	7d00006f          	j	800171e0 <__subtf3+0xa3c>
80016a14:	000087b7          	lui	a5,0x8
80016a18:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016a1c:	eef70ae3          	beq	a4,a5,80016910 <__subtf3+0x16c>
80016a20:	07400793          	li	a5,116
80016a24:	06c7d263          	ble	a2,a5,80016a88 <__subtf3+0x2e4>
80016a28:	00100793          	li	a5,1
80016a2c:	02012623          	sw	zero,44(sp)
80016a30:	02012423          	sw	zero,40(sp)
80016a34:	02012223          	sw	zero,36(sp)
80016a38:	02f12023          	sw	a5,32(sp)
80016a3c:	14c0006f          	j	80016b88 <__subtf3+0x3e4>
80016a40:	000087b7          	lui	a5,0x8
80016a44:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016a48:	02f41263          	bne	s0,a5,80016a6c <__subtf3+0x2c8>
80016a4c:	01412783          	lw	a5,20(sp)
80016a50:	02d12823          	sw	a3,48(sp)
80016a54:	02f12a23          	sw	a5,52(sp)
80016a58:	01812783          	lw	a5,24(sp)
80016a5c:	02f12c23          	sw	a5,56(sp)
80016a60:	01c12783          	lw	a5,28(sp)
80016a64:	02f12e23          	sw	a5,60(sp)
80016a68:	1d00006f          	j	80016c38 <__subtf3+0x494>
80016a6c:	02c12783          	lw	a5,44(sp)
80016a70:	000806b7          	lui	a3,0x80
80016a74:	00d7e7b3          	or	a5,a5,a3
80016a78:	02f12623          	sw	a5,44(sp)
80016a7c:	07400793          	li	a5,116
80016a80:	fae7c4e3          	blt	a5,a4,80016a28 <__subtf3+0x284>
80016a84:	00070613          	mv	a2,a4
80016a88:	40565693          	srai	a3,a2,0x5
80016a8c:	01f67713          	andi	a4,a2,31
80016a90:	00000793          	li	a5,0
80016a94:	00000613          	li	a2,0
80016a98:	00279593          	slli	a1,a5,0x2
80016a9c:	02d79063          	bne	a5,a3,80016abc <__subtf3+0x318>
80016aa0:	04071463          	bnez	a4,80016ae8 <__subtf3+0x344>
80016aa4:	00300693          	li	a3,3
80016aa8:	40f686b3          	sub	a3,a3,a5
80016aac:	02e6d263          	ble	a4,a3,80016ad0 <__subtf3+0x32c>
80016ab0:	00400713          	li	a4,4
80016ab4:	40f707b3          	sub	a5,a4,a5
80016ab8:	07c0006f          	j	80016b34 <__subtf3+0x390>
80016abc:	00b885b3          	add	a1,a7,a1
80016ac0:	0005a583          	lw	a1,0(a1)
80016ac4:	00178793          	addi	a5,a5,1
80016ac8:	00b66633          	or	a2,a2,a1
80016acc:	fcdff06f          	j	80016a98 <__subtf3+0x2f4>
80016ad0:	00b30533          	add	a0,t1,a1
80016ad4:	00052503          	lw	a0,0(a0) # 10000 <_HEAP_SIZE+0xf000>
80016ad8:	00170713          	addi	a4,a4,1
80016adc:	00430313          	addi	t1,t1,4
80016ae0:	fea32e23          	sw	a0,-4(t1)
80016ae4:	fc9ff06f          	j	80016aac <__subtf3+0x308>
80016ae8:	04010693          	addi	a3,sp,64
80016aec:	00b686b3          	add	a3,a3,a1
80016af0:	fe06a683          	lw	a3,-32(a3) # 7ffe0 <_HEAP_SIZE+0x7efe0>
80016af4:	02000813          	li	a6,32
80016af8:	40e80833          	sub	a6,a6,a4
80016afc:	010696b3          	sll	a3,a3,a6
80016b00:	00d66633          	or	a2,a2,a3
80016b04:	00300693          	li	a3,3
80016b08:	00000e13          	li	t3,0
80016b0c:	40f686b3          	sub	a3,a3,a5
80016b10:	02de4663          	blt	t3,a3,80016b3c <__subtf3+0x398>
80016b14:	00400593          	li	a1,4
80016b18:	40f587b3          	sub	a5,a1,a5
80016b1c:	00269693          	slli	a3,a3,0x2
80016b20:	04010593          	addi	a1,sp,64
80016b24:	00d586b3          	add	a3,a1,a3
80016b28:	02c12583          	lw	a1,44(sp)
80016b2c:	00e5d733          	srl	a4,a1,a4
80016b30:	fee6a023          	sw	a4,-32(a3)
80016b34:	00400693          	li	a3,4
80016b38:	03c0006f          	j	80016b74 <__subtf3+0x3d0>
80016b3c:	00b30eb3          	add	t4,t1,a1
80016b40:	000ea503          	lw	a0,0(t4)
80016b44:	004eae83          	lw	t4,4(t4)
80016b48:	001e0e13          	addi	t3,t3,1
80016b4c:	00e55533          	srl	a0,a0,a4
80016b50:	010e9eb3          	sll	t4,t4,a6
80016b54:	01d56533          	or	a0,a0,t4
80016b58:	00a32023          	sw	a0,0(t1)
80016b5c:	00430313          	addi	t1,t1,4
80016b60:	fb1ff06f          	j	80016b10 <__subtf3+0x36c>
80016b64:	00279713          	slli	a4,a5,0x2
80016b68:	00e88733          	add	a4,a7,a4
80016b6c:	00072023          	sw	zero,0(a4)
80016b70:	00178793          	addi	a5,a5,1
80016b74:	fed798e3          	bne	a5,a3,80016b64 <__subtf3+0x3c0>
80016b78:	02012783          	lw	a5,32(sp)
80016b7c:	00c03633          	snez	a2,a2
80016b80:	00c7e633          	or	a2,a5,a2
80016b84:	02c12023          	sw	a2,32(sp)
80016b88:	01012683          	lw	a3,16(sp)
80016b8c:	02012783          	lw	a5,32(sp)
80016b90:	01412703          	lw	a4,20(sp)
80016b94:	02812583          	lw	a1,40(sp)
80016b98:	00f687b3          	add	a5,a3,a5
80016b9c:	00d7b6b3          	sltu	a3,a5,a3
80016ba0:	02f12823          	sw	a5,48(sp)
80016ba4:	02412783          	lw	a5,36(sp)
80016ba8:	02c12503          	lw	a0,44(sp)
80016bac:	00f707b3          	add	a5,a4,a5
80016bb0:	00d78633          	add	a2,a5,a3
80016bb4:	00e7b733          	sltu	a4,a5,a4
80016bb8:	00d637b3          	sltu	a5,a2,a3
80016bbc:	00f767b3          	or	a5,a4,a5
80016bc0:	01812703          	lw	a4,24(sp)
80016bc4:	01c12683          	lw	a3,28(sp)
80016bc8:	02c12a23          	sw	a2,52(sp)
80016bcc:	00b705b3          	add	a1,a4,a1
80016bd0:	00f58633          	add	a2,a1,a5
80016bd4:	00e5b733          	sltu	a4,a1,a4
80016bd8:	00f637b3          	sltu	a5,a2,a5
80016bdc:	00a686b3          	add	a3,a3,a0
80016be0:	00f76733          	or	a4,a4,a5
80016be4:	00e68733          	add	a4,a3,a4
80016be8:	02c12c23          	sw	a2,56(sp)
80016bec:	02e12e23          	sw	a4,60(sp)
80016bf0:	da5ff06f          	j	80016994 <__subtf3+0x1f0>
80016bf4:	3e070063          	beqz	a4,80016fd4 <__subtf3+0x830>
80016bf8:	24041663          	bnez	s0,80016e44 <__subtf3+0x6a0>
80016bfc:	01412883          	lw	a7,20(sp)
80016c00:	01812503          	lw	a0,24(sp)
80016c04:	01c12e03          	lw	t3,28(sp)
80016c08:	00a8e333          	or	t1,a7,a0
80016c0c:	01c36333          	or	t1,t1,t3
80016c10:	00d36333          	or	t1,t1,a3
80016c14:	18031e63          	bnez	t1,80016db0 <__subtf3+0x60c>
80016c18:	02f12823          	sw	a5,48(sp)
80016c1c:	02412783          	lw	a5,36(sp)
80016c20:	00060413          	mv	s0,a2
80016c24:	02f12a23          	sw	a5,52(sp)
80016c28:	02812783          	lw	a5,40(sp)
80016c2c:	02f12c23          	sw	a5,56(sp)
80016c30:	02c12783          	lw	a5,44(sp)
80016c34:	02f12e23          	sw	a5,60(sp)
  FP_PACK_SEMIRAW_Q (r, R);
80016c38:	03012783          	lw	a5,48(sp)
80016c3c:	0077f713          	andi	a4,a5,7
80016c40:	04070463          	beqz	a4,80016c88 <__subtf3+0x4e4>
80016c44:	00f7f713          	andi	a4,a5,15
80016c48:	00400693          	li	a3,4
80016c4c:	02d70e63          	beq	a4,a3,80016c88 <__subtf3+0x4e4>
80016c50:	03412703          	lw	a4,52(sp)
80016c54:	00478793          	addi	a5,a5,4
80016c58:	02f12823          	sw	a5,48(sp)
80016c5c:	0047b793          	sltiu	a5,a5,4
80016c60:	00e78733          	add	a4,a5,a4
80016c64:	00f737b3          	sltu	a5,a4,a5
80016c68:	02e12a23          	sw	a4,52(sp)
80016c6c:	03812703          	lw	a4,56(sp)
80016c70:	00e78733          	add	a4,a5,a4
80016c74:	02e12c23          	sw	a4,56(sp)
80016c78:	00f73733          	sltu	a4,a4,a5
80016c7c:	03c12783          	lw	a5,60(sp)
80016c80:	00f70733          	add	a4,a4,a5
80016c84:	02e12e23          	sw	a4,60(sp)
80016c88:	03c12783          	lw	a5,60(sp)
80016c8c:	00c79713          	slli	a4,a5,0xc
80016c90:	02075263          	bgez	a4,80016cb4 <__subtf3+0x510>
80016c94:	00008737          	lui	a4,0x8
80016c98:	00140413          	addi	s0,s0,1
80016c9c:	fff70713          	addi	a4,a4,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016ca0:	7ae408e3          	beq	s0,a4,80017c50 <__subtf3+0x14ac>
80016ca4:	fff80737          	lui	a4,0xfff80
80016ca8:	fff70713          	addi	a4,a4,-1 # fff7ffff <__stack+0x7ff43533>
80016cac:	00e7f7b3          	and	a5,a5,a4
80016cb0:	02f12e23          	sw	a5,60(sp)
80016cb4:	03010793          	addi	a5,sp,48
80016cb8:	00000693          	li	a3,0
80016cbc:	00300593          	li	a1,3
80016cc0:	0007a703          	lw	a4,0(a5)
80016cc4:	0047a603          	lw	a2,4(a5)
80016cc8:	00168693          	addi	a3,a3,1
80016ccc:	00375713          	srli	a4,a4,0x3
80016cd0:	01d61613          	slli	a2,a2,0x1d
80016cd4:	00c76733          	or	a4,a4,a2
80016cd8:	00e7a023          	sw	a4,0(a5)
80016cdc:	00478793          	addi	a5,a5,4
80016ce0:	feb690e3          	bne	a3,a1,80016cc0 <__subtf3+0x51c>
80016ce4:	03c12783          	lw	a5,60(sp)
80016ce8:	000086b7          	lui	a3,0x8
80016cec:	0037d713          	srli	a4,a5,0x3
80016cf0:	02e12e23          	sw	a4,60(sp)
80016cf4:	fff68793          	addi	a5,a3,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016cf8:	02f41a63          	bne	s0,a5,80016d2c <__subtf3+0x588>
80016cfc:	03412603          	lw	a2,52(sp)
80016d00:	03012783          	lw	a5,48(sp)
80016d04:	00c7e7b3          	or	a5,a5,a2
80016d08:	03812603          	lw	a2,56(sp)
80016d0c:	00c7e7b3          	or	a5,a5,a2
80016d10:	00e7e7b3          	or	a5,a5,a4
80016d14:	00078c63          	beqz	a5,80016d2c <__subtf3+0x588>
80016d18:	02d12e23          	sw	a3,60(sp)
80016d1c:	02012c23          	sw	zero,56(sp)
80016d20:	02012a23          	sw	zero,52(sp)
80016d24:	02012823          	sw	zero,48(sp)
80016d28:	00000913          	li	s2,0
80016d2c:	03c12783          	lw	a5,60(sp)
80016d30:	80010737          	lui	a4,0x80010
80016d34:	fff70713          	addi	a4,a4,-1 # 8000ffff <__stack+0xfffd3533>
80016d38:	00f11623          	sh	a5,12(sp)
80016d3c:	000087b7          	lui	a5,0x8
80016d40:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016d44:	00f47433          	and	s0,s0,a5
80016d48:	01041793          	slli	a5,s0,0x10
80016d4c:	00c12403          	lw	s0,12(sp)
  FP_HANDLE_EXCEPTIONS;

  return r;
}
80016d50:	05c12083          	lw	ra,92(sp)
80016d54:	00048513          	mv	a0,s1
  FP_PACK_SEMIRAW_Q (r, R);
80016d58:	00e47433          	and	s0,s0,a4
80016d5c:	00f46433          	or	s0,s0,a5
80016d60:	01f91793          	slli	a5,s2,0x1f
80016d64:	80000937          	lui	s2,0x80000
80016d68:	fff94913          	not	s2,s2
80016d6c:	01247433          	and	s0,s0,s2
80016d70:	00f46933          	or	s2,s0,a5
  return r;
80016d74:	03012783          	lw	a5,48(sp)
}
80016d78:	05812403          	lw	s0,88(sp)
  return r;
80016d7c:	0124a623          	sw	s2,12(s1)
80016d80:	00f4a023          	sw	a5,0(s1)
80016d84:	03412783          	lw	a5,52(sp)
}
80016d88:	05012903          	lw	s2,80(sp)
80016d8c:	04c12983          	lw	s3,76(sp)
  return r;
80016d90:	00f4a223          	sw	a5,4(s1)
80016d94:	03812783          	lw	a5,56(sp)
}
80016d98:	04812a03          	lw	s4,72(sp)
80016d9c:	04412a83          	lw	s5,68(sp)
  return r;
80016da0:	00f4a423          	sw	a5,8(s1)
}
80016da4:	05412483          	lw	s1,84(sp)
80016da8:	06010113          	addi	sp,sp,96
80016dac:	00008067          	ret
  FP_SUB_Q (R, A, B);
80016db0:	fff00313          	li	t1,-1
80016db4:	06671063          	bne	a4,t1,80016e14 <__subtf3+0x670>
80016db8:	02412583          	lw	a1,36(sp)
80016dbc:	00f686b3          	add	a3,a3,a5
80016dc0:	00f6b7b3          	sltu	a5,a3,a5
80016dc4:	00b88833          	add	a6,a7,a1
80016dc8:	00f80733          	add	a4,a6,a5
80016dcc:	00f737b3          	sltu	a5,a4,a5
80016dd0:	02e12a23          	sw	a4,52(sp)
80016dd4:	02812703          	lw	a4,40(sp)
80016dd8:	00b835b3          	sltu	a1,a6,a1
80016ddc:	00f5e7b3          	or	a5,a1,a5
80016de0:	02d12823          	sw	a3,48(sp)
80016de4:	00e506b3          	add	a3,a0,a4
80016de8:	00f685b3          	add	a1,a3,a5
80016dec:	00f5b7b3          	sltu	a5,a1,a5
80016df0:	00e6b733          	sltu	a4,a3,a4
80016df4:	00f76733          	or	a4,a4,a5
80016df8:	02c12783          	lw	a5,44(sp)
80016dfc:	02b12c23          	sw	a1,56(sp)
80016e00:	00fe0e33          	add	t3,t3,a5
80016e04:	01c70733          	add	a4,a4,t3
80016e08:	02e12e23          	sw	a4,60(sp)
  FP_UNPACK_SEMIRAW_Q (B, b);
80016e0c:	00060413          	mv	s0,a2
80016e10:	b85ff06f          	j	80016994 <__subtf3+0x1f0>
  FP_SUB_Q (R, A, B);
80016e14:	000086b7          	lui	a3,0x8
80016e18:	fff68693          	addi	a3,a3,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016e1c:	ded60ee3          	beq	a2,a3,80016c18 <__subtf3+0x474>
80016e20:	fff74713          	not	a4,a4
80016e24:	07400793          	li	a5,116
80016e28:	04e7d263          	ble	a4,a5,80016e6c <__subtf3+0x6c8>
80016e2c:	00100793          	li	a5,1
80016e30:	00012e23          	sw	zero,28(sp)
80016e34:	00012c23          	sw	zero,24(sp)
80016e38:	00012a23          	sw	zero,20(sp)
80016e3c:	00f12823          	sw	a5,16(sp)
80016e40:	12c0006f          	j	80016f6c <__subtf3+0x7c8>
80016e44:	000086b7          	lui	a3,0x8
80016e48:	fff68693          	addi	a3,a3,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016e4c:	dcd606e3          	beq	a2,a3,80016c18 <__subtf3+0x474>
80016e50:	01c12783          	lw	a5,28(sp)
80016e54:	000806b7          	lui	a3,0x80
80016e58:	00d7e7b3          	or	a5,a5,a3
80016e5c:	00f12e23          	sw	a5,28(sp)
80016e60:	f8c00793          	li	a5,-116
80016e64:	fcf744e3          	blt	a4,a5,80016e2c <__subtf3+0x688>
80016e68:	40e00733          	neg	a4,a4
80016e6c:	40575693          	srai	a3,a4,0x5
80016e70:	00000513          	li	a0,0
80016e74:	01f77713          	andi	a4,a4,31
80016e78:	00000793          	li	a5,0
80016e7c:	00279893          	slli	a7,a5,0x2
80016e80:	02d79063          	bne	a5,a3,80016ea0 <__subtf3+0x6fc>
80016e84:	04071463          	bnez	a4,80016ecc <__subtf3+0x728>
80016e88:	00300693          	li	a3,3
80016e8c:	40f686b3          	sub	a3,a3,a5
80016e90:	02e6d263          	ble	a4,a3,80016eb4 <__subtf3+0x710>
80016e94:	00400713          	li	a4,4
80016e98:	40f707b3          	sub	a5,a4,a5
80016e9c:	07c0006f          	j	80016f18 <__subtf3+0x774>
80016ea0:	011808b3          	add	a7,a6,a7
80016ea4:	0008a883          	lw	a7,0(a7)
80016ea8:	00178793          	addi	a5,a5,1
80016eac:	01156533          	or	a0,a0,a7
80016eb0:	fcdff06f          	j	80016e7c <__subtf3+0x6d8>
80016eb4:	01158333          	add	t1,a1,a7
80016eb8:	00032303          	lw	t1,0(t1)
80016ebc:	00170713          	addi	a4,a4,1
80016ec0:	00458593          	addi	a1,a1,4
80016ec4:	fe65ae23          	sw	t1,-4(a1)
80016ec8:	fc9ff06f          	j	80016e90 <__subtf3+0x6ec>
80016ecc:	04010693          	addi	a3,sp,64
80016ed0:	011686b3          	add	a3,a3,a7
80016ed4:	fd06a683          	lw	a3,-48(a3) # 7ffd0 <_HEAP_SIZE+0x7efd0>
80016ed8:	02000e13          	li	t3,32
80016edc:	40ee0e33          	sub	t3,t3,a4
80016ee0:	01c696b3          	sll	a3,a3,t3
80016ee4:	00d56533          	or	a0,a0,a3
80016ee8:	00300693          	li	a3,3
80016eec:	00000e93          	li	t4,0
80016ef0:	40f686b3          	sub	a3,a3,a5
80016ef4:	02dec663          	blt	t4,a3,80016f20 <__subtf3+0x77c>
80016ef8:	00400593          	li	a1,4
80016efc:	40f587b3          	sub	a5,a1,a5
80016f00:	00269693          	slli	a3,a3,0x2
80016f04:	04010593          	addi	a1,sp,64
80016f08:	00d586b3          	add	a3,a1,a3
80016f0c:	01c12583          	lw	a1,28(sp)
80016f10:	00e5d733          	srl	a4,a1,a4
80016f14:	fce6a823          	sw	a4,-48(a3)
80016f18:	00400693          	li	a3,4
80016f1c:	03c0006f          	j	80016f58 <__subtf3+0x7b4>
80016f20:	01158f33          	add	t5,a1,a7
80016f24:	000f2303          	lw	t1,0(t5)
80016f28:	004f2f03          	lw	t5,4(t5)
80016f2c:	001e8e93          	addi	t4,t4,1
80016f30:	00e35333          	srl	t1,t1,a4
80016f34:	01cf1f33          	sll	t5,t5,t3
80016f38:	01e36333          	or	t1,t1,t5
80016f3c:	0065a023          	sw	t1,0(a1)
80016f40:	00458593          	addi	a1,a1,4
80016f44:	fb1ff06f          	j	80016ef4 <__subtf3+0x750>
80016f48:	00279713          	slli	a4,a5,0x2
80016f4c:	00e80733          	add	a4,a6,a4
80016f50:	00072023          	sw	zero,0(a4)
80016f54:	00178793          	addi	a5,a5,1
80016f58:	fed798e3          	bne	a5,a3,80016f48 <__subtf3+0x7a4>
80016f5c:	01012783          	lw	a5,16(sp)
80016f60:	00a03533          	snez	a0,a0
80016f64:	00a7e533          	or	a0,a5,a0
80016f68:	00a12823          	sw	a0,16(sp)
80016f6c:	02012683          	lw	a3,32(sp)
80016f70:	01012783          	lw	a5,16(sp)
80016f74:	02412703          	lw	a4,36(sp)
80016f78:	01812503          	lw	a0,24(sp)
80016f7c:	00f687b3          	add	a5,a3,a5
80016f80:	00d7b6b3          	sltu	a3,a5,a3
80016f84:	02f12823          	sw	a5,48(sp)
80016f88:	01412783          	lw	a5,20(sp)
80016f8c:	01c12803          	lw	a6,28(sp)
80016f90:	00f707b3          	add	a5,a4,a5
80016f94:	00d785b3          	add	a1,a5,a3
80016f98:	00e7b733          	sltu	a4,a5,a4
80016f9c:	00d5b7b3          	sltu	a5,a1,a3
80016fa0:	00f767b3          	or	a5,a4,a5
80016fa4:	02812703          	lw	a4,40(sp)
80016fa8:	02c12683          	lw	a3,44(sp)
80016fac:	02b12a23          	sw	a1,52(sp)
80016fb0:	00a70533          	add	a0,a4,a0
80016fb4:	00f505b3          	add	a1,a0,a5
80016fb8:	00e53733          	sltu	a4,a0,a4
80016fbc:	00f5b7b3          	sltu	a5,a1,a5
80016fc0:	010686b3          	add	a3,a3,a6
80016fc4:	00f76733          	or	a4,a4,a5
80016fc8:	02b12c23          	sw	a1,56(sp)
80016fcc:	00e68733          	add	a4,a3,a4
80016fd0:	e39ff06f          	j	80016e08 <__subtf3+0x664>
80016fd4:	00008f37          	lui	t5,0x8
80016fd8:	00140593          	addi	a1,s0,1
80016fdc:	ffff0e93          	addi	t4,t5,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016fe0:	01d5f2b3          	and	t0,a1,t4
80016fe4:	00100f93          	li	t6,1
80016fe8:	02412603          	lw	a2,36(sp)
80016fec:	02812703          	lw	a4,40(sp)
80016ff0:	02c12503          	lw	a0,44(sp)
80016ff4:	01412e03          	lw	t3,20(sp)
80016ff8:	01812883          	lw	a7,24(sp)
80016ffc:	01c12303          	lw	t1,28(sp)
80017000:	03010813          	addi	a6,sp,48
80017004:	145fc663          	blt	t6,t0,80017150 <__subtf3+0x9ac>
80017008:	011e65b3          	or	a1,t3,a7
8001700c:	0065e5b3          	or	a1,a1,t1
80017010:	00d5e5b3          	or	a1,a1,a3
80017014:	0a041663          	bnez	s0,800170c0 <__subtf3+0x91c>
80017018:	00059c63          	bnez	a1,80017030 <__subtf3+0x88c>
8001701c:	02f12823          	sw	a5,48(sp)
80017020:	02c12a23          	sw	a2,52(sp)
80017024:	02e12c23          	sw	a4,56(sp)
80017028:	02a12e23          	sw	a0,60(sp)
8001702c:	c0dff06f          	j	80016c38 <__subtf3+0x494>
80017030:	00e665b3          	or	a1,a2,a4
80017034:	00a5e5b3          	or	a1,a1,a0
80017038:	00f5e5b3          	or	a1,a1,a5
8001703c:	00059c63          	bnez	a1,80017054 <__subtf3+0x8b0>
80017040:	02d12823          	sw	a3,48(sp)
80017044:	03c12a23          	sw	t3,52(sp)
80017048:	03112c23          	sw	a7,56(sp)
8001704c:	02612e23          	sw	t1,60(sp)
80017050:	be9ff06f          	j	80016c38 <__subtf3+0x494>
80017054:	00f687b3          	add	a5,a3,a5
80017058:	01c60633          	add	a2,a2,t3
8001705c:	02f12823          	sw	a5,48(sp)
80017060:	00d7b7b3          	sltu	a5,a5,a3
80017064:	00f606b3          	add	a3,a2,a5
80017068:	02d12a23          	sw	a3,52(sp)
8001706c:	01c63633          	sltu	a2,a2,t3
80017070:	00f6b6b3          	sltu	a3,a3,a5
80017074:	00d666b3          	or	a3,a2,a3
80017078:	011705b3          	add	a1,a4,a7
8001707c:	00d587b3          	add	a5,a1,a3
80017080:	0115b733          	sltu	a4,a1,a7
80017084:	00d7b6b3          	sltu	a3,a5,a3
80017088:	00d766b3          	or	a3,a4,a3
8001708c:	00650733          	add	a4,a0,t1
80017090:	00e68733          	add	a4,a3,a4
80017094:	02f12c23          	sw	a5,56(sp)
80017098:	00c71793          	slli	a5,a4,0xc
8001709c:	0007c663          	bltz	a5,800170a8 <__subtf3+0x904>
800170a0:	02e12e23          	sw	a4,60(sp)
800170a4:	b95ff06f          	j	80016c38 <__subtf3+0x494>
800170a8:	fff806b7          	lui	a3,0xfff80
800170ac:	fff68693          	addi	a3,a3,-1 # fff7ffff <__stack+0x7ff43533>
800170b0:	00d77733          	and	a4,a4,a3
800170b4:	02e12e23          	sw	a4,60(sp)
800170b8:	00100413          	li	s0,1
800170bc:	b7dff06f          	j	80016c38 <__subtf3+0x494>
800170c0:	00059e63          	bnez	a1,800170dc <__subtf3+0x938>
800170c4:	02f12823          	sw	a5,48(sp)
800170c8:	02c12a23          	sw	a2,52(sp)
800170cc:	02e12c23          	sw	a4,56(sp)
800170d0:	02a12e23          	sw	a0,60(sp)
800170d4:	000e8413          	mv	s0,t4
800170d8:	b61ff06f          	j	80016c38 <__subtf3+0x494>
800170dc:	00e66733          	or	a4,a2,a4
800170e0:	00a76733          	or	a4,a4,a0
800170e4:	00f767b3          	or	a5,a4,a5
800170e8:	00079c63          	bnez	a5,80017100 <__subtf3+0x95c>
800170ec:	02d12823          	sw	a3,48(sp)
800170f0:	03c12a23          	sw	t3,52(sp)
800170f4:	03112c23          	sw	a7,56(sp)
800170f8:	02612e23          	sw	t1,60(sp)
800170fc:	fd9ff06f          	j	800170d4 <__subtf3+0x930>
80017100:	03e12e23          	sw	t5,60(sp)
80017104:	02012c23          	sw	zero,56(sp)
80017108:	02012a23          	sw	zero,52(sp)
8001710c:	02012823          	sw	zero,48(sp)
80017110:	03c10793          	addi	a5,sp,60
80017114:	0007a703          	lw	a4,0(a5)
80017118:	ffc7a683          	lw	a3,-4(a5)
8001711c:	ffc78793          	addi	a5,a5,-4
80017120:	00371713          	slli	a4,a4,0x3
80017124:	01d6d693          	srli	a3,a3,0x1d
80017128:	00d76733          	or	a4,a4,a3
8001712c:	00e7a223          	sw	a4,4(a5)
80017130:	fef812e3          	bne	a6,a5,80017114 <__subtf3+0x970>
80017134:	03012783          	lw	a5,48(sp)
80017138:	00008437          	lui	s0,0x8
8001713c:	fff40413          	addi	s0,s0,-1 # 7fff <_HEAP_SIZE+0x6fff>
80017140:	00379793          	slli	a5,a5,0x3
80017144:	02f12823          	sw	a5,48(sp)
80017148:	00000913          	li	s2,0
8001714c:	aedff06f          	j	80016c38 <__subtf3+0x494>
80017150:	00f687b3          	add	a5,a3,a5
80017154:	01c60633          	add	a2,a2,t3
80017158:	02f12823          	sw	a5,48(sp)
8001715c:	00d7b7b3          	sltu	a5,a5,a3
80017160:	00f606b3          	add	a3,a2,a5
80017164:	02d12a23          	sw	a3,52(sp)
80017168:	01c63633          	sltu	a2,a2,t3
8001716c:	00f6b6b3          	sltu	a3,a3,a5
80017170:	00d666b3          	or	a3,a2,a3
80017174:	01170733          	add	a4,a4,a7
80017178:	00d70633          	add	a2,a4,a3
8001717c:	00d636b3          	sltu	a3,a2,a3
80017180:	01173733          	sltu	a4,a4,a7
80017184:	00d766b3          	or	a3,a4,a3
80017188:	00650733          	add	a4,a0,t1
8001718c:	00e68733          	add	a4,a3,a4
80017190:	02c12c23          	sw	a2,56(sp)
80017194:	02e12e23          	sw	a4,60(sp)
80017198:	00080793          	mv	a5,a6
8001719c:	00000693          	li	a3,0
800171a0:	00300513          	li	a0,3
800171a4:	0007a703          	lw	a4,0(a5)
800171a8:	0047a603          	lw	a2,4(a5)
800171ac:	00168693          	addi	a3,a3,1
800171b0:	00175713          	srli	a4,a4,0x1
800171b4:	01f61613          	slli	a2,a2,0x1f
800171b8:	00c76733          	or	a4,a4,a2
800171bc:	00e7a023          	sw	a4,0(a5)
800171c0:	00478793          	addi	a5,a5,4
800171c4:	fea690e3          	bne	a3,a0,800171a4 <__subtf3+0xa00>
800171c8:	03c12783          	lw	a5,60(sp)
800171cc:	00058413          	mv	s0,a1
800171d0:	0017d793          	srli	a5,a5,0x1
800171d4:	02f12e23          	sw	a5,60(sp)
800171d8:	000087b7          	lui	a5,0x8
800171dc:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
800171e0:	a4f41ce3          	bne	s0,a5,80016c38 <__subtf3+0x494>
800171e4:	02012e23          	sw	zero,60(sp)
800171e8:	02012c23          	sw	zero,56(sp)
800171ec:	02012a23          	sw	zero,52(sp)
800171f0:	02012823          	sw	zero,48(sp)
800171f4:	a45ff06f          	j	80016c38 <__subtf3+0x494>
800171f8:	28e05463          	blez	a4,80017480 <__subtf3+0xcdc>
800171fc:	0e061063          	bnez	a2,800172dc <__subtf3+0xb38>
80017200:	02412503          	lw	a0,36(sp)
80017204:	02812583          	lw	a1,40(sp)
80017208:	02c12e03          	lw	t3,44(sp)
8001720c:	00b56833          	or	a6,a0,a1
80017210:	01c86833          	or	a6,a6,t3
80017214:	00f86833          	or	a6,a6,a5
80017218:	ee080c63          	beqz	a6,80016910 <__subtf3+0x16c>
8001721c:	fff70613          	addi	a2,a4,-1
80017220:	08061863          	bnez	a2,800172b0 <__subtf3+0xb0c>
80017224:	01412883          	lw	a7,20(sp)
80017228:	40f687b3          	sub	a5,a3,a5
8001722c:	00f6b733          	sltu	a4,a3,a5
80017230:	40a88833          	sub	a6,a7,a0
80017234:	0108b333          	sltu	t1,a7,a6
80017238:	40e80833          	sub	a6,a6,a4
8001723c:	02f12823          	sw	a5,48(sp)
80017240:	03012a23          	sw	a6,52(sp)
80017244:	00000713          	li	a4,0
80017248:	00f6f663          	bleu	a5,a3,80017254 <__subtf3+0xab0>
8001724c:	41150733          	sub	a4,a0,a7
80017250:	00173713          	seqz	a4,a4
80017254:	01812803          	lw	a6,24(sp)
80017258:	00676733          	or	a4,a4,t1
8001725c:	40b806b3          	sub	a3,a6,a1
80017260:	00d83533          	sltu	a0,a6,a3
80017264:	40e686b3          	sub	a3,a3,a4
80017268:	02d12c23          	sw	a3,56(sp)
8001726c:	00070663          	beqz	a4,80017278 <__subtf3+0xad4>
80017270:	410585b3          	sub	a1,a1,a6
80017274:	0015b613          	seqz	a2,a1
80017278:	01c12783          	lw	a5,28(sp)
8001727c:	00a66633          	or	a2,a2,a0
80017280:	00100413          	li	s0,1
80017284:	41c787b3          	sub	a5,a5,t3
80017288:	40c78633          	sub	a2,a5,a2
8001728c:	02c12e23          	sw	a2,60(sp)
80017290:	03c12783          	lw	a5,60(sp)
80017294:	00c79713          	slli	a4,a5,0xc
80017298:	9a0750e3          	bgez	a4,80016c38 <__subtf3+0x494>
8001729c:	00080737          	lui	a4,0x80
800172a0:	fff70713          	addi	a4,a4,-1 # 7ffff <_HEAP_SIZE+0x7efff>
800172a4:	00e7f7b3          	and	a5,a5,a4
800172a8:	02f12e23          	sw	a5,60(sp)
800172ac:	7340006f          	j	800179e0 <__subtf3+0x123c>
800172b0:	000087b7          	lui	a5,0x8
800172b4:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
800172b8:	e4f70c63          	beq	a4,a5,80016910 <__subtf3+0x16c>
800172bc:	07400793          	li	a5,116
800172c0:	04c7d263          	ble	a2,a5,80017304 <__subtf3+0xb60>
800172c4:	00100793          	li	a5,1
800172c8:	02012623          	sw	zero,44(sp)
800172cc:	02012423          	sw	zero,40(sp)
800172d0:	02012223          	sw	zero,36(sp)
800172d4:	02f12023          	sw	a5,32(sp)
800172d8:	12c0006f          	j	80017404 <__subtf3+0xc60>
800172dc:	000087b7          	lui	a5,0x8
800172e0:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
800172e4:	f6f40463          	beq	s0,a5,80016a4c <__subtf3+0x2a8>
800172e8:	02c12783          	lw	a5,44(sp)
800172ec:	000806b7          	lui	a3,0x80
800172f0:	00d7e7b3          	or	a5,a5,a3
800172f4:	02f12623          	sw	a5,44(sp)
800172f8:	07400793          	li	a5,116
800172fc:	fce7c4e3          	blt	a5,a4,800172c4 <__subtf3+0xb20>
80017300:	00070613          	mv	a2,a4
80017304:	40565713          	srai	a4,a2,0x5
80017308:	00000693          	li	a3,0
8001730c:	01f67613          	andi	a2,a2,31
80017310:	00000793          	li	a5,0
80017314:	00279593          	slli	a1,a5,0x2
80017318:	02e79063          	bne	a5,a4,80017338 <__subtf3+0xb94>
8001731c:	04061463          	bnez	a2,80017364 <__subtf3+0xbc0>
80017320:	00300713          	li	a4,3
80017324:	40f70733          	sub	a4,a4,a5
80017328:	02c75263          	ble	a2,a4,8001734c <__subtf3+0xba8>
8001732c:	00400713          	li	a4,4
80017330:	40f707b3          	sub	a5,a4,a5
80017334:	07c0006f          	j	800173b0 <__subtf3+0xc0c>
80017338:	00b885b3          	add	a1,a7,a1
8001733c:	0005a583          	lw	a1,0(a1)
80017340:	00178793          	addi	a5,a5,1
80017344:	00b6e6b3          	or	a3,a3,a1
80017348:	fcdff06f          	j	80017314 <__subtf3+0xb70>
8001734c:	00b30533          	add	a0,t1,a1
80017350:	00052503          	lw	a0,0(a0)
80017354:	00160613          	addi	a2,a2,1
80017358:	00430313          	addi	t1,t1,4
8001735c:	fea32e23          	sw	a0,-4(t1)
80017360:	fc9ff06f          	j	80017328 <__subtf3+0xb84>
80017364:	04010713          	addi	a4,sp,64
80017368:	00b70733          	add	a4,a4,a1
8001736c:	fe072703          	lw	a4,-32(a4)
80017370:	02000813          	li	a6,32
80017374:	40c80833          	sub	a6,a6,a2
80017378:	01071733          	sll	a4,a4,a6
8001737c:	00e6e6b3          	or	a3,a3,a4
80017380:	00300713          	li	a4,3
80017384:	00000e13          	li	t3,0
80017388:	40f70733          	sub	a4,a4,a5
8001738c:	02ee4663          	blt	t3,a4,800173b8 <__subtf3+0xc14>
80017390:	00400593          	li	a1,4
80017394:	40f587b3          	sub	a5,a1,a5
80017398:	00271713          	slli	a4,a4,0x2
8001739c:	04010593          	addi	a1,sp,64
800173a0:	00e58733          	add	a4,a1,a4
800173a4:	02c12583          	lw	a1,44(sp)
800173a8:	00c5d633          	srl	a2,a1,a2
800173ac:	fec72023          	sw	a2,-32(a4)
800173b0:	00400613          	li	a2,4
800173b4:	03c0006f          	j	800173f0 <__subtf3+0xc4c>
800173b8:	00b30eb3          	add	t4,t1,a1
800173bc:	000ea503          	lw	a0,0(t4)
800173c0:	004eae83          	lw	t4,4(t4)
800173c4:	001e0e13          	addi	t3,t3,1
800173c8:	00c55533          	srl	a0,a0,a2
800173cc:	010e9eb3          	sll	t4,t4,a6
800173d0:	01d56533          	or	a0,a0,t4
800173d4:	00a32023          	sw	a0,0(t1)
800173d8:	00430313          	addi	t1,t1,4
800173dc:	fb1ff06f          	j	8001738c <__subtf3+0xbe8>
800173e0:	00279713          	slli	a4,a5,0x2
800173e4:	00e88733          	add	a4,a7,a4
800173e8:	00072023          	sw	zero,0(a4)
800173ec:	00178793          	addi	a5,a5,1
800173f0:	fec798e3          	bne	a5,a2,800173e0 <__subtf3+0xc3c>
800173f4:	02012783          	lw	a5,32(sp)
800173f8:	00d036b3          	snez	a3,a3
800173fc:	00d7e6b3          	or	a3,a5,a3
80017400:	02d12023          	sw	a3,32(sp)
80017404:	01412683          	lw	a3,20(sp)
80017408:	01012583          	lw	a1,16(sp)
8001740c:	02012703          	lw	a4,32(sp)
80017410:	02412783          	lw	a5,36(sp)
80017414:	40e58733          	sub	a4,a1,a4
80017418:	40f687b3          	sub	a5,a3,a5
8001741c:	00f6b633          	sltu	a2,a3,a5
80017420:	00e5b6b3          	sltu	a3,a1,a4
80017424:	40d786b3          	sub	a3,a5,a3
80017428:	02d12a23          	sw	a3,52(sp)
8001742c:	02e12823          	sw	a4,48(sp)
80017430:	00000693          	li	a3,0
80017434:	00e5f463          	bleu	a4,a1,8001743c <__subtf3+0xc98>
80017438:	0017b693          	seqz	a3,a5
8001743c:	00c6e6b3          	or	a3,a3,a2
80017440:	02812703          	lw	a4,40(sp)
80017444:	01812603          	lw	a2,24(sp)
80017448:	40e60733          	sub	a4,a2,a4
8001744c:	40d707b3          	sub	a5,a4,a3
80017450:	02f12c23          	sw	a5,56(sp)
80017454:	00e635b3          	sltu	a1,a2,a4
80017458:	00000613          	li	a2,0
8001745c:	00068463          	beqz	a3,80017464 <__subtf3+0xcc0>
80017460:	00173613          	seqz	a2,a4
80017464:	01c12783          	lw	a5,28(sp)
80017468:	02c12703          	lw	a4,44(sp)
8001746c:	00b66633          	or	a2,a2,a1
80017470:	40e787b3          	sub	a5,a5,a4
80017474:	40c787b3          	sub	a5,a5,a2
80017478:	02f12e23          	sw	a5,60(sp)
8001747c:	e15ff06f          	j	80017290 <__subtf3+0xaec>
80017480:	28070e63          	beqz	a4,8001771c <__subtf3+0xf78>
80017484:	0e041c63          	bnez	s0,8001757c <__subtf3+0xdd8>
80017488:	01412303          	lw	t1,20(sp)
8001748c:	01812883          	lw	a7,24(sp)
80017490:	01c12e83          	lw	t4,28(sp)
80017494:	01136e33          	or	t3,t1,a7
80017498:	01de6e33          	or	t3,t3,t4
8001749c:	00de6e33          	or	t3,t3,a3
800174a0:	020e1663          	bnez	t3,800174cc <__subtf3+0xd28>
800174a4:	02f12823          	sw	a5,48(sp)
800174a8:	02412783          	lw	a5,36(sp)
800174ac:	00060413          	mv	s0,a2
800174b0:	02f12a23          	sw	a5,52(sp)
800174b4:	02812783          	lw	a5,40(sp)
800174b8:	02f12c23          	sw	a5,56(sp)
800174bc:	02c12783          	lw	a5,44(sp)
800174c0:	02f12e23          	sw	a5,60(sp)
800174c4:	00050913          	mv	s2,a0
800174c8:	f70ff06f          	j	80016c38 <__subtf3+0x494>
800174cc:	fff00e13          	li	t3,-1
800174d0:	07c71e63          	bne	a4,t3,8001754c <__subtf3+0xda8>
800174d4:	02412803          	lw	a6,36(sp)
800174d8:	40d786b3          	sub	a3,a5,a3
800174dc:	00d7b733          	sltu	a4,a5,a3
800174e0:	406805b3          	sub	a1,a6,t1
800174e4:	00b83e33          	sltu	t3,a6,a1
800174e8:	40e585b3          	sub	a1,a1,a4
800174ec:	02d12823          	sw	a3,48(sp)
800174f0:	02b12a23          	sw	a1,52(sp)
800174f4:	00000713          	li	a4,0
800174f8:	00d7f663          	bleu	a3,a5,80017504 <__subtf3+0xd60>
800174fc:	41030733          	sub	a4,t1,a6
80017500:	00173713          	seqz	a4,a4
80017504:	02812803          	lw	a6,40(sp)
80017508:	01c76733          	or	a4,a4,t3
8001750c:	00000693          	li	a3,0
80017510:	411805b3          	sub	a1,a6,a7
80017514:	00b83333          	sltu	t1,a6,a1
80017518:	40e585b3          	sub	a1,a1,a4
8001751c:	02b12c23          	sw	a1,56(sp)
80017520:	00070663          	beqz	a4,8001752c <__subtf3+0xd88>
80017524:	410888b3          	sub	a7,a7,a6
80017528:	0018b693          	seqz	a3,a7
8001752c:	02c12783          	lw	a5,44(sp)
80017530:	0066e8b3          	or	a7,a3,t1
80017534:	41d787b3          	sub	a5,a5,t4
80017538:	411787b3          	sub	a5,a5,a7
8001753c:	02f12e23          	sw	a5,60(sp)
  FP_UNPACK_SEMIRAW_Q (B, b);
80017540:	00060413          	mv	s0,a2
80017544:	00050913          	mv	s2,a0
80017548:	d49ff06f          	j	80017290 <__subtf3+0xaec>
  FP_SUB_Q (R, A, B);
8001754c:	000086b7          	lui	a3,0x8
80017550:	fff68693          	addi	a3,a3,-1 # 7fff <_HEAP_SIZE+0x6fff>
80017554:	f4d608e3          	beq	a2,a3,800174a4 <__subtf3+0xd00>
80017558:	fff74713          	not	a4,a4
8001755c:	07400793          	li	a5,116
80017560:	04e7d263          	ble	a4,a5,800175a4 <__subtf3+0xe00>
80017564:	00100793          	li	a5,1
80017568:	00012e23          	sw	zero,28(sp)
8001756c:	00012c23          	sw	zero,24(sp)
80017570:	00012a23          	sw	zero,20(sp)
80017574:	00f12823          	sw	a5,16(sp)
80017578:	12c0006f          	j	800176a4 <__subtf3+0xf00>
8001757c:	000086b7          	lui	a3,0x8
80017580:	fff68693          	addi	a3,a3,-1 # 7fff <_HEAP_SIZE+0x6fff>
80017584:	f2d600e3          	beq	a2,a3,800174a4 <__subtf3+0xd00>
80017588:	01c12783          	lw	a5,28(sp)
8001758c:	000806b7          	lui	a3,0x80
80017590:	00d7e7b3          	or	a5,a5,a3
80017594:	00f12e23          	sw	a5,28(sp)
80017598:	f8c00793          	li	a5,-116
8001759c:	fcf744e3          	blt	a4,a5,80017564 <__subtf3+0xdc0>
800175a0:	40e00733          	neg	a4,a4
800175a4:	40575693          	srai	a3,a4,0x5
800175a8:	00000893          	li	a7,0
800175ac:	01f77713          	andi	a4,a4,31
800175b0:	00000793          	li	a5,0
800175b4:	00279313          	slli	t1,a5,0x2
800175b8:	02d79063          	bne	a5,a3,800175d8 <__subtf3+0xe34>
800175bc:	04071463          	bnez	a4,80017604 <__subtf3+0xe60>
800175c0:	00300693          	li	a3,3
800175c4:	40f686b3          	sub	a3,a3,a5
800175c8:	02e6d263          	ble	a4,a3,800175ec <__subtf3+0xe48>
800175cc:	00400713          	li	a4,4
800175d0:	40f707b3          	sub	a5,a4,a5
800175d4:	07c0006f          	j	80017650 <__subtf3+0xeac>
800175d8:	00680333          	add	t1,a6,t1
800175dc:	00032303          	lw	t1,0(t1)
800175e0:	00178793          	addi	a5,a5,1
800175e4:	0068e8b3          	or	a7,a7,t1
800175e8:	fcdff06f          	j	800175b4 <__subtf3+0xe10>
800175ec:	00658e33          	add	t3,a1,t1
800175f0:	000e2e03          	lw	t3,0(t3)
800175f4:	00170713          	addi	a4,a4,1
800175f8:	00458593          	addi	a1,a1,4
800175fc:	ffc5ae23          	sw	t3,-4(a1)
80017600:	fc9ff06f          	j	800175c8 <__subtf3+0xe24>
80017604:	04010693          	addi	a3,sp,64
80017608:	006686b3          	add	a3,a3,t1
8001760c:	fd06a683          	lw	a3,-48(a3) # 7ffd0 <_HEAP_SIZE+0x7efd0>
80017610:	02000e93          	li	t4,32
80017614:	40ee8eb3          	sub	t4,t4,a4
80017618:	01d696b3          	sll	a3,a3,t4
8001761c:	00d8e8b3          	or	a7,a7,a3
80017620:	00300693          	li	a3,3
80017624:	00000f13          	li	t5,0
80017628:	40f686b3          	sub	a3,a3,a5
8001762c:	02df4663          	blt	t5,a3,80017658 <__subtf3+0xeb4>
80017630:	00400593          	li	a1,4
80017634:	40f587b3          	sub	a5,a1,a5
80017638:	00269693          	slli	a3,a3,0x2
8001763c:	04010593          	addi	a1,sp,64
80017640:	00d586b3          	add	a3,a1,a3
80017644:	01c12583          	lw	a1,28(sp)
80017648:	00e5d733          	srl	a4,a1,a4
8001764c:	fce6a823          	sw	a4,-48(a3)
80017650:	00400693          	li	a3,4
80017654:	03c0006f          	j	80017690 <__subtf3+0xeec>
80017658:	00658fb3          	add	t6,a1,t1
8001765c:	000fae03          	lw	t3,0(t6)
80017660:	004faf83          	lw	t6,4(t6)
80017664:	001f0f13          	addi	t5,t5,1
80017668:	00ee5e33          	srl	t3,t3,a4
8001766c:	01df9fb3          	sll	t6,t6,t4
80017670:	01fe6e33          	or	t3,t3,t6
80017674:	01c5a023          	sw	t3,0(a1)
80017678:	00458593          	addi	a1,a1,4
8001767c:	fb1ff06f          	j	8001762c <__subtf3+0xe88>
80017680:	00279713          	slli	a4,a5,0x2
80017684:	00e80733          	add	a4,a6,a4
80017688:	00072023          	sw	zero,0(a4)
8001768c:	00178793          	addi	a5,a5,1
80017690:	fed798e3          	bne	a5,a3,80017680 <__subtf3+0xedc>
80017694:	01012783          	lw	a5,16(sp)
80017698:	011038b3          	snez	a7,a7
8001769c:	0117e8b3          	or	a7,a5,a7
800176a0:	01112823          	sw	a7,16(sp)
800176a4:	02412683          	lw	a3,36(sp)
800176a8:	02012803          	lw	a6,32(sp)
800176ac:	01012703          	lw	a4,16(sp)
800176b0:	01412783          	lw	a5,20(sp)
800176b4:	40e80733          	sub	a4,a6,a4
800176b8:	40f687b3          	sub	a5,a3,a5
800176bc:	00f6b5b3          	sltu	a1,a3,a5
800176c0:	00e836b3          	sltu	a3,a6,a4
800176c4:	40d786b3          	sub	a3,a5,a3
800176c8:	02d12a23          	sw	a3,52(sp)
800176cc:	02e12823          	sw	a4,48(sp)
800176d0:	00000693          	li	a3,0
800176d4:	00e87463          	bleu	a4,a6,800176dc <__subtf3+0xf38>
800176d8:	0017b693          	seqz	a3,a5
800176dc:	00b6e6b3          	or	a3,a3,a1
800176e0:	01812703          	lw	a4,24(sp)
800176e4:	02812583          	lw	a1,40(sp)
800176e8:	40e58733          	sub	a4,a1,a4
800176ec:	40d707b3          	sub	a5,a4,a3
800176f0:	02f12c23          	sw	a5,56(sp)
800176f4:	00e5b833          	sltu	a6,a1,a4
800176f8:	00000593          	li	a1,0
800176fc:	00068463          	beqz	a3,80017704 <__subtf3+0xf60>
80017700:	00173593          	seqz	a1,a4
80017704:	02c12783          	lw	a5,44(sp)
80017708:	01c12703          	lw	a4,28(sp)
8001770c:	0105e5b3          	or	a1,a1,a6
80017710:	40e787b3          	sub	a5,a5,a4
80017714:	40b787b3          	sub	a5,a5,a1
80017718:	e25ff06f          	j	8001753c <__subtf3+0xd98>
8001771c:	00008fb7          	lui	t6,0x8
80017720:	00140813          	addi	a6,s0,1
80017724:	ffff8293          	addi	t0,t6,-1 # 7fff <_HEAP_SIZE+0x6fff>
80017728:	00587833          	and	a6,a6,t0
8001772c:	00100f13          	li	t5,1
80017730:	02412583          	lw	a1,36(sp)
80017734:	01412603          	lw	a2,20(sp)
80017738:	01812883          	lw	a7,24(sp)
8001773c:	01c12e83          	lw	t4,28(sp)
80017740:	02812303          	lw	t1,40(sp)
80017744:	02c12e03          	lw	t3,44(sp)
80017748:	1d0f4e63          	blt	t5,a6,80017924 <__subtf3+0x1180>
8001774c:	0065e833          	or	a6,a1,t1
80017750:	01166f33          	or	t5,a2,a7
80017754:	01c86833          	or	a6,a6,t3
80017758:	01df6f33          	or	t5,t5,t4
8001775c:	00f86833          	or	a6,a6,a5
80017760:	00df6f33          	or	t5,t5,a3
80017764:	10041863          	bnez	s0,80017874 <__subtf3+0x10d0>
80017768:	020f1263          	bnez	t5,8001778c <__subtf3+0xfe8>
8001776c:	02f12823          	sw	a5,48(sp)
80017770:	02b12a23          	sw	a1,52(sp)
80017774:	02612c23          	sw	t1,56(sp)
80017778:	03c12e23          	sw	t3,60(sp)
8001777c:	d40814e3          	bnez	a6,800174c4 <__subtf3+0xd20>
80017780:	00000413          	li	s0,0
80017784:	00000913          	li	s2,0
80017788:	d00ff06f          	j	80016c88 <__subtf3+0x4e4>
8001778c:	00081c63          	bnez	a6,800177a4 <__subtf3+0x1000>
80017790:	02d12823          	sw	a3,48(sp)
80017794:	02c12a23          	sw	a2,52(sp)
80017798:	03112c23          	sw	a7,56(sp)
8001779c:	03d12e23          	sw	t4,60(sp)
800177a0:	c98ff06f          	j	80016c38 <__subtf3+0x494>
800177a4:	40f68833          	sub	a6,a3,a5
800177a8:	40b602b3          	sub	t0,a2,a1
800177ac:	0106bfb3          	sltu	t6,a3,a6
800177b0:	00563f33          	sltu	t5,a2,t0
800177b4:	41f282b3          	sub	t0,t0,t6
800177b8:	03012823          	sw	a6,48(sp)
800177bc:	02512a23          	sw	t0,52(sp)
800177c0:	00000f93          	li	t6,0
800177c4:	0106f663          	bleu	a6,a3,800177d0 <__subtf3+0x102c>
800177c8:	40c58fb3          	sub	t6,a1,a2
800177cc:	001fbf93          	seqz	t6,t6
800177d0:	406883b3          	sub	t2,a7,t1
800177d4:	01efefb3          	or	t6,t6,t5
800177d8:	41f38a33          	sub	s4,t2,t6
800177dc:	03412c23          	sw	s4,56(sp)
800177e0:	0078bab3          	sltu	s5,a7,t2
800177e4:	00000993          	li	s3,0
800177e8:	000f8463          	beqz	t6,800177f0 <__subtf3+0x104c>
800177ec:	0013b993          	seqz	s3,t2
800177f0:	41ce8f33          	sub	t5,t4,t3
800177f4:	0159e9b3          	or	s3,s3,s5
800177f8:	413f0f33          	sub	t5,t5,s3
800177fc:	03e12e23          	sw	t5,60(sp)
80017800:	00cf1f93          	slli	t6,t5,0xc
80017804:	040fde63          	bgez	t6,80017860 <__subtf3+0x10bc>
80017808:	40d786b3          	sub	a3,a5,a3
8001780c:	40c58633          	sub	a2,a1,a2
80017810:	00d7b833          	sltu	a6,a5,a3
80017814:	41060833          	sub	a6,a2,a6
80017818:	03012a23          	sw	a6,52(sp)
8001781c:	02d12823          	sw	a3,48(sp)
80017820:	00c5b5b3          	sltu	a1,a1,a2
80017824:	00000813          	li	a6,0
80017828:	00d7f463          	bleu	a3,a5,80017830 <__subtf3+0x108c>
8001782c:	00163813          	seqz	a6,a2
80017830:	411307b3          	sub	a5,t1,a7
80017834:	00b865b3          	or	a1,a6,a1
80017838:	00f336b3          	sltu	a3,t1,a5
8001783c:	40b787b3          	sub	a5,a5,a1
80017840:	02f12c23          	sw	a5,56(sp)
80017844:	00058463          	beqz	a1,8001784c <__subtf3+0x10a8>
80017848:	0013b713          	seqz	a4,t2
8001784c:	41de07b3          	sub	a5,t3,t4
80017850:	00d76733          	or	a4,a4,a3
80017854:	40e78733          	sub	a4,a5,a4
80017858:	02e12e23          	sw	a4,60(sp)
8001785c:	c69ff06f          	j	800174c4 <__subtf3+0xd20>
80017860:	00586833          	or	a6,a6,t0
80017864:	01486833          	or	a6,a6,s4
80017868:	01e86833          	or	a6,a6,t5
8001786c:	f0080ae3          	beqz	a6,80017780 <__subtf3+0xfdc>
80017870:	bc8ff06f          	j	80016c38 <__subtf3+0x494>
80017874:	03010393          	addi	t2,sp,48
80017878:	040f1e63          	bnez	t5,800178d4 <__subtf3+0x1130>
8001787c:	02081e63          	bnez	a6,800178b8 <__subtf3+0x1114>
80017880:	03f12e23          	sw	t6,60(sp)
80017884:	02012c23          	sw	zero,56(sp)
80017888:	02012a23          	sw	zero,52(sp)
8001788c:	02012823          	sw	zero,48(sp)
80017890:	03c10793          	addi	a5,sp,60
80017894:	0007a703          	lw	a4,0(a5)
80017898:	ffc7a683          	lw	a3,-4(a5)
8001789c:	ffc78793          	addi	a5,a5,-4
800178a0:	00371713          	slli	a4,a4,0x3
800178a4:	01d6d693          	srli	a3,a3,0x1d
800178a8:	00d76733          	or	a4,a4,a3
800178ac:	00e7a223          	sw	a4,4(a5)
800178b0:	fef392e3          	bne	t2,a5,80017894 <__subtf3+0x10f0>
800178b4:	881ff06f          	j	80017134 <__subtf3+0x990>
800178b8:	02f12823          	sw	a5,48(sp)
800178bc:	02b12a23          	sw	a1,52(sp)
800178c0:	02612c23          	sw	t1,56(sp)
800178c4:	03c12e23          	sw	t3,60(sp)
800178c8:	00050913          	mv	s2,a0
800178cc:	00028413          	mv	s0,t0
800178d0:	b68ff06f          	j	80016c38 <__subtf3+0x494>
800178d4:	00081c63          	bnez	a6,800178ec <__subtf3+0x1148>
800178d8:	02d12823          	sw	a3,48(sp)
800178dc:	02c12a23          	sw	a2,52(sp)
800178e0:	03112c23          	sw	a7,56(sp)
800178e4:	03d12e23          	sw	t4,60(sp)
800178e8:	fe5ff06f          	j	800178cc <__subtf3+0x1128>
800178ec:	03f12e23          	sw	t6,60(sp)
800178f0:	02012c23          	sw	zero,56(sp)
800178f4:	02012a23          	sw	zero,52(sp)
800178f8:	02012823          	sw	zero,48(sp)
800178fc:	03c10793          	addi	a5,sp,60
80017900:	0007a703          	lw	a4,0(a5)
80017904:	ffc7a683          	lw	a3,-4(a5)
80017908:	ffc78793          	addi	a5,a5,-4
8001790c:	00371713          	slli	a4,a4,0x3
80017910:	01d6d693          	srli	a3,a3,0x1d
80017914:	00d76733          	or	a4,a4,a3
80017918:	00e7a223          	sw	a4,4(a5)
8001791c:	fef392e3          	bne	t2,a5,80017900 <__subtf3+0x115c>
80017920:	815ff06f          	j	80017134 <__subtf3+0x990>
80017924:	40f68833          	sub	a6,a3,a5
80017928:	40b602b3          	sub	t0,a2,a1
8001792c:	0106bfb3          	sltu	t6,a3,a6
80017930:	00563f33          	sltu	t5,a2,t0
80017934:	41f282b3          	sub	t0,t0,t6
80017938:	03012823          	sw	a6,48(sp)
8001793c:	02512a23          	sw	t0,52(sp)
80017940:	00000f93          	li	t6,0
80017944:	0106f663          	bleu	a6,a3,80017950 <__subtf3+0x11ac>
80017948:	40c58fb3          	sub	t6,a1,a2
8001794c:	001fbf93          	seqz	t6,t6
80017950:	406883b3          	sub	t2,a7,t1
80017954:	01efefb3          	or	t6,t6,t5
80017958:	41f38a33          	sub	s4,t2,t6
8001795c:	03412c23          	sw	s4,56(sp)
80017960:	0078bab3          	sltu	s5,a7,t2
80017964:	00000993          	li	s3,0
80017968:	000f8463          	beqz	t6,80017970 <__subtf3+0x11cc>
8001796c:	0013b993          	seqz	s3,t2
80017970:	41ce8f33          	sub	t5,t4,t3
80017974:	0159e9b3          	or	s3,s3,s5
80017978:	413f0f33          	sub	t5,t5,s3
8001797c:	03e12e23          	sw	t5,60(sp)
80017980:	00cf1f93          	slli	t6,t5,0xc
80017984:	0a0fdc63          	bgez	t6,80017a3c <__subtf3+0x1298>
80017988:	40d786b3          	sub	a3,a5,a3
8001798c:	40c58633          	sub	a2,a1,a2
80017990:	00d7b833          	sltu	a6,a5,a3
80017994:	41060833          	sub	a6,a2,a6
80017998:	03012a23          	sw	a6,52(sp)
8001799c:	02d12823          	sw	a3,48(sp)
800179a0:	00c5b5b3          	sltu	a1,a1,a2
800179a4:	00000813          	li	a6,0
800179a8:	00d7f463          	bleu	a3,a5,800179b0 <__subtf3+0x120c>
800179ac:	00163813          	seqz	a6,a2
800179b0:	411307b3          	sub	a5,t1,a7
800179b4:	00b865b3          	or	a1,a6,a1
800179b8:	00f336b3          	sltu	a3,t1,a5
800179bc:	40b787b3          	sub	a5,a5,a1
800179c0:	02f12c23          	sw	a5,56(sp)
800179c4:	00058463          	beqz	a1,800179cc <__subtf3+0x1228>
800179c8:	0013b713          	seqz	a4,t2
800179cc:	41de07b3          	sub	a5,t3,t4
800179d0:	00d76733          	or	a4,a4,a3
800179d4:	40e78733          	sub	a4,a5,a4
800179d8:	02e12e23          	sw	a4,60(sp)
800179dc:	00050913          	mv	s2,a0
800179e0:	03c12503          	lw	a0,60(sp)
800179e4:	06050663          	beqz	a0,80017a50 <__subtf3+0x12ac>
800179e8:	2dd000ef          	jal	ra,800184c4 <__clzsi2>
800179ec:	ff450513          	addi	a0,a0,-12
800179f0:	02000693          	li	a3,32
800179f4:	02d56833          	rem	a6,a0,a3
800179f8:	02d547b3          	div	a5,a0,a3
800179fc:	08080663          	beqz	a6,80017a88 <__subtf3+0x12e4>
80017a00:	ffc00713          	li	a4,-4
80017a04:	00279593          	slli	a1,a5,0x2
80017a08:	ff000e13          	li	t3,-16
80017a0c:	410686b3          	sub	a3,a3,a6
80017a10:	02e78733          	mul	a4,a5,a4
80017a14:	ffc70713          	addi	a4,a4,-4
80017a18:	0bc71063          	bne	a4,t3,80017ab8 <__subtf3+0x1314>
80017a1c:	04010713          	addi	a4,sp,64
80017a20:	00b705b3          	add	a1,a4,a1
80017a24:	03012703          	lw	a4,48(sp)
80017a28:	fff78793          	addi	a5,a5,-1
80017a2c:	01071833          	sll	a6,a4,a6
80017a30:	ff05a823          	sw	a6,-16(a1)
80017a34:	fff00693          	li	a3,-1
80017a38:	0c00006f          	j	80017af8 <__subtf3+0x1354>
80017a3c:	00586833          	or	a6,a6,t0
80017a40:	01486833          	or	a6,a6,s4
80017a44:	01e86833          	or	a6,a6,t5
80017a48:	d2080ce3          	beqz	a6,80017780 <__subtf3+0xfdc>
80017a4c:	f95ff06f          	j	800179e0 <__subtf3+0x123c>
80017a50:	03812503          	lw	a0,56(sp)
80017a54:	00050863          	beqz	a0,80017a64 <__subtf3+0x12c0>
80017a58:	26d000ef          	jal	ra,800184c4 <__clzsi2>
80017a5c:	02050513          	addi	a0,a0,32
80017a60:	f8dff06f          	j	800179ec <__subtf3+0x1248>
80017a64:	03412503          	lw	a0,52(sp)
80017a68:	00050863          	beqz	a0,80017a78 <__subtf3+0x12d4>
80017a6c:	259000ef          	jal	ra,800184c4 <__clzsi2>
80017a70:	04050513          	addi	a0,a0,64
80017a74:	f79ff06f          	j	800179ec <__subtf3+0x1248>
80017a78:	03012503          	lw	a0,48(sp)
80017a7c:	249000ef          	jal	ra,800184c4 <__clzsi2>
80017a80:	06050513          	addi	a0,a0,96
80017a84:	f69ff06f          	j	800179ec <__subtf3+0x1248>
80017a88:	ffc00613          	li	a2,-4
80017a8c:	02c78633          	mul	a2,a5,a2
80017a90:	03010713          	addi	a4,sp,48
80017a94:	00300693          	li	a3,3
80017a98:	00c705b3          	add	a1,a4,a2
80017a9c:	00c5a583          	lw	a1,12(a1)
80017aa0:	fff68693          	addi	a3,a3,-1
80017aa4:	ffc70713          	addi	a4,a4,-4
80017aa8:	00b72823          	sw	a1,16(a4)
80017aac:	fef6d6e3          	ble	a5,a3,80017a98 <__subtf3+0x12f4>
80017ab0:	fff78793          	addi	a5,a5,-1
80017ab4:	f81ff06f          	j	80017a34 <__subtf3+0x1290>
80017ab8:	03010613          	addi	a2,sp,48
80017abc:	00e60333          	add	t1,a2,a4
80017ac0:	00e588b3          	add	a7,a1,a4
80017ac4:	011608b3          	add	a7,a2,a7
80017ac8:	00c32603          	lw	a2,12(t1)
80017acc:	01032303          	lw	t1,16(t1)
80017ad0:	00d65633          	srl	a2,a2,a3
80017ad4:	01031333          	sll	t1,t1,a6
80017ad8:	00666633          	or	a2,a2,t1
80017adc:	00c8a823          	sw	a2,16(a7)
80017ae0:	f35ff06f          	j	80017a14 <__subtf3+0x1270>
80017ae4:	00279713          	slli	a4,a5,0x2
80017ae8:	03010613          	addi	a2,sp,48
80017aec:	00e60733          	add	a4,a2,a4
80017af0:	00072023          	sw	zero,0(a4)
80017af4:	fff78793          	addi	a5,a5,-1
80017af8:	fed796e3          	bne	a5,a3,80017ae4 <__subtf3+0x1340>
80017afc:	12854e63          	blt	a0,s0,80017c38 <__subtf3+0x1494>
80017b00:	40850433          	sub	s0,a0,s0
80017b04:	02000713          	li	a4,32
80017b08:	00140413          	addi	s0,s0,1
80017b0c:	02e447b3          	div	a5,s0,a4
80017b10:	00000513          	li	a0,0
80017b14:	02e46433          	rem	s0,s0,a4
80017b18:	00000713          	li	a4,0
80017b1c:	02f74a63          	blt	a4,a5,80017b50 <__subtf3+0x13ac>
80017b20:	00078713          	mv	a4,a5
80017b24:	0007d463          	bgez	a5,80017b2c <__subtf3+0x1388>
80017b28:	00000713          	li	a4,0
80017b2c:	00279313          	slli	t1,a5,0x2
80017b30:	04041a63          	bnez	s0,80017b84 <__subtf3+0x13e0>
80017b34:	00300693          	li	a3,3
80017b38:	03010713          	addi	a4,sp,48
80017b3c:	40f686b3          	sub	a3,a3,a5
80017b40:	0286d663          	ble	s0,a3,80017b6c <__subtf3+0x13c8>
80017b44:	00400713          	li	a4,4
80017b48:	40f707b3          	sub	a5,a4,a5
80017b4c:	08c0006f          	j	80017bd8 <__subtf3+0x1434>
80017b50:	00271693          	slli	a3,a4,0x2
80017b54:	03010613          	addi	a2,sp,48
80017b58:	00d606b3          	add	a3,a2,a3
80017b5c:	0006a683          	lw	a3,0(a3)
80017b60:	00170713          	addi	a4,a4,1
80017b64:	00d56533          	or	a0,a0,a3
80017b68:	fb5ff06f          	j	80017b1c <__subtf3+0x1378>
80017b6c:	00670633          	add	a2,a4,t1
80017b70:	00062603          	lw	a2,0(a2)
80017b74:	00140413          	addi	s0,s0,1
80017b78:	00470713          	addi	a4,a4,4
80017b7c:	fec72e23          	sw	a2,-4(a4)
80017b80:	fc1ff06f          	j	80017b40 <__subtf3+0x139c>
80017b84:	00271713          	slli	a4,a4,0x2
80017b88:	04010693          	addi	a3,sp,64
80017b8c:	00e68733          	add	a4,a3,a4
80017b90:	ff072703          	lw	a4,-16(a4)
80017b94:	02000613          	li	a2,32
80017b98:	40860633          	sub	a2,a2,s0
80017b9c:	00c71733          	sll	a4,a4,a2
80017ba0:	00e56533          	or	a0,a0,a4
80017ba4:	00300713          	li	a4,3
80017ba8:	03010593          	addi	a1,sp,48
80017bac:	00000813          	li	a6,0
80017bb0:	40f70733          	sub	a4,a4,a5
80017bb4:	02e84663          	blt	a6,a4,80017be0 <__subtf3+0x143c>
80017bb8:	00400693          	li	a3,4
80017bbc:	40f687b3          	sub	a5,a3,a5
80017bc0:	00271713          	slli	a4,a4,0x2
80017bc4:	04010693          	addi	a3,sp,64
80017bc8:	00e68733          	add	a4,a3,a4
80017bcc:	03c12683          	lw	a3,60(sp)
80017bd0:	0086d433          	srl	s0,a3,s0
80017bd4:	fe872823          	sw	s0,-16(a4)
80017bd8:	00300693          	li	a3,3
80017bdc:	0400006f          	j	80017c1c <__subtf3+0x1478>
80017be0:	006588b3          	add	a7,a1,t1
80017be4:	0008a683          	lw	a3,0(a7)
80017be8:	0048a883          	lw	a7,4(a7)
80017bec:	00180813          	addi	a6,a6,1
80017bf0:	0086d6b3          	srl	a3,a3,s0
80017bf4:	00c898b3          	sll	a7,a7,a2
80017bf8:	0116e6b3          	or	a3,a3,a7
80017bfc:	00d5a023          	sw	a3,0(a1)
80017c00:	00458593          	addi	a1,a1,4
80017c04:	fb1ff06f          	j	80017bb4 <__subtf3+0x1410>
80017c08:	00279713          	slli	a4,a5,0x2
80017c0c:	03010613          	addi	a2,sp,48
80017c10:	00e60733          	add	a4,a2,a4
80017c14:	00072023          	sw	zero,0(a4)
80017c18:	00178793          	addi	a5,a5,1
80017c1c:	fef6d6e3          	ble	a5,a3,80017c08 <__subtf3+0x1464>
80017c20:	03012703          	lw	a4,48(sp)
80017c24:	00a037b3          	snez	a5,a0
80017c28:	00000413          	li	s0,0
80017c2c:	00f767b3          	or	a5,a4,a5
80017c30:	02f12823          	sw	a5,48(sp)
80017c34:	804ff06f          	j	80016c38 <__subtf3+0x494>
80017c38:	03c12783          	lw	a5,60(sp)
80017c3c:	fff80737          	lui	a4,0xfff80
80017c40:	fff70713          	addi	a4,a4,-1 # fff7ffff <__stack+0x7ff43533>
80017c44:	40a40433          	sub	s0,s0,a0
80017c48:	00e7f7b3          	and	a5,a5,a4
80017c4c:	e19fe06f          	j	80016a64 <__subtf3+0x2c0>
  FP_PACK_SEMIRAW_Q (r, R);
80017c50:	02012e23          	sw	zero,60(sp)
80017c54:	02012c23          	sw	zero,56(sp)
80017c58:	02012a23          	sw	zero,52(sp)
80017c5c:	02012823          	sw	zero,48(sp)
80017c60:	854ff06f          	j	80016cb4 <__subtf3+0x510>

80017c64 <__fixtfsi>:
#include "soft-fp.h"
#include "quad.h"

SItype
__fixtfsi (TFtype a)
{
80017c64:	00452703          	lw	a4,4(a0)
80017c68:	00852783          	lw	a5,8(a0)
80017c6c:	00c52603          	lw	a2,12(a0)
80017c70:	00052683          	lw	a3,0(a0)
80017c74:	fe010113          	addi	sp,sp,-32
  FP_DECL_EX;
  FP_DECL_Q (A);
  USItype r;

  FP_INIT_EXCEPTIONS;
  FP_UNPACK_RAW_Q (A, a);
80017c78:	00e12223          	sw	a4,4(sp)
80017c7c:	00f12423          	sw	a5,8(sp)
80017c80:	00e12a23          	sw	a4,20(sp)
80017c84:	00f12c23          	sw	a5,24(sp)
  FP_TO_INT_Q (r, A, SI_BITS, 1);
80017c88:	00004737          	lui	a4,0x4
  FP_UNPACK_RAW_Q (A, a);
80017c8c:	00161793          	slli	a5,a2,0x1
80017c90:	00d12023          	sw	a3,0(sp)
80017c94:	00d12823          	sw	a3,16(sp)
80017c98:	00c12623          	sw	a2,12(sp)
80017c9c:	0117d693          	srli	a3,a5,0x11
  FP_TO_INT_Q (r, A, SI_BITS, 1);
80017ca0:	ffe70793          	addi	a5,a4,-2 # 3ffe <_HEAP_SIZE+0x2ffe>
80017ca4:	00000513          	li	a0,0
80017ca8:	02d7d063          	ble	a3,a5,80017cc8 <__fixtfsi+0x64>
80017cac:	01d70793          	addi	a5,a4,29
80017cb0:	01061593          	slli	a1,a2,0x10
80017cb4:	01f65613          	srli	a2,a2,0x1f
80017cb8:	00d7dc63          	ble	a3,a5,80017cd0 <__fixtfsi+0x6c>
80017cbc:	80000537          	lui	a0,0x80000
80017cc0:	fff54513          	not	a0,a0
80017cc4:	00a60533          	add	a0,a2,a0
  FP_HANDLE_EXCEPTIONS;

  return r;
}
80017cc8:	02010113          	addi	sp,sp,32
80017ccc:	00008067          	ret
  FP_TO_INT_Q (r, A, SI_BITS, 1);
80017cd0:	000107b7          	lui	a5,0x10
80017cd4:	0105d593          	srli	a1,a1,0x10
80017cd8:	00f5e5b3          	or	a1,a1,a5
80017cdc:	06f70793          	addi	a5,a4,111
80017ce0:	40d787b3          	sub	a5,a5,a3
80017ce4:	4057d713          	srai	a4,a5,0x5
80017ce8:	00b12e23          	sw	a1,28(sp)
80017cec:	01f7f793          	andi	a5,a5,31
80017cf0:	0a079263          	bnez	a5,80017d94 <__fixtfsi+0x130>
80017cf4:	00300593          	li	a1,3
80017cf8:	01010693          	addi	a3,sp,16
80017cfc:	00271513          	slli	a0,a4,0x2
80017d00:	40e585b3          	sub	a1,a1,a4
80017d04:	02f5de63          	ble	a5,a1,80017d40 <__fixtfsi+0xdc>
80017d08:	00400793          	li	a5,4
80017d0c:	40e78733          	sub	a4,a5,a4
80017d10:	01010693          	addi	a3,sp,16
80017d14:	00271793          	slli	a5,a4,0x2
80017d18:	00f687b3          	add	a5,a3,a5
80017d1c:	00400693          	li	a3,4
80017d20:	0007a023          	sw	zero,0(a5) # 10000 <_HEAP_SIZE+0xf000>
80017d24:	00170713          	addi	a4,a4,1
80017d28:	00478793          	addi	a5,a5,4
80017d2c:	fed71ae3          	bne	a4,a3,80017d20 <__fixtfsi+0xbc>
80017d30:	01012503          	lw	a0,16(sp)
80017d34:	f8060ae3          	beqz	a2,80017cc8 <__fixtfsi+0x64>
80017d38:	40a00533          	neg	a0,a0
80017d3c:	f8dff06f          	j	80017cc8 <__fixtfsi+0x64>
80017d40:	00a68833          	add	a6,a3,a0
80017d44:	00082803          	lw	a6,0(a6)
80017d48:	00178793          	addi	a5,a5,1
80017d4c:	00468693          	addi	a3,a3,4
80017d50:	ff06ae23          	sw	a6,-4(a3)
80017d54:	fb1ff06f          	j	80017d04 <__fixtfsi+0xa0>
80017d58:	ff052683          	lw	a3,-16(a0) # 7ffffff0 <__stack+0xfffc3524>
80017d5c:	ff072303          	lw	t1,-16(a4)
80017d60:	011696b3          	sll	a3,a3,a7
80017d64:	00f35333          	srl	t1,t1,a5
80017d68:	0066e6b3          	or	a3,a3,t1
80017d6c:	00d12823          	sw	a3,16(sp)
80017d70:	00100693          	li	a3,1
80017d74:	ff06c2e3          	blt	a3,a6,80017d58 <__fixtfsi+0xf4>
80017d78:	00168713          	addi	a4,a3,1
80017d7c:	02010513          	addi	a0,sp,32
80017d80:	00269693          	slli	a3,a3,0x2
80017d84:	00d506b3          	add	a3,a0,a3
80017d88:	00f5d7b3          	srl	a5,a1,a5
80017d8c:	fef6a823          	sw	a5,-16(a3)
80017d90:	f81ff06f          	j	80017d10 <__fixtfsi+0xac>
80017d94:	00170513          	addi	a0,a4,1
80017d98:	02010893          	addi	a7,sp,32
80017d9c:	00300813          	li	a6,3
80017da0:	00251513          	slli	a0,a0,0x2
80017da4:	40e80833          	sub	a6,a6,a4
80017da8:	00a88533          	add	a0,a7,a0
80017dac:	00271713          	slli	a4,a4,0x2
80017db0:	02000893          	li	a7,32
80017db4:	02010313          	addi	t1,sp,32
80017db8:	00000693          	li	a3,0
80017dbc:	40f888b3          	sub	a7,a7,a5
80017dc0:	00e30733          	add	a4,t1,a4
80017dc4:	fb1ff06f          	j	80017d74 <__fixtfsi+0x110>

80017dc8 <__floatsitf>:
#include "soft-fp.h"
#include "quad.h"

TFtype
__floatsitf (SItype i)
{
80017dc8:	fd010113          	addi	sp,sp,-48
80017dcc:	02912223          	sw	s1,36(sp)
80017dd0:	02112623          	sw	ra,44(sp)
80017dd4:	02812423          	sw	s0,40(sp)
80017dd8:	03212023          	sw	s2,32(sp)
80017ddc:	00050493          	mv	s1,a0
  FP_DECL_Q (A);
  TFtype a;

  FP_FROM_INT_Q (A, i, SI_BITS, USItype);
80017de0:	14058663          	beqz	a1,80017f2c <__floatsitf+0x164>
80017de4:	00058413          	mv	s0,a1
80017de8:	01f5d913          	srli	s2,a1,0x1f
80017dec:	0005d463          	bgez	a1,80017df4 <__floatsitf+0x2c>
80017df0:	40b00433          	neg	s0,a1
80017df4:	00040513          	mv	a0,s0
80017df8:	6cc000ef          	jal	ra,800184c4 <__clzsi2>
80017dfc:	05150593          	addi	a1,a0,81
80017e00:	000047b7          	lui	a5,0x4
80017e04:	01e78793          	addi	a5,a5,30 # 401e <_HEAP_SIZE+0x301e>
80017e08:	4055d713          	srai	a4,a1,0x5
80017e0c:	00812823          	sw	s0,16(sp)
80017e10:	00012a23          	sw	zero,20(sp)
80017e14:	00012c23          	sw	zero,24(sp)
80017e18:	00012e23          	sw	zero,28(sp)
80017e1c:	01f5f593          	andi	a1,a1,31
80017e20:	40a787b3          	sub	a5,a5,a0
80017e24:	02058c63          	beqz	a1,80017e5c <__floatsitf+0x94>
80017e28:	00200693          	li	a3,2
80017e2c:	0ed71c63          	bne	a4,a3,80017f24 <__floatsitf+0x15c>
80017e30:	02000693          	li	a3,32
80017e34:	40b686b3          	sub	a3,a3,a1
80017e38:	00d456b3          	srl	a3,s0,a3
80017e3c:	00d12e23          	sw	a3,28(sp)
80017e40:	fff70693          	addi	a3,a4,-1
80017e44:	02010613          	addi	a2,sp,32
80017e48:	00271713          	slli	a4,a4,0x2
80017e4c:	00e60733          	add	a4,a2,a4
80017e50:	00b41433          	sll	s0,s0,a1
80017e54:	fe872823          	sw	s0,-16(a4)
80017e58:	0340006f          	j	80017e8c <__floatsitf+0xc4>
80017e5c:	00300693          	li	a3,3
80017e60:	40e686b3          	sub	a3,a3,a4
80017e64:	02010613          	addi	a2,sp,32
80017e68:	00269693          	slli	a3,a3,0x2
80017e6c:	00d606b3          	add	a3,a2,a3
80017e70:	ff06a683          	lw	a3,-16(a3)
80017e74:	00200613          	li	a2,2
80017e78:	00d12e23          	sw	a3,28(sp)
80017e7c:	00200693          	li	a3,2
80017e80:	00c71663          	bne	a4,a2,80017e8c <__floatsitf+0xc4>
80017e84:	00812c23          	sw	s0,24(sp)
80017e88:	00100693          	li	a3,1
80017e8c:	01010613          	addi	a2,sp,16
80017e90:	00269713          	slli	a4,a3,0x2
80017e94:	00e60733          	add	a4,a2,a4
80017e98:	fff00613          	li	a2,-1
80017e9c:	00072023          	sw	zero,0(a4)
80017ea0:	fff68693          	addi	a3,a3,-1
80017ea4:	ffc70713          	addi	a4,a4,-4
80017ea8:	fec69ae3          	bne	a3,a2,80017e9c <__floatsitf+0xd4>
  FP_PACK_RAW_Q (a, A);
80017eac:	01c12703          	lw	a4,28(sp)
80017eb0:	800106b7          	lui	a3,0x80010
80017eb4:	fff68693          	addi	a3,a3,-1 # 8000ffff <__stack+0xfffd3533>
80017eb8:	00e11623          	sh	a4,12(sp)
80017ebc:	00008737          	lui	a4,0x8
80017ec0:	fff70713          	addi	a4,a4,-1 # 7fff <_HEAP_SIZE+0x6fff>
80017ec4:	00e7f7b3          	and	a5,a5,a4
80017ec8:	01079713          	slli	a4,a5,0x10
80017ecc:	00c12783          	lw	a5,12(sp)
80017ed0:	01f91913          	slli	s2,s2,0x1f

  return a;
}
80017ed4:	02c12083          	lw	ra,44(sp)
  FP_PACK_RAW_Q (a, A);
80017ed8:	00d7f7b3          	and	a5,a5,a3
80017edc:	00e7e7b3          	or	a5,a5,a4
80017ee0:	80000737          	lui	a4,0x80000
80017ee4:	fff74713          	not	a4,a4
80017ee8:	00e7f7b3          	and	a5,a5,a4
  return a;
80017eec:	01012703          	lw	a4,16(sp)
}
80017ef0:	02812403          	lw	s0,40(sp)
  FP_PACK_RAW_Q (a, A);
80017ef4:	0127e7b3          	or	a5,a5,s2
  return a;
80017ef8:	00e4a023          	sw	a4,0(s1)
80017efc:	01412703          	lw	a4,20(sp)
80017f00:	00f4a623          	sw	a5,12(s1)
}
80017f04:	00048513          	mv	a0,s1
  return a;
80017f08:	00e4a223          	sw	a4,4(s1)
80017f0c:	01812703          	lw	a4,24(sp)
}
80017f10:	02012903          	lw	s2,32(sp)
  return a;
80017f14:	00e4a423          	sw	a4,8(s1)
}
80017f18:	02412483          	lw	s1,36(sp)
80017f1c:	03010113          	addi	sp,sp,48
80017f20:	00008067          	ret
  FP_FROM_INT_Q (A, i, SI_BITS, USItype);
80017f24:	00300713          	li	a4,3
80017f28:	f19ff06f          	j	80017e40 <__floatsitf+0x78>
80017f2c:	00012e23          	sw	zero,28(sp)
80017f30:	00012c23          	sw	zero,24(sp)
80017f34:	00012a23          	sw	zero,20(sp)
80017f38:	00012823          	sw	zero,16(sp)
80017f3c:	00000793          	li	a5,0
80017f40:	00000913          	li	s2,0
80017f44:	f69ff06f          	j	80017eac <__floatsitf+0xe4>

80017f48 <__extenddftf2>:
  FP_DECL_D (A);
  FP_DECL_Q (R);
  TFtype r;

  FP_INIT_EXCEPTIONS;
  FP_UNPACK_RAW_D (A, a);
80017f48:	01465793          	srli	a5,a2,0x14
80017f4c:	00100737          	lui	a4,0x100
80017f50:	fff70713          	addi	a4,a4,-1 # fffff <_HEAP_SIZE+0xfefff>
80017f54:	7ff7f793          	andi	a5,a5,2047
{
80017f58:	fd010113          	addi	sp,sp,-48
  FP_UNPACK_RAW_D (A, a);
80017f5c:	00c77733          	and	a4,a4,a2
#if (2 * _FP_W_TYPE_SIZE) < _FP_FRACBITS_Q
  FP_EXTEND (Q, D, 4, 2, R, A);
80017f60:	00178693          	addi	a3,a5,1
{
80017f64:	02812423          	sw	s0,40(sp)
80017f68:	02912223          	sw	s1,36(sp)
  FP_UNPACK_RAW_D (A, a);
80017f6c:	01f65413          	srli	s0,a2,0x1f
{
80017f70:	02112623          	sw	ra,44(sp)
  FP_EXTEND (Q, D, 4, 2, R, A);
80017f74:	00b12823          	sw	a1,16(sp)
80017f78:	00e12a23          	sw	a4,20(sp)
80017f7c:	00012e23          	sw	zero,28(sp)
80017f80:	00012c23          	sw	zero,24(sp)
80017f84:	7ff6f693          	andi	a3,a3,2047
80017f88:	00100613          	li	a2,1
{
80017f8c:	00050493          	mv	s1,a0
  FP_EXTEND (Q, D, 4, 2, R, A);
80017f90:	0ad65463          	ble	a3,a2,80018038 <__extenddftf2+0xf0>
80017f94:	000046b7          	lui	a3,0x4
80017f98:	c0068693          	addi	a3,a3,-1024 # 3c00 <_HEAP_SIZE+0x2c00>
80017f9c:	0045d513          	srli	a0,a1,0x4
80017fa0:	00d787b3          	add	a5,a5,a3
80017fa4:	00475693          	srli	a3,a4,0x4
80017fa8:	01c71713          	slli	a4,a4,0x1c
80017fac:	00a76733          	or	a4,a4,a0
80017fb0:	01c59593          	slli	a1,a1,0x1c
80017fb4:	00d12e23          	sw	a3,28(sp)
80017fb8:	00e12c23          	sw	a4,24(sp)
80017fbc:	00b12a23          	sw	a1,20(sp)
80017fc0:	00012823          	sw	zero,16(sp)
#else
  FP_EXTEND (Q, D, 2, 1, R, A);
#endif
  FP_PACK_RAW_Q (r, R);
80017fc4:	01c12703          	lw	a4,28(sp)
80017fc8:	00008537          	lui	a0,0x8
80017fcc:	fff50513          	addi	a0,a0,-1 # 7fff <_HEAP_SIZE+0x6fff>
80017fd0:	00e11623          	sh	a4,12(sp)
80017fd4:	00c12703          	lw	a4,12(sp)
80017fd8:	800106b7          	lui	a3,0x80010
80017fdc:	00a7f7b3          	and	a5,a5,a0
80017fe0:	fff68693          	addi	a3,a3,-1 # 8000ffff <__stack+0xfffd3533>
80017fe4:	00d77733          	and	a4,a4,a3
80017fe8:	01079793          	slli	a5,a5,0x10
80017fec:	00f767b3          	or	a5,a4,a5
80017ff0:	80000737          	lui	a4,0x80000
80017ff4:	fff74713          	not	a4,a4
80017ff8:	00e7f7b3          	and	a5,a5,a4
80017ffc:	01f41413          	slli	s0,s0,0x1f
80018000:	0087e433          	or	s0,a5,s0
  FP_HANDLE_EXCEPTIONS;

  return r;
80018004:	01012783          	lw	a5,16(sp)
80018008:	0084a623          	sw	s0,12(s1)
}
8001800c:	02c12083          	lw	ra,44(sp)
  return r;
80018010:	00f4a023          	sw	a5,0(s1)
80018014:	01412783          	lw	a5,20(sp)
}
80018018:	02812403          	lw	s0,40(sp)
8001801c:	00048513          	mv	a0,s1
  return r;
80018020:	00f4a223          	sw	a5,4(s1)
80018024:	01812783          	lw	a5,24(sp)
80018028:	00f4a423          	sw	a5,8(s1)
}
8001802c:	02412483          	lw	s1,36(sp)
80018030:	03010113          	addi	sp,sp,48
80018034:	00008067          	ret
80018038:	00b76533          	or	a0,a4,a1
  FP_EXTEND (Q, D, 4, 2, R, A);
8001803c:	0e079a63          	bnez	a5,80018130 <__extenddftf2+0x1e8>
80018040:	f80502e3          	beqz	a0,80017fc4 <__extenddftf2+0x7c>
80018044:	06070063          	beqz	a4,800180a4 <__extenddftf2+0x15c>
80018048:	00070513          	mv	a0,a4
8001804c:	478000ef          	jal	ra,800184c4 <__clzsi2>
80018050:	03150693          	addi	a3,a0,49
80018054:	4056d713          	srai	a4,a3,0x5
80018058:	01f6f693          	andi	a3,a3,31
8001805c:	04068a63          	beqz	a3,800180b0 <__extenddftf2+0x168>
80018060:	ffc00613          	li	a2,-4
80018064:	02c70633          	mul	a2,a4,a2
80018068:	02000813          	li	a6,32
8001806c:	01010793          	addi	a5,sp,16
80018070:	ff000313          	li	t1,-16
80018074:	40d80833          	sub	a6,a6,a3
80018078:	ffc60613          	addi	a2,a2,-4
8001807c:	ffc78793          	addi	a5,a5,-4
80018080:	08661663          	bne	a2,t1,8001810c <__extenddftf2+0x1c4>
80018084:	02010793          	addi	a5,sp,32
80018088:	fff70613          	addi	a2,a4,-1 # 7fffffff <__stack+0xfffc3533>
8001808c:	00271713          	slli	a4,a4,0x2
80018090:	00e78733          	add	a4,a5,a4
80018094:	01012783          	lw	a5,16(sp)
80018098:	00d796b3          	sll	a3,a5,a3
8001809c:	fed72823          	sw	a3,-16(a4)
800180a0:	03c0006f          	j	800180dc <__extenddftf2+0x194>
800180a4:	420000ef          	jal	ra,800184c4 <__clzsi2>
800180a8:	02050513          	addi	a0,a0,32
800180ac:	fa5ff06f          	j	80018050 <__extenddftf2+0x108>
800180b0:	ffc00613          	li	a2,-4
800180b4:	02c70633          	mul	a2,a4,a2
800180b8:	01010693          	addi	a3,sp,16
800180bc:	00300793          	li	a5,3
800180c0:	00c685b3          	add	a1,a3,a2
800180c4:	00c5a583          	lw	a1,12(a1)
800180c8:	fff78793          	addi	a5,a5,-1
800180cc:	ffc68693          	addi	a3,a3,-4
800180d0:	00b6a823          	sw	a1,16(a3)
800180d4:	fee7d6e3          	ble	a4,a5,800180c0 <__extenddftf2+0x178>
800180d8:	fff70613          	addi	a2,a4,-1
800180dc:	01010793          	addi	a5,sp,16
800180e0:	00261713          	slli	a4,a2,0x2
800180e4:	00e78733          	add	a4,a5,a4
800180e8:	fff00793          	li	a5,-1
800180ec:	00072023          	sw	zero,0(a4)
800180f0:	fff60613          	addi	a2,a2,-1
800180f4:	ffc70713          	addi	a4,a4,-4
800180f8:	fef61ae3          	bne	a2,a5,800180ec <__extenddftf2+0x1a4>
800180fc:	000047b7          	lui	a5,0x4
80018100:	c0c78793          	addi	a5,a5,-1012 # 3c0c <_HEAP_SIZE+0x2c0c>
80018104:	40a787b3          	sub	a5,a5,a0
80018108:	ebdff06f          	j	80017fc4 <__extenddftf2+0x7c>
8001810c:	01010593          	addi	a1,sp,16
80018110:	00c588b3          	add	a7,a1,a2
80018114:	00c8a583          	lw	a1,12(a7)
80018118:	0108a883          	lw	a7,16(a7)
8001811c:	0105d5b3          	srl	a1,a1,a6
80018120:	00d898b3          	sll	a7,a7,a3
80018124:	0115e5b3          	or	a1,a1,a7
80018128:	00b7a823          	sw	a1,16(a5)
8001812c:	f4dff06f          	j	80018078 <__extenddftf2+0x130>
80018130:	000087b7          	lui	a5,0x8
80018134:	02050863          	beqz	a0,80018164 <__extenddftf2+0x21c>
80018138:	01c71793          	slli	a5,a4,0x1c
8001813c:	0045d693          	srli	a3,a1,0x4
80018140:	00d7e7b3          	or	a5,a5,a3
80018144:	00f12c23          	sw	a5,24(sp)
80018148:	00475713          	srli	a4,a4,0x4
8001814c:	000087b7          	lui	a5,0x8
80018150:	01c59593          	slli	a1,a1,0x1c
80018154:	00f76733          	or	a4,a4,a5
80018158:	00b12a23          	sw	a1,20(sp)
8001815c:	00012823          	sw	zero,16(sp)
80018160:	00e12e23          	sw	a4,28(sp)
80018164:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
80018168:	e5dff06f          	j	80017fc4 <__extenddftf2+0x7c>

8001816c <__trunctfdf2>:
#include "double.h"
#include "quad.h"

DFtype
__trunctfdf2 (TFtype a)
{
8001816c:	00c52583          	lw	a1,12(a0)
80018170:	00852783          	lw	a5,8(a0)
80018174:	00452703          	lw	a4,4(a0)
80018178:	fe010113          	addi	sp,sp,-32
8001817c:	00052683          	lw	a3,0(a0)
  FP_DECL_Q (A);
  FP_DECL_D (R);
  DFtype r;

  FP_INIT_ROUNDMODE;
  FP_UNPACK_SEMIRAW_Q (A, a);
80018180:	00f12423          	sw	a5,8(sp)
80018184:	00f12c23          	sw	a5,24(sp)
80018188:	01059793          	slli	a5,a1,0x10
8001818c:	00e12223          	sw	a4,4(sp)
80018190:	00e12a23          	sw	a4,20(sp)
80018194:	0107d793          	srli	a5,a5,0x10
80018198:	00159713          	slli	a4,a1,0x1
8001819c:	00b12623          	sw	a1,12(sp)
800181a0:	00d12023          	sw	a3,0(sp)
800181a4:	00d12823          	sw	a3,16(sp)
800181a8:	00f12e23          	sw	a5,28(sp)
800181ac:	01175713          	srli	a4,a4,0x11
800181b0:	01f5d593          	srli	a1,a1,0x1f
800181b4:	01010313          	addi	t1,sp,16
800181b8:	01c10613          	addi	a2,sp,28
800181bc:	00062783          	lw	a5,0(a2)
800181c0:	ffc62683          	lw	a3,-4(a2)
800181c4:	ffc60613          	addi	a2,a2,-4
800181c8:	00379793          	slli	a5,a5,0x3
800181cc:	01d6d693          	srli	a3,a3,0x1d
800181d0:	00d7e7b3          	or	a5,a5,a3
800181d4:	00f62223          	sw	a5,4(a2)
800181d8:	fec312e3          	bne	t1,a2,800181bc <__trunctfdf2+0x50>
800181dc:	01012683          	lw	a3,16(sp)
#if (2 * _FP_W_TYPE_SIZE) < _FP_FRACBITS_Q
  FP_TRUNC (D, Q, 2, 4, R, A);
800181e0:	00170793          	addi	a5,a4,1
  FP_UNPACK_SEMIRAW_Q (A, a);
800181e4:	00369513          	slli	a0,a3,0x3
  FP_TRUNC (D, Q, 2, 4, R, A);
800181e8:	000086b7          	lui	a3,0x8
800181ec:	fff68693          	addi	a3,a3,-1 # 7fff <_HEAP_SIZE+0x6fff>
800181f0:	00d7f7b3          	and	a5,a5,a3
  FP_UNPACK_SEMIRAW_Q (A, a);
800181f4:	00a12823          	sw	a0,16(sp)
  FP_TRUNC (D, Q, 2, 4, R, A);
800181f8:	00100693          	li	a3,1
800181fc:	1af6dc63          	ble	a5,a3,800183b4 <__trunctfdf2+0x248>
80018200:	ffffc7b7          	lui	a5,0xffffc
80018204:	40078793          	addi	a5,a5,1024 # ffffc400 <__stack+0x7ffbf934>
80018208:	00f70733          	add	a4,a4,a5
8001820c:	7fe00793          	li	a5,2046
80018210:	1ee7ce63          	blt	a5,a4,8001840c <__trunctfdf2+0x2a0>
80018214:	06e05863          	blez	a4,80018284 <__trunctfdf2+0x118>
80018218:	01812803          	lw	a6,24(sp)
8001821c:	01c12603          	lw	a2,28(sp)
80018220:	01412783          	lw	a5,20(sp)
80018224:	01c85693          	srli	a3,a6,0x1c
80018228:	00461613          	slli	a2,a2,0x4
8001822c:	00d66633          	or	a2,a2,a3
80018230:	00479693          	slli	a3,a5,0x4
80018234:	00a6e6b3          	or	a3,a3,a0
80018238:	01c7d793          	srli	a5,a5,0x1c
8001823c:	00481813          	slli	a6,a6,0x4
80018240:	00d036b3          	snez	a3,a3
80018244:	0107e7b3          	or	a5,a5,a6
80018248:	00f6e6b3          	or	a3,a3,a5
8001824c:	00c12a23          	sw	a2,20(sp)
80018250:	00d12823          	sw	a3,16(sp)
80018254:	01012683          	lw	a3,16(sp)
80018258:	01412783          	lw	a5,20(sp)
#else
  FP_TRUNC (D, Q, 1, 2, R, A);
#endif
  FP_PACK_SEMIRAW_D (r, R);
8001825c:	0076f613          	andi	a2,a3,7
80018260:	1a060c63          	beqz	a2,80018418 <__trunctfdf2+0x2ac>
80018264:	00f6f613          	andi	a2,a3,15
80018268:	00400513          	li	a0,4
8001826c:	1aa60663          	beq	a2,a0,80018418 <__trunctfdf2+0x2ac>
80018270:	00468613          	addi	a2,a3,4
80018274:	00d636b3          	sltu	a3,a2,a3
80018278:	00d787b3          	add	a5,a5,a3
8001827c:	00060693          	mv	a3,a2
80018280:	1980006f          	j	80018418 <__trunctfdf2+0x2ac>
  FP_TRUNC (D, Q, 2, 4, R, A);
80018284:	fcc00793          	li	a5,-52
80018288:	00f75a63          	ble	a5,a4,8001829c <__trunctfdf2+0x130>
8001828c:	00012a23          	sw	zero,20(sp)
80018290:	00d12823          	sw	a3,16(sp)
80018294:	00000713          	li	a4,0
80018298:	fbdff06f          	j	80018254 <__trunctfdf2+0xe8>
8001829c:	01c12783          	lw	a5,28(sp)
800182a0:	000806b7          	lui	a3,0x80
800182a4:	00000893          	li	a7,0
800182a8:	00d7e7b3          	or	a5,a5,a3
800182ac:	00f12e23          	sw	a5,28(sp)
800182b0:	03d00793          	li	a5,61
800182b4:	40e78733          	sub	a4,a5,a4
800182b8:	40575513          	srai	a0,a4,0x5
800182bc:	00030793          	mv	a5,t1
800182c0:	01f77713          	andi	a4,a4,31
800182c4:	00000693          	li	a3,0
800182c8:	0007a803          	lw	a6,0(a5)
800182cc:	00168693          	addi	a3,a3,1 # 80001 <_HEAP_SIZE+0x7f001>
800182d0:	00478793          	addi	a5,a5,4
800182d4:	0108e8b3          	or	a7,a7,a6
800182d8:	fed518e3          	bne	a0,a3,800182c8 <__trunctfdf2+0x15c>
800182dc:	00269e93          	slli	t4,a3,0x2
800182e0:	02071a63          	bnez	a4,80018314 <__trunctfdf2+0x1a8>
800182e4:	00300793          	li	a5,3
800182e8:	40d787b3          	sub	a5,a5,a3
800182ec:	00e7d863          	ble	a4,a5,800182fc <__trunctfdf2+0x190>
800182f0:	00400793          	li	a5,4
800182f4:	40d786b3          	sub	a3,a5,a3
800182f8:	0680006f          	j	80018360 <__trunctfdf2+0x1f4>
800182fc:	01d60533          	add	a0,a2,t4
80018300:	00052503          	lw	a0,0(a0)
80018304:	00170713          	addi	a4,a4,1
80018308:	00460613          	addi	a2,a2,4
8001830c:	fea62e23          	sw	a0,-4(a2)
80018310:	fddff06f          	j	800182ec <__trunctfdf2+0x180>
80018314:	02010793          	addi	a5,sp,32
80018318:	01d787b3          	add	a5,a5,t4
8001831c:	ff07a783          	lw	a5,-16(a5)
80018320:	02000813          	li	a6,32
80018324:	40e80833          	sub	a6,a6,a4
80018328:	010797b3          	sll	a5,a5,a6
8001832c:	00f8e8b3          	or	a7,a7,a5
80018330:	00300793          	li	a5,3
80018334:	00000e13          	li	t3,0
80018338:	40d787b3          	sub	a5,a5,a3
8001833c:	04fe4863          	blt	t3,a5,8001838c <__trunctfdf2+0x220>
80018340:	00400613          	li	a2,4
80018344:	40d606b3          	sub	a3,a2,a3
80018348:	00279793          	slli	a5,a5,0x2
8001834c:	02010613          	addi	a2,sp,32
80018350:	00f607b3          	add	a5,a2,a5
80018354:	01c12603          	lw	a2,28(sp)
80018358:	00e65733          	srl	a4,a2,a4
8001835c:	fee7a823          	sw	a4,-16(a5)
80018360:	00400713          	li	a4,4
80018364:	00269793          	slli	a5,a3,0x2
80018368:	00f307b3          	add	a5,t1,a5
8001836c:	0007a023          	sw	zero,0(a5)
80018370:	00168693          	addi	a3,a3,1
80018374:	fee698e3          	bne	a3,a4,80018364 <__trunctfdf2+0x1f8>
80018378:	01012703          	lw	a4,16(sp)
8001837c:	011037b3          	snez	a5,a7
80018380:	00f767b3          	or	a5,a4,a5
80018384:	00f12823          	sw	a5,16(sp)
80018388:	f0dff06f          	j	80018294 <__trunctfdf2+0x128>
8001838c:	01d60f33          	add	t5,a2,t4
80018390:	000f2503          	lw	a0,0(t5)
80018394:	004f2f03          	lw	t5,4(t5)
80018398:	001e0e13          	addi	t3,t3,1
8001839c:	00e55533          	srl	a0,a0,a4
800183a0:	010f1f33          	sll	t5,t5,a6
800183a4:	01e56533          	or	a0,a0,t5
800183a8:	00a62023          	sw	a0,0(a2)
800183ac:	00460613          	addi	a2,a2,4
800183b0:	f8dff06f          	j	8001833c <__trunctfdf2+0x1d0>
800183b4:	01412603          	lw	a2,20(sp)
800183b8:	01812783          	lw	a5,24(sp)
800183bc:	01c12803          	lw	a6,28(sp)
800183c0:	00f666b3          	or	a3,a2,a5
800183c4:	0106e6b3          	or	a3,a3,a6
800183c8:	00a6e6b3          	or	a3,a3,a0
800183cc:	00071863          	bnez	a4,800183dc <__trunctfdf2+0x270>
800183d0:	00d036b3          	snez	a3,a3
800183d4:	00000793          	li	a5,0
800183d8:	e85ff06f          	j	8001825c <__trunctfdf2+0xf0>
800183dc:	0c068a63          	beqz	a3,800184b0 <__trunctfdf2+0x344>
800183e0:	01c65693          	srli	a3,a2,0x1c
800183e4:	00481813          	slli	a6,a6,0x4
800183e8:	00479613          	slli	a2,a5,0x4
800183ec:	01c7d793          	srli	a5,a5,0x1c
800183f0:	00400737          	lui	a4,0x400
800183f4:	00c6e6b3          	or	a3,a3,a2
800183f8:	0107e7b3          	or	a5,a5,a6
800183fc:	00e7e7b3          	or	a5,a5,a4
80018400:	ff86f693          	andi	a3,a3,-8
80018404:	7ff00713          	li	a4,2047
80018408:	e55ff06f          	j	8001825c <__trunctfdf2+0xf0>
8001840c:	00000793          	li	a5,0
80018410:	00000693          	li	a3,0
80018414:	7ff00713          	li	a4,2047
  FP_PACK_SEMIRAW_D (r, R);
80018418:	00879613          	slli	a2,a5,0x8
8001841c:	00065e63          	bgez	a2,80018438 <__trunctfdf2+0x2cc>
80018420:	00170713          	addi	a4,a4,1 # 400001 <_HEAP_SIZE+0x3ff001>
80018424:	7ff00613          	li	a2,2047
80018428:	08c70863          	beq	a4,a2,800184b8 <__trunctfdf2+0x34c>
8001842c:	ff800637          	lui	a2,0xff800
80018430:	fff60613          	addi	a2,a2,-1 # ff7fffff <__stack+0x7f7c3533>
80018434:	00c7f7b3          	and	a5,a5,a2
80018438:	01d79613          	slli	a2,a5,0x1d
8001843c:	0036d693          	srli	a3,a3,0x3
80018440:	00d666b3          	or	a3,a2,a3
80018444:	7ff00613          	li	a2,2047
80018448:	0037d793          	srli	a5,a5,0x3
8001844c:	00c71e63          	bne	a4,a2,80018468 <__trunctfdf2+0x2fc>
80018450:	00f6e6b3          	or	a3,a3,a5
80018454:	00000793          	li	a5,0
80018458:	00068863          	beqz	a3,80018468 <__trunctfdf2+0x2fc>
8001845c:	000807b7          	lui	a5,0x80
80018460:	00000693          	li	a3,0
80018464:	00000593          	li	a1,0
80018468:	00100637          	lui	a2,0x100
8001846c:	fff60613          	addi	a2,a2,-1 # fffff <_HEAP_SIZE+0xfefff>
80018470:	00c7f7b3          	and	a5,a5,a2
80018474:	80100637          	lui	a2,0x80100
80018478:	7ff77713          	andi	a4,a4,2047
8001847c:	fff60613          	addi	a2,a2,-1 # 800fffff <__stack+0xc3533>
80018480:	01471713          	slli	a4,a4,0x14
80018484:	00c7f7b3          	and	a5,a5,a2
80018488:	00e7e7b3          	or	a5,a5,a4
8001848c:	80000737          	lui	a4,0x80000
80018490:	fff74713          	not	a4,a4
80018494:	01f59593          	slli	a1,a1,0x1f
80018498:	00e7f7b3          	and	a5,a5,a4
8001849c:	00b7e733          	or	a4,a5,a1
  FP_HANDLE_EXCEPTIONS;

  return r;
}
800184a0:	00068513          	mv	a0,a3
800184a4:	00070593          	mv	a1,a4
800184a8:	02010113          	addi	sp,sp,32
800184ac:	00008067          	ret
800184b0:	00000793          	li	a5,0
800184b4:	f61ff06f          	j	80018414 <__trunctfdf2+0x2a8>
800184b8:	00000793          	li	a5,0
800184bc:	00000693          	li	a3,0
800184c0:	f79ff06f          	j	80018438 <__trunctfdf2+0x2cc>

800184c4 <__clzsi2>:
  count_leading_zeros (ret, x);
800184c4:	000107b7          	lui	a5,0x10
800184c8:	02f57a63          	bleu	a5,a0,800184fc <__clzsi2+0x38>
800184cc:	0ff00793          	li	a5,255
800184d0:	00a7b7b3          	sltu	a5,a5,a0
800184d4:	00379793          	slli	a5,a5,0x3
800184d8:	02000713          	li	a4,32
800184dc:	40f70733          	sub	a4,a4,a5
800184e0:	00f557b3          	srl	a5,a0,a5
800184e4:	80021537          	lui	a0,0x80021
800184e8:	c6c50513          	addi	a0,a0,-916 # 80020c6c <__stack+0xfffe41a0>
800184ec:	00a787b3          	add	a5,a5,a0
800184f0:	0007c503          	lbu	a0,0(a5) # 10000 <_HEAP_SIZE+0xf000>
}
800184f4:	40a70533          	sub	a0,a4,a0
800184f8:	00008067          	ret
  count_leading_zeros (ret, x);
800184fc:	01000737          	lui	a4,0x1000
80018500:	01000793          	li	a5,16
80018504:	fce56ae3          	bltu	a0,a4,800184d8 <__clzsi2+0x14>
80018508:	01800793          	li	a5,24
8001850c:	fcdff06f          	j	800184d8 <__clzsi2+0x14>

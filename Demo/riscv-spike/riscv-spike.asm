
riscv-spike.elf:     file format elf32-littleriscv


Disassembly of section .text:

80000000 <boot>:
# define LOAD     lw
# define REGBYTES 4
#endif

boot:
    li t6, 0x1800
80000000:	00002fb7          	lui	t6,0x2
80000004:	800f8f93          	addi	t6,t6,-2048 # 1800 <_HEAP_SIZE+0x800>
    csrw mstatus, t6
80000008:	300f9073          	csrw	mstatus,t6
    j _mstart
8000000c:	0340006f          	j	80000040 <_mstart>
80000010:	00000013          	nop
80000014:	00000013          	nop
80000018:	00000013          	nop
8000001c:	00000013          	nop
80000020:	00000013          	nop
80000024:	00000013          	nop
80000028:	00000013          	nop
8000002c:	00000013          	nop
80000030:	00000013          	nop
80000034:	00000013          	nop
80000038:	00000013          	nop
8000003c:	00000013          	nop

80000040 <_mstart>:
	.align 6
	.section .text,"ax",@progbits
	.globl _mstart
/* Startup code */
_mstart:
    la t0, trap_entry
80000040:	00000297          	auipc	t0,0x0
80000044:	11428293          	addi	t0,t0,276 # 80000154 <trap_entry>
    csrw mtvec, t0
80000048:	30529073          	csrw	mtvec,t0
    li	x1, 0
8000004c:	00000093          	li	ra,0
    li	x2, 0
80000050:	00000113          	li	sp,0
    li	x3, 0
80000054:	00000193          	li	gp,0
    li	x4, 0
80000058:	00000213          	li	tp,0
    li	x5, 0
8000005c:	00000293          	li	t0,0
	li	x6, 0
80000060:	00000313          	li	t1,0
    li	x7, 0
80000064:	00000393          	li	t2,0
    li	x8, 0
80000068:	00000413          	li	s0,0
    li	x9, 0
8000006c:	00000493          	li	s1,0
    li	x10, 0
80000070:	00000513          	li	a0,0
    li	x11, 0
80000074:	00000593          	li	a1,0
    li	x12, 0
80000078:	00000613          	li	a2,0
    li	x13, 0
8000007c:	00000693          	li	a3,0
    li	x14, 0
80000080:	00000713          	li	a4,0
    li	x15, 0
80000084:	00000793          	li	a5,0
    li	x16, 0
80000088:	00000813          	li	a6,0
    li	x17, 0
8000008c:	00000893          	li	a7,0
    li	x18, 0
80000090:	00000913          	li	s2,0
    li	x19, 0
80000094:	00000993          	li	s3,0
    li	x20, 0
80000098:	00000a13          	li	s4,0
    li	x21, 0
8000009c:	00000a93          	li	s5,0
    li	x22, 0
800000a0:	00000b13          	li	s6,0
    li	x23, 0
800000a4:	00000b93          	li	s7,0
    li	x24, 0
800000a8:	00000c13          	li	s8,0
    li	x25, 0
800000ac:	00000c93          	li	s9,0
    li	x26, 0
800000b0:	00000d13          	li	s10,0
    li	x27, 0
800000b4:	00000d93          	li	s11,0
    li	x28, 0
800000b8:	00000e13          	li	t3,0
    li	x29, 0
800000bc:	00000e93          	li	t4,0
    li	x30, 0
800000c0:	00000f13          	li	t5,0
    li	x31, 0
800000c4:	00000f93          	li	t6,0

    /* initialize global pointer */
    la	gp, _gp
800000c8:	00021197          	auipc	gp,0x21
800000cc:	56818193          	addi	gp,gp,1384 # 80021630 <_gp>

800000d0 <init_bss>:

init_bss:
    /* init bss section */
    la	a0, __bss_start
800000d0:	00021517          	auipc	a0,0x21
800000d4:	77050513          	addi	a0,a0,1904 # 80021840 <__bss_start>
    la	a1, __bss_end-4 /* section end is actually the start of the next section */
800000d8:	0003b597          	auipc	a1,0x3b
800000dc:	9f058593          	addi	a1,a1,-1552 # 8003aac8 <errno>
    li	a2, 0x0
800000e0:	00000613          	li	a2,0
    jal	fill_block
800000e4:	19c000ef          	jal	ra,80000280 <fill_block>

800000e8 <init_sbss>:

init_sbss:
    /* init bss section */
    la	a0, __sbss_start
800000e8:	00021517          	auipc	a0,0x21
800000ec:	d3450513          	addi	a0,a0,-716 # 80020e1c <pxCurrentTCB>
    la	a1, __sbss_end-4 /* section end is actually the start of the next section */
800000f0:	00021597          	auipc	a1,0x21
800000f4:	d3c58593          	addi	a1,a1,-708 # 80020e2c <__malloc_top_pad>
    li	a2, 0x0
800000f8:	00000613          	li	a2,0
    jal	fill_block
800000fc:	184000ef          	jal	ra,80000280 <fill_block>

80000100 <write_stack_pattern>:

write_stack_pattern:
    /* init bss section */
    la	a0, _stack_end  /* note the stack grows from top to bottom */
80000100:	0003c517          	auipc	a0,0x3c
80000104:	9cc50513          	addi	a0,a0,-1588 # 8003bacc <_heap_end>
    la	a1, __stack-4   /* section end is actually the start of the next section */
80000108:	0003d597          	auipc	a1,0x3d
8000010c:	9c058593          	addi	a1,a1,-1600 # 8003cac8 <_heap_end+0xffc>
    li	a2, 0xABABABAB
80000110:	ababb637          	lui	a2,0xababb
80000114:	bab60613          	addi	a2,a2,-1109 # abababab <__stack+0x2ba7e0df>
    jal	fill_block
80000118:	168000ef          	jal	ra,80000280 <fill_block>

8000011c <init_stack>:

init_stack:
    /* set stack pointer */
    la	sp, _stack
8000011c:	0003d117          	auipc	sp,0x3d
80000120:	9b010113          	addi	sp,sp,-1616 # 8003cacc <__stack>

	j	main
80000124:	7110606f          	j	80007034 <main>

80000128 <interrupt>:

/* When trap is an interrupt, this function is called */
interrupt:
	slli    t0,t0,1
80000128:	00129293          	slli	t0,t0,0x1
	srli    t0,t0,1
8000012c:	0012d293          	srli	t0,t0,0x1
	addi    t0,t0,-3
80000130:	ffd28293          	addi	t0,t0,-3
	beq		t0,x0,softwareInterrupt
80000134:	00028a63          	beqz	t0,80000148 <softwareInterrupt>
	LOAD	t0, 0x0(sp)
80000138:	00012283          	lw	t0,0(sp)
	addi	sp, sp, REGBYTES
8000013c:	00410113          	addi	sp,sp,4

	/* Interupt is timer interrupt */
	j		TIMER_CMP_INT
80000140:	1740006f          	j	800002b4 <TIMER_CMP_INT>
	mret
80000144:	30200073          	mret

80000148 <softwareInterrupt>:

softwareInterrupt:
	/* Interupt is software interrupt */
	LOAD  t0, 0x0(sp)
80000148:	00012283          	lw	t0,0(sp)
	addi  sp, sp, REGBYTES
8000014c:	00410113          	addi	sp,sp,4
	mret
80000150:	30200073          	mret

80000154 <trap_entry>:

/* For when a trap is fired */
.align 2
trap_entry:
	/* Check for interrupt */
	addi	sp, sp, -REGBYTES
80000154:	ffc10113          	addi	sp,sp,-4
	STORE	t0, 0x0(sp)
80000158:	00512023          	sw	t0,0(sp)
	csrr	t0, mcause
8000015c:	342022f3          	csrr	t0,mcause
	blt	t0,x0,interrupt
80000160:	fc02c4e3          	bltz	t0,80000128 <interrupt>
	LOAD	t0, 0x0(sp)
80000164:	00012283          	lw	t0,0(sp)
	addi	sp, sp, REGBYTES
80000168:	00410113          	addi	sp,sp,4

	/* System call and other traps */
	addi sp, sp, -REGBYTES*32
8000016c:	f8010113          	addi	sp,sp,-128
	STORE x1, 1*REGBYTES(sp)
80000170:	00112223          	sw	ra,4(sp)
	STORE x2, 2*REGBYTES(sp)
80000174:	00212423          	sw	sp,8(sp)
	STORE x3, 3*REGBYTES(sp)
80000178:	00312623          	sw	gp,12(sp)
	STORE x4, 4*REGBYTES(sp)
8000017c:	00412823          	sw	tp,16(sp)
	STORE x5, 5*REGBYTES(sp)
80000180:	00512a23          	sw	t0,20(sp)
	STORE x6, 6*REGBYTES(sp)
80000184:	00612c23          	sw	t1,24(sp)
	STORE x7, 7*REGBYTES(sp)
80000188:	00712e23          	sw	t2,28(sp)
	STORE x8, 8*REGBYTES(sp)
8000018c:	02812023          	sw	s0,32(sp)
	STORE x9, 9*REGBYTES(sp)
80000190:	02912223          	sw	s1,36(sp)
	STORE x10, 10*REGBYTES(sp)
80000194:	02a12423          	sw	a0,40(sp)
	STORE x11, 11*REGBYTES(sp)
80000198:	02b12623          	sw	a1,44(sp)
	STORE x12, 12*REGBYTES(sp)
8000019c:	02c12823          	sw	a2,48(sp)
	STORE x13, 13*REGBYTES(sp)
800001a0:	02d12a23          	sw	a3,52(sp)
	STORE x14, 14*REGBYTES(sp)
800001a4:	02e12c23          	sw	a4,56(sp)
	STORE x15, 15*REGBYTES(sp)
800001a8:	02f12e23          	sw	a5,60(sp)
	STORE x16, 16*REGBYTES(sp)
800001ac:	05012023          	sw	a6,64(sp)
	STORE x17, 17*REGBYTES(sp)
800001b0:	05112223          	sw	a7,68(sp)
	STORE x18, 18*REGBYTES(sp)
800001b4:	05212423          	sw	s2,72(sp)
	STORE x19, 19*REGBYTES(sp)
800001b8:	05312623          	sw	s3,76(sp)
	STORE x20, 20*REGBYTES(sp)
800001bc:	05412823          	sw	s4,80(sp)
	STORE x21, 21*REGBYTES(sp)
800001c0:	05512a23          	sw	s5,84(sp)
	STORE x22, 22*REGBYTES(sp)
800001c4:	05612c23          	sw	s6,88(sp)
	STORE x23, 23*REGBYTES(sp)
800001c8:	05712e23          	sw	s7,92(sp)
	STORE x24, 24*REGBYTES(sp)
800001cc:	07812023          	sw	s8,96(sp)
	STORE x25, 25*REGBYTES(sp)
800001d0:	07912223          	sw	s9,100(sp)
	STORE x26, 26*REGBYTES(sp)
800001d4:	07a12423          	sw	s10,104(sp)
	STORE x27, 27*REGBYTES(sp)
800001d8:	07b12623          	sw	s11,108(sp)
	STORE x28, 28*REGBYTES(sp)
800001dc:	07c12823          	sw	t3,112(sp)
	STORE x29, 29*REGBYTES(sp)
800001e0:	07d12a23          	sw	t4,116(sp)
	STORE x30, 30*REGBYTES(sp)
800001e4:	07e12c23          	sw	t5,120(sp)
	STORE x31, 31*REGBYTES(sp)
800001e8:	07f12e23          	sw	t6,124(sp)

	csrr a0, mcause
800001ec:	34202573          	csrr	a0,mcause
	csrr a1, mepc
800001f0:	341025f3          	csrr	a1,mepc


	mv a2, sp
800001f4:	00010613          	mv	a2,sp
  /* FIXME */
	// jal ulSyscallTrap

	csrw mepc, a0
800001f8:	34151073          	csrw	mepc,a0

	LOAD x1, 1*REGBYTES(sp)
800001fc:	00412083          	lw	ra,4(sp)
	LOAD x2, 2*REGBYTES(sp)
80000200:	00812103          	lw	sp,8(sp)
	LOAD x3, 3*REGBYTES(sp)
80000204:	00c12183          	lw	gp,12(sp)
	LOAD x4, 4*REGBYTES(sp)
80000208:	01012203          	lw	tp,16(sp)
	LOAD x5, 5*REGBYTES(sp)
8000020c:	01412283          	lw	t0,20(sp)
	LOAD x6, 6*REGBYTES(sp)
80000210:	01812303          	lw	t1,24(sp)
	LOAD x7, 7*REGBYTES(sp)
80000214:	01c12383          	lw	t2,28(sp)
	LOAD x8, 8*REGBYTES(sp)
80000218:	02012403          	lw	s0,32(sp)
	LOAD x9, 9*REGBYTES(sp)
8000021c:	02412483          	lw	s1,36(sp)
	LOAD x10, 10*REGBYTES(sp)
80000220:	02812503          	lw	a0,40(sp)
	LOAD x11, 11*REGBYTES(sp)
80000224:	02c12583          	lw	a1,44(sp)
	LOAD x12, 12*REGBYTES(sp)
80000228:	03012603          	lw	a2,48(sp)
	LOAD x13, 13*REGBYTES(sp)
8000022c:	03412683          	lw	a3,52(sp)
	LOAD x14, 14*REGBYTES(sp)
80000230:	03812703          	lw	a4,56(sp)
	LOAD x15, 15*REGBYTES(sp)
80000234:	03c12783          	lw	a5,60(sp)
	LOAD x16, 16*REGBYTES(sp)
80000238:	04012803          	lw	a6,64(sp)
	LOAD x17, 17*REGBYTES(sp)
8000023c:	04412883          	lw	a7,68(sp)
	LOAD x18, 18*REGBYTES(sp)
80000240:	04812903          	lw	s2,72(sp)
	LOAD x19, 19*REGBYTES(sp)
80000244:	04c12983          	lw	s3,76(sp)
	LOAD x20, 20*REGBYTES(sp)
80000248:	05012a03          	lw	s4,80(sp)
	LOAD x21, 21*REGBYTES(sp)
8000024c:	05412a83          	lw	s5,84(sp)
	LOAD x22, 22*REGBYTES(sp)
80000250:	05812b03          	lw	s6,88(sp)
	LOAD x23, 23*REGBYTES(sp)
80000254:	05c12b83          	lw	s7,92(sp)
	LOAD x24, 24*REGBYTES(sp)
80000258:	06012c03          	lw	s8,96(sp)
	LOAD x25, 25*REGBYTES(sp)
8000025c:	06412c83          	lw	s9,100(sp)
	LOAD x26, 26*REGBYTES(sp)
80000260:	06812d03          	lw	s10,104(sp)
	LOAD x27, 27*REGBYTES(sp)
80000264:	06c12d83          	lw	s11,108(sp)
	LOAD x28, 28*REGBYTES(sp)
80000268:	07012e03          	lw	t3,112(sp)
	LOAD x29, 29*REGBYTES(sp)
8000026c:	07412e83          	lw	t4,116(sp)
	LOAD x30, 30*REGBYTES(sp)
80000270:	07812f03          	lw	t5,120(sp)
	LOAD x31, 31*REGBYTES(sp)
80000274:	07c12f83          	lw	t6,124(sp)

	addi sp, sp, REGBYTES*32
80000278:	08010113          	addi	sp,sp,128
	mret
8000027c:	30200073          	mret

80000280 <fill_block>:

/* Fills memory blocks */
fill_block:
    sw		a2, 0(a0)
80000280:	00c52023          	sw	a2,0(a0)
    bgeu	a0, a1, fb_end
80000284:	00b57663          	bleu	a1,a0,80000290 <fb_end>
    addi	a0, a0, 4
80000288:	00450513          	addi	a0,a0,4
    j		fill_block
8000028c:	ff5ff06f          	j	80000280 <fill_block>

80000290 <fb_end>:
fb_end:
    ret
80000290:	00008067          	ret
	...

800002b4 <TIMER_CMP_INT>:
	mret
	.endm

/* Macro for restoring task context */
TIMER_CMP_INT:
	portSAVE_CONTEXT
800002b4:	f8010113          	addi	sp,sp,-128
800002b8:	00112023          	sw	ra,0(sp)
800002bc:	00212223          	sw	sp,4(sp)
800002c0:	00312423          	sw	gp,8(sp)
800002c4:	00412623          	sw	tp,12(sp)
800002c8:	00512823          	sw	t0,16(sp)
800002cc:	00612a23          	sw	t1,20(sp)
800002d0:	00712c23          	sw	t2,24(sp)
800002d4:	00812e23          	sw	s0,28(sp)
800002d8:	02912023          	sw	s1,32(sp)
800002dc:	02a12223          	sw	a0,36(sp)
800002e0:	02b12423          	sw	a1,40(sp)
800002e4:	02c12623          	sw	a2,44(sp)
800002e8:	02d12823          	sw	a3,48(sp)
800002ec:	02e12a23          	sw	a4,52(sp)
800002f0:	02f12c23          	sw	a5,56(sp)
800002f4:	03012e23          	sw	a6,60(sp)
800002f8:	05112023          	sw	a7,64(sp)
800002fc:	05212223          	sw	s2,68(sp)
80000300:	05312423          	sw	s3,72(sp)
80000304:	05412623          	sw	s4,76(sp)
80000308:	05512823          	sw	s5,80(sp)
8000030c:	05612a23          	sw	s6,84(sp)
80000310:	05712c23          	sw	s7,88(sp)
80000314:	05812e23          	sw	s8,92(sp)
80000318:	07912023          	sw	s9,96(sp)
8000031c:	07a12223          	sw	s10,100(sp)
80000320:	07b12423          	sw	s11,104(sp)
80000324:	07c12623          	sw	t3,108(sp)
80000328:	07d12823          	sw	t4,112(sp)
8000032c:	07e12a23          	sw	t5,116(sp)
80000330:	07f12c23          	sw	t6,120(sp)
80000334:	00021297          	auipc	t0,0x21
80000338:	ae82a283          	lw	t0,-1304(t0) # 80020e1c <pxCurrentTCB>
8000033c:	0022a023          	sw	sp,0(t0)
	portSAVE_EPC
80000340:	341022f3          	csrr	t0,mepc
80000344:	06512e23          	sw	t0,124(sp)
	jal	vPortSysTickHandler
80000348:	44c000ef          	jal	ra,80000794 <vPortSysTickHandler>
	portRESTORE_CONTEXT
8000034c:	00021117          	auipc	sp,0x21
80000350:	ad012103          	lw	sp,-1328(sp) # 80020e1c <pxCurrentTCB>
80000354:	00012103          	lw	sp,0(sp)
80000358:	07c12283          	lw	t0,124(sp)
8000035c:	34129073          	csrw	mepc,t0
80000360:	000022b7          	lui	t0,0x2
80000364:	88028293          	addi	t0,t0,-1920 # 1880 <_HEAP_SIZE+0x880>
80000368:	3002a073          	csrs	mstatus,t0
8000036c:	00012083          	lw	ra,0(sp)
80000370:	00c12203          	lw	tp,12(sp)
80000374:	01012283          	lw	t0,16(sp)
80000378:	01412303          	lw	t1,20(sp)
8000037c:	01812383          	lw	t2,24(sp)
80000380:	01c12403          	lw	s0,28(sp)
80000384:	02012483          	lw	s1,32(sp)
80000388:	02412503          	lw	a0,36(sp)
8000038c:	02812583          	lw	a1,40(sp)
80000390:	02c12603          	lw	a2,44(sp)
80000394:	03012683          	lw	a3,48(sp)
80000398:	03412703          	lw	a4,52(sp)
8000039c:	03812783          	lw	a5,56(sp)
800003a0:	03c12803          	lw	a6,60(sp)
800003a4:	04012883          	lw	a7,64(sp)
800003a8:	04412903          	lw	s2,68(sp)
800003ac:	04812983          	lw	s3,72(sp)
800003b0:	04c12a03          	lw	s4,76(sp)
800003b4:	05012a83          	lw	s5,80(sp)
800003b8:	05412b03          	lw	s6,84(sp)
800003bc:	05812b83          	lw	s7,88(sp)
800003c0:	05c12c03          	lw	s8,92(sp)
800003c4:	06012c83          	lw	s9,96(sp)
800003c8:	06412d03          	lw	s10,100(sp)
800003cc:	06812d83          	lw	s11,104(sp)
800003d0:	06c12e03          	lw	t3,108(sp)
800003d4:	07012e83          	lw	t4,112(sp)
800003d8:	07412f03          	lw	t5,116(sp)
800003dc:	07812f83          	lw	t6,120(sp)
800003e0:	08010113          	addi	sp,sp,128
800003e4:	30200073          	mret

800003e8 <xPortStartScheduler>:
	STORE	x28, 27 * REGBYTES(t0)
	STORE	x29, 28 * REGBYTES(t0)
	STORE	x30, 29 * REGBYTES(t0)
	STORE	x31, 30 * REGBYTES(t0)
#endif
	jal		vPortSetupTimer
800003e8:	264000ef          	jal	ra,8000064c <vPortSetupTimer>
	portRESTORE_CONTEXT
800003ec:	00021117          	auipc	sp,0x21
800003f0:	a3012103          	lw	sp,-1488(sp) # 80020e1c <pxCurrentTCB>
800003f4:	00012103          	lw	sp,0(sp)
800003f8:	07c12283          	lw	t0,124(sp)
800003fc:	34129073          	csrw	mepc,t0
80000400:	000022b7          	lui	t0,0x2
80000404:	88028293          	addi	t0,t0,-1920 # 1880 <_HEAP_SIZE+0x880>
80000408:	3002a073          	csrs	mstatus,t0
8000040c:	00012083          	lw	ra,0(sp)
80000410:	00c12203          	lw	tp,12(sp)
80000414:	01012283          	lw	t0,16(sp)
80000418:	01412303          	lw	t1,20(sp)
8000041c:	01812383          	lw	t2,24(sp)
80000420:	01c12403          	lw	s0,28(sp)
80000424:	02012483          	lw	s1,32(sp)
80000428:	02412503          	lw	a0,36(sp)
8000042c:	02812583          	lw	a1,40(sp)
80000430:	02c12603          	lw	a2,44(sp)
80000434:	03012683          	lw	a3,48(sp)
80000438:	03412703          	lw	a4,52(sp)
8000043c:	03812783          	lw	a5,56(sp)
80000440:	03c12803          	lw	a6,60(sp)
80000444:	04012883          	lw	a7,64(sp)
80000448:	04412903          	lw	s2,68(sp)
8000044c:	04812983          	lw	s3,72(sp)
80000450:	04c12a03          	lw	s4,76(sp)
80000454:	05012a83          	lw	s5,80(sp)
80000458:	05412b03          	lw	s6,84(sp)
8000045c:	05812b83          	lw	s7,88(sp)
80000460:	05c12c03          	lw	s8,92(sp)
80000464:	06012c83          	lw	s9,96(sp)
80000468:	06412d03          	lw	s10,100(sp)
8000046c:	06812d83          	lw	s11,104(sp)
80000470:	06c12e03          	lw	t3,108(sp)
80000474:	07012e83          	lw	t4,112(sp)
80000478:	07412f03          	lw	t5,116(sp)
8000047c:	07812f83          	lw	t6,120(sp)
80000480:	08010113          	addi	sp,sp,128
80000484:	30200073          	mret

80000488 <vPortEndScheduler>:
	LOAD	x28, 27 * REGBYTES(t0)
	LOAD	x29, 28 * REGBYTES(t0)
	LOAD	x30, 39 * REGBYTES(t0)
	LOAD	x31, 30 * REGBYTES(t0)
#endif
	ret
80000488:	00008067          	ret

8000048c <vPortYield>:
	*  stack. However, "mepc" will be overwritten by the interrupt handler if a timer
	*  interrupt happens during the yield. To avoid this, prevent interrupts before starting.
	*  The write to mstatus in the restore context routine will enable interrupts after the
	*  mret. A more fine-grain lock may be possible.
	*/  
	csrci mstatus, 8
8000048c:	30047073          	csrci	mstatus,8

	portSAVE_CONTEXT
80000490:	f8010113          	addi	sp,sp,-128
80000494:	00112023          	sw	ra,0(sp)
80000498:	00212223          	sw	sp,4(sp)
8000049c:	00312423          	sw	gp,8(sp)
800004a0:	00412623          	sw	tp,12(sp)
800004a4:	00512823          	sw	t0,16(sp)
800004a8:	00612a23          	sw	t1,20(sp)
800004ac:	00712c23          	sw	t2,24(sp)
800004b0:	00812e23          	sw	s0,28(sp)
800004b4:	02912023          	sw	s1,32(sp)
800004b8:	02a12223          	sw	a0,36(sp)
800004bc:	02b12423          	sw	a1,40(sp)
800004c0:	02c12623          	sw	a2,44(sp)
800004c4:	02d12823          	sw	a3,48(sp)
800004c8:	02e12a23          	sw	a4,52(sp)
800004cc:	02f12c23          	sw	a5,56(sp)
800004d0:	03012e23          	sw	a6,60(sp)
800004d4:	05112023          	sw	a7,64(sp)
800004d8:	05212223          	sw	s2,68(sp)
800004dc:	05312423          	sw	s3,72(sp)
800004e0:	05412623          	sw	s4,76(sp)
800004e4:	05512823          	sw	s5,80(sp)
800004e8:	05612a23          	sw	s6,84(sp)
800004ec:	05712c23          	sw	s7,88(sp)
800004f0:	05812e23          	sw	s8,92(sp)
800004f4:	07912023          	sw	s9,96(sp)
800004f8:	07a12223          	sw	s10,100(sp)
800004fc:	07b12423          	sw	s11,104(sp)
80000500:	07c12623          	sw	t3,108(sp)
80000504:	07d12823          	sw	t4,112(sp)
80000508:	07e12a23          	sw	t5,116(sp)
8000050c:	07f12c23          	sw	t6,120(sp)
80000510:	00021297          	auipc	t0,0x21
80000514:	90c2a283          	lw	t0,-1780(t0) # 80020e1c <pxCurrentTCB>
80000518:	0022a023          	sw	sp,0(t0)
	portSAVE_RA
8000051c:	06112e23          	sw	ra,124(sp)
	jal	vTaskSwitchContext
80000520:	104030ef          	jal	ra,80003624 <vTaskSwitchContext>
	portRESTORE_CONTEXT
80000524:	00021117          	auipc	sp,0x21
80000528:	8f812103          	lw	sp,-1800(sp) # 80020e1c <pxCurrentTCB>
8000052c:	00012103          	lw	sp,0(sp)
80000530:	07c12283          	lw	t0,124(sp)
80000534:	34129073          	csrw	mepc,t0
80000538:	000022b7          	lui	t0,0x2
8000053c:	88028293          	addi	t0,t0,-1920 # 1880 <_HEAP_SIZE+0x880>
80000540:	3002a073          	csrs	mstatus,t0
80000544:	00012083          	lw	ra,0(sp)
80000548:	00c12203          	lw	tp,12(sp)
8000054c:	01012283          	lw	t0,16(sp)
80000550:	01412303          	lw	t1,20(sp)
80000554:	01812383          	lw	t2,24(sp)
80000558:	01c12403          	lw	s0,28(sp)
8000055c:	02012483          	lw	s1,32(sp)
80000560:	02412503          	lw	a0,36(sp)
80000564:	02812583          	lw	a1,40(sp)
80000568:	02c12603          	lw	a2,44(sp)
8000056c:	03012683          	lw	a3,48(sp)
80000570:	03412703          	lw	a4,52(sp)
80000574:	03812783          	lw	a5,56(sp)
80000578:	03c12803          	lw	a6,60(sp)
8000057c:	04012883          	lw	a7,64(sp)
80000580:	04412903          	lw	s2,68(sp)
80000584:	04812983          	lw	s3,72(sp)
80000588:	04c12a03          	lw	s4,76(sp)
8000058c:	05012a83          	lw	s5,80(sp)
80000590:	05412b03          	lw	s6,84(sp)
80000594:	05812b83          	lw	s7,88(sp)
80000598:	05c12c03          	lw	s8,92(sp)
8000059c:	06012c83          	lw	s9,96(sp)
800005a0:	06412d03          	lw	s10,100(sp)
800005a4:	06812d83          	lw	s11,104(sp)
800005a8:	06c12e03          	lw	t3,108(sp)
800005ac:	07012e83          	lw	t4,112(sp)
800005b0:	07412f03          	lw	t5,116(sp)
800005b4:	07812f83          	lw	t6,120(sp)
800005b8:	08010113          	addi	sp,sp,128
800005bc:	30200073          	mret

800005c0 <prvSetNextTimerInterrupt>:
 * which is likely for the very first interrupt. When that happens, compare timer + 
 * tickrate may already be behind current timer and prevent correctly programming
 * the 2nd interrupt
 */
static void prvSetNextTimerInterrupt(void)
{
800005c0:	ff010113          	addi	sp,sp,-16
800005c4:	00812623          	sw	s0,12(sp)
800005c8:	01010413          	addi	s0,sp,16
    if (mtime && timecmp) 
800005cc:	00021797          	auipc	a5,0x21
800005d0:	88078793          	addi	a5,a5,-1920 # 80020e4c <mtime>
800005d4:	0007a783          	lw	a5,0(a5)
800005d8:	06078263          	beqz	a5,8000063c <prvSetNextTimerInterrupt+0x7c>
800005dc:	00021797          	auipc	a5,0x21
800005e0:	87478793          	addi	a5,a5,-1932 # 80020e50 <timecmp>
800005e4:	0007a783          	lw	a5,0(a5)
800005e8:	04078a63          	beqz	a5,8000063c <prvSetNextTimerInterrupt+0x7c>
        *timecmp = *mtime + (configTICK_CLOCK_HZ / configTICK_RATE_HZ);
800005ec:	00021797          	auipc	a5,0x21
800005f0:	86078793          	addi	a5,a5,-1952 # 80020e4c <mtime>
800005f4:	0007a783          	lw	a5,0(a5)
800005f8:	0047a803          	lw	a6,4(a5)
800005fc:	0007a783          	lw	a5,0(a5)
80000600:	00021717          	auipc	a4,0x21
80000604:	85070713          	addi	a4,a4,-1968 # 80020e50 <timecmp>
80000608:	00072503          	lw	a0,0(a4)
8000060c:	3e800593          	li	a1,1000
80000610:	00000613          	li	a2,0
80000614:	00b786b3          	add	a3,a5,a1
80000618:	00068893          	mv	a7,a3
8000061c:	00f8b8b3          	sltu	a7,a7,a5
80000620:	00c80733          	add	a4,a6,a2
80000624:	00e887b3          	add	a5,a7,a4
80000628:	00078713          	mv	a4,a5
8000062c:	00068793          	mv	a5,a3
80000630:	00070813          	mv	a6,a4
80000634:	00f52023          	sw	a5,0(a0)
80000638:	01052223          	sw	a6,4(a0)
}
8000063c:	00000013          	nop
80000640:	00c12403          	lw	s0,12(sp)
80000644:	01010113          	addi	sp,sp,16
80000648:	00008067          	ret

8000064c <vPortSetupTimer>:
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
8000064c:	ff010113          	addi	sp,sp,-16
80000650:	00112623          	sw	ra,12(sp)
80000654:	00812423          	sw	s0,8(sp)
80000658:	01010413          	addi	s0,sp,16
    /* reuse existing routine */
    prvSetNextTimerInterrupt();
8000065c:	f65ff0ef          	jal	ra,800005c0 <prvSetNextTimerInterrupt>

	/* Enable timer interupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80000660:	08000793          	li	a5,128
80000664:	3047a073          	csrs	mie,a5
}
80000668:	00000013          	nop
8000066c:	00c12083          	lw	ra,12(sp)
80000670:	00812403          	lw	s0,8(sp)
80000674:	01010113          	addi	sp,sp,16
80000678:	00008067          	ret

8000067c <prvTaskExitError>:
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
8000067c:	ff010113          	addi	sp,sp,-16
80000680:	00812623          	sw	s0,12(sp)
80000684:	01010413          	addi	s0,sp,16
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
80000688:	00020797          	auipc	a5,0x20
8000068c:	7c078793          	addi	a5,a5,1984 # 80020e48 <uxCriticalNesting>
80000690:	0007a703          	lw	a4,0(a5)
80000694:	fff00793          	li	a5,-1
80000698:	00f70663          	beq	a4,a5,800006a4 <prvTaskExitError+0x28>
8000069c:	30007073          	csrci	mstatus,0
800006a0:	0000006f          	j	800006a0 <prvTaskExitError+0x24>
	portDISABLE_INTERRUPTS();
800006a4:	30007073          	csrci	mstatus,0
	for( ;; );
800006a8:	0000006f          	j	800006a8 <prvTaskExitError+0x2c>

800006ac <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

/* Clear current interrupt mask and set given mask */
void vPortClearInterruptMask(int mask)
{
800006ac:	fe010113          	addi	sp,sp,-32
800006b0:	00812e23          	sw	s0,28(sp)
800006b4:	02010413          	addi	s0,sp,32
800006b8:	fea42623          	sw	a0,-20(s0)
	__asm volatile("csrw mie, %0"::"r"(mask));
800006bc:	fec42783          	lw	a5,-20(s0)
800006c0:	30479073          	csrw	mie,a5
}
800006c4:	00000013          	nop
800006c8:	01c12403          	lw	s0,28(sp)
800006cc:	02010113          	addi	sp,sp,32
800006d0:	00008067          	ret

800006d4 <vPortSetInterruptMask>:
/*-----------------------------------------------------------*/

/* Set interrupt mask and return current interrupt enable register */
int vPortSetInterruptMask(void)
{
800006d4:	fe010113          	addi	sp,sp,-32
800006d8:	00812e23          	sw	s0,28(sp)
800006dc:	02010413          	addi	s0,sp,32
	int ret;
	__asm volatile("csrr %0,mie":"=r"(ret));
800006e0:	304027f3          	csrr	a5,mie
800006e4:	fef42623          	sw	a5,-20(s0)
	__asm volatile("csrc mie,%0"::"i"(7));
800006e8:	3043f073          	csrci	mie,7
	return ret;
800006ec:	fec42783          	lw	a5,-20(s0)
}
800006f0:	00078513          	mv	a0,a5
800006f4:	01c12403          	lw	s0,28(sp)
800006f8:	02010113          	addi	sp,sp,32
800006fc:	00008067          	ret

80000700 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
80000700:	fe010113          	addi	sp,sp,-32
80000704:	00812e23          	sw	s0,28(sp)
80000708:	02010413          	addi	s0,sp,32
8000070c:	fea42623          	sw	a0,-20(s0)
80000710:	feb42423          	sw	a1,-24(s0)
80000714:	fec42223          	sw	a2,-28(s0)
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
80000718:	fec42783          	lw	a5,-20(s0)
8000071c:	ffc78793          	addi	a5,a5,-4
80000720:	fef42623          	sw	a5,-20(s0)
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
80000724:	fe842703          	lw	a4,-24(s0)
80000728:	fec42783          	lw	a5,-20(s0)
8000072c:	00e7a023          	sw	a4,0(a5)
	pxTopOfStack -= 22;
80000730:	fec42783          	lw	a5,-20(s0)
80000734:	fa878793          	addi	a5,a5,-88
80000738:	fef42623          	sw	a5,-20(s0)
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
8000073c:	fe442703          	lw	a4,-28(s0)
80000740:	fec42783          	lw	a5,-20(s0)
80000744:	00e7a023          	sw	a4,0(a5)
	pxTopOfStack -= 6;
80000748:	fec42783          	lw	a5,-20(s0)
8000074c:	fe878793          	addi	a5,a5,-24
80000750:	fef42623          	sw	a5,-20(s0)
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
80000754:	00018793          	mv	a5,gp
80000758:	00078713          	mv	a4,a5
8000075c:	fec42783          	lw	a5,-20(s0)
80000760:	00e7a023          	sw	a4,0(a5)
	pxTopOfStack -= 3;
80000764:	fec42783          	lw	a5,-20(s0)
80000768:	ff478793          	addi	a5,a5,-12
8000076c:	fef42623          	sw	a5,-20(s0)
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
80000770:	00000717          	auipc	a4,0x0
80000774:	f0c70713          	addi	a4,a4,-244 # 8000067c <prvTaskExitError>
80000778:	fec42783          	lw	a5,-20(s0)
8000077c:	00e7a023          	sw	a4,0(a5)
	
	return pxTopOfStack;
80000780:	fec42783          	lw	a5,-20(s0)
}
80000784:	00078513          	mv	a0,a5
80000788:	01c12403          	lw	s0,28(sp)
8000078c:	02010113          	addi	sp,sp,32
80000790:	00008067          	ret

80000794 <vPortSysTickHandler>:
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
80000794:	ff010113          	addi	sp,sp,-16
80000798:	00112623          	sw	ra,12(sp)
8000079c:	00812423          	sw	s0,8(sp)
800007a0:	01010413          	addi	s0,sp,16
	prvSetNextTimerInterrupt();
800007a4:	e1dff0ef          	jal	ra,800005c0 <prvSetNextTimerInterrupt>

	/* Increment the RTOS tick. */
	if( xTaskIncrementTick() != pdFALSE )
800007a8:	3d9020ef          	jal	ra,80003380 <xTaskIncrementTick>
800007ac:	00050793          	mv	a5,a0
800007b0:	00078463          	beqz	a5,800007b8 <vPortSysTickHandler+0x24>
	{
		vTaskSwitchContext();
800007b4:	671020ef          	jal	ra,80003624 <vTaskSwitchContext>
	}
}
800007b8:	00000013          	nop
800007bc:	00c12083          	lw	ra,12(sp)
800007c0:	00812403          	lw	s0,8(sp)
800007c4:	01010113          	addi	sp,sp,16
800007c8:	00008067          	ret

800007cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
800007cc:	fe010113          	addi	sp,sp,-32
800007d0:	00812e23          	sw	s0,28(sp)
800007d4:	02010413          	addi	s0,sp,32
800007d8:	fea42623          	sw	a0,-20(s0)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
800007dc:	fec42783          	lw	a5,-20(s0)
800007e0:	00878713          	addi	a4,a5,8
800007e4:	fec42783          	lw	a5,-20(s0)
800007e8:	00e7a223          	sw	a4,4(a5)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
800007ec:	fec42783          	lw	a5,-20(s0)
800007f0:	fff00713          	li	a4,-1
800007f4:	00e7a423          	sw	a4,8(a5)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
800007f8:	fec42783          	lw	a5,-20(s0)
800007fc:	00878713          	addi	a4,a5,8
80000800:	fec42783          	lw	a5,-20(s0)
80000804:	00e7a623          	sw	a4,12(a5)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80000808:	fec42783          	lw	a5,-20(s0)
8000080c:	00878713          	addi	a4,a5,8
80000810:	fec42783          	lw	a5,-20(s0)
80000814:	00e7a823          	sw	a4,16(a5)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
80000818:	fec42783          	lw	a5,-20(s0)
8000081c:	0007a023          	sw	zero,0(a5)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
80000820:	00000013          	nop
80000824:	01c12403          	lw	s0,28(sp)
80000828:	02010113          	addi	sp,sp,32
8000082c:	00008067          	ret

80000830 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
80000830:	fe010113          	addi	sp,sp,-32
80000834:	00812e23          	sw	s0,28(sp)
80000838:	02010413          	addi	s0,sp,32
8000083c:	fea42623          	sw	a0,-20(s0)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80000840:	fec42783          	lw	a5,-20(s0)
80000844:	0007a823          	sw	zero,16(a5)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
80000848:	00000013          	nop
8000084c:	01c12403          	lw	s0,28(sp)
80000850:	02010113          	addi	sp,sp,32
80000854:	00008067          	ret

80000858 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80000858:	fd010113          	addi	sp,sp,-48
8000085c:	02812623          	sw	s0,44(sp)
80000860:	03010413          	addi	s0,sp,48
80000864:	fca42e23          	sw	a0,-36(s0)
80000868:	fcb42c23          	sw	a1,-40(s0)
ListItem_t * const pxIndex = pxList->pxIndex;
8000086c:	fdc42783          	lw	a5,-36(s0)
80000870:	0047a783          	lw	a5,4(a5)
80000874:	fef42623          	sw	a5,-20(s0)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
80000878:	fd842783          	lw	a5,-40(s0)
8000087c:	fec42703          	lw	a4,-20(s0)
80000880:	00e7a223          	sw	a4,4(a5)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
80000884:	fec42783          	lw	a5,-20(s0)
80000888:	0087a703          	lw	a4,8(a5)
8000088c:	fd842783          	lw	a5,-40(s0)
80000890:	00e7a423          	sw	a4,8(a5)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
80000894:	fec42783          	lw	a5,-20(s0)
80000898:	0087a783          	lw	a5,8(a5)
8000089c:	fd842703          	lw	a4,-40(s0)
800008a0:	00e7a223          	sw	a4,4(a5)
	pxIndex->pxPrevious = pxNewListItem;
800008a4:	fec42783          	lw	a5,-20(s0)
800008a8:	fd842703          	lw	a4,-40(s0)
800008ac:	00e7a423          	sw	a4,8(a5)

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
800008b0:	fd842783          	lw	a5,-40(s0)
800008b4:	fdc42703          	lw	a4,-36(s0)
800008b8:	00e7a823          	sw	a4,16(a5)

	( pxList->uxNumberOfItems )++;
800008bc:	fdc42783          	lw	a5,-36(s0)
800008c0:	0007a783          	lw	a5,0(a5)
800008c4:	00178713          	addi	a4,a5,1
800008c8:	fdc42783          	lw	a5,-36(s0)
800008cc:	00e7a023          	sw	a4,0(a5)
}
800008d0:	00000013          	nop
800008d4:	02c12403          	lw	s0,44(sp)
800008d8:	03010113          	addi	sp,sp,48
800008dc:	00008067          	ret

800008e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
800008e0:	fd010113          	addi	sp,sp,-48
800008e4:	02812623          	sw	s0,44(sp)
800008e8:	03010413          	addi	s0,sp,48
800008ec:	fca42e23          	sw	a0,-36(s0)
800008f0:	fcb42c23          	sw	a1,-40(s0)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
800008f4:	fd842783          	lw	a5,-40(s0)
800008f8:	0007a783          	lw	a5,0(a5)
800008fc:	fef42423          	sw	a5,-24(s0)
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80000900:	fe842703          	lw	a4,-24(s0)
80000904:	fff00793          	li	a5,-1
80000908:	00f71a63          	bne	a4,a5,8000091c <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
8000090c:	fdc42783          	lw	a5,-36(s0)
80000910:	0107a783          	lw	a5,16(a5)
80000914:	fef42623          	sw	a5,-20(s0)
80000918:	0340006f          	j	8000094c <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
8000091c:	fdc42783          	lw	a5,-36(s0)
80000920:	00878793          	addi	a5,a5,8
80000924:	fef42623          	sw	a5,-20(s0)
80000928:	0100006f          	j	80000938 <vListInsert+0x58>
8000092c:	fec42783          	lw	a5,-20(s0)
80000930:	0047a783          	lw	a5,4(a5)
80000934:	fef42623          	sw	a5,-20(s0)
80000938:	fec42783          	lw	a5,-20(s0)
8000093c:	0047a783          	lw	a5,4(a5)
80000940:	0007a783          	lw	a5,0(a5)
80000944:	fe842703          	lw	a4,-24(s0)
80000948:	fef772e3          	bleu	a5,a4,8000092c <vListInsert+0x4c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
8000094c:	fec42783          	lw	a5,-20(s0)
80000950:	0047a703          	lw	a4,4(a5)
80000954:	fd842783          	lw	a5,-40(s0)
80000958:	00e7a223          	sw	a4,4(a5)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
8000095c:	fd842783          	lw	a5,-40(s0)
80000960:	0047a783          	lw	a5,4(a5)
80000964:	fd842703          	lw	a4,-40(s0)
80000968:	00e7a423          	sw	a4,8(a5)
	pxNewListItem->pxPrevious = pxIterator;
8000096c:	fd842783          	lw	a5,-40(s0)
80000970:	fec42703          	lw	a4,-20(s0)
80000974:	00e7a423          	sw	a4,8(a5)
	pxIterator->pxNext = pxNewListItem;
80000978:	fec42783          	lw	a5,-20(s0)
8000097c:	fd842703          	lw	a4,-40(s0)
80000980:	00e7a223          	sw	a4,4(a5)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80000984:	fd842783          	lw	a5,-40(s0)
80000988:	fdc42703          	lw	a4,-36(s0)
8000098c:	00e7a823          	sw	a4,16(a5)

	( pxList->uxNumberOfItems )++;
80000990:	fdc42783          	lw	a5,-36(s0)
80000994:	0007a783          	lw	a5,0(a5)
80000998:	00178713          	addi	a4,a5,1
8000099c:	fdc42783          	lw	a5,-36(s0)
800009a0:	00e7a023          	sw	a4,0(a5)
}
800009a4:	00000013          	nop
800009a8:	02c12403          	lw	s0,44(sp)
800009ac:	03010113          	addi	sp,sp,48
800009b0:	00008067          	ret

800009b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
800009b4:	fd010113          	addi	sp,sp,-48
800009b8:	02812623          	sw	s0,44(sp)
800009bc:	03010413          	addi	s0,sp,48
800009c0:	fca42e23          	sw	a0,-36(s0)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
800009c4:	fdc42783          	lw	a5,-36(s0)
800009c8:	0107a783          	lw	a5,16(a5)
800009cc:	fef42623          	sw	a5,-20(s0)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
800009d0:	fdc42783          	lw	a5,-36(s0)
800009d4:	0047a783          	lw	a5,4(a5)
800009d8:	fdc42703          	lw	a4,-36(s0)
800009dc:	00872703          	lw	a4,8(a4)
800009e0:	00e7a423          	sw	a4,8(a5)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
800009e4:	fdc42783          	lw	a5,-36(s0)
800009e8:	0087a783          	lw	a5,8(a5)
800009ec:	fdc42703          	lw	a4,-36(s0)
800009f0:	00472703          	lw	a4,4(a4)
800009f4:	00e7a223          	sw	a4,4(a5)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
800009f8:	fec42783          	lw	a5,-20(s0)
800009fc:	0047a783          	lw	a5,4(a5)
80000a00:	fdc42703          	lw	a4,-36(s0)
80000a04:	00f71a63          	bne	a4,a5,80000a18 <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80000a08:	fdc42783          	lw	a5,-36(s0)
80000a0c:	0087a703          	lw	a4,8(a5)
80000a10:	fec42783          	lw	a5,-20(s0)
80000a14:	00e7a223          	sw	a4,4(a5)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
80000a18:	fdc42783          	lw	a5,-36(s0)
80000a1c:	0007a823          	sw	zero,16(a5)
	( pxList->uxNumberOfItems )--;
80000a20:	fec42783          	lw	a5,-20(s0)
80000a24:	0007a783          	lw	a5,0(a5)
80000a28:	fff78713          	addi	a4,a5,-1
80000a2c:	fec42783          	lw	a5,-20(s0)
80000a30:	00e7a023          	sw	a4,0(a5)

	return pxList->uxNumberOfItems;
80000a34:	fec42783          	lw	a5,-20(s0)
80000a38:	0007a783          	lw	a5,0(a5)
}
80000a3c:	00078513          	mv	a0,a5
80000a40:	02c12403          	lw	s0,44(sp)
80000a44:	03010113          	addi	sp,sp,48
80000a48:	00008067          	ret

80000a4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
80000a4c:	fd010113          	addi	sp,sp,-48
80000a50:	02112623          	sw	ra,44(sp)
80000a54:	02812423          	sw	s0,40(sp)
80000a58:	03010413          	addi	s0,sp,48
80000a5c:	fca42e23          	sw	a0,-36(s0)
80000a60:	fcb42c23          	sw	a1,-40(s0)
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
80000a64:	fdc42783          	lw	a5,-36(s0)
80000a68:	fef42623          	sw	a5,-20(s0)

	configASSERT( pxQueue );
80000a6c:	fec42783          	lw	a5,-20(s0)
80000a70:	00079663          	bnez	a5,80000a7c <xQueueGenericReset+0x30>
80000a74:	30007073          	csrci	mstatus,0
80000a78:	0000006f          	j	80000a78 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
80000a7c:	781030ef          	jal	ra,800049fc <vTaskEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
80000a80:	fec42783          	lw	a5,-20(s0)
80000a84:	0007a703          	lw	a4,0(a5)
80000a88:	fec42783          	lw	a5,-20(s0)
80000a8c:	03c7a683          	lw	a3,60(a5)
80000a90:	fec42783          	lw	a5,-20(s0)
80000a94:	0407a783          	lw	a5,64(a5)
80000a98:	02f687b3          	mul	a5,a3,a5
80000a9c:	00f70733          	add	a4,a4,a5
80000aa0:	fec42783          	lw	a5,-20(s0)
80000aa4:	00e7a223          	sw	a4,4(a5)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
80000aa8:	fec42783          	lw	a5,-20(s0)
80000aac:	0207ac23          	sw	zero,56(a5)
		pxQueue->pcWriteTo = pxQueue->pcHead;
80000ab0:	fec42783          	lw	a5,-20(s0)
80000ab4:	0007a703          	lw	a4,0(a5)
80000ab8:	fec42783          	lw	a5,-20(s0)
80000abc:	00e7a423          	sw	a4,8(a5)
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
80000ac0:	fec42783          	lw	a5,-20(s0)
80000ac4:	0007a703          	lw	a4,0(a5)
80000ac8:	fec42783          	lw	a5,-20(s0)
80000acc:	03c7a783          	lw	a5,60(a5)
80000ad0:	fff78693          	addi	a3,a5,-1
80000ad4:	fec42783          	lw	a5,-20(s0)
80000ad8:	0407a783          	lw	a5,64(a5)
80000adc:	02f687b3          	mul	a5,a3,a5
80000ae0:	00f70733          	add	a4,a4,a5
80000ae4:	fec42783          	lw	a5,-20(s0)
80000ae8:	00e7a623          	sw	a4,12(a5)
		pxQueue->xRxLock = queueUNLOCKED;
80000aec:	fec42783          	lw	a5,-20(s0)
80000af0:	fff00713          	li	a4,-1
80000af4:	04e7a223          	sw	a4,68(a5)
		pxQueue->xTxLock = queueUNLOCKED;
80000af8:	fec42783          	lw	a5,-20(s0)
80000afc:	fff00713          	li	a4,-1
80000b00:	04e7a423          	sw	a4,72(a5)

		if( xNewQueue == pdFALSE )
80000b04:	fd842783          	lw	a5,-40(s0)
80000b08:	02079a63          	bnez	a5,80000b3c <xQueueGenericReset+0xf0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
80000b0c:	fec42783          	lw	a5,-20(s0)
80000b10:	0107a783          	lw	a5,16(a5)
80000b14:	04078463          	beqz	a5,80000b5c <xQueueGenericReset+0x110>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
80000b18:	fec42783          	lw	a5,-20(s0)
80000b1c:	01078793          	addi	a5,a5,16
80000b20:	00078513          	mv	a0,a5
80000b24:	74d020ef          	jal	ra,80003a70 <xTaskRemoveFromEventList>
80000b28:	00050713          	mv	a4,a0
80000b2c:	00100793          	li	a5,1
80000b30:	02f71663          	bne	a4,a5,80000b5c <xQueueGenericReset+0x110>
				{
					queueYIELD_IF_USING_PREEMPTION();
80000b34:	959ff0ef          	jal	ra,8000048c <vPortYield>
80000b38:	0240006f          	j	80000b5c <xQueueGenericReset+0x110>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
80000b3c:	fec42783          	lw	a5,-20(s0)
80000b40:	01078793          	addi	a5,a5,16
80000b44:	00078513          	mv	a0,a5
80000b48:	c85ff0ef          	jal	ra,800007cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
80000b4c:	fec42783          	lw	a5,-20(s0)
80000b50:	02478793          	addi	a5,a5,36
80000b54:	00078513          	mv	a0,a5
80000b58:	c75ff0ef          	jal	ra,800007cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
80000b5c:	6f5030ef          	jal	ra,80004a50 <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
80000b60:	00100793          	li	a5,1
}
80000b64:	00078513          	mv	a0,a5
80000b68:	02c12083          	lw	ra,44(sp)
80000b6c:	02812403          	lw	s0,40(sp)
80000b70:	03010113          	addi	sp,sp,48
80000b74:	00008067          	ret

80000b78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
80000b78:	fd010113          	addi	sp,sp,-48
80000b7c:	02112623          	sw	ra,44(sp)
80000b80:	02812423          	sw	s0,40(sp)
80000b84:	03010413          	addi	s0,sp,48
80000b88:	fca42e23          	sw	a0,-36(s0)
80000b8c:	fcb42c23          	sw	a1,-40(s0)
80000b90:	00060793          	mv	a5,a2
80000b94:	fcf40ba3          	sb	a5,-41(s0)
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
80000b98:	fe042423          	sw	zero,-24(s0)

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
80000b9c:	fdc42783          	lw	a5,-36(s0)
80000ba0:	00079663          	bnez	a5,80000bac <xQueueGenericCreate+0x34>
80000ba4:	30007073          	csrci	mstatus,0
80000ba8:	0000006f          	j	80000ba8 <xQueueGenericCreate+0x30>

	if( uxItemSize == ( UBaseType_t ) 0 )
80000bac:	fd842783          	lw	a5,-40(s0)
80000bb0:	00079663          	bnez	a5,80000bbc <xQueueGenericCreate+0x44>
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
80000bb4:	fe042623          	sw	zero,-20(s0)
80000bb8:	0180006f          	j	80000bd0 <xQueueGenericCreate+0x58>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80000bbc:	fdc42703          	lw	a4,-36(s0)
80000bc0:	fd842783          	lw	a5,-40(s0)
80000bc4:	02f707b3          	mul	a5,a4,a5
80000bc8:	00178793          	addi	a5,a5,1
80000bcc:	fef42623          	sw	a5,-20(s0)
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
80000bd0:	fec42783          	lw	a5,-20(s0)
80000bd4:	05478793          	addi	a5,a5,84
80000bd8:	00078513          	mv	a0,a5
80000bdc:	435050ef          	jal	ra,80006810 <pvPortMalloc>
80000be0:	fea42223          	sw	a0,-28(s0)

	if( pxNewQueue != NULL )
80000be4:	fe442783          	lw	a5,-28(s0)
80000be8:	06078263          	beqz	a5,80000c4c <xQueueGenericCreate+0xd4>
	{
		if( uxItemSize == ( UBaseType_t ) 0 )
80000bec:	fd842783          	lw	a5,-40(s0)
80000bf0:	00079a63          	bnez	a5,80000c04 <xQueueGenericCreate+0x8c>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
80000bf4:	fe442783          	lw	a5,-28(s0)
80000bf8:	fe442703          	lw	a4,-28(s0)
80000bfc:	00e7a023          	sw	a4,0(a5)
80000c00:	0140006f          	j	80000c14 <xQueueGenericCreate+0x9c>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
80000c04:	fe442783          	lw	a5,-28(s0)
80000c08:	05478713          	addi	a4,a5,84
80000c0c:	fe442783          	lw	a5,-28(s0)
80000c10:	00e7a023          	sw	a4,0(a5)
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
80000c14:	fe442783          	lw	a5,-28(s0)
80000c18:	fdc42703          	lw	a4,-36(s0)
80000c1c:	02e7ae23          	sw	a4,60(a5)
		pxNewQueue->uxItemSize = uxItemSize;
80000c20:	fe442783          	lw	a5,-28(s0)
80000c24:	fd842703          	lw	a4,-40(s0)
80000c28:	04e7a023          	sw	a4,64(a5)
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
80000c2c:	00100593          	li	a1,1
80000c30:	fe442503          	lw	a0,-28(s0)
80000c34:	e19ff0ef          	jal	ra,80000a4c <xQueueGenericReset>

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
80000c38:	fe442783          	lw	a5,-28(s0)
80000c3c:	fd744703          	lbu	a4,-41(s0)
80000c40:	04e78823          	sb	a4,80(a5)
			pxNewQueue->pxQueueSetContainer = NULL;
		}
		#endif /* configUSE_QUEUE_SETS */

		traceQUEUE_CREATE( pxNewQueue );
		xReturn = pxNewQueue;
80000c44:	fe442783          	lw	a5,-28(s0)
80000c48:	fef42423          	sw	a5,-24(s0)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
80000c4c:	fe842783          	lw	a5,-24(s0)
80000c50:	00079663          	bnez	a5,80000c5c <xQueueGenericCreate+0xe4>
80000c54:	30007073          	csrci	mstatus,0
80000c58:	0000006f          	j	80000c58 <xQueueGenericCreate+0xe0>

	return xReturn;
80000c5c:	fe842783          	lw	a5,-24(s0)
}
80000c60:	00078513          	mv	a0,a5
80000c64:	02c12083          	lw	ra,44(sp)
80000c68:	02812403          	lw	s0,40(sp)
80000c6c:	03010113          	addi	sp,sp,48
80000c70:	00008067          	ret

80000c74 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
80000c74:	fd010113          	addi	sp,sp,-48
80000c78:	02112623          	sw	ra,44(sp)
80000c7c:	02812423          	sw	s0,40(sp)
80000c80:	03010413          	addi	s0,sp,48
80000c84:	00050793          	mv	a5,a0
80000c88:	fcf40fa3          	sb	a5,-33(s0)
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
80000c8c:	05400513          	li	a0,84
80000c90:	381050ef          	jal	ra,80006810 <pvPortMalloc>
80000c94:	fea42623          	sw	a0,-20(s0)
		if( pxNewQueue != NULL )
80000c98:	fec42783          	lw	a5,-20(s0)
80000c9c:	08078c63          	beqz	a5,80000d34 <xQueueCreateMutex+0xc0>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
80000ca0:	fec42783          	lw	a5,-20(s0)
80000ca4:	0007a223          	sw	zero,4(a5)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
80000ca8:	fec42783          	lw	a5,-20(s0)
80000cac:	0007a023          	sw	zero,0(a5)

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
80000cb0:	fec42783          	lw	a5,-20(s0)
80000cb4:	0007a423          	sw	zero,8(a5)
			pxNewQueue->u.pcReadFrom = NULL;
80000cb8:	fec42783          	lw	a5,-20(s0)
80000cbc:	0007a623          	sw	zero,12(a5)

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
80000cc0:	fec42783          	lw	a5,-20(s0)
80000cc4:	0207ac23          	sw	zero,56(a5)
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
80000cc8:	fec42783          	lw	a5,-20(s0)
80000ccc:	00100713          	li	a4,1
80000cd0:	02e7ae23          	sw	a4,60(a5)
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
80000cd4:	fec42783          	lw	a5,-20(s0)
80000cd8:	0407a023          	sw	zero,64(a5)
			pxNewQueue->xRxLock = queueUNLOCKED;
80000cdc:	fec42783          	lw	a5,-20(s0)
80000ce0:	fff00713          	li	a4,-1
80000ce4:	04e7a223          	sw	a4,68(a5)
			pxNewQueue->xTxLock = queueUNLOCKED;
80000ce8:	fec42783          	lw	a5,-20(s0)
80000cec:	fff00713          	li	a4,-1
80000cf0:	04e7a423          	sw	a4,72(a5)

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
80000cf4:	fec42783          	lw	a5,-20(s0)
80000cf8:	fdf44703          	lbu	a4,-33(s0)
80000cfc:	04e78823          	sb	a4,80(a5)
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
80000d00:	fec42783          	lw	a5,-20(s0)
80000d04:	01078793          	addi	a5,a5,16
80000d08:	00078513          	mv	a0,a5
80000d0c:	ac1ff0ef          	jal	ra,800007cc <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
80000d10:	fec42783          	lw	a5,-20(s0)
80000d14:	02478793          	addi	a5,a5,36
80000d18:	00078513          	mv	a0,a5
80000d1c:	ab1ff0ef          	jal	ra,800007cc <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
80000d20:	00000693          	li	a3,0
80000d24:	00000613          	li	a2,0
80000d28:	00000593          	li	a1,0
80000d2c:	fec42503          	lw	a0,-20(s0)
80000d30:	208000ef          	jal	ra,80000f38 <xQueueGenericSend>
		else
		{
			traceCREATE_MUTEX_FAILED();
		}

		return pxNewQueue;
80000d34:	fec42783          	lw	a5,-20(s0)
	}
80000d38:	00078513          	mv	a0,a5
80000d3c:	02c12083          	lw	ra,44(sp)
80000d40:	02812403          	lw	s0,40(sp)
80000d44:	03010113          	addi	sp,sp,48
80000d48:	00008067          	ret

80000d4c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
80000d4c:	fd010113          	addi	sp,sp,-48
80000d50:	02112623          	sw	ra,44(sp)
80000d54:	02812423          	sw	s0,40(sp)
80000d58:	02912223          	sw	s1,36(sp)
80000d5c:	03010413          	addi	s0,sp,48
80000d60:	fca42e23          	sw	a0,-36(s0)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
80000d64:	fdc42783          	lw	a5,-36(s0)
80000d68:	fef42423          	sw	a5,-24(s0)

		configASSERT( pxMutex );
80000d6c:	fe842783          	lw	a5,-24(s0)
80000d70:	00079663          	bnez	a5,80000d7c <xQueueGiveMutexRecursive+0x30>
80000d74:	30007073          	csrci	mstatus,0
80000d78:	0000006f          	j	80000d78 <xQueueGiveMutexRecursive+0x2c>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
80000d7c:	fe842783          	lw	a5,-24(s0)
80000d80:	0047a483          	lw	s1,4(a5)
80000d84:	13d030ef          	jal	ra,800046c0 <xTaskGetCurrentTaskHandle>
80000d88:	00050793          	mv	a5,a0
80000d8c:	04f49263          	bne	s1,a5,80000dd0 <xQueueGiveMutexRecursive+0x84>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
80000d90:	fe842783          	lw	a5,-24(s0)
80000d94:	00c7a783          	lw	a5,12(a5)
80000d98:	fff78713          	addi	a4,a5,-1
80000d9c:	fe842783          	lw	a5,-24(s0)
80000da0:	00e7a623          	sw	a4,12(a5)

			/* Have we unwound the call count? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
80000da4:	fe842783          	lw	a5,-24(s0)
80000da8:	00c7a783          	lw	a5,12(a5)
80000dac:	00079c63          	bnez	a5,80000dc4 <xQueueGiveMutexRecursive+0x78>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
80000db0:	00000693          	li	a3,0
80000db4:	00000613          	li	a2,0
80000db8:	00000593          	li	a1,0
80000dbc:	fe842503          	lw	a0,-24(s0)
80000dc0:	178000ef          	jal	ra,80000f38 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
80000dc4:	00100793          	li	a5,1
80000dc8:	fef42623          	sw	a5,-20(s0)
80000dcc:	0080006f          	j	80000dd4 <xQueueGiveMutexRecursive+0x88>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
80000dd0:	fe042623          	sw	zero,-20(s0)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
80000dd4:	fec42783          	lw	a5,-20(s0)
	}
80000dd8:	00078513          	mv	a0,a5
80000ddc:	02c12083          	lw	ra,44(sp)
80000de0:	02812403          	lw	s0,40(sp)
80000de4:	02412483          	lw	s1,36(sp)
80000de8:	03010113          	addi	sp,sp,48
80000dec:	00008067          	ret

80000df0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
80000df0:	fd010113          	addi	sp,sp,-48
80000df4:	02112623          	sw	ra,44(sp)
80000df8:	02812423          	sw	s0,40(sp)
80000dfc:	02912223          	sw	s1,36(sp)
80000e00:	03010413          	addi	s0,sp,48
80000e04:	fca42e23          	sw	a0,-36(s0)
80000e08:	fcb42c23          	sw	a1,-40(s0)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
80000e0c:	fdc42783          	lw	a5,-36(s0)
80000e10:	fef42423          	sw	a5,-24(s0)

		configASSERT( pxMutex );
80000e14:	fe842783          	lw	a5,-24(s0)
80000e18:	00079663          	bnez	a5,80000e24 <xQueueTakeMutexRecursive+0x34>
80000e1c:	30007073          	csrci	mstatus,0
80000e20:	0000006f          	j	80000e20 <xQueueTakeMutexRecursive+0x30>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
80000e24:	fe842783          	lw	a5,-24(s0)
80000e28:	0047a483          	lw	s1,4(a5)
80000e2c:	095030ef          	jal	ra,800046c0 <xTaskGetCurrentTaskHandle>
80000e30:	00050793          	mv	a5,a0
80000e34:	02f49263          	bne	s1,a5,80000e58 <xQueueTakeMutexRecursive+0x68>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
80000e38:	fe842783          	lw	a5,-24(s0)
80000e3c:	00c7a783          	lw	a5,12(a5)
80000e40:	00178713          	addi	a4,a5,1
80000e44:	fe842783          	lw	a5,-24(s0)
80000e48:	00e7a623          	sw	a4,12(a5)
			xReturn = pdPASS;
80000e4c:	00100793          	li	a5,1
80000e50:	fef42623          	sw	a5,-20(s0)
80000e54:	03c0006f          	j	80000e90 <xQueueTakeMutexRecursive+0xa0>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
80000e58:	00000693          	li	a3,0
80000e5c:	fd842603          	lw	a2,-40(s0)
80000e60:	00000593          	li	a1,0
80000e64:	fe842503          	lw	a0,-24(s0)
80000e68:	5c0000ef          	jal	ra,80001428 <xQueueGenericReceive>
80000e6c:	fea42623          	sw	a0,-20(s0)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn == pdPASS )
80000e70:	fec42703          	lw	a4,-20(s0)
80000e74:	00100793          	li	a5,1
80000e78:	00f71c63          	bne	a4,a5,80000e90 <xQueueTakeMutexRecursive+0xa0>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
80000e7c:	fe842783          	lw	a5,-24(s0)
80000e80:	00c7a783          	lw	a5,12(a5)
80000e84:	00178713          	addi	a4,a5,1
80000e88:	fe842783          	lw	a5,-24(s0)
80000e8c:	00e7a623          	sw	a4,12(a5)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
80000e90:	fec42783          	lw	a5,-20(s0)
	}
80000e94:	00078513          	mv	a0,a5
80000e98:	02c12083          	lw	ra,44(sp)
80000e9c:	02812403          	lw	s0,40(sp)
80000ea0:	02412483          	lw	s1,36(sp)
80000ea4:	03010113          	addi	sp,sp,48
80000ea8:	00008067          	ret

80000eac <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
80000eac:	fd010113          	addi	sp,sp,-48
80000eb0:	02112623          	sw	ra,44(sp)
80000eb4:	02812423          	sw	s0,40(sp)
80000eb8:	03010413          	addi	s0,sp,48
80000ebc:	fca42e23          	sw	a0,-36(s0)
80000ec0:	fcb42c23          	sw	a1,-40(s0)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
80000ec4:	fdc42783          	lw	a5,-36(s0)
80000ec8:	00079663          	bnez	a5,80000ed4 <xQueueCreateCountingSemaphore+0x28>
80000ecc:	30007073          	csrci	mstatus,0
80000ed0:	0000006f          	j	80000ed0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
80000ed4:	fd842703          	lw	a4,-40(s0)
80000ed8:	fdc42783          	lw	a5,-36(s0)
80000edc:	00e7f663          	bleu	a4,a5,80000ee8 <xQueueCreateCountingSemaphore+0x3c>
80000ee0:	30007073          	csrci	mstatus,0
80000ee4:	0000006f          	j	80000ee4 <xQueueCreateCountingSemaphore+0x38>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
80000ee8:	00200613          	li	a2,2
80000eec:	00000593          	li	a1,0
80000ef0:	fdc42503          	lw	a0,-36(s0)
80000ef4:	c85ff0ef          	jal	ra,80000b78 <xQueueGenericCreate>
80000ef8:	fea42623          	sw	a0,-20(s0)

		if( xHandle != NULL )
80000efc:	fec42783          	lw	a5,-20(s0)
80000f00:	00078863          	beqz	a5,80000f10 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
80000f04:	fec42783          	lw	a5,-20(s0)
80000f08:	fd842703          	lw	a4,-40(s0)
80000f0c:	02e7ac23          	sw	a4,56(a5)
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( xHandle );
80000f10:	fec42783          	lw	a5,-20(s0)
80000f14:	00079663          	bnez	a5,80000f20 <xQueueCreateCountingSemaphore+0x74>
80000f18:	30007073          	csrci	mstatus,0
80000f1c:	0000006f          	j	80000f1c <xQueueCreateCountingSemaphore+0x70>
		return xHandle;
80000f20:	fec42783          	lw	a5,-20(s0)
	}
80000f24:	00078513          	mv	a0,a5
80000f28:	02c12083          	lw	ra,44(sp)
80000f2c:	02812403          	lw	s0,40(sp)
80000f30:	03010113          	addi	sp,sp,48
80000f34:	00008067          	ret

80000f38 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
80000f38:	fc010113          	addi	sp,sp,-64
80000f3c:	02112e23          	sw	ra,60(sp)
80000f40:	02812c23          	sw	s0,56(sp)
80000f44:	04010413          	addi	s0,sp,64
80000f48:	fca42623          	sw	a0,-52(s0)
80000f4c:	fcb42423          	sw	a1,-56(s0)
80000f50:	fcc42223          	sw	a2,-60(s0)
80000f54:	fcd42023          	sw	a3,-64(s0)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
80000f58:	fe042623          	sw	zero,-20(s0)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
80000f5c:	fcc42783          	lw	a5,-52(s0)
80000f60:	fef42423          	sw	a5,-24(s0)

	configASSERT( pxQueue );
80000f64:	fe842783          	lw	a5,-24(s0)
80000f68:	00079663          	bnez	a5,80000f74 <xQueueGenericSend+0x3c>
80000f6c:	30007073          	csrci	mstatus,0
80000f70:	0000006f          	j	80000f70 <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
80000f74:	fc842783          	lw	a5,-56(s0)
80000f78:	00079863          	bnez	a5,80000f88 <xQueueGenericSend+0x50>
80000f7c:	fe842783          	lw	a5,-24(s0)
80000f80:	0407a783          	lw	a5,64(a5)
80000f84:	00079663          	bnez	a5,80000f90 <xQueueGenericSend+0x58>
80000f88:	00100793          	li	a5,1
80000f8c:	0080006f          	j	80000f94 <xQueueGenericSend+0x5c>
80000f90:	00000793          	li	a5,0
80000f94:	00079663          	bnez	a5,80000fa0 <xQueueGenericSend+0x68>
80000f98:	30007073          	csrci	mstatus,0
80000f9c:	0000006f          	j	80000f9c <xQueueGenericSend+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
80000fa0:	fc042703          	lw	a4,-64(s0)
80000fa4:	00200793          	li	a5,2
80000fa8:	00f71a63          	bne	a4,a5,80000fbc <xQueueGenericSend+0x84>
80000fac:	fe842783          	lw	a5,-24(s0)
80000fb0:	03c7a703          	lw	a4,60(a5)
80000fb4:	00100793          	li	a5,1
80000fb8:	00f71663          	bne	a4,a5,80000fc4 <xQueueGenericSend+0x8c>
80000fbc:	00100793          	li	a5,1
80000fc0:	0080006f          	j	80000fc8 <xQueueGenericSend+0x90>
80000fc4:	00000793          	li	a5,0
80000fc8:	00079663          	bnez	a5,80000fd4 <xQueueGenericSend+0x9c>
80000fcc:	30007073          	csrci	mstatus,0
80000fd0:	0000006f          	j	80000fd0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
80000fd4:	71c030ef          	jal	ra,800046f0 <xTaskGetSchedulerState>
80000fd8:	00050793          	mv	a5,a0
80000fdc:	00079663          	bnez	a5,80000fe8 <xQueueGenericSend+0xb0>
80000fe0:	fc442783          	lw	a5,-60(s0)
80000fe4:	00079663          	bnez	a5,80000ff0 <xQueueGenericSend+0xb8>
80000fe8:	00100793          	li	a5,1
80000fec:	0080006f          	j	80000ff4 <xQueueGenericSend+0xbc>
80000ff0:	00000793          	li	a5,0
80000ff4:	00079663          	bnez	a5,80001000 <xQueueGenericSend+0xc8>
80000ff8:	30007073          	csrci	mstatus,0
80000ffc:	0000006f          	j	80000ffc <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
80001000:	1fd030ef          	jal	ra,800049fc <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
80001004:	fe842783          	lw	a5,-24(s0)
80001008:	0387a703          	lw	a4,56(a5)
8000100c:	fe842783          	lw	a5,-24(s0)
80001010:	03c7a783          	lw	a5,60(a5)
80001014:	00f76863          	bltu	a4,a5,80001024 <xQueueGenericSend+0xec>
80001018:	fc042703          	lw	a4,-64(s0)
8000101c:	00200793          	li	a5,2
80001020:	06f71063          	bne	a4,a5,80001080 <xQueueGenericSend+0x148>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
80001024:	fc042603          	lw	a2,-64(s0)
80001028:	fc842583          	lw	a1,-56(s0)
8000102c:	fe842503          	lw	a0,-24(s0)
80001030:	255000ef          	jal	ra,80001a84 <prvCopyDataToQueue>
80001034:	fea42223          	sw	a0,-28(s0)
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80001038:	fe842783          	lw	a5,-24(s0)
8000103c:	0247a783          	lw	a5,36(a5)
80001040:	02078463          	beqz	a5,80001068 <xQueueGenericSend+0x130>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
80001044:	fe842783          	lw	a5,-24(s0)
80001048:	02478793          	addi	a5,a5,36
8000104c:	00078513          	mv	a0,a5
80001050:	221020ef          	jal	ra,80003a70 <xTaskRemoveFromEventList>
80001054:	00050713          	mv	a4,a0
80001058:	00100793          	li	a5,1
8000105c:	00f71c63          	bne	a4,a5,80001074 <xQueueGenericSend+0x13c>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
80001060:	c2cff0ef          	jal	ra,8000048c <vPortYield>
80001064:	0100006f          	j	80001074 <xQueueGenericSend+0x13c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
80001068:	fe442783          	lw	a5,-28(s0)
8000106c:	00078463          	beqz	a5,80001074 <xQueueGenericSend+0x13c>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
80001070:	c1cff0ef          	jal	ra,8000048c <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
80001074:	1dd030ef          	jal	ra,80004a50 <vTaskExitCritical>
				return pdPASS;
80001078:	00100793          	li	a5,1
8000107c:	0f40006f          	j	80001170 <xQueueGenericSend+0x238>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
80001080:	fc442783          	lw	a5,-60(s0)
80001084:	00079863          	bnez	a5,80001094 <xQueueGenericSend+0x15c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
80001088:	1c9030ef          	jal	ra,80004a50 <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
8000108c:	00000793          	li	a5,0
80001090:	0e00006f          	j	80001170 <xQueueGenericSend+0x238>
				}
				else if( xEntryTimeSet == pdFALSE )
80001094:	fec42783          	lw	a5,-20(s0)
80001098:	00079c63          	bnez	a5,800010b0 <xQueueGenericSend+0x178>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
8000109c:	fdc40793          	addi	a5,s0,-36
800010a0:	00078513          	mv	a0,a5
800010a4:	435020ef          	jal	ra,80003cd8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
800010a8:	00100793          	li	a5,1
800010ac:	fef42623          	sw	a5,-20(s0)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
800010b0:	1a1030ef          	jal	ra,80004a50 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
800010b4:	651010ef          	jal	ra,80002f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
800010b8:	145030ef          	jal	ra,800049fc <vTaskEnterCritical>
800010bc:	fe842783          	lw	a5,-24(s0)
800010c0:	0447a703          	lw	a4,68(a5)
800010c4:	fff00793          	li	a5,-1
800010c8:	00f71663          	bne	a4,a5,800010d4 <xQueueGenericSend+0x19c>
800010cc:	fe842783          	lw	a5,-24(s0)
800010d0:	0407a223          	sw	zero,68(a5)
800010d4:	fe842783          	lw	a5,-24(s0)
800010d8:	0487a703          	lw	a4,72(a5)
800010dc:	fff00793          	li	a5,-1
800010e0:	00f71663          	bne	a4,a5,800010ec <xQueueGenericSend+0x1b4>
800010e4:	fe842783          	lw	a5,-24(s0)
800010e8:	0407a423          	sw	zero,72(a5)
800010ec:	165030ef          	jal	ra,80004a50 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
800010f0:	fc440713          	addi	a4,s0,-60
800010f4:	fdc40793          	addi	a5,s0,-36
800010f8:	00070593          	mv	a1,a4
800010fc:	00078513          	mv	a0,a5
80001100:	431020ef          	jal	ra,80003d30 <xTaskCheckForTimeOut>
80001104:	00050793          	mv	a5,a0
80001108:	04079c63          	bnez	a5,80001160 <xQueueGenericSend+0x228>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
8000110c:	fe842503          	lw	a0,-24(s0)
80001110:	535000ef          	jal	ra,80001e44 <prvIsQueueFull>
80001114:	00050793          	mv	a5,a0
80001118:	02078c63          	beqz	a5,80001150 <xQueueGenericSend+0x218>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
8000111c:	fe842783          	lw	a5,-24(s0)
80001120:	01078793          	addi	a5,a5,16
80001124:	fc442703          	lw	a4,-60(s0)
80001128:	00070593          	mv	a1,a4
8000112c:	00078513          	mv	a0,a5
80001130:	6c4020ef          	jal	ra,800037f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
80001134:	fe842503          	lw	a0,-24(s0)
80001138:	375000ef          	jal	ra,80001cac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
8000113c:	601010ef          	jal	ra,80002f3c <xTaskResumeAll>
80001140:	00050793          	mv	a5,a0
80001144:	ea079ee3          	bnez	a5,80001000 <xQueueGenericSend+0xc8>
				{
					portYIELD_WITHIN_API();
80001148:	b44ff0ef          	jal	ra,8000048c <vPortYield>
8000114c:	eb5ff06f          	j	80001000 <xQueueGenericSend+0xc8>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
80001150:	fe842503          	lw	a0,-24(s0)
80001154:	359000ef          	jal	ra,80001cac <prvUnlockQueue>
				( void ) xTaskResumeAll();
80001158:	5e5010ef          	jal	ra,80002f3c <xTaskResumeAll>
8000115c:	ea5ff06f          	j	80001000 <xQueueGenericSend+0xc8>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
80001160:	fe842503          	lw	a0,-24(s0)
80001164:	349000ef          	jal	ra,80001cac <prvUnlockQueue>
			( void ) xTaskResumeAll();
80001168:	5d5010ef          	jal	ra,80002f3c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
8000116c:	00000793          	li	a5,0
		}
	}
}
80001170:	00078513          	mv	a0,a5
80001174:	03c12083          	lw	ra,60(sp)
80001178:	03812403          	lw	s0,56(sp)
8000117c:	04010113          	addi	sp,sp,64
80001180:	00008067          	ret

80001184 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
80001184:	fd010113          	addi	sp,sp,-48
80001188:	02112623          	sw	ra,44(sp)
8000118c:	02812423          	sw	s0,40(sp)
80001190:	03010413          	addi	s0,sp,48
80001194:	fca42e23          	sw	a0,-36(s0)
80001198:	fcb42c23          	sw	a1,-40(s0)
8000119c:	fcc42a23          	sw	a2,-44(s0)
800011a0:	fcd42823          	sw	a3,-48(s0)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
800011a4:	fdc42783          	lw	a5,-36(s0)
800011a8:	fef42423          	sw	a5,-24(s0)

	configASSERT( pxQueue );
800011ac:	fe842783          	lw	a5,-24(s0)
800011b0:	00079663          	bnez	a5,800011bc <xQueueGenericSendFromISR+0x38>
800011b4:	30007073          	csrci	mstatus,0
800011b8:	0000006f          	j	800011b8 <xQueueGenericSendFromISR+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
800011bc:	fd842783          	lw	a5,-40(s0)
800011c0:	00079863          	bnez	a5,800011d0 <xQueueGenericSendFromISR+0x4c>
800011c4:	fe842783          	lw	a5,-24(s0)
800011c8:	0407a783          	lw	a5,64(a5)
800011cc:	00079663          	bnez	a5,800011d8 <xQueueGenericSendFromISR+0x54>
800011d0:	00100793          	li	a5,1
800011d4:	0080006f          	j	800011dc <xQueueGenericSendFromISR+0x58>
800011d8:	00000793          	li	a5,0
800011dc:	00079663          	bnez	a5,800011e8 <xQueueGenericSendFromISR+0x64>
800011e0:	30007073          	csrci	mstatus,0
800011e4:	0000006f          	j	800011e4 <xQueueGenericSendFromISR+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
800011e8:	fd042703          	lw	a4,-48(s0)
800011ec:	00200793          	li	a5,2
800011f0:	00f71a63          	bne	a4,a5,80001204 <xQueueGenericSendFromISR+0x80>
800011f4:	fe842783          	lw	a5,-24(s0)
800011f8:	03c7a703          	lw	a4,60(a5)
800011fc:	00100793          	li	a5,1
80001200:	00f71663          	bne	a4,a5,8000120c <xQueueGenericSendFromISR+0x88>
80001204:	00100793          	li	a5,1
80001208:	0080006f          	j	80001210 <xQueueGenericSendFromISR+0x8c>
8000120c:	00000793          	li	a5,0
80001210:	00079663          	bnez	a5,8000121c <xQueueGenericSendFromISR+0x98>
80001214:	30007073          	csrci	mstatus,0
80001218:	0000006f          	j	80001218 <xQueueGenericSendFromISR+0x94>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
8000121c:	cb8ff0ef          	jal	ra,800006d4 <vPortSetInterruptMask>
80001220:	00050793          	mv	a5,a0
80001224:	fef42223          	sw	a5,-28(s0)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
80001228:	fe842783          	lw	a5,-24(s0)
8000122c:	0387a703          	lw	a4,56(a5)
80001230:	fe842783          	lw	a5,-24(s0)
80001234:	03c7a783          	lw	a5,60(a5)
80001238:	00f76863          	bltu	a4,a5,80001248 <xQueueGenericSendFromISR+0xc4>
8000123c:	fd042703          	lw	a4,-48(s0)
80001240:	00200793          	li	a5,2
80001244:	08f71063          	bne	a4,a5,800012c4 <xQueueGenericSendFromISR+0x140>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
80001248:	fd042603          	lw	a2,-48(s0)
8000124c:	fd842583          	lw	a1,-40(s0)
80001250:	fe842503          	lw	a0,-24(s0)
80001254:	031000ef          	jal	ra,80001a84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
80001258:	fe842783          	lw	a5,-24(s0)
8000125c:	0487a703          	lw	a4,72(a5)
80001260:	fff00793          	li	a5,-1
80001264:	04f71063          	bne	a4,a5,800012a4 <xQueueGenericSendFromISR+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80001268:	fe842783          	lw	a5,-24(s0)
8000126c:	0247a783          	lw	a5,36(a5)
80001270:	04078463          	beqz	a5,800012b8 <xQueueGenericSendFromISR+0x134>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80001274:	fe842783          	lw	a5,-24(s0)
80001278:	02478793          	addi	a5,a5,36
8000127c:	00078513          	mv	a0,a5
80001280:	7f0020ef          	jal	ra,80003a70 <xTaskRemoveFromEventList>
80001284:	00050793          	mv	a5,a0
80001288:	02078863          	beqz	a5,800012b8 <xQueueGenericSendFromISR+0x134>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
8000128c:	fd442783          	lw	a5,-44(s0)
80001290:	02078463          	beqz	a5,800012b8 <xQueueGenericSendFromISR+0x134>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
80001294:	fd442783          	lw	a5,-44(s0)
80001298:	00100713          	li	a4,1
8000129c:	00e7a023          	sw	a4,0(a5)
800012a0:	0180006f          	j	800012b8 <xQueueGenericSendFromISR+0x134>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
800012a4:	fe842783          	lw	a5,-24(s0)
800012a8:	0487a783          	lw	a5,72(a5)
800012ac:	00178713          	addi	a4,a5,1
800012b0:	fe842783          	lw	a5,-24(s0)
800012b4:	04e7a423          	sw	a4,72(a5)
			}

			xReturn = pdPASS;
800012b8:	00100793          	li	a5,1
800012bc:	fef42623          	sw	a5,-20(s0)
800012c0:	0080006f          	j	800012c8 <xQueueGenericSendFromISR+0x144>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
800012c4:	fe042623          	sw	zero,-20(s0)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
800012c8:	fe442783          	lw	a5,-28(s0)
800012cc:	00078513          	mv	a0,a5
800012d0:	bdcff0ef          	jal	ra,800006ac <vPortClearInterruptMask>

	return xReturn;
800012d4:	fec42783          	lw	a5,-20(s0)
}
800012d8:	00078513          	mv	a0,a5
800012dc:	02c12083          	lw	ra,44(sp)
800012e0:	02812403          	lw	s0,40(sp)
800012e4:	03010113          	addi	sp,sp,48
800012e8:	00008067          	ret

800012ec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
800012ec:	fd010113          	addi	sp,sp,-48
800012f0:	02112623          	sw	ra,44(sp)
800012f4:	02812423          	sw	s0,40(sp)
800012f8:	03010413          	addi	s0,sp,48
800012fc:	fca42e23          	sw	a0,-36(s0)
80001300:	fcb42c23          	sw	a1,-40(s0)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
80001304:	fdc42783          	lw	a5,-36(s0)
80001308:	fef42423          	sw	a5,-24(s0)
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
8000130c:	fe842783          	lw	a5,-24(s0)
80001310:	00079663          	bnez	a5,8000131c <xQueueGiveFromISR+0x30>
80001314:	30007073          	csrci	mstatus,0
80001318:	0000006f          	j	80001318 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
8000131c:	fe842783          	lw	a5,-24(s0)
80001320:	0407a783          	lw	a5,64(a5)
80001324:	00078663          	beqz	a5,80001330 <xQueueGiveFromISR+0x44>
80001328:	30007073          	csrci	mstatus,0
8000132c:	0000006f          	j	8000132c <xQueueGiveFromISR+0x40>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
80001330:	fe842783          	lw	a5,-24(s0)
80001334:	0007a783          	lw	a5,0(a5)
80001338:	00079863          	bnez	a5,80001348 <xQueueGiveFromISR+0x5c>
8000133c:	fe842783          	lw	a5,-24(s0)
80001340:	0047a783          	lw	a5,4(a5)
80001344:	00079663          	bnez	a5,80001350 <xQueueGiveFromISR+0x64>
80001348:	00100793          	li	a5,1
8000134c:	0080006f          	j	80001354 <xQueueGiveFromISR+0x68>
80001350:	00000793          	li	a5,0
80001354:	00079663          	bnez	a5,80001360 <xQueueGiveFromISR+0x74>
80001358:	30007073          	csrci	mstatus,0
8000135c:	0000006f          	j	8000135c <xQueueGiveFromISR+0x70>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80001360:	b74ff0ef          	jal	ra,800006d4 <vPortSetInterruptMask>
80001364:	00050793          	mv	a5,a0
80001368:	fef42223          	sw	a5,-28(s0)
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
8000136c:	fe842783          	lw	a5,-24(s0)
80001370:	0387a703          	lw	a4,56(a5)
80001374:	fe842783          	lw	a5,-24(s0)
80001378:	03c7a783          	lw	a5,60(a5)
8000137c:	08f77263          	bleu	a5,a4,80001400 <xQueueGiveFromISR+0x114>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
80001380:	fe842783          	lw	a5,-24(s0)
80001384:	0387a783          	lw	a5,56(a5)
80001388:	00178713          	addi	a4,a5,1
8000138c:	fe842783          	lw	a5,-24(s0)
80001390:	02e7ac23          	sw	a4,56(a5)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
80001394:	fe842783          	lw	a5,-24(s0)
80001398:	0487a703          	lw	a4,72(a5)
8000139c:	fff00793          	li	a5,-1
800013a0:	04f71063          	bne	a4,a5,800013e0 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
800013a4:	fe842783          	lw	a5,-24(s0)
800013a8:	0247a783          	lw	a5,36(a5)
800013ac:	04078463          	beqz	a5,800013f4 <xQueueGiveFromISR+0x108>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
800013b0:	fe842783          	lw	a5,-24(s0)
800013b4:	02478793          	addi	a5,a5,36
800013b8:	00078513          	mv	a0,a5
800013bc:	6b4020ef          	jal	ra,80003a70 <xTaskRemoveFromEventList>
800013c0:	00050793          	mv	a5,a0
800013c4:	02078863          	beqz	a5,800013f4 <xQueueGiveFromISR+0x108>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
800013c8:	fd842783          	lw	a5,-40(s0)
800013cc:	02078463          	beqz	a5,800013f4 <xQueueGiveFromISR+0x108>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
800013d0:	fd842783          	lw	a5,-40(s0)
800013d4:	00100713          	li	a4,1
800013d8:	00e7a023          	sw	a4,0(a5)
800013dc:	0180006f          	j	800013f4 <xQueueGiveFromISR+0x108>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
800013e0:	fe842783          	lw	a5,-24(s0)
800013e4:	0487a783          	lw	a5,72(a5)
800013e8:	00178713          	addi	a4,a5,1
800013ec:	fe842783          	lw	a5,-24(s0)
800013f0:	04e7a423          	sw	a4,72(a5)
			}

			xReturn = pdPASS;
800013f4:	00100793          	li	a5,1
800013f8:	fef42623          	sw	a5,-20(s0)
800013fc:	0080006f          	j	80001404 <xQueueGiveFromISR+0x118>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
80001400:	fe042623          	sw	zero,-20(s0)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
80001404:	fe442783          	lw	a5,-28(s0)
80001408:	00078513          	mv	a0,a5
8000140c:	aa0ff0ef          	jal	ra,800006ac <vPortClearInterruptMask>

	return xReturn;
80001410:	fec42783          	lw	a5,-20(s0)
}
80001414:	00078513          	mv	a0,a5
80001418:	02c12083          	lw	ra,44(sp)
8000141c:	02812403          	lw	s0,40(sp)
80001420:	03010113          	addi	sp,sp,48
80001424:	00008067          	ret

80001428 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
80001428:	fc010113          	addi	sp,sp,-64
8000142c:	02112e23          	sw	ra,60(sp)
80001430:	02812c23          	sw	s0,56(sp)
80001434:	04010413          	addi	s0,sp,64
80001438:	fca42623          	sw	a0,-52(s0)
8000143c:	fcb42423          	sw	a1,-56(s0)
80001440:	fcc42223          	sw	a2,-60(s0)
80001444:	fcd42023          	sw	a3,-64(s0)
BaseType_t xEntryTimeSet = pdFALSE;
80001448:	fe042623          	sw	zero,-20(s0)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
8000144c:	fcc42783          	lw	a5,-52(s0)
80001450:	fef42423          	sw	a5,-24(s0)

	configASSERT( pxQueue );
80001454:	fe842783          	lw	a5,-24(s0)
80001458:	00079663          	bnez	a5,80001464 <xQueueGenericReceive+0x3c>
8000145c:	30007073          	csrci	mstatus,0
80001460:	0000006f          	j	80001460 <xQueueGenericReceive+0x38>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
80001464:	fc842783          	lw	a5,-56(s0)
80001468:	00079863          	bnez	a5,80001478 <xQueueGenericReceive+0x50>
8000146c:	fe842783          	lw	a5,-24(s0)
80001470:	0407a783          	lw	a5,64(a5)
80001474:	00079663          	bnez	a5,80001480 <xQueueGenericReceive+0x58>
80001478:	00100793          	li	a5,1
8000147c:	0080006f          	j	80001484 <xQueueGenericReceive+0x5c>
80001480:	00000793          	li	a5,0
80001484:	00079663          	bnez	a5,80001490 <xQueueGenericReceive+0x68>
80001488:	30007073          	csrci	mstatus,0
8000148c:	0000006f          	j	8000148c <xQueueGenericReceive+0x64>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
80001490:	260030ef          	jal	ra,800046f0 <xTaskGetSchedulerState>
80001494:	00050793          	mv	a5,a0
80001498:	00079663          	bnez	a5,800014a4 <xQueueGenericReceive+0x7c>
8000149c:	fc442783          	lw	a5,-60(s0)
800014a0:	00079663          	bnez	a5,800014ac <xQueueGenericReceive+0x84>
800014a4:	00100793          	li	a5,1
800014a8:	0080006f          	j	800014b0 <xQueueGenericReceive+0x88>
800014ac:	00000793          	li	a5,0
800014b0:	00079663          	bnez	a5,800014bc <xQueueGenericReceive+0x94>
800014b4:	30007073          	csrci	mstatus,0
800014b8:	0000006f          	j	800014b8 <xQueueGenericReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
800014bc:	540030ef          	jal	ra,800049fc <vTaskEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
800014c0:	fe842783          	lw	a5,-24(s0)
800014c4:	0387a783          	lw	a5,56(a5)
800014c8:	0c078263          	beqz	a5,8000158c <xQueueGenericReceive+0x164>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
800014cc:	fe842783          	lw	a5,-24(s0)
800014d0:	00c7a783          	lw	a5,12(a5)
800014d4:	fef42223          	sw	a5,-28(s0)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
800014d8:	fc842583          	lw	a1,-56(s0)
800014dc:	fe842503          	lw	a0,-24(s0)
800014e0:	734000ef          	jal	ra,80001c14 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
800014e4:	fc042783          	lw	a5,-64(s0)
800014e8:	06079263          	bnez	a5,8000154c <xQueueGenericReceive+0x124>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
800014ec:	fe842783          	lw	a5,-24(s0)
800014f0:	0387a783          	lw	a5,56(a5)
800014f4:	fff78713          	addi	a4,a5,-1
800014f8:	fe842783          	lw	a5,-24(s0)
800014fc:	02e7ac23          	sw	a4,56(a5)

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
80001500:	fe842783          	lw	a5,-24(s0)
80001504:	0007a783          	lw	a5,0(a5)
80001508:	00079a63          	bnez	a5,8000151c <xQueueGenericReceive+0xf4>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
8000150c:	610030ef          	jal	ra,80004b1c <pvTaskIncrementMutexHeldCount>
80001510:	00050713          	mv	a4,a0
80001514:	fe842783          	lw	a5,-24(s0)
80001518:	00e7a223          	sw	a4,4(a5)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
8000151c:	fe842783          	lw	a5,-24(s0)
80001520:	0107a783          	lw	a5,16(a5)
80001524:	04078e63          	beqz	a5,80001580 <xQueueGenericReceive+0x158>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
80001528:	fe842783          	lw	a5,-24(s0)
8000152c:	01078793          	addi	a5,a5,16
80001530:	00078513          	mv	a0,a5
80001534:	53c020ef          	jal	ra,80003a70 <xTaskRemoveFromEventList>
80001538:	00050713          	mv	a4,a0
8000153c:	00100793          	li	a5,1
80001540:	04f71063          	bne	a4,a5,80001580 <xQueueGenericReceive+0x158>
						{
							queueYIELD_IF_USING_PREEMPTION();
80001544:	f49fe0ef          	jal	ra,8000048c <vPortYield>
80001548:	0380006f          	j	80001580 <xQueueGenericReceive+0x158>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
8000154c:	fe842783          	lw	a5,-24(s0)
80001550:	fe442703          	lw	a4,-28(s0)
80001554:	00e7a623          	sw	a4,12(a5)

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80001558:	fe842783          	lw	a5,-24(s0)
8000155c:	0247a783          	lw	a5,36(a5)
80001560:	02078063          	beqz	a5,80001580 <xQueueGenericReceive+0x158>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80001564:	fe842783          	lw	a5,-24(s0)
80001568:	02478793          	addi	a5,a5,36
8000156c:	00078513          	mv	a0,a5
80001570:	500020ef          	jal	ra,80003a70 <xTaskRemoveFromEventList>
80001574:	00050793          	mv	a5,a0
80001578:	00078463          	beqz	a5,80001580 <xQueueGenericReceive+0x158>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
8000157c:	f11fe0ef          	jal	ra,8000048c <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
80001580:	4d0030ef          	jal	ra,80004a50 <vTaskExitCritical>
				return pdPASS;
80001584:	00100793          	li	a5,1
80001588:	1180006f          	j	800016a0 <xQueueGenericReceive+0x278>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
8000158c:	fc442783          	lw	a5,-60(s0)
80001590:	00079863          	bnez	a5,800015a0 <xQueueGenericReceive+0x178>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
80001594:	4bc030ef          	jal	ra,80004a50 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
80001598:	00000793          	li	a5,0
8000159c:	1040006f          	j	800016a0 <xQueueGenericReceive+0x278>
				}
				else if( xEntryTimeSet == pdFALSE )
800015a0:	fec42783          	lw	a5,-20(s0)
800015a4:	00079c63          	bnez	a5,800015bc <xQueueGenericReceive+0x194>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
800015a8:	fdc40793          	addi	a5,s0,-36
800015ac:	00078513          	mv	a0,a5
800015b0:	728020ef          	jal	ra,80003cd8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
800015b4:	00100793          	li	a5,1
800015b8:	fef42623          	sw	a5,-20(s0)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
800015bc:	494030ef          	jal	ra,80004a50 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
800015c0:	145010ef          	jal	ra,80002f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
800015c4:	438030ef          	jal	ra,800049fc <vTaskEnterCritical>
800015c8:	fe842783          	lw	a5,-24(s0)
800015cc:	0447a703          	lw	a4,68(a5)
800015d0:	fff00793          	li	a5,-1
800015d4:	00f71663          	bne	a4,a5,800015e0 <xQueueGenericReceive+0x1b8>
800015d8:	fe842783          	lw	a5,-24(s0)
800015dc:	0407a223          	sw	zero,68(a5)
800015e0:	fe842783          	lw	a5,-24(s0)
800015e4:	0487a703          	lw	a4,72(a5)
800015e8:	fff00793          	li	a5,-1
800015ec:	00f71663          	bne	a4,a5,800015f8 <xQueueGenericReceive+0x1d0>
800015f0:	fe842783          	lw	a5,-24(s0)
800015f4:	0407a423          	sw	zero,72(a5)
800015f8:	458030ef          	jal	ra,80004a50 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
800015fc:	fc440713          	addi	a4,s0,-60
80001600:	fdc40793          	addi	a5,s0,-36
80001604:	00070593          	mv	a1,a4
80001608:	00078513          	mv	a0,a5
8000160c:	724020ef          	jal	ra,80003d30 <xTaskCheckForTimeOut>
80001610:	00050793          	mv	a5,a0
80001614:	06079e63          	bnez	a5,80001690 <xQueueGenericReceive+0x268>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
80001618:	fe842503          	lw	a0,-24(s0)
8000161c:	788000ef          	jal	ra,80001da4 <prvIsQueueEmpty>
80001620:	00050793          	mv	a5,a0
80001624:	04078e63          	beqz	a5,80001680 <xQueueGenericReceive+0x258>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
80001628:	fe842783          	lw	a5,-24(s0)
8000162c:	0007a783          	lw	a5,0(a5)
80001630:	00079e63          	bnez	a5,8000164c <xQueueGenericReceive+0x224>
					{
						taskENTER_CRITICAL();
80001634:	3c8030ef          	jal	ra,800049fc <vTaskEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
80001638:	fe842783          	lw	a5,-24(s0)
8000163c:	0047a783          	lw	a5,4(a5)
80001640:	00078513          	mv	a0,a5
80001644:	108030ef          	jal	ra,8000474c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
80001648:	408030ef          	jal	ra,80004a50 <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
8000164c:	fe842783          	lw	a5,-24(s0)
80001650:	02478793          	addi	a5,a5,36
80001654:	fc442703          	lw	a4,-60(s0)
80001658:	00070593          	mv	a1,a4
8000165c:	00078513          	mv	a0,a5
80001660:	194020ef          	jal	ra,800037f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
80001664:	fe842503          	lw	a0,-24(s0)
80001668:	644000ef          	jal	ra,80001cac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
8000166c:	0d1010ef          	jal	ra,80002f3c <xTaskResumeAll>
80001670:	00050793          	mv	a5,a0
80001674:	e40794e3          	bnez	a5,800014bc <xQueueGenericReceive+0x94>
				{
					portYIELD_WITHIN_API();
80001678:	e15fe0ef          	jal	ra,8000048c <vPortYield>
8000167c:	e41ff06f          	j	800014bc <xQueueGenericReceive+0x94>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
80001680:	fe842503          	lw	a0,-24(s0)
80001684:	628000ef          	jal	ra,80001cac <prvUnlockQueue>
				( void ) xTaskResumeAll();
80001688:	0b5010ef          	jal	ra,80002f3c <xTaskResumeAll>
8000168c:	e31ff06f          	j	800014bc <xQueueGenericReceive+0x94>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
80001690:	fe842503          	lw	a0,-24(s0)
80001694:	618000ef          	jal	ra,80001cac <prvUnlockQueue>
			( void ) xTaskResumeAll();
80001698:	0a5010ef          	jal	ra,80002f3c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
8000169c:	00000793          	li	a5,0
		}
	}
}
800016a0:	00078513          	mv	a0,a5
800016a4:	03c12083          	lw	ra,60(sp)
800016a8:	03812403          	lw	s0,56(sp)
800016ac:	04010113          	addi	sp,sp,64
800016b0:	00008067          	ret

800016b4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
800016b4:	fd010113          	addi	sp,sp,-48
800016b8:	02112623          	sw	ra,44(sp)
800016bc:	02812423          	sw	s0,40(sp)
800016c0:	03010413          	addi	s0,sp,48
800016c4:	fca42e23          	sw	a0,-36(s0)
800016c8:	fcb42c23          	sw	a1,-40(s0)
800016cc:	fcc42a23          	sw	a2,-44(s0)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
800016d0:	fdc42783          	lw	a5,-36(s0)
800016d4:	fef42423          	sw	a5,-24(s0)

	configASSERT( pxQueue );
800016d8:	fe842783          	lw	a5,-24(s0)
800016dc:	00079663          	bnez	a5,800016e8 <xQueueReceiveFromISR+0x34>
800016e0:	30007073          	csrci	mstatus,0
800016e4:	0000006f          	j	800016e4 <xQueueReceiveFromISR+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
800016e8:	fd842783          	lw	a5,-40(s0)
800016ec:	00079863          	bnez	a5,800016fc <xQueueReceiveFromISR+0x48>
800016f0:	fe842783          	lw	a5,-24(s0)
800016f4:	0407a783          	lw	a5,64(a5)
800016f8:	00079663          	bnez	a5,80001704 <xQueueReceiveFromISR+0x50>
800016fc:	00100793          	li	a5,1
80001700:	0080006f          	j	80001708 <xQueueReceiveFromISR+0x54>
80001704:	00000793          	li	a5,0
80001708:	00079663          	bnez	a5,80001714 <xQueueReceiveFromISR+0x60>
8000170c:	30007073          	csrci	mstatus,0
80001710:	0000006f          	j	80001710 <xQueueReceiveFromISR+0x5c>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80001714:	fc1fe0ef          	jal	ra,800006d4 <vPortSetInterruptMask>
80001718:	00050793          	mv	a5,a0
8000171c:	fef42223          	sw	a5,-28(s0)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
80001720:	fe842783          	lw	a5,-24(s0)
80001724:	0387a783          	lw	a5,56(a5)
80001728:	08078863          	beqz	a5,800017b8 <xQueueReceiveFromISR+0x104>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
8000172c:	fd842583          	lw	a1,-40(s0)
80001730:	fe842503          	lw	a0,-24(s0)
80001734:	4e0000ef          	jal	ra,80001c14 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
80001738:	fe842783          	lw	a5,-24(s0)
8000173c:	0387a783          	lw	a5,56(a5)
80001740:	fff78713          	addi	a4,a5,-1
80001744:	fe842783          	lw	a5,-24(s0)
80001748:	02e7ac23          	sw	a4,56(a5)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
8000174c:	fe842783          	lw	a5,-24(s0)
80001750:	0447a703          	lw	a4,68(a5)
80001754:	fff00793          	li	a5,-1
80001758:	04f71063          	bne	a4,a5,80001798 <xQueueReceiveFromISR+0xe4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
8000175c:	fe842783          	lw	a5,-24(s0)
80001760:	0107a783          	lw	a5,16(a5)
80001764:	04078463          	beqz	a5,800017ac <xQueueReceiveFromISR+0xf8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
80001768:	fe842783          	lw	a5,-24(s0)
8000176c:	01078793          	addi	a5,a5,16
80001770:	00078513          	mv	a0,a5
80001774:	2fc020ef          	jal	ra,80003a70 <xTaskRemoveFromEventList>
80001778:	00050793          	mv	a5,a0
8000177c:	02078863          	beqz	a5,800017ac <xQueueReceiveFromISR+0xf8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
80001780:	fd442783          	lw	a5,-44(s0)
80001784:	02078463          	beqz	a5,800017ac <xQueueReceiveFromISR+0xf8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
80001788:	fd442783          	lw	a5,-44(s0)
8000178c:	00100713          	li	a4,1
80001790:	00e7a023          	sw	a4,0(a5)
80001794:	0180006f          	j	800017ac <xQueueReceiveFromISR+0xf8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
80001798:	fe842783          	lw	a5,-24(s0)
8000179c:	0447a783          	lw	a5,68(a5)
800017a0:	00178713          	addi	a4,a5,1
800017a4:	fe842783          	lw	a5,-24(s0)
800017a8:	04e7a223          	sw	a4,68(a5)
			}

			xReturn = pdPASS;
800017ac:	00100793          	li	a5,1
800017b0:	fef42623          	sw	a5,-20(s0)
800017b4:	0080006f          	j	800017bc <xQueueReceiveFromISR+0x108>
		}
		else
		{
			xReturn = pdFAIL;
800017b8:	fe042623          	sw	zero,-20(s0)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
800017bc:	fe442783          	lw	a5,-28(s0)
800017c0:	00078513          	mv	a0,a5
800017c4:	ee9fe0ef          	jal	ra,800006ac <vPortClearInterruptMask>

	return xReturn;
800017c8:	fec42783          	lw	a5,-20(s0)
}
800017cc:	00078513          	mv	a0,a5
800017d0:	02c12083          	lw	ra,44(sp)
800017d4:	02812403          	lw	s0,40(sp)
800017d8:	03010113          	addi	sp,sp,48
800017dc:	00008067          	ret

800017e0 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
800017e0:	fd010113          	addi	sp,sp,-48
800017e4:	02112623          	sw	ra,44(sp)
800017e8:	02812423          	sw	s0,40(sp)
800017ec:	03010413          	addi	s0,sp,48
800017f0:	fca42e23          	sw	a0,-36(s0)
800017f4:	fcb42c23          	sw	a1,-40(s0)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
800017f8:	fdc42783          	lw	a5,-36(s0)
800017fc:	fef42423          	sw	a5,-24(s0)

	configASSERT( pxQueue );
80001800:	fe842783          	lw	a5,-24(s0)
80001804:	00079663          	bnez	a5,80001810 <xQueuePeekFromISR+0x30>
80001808:	30007073          	csrci	mstatus,0
8000180c:	0000006f          	j	8000180c <xQueuePeekFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
80001810:	fd842783          	lw	a5,-40(s0)
80001814:	00079863          	bnez	a5,80001824 <xQueuePeekFromISR+0x44>
80001818:	fe842783          	lw	a5,-24(s0)
8000181c:	0407a783          	lw	a5,64(a5)
80001820:	00079663          	bnez	a5,8000182c <xQueuePeekFromISR+0x4c>
80001824:	00100793          	li	a5,1
80001828:	0080006f          	j	80001830 <xQueuePeekFromISR+0x50>
8000182c:	00000793          	li	a5,0
80001830:	00079663          	bnez	a5,8000183c <xQueuePeekFromISR+0x5c>
80001834:	30007073          	csrci	mstatus,0
80001838:	0000006f          	j	80001838 <xQueuePeekFromISR+0x58>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
8000183c:	fe842783          	lw	a5,-24(s0)
80001840:	0407a783          	lw	a5,64(a5)
80001844:	00079663          	bnez	a5,80001850 <xQueuePeekFromISR+0x70>
80001848:	30007073          	csrci	mstatus,0
8000184c:	0000006f          	j	8000184c <xQueuePeekFromISR+0x6c>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80001850:	e85fe0ef          	jal	ra,800006d4 <vPortSetInterruptMask>
80001854:	00050793          	mv	a5,a0
80001858:	fef42223          	sw	a5,-28(s0)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
8000185c:	fe842783          	lw	a5,-24(s0)
80001860:	0387a783          	lw	a5,56(a5)
80001864:	02078a63          	beqz	a5,80001898 <xQueuePeekFromISR+0xb8>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
80001868:	fe842783          	lw	a5,-24(s0)
8000186c:	00c7a783          	lw	a5,12(a5)
80001870:	fef42023          	sw	a5,-32(s0)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
80001874:	fd842583          	lw	a1,-40(s0)
80001878:	fe842503          	lw	a0,-24(s0)
8000187c:	398000ef          	jal	ra,80001c14 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
80001880:	fe842783          	lw	a5,-24(s0)
80001884:	fe042703          	lw	a4,-32(s0)
80001888:	00e7a623          	sw	a4,12(a5)

			xReturn = pdPASS;
8000188c:	00100793          	li	a5,1
80001890:	fef42623          	sw	a5,-20(s0)
80001894:	0080006f          	j	8000189c <xQueuePeekFromISR+0xbc>
		}
		else
		{
			xReturn = pdFAIL;
80001898:	fe042623          	sw	zero,-20(s0)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
8000189c:	fe442783          	lw	a5,-28(s0)
800018a0:	00078513          	mv	a0,a5
800018a4:	e09fe0ef          	jal	ra,800006ac <vPortClearInterruptMask>

	return xReturn;
800018a8:	fec42783          	lw	a5,-20(s0)
}
800018ac:	00078513          	mv	a0,a5
800018b0:	02c12083          	lw	ra,44(sp)
800018b4:	02812403          	lw	s0,40(sp)
800018b8:	03010113          	addi	sp,sp,48
800018bc:	00008067          	ret

800018c0 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
800018c0:	fd010113          	addi	sp,sp,-48
800018c4:	02112623          	sw	ra,44(sp)
800018c8:	02812423          	sw	s0,40(sp)
800018cc:	03010413          	addi	s0,sp,48
800018d0:	fca42e23          	sw	a0,-36(s0)
UBaseType_t uxReturn;

	configASSERT( xQueue );
800018d4:	fdc42783          	lw	a5,-36(s0)
800018d8:	00079663          	bnez	a5,800018e4 <uxQueueMessagesWaiting+0x24>
800018dc:	30007073          	csrci	mstatus,0
800018e0:	0000006f          	j	800018e0 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
800018e4:	118030ef          	jal	ra,800049fc <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
800018e8:	fdc42783          	lw	a5,-36(s0)
800018ec:	0387a783          	lw	a5,56(a5)
800018f0:	fef42623          	sw	a5,-20(s0)
	}
	taskEXIT_CRITICAL();
800018f4:	15c030ef          	jal	ra,80004a50 <vTaskExitCritical>

	return uxReturn;
800018f8:	fec42783          	lw	a5,-20(s0)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
800018fc:	00078513          	mv	a0,a5
80001900:	02c12083          	lw	ra,44(sp)
80001904:	02812403          	lw	s0,40(sp)
80001908:	03010113          	addi	sp,sp,48
8000190c:	00008067          	ret

80001910 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
80001910:	fd010113          	addi	sp,sp,-48
80001914:	02112623          	sw	ra,44(sp)
80001918:	02812423          	sw	s0,40(sp)
8000191c:	03010413          	addi	s0,sp,48
80001920:	fca42e23          	sw	a0,-36(s0)
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
80001924:	fdc42783          	lw	a5,-36(s0)
80001928:	fef42623          	sw	a5,-20(s0)
	configASSERT( pxQueue );
8000192c:	fec42783          	lw	a5,-20(s0)
80001930:	00079663          	bnez	a5,8000193c <uxQueueSpacesAvailable+0x2c>
80001934:	30007073          	csrci	mstatus,0
80001938:	0000006f          	j	80001938 <uxQueueSpacesAvailable+0x28>

	taskENTER_CRITICAL();
8000193c:	0c0030ef          	jal	ra,800049fc <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
80001940:	fec42783          	lw	a5,-20(s0)
80001944:	03c7a703          	lw	a4,60(a5)
80001948:	fec42783          	lw	a5,-20(s0)
8000194c:	0387a783          	lw	a5,56(a5)
80001950:	40f707b3          	sub	a5,a4,a5
80001954:	fef42423          	sw	a5,-24(s0)
	}
	taskEXIT_CRITICAL();
80001958:	0f8030ef          	jal	ra,80004a50 <vTaskExitCritical>

	return uxReturn;
8000195c:	fe842783          	lw	a5,-24(s0)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
80001960:	00078513          	mv	a0,a5
80001964:	02c12083          	lw	ra,44(sp)
80001968:	02812403          	lw	s0,40(sp)
8000196c:	03010113          	addi	sp,sp,48
80001970:	00008067          	ret

80001974 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
80001974:	fd010113          	addi	sp,sp,-48
80001978:	02812623          	sw	s0,44(sp)
8000197c:	03010413          	addi	s0,sp,48
80001980:	fca42e23          	sw	a0,-36(s0)
UBaseType_t uxReturn;

	configASSERT( xQueue );
80001984:	fdc42783          	lw	a5,-36(s0)
80001988:	00079663          	bnez	a5,80001994 <uxQueueMessagesWaitingFromISR+0x20>
8000198c:	30007073          	csrci	mstatus,0
80001990:	0000006f          	j	80001990 <uxQueueMessagesWaitingFromISR+0x1c>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
80001994:	fdc42783          	lw	a5,-36(s0)
80001998:	0387a783          	lw	a5,56(a5)
8000199c:	fef42623          	sw	a5,-20(s0)

	return uxReturn;
800019a0:	fec42783          	lw	a5,-20(s0)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
800019a4:	00078513          	mv	a0,a5
800019a8:	02c12403          	lw	s0,44(sp)
800019ac:	03010113          	addi	sp,sp,48
800019b0:	00008067          	ret

800019b4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
800019b4:	fd010113          	addi	sp,sp,-48
800019b8:	02112623          	sw	ra,44(sp)
800019bc:	02812423          	sw	s0,40(sp)
800019c0:	03010413          	addi	s0,sp,48
800019c4:	fca42e23          	sw	a0,-36(s0)
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
800019c8:	fdc42783          	lw	a5,-36(s0)
800019cc:	fef42623          	sw	a5,-20(s0)

	configASSERT( pxQueue );
800019d0:	fec42783          	lw	a5,-20(s0)
800019d4:	00079663          	bnez	a5,800019e0 <vQueueDelete+0x2c>
800019d8:	30007073          	csrci	mstatus,0
800019dc:	0000006f          	j	800019dc <vQueueDelete+0x28>

	traceQUEUE_DELETE( pxQueue );
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
800019e0:	fec42503          	lw	a0,-20(s0)
800019e4:	5ac000ef          	jal	ra,80001f90 <vQueueUnregisterQueue>
	}
	#endif
	vPortFree( pxQueue );
800019e8:	fec42503          	lw	a0,-20(s0)
800019ec:	02c050ef          	jal	ra,80006a18 <vPortFree>
}
800019f0:	00000013          	nop
800019f4:	02c12083          	lw	ra,44(sp)
800019f8:	02812403          	lw	s0,40(sp)
800019fc:	03010113          	addi	sp,sp,48
80001a00:	00008067          	ret

80001a04 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
80001a04:	fe010113          	addi	sp,sp,-32
80001a08:	00812e23          	sw	s0,28(sp)
80001a0c:	02010413          	addi	s0,sp,32
80001a10:	fea42623          	sw	a0,-20(s0)
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
80001a14:	fec42783          	lw	a5,-20(s0)
80001a18:	04c7a783          	lw	a5,76(a5)
	}
80001a1c:	00078513          	mv	a0,a5
80001a20:	01c12403          	lw	s0,28(sp)
80001a24:	02010113          	addi	sp,sp,32
80001a28:	00008067          	ret

80001a2c <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
80001a2c:	fe010113          	addi	sp,sp,-32
80001a30:	00812e23          	sw	s0,28(sp)
80001a34:	02010413          	addi	s0,sp,32
80001a38:	fea42623          	sw	a0,-20(s0)
80001a3c:	feb42423          	sw	a1,-24(s0)
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
80001a40:	fec42783          	lw	a5,-20(s0)
80001a44:	fe842703          	lw	a4,-24(s0)
80001a48:	04e7a623          	sw	a4,76(a5)
	}
80001a4c:	00000013          	nop
80001a50:	01c12403          	lw	s0,28(sp)
80001a54:	02010113          	addi	sp,sp,32
80001a58:	00008067          	ret

80001a5c <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
80001a5c:	fe010113          	addi	sp,sp,-32
80001a60:	00812e23          	sw	s0,28(sp)
80001a64:	02010413          	addi	s0,sp,32
80001a68:	fea42623          	sw	a0,-20(s0)
		return ( ( Queue_t * ) xQueue )->ucQueueType;
80001a6c:	fec42783          	lw	a5,-20(s0)
80001a70:	0507c783          	lbu	a5,80(a5)
	}
80001a74:	00078513          	mv	a0,a5
80001a78:	01c12403          	lw	s0,28(sp)
80001a7c:	02010113          	addi	sp,sp,32
80001a80:	00008067          	ret

80001a84 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
80001a84:	fd010113          	addi	sp,sp,-48
80001a88:	02112623          	sw	ra,44(sp)
80001a8c:	02812423          	sw	s0,40(sp)
80001a90:	03010413          	addi	s0,sp,48
80001a94:	fca42e23          	sw	a0,-36(s0)
80001a98:	fcb42c23          	sw	a1,-40(s0)
80001a9c:	fcc42a23          	sw	a2,-44(s0)
BaseType_t xReturn = pdFALSE;
80001aa0:	fe042623          	sw	zero,-20(s0)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
80001aa4:	fdc42783          	lw	a5,-36(s0)
80001aa8:	0407a783          	lw	a5,64(a5)
80001aac:	02079863          	bnez	a5,80001adc <prvCopyDataToQueue+0x58>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
80001ab0:	fdc42783          	lw	a5,-36(s0)
80001ab4:	0007a783          	lw	a5,0(a5)
80001ab8:	12079863          	bnez	a5,80001be8 <prvCopyDataToQueue+0x164>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
80001abc:	fdc42783          	lw	a5,-36(s0)
80001ac0:	0047a783          	lw	a5,4(a5)
80001ac4:	00078513          	mv	a0,a5
80001ac8:	5ed020ef          	jal	ra,800048b4 <xTaskPriorityDisinherit>
80001acc:	fea42623          	sw	a0,-20(s0)
				pxQueue->pxMutexHolder = NULL;
80001ad0:	fdc42783          	lw	a5,-36(s0)
80001ad4:	0007a223          	sw	zero,4(a5)
80001ad8:	1100006f          	j	80001be8 <prvCopyDataToQueue+0x164>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
80001adc:	fd442783          	lw	a5,-44(s0)
80001ae0:	06079463          	bnez	a5,80001b48 <prvCopyDataToQueue+0xc4>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
80001ae4:	fdc42783          	lw	a5,-36(s0)
80001ae8:	0087a703          	lw	a4,8(a5)
80001aec:	fdc42783          	lw	a5,-36(s0)
80001af0:	0407a783          	lw	a5,64(a5)
80001af4:	00078613          	mv	a2,a5
80001af8:	fd842583          	lw	a1,-40(s0)
80001afc:	00070513          	mv	a0,a4
80001b00:	245060ef          	jal	ra,80008544 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
80001b04:	fdc42783          	lw	a5,-36(s0)
80001b08:	0087a703          	lw	a4,8(a5)
80001b0c:	fdc42783          	lw	a5,-36(s0)
80001b10:	0407a783          	lw	a5,64(a5)
80001b14:	00f70733          	add	a4,a4,a5
80001b18:	fdc42783          	lw	a5,-36(s0)
80001b1c:	00e7a423          	sw	a4,8(a5)
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
80001b20:	fdc42783          	lw	a5,-36(s0)
80001b24:	0087a703          	lw	a4,8(a5)
80001b28:	fdc42783          	lw	a5,-36(s0)
80001b2c:	0047a783          	lw	a5,4(a5)
80001b30:	0af76c63          	bltu	a4,a5,80001be8 <prvCopyDataToQueue+0x164>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
80001b34:	fdc42783          	lw	a5,-36(s0)
80001b38:	0007a703          	lw	a4,0(a5)
80001b3c:	fdc42783          	lw	a5,-36(s0)
80001b40:	00e7a423          	sw	a4,8(a5)
80001b44:	0a40006f          	j	80001be8 <prvCopyDataToQueue+0x164>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80001b48:	fdc42783          	lw	a5,-36(s0)
80001b4c:	00c7a703          	lw	a4,12(a5)
80001b50:	fdc42783          	lw	a5,-36(s0)
80001b54:	0407a783          	lw	a5,64(a5)
80001b58:	00078613          	mv	a2,a5
80001b5c:	fd842583          	lw	a1,-40(s0)
80001b60:	00070513          	mv	a0,a4
80001b64:	1e1060ef          	jal	ra,80008544 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
80001b68:	fdc42783          	lw	a5,-36(s0)
80001b6c:	00c7a703          	lw	a4,12(a5)
80001b70:	fdc42783          	lw	a5,-36(s0)
80001b74:	0407a783          	lw	a5,64(a5)
80001b78:	40f007b3          	neg	a5,a5
80001b7c:	00f70733          	add	a4,a4,a5
80001b80:	fdc42783          	lw	a5,-36(s0)
80001b84:	00e7a623          	sw	a4,12(a5)
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
80001b88:	fdc42783          	lw	a5,-36(s0)
80001b8c:	00c7a703          	lw	a4,12(a5)
80001b90:	fdc42783          	lw	a5,-36(s0)
80001b94:	0007a783          	lw	a5,0(a5)
80001b98:	02f77263          	bleu	a5,a4,80001bbc <prvCopyDataToQueue+0x138>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
80001b9c:	fdc42783          	lw	a5,-36(s0)
80001ba0:	0047a703          	lw	a4,4(a5)
80001ba4:	fdc42783          	lw	a5,-36(s0)
80001ba8:	0407a783          	lw	a5,64(a5)
80001bac:	40f007b3          	neg	a5,a5
80001bb0:	00f70733          	add	a4,a4,a5
80001bb4:	fdc42783          	lw	a5,-36(s0)
80001bb8:	00e7a623          	sw	a4,12(a5)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
80001bbc:	fd442703          	lw	a4,-44(s0)
80001bc0:	00200793          	li	a5,2
80001bc4:	02f71263          	bne	a4,a5,80001be8 <prvCopyDataToQueue+0x164>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
80001bc8:	fdc42783          	lw	a5,-36(s0)
80001bcc:	0387a783          	lw	a5,56(a5)
80001bd0:	00078c63          	beqz	a5,80001be8 <prvCopyDataToQueue+0x164>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
80001bd4:	fdc42783          	lw	a5,-36(s0)
80001bd8:	0387a783          	lw	a5,56(a5)
80001bdc:	fff78713          	addi	a4,a5,-1
80001be0:	fdc42783          	lw	a5,-36(s0)
80001be4:	02e7ac23          	sw	a4,56(a5)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
80001be8:	fdc42783          	lw	a5,-36(s0)
80001bec:	0387a783          	lw	a5,56(a5)
80001bf0:	00178713          	addi	a4,a5,1
80001bf4:	fdc42783          	lw	a5,-36(s0)
80001bf8:	02e7ac23          	sw	a4,56(a5)

	return xReturn;
80001bfc:	fec42783          	lw	a5,-20(s0)
}
80001c00:	00078513          	mv	a0,a5
80001c04:	02c12083          	lw	ra,44(sp)
80001c08:	02812403          	lw	s0,40(sp)
80001c0c:	03010113          	addi	sp,sp,48
80001c10:	00008067          	ret

80001c14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
80001c14:	fe010113          	addi	sp,sp,-32
80001c18:	00112e23          	sw	ra,28(sp)
80001c1c:	00812c23          	sw	s0,24(sp)
80001c20:	02010413          	addi	s0,sp,32
80001c24:	fea42623          	sw	a0,-20(s0)
80001c28:	feb42423          	sw	a1,-24(s0)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
80001c2c:	fec42783          	lw	a5,-20(s0)
80001c30:	0407a783          	lw	a5,64(a5)
80001c34:	06078263          	beqz	a5,80001c98 <prvCopyDataFromQueue+0x84>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
80001c38:	fec42783          	lw	a5,-20(s0)
80001c3c:	00c7a703          	lw	a4,12(a5)
80001c40:	fec42783          	lw	a5,-20(s0)
80001c44:	0407a783          	lw	a5,64(a5)
80001c48:	00f70733          	add	a4,a4,a5
80001c4c:	fec42783          	lw	a5,-20(s0)
80001c50:	00e7a623          	sw	a4,12(a5)
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
80001c54:	fec42783          	lw	a5,-20(s0)
80001c58:	00c7a703          	lw	a4,12(a5)
80001c5c:	fec42783          	lw	a5,-20(s0)
80001c60:	0047a783          	lw	a5,4(a5)
80001c64:	00f76a63          	bltu	a4,a5,80001c78 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
80001c68:	fec42783          	lw	a5,-20(s0)
80001c6c:	0007a703          	lw	a4,0(a5)
80001c70:	fec42783          	lw	a5,-20(s0)
80001c74:	00e7a623          	sw	a4,12(a5)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
80001c78:	fec42783          	lw	a5,-20(s0)
80001c7c:	00c7a703          	lw	a4,12(a5)
80001c80:	fec42783          	lw	a5,-20(s0)
80001c84:	0407a783          	lw	a5,64(a5)
80001c88:	00078613          	mv	a2,a5
80001c8c:	00070593          	mv	a1,a4
80001c90:	fe842503          	lw	a0,-24(s0)
80001c94:	0b1060ef          	jal	ra,80008544 <memcpy>
	}
}
80001c98:	00000013          	nop
80001c9c:	01c12083          	lw	ra,28(sp)
80001ca0:	01812403          	lw	s0,24(sp)
80001ca4:	02010113          	addi	sp,sp,32
80001ca8:	00008067          	ret

80001cac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
80001cac:	fe010113          	addi	sp,sp,-32
80001cb0:	00112e23          	sw	ra,28(sp)
80001cb4:	00812c23          	sw	s0,24(sp)
80001cb8:	02010413          	addi	s0,sp,32
80001cbc:	fea42623          	sw	a0,-20(s0)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
80001cc0:	53d020ef          	jal	ra,800049fc <vTaskEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
80001cc4:	0400006f          	j	80001d04 <prvUnlockQueue+0x58>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80001cc8:	fec42783          	lw	a5,-20(s0)
80001ccc:	0247a783          	lw	a5,36(a5)
80001cd0:	04078263          	beqz	a5,80001d14 <prvUnlockQueue+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80001cd4:	fec42783          	lw	a5,-20(s0)
80001cd8:	02478793          	addi	a5,a5,36
80001cdc:	00078513          	mv	a0,a5
80001ce0:	591010ef          	jal	ra,80003a70 <xTaskRemoveFromEventList>
80001ce4:	00050793          	mv	a5,a0
80001ce8:	00078463          	beqz	a5,80001cf0 <prvUnlockQueue+0x44>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
80001cec:	150020ef          	jal	ra,80003e3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
80001cf0:	fec42783          	lw	a5,-20(s0)
80001cf4:	0487a783          	lw	a5,72(a5)
80001cf8:	fff78713          	addi	a4,a5,-1
80001cfc:	fec42783          	lw	a5,-20(s0)
80001d00:	04e7a423          	sw	a4,72(a5)
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
80001d04:	fec42783          	lw	a5,-20(s0)
80001d08:	0487a783          	lw	a5,72(a5)
80001d0c:	faf04ee3          	bgtz	a5,80001cc8 <prvUnlockQueue+0x1c>
80001d10:	0080006f          	j	80001d18 <prvUnlockQueue+0x6c>
					break;
80001d14:	00000013          	nop
		}

		pxQueue->xTxLock = queueUNLOCKED;
80001d18:	fec42783          	lw	a5,-20(s0)
80001d1c:	fff00713          	li	a4,-1
80001d20:	04e7a423          	sw	a4,72(a5)
	}
	taskEXIT_CRITICAL();
80001d24:	52d020ef          	jal	ra,80004a50 <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
80001d28:	4d5020ef          	jal	ra,800049fc <vTaskEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
80001d2c:	0400006f          	j	80001d6c <prvUnlockQueue+0xc0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
80001d30:	fec42783          	lw	a5,-20(s0)
80001d34:	0107a783          	lw	a5,16(a5)
80001d38:	04078263          	beqz	a5,80001d7c <prvUnlockQueue+0xd0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
80001d3c:	fec42783          	lw	a5,-20(s0)
80001d40:	01078793          	addi	a5,a5,16
80001d44:	00078513          	mv	a0,a5
80001d48:	529010ef          	jal	ra,80003a70 <xTaskRemoveFromEventList>
80001d4c:	00050793          	mv	a5,a0
80001d50:	00078463          	beqz	a5,80001d58 <prvUnlockQueue+0xac>
				{
					vTaskMissedYield();
80001d54:	0e8020ef          	jal	ra,80003e3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
80001d58:	fec42783          	lw	a5,-20(s0)
80001d5c:	0447a783          	lw	a5,68(a5)
80001d60:	fff78713          	addi	a4,a5,-1
80001d64:	fec42783          	lw	a5,-20(s0)
80001d68:	04e7a223          	sw	a4,68(a5)
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
80001d6c:	fec42783          	lw	a5,-20(s0)
80001d70:	0447a783          	lw	a5,68(a5)
80001d74:	faf04ee3          	bgtz	a5,80001d30 <prvUnlockQueue+0x84>
80001d78:	0080006f          	j	80001d80 <prvUnlockQueue+0xd4>
			}
			else
			{
				break;
80001d7c:	00000013          	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
80001d80:	fec42783          	lw	a5,-20(s0)
80001d84:	fff00713          	li	a4,-1
80001d88:	04e7a223          	sw	a4,68(a5)
	}
	taskEXIT_CRITICAL();
80001d8c:	4c5020ef          	jal	ra,80004a50 <vTaskExitCritical>
}
80001d90:	00000013          	nop
80001d94:	01c12083          	lw	ra,28(sp)
80001d98:	01812403          	lw	s0,24(sp)
80001d9c:	02010113          	addi	sp,sp,32
80001da0:	00008067          	ret

80001da4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
80001da4:	fd010113          	addi	sp,sp,-48
80001da8:	02112623          	sw	ra,44(sp)
80001dac:	02812423          	sw	s0,40(sp)
80001db0:	03010413          	addi	s0,sp,48
80001db4:	fca42e23          	sw	a0,-36(s0)
BaseType_t xReturn;

	taskENTER_CRITICAL();
80001db8:	445020ef          	jal	ra,800049fc <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
80001dbc:	fdc42783          	lw	a5,-36(s0)
80001dc0:	0387a783          	lw	a5,56(a5)
80001dc4:	00079863          	bnez	a5,80001dd4 <prvIsQueueEmpty+0x30>
		{
			xReturn = pdTRUE;
80001dc8:	00100793          	li	a5,1
80001dcc:	fef42623          	sw	a5,-20(s0)
80001dd0:	0080006f          	j	80001dd8 <prvIsQueueEmpty+0x34>
		}
		else
		{
			xReturn = pdFALSE;
80001dd4:	fe042623          	sw	zero,-20(s0)
		}
	}
	taskEXIT_CRITICAL();
80001dd8:	479020ef          	jal	ra,80004a50 <vTaskExitCritical>

	return xReturn;
80001ddc:	fec42783          	lw	a5,-20(s0)
}
80001de0:	00078513          	mv	a0,a5
80001de4:	02c12083          	lw	ra,44(sp)
80001de8:	02812403          	lw	s0,40(sp)
80001dec:	03010113          	addi	sp,sp,48
80001df0:	00008067          	ret

80001df4 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
80001df4:	fd010113          	addi	sp,sp,-48
80001df8:	02812623          	sw	s0,44(sp)
80001dfc:	03010413          	addi	s0,sp,48
80001e00:	fca42e23          	sw	a0,-36(s0)
BaseType_t xReturn;

	configASSERT( xQueue );
80001e04:	fdc42783          	lw	a5,-36(s0)
80001e08:	00079663          	bnez	a5,80001e14 <xQueueIsQueueEmptyFromISR+0x20>
80001e0c:	30007073          	csrci	mstatus,0
80001e10:	0000006f          	j	80001e10 <xQueueIsQueueEmptyFromISR+0x1c>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
80001e14:	fdc42783          	lw	a5,-36(s0)
80001e18:	0387a783          	lw	a5,56(a5)
80001e1c:	00079863          	bnez	a5,80001e2c <xQueueIsQueueEmptyFromISR+0x38>
	{
		xReturn = pdTRUE;
80001e20:	00100793          	li	a5,1
80001e24:	fef42623          	sw	a5,-20(s0)
80001e28:	0080006f          	j	80001e30 <xQueueIsQueueEmptyFromISR+0x3c>
	}
	else
	{
		xReturn = pdFALSE;
80001e2c:	fe042623          	sw	zero,-20(s0)
	}

	return xReturn;
80001e30:	fec42783          	lw	a5,-20(s0)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
80001e34:	00078513          	mv	a0,a5
80001e38:	02c12403          	lw	s0,44(sp)
80001e3c:	03010113          	addi	sp,sp,48
80001e40:	00008067          	ret

80001e44 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
80001e44:	fd010113          	addi	sp,sp,-48
80001e48:	02112623          	sw	ra,44(sp)
80001e4c:	02812423          	sw	s0,40(sp)
80001e50:	03010413          	addi	s0,sp,48
80001e54:	fca42e23          	sw	a0,-36(s0)
BaseType_t xReturn;

	taskENTER_CRITICAL();
80001e58:	3a5020ef          	jal	ra,800049fc <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
80001e5c:	fdc42783          	lw	a5,-36(s0)
80001e60:	0387a703          	lw	a4,56(a5)
80001e64:	fdc42783          	lw	a5,-36(s0)
80001e68:	03c7a783          	lw	a5,60(a5)
80001e6c:	00f71863          	bne	a4,a5,80001e7c <prvIsQueueFull+0x38>
		{
			xReturn = pdTRUE;
80001e70:	00100793          	li	a5,1
80001e74:	fef42623          	sw	a5,-20(s0)
80001e78:	0080006f          	j	80001e80 <prvIsQueueFull+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
80001e7c:	fe042623          	sw	zero,-20(s0)
		}
	}
	taskEXIT_CRITICAL();
80001e80:	3d1020ef          	jal	ra,80004a50 <vTaskExitCritical>

	return xReturn;
80001e84:	fec42783          	lw	a5,-20(s0)
}
80001e88:	00078513          	mv	a0,a5
80001e8c:	02c12083          	lw	ra,44(sp)
80001e90:	02812403          	lw	s0,40(sp)
80001e94:	03010113          	addi	sp,sp,48
80001e98:	00008067          	ret

80001e9c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
80001e9c:	fd010113          	addi	sp,sp,-48
80001ea0:	02812623          	sw	s0,44(sp)
80001ea4:	03010413          	addi	s0,sp,48
80001ea8:	fca42e23          	sw	a0,-36(s0)
BaseType_t xReturn;

	configASSERT( xQueue );
80001eac:	fdc42783          	lw	a5,-36(s0)
80001eb0:	00079663          	bnez	a5,80001ebc <xQueueIsQueueFullFromISR+0x20>
80001eb4:	30007073          	csrci	mstatus,0
80001eb8:	0000006f          	j	80001eb8 <xQueueIsQueueFullFromISR+0x1c>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
80001ebc:	fdc42783          	lw	a5,-36(s0)
80001ec0:	0387a703          	lw	a4,56(a5)
80001ec4:	fdc42783          	lw	a5,-36(s0)
80001ec8:	03c7a783          	lw	a5,60(a5)
80001ecc:	00f71863          	bne	a4,a5,80001edc <xQueueIsQueueFullFromISR+0x40>
	{
		xReturn = pdTRUE;
80001ed0:	00100793          	li	a5,1
80001ed4:	fef42623          	sw	a5,-20(s0)
80001ed8:	0080006f          	j	80001ee0 <xQueueIsQueueFullFromISR+0x44>
	}
	else
	{
		xReturn = pdFALSE;
80001edc:	fe042623          	sw	zero,-20(s0)
	}

	return xReturn;
80001ee0:	fec42783          	lw	a5,-20(s0)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
80001ee4:	00078513          	mv	a0,a5
80001ee8:	02c12403          	lw	s0,44(sp)
80001eec:	03010113          	addi	sp,sp,48
80001ef0:	00008067          	ret

80001ef4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
80001ef4:	fd010113          	addi	sp,sp,-48
80001ef8:	02812623          	sw	s0,44(sp)
80001efc:	03010413          	addi	s0,sp,48
80001f00:	fca42e23          	sw	a0,-36(s0)
80001f04:	fcb42c23          	sw	a1,-40(s0)
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
80001f08:	fe042623          	sw	zero,-20(s0)
80001f0c:	0680006f          	j	80001f74 <vQueueAddToRegistry+0x80>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
80001f10:	00039717          	auipc	a4,0x39
80001f14:	b1870713          	addi	a4,a4,-1256 # 8003aa28 <xQueueRegistry>
80001f18:	fec42783          	lw	a5,-20(s0)
80001f1c:	00379793          	slli	a5,a5,0x3
80001f20:	00f707b3          	add	a5,a4,a5
80001f24:	0007a783          	lw	a5,0(a5)
80001f28:	04079063          	bnez	a5,80001f68 <vQueueAddToRegistry+0x74>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
80001f2c:	00039717          	auipc	a4,0x39
80001f30:	afc70713          	addi	a4,a4,-1284 # 8003aa28 <xQueueRegistry>
80001f34:	fec42783          	lw	a5,-20(s0)
80001f38:	00379793          	slli	a5,a5,0x3
80001f3c:	00f707b3          	add	a5,a4,a5
80001f40:	fd842703          	lw	a4,-40(s0)
80001f44:	00e7a023          	sw	a4,0(a5)
				xQueueRegistry[ ux ].xHandle = xQueue;
80001f48:	00039717          	auipc	a4,0x39
80001f4c:	ae070713          	addi	a4,a4,-1312 # 8003aa28 <xQueueRegistry>
80001f50:	fec42783          	lw	a5,-20(s0)
80001f54:	00379793          	slli	a5,a5,0x3
80001f58:	00f707b3          	add	a5,a4,a5
80001f5c:	fdc42703          	lw	a4,-36(s0)
80001f60:	00e7a223          	sw	a4,4(a5)

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
80001f64:	01c0006f          	j	80001f80 <vQueueAddToRegistry+0x8c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
80001f68:	fec42783          	lw	a5,-20(s0)
80001f6c:	00178793          	addi	a5,a5,1
80001f70:	fef42623          	sw	a5,-20(s0)
80001f74:	fec42703          	lw	a4,-20(s0)
80001f78:	00700793          	li	a5,7
80001f7c:	f8e7fae3          	bleu	a4,a5,80001f10 <vQueueAddToRegistry+0x1c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
80001f80:	00000013          	nop
80001f84:	02c12403          	lw	s0,44(sp)
80001f88:	03010113          	addi	sp,sp,48
80001f8c:	00008067          	ret

80001f90 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
80001f90:	fd010113          	addi	sp,sp,-48
80001f94:	02812623          	sw	s0,44(sp)
80001f98:	03010413          	addi	s0,sp,48
80001f9c:	fca42e23          	sw	a0,-36(s0)
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
80001fa0:	fe042623          	sw	zero,-20(s0)
80001fa4:	04c0006f          	j	80001ff0 <vQueueUnregisterQueue+0x60>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
80001fa8:	00039717          	auipc	a4,0x39
80001fac:	a8070713          	addi	a4,a4,-1408 # 8003aa28 <xQueueRegistry>
80001fb0:	fec42783          	lw	a5,-20(s0)
80001fb4:	00379793          	slli	a5,a5,0x3
80001fb8:	00f707b3          	add	a5,a4,a5
80001fbc:	0047a783          	lw	a5,4(a5)
80001fc0:	fdc42703          	lw	a4,-36(s0)
80001fc4:	02f71063          	bne	a4,a5,80001fe4 <vQueueUnregisterQueue+0x54>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
80001fc8:	00039717          	auipc	a4,0x39
80001fcc:	a6070713          	addi	a4,a4,-1440 # 8003aa28 <xQueueRegistry>
80001fd0:	fec42783          	lw	a5,-20(s0)
80001fd4:	00379793          	slli	a5,a5,0x3
80001fd8:	00f707b3          	add	a5,a4,a5
80001fdc:	0007a023          	sw	zero,0(a5)
				break;
80001fe0:	01c0006f          	j	80001ffc <vQueueUnregisterQueue+0x6c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
80001fe4:	fec42783          	lw	a5,-20(s0)
80001fe8:	00178793          	addi	a5,a5,1
80001fec:	fef42623          	sw	a5,-20(s0)
80001ff0:	fec42703          	lw	a4,-20(s0)
80001ff4:	00700793          	li	a5,7
80001ff8:	fae7f8e3          	bleu	a4,a5,80001fa8 <vQueueUnregisterQueue+0x18>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
80001ffc:	00000013          	nop
80002000:	02c12403          	lw	s0,44(sp)
80002004:	03010113          	addi	sp,sp,48
80002008:	00008067          	ret

8000200c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
8000200c:	fd010113          	addi	sp,sp,-48
80002010:	02112623          	sw	ra,44(sp)
80002014:	02812423          	sw	s0,40(sp)
80002018:	03010413          	addi	s0,sp,48
8000201c:	fca42e23          	sw	a0,-36(s0)
80002020:	fcb42c23          	sw	a1,-40(s0)
80002024:	fcc42a23          	sw	a2,-44(s0)
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
80002028:	fdc42783          	lw	a5,-36(s0)
8000202c:	fef42623          	sw	a5,-20(s0)
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
80002030:	1cd020ef          	jal	ra,800049fc <vTaskEnterCritical>
80002034:	fec42783          	lw	a5,-20(s0)
80002038:	0447a703          	lw	a4,68(a5)
8000203c:	fff00793          	li	a5,-1
80002040:	00f71663          	bne	a4,a5,8000204c <vQueueWaitForMessageRestricted+0x40>
80002044:	fec42783          	lw	a5,-20(s0)
80002048:	0407a223          	sw	zero,68(a5)
8000204c:	fec42783          	lw	a5,-20(s0)
80002050:	0487a703          	lw	a4,72(a5)
80002054:	fff00793          	li	a5,-1
80002058:	00f71663          	bne	a4,a5,80002064 <vQueueWaitForMessageRestricted+0x58>
8000205c:	fec42783          	lw	a5,-20(s0)
80002060:	0407a423          	sw	zero,72(a5)
80002064:	1ed020ef          	jal	ra,80004a50 <vTaskExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
80002068:	fec42783          	lw	a5,-20(s0)
8000206c:	0387a783          	lw	a5,56(a5)
80002070:	00079e63          	bnez	a5,8000208c <vQueueWaitForMessageRestricted+0x80>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
80002074:	fec42783          	lw	a5,-20(s0)
80002078:	02478793          	addi	a5,a5,36
8000207c:	fd442603          	lw	a2,-44(s0)
80002080:	fd842583          	lw	a1,-40(s0)
80002084:	00078513          	mv	a0,a5
80002088:	125010ef          	jal	ra,800039ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
8000208c:	fec42503          	lw	a0,-20(s0)
80002090:	c1dff0ef          	jal	ra,80001cac <prvUnlockQueue>
	}
80002094:	00000013          	nop
80002098:	02c12083          	lw	ra,44(sp)
8000209c:	02812403          	lw	s0,40(sp)
800020a0:	03010113          	addi	sp,sp,48
800020a4:	00008067          	ret

800020a8 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
800020a8:	fc010113          	addi	sp,sp,-64
800020ac:	02112e23          	sw	ra,60(sp)
800020b0:	02812c23          	sw	s0,56(sp)
800020b4:	04010413          	addi	s0,sp,64
800020b8:	fca42e23          	sw	a0,-36(s0)
800020bc:	fcb42c23          	sw	a1,-40(s0)
800020c0:	fcd42823          	sw	a3,-48(s0)
800020c4:	fce42623          	sw	a4,-52(s0)
800020c8:	fcf42423          	sw	a5,-56(s0)
800020cc:	fd042223          	sw	a6,-60(s0)
800020d0:	fd142023          	sw	a7,-64(s0)
800020d4:	00060793          	mv	a5,a2
800020d8:	fcf41b23          	sh	a5,-42(s0)
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
800020dc:	fdc42783          	lw	a5,-36(s0)
800020e0:	00079663          	bnez	a5,800020ec <xTaskGenericCreate+0x44>
800020e4:	30007073          	csrci	mstatus,0
800020e8:	0000006f          	j	800020e8 <xTaskGenericCreate+0x40>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
800020ec:	fcc42703          	lw	a4,-52(s0)
800020f0:	00400793          	li	a5,4
800020f4:	00e7f663          	bleu	a4,a5,80002100 <xTaskGenericCreate+0x58>
800020f8:	30007073          	csrci	mstatus,0
800020fc:	0000006f          	j	800020fc <xTaskGenericCreate+0x54>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
80002100:	fd645783          	lhu	a5,-42(s0)
80002104:	fc442583          	lw	a1,-60(s0)
80002108:	00078513          	mv	a0,a5
8000210c:	1b4020ef          	jal	ra,800042c0 <prvAllocateTCBAndStack>
80002110:	fea42423          	sw	a0,-24(s0)
	if( pxNewTCB != NULL )
80002114:	fe842783          	lw	a5,-24(s0)
80002118:	1c078663          	beqz	a5,800022e4 <xTaskGenericCreate+0x23c>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
8000211c:	fe842783          	lw	a5,-24(s0)
80002120:	0307a703          	lw	a4,48(a5)
80002124:	fd645683          	lhu	a3,-42(s0)
80002128:	400007b7          	lui	a5,0x40000
8000212c:	fff78793          	addi	a5,a5,-1 # 3fffffff <_HEAP_SIZE+0x3fffefff>
80002130:	00f687b3          	add	a5,a3,a5
80002134:	00279793          	slli	a5,a5,0x2
80002138:	00f707b3          	add	a5,a4,a5
8000213c:	fef42223          	sw	a5,-28(s0)
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
80002140:	fe442783          	lw	a5,-28(s0)
80002144:	ffc7f793          	andi	a5,a5,-4
80002148:	fef42223          	sw	a5,-28(s0)

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
8000214c:	fe442783          	lw	a5,-28(s0)
80002150:	0037f793          	andi	a5,a5,3
80002154:	00078663          	beqz	a5,80002160 <xTaskGenericCreate+0xb8>
80002158:	30007073          	csrci	mstatus,0
8000215c:	0000006f          	j	8000215c <xTaskGenericCreate+0xb4>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
80002160:	fd645783          	lhu	a5,-42(s0)
80002164:	00078713          	mv	a4,a5
80002168:	fc042683          	lw	a3,-64(s0)
8000216c:	fcc42603          	lw	a2,-52(s0)
80002170:	fd842583          	lw	a1,-40(s0)
80002174:	fe842503          	lw	a0,-24(s0)
80002178:	5ad010ef          	jal	ra,80003f24 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
8000217c:	fd042603          	lw	a2,-48(s0)
80002180:	fdc42583          	lw	a1,-36(s0)
80002184:	fe442503          	lw	a0,-28(s0)
80002188:	d78fe0ef          	jal	ra,80000700 <pxPortInitialiseStack>
8000218c:	00050713          	mv	a4,a0
80002190:	fe842783          	lw	a5,-24(s0)
80002194:	00e7a023          	sw	a4,0(a5)
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
80002198:	fc842783          	lw	a5,-56(s0)
8000219c:	00078863          	beqz	a5,800021ac <xTaskGenericCreate+0x104>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
800021a0:	fc842783          	lw	a5,-56(s0)
800021a4:	fe842703          	lw	a4,-24(s0)
800021a8:	00e7a023          	sw	a4,0(a5)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
800021ac:	051020ef          	jal	ra,800049fc <vTaskEnterCritical>
		{
			uxCurrentNumberOfTasks++;
800021b0:	0001f797          	auipc	a5,0x1f
800021b4:	76478793          	addi	a5,a5,1892 # 80021914 <uxCurrentNumberOfTasks>
800021b8:	0007a783          	lw	a5,0(a5)
800021bc:	00178713          	addi	a4,a5,1
800021c0:	0001f797          	auipc	a5,0x1f
800021c4:	75478793          	addi	a5,a5,1876 # 80021914 <uxCurrentNumberOfTasks>
800021c8:	00e7a023          	sw	a4,0(a5)
			if( pxCurrentTCB == NULL )
800021cc:	0001f797          	auipc	a5,0x1f
800021d0:	c5078793          	addi	a5,a5,-944 # 80020e1c <pxCurrentTCB>
800021d4:	0007a783          	lw	a5,0(a5)
800021d8:	02079863          	bnez	a5,80002208 <xTaskGenericCreate+0x160>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
800021dc:	0001f797          	auipc	a5,0x1f
800021e0:	c4078793          	addi	a5,a5,-960 # 80020e1c <pxCurrentTCB>
800021e4:	fe842703          	lw	a4,-24(s0)
800021e8:	00e7a023          	sw	a4,0(a5)

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
800021ec:	0001f797          	auipc	a5,0x1f
800021f0:	72878793          	addi	a5,a5,1832 # 80021914 <uxCurrentNumberOfTasks>
800021f4:	0007a703          	lw	a4,0(a5)
800021f8:	00100793          	li	a5,1
800021fc:	04f71263          	bne	a4,a5,80002240 <xTaskGenericCreate+0x198>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
80002200:	65d010ef          	jal	ra,8000405c <prvInitialiseTaskLists>
80002204:	03c0006f          	j	80002240 <xTaskGenericCreate+0x198>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80002208:	0001f797          	auipc	a5,0x1f
8000220c:	71878793          	addi	a5,a5,1816 # 80021920 <xSchedulerRunning>
80002210:	0007a783          	lw	a5,0(a5)
80002214:	02079663          	bnez	a5,80002240 <xTaskGenericCreate+0x198>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80002218:	0001f797          	auipc	a5,0x1f
8000221c:	c0478793          	addi	a5,a5,-1020 # 80020e1c <pxCurrentTCB>
80002220:	0007a783          	lw	a5,0(a5)
80002224:	02c7a783          	lw	a5,44(a5)
80002228:	fcc42703          	lw	a4,-52(s0)
8000222c:	00f76a63          	bltu	a4,a5,80002240 <xTaskGenericCreate+0x198>
					{
						pxCurrentTCB = pxNewTCB;
80002230:	0001f797          	auipc	a5,0x1f
80002234:	bec78793          	addi	a5,a5,-1044 # 80020e1c <pxCurrentTCB>
80002238:	fe842703          	lw	a4,-24(s0)
8000223c:	00e7a023          	sw	a4,0(a5)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
80002240:	0001f797          	auipc	a5,0x1f
80002244:	6f078793          	addi	a5,a5,1776 # 80021930 <uxTaskNumber>
80002248:	0007a783          	lw	a5,0(a5)
8000224c:	00178713          	addi	a4,a5,1
80002250:	0001f797          	auipc	a5,0x1f
80002254:	6e078793          	addi	a5,a5,1760 # 80021930 <uxTaskNumber>
80002258:	00e7a023          	sw	a4,0(a5)

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
8000225c:	0001f797          	auipc	a5,0x1f
80002260:	6d478793          	addi	a5,a5,1748 # 80021930 <uxTaskNumber>
80002264:	0007a703          	lw	a4,0(a5)
80002268:	fe842783          	lw	a5,-24(s0)
8000226c:	04e7a423          	sw	a4,72(a5)
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
80002270:	fe842783          	lw	a5,-24(s0)
80002274:	02c7a703          	lw	a4,44(a5)
80002278:	0001f797          	auipc	a5,0x1f
8000227c:	6a478793          	addi	a5,a5,1700 # 8002191c <uxTopReadyPriority>
80002280:	0007a783          	lw	a5,0(a5)
80002284:	00e7fc63          	bleu	a4,a5,8000229c <xTaskGenericCreate+0x1f4>
80002288:	fe842783          	lw	a5,-24(s0)
8000228c:	02c7a703          	lw	a4,44(a5)
80002290:	0001f797          	auipc	a5,0x1f
80002294:	68c78793          	addi	a5,a5,1676 # 8002191c <uxTopReadyPriority>
80002298:	00e7a023          	sw	a4,0(a5)
8000229c:	fe842783          	lw	a5,-24(s0)
800022a0:	02c7a703          	lw	a4,44(a5)
800022a4:	00070793          	mv	a5,a4
800022a8:	00279793          	slli	a5,a5,0x2
800022ac:	00e787b3          	add	a5,a5,a4
800022b0:	00279793          	slli	a5,a5,0x2
800022b4:	0001f717          	auipc	a4,0x1f
800022b8:	58c70713          	addi	a4,a4,1420 # 80021840 <__bss_start>
800022bc:	00e78733          	add	a4,a5,a4
800022c0:	fe842783          	lw	a5,-24(s0)
800022c4:	00478793          	addi	a5,a5,4
800022c8:	00078593          	mv	a1,a5
800022cc:	00070513          	mv	a0,a4
800022d0:	d88fe0ef          	jal	ra,80000858 <vListInsertEnd>

			xReturn = pdPASS;
800022d4:	00100793          	li	a5,1
800022d8:	fef42623          	sw	a5,-20(s0)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
800022dc:	774020ef          	jal	ra,80004a50 <vTaskExitCritical>
800022e0:	00c0006f          	j	800022ec <xTaskGenericCreate+0x244>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
800022e4:	fff00793          	li	a5,-1
800022e8:	fef42623          	sw	a5,-20(s0)
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
800022ec:	fec42703          	lw	a4,-20(s0)
800022f0:	00100793          	li	a5,1
800022f4:	02f71863          	bne	a4,a5,80002324 <xTaskGenericCreate+0x27c>
	{
		if( xSchedulerRunning != pdFALSE )
800022f8:	0001f797          	auipc	a5,0x1f
800022fc:	62878793          	addi	a5,a5,1576 # 80021920 <xSchedulerRunning>
80002300:	0007a783          	lw	a5,0(a5)
80002304:	02078063          	beqz	a5,80002324 <xTaskGenericCreate+0x27c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
80002308:	0001f797          	auipc	a5,0x1f
8000230c:	b1478793          	addi	a5,a5,-1260 # 80020e1c <pxCurrentTCB>
80002310:	0007a783          	lw	a5,0(a5)
80002314:	02c7a783          	lw	a5,44(a5)
80002318:	fcc42703          	lw	a4,-52(s0)
8000231c:	00e7f463          	bleu	a4,a5,80002324 <xTaskGenericCreate+0x27c>
			{
				taskYIELD_IF_USING_PREEMPTION();
80002320:	96cfe0ef          	jal	ra,8000048c <vPortYield>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
80002324:	fec42783          	lw	a5,-20(s0)
}
80002328:	00078513          	mv	a0,a5
8000232c:	03c12083          	lw	ra,60(sp)
80002330:	03812403          	lw	s0,56(sp)
80002334:	04010113          	addi	sp,sp,64
80002338:	00008067          	ret

8000233c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
8000233c:	fd010113          	addi	sp,sp,-48
80002340:	02112623          	sw	ra,44(sp)
80002344:	02812423          	sw	s0,40(sp)
80002348:	03010413          	addi	s0,sp,48
8000234c:	fca42e23          	sw	a0,-36(s0)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
80002350:	6ac020ef          	jal	ra,800049fc <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
80002354:	fdc42783          	lw	a5,-36(s0)
80002358:	00079a63          	bnez	a5,8000236c <vTaskDelete+0x30>
8000235c:	0001f797          	auipc	a5,0x1f
80002360:	ac078793          	addi	a5,a5,-1344 # 80020e1c <pxCurrentTCB>
80002364:	0007a783          	lw	a5,0(a5)
80002368:	0080006f          	j	80002370 <vTaskDelete+0x34>
8000236c:	fdc42783          	lw	a5,-36(s0)
80002370:	fef42623          	sw	a5,-20(s0)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002374:	fec42783          	lw	a5,-20(s0)
80002378:	00478793          	addi	a5,a5,4
8000237c:	00078513          	mv	a0,a5
80002380:	e34fe0ef          	jal	ra,800009b4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002384:	fec42783          	lw	a5,-20(s0)
80002388:	0287a783          	lw	a5,40(a5)
8000238c:	00078a63          	beqz	a5,800023a0 <vTaskDelete+0x64>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002390:	fec42783          	lw	a5,-20(s0)
80002394:	01878793          	addi	a5,a5,24
80002398:	00078513          	mv	a0,a5
8000239c:	e18fe0ef          	jal	ra,800009b4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
800023a0:	fec42783          	lw	a5,-20(s0)
800023a4:	00478793          	addi	a5,a5,4
800023a8:	00078593          	mv	a1,a5
800023ac:	0001f517          	auipc	a0,0x1f
800023b0:	53c50513          	addi	a0,a0,1340 # 800218e8 <xTasksWaitingTermination>
800023b4:	ca4fe0ef          	jal	ra,80000858 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
800023b8:	0001f797          	auipc	a5,0x1f
800023bc:	54478793          	addi	a5,a5,1348 # 800218fc <uxTasksDeleted>
800023c0:	0007a783          	lw	a5,0(a5)
800023c4:	00178713          	addi	a4,a5,1
800023c8:	0001f797          	auipc	a5,0x1f
800023cc:	53478793          	addi	a5,a5,1332 # 800218fc <uxTasksDeleted>
800023d0:	00e7a023          	sw	a4,0(a5)

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
800023d4:	0001f797          	auipc	a5,0x1f
800023d8:	55c78793          	addi	a5,a5,1372 # 80021930 <uxTaskNumber>
800023dc:	0007a783          	lw	a5,0(a5)
800023e0:	00178713          	addi	a4,a5,1
800023e4:	0001f797          	auipc	a5,0x1f
800023e8:	54c78793          	addi	a5,a5,1356 # 80021930 <uxTaskNumber>
800023ec:	00e7a023          	sw	a4,0(a5)

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
800023f0:	660020ef          	jal	ra,80004a50 <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
800023f4:	0001f797          	auipc	a5,0x1f
800023f8:	52c78793          	addi	a5,a5,1324 # 80021920 <xSchedulerRunning>
800023fc:	0007a783          	lw	a5,0(a5)
80002400:	04078263          	beqz	a5,80002444 <vTaskDelete+0x108>
		{
			if( pxTCB == pxCurrentTCB )
80002404:	0001f797          	auipc	a5,0x1f
80002408:	a1878793          	addi	a5,a5,-1512 # 80020e1c <pxCurrentTCB>
8000240c:	0007a783          	lw	a5,0(a5)
80002410:	fec42703          	lw	a4,-20(s0)
80002414:	02f71263          	bne	a4,a5,80002438 <vTaskDelete+0xfc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
80002418:	0001f797          	auipc	a5,0x1f
8000241c:	52078793          	addi	a5,a5,1312 # 80021938 <uxSchedulerSuspended>
80002420:	0007a783          	lw	a5,0(a5)
80002424:	00078663          	beqz	a5,80002430 <vTaskDelete+0xf4>
80002428:	30007073          	csrci	mstatus,0
8000242c:	0000006f          	j	8000242c <vTaskDelete+0xf0>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
80002430:	85cfe0ef          	jal	ra,8000048c <vPortYield>
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
			}
		}
	}
80002434:	0100006f          	j	80002444 <vTaskDelete+0x108>
				taskENTER_CRITICAL();
80002438:	5c4020ef          	jal	ra,800049fc <vTaskEnterCritical>
					prvResetNextTaskUnblockTime();
8000243c:	204020ef          	jal	ra,80004640 <prvResetNextTaskUnblockTime>
				taskEXIT_CRITICAL();
80002440:	610020ef          	jal	ra,80004a50 <vTaskExitCritical>
	}
80002444:	00000013          	nop
80002448:	02c12083          	lw	ra,44(sp)
8000244c:	02812403          	lw	s0,40(sp)
80002450:	03010113          	addi	sp,sp,48
80002454:	00008067          	ret

80002458 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
80002458:	fd010113          	addi	sp,sp,-48
8000245c:	02112623          	sw	ra,44(sp)
80002460:	02812423          	sw	s0,40(sp)
80002464:	03010413          	addi	s0,sp,48
80002468:	fca42e23          	sw	a0,-36(s0)
8000246c:	fcb42c23          	sw	a1,-40(s0)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
80002470:	fe042623          	sw	zero,-20(s0)

		configASSERT( pxPreviousWakeTime );
80002474:	fdc42783          	lw	a5,-36(s0)
80002478:	00079663          	bnez	a5,80002484 <vTaskDelayUntil+0x2c>
8000247c:	30007073          	csrci	mstatus,0
80002480:	0000006f          	j	80002480 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
80002484:	fd842783          	lw	a5,-40(s0)
80002488:	00079663          	bnez	a5,80002494 <vTaskDelayUntil+0x3c>
8000248c:	30007073          	csrci	mstatus,0
80002490:	0000006f          	j	80002490 <vTaskDelayUntil+0x38>
		configASSERT( uxSchedulerSuspended == 0 );
80002494:	0001f797          	auipc	a5,0x1f
80002498:	4a478793          	addi	a5,a5,1188 # 80021938 <uxSchedulerSuspended>
8000249c:	0007a783          	lw	a5,0(a5)
800024a0:	00078663          	beqz	a5,800024ac <vTaskDelayUntil+0x54>
800024a4:	30007073          	csrci	mstatus,0
800024a8:	0000006f          	j	800024a8 <vTaskDelayUntil+0x50>

		vTaskSuspendAll();
800024ac:	259000ef          	jal	ra,80002f04 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
800024b0:	0001f797          	auipc	a5,0x1f
800024b4:	46878793          	addi	a5,a5,1128 # 80021918 <xTickCount>
800024b8:	0007a783          	lw	a5,0(a5)
800024bc:	fef42423          	sw	a5,-24(s0)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
800024c0:	fdc42783          	lw	a5,-36(s0)
800024c4:	0007a783          	lw	a5,0(a5)
800024c8:	fd842703          	lw	a4,-40(s0)
800024cc:	00f707b3          	add	a5,a4,a5
800024d0:	fef42223          	sw	a5,-28(s0)

			if( xConstTickCount < *pxPreviousWakeTime )
800024d4:	fdc42783          	lw	a5,-36(s0)
800024d8:	0007a783          	lw	a5,0(a5)
800024dc:	fe842703          	lw	a4,-24(s0)
800024e0:	02f77663          	bleu	a5,a4,8000250c <vTaskDelayUntil+0xb4>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
800024e4:	fdc42783          	lw	a5,-36(s0)
800024e8:	0007a783          	lw	a5,0(a5)
800024ec:	fe442703          	lw	a4,-28(s0)
800024f0:	04f77063          	bleu	a5,a4,80002530 <vTaskDelayUntil+0xd8>
800024f4:	fe442703          	lw	a4,-28(s0)
800024f8:	fe842783          	lw	a5,-24(s0)
800024fc:	02e7fa63          	bleu	a4,a5,80002530 <vTaskDelayUntil+0xd8>
				{
					xShouldDelay = pdTRUE;
80002500:	00100793          	li	a5,1
80002504:	fef42623          	sw	a5,-20(s0)
80002508:	0280006f          	j	80002530 <vTaskDelayUntil+0xd8>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
8000250c:	fdc42783          	lw	a5,-36(s0)
80002510:	0007a783          	lw	a5,0(a5)
80002514:	fe442703          	lw	a4,-28(s0)
80002518:	00f76863          	bltu	a4,a5,80002528 <vTaskDelayUntil+0xd0>
8000251c:	fe442703          	lw	a4,-28(s0)
80002520:	fe842783          	lw	a5,-24(s0)
80002524:	00e7f663          	bleu	a4,a5,80002530 <vTaskDelayUntil+0xd8>
				{
					xShouldDelay = pdTRUE;
80002528:	00100793          	li	a5,1
8000252c:	fef42623          	sw	a5,-20(s0)
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
80002530:	fdc42783          	lw	a5,-36(s0)
80002534:	fe442703          	lw	a4,-28(s0)
80002538:	00e7a023          	sw	a4,0(a5)

			if( xShouldDelay != pdFALSE )
8000253c:	fec42783          	lw	a5,-20(s0)
80002540:	02078263          	beqz	a5,80002564 <vTaskDelayUntil+0x10c>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002544:	0001f797          	auipc	a5,0x1f
80002548:	8d878793          	addi	a5,a5,-1832 # 80020e1c <pxCurrentTCB>
8000254c:	0007a783          	lw	a5,0(a5)
80002550:	00478793          	addi	a5,a5,4
80002554:	00078513          	mv	a0,a5
80002558:	c5cfe0ef          	jal	ra,800009b4 <uxListRemove>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
8000255c:	fe442503          	lw	a0,-28(s0)
80002560:	499010ef          	jal	ra,800041f8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
80002564:	1d9000ef          	jal	ra,80002f3c <xTaskResumeAll>
80002568:	fea42023          	sw	a0,-32(s0)

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
8000256c:	fe042783          	lw	a5,-32(s0)
80002570:	00079463          	bnez	a5,80002578 <vTaskDelayUntil+0x120>
		{
			portYIELD_WITHIN_API();
80002574:	f19fd0ef          	jal	ra,8000048c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002578:	00000013          	nop
8000257c:	02c12083          	lw	ra,44(sp)
80002580:	02812403          	lw	s0,40(sp)
80002584:	03010113          	addi	sp,sp,48
80002588:	00008067          	ret

8000258c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
8000258c:	fd010113          	addi	sp,sp,-48
80002590:	02112623          	sw	ra,44(sp)
80002594:	02812423          	sw	s0,40(sp)
80002598:	03010413          	addi	s0,sp,48
8000259c:	fca42e23          	sw	a0,-36(s0)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
800025a0:	fe042623          	sw	zero,-20(s0)


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
800025a4:	fdc42783          	lw	a5,-36(s0)
800025a8:	06078063          	beqz	a5,80002608 <vTaskDelay+0x7c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
800025ac:	0001f797          	auipc	a5,0x1f
800025b0:	38c78793          	addi	a5,a5,908 # 80021938 <uxSchedulerSuspended>
800025b4:	0007a783          	lw	a5,0(a5)
800025b8:	00078663          	beqz	a5,800025c4 <vTaskDelay+0x38>
800025bc:	30007073          	csrci	mstatus,0
800025c0:	0000006f          	j	800025c0 <vTaskDelay+0x34>
			vTaskSuspendAll();
800025c4:	141000ef          	jal	ra,80002f04 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
800025c8:	0001f797          	auipc	a5,0x1f
800025cc:	35078793          	addi	a5,a5,848 # 80021918 <xTickCount>
800025d0:	0007a783          	lw	a5,0(a5)
800025d4:	fdc42703          	lw	a4,-36(s0)
800025d8:	00f707b3          	add	a5,a4,a5
800025dc:	fef42423          	sw	a5,-24(s0)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
800025e0:	0001f797          	auipc	a5,0x1f
800025e4:	83c78793          	addi	a5,a5,-1988 # 80020e1c <pxCurrentTCB>
800025e8:	0007a783          	lw	a5,0(a5)
800025ec:	00478793          	addi	a5,a5,4
800025f0:	00078513          	mv	a0,a5
800025f4:	bc0fe0ef          	jal	ra,800009b4 <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
800025f8:	fe842503          	lw	a0,-24(s0)
800025fc:	3fd010ef          	jal	ra,800041f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
80002600:	13d000ef          	jal	ra,80002f3c <xTaskResumeAll>
80002604:	fea42623          	sw	a0,-20(s0)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
80002608:	fec42783          	lw	a5,-20(s0)
8000260c:	00079463          	bnez	a5,80002614 <vTaskDelay+0x88>
		{
			portYIELD_WITHIN_API();
80002610:	e7dfd0ef          	jal	ra,8000048c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002614:	00000013          	nop
80002618:	02c12083          	lw	ra,44(sp)
8000261c:	02812403          	lw	s0,40(sp)
80002620:	03010113          	addi	sp,sp,48
80002624:	00008067          	ret

80002628 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_eTaskGetState == 1 )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
80002628:	fd010113          	addi	sp,sp,-48
8000262c:	02112623          	sw	ra,44(sp)
80002630:	02812423          	sw	s0,40(sp)
80002634:	03010413          	addi	s0,sp,48
80002638:	fca42e23          	sw	a0,-36(s0)
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
8000263c:	fdc42783          	lw	a5,-36(s0)
80002640:	fef42423          	sw	a5,-24(s0)

		configASSERT( pxTCB );
80002644:	fe842783          	lw	a5,-24(s0)
80002648:	00079663          	bnez	a5,80002654 <eTaskGetState+0x2c>
8000264c:	30007073          	csrci	mstatus,0
80002650:	0000006f          	j	80002650 <eTaskGetState+0x28>

		if( pxTCB == pxCurrentTCB )
80002654:	0001e797          	auipc	a5,0x1e
80002658:	7c878793          	addi	a5,a5,1992 # 80020e1c <pxCurrentTCB>
8000265c:	0007a783          	lw	a5,0(a5)
80002660:	fe842703          	lw	a4,-24(s0)
80002664:	00f71663          	bne	a4,a5,80002670 <eTaskGetState+0x48>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
80002668:	fe042623          	sw	zero,-20(s0)
8000266c:	0a40006f          	j	80002710 <eTaskGetState+0xe8>
		}
		else
		{
			taskENTER_CRITICAL();
80002670:	38c020ef          	jal	ra,800049fc <vTaskEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
80002674:	fe842783          	lw	a5,-24(s0)
80002678:	0147a783          	lw	a5,20(a5)
8000267c:	fef42223          	sw	a5,-28(s0)
			}
			taskEXIT_CRITICAL();
80002680:	3d0020ef          	jal	ra,80004a50 <vTaskExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
80002684:	0001f797          	auipc	a5,0x1f
80002688:	24878793          	addi	a5,a5,584 # 800218cc <pxDelayedTaskList>
8000268c:	0007a783          	lw	a5,0(a5)
80002690:	fe442703          	lw	a4,-28(s0)
80002694:	00f70c63          	beq	a4,a5,800026ac <eTaskGetState+0x84>
80002698:	0001f797          	auipc	a5,0x1f
8000269c:	23878793          	addi	a5,a5,568 # 800218d0 <pxOverflowDelayedTaskList>
800026a0:	0007a783          	lw	a5,0(a5)
800026a4:	fe442703          	lw	a4,-28(s0)
800026a8:	00f71863          	bne	a4,a5,800026b8 <eTaskGetState+0x90>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
800026ac:	00200793          	li	a5,2
800026b0:	fef42623          	sw	a5,-20(s0)
800026b4:	05c0006f          	j	80002710 <eTaskGetState+0xe8>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
800026b8:	fe442703          	lw	a4,-28(s0)
800026bc:	0001f797          	auipc	a5,0x1f
800026c0:	24478793          	addi	a5,a5,580 # 80021900 <xSuspendedTaskList>
800026c4:	02f71463          	bne	a4,a5,800026ec <eTaskGetState+0xc4>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
800026c8:	fe842783          	lw	a5,-24(s0)
800026cc:	0287a783          	lw	a5,40(a5)
800026d0:	00079863          	bnez	a5,800026e0 <eTaskGetState+0xb8>
					{
						eReturn = eSuspended;
800026d4:	00300793          	li	a5,3
800026d8:	fef42623          	sw	a5,-20(s0)
800026dc:	0340006f          	j	80002710 <eTaskGetState+0xe8>
					}
					else
					{
						eReturn = eBlocked;
800026e0:	00200793          	li	a5,2
800026e4:	fef42623          	sw	a5,-20(s0)
800026e8:	0280006f          	j	80002710 <eTaskGetState+0xe8>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( pxStateList == &xTasksWaitingTermination )
800026ec:	fe442703          	lw	a4,-28(s0)
800026f0:	0001f797          	auipc	a5,0x1f
800026f4:	1f878793          	addi	a5,a5,504 # 800218e8 <xTasksWaitingTermination>
800026f8:	00f71863          	bne	a4,a5,80002708 <eTaskGetState+0xe0>
				{
					/* The task being queried is referenced from the deleted
					tasks list. */
					eReturn = eDeleted;
800026fc:	00400793          	li	a5,4
80002700:	fef42623          	sw	a5,-20(s0)
80002704:	00c0006f          	j	80002710 <eTaskGetState+0xe8>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
80002708:	00100793          	li	a5,1
8000270c:	fef42623          	sw	a5,-20(s0)
			}
		}

		return eReturn;
80002710:	fec42783          	lw	a5,-20(s0)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
80002714:	00078513          	mv	a0,a5
80002718:	02c12083          	lw	ra,44(sp)
8000271c:	02812403          	lw	s0,40(sp)
80002720:	03010113          	addi	sp,sp,48
80002724:	00008067          	ret

80002728 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
80002728:	fd010113          	addi	sp,sp,-48
8000272c:	02112623          	sw	ra,44(sp)
80002730:	02812423          	sw	s0,40(sp)
80002734:	03010413          	addi	s0,sp,48
80002738:	fca42e23          	sw	a0,-36(s0)
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
8000273c:	2c0020ef          	jal	ra,800049fc <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
80002740:	fdc42783          	lw	a5,-36(s0)
80002744:	00079a63          	bnez	a5,80002758 <uxTaskPriorityGet+0x30>
80002748:	0001e797          	auipc	a5,0x1e
8000274c:	6d478793          	addi	a5,a5,1748 # 80020e1c <pxCurrentTCB>
80002750:	0007a783          	lw	a5,0(a5)
80002754:	0080006f          	j	8000275c <uxTaskPriorityGet+0x34>
80002758:	fdc42783          	lw	a5,-36(s0)
8000275c:	fef42623          	sw	a5,-20(s0)
			uxReturn = pxTCB->uxPriority;
80002760:	fec42783          	lw	a5,-20(s0)
80002764:	02c7a783          	lw	a5,44(a5)
80002768:	fef42423          	sw	a5,-24(s0)
		}
		taskEXIT_CRITICAL();
8000276c:	2e4020ef          	jal	ra,80004a50 <vTaskExitCritical>

		return uxReturn;
80002770:	fe842783          	lw	a5,-24(s0)
	}
80002774:	00078513          	mv	a0,a5
80002778:	02c12083          	lw	ra,44(sp)
8000277c:	02812403          	lw	s0,40(sp)
80002780:	03010113          	addi	sp,sp,48
80002784:	00008067          	ret

80002788 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
80002788:	fd010113          	addi	sp,sp,-48
8000278c:	02112623          	sw	ra,44(sp)
80002790:	02812423          	sw	s0,40(sp)
80002794:	03010413          	addi	s0,sp,48
80002798:	fca42e23          	sw	a0,-36(s0)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
8000279c:	f39fd0ef          	jal	ra,800006d4 <vPortSetInterruptMask>
800027a0:	00050793          	mv	a5,a0
800027a4:	fef42623          	sw	a5,-20(s0)
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
800027a8:	fdc42783          	lw	a5,-36(s0)
800027ac:	00079a63          	bnez	a5,800027c0 <uxTaskPriorityGetFromISR+0x38>
800027b0:	0001e797          	auipc	a5,0x1e
800027b4:	66c78793          	addi	a5,a5,1644 # 80020e1c <pxCurrentTCB>
800027b8:	0007a783          	lw	a5,0(a5)
800027bc:	0080006f          	j	800027c4 <uxTaskPriorityGetFromISR+0x3c>
800027c0:	fdc42783          	lw	a5,-36(s0)
800027c4:	fef42423          	sw	a5,-24(s0)
			uxReturn = pxTCB->uxPriority;
800027c8:	fe842783          	lw	a5,-24(s0)
800027cc:	02c7a783          	lw	a5,44(a5)
800027d0:	fef42223          	sw	a5,-28(s0)
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
800027d4:	fec42783          	lw	a5,-20(s0)
800027d8:	00078513          	mv	a0,a5
800027dc:	ed1fd0ef          	jal	ra,800006ac <vPortClearInterruptMask>

		return uxReturn;
800027e0:	fe442783          	lw	a5,-28(s0)
	}
800027e4:	00078513          	mv	a0,a5
800027e8:	02c12083          	lw	ra,44(sp)
800027ec:	02812403          	lw	s0,40(sp)
800027f0:	03010113          	addi	sp,sp,48
800027f4:	00008067          	ret

800027f8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
800027f8:	fd010113          	addi	sp,sp,-48
800027fc:	02112623          	sw	ra,44(sp)
80002800:	02812423          	sw	s0,40(sp)
80002804:	03010413          	addi	s0,sp,48
80002808:	fca42e23          	sw	a0,-36(s0)
8000280c:	fcb42c23          	sw	a1,-40(s0)
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
80002810:	fe042623          	sw	zero,-20(s0)

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
80002814:	fd842703          	lw	a4,-40(s0)
80002818:	00400793          	li	a5,4
8000281c:	00e7f663          	bleu	a4,a5,80002828 <vTaskPrioritySet+0x30>
80002820:	30007073          	csrci	mstatus,0
80002824:	0000006f          	j	80002824 <vTaskPrioritySet+0x2c>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
80002828:	fd842703          	lw	a4,-40(s0)
8000282c:	00400793          	li	a5,4
80002830:	00e7f663          	bleu	a4,a5,8000283c <vTaskPrioritySet+0x44>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
80002834:	00400793          	li	a5,4
80002838:	fcf42c23          	sw	a5,-40(s0)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
8000283c:	1c0020ef          	jal	ra,800049fc <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
80002840:	fdc42783          	lw	a5,-36(s0)
80002844:	00079a63          	bnez	a5,80002858 <vTaskPrioritySet+0x60>
80002848:	0001e797          	auipc	a5,0x1e
8000284c:	5d478793          	addi	a5,a5,1492 # 80020e1c <pxCurrentTCB>
80002850:	0007a783          	lw	a5,0(a5)
80002854:	0080006f          	j	8000285c <vTaskPrioritySet+0x64>
80002858:	fdc42783          	lw	a5,-36(s0)
8000285c:	fef42423          	sw	a5,-24(s0)

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
80002860:	fe842783          	lw	a5,-24(s0)
80002864:	0507a783          	lw	a5,80(a5)
80002868:	fef42223          	sw	a5,-28(s0)
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
8000286c:	fe442703          	lw	a4,-28(s0)
80002870:	fd842783          	lw	a5,-40(s0)
80002874:	16f70e63          	beq	a4,a5,800029f0 <vTaskPrioritySet+0x1f8>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
80002878:	fd842703          	lw	a4,-40(s0)
8000287c:	fe442783          	lw	a5,-28(s0)
80002880:	02e7fe63          	bleu	a4,a5,800028bc <vTaskPrioritySet+0xc4>
				{
					if( pxTCB != pxCurrentTCB )
80002884:	0001e797          	auipc	a5,0x1e
80002888:	59878793          	addi	a5,a5,1432 # 80020e1c <pxCurrentTCB>
8000288c:	0007a783          	lw	a5,0(a5)
80002890:	fe842703          	lw	a4,-24(s0)
80002894:	04f70263          	beq	a4,a5,800028d8 <vTaskPrioritySet+0xe0>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
80002898:	0001e797          	auipc	a5,0x1e
8000289c:	58478793          	addi	a5,a5,1412 # 80020e1c <pxCurrentTCB>
800028a0:	0007a783          	lw	a5,0(a5)
800028a4:	02c7a783          	lw	a5,44(a5)
800028a8:	fd842703          	lw	a4,-40(s0)
800028ac:	02f76663          	bltu	a4,a5,800028d8 <vTaskPrioritySet+0xe0>
						{
							xYieldRequired = pdTRUE;
800028b0:	00100793          	li	a5,1
800028b4:	fef42623          	sw	a5,-20(s0)
800028b8:	0200006f          	j	800028d8 <vTaskPrioritySet+0xe0>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
800028bc:	0001e797          	auipc	a5,0x1e
800028c0:	56078793          	addi	a5,a5,1376 # 80020e1c <pxCurrentTCB>
800028c4:	0007a783          	lw	a5,0(a5)
800028c8:	fe842703          	lw	a4,-24(s0)
800028cc:	00f71663          	bne	a4,a5,800028d8 <vTaskPrioritySet+0xe0>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
800028d0:	00100793          	li	a5,1
800028d4:	fef42623          	sw	a5,-20(s0)
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
800028d8:	fe842783          	lw	a5,-24(s0)
800028dc:	02c7a783          	lw	a5,44(a5)
800028e0:	fef42023          	sw	a5,-32(s0)

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
800028e4:	fe842783          	lw	a5,-24(s0)
800028e8:	0507a703          	lw	a4,80(a5)
800028ec:	fe842783          	lw	a5,-24(s0)
800028f0:	02c7a783          	lw	a5,44(a5)
800028f4:	00f71863          	bne	a4,a5,80002904 <vTaskPrioritySet+0x10c>
					{
						pxTCB->uxPriority = uxNewPriority;
800028f8:	fe842783          	lw	a5,-24(s0)
800028fc:	fd842703          	lw	a4,-40(s0)
80002900:	02e7a623          	sw	a4,44(a5)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
80002904:	fe842783          	lw	a5,-24(s0)
80002908:	fd842703          	lw	a4,-40(s0)
8000290c:	04e7a823          	sw	a4,80(a5)
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
80002910:	fe842783          	lw	a5,-24(s0)
80002914:	0187a783          	lw	a5,24(a5)
80002918:	0007cc63          	bltz	a5,80002930 <vTaskPrioritySet+0x138>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
8000291c:	00500713          	li	a4,5
80002920:	fd842783          	lw	a5,-40(s0)
80002924:	40f70733          	sub	a4,a4,a5
80002928:	fe842783          	lw	a5,-24(s0)
8000292c:	00e7ac23          	sw	a4,24(a5)

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
80002930:	fe842783          	lw	a5,-24(s0)
80002934:	0147a683          	lw	a3,20(a5)
80002938:	fe042703          	lw	a4,-32(s0)
8000293c:	00070793          	mv	a5,a4
80002940:	00279793          	slli	a5,a5,0x2
80002944:	00e787b3          	add	a5,a5,a4
80002948:	00279793          	slli	a5,a5,0x2
8000294c:	0001f717          	auipc	a4,0x1f
80002950:	ef470713          	addi	a4,a4,-268 # 80021840 <__bss_start>
80002954:	00e787b3          	add	a5,a5,a4
80002958:	00f69663          	bne	a3,a5,80002964 <vTaskPrioritySet+0x16c>
8000295c:	00100793          	li	a5,1
80002960:	0080006f          	j	80002968 <vTaskPrioritySet+0x170>
80002964:	00000793          	li	a5,0
80002968:	06078c63          	beqz	a5,800029e0 <vTaskPrioritySet+0x1e8>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
8000296c:	fe842783          	lw	a5,-24(s0)
80002970:	00478793          	addi	a5,a5,4
80002974:	00078513          	mv	a0,a5
80002978:	83cfe0ef          	jal	ra,800009b4 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
8000297c:	fe842783          	lw	a5,-24(s0)
80002980:	02c7a703          	lw	a4,44(a5)
80002984:	0001f797          	auipc	a5,0x1f
80002988:	f9878793          	addi	a5,a5,-104 # 8002191c <uxTopReadyPriority>
8000298c:	0007a783          	lw	a5,0(a5)
80002990:	00e7fc63          	bleu	a4,a5,800029a8 <vTaskPrioritySet+0x1b0>
80002994:	fe842783          	lw	a5,-24(s0)
80002998:	02c7a703          	lw	a4,44(a5)
8000299c:	0001f797          	auipc	a5,0x1f
800029a0:	f8078793          	addi	a5,a5,-128 # 8002191c <uxTopReadyPriority>
800029a4:	00e7a023          	sw	a4,0(a5)
800029a8:	fe842783          	lw	a5,-24(s0)
800029ac:	02c7a703          	lw	a4,44(a5)
800029b0:	00070793          	mv	a5,a4
800029b4:	00279793          	slli	a5,a5,0x2
800029b8:	00e787b3          	add	a5,a5,a4
800029bc:	00279793          	slli	a5,a5,0x2
800029c0:	0001f717          	auipc	a4,0x1f
800029c4:	e8070713          	addi	a4,a4,-384 # 80021840 <__bss_start>
800029c8:	00e78733          	add	a4,a5,a4
800029cc:	fe842783          	lw	a5,-24(s0)
800029d0:	00478793          	addi	a5,a5,4
800029d4:	00078593          	mv	a1,a5
800029d8:	00070513          	mv	a0,a4
800029dc:	e7dfd0ef          	jal	ra,80000858 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired == pdTRUE )
800029e0:	fec42703          	lw	a4,-20(s0)
800029e4:	00100793          	li	a5,1
800029e8:	00f71463          	bne	a4,a5,800029f0 <vTaskPrioritySet+0x1f8>
				{
					taskYIELD_IF_USING_PREEMPTION();
800029ec:	aa1fd0ef          	jal	ra,8000048c <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
800029f0:	060020ef          	jal	ra,80004a50 <vTaskExitCritical>
	}
800029f4:	00000013          	nop
800029f8:	02c12083          	lw	ra,44(sp)
800029fc:	02812403          	lw	s0,40(sp)
80002a00:	03010113          	addi	sp,sp,48
80002a04:	00008067          	ret

80002a08 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
80002a08:	fd010113          	addi	sp,sp,-48
80002a0c:	02112623          	sw	ra,44(sp)
80002a10:	02812423          	sw	s0,40(sp)
80002a14:	03010413          	addi	s0,sp,48
80002a18:	fca42e23          	sw	a0,-36(s0)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
80002a1c:	7e1010ef          	jal	ra,800049fc <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
80002a20:	fdc42783          	lw	a5,-36(s0)
80002a24:	00079a63          	bnez	a5,80002a38 <vTaskSuspend+0x30>
80002a28:	0001e797          	auipc	a5,0x1e
80002a2c:	3f478793          	addi	a5,a5,1012 # 80020e1c <pxCurrentTCB>
80002a30:	0007a783          	lw	a5,0(a5)
80002a34:	0080006f          	j	80002a3c <vTaskSuspend+0x34>
80002a38:	fdc42783          	lw	a5,-36(s0)
80002a3c:	fef42623          	sw	a5,-20(s0)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002a40:	fec42783          	lw	a5,-20(s0)
80002a44:	00478793          	addi	a5,a5,4
80002a48:	00078513          	mv	a0,a5
80002a4c:	f69fd0ef          	jal	ra,800009b4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002a50:	fec42783          	lw	a5,-20(s0)
80002a54:	0287a783          	lw	a5,40(a5)
80002a58:	00078a63          	beqz	a5,80002a6c <vTaskSuspend+0x64>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002a5c:	fec42783          	lw	a5,-20(s0)
80002a60:	01878793          	addi	a5,a5,24
80002a64:	00078513          	mv	a0,a5
80002a68:	f4dfd0ef          	jal	ra,800009b4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
80002a6c:	fec42783          	lw	a5,-20(s0)
80002a70:	00478793          	addi	a5,a5,4
80002a74:	00078593          	mv	a1,a5
80002a78:	0001f517          	auipc	a0,0x1f
80002a7c:	e8850513          	addi	a0,a0,-376 # 80021900 <xSuspendedTaskList>
80002a80:	dd9fd0ef          	jal	ra,80000858 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
80002a84:	7cd010ef          	jal	ra,80004a50 <vTaskExitCritical>

		if( pxTCB == pxCurrentTCB )
80002a88:	0001e797          	auipc	a5,0x1e
80002a8c:	39478793          	addi	a5,a5,916 # 80020e1c <pxCurrentTCB>
80002a90:	0007a783          	lw	a5,0(a5)
80002a94:	fec42703          	lw	a4,-20(s0)
80002a98:	06f71463          	bne	a4,a5,80002b00 <vTaskSuspend+0xf8>
		{
			if( xSchedulerRunning != pdFALSE )
80002a9c:	0001f797          	auipc	a5,0x1f
80002aa0:	e8478793          	addi	a5,a5,-380 # 80021920 <xSchedulerRunning>
80002aa4:	0007a783          	lw	a5,0(a5)
80002aa8:	02078263          	beqz	a5,80002acc <vTaskSuspend+0xc4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
80002aac:	0001f797          	auipc	a5,0x1f
80002ab0:	e8c78793          	addi	a5,a5,-372 # 80021938 <uxSchedulerSuspended>
80002ab4:	0007a783          	lw	a5,0(a5)
80002ab8:	00078663          	beqz	a5,80002ac4 <vTaskSuspend+0xbc>
80002abc:	30007073          	csrci	mstatus,0
80002ac0:	0000006f          	j	80002ac0 <vTaskSuspend+0xb8>
				portYIELD_WITHIN_API();
80002ac4:	9c9fd0ef          	jal	ra,8000048c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
80002ac8:	0540006f          	j	80002b1c <vTaskSuspend+0x114>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
80002acc:	0001f797          	auipc	a5,0x1f
80002ad0:	e3478793          	addi	a5,a5,-460 # 80021900 <xSuspendedTaskList>
80002ad4:	0007a703          	lw	a4,0(a5)
80002ad8:	0001f797          	auipc	a5,0x1f
80002adc:	e3c78793          	addi	a5,a5,-452 # 80021914 <uxCurrentNumberOfTasks>
80002ae0:	0007a783          	lw	a5,0(a5)
80002ae4:	00f71a63          	bne	a4,a5,80002af8 <vTaskSuspend+0xf0>
					pxCurrentTCB = NULL;
80002ae8:	0001e797          	auipc	a5,0x1e
80002aec:	33478793          	addi	a5,a5,820 # 80020e1c <pxCurrentTCB>
80002af0:	0007a023          	sw	zero,0(a5)
	}
80002af4:	0280006f          	j	80002b1c <vTaskSuspend+0x114>
					vTaskSwitchContext();
80002af8:	32d000ef          	jal	ra,80003624 <vTaskSwitchContext>
	}
80002afc:	0200006f          	j	80002b1c <vTaskSuspend+0x114>
			if( xSchedulerRunning != pdFALSE )
80002b00:	0001f797          	auipc	a5,0x1f
80002b04:	e2078793          	addi	a5,a5,-480 # 80021920 <xSchedulerRunning>
80002b08:	0007a783          	lw	a5,0(a5)
80002b0c:	00078863          	beqz	a5,80002b1c <vTaskSuspend+0x114>
				taskENTER_CRITICAL();
80002b10:	6ed010ef          	jal	ra,800049fc <vTaskEnterCritical>
					prvResetNextTaskUnblockTime();
80002b14:	32d010ef          	jal	ra,80004640 <prvResetNextTaskUnblockTime>
				taskEXIT_CRITICAL();
80002b18:	739010ef          	jal	ra,80004a50 <vTaskExitCritical>
	}
80002b1c:	00000013          	nop
80002b20:	02c12083          	lw	ra,44(sp)
80002b24:	02812403          	lw	s0,40(sp)
80002b28:	03010113          	addi	sp,sp,48
80002b2c:	00008067          	ret

80002b30 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
80002b30:	fd010113          	addi	sp,sp,-48
80002b34:	02812623          	sw	s0,44(sp)
80002b38:	03010413          	addi	s0,sp,48
80002b3c:	fca42e23          	sw	a0,-36(s0)
	BaseType_t xReturn = pdFALSE;
80002b40:	fe042623          	sw	zero,-20(s0)
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
80002b44:	fdc42783          	lw	a5,-36(s0)
80002b48:	fef42423          	sw	a5,-24(s0)

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
80002b4c:	fdc42783          	lw	a5,-36(s0)
80002b50:	00079663          	bnez	a5,80002b5c <prvTaskIsTaskSuspended+0x2c>
80002b54:	30007073          	csrci	mstatus,0
80002b58:	0000006f          	j	80002b58 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
80002b5c:	fe842783          	lw	a5,-24(s0)
80002b60:	0147a703          	lw	a4,20(a5)
80002b64:	0001f797          	auipc	a5,0x1f
80002b68:	d9c78793          	addi	a5,a5,-612 # 80021900 <xSuspendedTaskList>
80002b6c:	00f71663          	bne	a4,a5,80002b78 <prvTaskIsTaskSuspended+0x48>
80002b70:	00100793          	li	a5,1
80002b74:	0080006f          	j	80002b7c <prvTaskIsTaskSuspended+0x4c>
80002b78:	00000793          	li	a5,0
80002b7c:	02078e63          	beqz	a5,80002bb8 <prvTaskIsTaskSuspended+0x88>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
80002b80:	fe842783          	lw	a5,-24(s0)
80002b84:	0287a703          	lw	a4,40(a5)
80002b88:	0001f797          	auipc	a5,0x1f
80002b8c:	d4c78793          	addi	a5,a5,-692 # 800218d4 <xPendingReadyList>
80002b90:	02f70463          	beq	a4,a5,80002bb8 <prvTaskIsTaskSuspended+0x88>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
80002b94:	fe842783          	lw	a5,-24(s0)
80002b98:	0287a783          	lw	a5,40(a5)
80002b9c:	00079663          	bnez	a5,80002ba8 <prvTaskIsTaskSuspended+0x78>
80002ba0:	00100793          	li	a5,1
80002ba4:	0080006f          	j	80002bac <prvTaskIsTaskSuspended+0x7c>
80002ba8:	00000793          	li	a5,0
80002bac:	00078663          	beqz	a5,80002bb8 <prvTaskIsTaskSuspended+0x88>
				{
					xReturn = pdTRUE;
80002bb0:	00100793          	li	a5,1
80002bb4:	fef42623          	sw	a5,-20(s0)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
80002bb8:	fec42783          	lw	a5,-20(s0)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
80002bbc:	00078513          	mv	a0,a5
80002bc0:	02c12403          	lw	s0,44(sp)
80002bc4:	03010113          	addi	sp,sp,48
80002bc8:	00008067          	ret

80002bcc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
80002bcc:	fd010113          	addi	sp,sp,-48
80002bd0:	02112623          	sw	ra,44(sp)
80002bd4:	02812423          	sw	s0,40(sp)
80002bd8:	03010413          	addi	s0,sp,48
80002bdc:	fca42e23          	sw	a0,-36(s0)
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
80002be0:	fdc42783          	lw	a5,-36(s0)
80002be4:	fef42623          	sw	a5,-20(s0)

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
80002be8:	fdc42783          	lw	a5,-36(s0)
80002bec:	00079663          	bnez	a5,80002bf8 <vTaskResume+0x2c>
80002bf0:	30007073          	csrci	mstatus,0
80002bf4:	0000006f          	j	80002bf4 <vTaskResume+0x28>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
80002bf8:	fec42783          	lw	a5,-20(s0)
80002bfc:	0c078463          	beqz	a5,80002cc4 <vTaskResume+0xf8>
80002c00:	0001e797          	auipc	a5,0x1e
80002c04:	21c78793          	addi	a5,a5,540 # 80020e1c <pxCurrentTCB>
80002c08:	0007a783          	lw	a5,0(a5)
80002c0c:	fec42703          	lw	a4,-20(s0)
80002c10:	0af70a63          	beq	a4,a5,80002cc4 <vTaskResume+0xf8>
		{
			taskENTER_CRITICAL();
80002c14:	5e9010ef          	jal	ra,800049fc <vTaskEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
80002c18:	fec42503          	lw	a0,-20(s0)
80002c1c:	f15ff0ef          	jal	ra,80002b30 <prvTaskIsTaskSuspended>
80002c20:	00050713          	mv	a4,a0
80002c24:	00100793          	li	a5,1
80002c28:	08f71c63          	bne	a4,a5,80002cc0 <vTaskResume+0xf4>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
80002c2c:	fec42783          	lw	a5,-20(s0)
80002c30:	00478793          	addi	a5,a5,4
80002c34:	00078513          	mv	a0,a5
80002c38:	d7dfd0ef          	jal	ra,800009b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
80002c3c:	fec42783          	lw	a5,-20(s0)
80002c40:	02c7a703          	lw	a4,44(a5)
80002c44:	0001f797          	auipc	a5,0x1f
80002c48:	cd878793          	addi	a5,a5,-808 # 8002191c <uxTopReadyPriority>
80002c4c:	0007a783          	lw	a5,0(a5)
80002c50:	00e7fc63          	bleu	a4,a5,80002c68 <vTaskResume+0x9c>
80002c54:	fec42783          	lw	a5,-20(s0)
80002c58:	02c7a703          	lw	a4,44(a5)
80002c5c:	0001f797          	auipc	a5,0x1f
80002c60:	cc078793          	addi	a5,a5,-832 # 8002191c <uxTopReadyPriority>
80002c64:	00e7a023          	sw	a4,0(a5)
80002c68:	fec42783          	lw	a5,-20(s0)
80002c6c:	02c7a703          	lw	a4,44(a5)
80002c70:	00070793          	mv	a5,a4
80002c74:	00279793          	slli	a5,a5,0x2
80002c78:	00e787b3          	add	a5,a5,a4
80002c7c:	00279793          	slli	a5,a5,0x2
80002c80:	0001f717          	auipc	a4,0x1f
80002c84:	bc070713          	addi	a4,a4,-1088 # 80021840 <__bss_start>
80002c88:	00e78733          	add	a4,a5,a4
80002c8c:	fec42783          	lw	a5,-20(s0)
80002c90:	00478793          	addi	a5,a5,4
80002c94:	00078593          	mv	a1,a5
80002c98:	00070513          	mv	a0,a4
80002c9c:	bbdfd0ef          	jal	ra,80000858 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80002ca0:	fec42783          	lw	a5,-20(s0)
80002ca4:	02c7a703          	lw	a4,44(a5)
80002ca8:	0001e797          	auipc	a5,0x1e
80002cac:	17478793          	addi	a5,a5,372 # 80020e1c <pxCurrentTCB>
80002cb0:	0007a783          	lw	a5,0(a5)
80002cb4:	02c7a783          	lw	a5,44(a5)
80002cb8:	00f76463          	bltu	a4,a5,80002cc0 <vTaskResume+0xf4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
80002cbc:	fd0fd0ef          	jal	ra,8000048c <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
80002cc0:	591010ef          	jal	ra,80004a50 <vTaskExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002cc4:	00000013          	nop
80002cc8:	02c12083          	lw	ra,44(sp)
80002ccc:	02812403          	lw	s0,40(sp)
80002cd0:	03010113          	addi	sp,sp,48
80002cd4:	00008067          	ret

80002cd8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
80002cd8:	fd010113          	addi	sp,sp,-48
80002cdc:	02112623          	sw	ra,44(sp)
80002ce0:	02812423          	sw	s0,40(sp)
80002ce4:	03010413          	addi	s0,sp,48
80002ce8:	fca42e23          	sw	a0,-36(s0)
	BaseType_t xYieldRequired = pdFALSE;
80002cec:	fe042623          	sw	zero,-20(s0)
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
80002cf0:	fdc42783          	lw	a5,-36(s0)
80002cf4:	fef42423          	sw	a5,-24(s0)
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
80002cf8:	fdc42783          	lw	a5,-36(s0)
80002cfc:	00079663          	bnez	a5,80002d08 <xTaskResumeFromISR+0x30>
80002d00:	30007073          	csrci	mstatus,0
80002d04:	0000006f          	j	80002d04 <xTaskResumeFromISR+0x2c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80002d08:	9cdfd0ef          	jal	ra,800006d4 <vPortSetInterruptMask>
80002d0c:	00050793          	mv	a5,a0
80002d10:	fef42223          	sw	a5,-28(s0)
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
80002d14:	fe842503          	lw	a0,-24(s0)
80002d18:	e19ff0ef          	jal	ra,80002b30 <prvTaskIsTaskSuspended>
80002d1c:	00050713          	mv	a4,a0
80002d20:	00100793          	li	a5,1
80002d24:	0cf71463          	bne	a4,a5,80002dec <xTaskResumeFromISR+0x114>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002d28:	0001f797          	auipc	a5,0x1f
80002d2c:	c1078793          	addi	a5,a5,-1008 # 80021938 <uxSchedulerSuspended>
80002d30:	0007a783          	lw	a5,0(a5)
80002d34:	0a079063          	bnez	a5,80002dd4 <xTaskResumeFromISR+0xfc>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80002d38:	fe842783          	lw	a5,-24(s0)
80002d3c:	02c7a703          	lw	a4,44(a5)
80002d40:	0001e797          	auipc	a5,0x1e
80002d44:	0dc78793          	addi	a5,a5,220 # 80020e1c <pxCurrentTCB>
80002d48:	0007a783          	lw	a5,0(a5)
80002d4c:	02c7a783          	lw	a5,44(a5)
80002d50:	00f76663          	bltu	a4,a5,80002d5c <xTaskResumeFromISR+0x84>
					{
						xYieldRequired = pdTRUE;
80002d54:	00100793          	li	a5,1
80002d58:	fef42623          	sw	a5,-20(s0)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
80002d5c:	fe842783          	lw	a5,-24(s0)
80002d60:	00478793          	addi	a5,a5,4
80002d64:	00078513          	mv	a0,a5
80002d68:	c4dfd0ef          	jal	ra,800009b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
80002d6c:	fe842783          	lw	a5,-24(s0)
80002d70:	02c7a703          	lw	a4,44(a5)
80002d74:	0001f797          	auipc	a5,0x1f
80002d78:	ba878793          	addi	a5,a5,-1112 # 8002191c <uxTopReadyPriority>
80002d7c:	0007a783          	lw	a5,0(a5)
80002d80:	00e7fc63          	bleu	a4,a5,80002d98 <xTaskResumeFromISR+0xc0>
80002d84:	fe842783          	lw	a5,-24(s0)
80002d88:	02c7a703          	lw	a4,44(a5)
80002d8c:	0001f797          	auipc	a5,0x1f
80002d90:	b9078793          	addi	a5,a5,-1136 # 8002191c <uxTopReadyPriority>
80002d94:	00e7a023          	sw	a4,0(a5)
80002d98:	fe842783          	lw	a5,-24(s0)
80002d9c:	02c7a703          	lw	a4,44(a5)
80002da0:	00070793          	mv	a5,a4
80002da4:	00279793          	slli	a5,a5,0x2
80002da8:	00e787b3          	add	a5,a5,a4
80002dac:	00279793          	slli	a5,a5,0x2
80002db0:	0001f717          	auipc	a4,0x1f
80002db4:	a9070713          	addi	a4,a4,-1392 # 80021840 <__bss_start>
80002db8:	00e78733          	add	a4,a5,a4
80002dbc:	fe842783          	lw	a5,-24(s0)
80002dc0:	00478793          	addi	a5,a5,4
80002dc4:	00078593          	mv	a1,a5
80002dc8:	00070513          	mv	a0,a4
80002dcc:	a8dfd0ef          	jal	ra,80000858 <vListInsertEnd>
80002dd0:	01c0006f          	j	80002dec <xTaskResumeFromISR+0x114>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
80002dd4:	fe842783          	lw	a5,-24(s0)
80002dd8:	01878793          	addi	a5,a5,24
80002ddc:	00078593          	mv	a1,a5
80002de0:	0001f517          	auipc	a0,0x1f
80002de4:	af450513          	addi	a0,a0,-1292 # 800218d4 <xPendingReadyList>
80002de8:	a71fd0ef          	jal	ra,80000858 <vListInsertEnd>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
80002dec:	fe442783          	lw	a5,-28(s0)
80002df0:	00078513          	mv	a0,a5
80002df4:	8b9fd0ef          	jal	ra,800006ac <vPortClearInterruptMask>

		return xYieldRequired;
80002df8:	fec42783          	lw	a5,-20(s0)
	}
80002dfc:	00078513          	mv	a0,a5
80002e00:	02c12083          	lw	ra,44(sp)
80002e04:	02812403          	lw	s0,40(sp)
80002e08:	03010113          	addi	sp,sp,48
80002e0c:	00008067          	ret

80002e10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
80002e10:	fe010113          	addi	sp,sp,-32
80002e14:	00112e23          	sw	ra,28(sp)
80002e18:	00812c23          	sw	s0,24(sp)
80002e1c:	02010413          	addi	s0,sp,32
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
80002e20:	00000893          	li	a7,0
80002e24:	00000813          	li	a6,0
80002e28:	00000793          	li	a5,0
80002e2c:	00000713          	li	a4,0
80002e30:	00000693          	li	a3,0
80002e34:	40000613          	li	a2,1024
80002e38:	0001d597          	auipc	a1,0x1d
80002e3c:	1c858593          	addi	a1,a1,456 # 80020000 <__rodata_start>
80002e40:	00001517          	auipc	a0,0x1
80002e44:	0b050513          	addi	a0,a0,176 # 80003ef0 <prvIdleTask>
80002e48:	a60ff0ef          	jal	ra,800020a8 <xTaskGenericCreate>
80002e4c:	fea42623          	sw	a0,-20(s0)
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
80002e50:	fec42703          	lw	a4,-20(s0)
80002e54:	00100793          	li	a5,1
80002e58:	00f71663          	bne	a4,a5,80002e64 <vTaskStartScheduler+0x54>
		{
			xReturn = xTimerCreateTimerTask();
80002e5c:	5e0020ef          	jal	ra,8000543c <xTimerCreateTimerTask>
80002e60:	fea42623          	sw	a0,-20(s0)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
80002e64:	fec42703          	lw	a4,-20(s0)
80002e68:	00100793          	li	a5,1
80002e6c:	02f71e63          	bne	a4,a5,80002ea8 <vTaskStartScheduler+0x98>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
80002e70:	30007073          	csrci	mstatus,0
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
80002e74:	0001f797          	auipc	a5,0x1f
80002e78:	ac078793          	addi	a5,a5,-1344 # 80021934 <xNextTaskUnblockTime>
80002e7c:	fff00713          	li	a4,-1
80002e80:	00e7a023          	sw	a4,0(a5)
		xSchedulerRunning = pdTRUE;
80002e84:	0001f797          	auipc	a5,0x1f
80002e88:	a9c78793          	addi	a5,a5,-1380 # 80021920 <xSchedulerRunning>
80002e8c:	00100713          	li	a4,1
80002e90:	00e7a023          	sw	a4,0(a5)
		xTickCount = ( TickType_t ) 0U;
80002e94:	0001f797          	auipc	a5,0x1f
80002e98:	a8478793          	addi	a5,a5,-1404 # 80021918 <xTickCount>
80002e9c:	0007a023          	sw	zero,0(a5)
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
80002ea0:	d48fd0ef          	jal	ra,800003e8 <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
80002ea4:	0140006f          	j	80002eb8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn );
80002ea8:	fec42783          	lw	a5,-20(s0)
80002eac:	00079663          	bnez	a5,80002eb8 <vTaskStartScheduler+0xa8>
80002eb0:	30007073          	csrci	mstatus,0
80002eb4:	0000006f          	j	80002eb4 <vTaskStartScheduler+0xa4>
}
80002eb8:	00000013          	nop
80002ebc:	01c12083          	lw	ra,28(sp)
80002ec0:	01812403          	lw	s0,24(sp)
80002ec4:	02010113          	addi	sp,sp,32
80002ec8:	00008067          	ret

80002ecc <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
80002ecc:	ff010113          	addi	sp,sp,-16
80002ed0:	00112623          	sw	ra,12(sp)
80002ed4:	00812423          	sw	s0,8(sp)
80002ed8:	01010413          	addi	s0,sp,16
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
80002edc:	30007073          	csrci	mstatus,0
	xSchedulerRunning = pdFALSE;
80002ee0:	0001f797          	auipc	a5,0x1f
80002ee4:	a4078793          	addi	a5,a5,-1472 # 80021920 <xSchedulerRunning>
80002ee8:	0007a023          	sw	zero,0(a5)
	vPortEndScheduler();
80002eec:	d9cfd0ef          	jal	ra,80000488 <vPortEndScheduler>
}
80002ef0:	00000013          	nop
80002ef4:	00c12083          	lw	ra,12(sp)
80002ef8:	00812403          	lw	s0,8(sp)
80002efc:	01010113          	addi	sp,sp,16
80002f00:	00008067          	ret

80002f04 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
80002f04:	ff010113          	addi	sp,sp,-16
80002f08:	00812623          	sw	s0,12(sp)
80002f0c:	01010413          	addi	s0,sp,16
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
80002f10:	0001f797          	auipc	a5,0x1f
80002f14:	a2878793          	addi	a5,a5,-1496 # 80021938 <uxSchedulerSuspended>
80002f18:	0007a783          	lw	a5,0(a5)
80002f1c:	00178713          	addi	a4,a5,1
80002f20:	0001f797          	auipc	a5,0x1f
80002f24:	a1878793          	addi	a5,a5,-1512 # 80021938 <uxSchedulerSuspended>
80002f28:	00e7a023          	sw	a4,0(a5)
}
80002f2c:	00000013          	nop
80002f30:	00c12403          	lw	s0,12(sp)
80002f34:	01010113          	addi	sp,sp,16
80002f38:	00008067          	ret

80002f3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
80002f3c:	fe010113          	addi	sp,sp,-32
80002f40:	00112e23          	sw	ra,28(sp)
80002f44:	00812c23          	sw	s0,24(sp)
80002f48:	02010413          	addi	s0,sp,32
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
80002f4c:	fe042623          	sw	zero,-20(s0)

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
80002f50:	0001f797          	auipc	a5,0x1f
80002f54:	9e878793          	addi	a5,a5,-1560 # 80021938 <uxSchedulerSuspended>
80002f58:	0007a783          	lw	a5,0(a5)
80002f5c:	00079663          	bnez	a5,80002f68 <xTaskResumeAll+0x2c>
80002f60:	30007073          	csrci	mstatus,0
80002f64:	0000006f          	j	80002f64 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
80002f68:	295010ef          	jal	ra,800049fc <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
80002f6c:	0001f797          	auipc	a5,0x1f
80002f70:	9cc78793          	addi	a5,a5,-1588 # 80021938 <uxSchedulerSuspended>
80002f74:	0007a783          	lw	a5,0(a5)
80002f78:	fff78713          	addi	a4,a5,-1
80002f7c:	0001f797          	auipc	a5,0x1f
80002f80:	9bc78793          	addi	a5,a5,-1604 # 80021938 <uxSchedulerSuspended>
80002f84:	00e7a023          	sw	a4,0(a5)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002f88:	0001f797          	auipc	a5,0x1f
80002f8c:	9b078793          	addi	a5,a5,-1616 # 80021938 <uxSchedulerSuspended>
80002f90:	0007a783          	lw	a5,0(a5)
80002f94:	16079463          	bnez	a5,800030fc <xTaskResumeAll+0x1c0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
80002f98:	0001f797          	auipc	a5,0x1f
80002f9c:	97c78793          	addi	a5,a5,-1668 # 80021914 <uxCurrentNumberOfTasks>
80002fa0:	0007a783          	lw	a5,0(a5)
80002fa4:	14078c63          	beqz	a5,800030fc <xTaskResumeAll+0x1c0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002fa8:	0c80006f          	j	80003070 <xTaskResumeAll+0x134>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
80002fac:	0001f797          	auipc	a5,0x1f
80002fb0:	92878793          	addi	a5,a5,-1752 # 800218d4 <xPendingReadyList>
80002fb4:	00c7a783          	lw	a5,12(a5)
80002fb8:	00c7a783          	lw	a5,12(a5)
80002fbc:	fef42423          	sw	a5,-24(s0)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002fc0:	fe842783          	lw	a5,-24(s0)
80002fc4:	01878793          	addi	a5,a5,24
80002fc8:	00078513          	mv	a0,a5
80002fcc:	9e9fd0ef          	jal	ra,800009b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002fd0:	fe842783          	lw	a5,-24(s0)
80002fd4:	00478793          	addi	a5,a5,4
80002fd8:	00078513          	mv	a0,a5
80002fdc:	9d9fd0ef          	jal	ra,800009b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
80002fe0:	fe842783          	lw	a5,-24(s0)
80002fe4:	02c7a703          	lw	a4,44(a5)
80002fe8:	0001f797          	auipc	a5,0x1f
80002fec:	93478793          	addi	a5,a5,-1740 # 8002191c <uxTopReadyPriority>
80002ff0:	0007a783          	lw	a5,0(a5)
80002ff4:	00e7fc63          	bleu	a4,a5,8000300c <xTaskResumeAll+0xd0>
80002ff8:	fe842783          	lw	a5,-24(s0)
80002ffc:	02c7a703          	lw	a4,44(a5)
80003000:	0001f797          	auipc	a5,0x1f
80003004:	91c78793          	addi	a5,a5,-1764 # 8002191c <uxTopReadyPriority>
80003008:	00e7a023          	sw	a4,0(a5)
8000300c:	fe842783          	lw	a5,-24(s0)
80003010:	02c7a703          	lw	a4,44(a5)
80003014:	00070793          	mv	a5,a4
80003018:	00279793          	slli	a5,a5,0x2
8000301c:	00e787b3          	add	a5,a5,a4
80003020:	00279793          	slli	a5,a5,0x2
80003024:	0001f717          	auipc	a4,0x1f
80003028:	81c70713          	addi	a4,a4,-2020 # 80021840 <__bss_start>
8000302c:	00e78733          	add	a4,a5,a4
80003030:	fe842783          	lw	a5,-24(s0)
80003034:	00478793          	addi	a5,a5,4
80003038:	00078593          	mv	a1,a5
8000303c:	00070513          	mv	a0,a4
80003040:	819fd0ef          	jal	ra,80000858 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80003044:	fe842783          	lw	a5,-24(s0)
80003048:	02c7a703          	lw	a4,44(a5)
8000304c:	0001e797          	auipc	a5,0x1e
80003050:	dd078793          	addi	a5,a5,-560 # 80020e1c <pxCurrentTCB>
80003054:	0007a783          	lw	a5,0(a5)
80003058:	02c7a783          	lw	a5,44(a5)
8000305c:	00f76a63          	bltu	a4,a5,80003070 <xTaskResumeAll+0x134>
					{
						xYieldPending = pdTRUE;
80003060:	0001f797          	auipc	a5,0x1f
80003064:	8c878793          	addi	a5,a5,-1848 # 80021928 <xYieldPending>
80003068:	00100713          	li	a4,1
8000306c:	00e7a023          	sw	a4,0(a5)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80003070:	0001f797          	auipc	a5,0x1f
80003074:	86478793          	addi	a5,a5,-1948 # 800218d4 <xPendingReadyList>
80003078:	0007a783          	lw	a5,0(a5)
8000307c:	f20798e3          	bnez	a5,80002fac <xTaskResumeAll+0x70>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
80003080:	0001f797          	auipc	a5,0x1f
80003084:	8a478793          	addi	a5,a5,-1884 # 80021924 <uxPendedTicks>
80003088:	0007a783          	lw	a5,0(a5)
8000308c:	04078863          	beqz	a5,800030dc <xTaskResumeAll+0x1a0>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
80003090:	03c0006f          	j	800030cc <xTaskResumeAll+0x190>
					{
						if( xTaskIncrementTick() != pdFALSE )
80003094:	2ec000ef          	jal	ra,80003380 <xTaskIncrementTick>
80003098:	00050793          	mv	a5,a0
8000309c:	00078a63          	beqz	a5,800030b0 <xTaskResumeAll+0x174>
						{
							xYieldPending = pdTRUE;
800030a0:	0001f797          	auipc	a5,0x1f
800030a4:	88878793          	addi	a5,a5,-1912 # 80021928 <xYieldPending>
800030a8:	00100713          	li	a4,1
800030ac:	00e7a023          	sw	a4,0(a5)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
800030b0:	0001f797          	auipc	a5,0x1f
800030b4:	87478793          	addi	a5,a5,-1932 # 80021924 <uxPendedTicks>
800030b8:	0007a783          	lw	a5,0(a5)
800030bc:	fff78713          	addi	a4,a5,-1
800030c0:	0001f797          	auipc	a5,0x1f
800030c4:	86478793          	addi	a5,a5,-1948 # 80021924 <uxPendedTicks>
800030c8:	00e7a023          	sw	a4,0(a5)
					while( uxPendedTicks > ( UBaseType_t ) 0U )
800030cc:	0001f797          	auipc	a5,0x1f
800030d0:	85878793          	addi	a5,a5,-1960 # 80021924 <uxPendedTicks>
800030d4:	0007a783          	lw	a5,0(a5)
800030d8:	fa079ee3          	bnez	a5,80003094 <xTaskResumeAll+0x158>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
800030dc:	0001f797          	auipc	a5,0x1f
800030e0:	84c78793          	addi	a5,a5,-1972 # 80021928 <xYieldPending>
800030e4:	0007a703          	lw	a4,0(a5)
800030e8:	00100793          	li	a5,1
800030ec:	00f71863          	bne	a4,a5,800030fc <xTaskResumeAll+0x1c0>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
800030f0:	00100793          	li	a5,1
800030f4:	fef42623          	sw	a5,-20(s0)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
800030f8:	b94fd0ef          	jal	ra,8000048c <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
800030fc:	155010ef          	jal	ra,80004a50 <vTaskExitCritical>

	return xAlreadyYielded;
80003100:	fec42783          	lw	a5,-20(s0)
}
80003104:	00078513          	mv	a0,a5
80003108:	01c12083          	lw	ra,28(sp)
8000310c:	01812403          	lw	s0,24(sp)
80003110:	02010113          	addi	sp,sp,32
80003114:	00008067          	ret

80003118 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
80003118:	fe010113          	addi	sp,sp,-32
8000311c:	00112e23          	sw	ra,28(sp)
80003120:	00812c23          	sw	s0,24(sp)
80003124:	02010413          	addi	s0,sp,32
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
80003128:	0d5010ef          	jal	ra,800049fc <vTaskEnterCritical>
	{
		xTicks = xTickCount;
8000312c:	0001e797          	auipc	a5,0x1e
80003130:	7ec78793          	addi	a5,a5,2028 # 80021918 <xTickCount>
80003134:	0007a783          	lw	a5,0(a5)
80003138:	fef42623          	sw	a5,-20(s0)
	}
	portTICK_TYPE_EXIT_CRITICAL();
8000313c:	115010ef          	jal	ra,80004a50 <vTaskExitCritical>

	return xTicks;
80003140:	fec42783          	lw	a5,-20(s0)
}
80003144:	00078513          	mv	a0,a5
80003148:	01c12083          	lw	ra,28(sp)
8000314c:	01812403          	lw	s0,24(sp)
80003150:	02010113          	addi	sp,sp,32
80003154:	00008067          	ret

80003158 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
80003158:	fe010113          	addi	sp,sp,-32
8000315c:	00112e23          	sw	ra,28(sp)
80003160:	00812c23          	sw	s0,24(sp)
80003164:	02010413          	addi	s0,sp,32
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
80003168:	d6cfd0ef          	jal	ra,800006d4 <vPortSetInterruptMask>
8000316c:	00050793          	mv	a5,a0
80003170:	fef42623          	sw	a5,-20(s0)
	{
		xReturn = xTickCount;
80003174:	0001e797          	auipc	a5,0x1e
80003178:	7a478793          	addi	a5,a5,1956 # 80021918 <xTickCount>
8000317c:	0007a783          	lw	a5,0(a5)
80003180:	fef42423          	sw	a5,-24(s0)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
80003184:	fec42783          	lw	a5,-20(s0)
80003188:	00078513          	mv	a0,a5
8000318c:	d20fd0ef          	jal	ra,800006ac <vPortClearInterruptMask>

	return xReturn;
80003190:	fe842783          	lw	a5,-24(s0)
}
80003194:	00078513          	mv	a0,a5
80003198:	01c12083          	lw	ra,28(sp)
8000319c:	01812403          	lw	s0,24(sp)
800031a0:	02010113          	addi	sp,sp,32
800031a4:	00008067          	ret

800031a8 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
800031a8:	ff010113          	addi	sp,sp,-16
800031ac:	00812623          	sw	s0,12(sp)
800031b0:	01010413          	addi	s0,sp,16
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
800031b4:	0001e797          	auipc	a5,0x1e
800031b8:	76078793          	addi	a5,a5,1888 # 80021914 <uxCurrentNumberOfTasks>
800031bc:	0007a783          	lw	a5,0(a5)
}
800031c0:	00078513          	mv	a0,a5
800031c4:	00c12403          	lw	s0,12(sp)
800031c8:	01010113          	addi	sp,sp,16
800031cc:	00008067          	ret

800031d0 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
800031d0:	fd010113          	addi	sp,sp,-48
800031d4:	02112623          	sw	ra,44(sp)
800031d8:	02812423          	sw	s0,40(sp)
800031dc:	03010413          	addi	s0,sp,48
800031e0:	fca42e23          	sw	a0,-36(s0)
800031e4:	fcb42c23          	sw	a1,-40(s0)
800031e8:	fcc42a23          	sw	a2,-44(s0)
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
800031ec:	fe042623          	sw	zero,-20(s0)
800031f0:	00500793          	li	a5,5
800031f4:	fef42423          	sw	a5,-24(s0)

		vTaskSuspendAll();
800031f8:	d0dff0ef          	jal	ra,80002f04 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
800031fc:	0001e797          	auipc	a5,0x1e
80003200:	71878793          	addi	a5,a5,1816 # 80021914 <uxCurrentNumberOfTasks>
80003204:	0007a783          	lw	a5,0(a5)
80003208:	fd842703          	lw	a4,-40(s0)
8000320c:	14f76c63          	bltu	a4,a5,80003364 <uxTaskGetSystemState+0x194>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
80003210:	fe842783          	lw	a5,-24(s0)
80003214:	fff78793          	addi	a5,a5,-1
80003218:	fef42423          	sw	a5,-24(s0)
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
8000321c:	fec42783          	lw	a5,-20(s0)
80003220:	00579793          	slli	a5,a5,0x5
80003224:	fdc42703          	lw	a4,-36(s0)
80003228:	00f706b3          	add	a3,a4,a5
8000322c:	fe842703          	lw	a4,-24(s0)
80003230:	00070793          	mv	a5,a4
80003234:	00279793          	slli	a5,a5,0x2
80003238:	00e787b3          	add	a5,a5,a4
8000323c:	00279793          	slli	a5,a5,0x2
80003240:	0001e717          	auipc	a4,0x1e
80003244:	60070713          	addi	a4,a4,1536 # 80021840 <__bss_start>
80003248:	00e787b3          	add	a5,a5,a4
8000324c:	00100613          	li	a2,1
80003250:	00078593          	mv	a1,a5
80003254:	00068513          	mv	a0,a3
80003258:	128010ef          	jal	ra,80004380 <prvListTaskWithinSingleList>
8000325c:	00050713          	mv	a4,a0
80003260:	fec42783          	lw	a5,-20(s0)
80003264:	00e787b3          	add	a5,a5,a4
80003268:	fef42623          	sw	a5,-20(s0)

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
8000326c:	fe842783          	lw	a5,-24(s0)
80003270:	fa0790e3          	bnez	a5,80003210 <uxTaskGetSystemState+0x40>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
80003274:	fec42783          	lw	a5,-20(s0)
80003278:	00579793          	slli	a5,a5,0x5
8000327c:	fdc42703          	lw	a4,-36(s0)
80003280:	00f70733          	add	a4,a4,a5
80003284:	0001e797          	auipc	a5,0x1e
80003288:	64878793          	addi	a5,a5,1608 # 800218cc <pxDelayedTaskList>
8000328c:	0007a783          	lw	a5,0(a5)
80003290:	00200613          	li	a2,2
80003294:	00078593          	mv	a1,a5
80003298:	00070513          	mv	a0,a4
8000329c:	0e4010ef          	jal	ra,80004380 <prvListTaskWithinSingleList>
800032a0:	00050713          	mv	a4,a0
800032a4:	fec42783          	lw	a5,-20(s0)
800032a8:	00e787b3          	add	a5,a5,a4
800032ac:	fef42623          	sw	a5,-20(s0)
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
800032b0:	fec42783          	lw	a5,-20(s0)
800032b4:	00579793          	slli	a5,a5,0x5
800032b8:	fdc42703          	lw	a4,-36(s0)
800032bc:	00f70733          	add	a4,a4,a5
800032c0:	0001e797          	auipc	a5,0x1e
800032c4:	61078793          	addi	a5,a5,1552 # 800218d0 <pxOverflowDelayedTaskList>
800032c8:	0007a783          	lw	a5,0(a5)
800032cc:	00200613          	li	a2,2
800032d0:	00078593          	mv	a1,a5
800032d4:	00070513          	mv	a0,a4
800032d8:	0a8010ef          	jal	ra,80004380 <prvListTaskWithinSingleList>
800032dc:	00050713          	mv	a4,a0
800032e0:	fec42783          	lw	a5,-20(s0)
800032e4:	00e787b3          	add	a5,a5,a4
800032e8:	fef42623          	sw	a5,-20(s0)

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
800032ec:	fec42783          	lw	a5,-20(s0)
800032f0:	00579793          	slli	a5,a5,0x5
800032f4:	fdc42703          	lw	a4,-36(s0)
800032f8:	00f707b3          	add	a5,a4,a5
800032fc:	00400613          	li	a2,4
80003300:	0001e597          	auipc	a1,0x1e
80003304:	5e858593          	addi	a1,a1,1512 # 800218e8 <xTasksWaitingTermination>
80003308:	00078513          	mv	a0,a5
8000330c:	074010ef          	jal	ra,80004380 <prvListTaskWithinSingleList>
80003310:	00050713          	mv	a4,a0
80003314:	fec42783          	lw	a5,-20(s0)
80003318:	00e787b3          	add	a5,a5,a4
8000331c:	fef42623          	sw	a5,-20(s0)

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
80003320:	fec42783          	lw	a5,-20(s0)
80003324:	00579793          	slli	a5,a5,0x5
80003328:	fdc42703          	lw	a4,-36(s0)
8000332c:	00f707b3          	add	a5,a4,a5
80003330:	00300613          	li	a2,3
80003334:	0001e597          	auipc	a1,0x1e
80003338:	5cc58593          	addi	a1,a1,1484 # 80021900 <xSuspendedTaskList>
8000333c:	00078513          	mv	a0,a5
80003340:	040010ef          	jal	ra,80004380 <prvListTaskWithinSingleList>
80003344:	00050713          	mv	a4,a0
80003348:	fec42783          	lw	a5,-20(s0)
8000334c:	00e787b3          	add	a5,a5,a4
80003350:	fef42623          	sw	a5,-20(s0)
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
80003354:	fd442783          	lw	a5,-44(s0)
80003358:	00078663          	beqz	a5,80003364 <uxTaskGetSystemState+0x194>
					{
						*pulTotalRunTime = 0;
8000335c:	fd442783          	lw	a5,-44(s0)
80003360:	0007a023          	sw	zero,0(a5)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
80003364:	bd9ff0ef          	jal	ra,80002f3c <xTaskResumeAll>

		return uxTask;
80003368:	fec42783          	lw	a5,-20(s0)
	}
8000336c:	00078513          	mv	a0,a5
80003370:	02c12083          	lw	ra,44(sp)
80003374:	02812403          	lw	s0,40(sp)
80003378:	03010113          	addi	sp,sp,48
8000337c:	00008067          	ret

80003380 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
80003380:	fd010113          	addi	sp,sp,-48
80003384:	02112623          	sw	ra,44(sp)
80003388:	02812423          	sw	s0,40(sp)
8000338c:	03010413          	addi	s0,sp,48
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
80003390:	fe042623          	sw	zero,-20(s0)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80003394:	0001e797          	auipc	a5,0x1e
80003398:	5a478793          	addi	a5,a5,1444 # 80021938 <uxSchedulerSuspended>
8000339c:	0007a783          	lw	a5,0(a5)
800033a0:	22079c63          	bnez	a5,800035d8 <xTaskIncrementTick+0x258>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
800033a4:	0001e797          	auipc	a5,0x1e
800033a8:	57478793          	addi	a5,a5,1396 # 80021918 <xTickCount>
800033ac:	0007a783          	lw	a5,0(a5)
800033b0:	00178713          	addi	a4,a5,1
800033b4:	0001e797          	auipc	a5,0x1e
800033b8:	56478793          	addi	a5,a5,1380 # 80021918 <xTickCount>
800033bc:	00e7a023          	sw	a4,0(a5)

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
800033c0:	0001e797          	auipc	a5,0x1e
800033c4:	55878793          	addi	a5,a5,1368 # 80021918 <xTickCount>
800033c8:	0007a783          	lw	a5,0(a5)
800033cc:	fef42423          	sw	a5,-24(s0)

			if( xConstTickCount == ( TickType_t ) 0U )
800033d0:	fe842783          	lw	a5,-24(s0)
800033d4:	06079c63          	bnez	a5,8000344c <xTaskIncrementTick+0xcc>
			{
				taskSWITCH_DELAYED_LISTS();
800033d8:	0001e797          	auipc	a5,0x1e
800033dc:	4f478793          	addi	a5,a5,1268 # 800218cc <pxDelayedTaskList>
800033e0:	0007a783          	lw	a5,0(a5)
800033e4:	0007a783          	lw	a5,0(a5)
800033e8:	00078663          	beqz	a5,800033f4 <xTaskIncrementTick+0x74>
800033ec:	30007073          	csrci	mstatus,0
800033f0:	0000006f          	j	800033f0 <xTaskIncrementTick+0x70>
800033f4:	0001e797          	auipc	a5,0x1e
800033f8:	4d878793          	addi	a5,a5,1240 # 800218cc <pxDelayedTaskList>
800033fc:	0007a783          	lw	a5,0(a5)
80003400:	fef42223          	sw	a5,-28(s0)
80003404:	0001e797          	auipc	a5,0x1e
80003408:	4cc78793          	addi	a5,a5,1228 # 800218d0 <pxOverflowDelayedTaskList>
8000340c:	0007a703          	lw	a4,0(a5)
80003410:	0001e797          	auipc	a5,0x1e
80003414:	4bc78793          	addi	a5,a5,1212 # 800218cc <pxDelayedTaskList>
80003418:	00e7a023          	sw	a4,0(a5)
8000341c:	0001e797          	auipc	a5,0x1e
80003420:	4b478793          	addi	a5,a5,1204 # 800218d0 <pxOverflowDelayedTaskList>
80003424:	fe442703          	lw	a4,-28(s0)
80003428:	00e7a023          	sw	a4,0(a5)
8000342c:	0001e797          	auipc	a5,0x1e
80003430:	50078793          	addi	a5,a5,1280 # 8002192c <xNumOfOverflows>
80003434:	0007a783          	lw	a5,0(a5)
80003438:	00178713          	addi	a4,a5,1
8000343c:	0001e797          	auipc	a5,0x1e
80003440:	4f078793          	addi	a5,a5,1264 # 8002192c <xNumOfOverflows>
80003444:	00e7a023          	sw	a4,0(a5)
80003448:	1f8010ef          	jal	ra,80004640 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
8000344c:	0001e797          	auipc	a5,0x1e
80003450:	4e878793          	addi	a5,a5,1256 # 80021934 <xNextTaskUnblockTime>
80003454:	0007a783          	lw	a5,0(a5)
80003458:	fe842703          	lw	a4,-24(s0)
8000345c:	12f76c63          	bltu	a4,a5,80003594 <xTaskIncrementTick+0x214>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80003460:	0001e797          	auipc	a5,0x1e
80003464:	46c78793          	addi	a5,a5,1132 # 800218cc <pxDelayedTaskList>
80003468:	0007a783          	lw	a5,0(a5)
8000346c:	0007a783          	lw	a5,0(a5)
80003470:	00079663          	bnez	a5,8000347c <xTaskIncrementTick+0xfc>
80003474:	00100793          	li	a5,1
80003478:	0080006f          	j	80003480 <xTaskIncrementTick+0x100>
8000347c:	00000793          	li	a5,0
80003480:	00078c63          	beqz	a5,80003498 <xTaskIncrementTick+0x118>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
80003484:	0001e797          	auipc	a5,0x1e
80003488:	4b078793          	addi	a5,a5,1200 # 80021934 <xNextTaskUnblockTime>
8000348c:	fff00713          	li	a4,-1
80003490:	00e7a023          	sw	a4,0(a5)
						break;
80003494:	1000006f          	j	80003594 <xTaskIncrementTick+0x214>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80003498:	0001e797          	auipc	a5,0x1e
8000349c:	43478793          	addi	a5,a5,1076 # 800218cc <pxDelayedTaskList>
800034a0:	0007a783          	lw	a5,0(a5)
800034a4:	00c7a783          	lw	a5,12(a5)
800034a8:	00c7a783          	lw	a5,12(a5)
800034ac:	fef42023          	sw	a5,-32(s0)
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
800034b0:	fe042783          	lw	a5,-32(s0)
800034b4:	0047a783          	lw	a5,4(a5)
800034b8:	fcf42e23          	sw	a5,-36(s0)

						if( xConstTickCount < xItemValue )
800034bc:	fe842703          	lw	a4,-24(s0)
800034c0:	fdc42783          	lw	a5,-36(s0)
800034c4:	00f77c63          	bleu	a5,a4,800034dc <xTaskIncrementTick+0x15c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
800034c8:	0001e797          	auipc	a5,0x1e
800034cc:	46c78793          	addi	a5,a5,1132 # 80021934 <xNextTaskUnblockTime>
800034d0:	fdc42703          	lw	a4,-36(s0)
800034d4:	00e7a023          	sw	a4,0(a5)
							break;
800034d8:	0bc0006f          	j	80003594 <xTaskIncrementTick+0x214>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
800034dc:	fe042783          	lw	a5,-32(s0)
800034e0:	00478793          	addi	a5,a5,4
800034e4:	00078513          	mv	a0,a5
800034e8:	cccfd0ef          	jal	ra,800009b4 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
800034ec:	fe042783          	lw	a5,-32(s0)
800034f0:	0287a783          	lw	a5,40(a5)
800034f4:	00078a63          	beqz	a5,80003508 <xTaskIncrementTick+0x188>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
800034f8:	fe042783          	lw	a5,-32(s0)
800034fc:	01878793          	addi	a5,a5,24
80003500:	00078513          	mv	a0,a5
80003504:	cb0fd0ef          	jal	ra,800009b4 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
80003508:	fe042783          	lw	a5,-32(s0)
8000350c:	02c7a703          	lw	a4,44(a5)
80003510:	0001e797          	auipc	a5,0x1e
80003514:	40c78793          	addi	a5,a5,1036 # 8002191c <uxTopReadyPriority>
80003518:	0007a783          	lw	a5,0(a5)
8000351c:	00e7fc63          	bleu	a4,a5,80003534 <xTaskIncrementTick+0x1b4>
80003520:	fe042783          	lw	a5,-32(s0)
80003524:	02c7a703          	lw	a4,44(a5)
80003528:	0001e797          	auipc	a5,0x1e
8000352c:	3f478793          	addi	a5,a5,1012 # 8002191c <uxTopReadyPriority>
80003530:	00e7a023          	sw	a4,0(a5)
80003534:	fe042783          	lw	a5,-32(s0)
80003538:	02c7a703          	lw	a4,44(a5)
8000353c:	00070793          	mv	a5,a4
80003540:	00279793          	slli	a5,a5,0x2
80003544:	00e787b3          	add	a5,a5,a4
80003548:	00279793          	slli	a5,a5,0x2
8000354c:	0001e717          	auipc	a4,0x1e
80003550:	2f470713          	addi	a4,a4,756 # 80021840 <__bss_start>
80003554:	00e78733          	add	a4,a5,a4
80003558:	fe042783          	lw	a5,-32(s0)
8000355c:	00478793          	addi	a5,a5,4
80003560:	00078593          	mv	a1,a5
80003564:	00070513          	mv	a0,a4
80003568:	af0fd0ef          	jal	ra,80000858 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
8000356c:	fe042783          	lw	a5,-32(s0)
80003570:	02c7a703          	lw	a4,44(a5)
80003574:	0001e797          	auipc	a5,0x1e
80003578:	8a878793          	addi	a5,a5,-1880 # 80020e1c <pxCurrentTCB>
8000357c:	0007a783          	lw	a5,0(a5)
80003580:	02c7a783          	lw	a5,44(a5)
80003584:	ecf76ee3          	bltu	a4,a5,80003460 <xTaskIncrementTick+0xe0>
							{
								xSwitchRequired = pdTRUE;
80003588:	00100793          	li	a5,1
8000358c:	fef42623          	sw	a5,-20(s0)
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80003590:	ed1ff06f          	j	80003460 <xTaskIncrementTick+0xe0>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
80003594:	0001e797          	auipc	a5,0x1e
80003598:	88878793          	addi	a5,a5,-1912 # 80020e1c <pxCurrentTCB>
8000359c:	0007a783          	lw	a5,0(a5)
800035a0:	02c7a703          	lw	a4,44(a5)
800035a4:	0001e697          	auipc	a3,0x1e
800035a8:	29c68693          	addi	a3,a3,668 # 80021840 <__bss_start>
800035ac:	00070793          	mv	a5,a4
800035b0:	00279793          	slli	a5,a5,0x2
800035b4:	00e787b3          	add	a5,a5,a4
800035b8:	00279793          	slli	a5,a5,0x2
800035bc:	00f687b3          	add	a5,a3,a5
800035c0:	0007a703          	lw	a4,0(a5)
800035c4:	00100793          	li	a5,1
800035c8:	02e7f663          	bleu	a4,a5,800035f4 <xTaskIncrementTick+0x274>
			{
				xSwitchRequired = pdTRUE;
800035cc:	00100793          	li	a5,1
800035d0:	fef42623          	sw	a5,-20(s0)
800035d4:	0200006f          	j	800035f4 <xTaskIncrementTick+0x274>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
800035d8:	0001e797          	auipc	a5,0x1e
800035dc:	34c78793          	addi	a5,a5,844 # 80021924 <uxPendedTicks>
800035e0:	0007a783          	lw	a5,0(a5)
800035e4:	00178713          	addi	a4,a5,1
800035e8:	0001e797          	auipc	a5,0x1e
800035ec:	33c78793          	addi	a5,a5,828 # 80021924 <uxPendedTicks>
800035f0:	00e7a023          	sw	a4,0(a5)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
800035f4:	0001e797          	auipc	a5,0x1e
800035f8:	33478793          	addi	a5,a5,820 # 80021928 <xYieldPending>
800035fc:	0007a783          	lw	a5,0(a5)
80003600:	00078663          	beqz	a5,8000360c <xTaskIncrementTick+0x28c>
		{
			xSwitchRequired = pdTRUE;
80003604:	00100793          	li	a5,1
80003608:	fef42623          	sw	a5,-20(s0)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
8000360c:	fec42783          	lw	a5,-20(s0)
}
80003610:	00078513          	mv	a0,a5
80003614:	02c12083          	lw	ra,44(sp)
80003618:	02812403          	lw	s0,40(sp)
8000361c:	03010113          	addi	sp,sp,48
80003620:	00008067          	ret

80003624 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
80003624:	fe010113          	addi	sp,sp,-32
80003628:	00112e23          	sw	ra,28(sp)
8000362c:	00812c23          	sw	s0,24(sp)
80003630:	02010413          	addi	s0,sp,32
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
80003634:	0001e797          	auipc	a5,0x1e
80003638:	30478793          	addi	a5,a5,772 # 80021938 <uxSchedulerSuspended>
8000363c:	0007a783          	lw	a5,0(a5)
80003640:	00078c63          	beqz	a5,80003658 <vTaskSwitchContext+0x34>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
80003644:	0001e797          	auipc	a5,0x1e
80003648:	2e478793          	addi	a5,a5,740 # 80021928 <xYieldPending>
8000364c:	00100713          	li	a4,1
80003650:	00e7a023          	sw	a4,0(a5)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
80003654:	18c0006f          	j	800037e0 <vTaskSwitchContext+0x1bc>
		xYieldPending = pdFALSE;
80003658:	0001e797          	auipc	a5,0x1e
8000365c:	2d078793          	addi	a5,a5,720 # 80021928 <xYieldPending>
80003660:	0007a023          	sw	zero,0(a5)
		taskCHECK_FOR_STACK_OVERFLOW();
80003664:	0001d797          	auipc	a5,0x1d
80003668:	7b878793          	addi	a5,a5,1976 # 80020e1c <pxCurrentTCB>
8000366c:	0007a783          	lw	a5,0(a5)
80003670:	0307a783          	lw	a5,48(a5)
80003674:	fef42623          	sw	a5,-20(s0)
80003678:	a5a5a7b7          	lui	a5,0xa5a5a
8000367c:	5a578793          	addi	a5,a5,1445 # a5a5a5a5 <__stack+0x25a1dad9>
80003680:	fef42423          	sw	a5,-24(s0)
80003684:	fec42783          	lw	a5,-20(s0)
80003688:	0007a783          	lw	a5,0(a5)
8000368c:	fe842703          	lw	a4,-24(s0)
80003690:	04f71063          	bne	a4,a5,800036d0 <vTaskSwitchContext+0xac>
80003694:	fec42783          	lw	a5,-20(s0)
80003698:	00478793          	addi	a5,a5,4
8000369c:	0007a783          	lw	a5,0(a5)
800036a0:	fe842703          	lw	a4,-24(s0)
800036a4:	02f71663          	bne	a4,a5,800036d0 <vTaskSwitchContext+0xac>
800036a8:	fec42783          	lw	a5,-20(s0)
800036ac:	00878793          	addi	a5,a5,8
800036b0:	0007a783          	lw	a5,0(a5)
800036b4:	fe842703          	lw	a4,-24(s0)
800036b8:	00f71c63          	bne	a4,a5,800036d0 <vTaskSwitchContext+0xac>
800036bc:	fec42783          	lw	a5,-20(s0)
800036c0:	00c78793          	addi	a5,a5,12
800036c4:	0007a783          	lw	a5,0(a5)
800036c8:	fe842703          	lw	a4,-24(s0)
800036cc:	06f70263          	beq	a4,a5,80003730 <vTaskSwitchContext+0x10c>
800036d0:	0001d797          	auipc	a5,0x1d
800036d4:	74c78793          	addi	a5,a5,1868 # 80020e1c <pxCurrentTCB>
800036d8:	0007a703          	lw	a4,0(a5)
800036dc:	0001d797          	auipc	a5,0x1d
800036e0:	74078793          	addi	a5,a5,1856 # 80020e1c <pxCurrentTCB>
800036e4:	0007a783          	lw	a5,0(a5)
800036e8:	03478793          	addi	a5,a5,52
800036ec:	00078593          	mv	a1,a5
800036f0:	00070513          	mv	a0,a4
800036f4:	24d030ef          	jal	ra,80007140 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
800036f8:	0380006f          	j	80003730 <vTaskSwitchContext+0x10c>
800036fc:	0001e797          	auipc	a5,0x1e
80003700:	22078793          	addi	a5,a5,544 # 8002191c <uxTopReadyPriority>
80003704:	0007a783          	lw	a5,0(a5)
80003708:	00079663          	bnez	a5,80003714 <vTaskSwitchContext+0xf0>
8000370c:	30007073          	csrci	mstatus,0
80003710:	0000006f          	j	80003710 <vTaskSwitchContext+0xec>
80003714:	0001e797          	auipc	a5,0x1e
80003718:	20878793          	addi	a5,a5,520 # 8002191c <uxTopReadyPriority>
8000371c:	0007a783          	lw	a5,0(a5)
80003720:	fff78713          	addi	a4,a5,-1
80003724:	0001e797          	auipc	a5,0x1e
80003728:	1f878793          	addi	a5,a5,504 # 8002191c <uxTopReadyPriority>
8000372c:	00e7a023          	sw	a4,0(a5)
80003730:	0001e797          	auipc	a5,0x1e
80003734:	1ec78793          	addi	a5,a5,492 # 8002191c <uxTopReadyPriority>
80003738:	0007a703          	lw	a4,0(a5)
8000373c:	0001e697          	auipc	a3,0x1e
80003740:	10468693          	addi	a3,a3,260 # 80021840 <__bss_start>
80003744:	00070793          	mv	a5,a4
80003748:	00279793          	slli	a5,a5,0x2
8000374c:	00e787b3          	add	a5,a5,a4
80003750:	00279793          	slli	a5,a5,0x2
80003754:	00f687b3          	add	a5,a3,a5
80003758:	0007a783          	lw	a5,0(a5)
8000375c:	fa0780e3          	beqz	a5,800036fc <vTaskSwitchContext+0xd8>
80003760:	0001e797          	auipc	a5,0x1e
80003764:	1bc78793          	addi	a5,a5,444 # 8002191c <uxTopReadyPriority>
80003768:	0007a703          	lw	a4,0(a5)
8000376c:	00070793          	mv	a5,a4
80003770:	00279793          	slli	a5,a5,0x2
80003774:	00e787b3          	add	a5,a5,a4
80003778:	00279793          	slli	a5,a5,0x2
8000377c:	0001e717          	auipc	a4,0x1e
80003780:	0c470713          	addi	a4,a4,196 # 80021840 <__bss_start>
80003784:	00e787b3          	add	a5,a5,a4
80003788:	fef42223          	sw	a5,-28(s0)
8000378c:	fe442783          	lw	a5,-28(s0)
80003790:	0047a783          	lw	a5,4(a5)
80003794:	0047a703          	lw	a4,4(a5)
80003798:	fe442783          	lw	a5,-28(s0)
8000379c:	00e7a223          	sw	a4,4(a5)
800037a0:	fe442783          	lw	a5,-28(s0)
800037a4:	0047a703          	lw	a4,4(a5)
800037a8:	fe442783          	lw	a5,-28(s0)
800037ac:	00878793          	addi	a5,a5,8
800037b0:	00f71c63          	bne	a4,a5,800037c8 <vTaskSwitchContext+0x1a4>
800037b4:	fe442783          	lw	a5,-28(s0)
800037b8:	0047a783          	lw	a5,4(a5)
800037bc:	0047a703          	lw	a4,4(a5)
800037c0:	fe442783          	lw	a5,-28(s0)
800037c4:	00e7a223          	sw	a4,4(a5)
800037c8:	fe442783          	lw	a5,-28(s0)
800037cc:	0047a783          	lw	a5,4(a5)
800037d0:	00c7a703          	lw	a4,12(a5)
800037d4:	0001d797          	auipc	a5,0x1d
800037d8:	64878793          	addi	a5,a5,1608 # 80020e1c <pxCurrentTCB>
800037dc:	00e7a023          	sw	a4,0(a5)
}
800037e0:	00000013          	nop
800037e4:	01c12083          	lw	ra,28(sp)
800037e8:	01812403          	lw	s0,24(sp)
800037ec:	02010113          	addi	sp,sp,32
800037f0:	00008067          	ret

800037f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
800037f4:	fd010113          	addi	sp,sp,-48
800037f8:	02112623          	sw	ra,44(sp)
800037fc:	02812423          	sw	s0,40(sp)
80003800:	03010413          	addi	s0,sp,48
80003804:	fca42e23          	sw	a0,-36(s0)
80003808:	fcb42c23          	sw	a1,-40(s0)
TickType_t xTimeToWake;

	configASSERT( pxEventList );
8000380c:	fdc42783          	lw	a5,-36(s0)
80003810:	00079663          	bnez	a5,8000381c <vTaskPlaceOnEventList+0x28>
80003814:	30007073          	csrci	mstatus,0
80003818:	0000006f          	j	80003818 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
8000381c:	0001d797          	auipc	a5,0x1d
80003820:	60078793          	addi	a5,a5,1536 # 80020e1c <pxCurrentTCB>
80003824:	0007a783          	lw	a5,0(a5)
80003828:	01878793          	addi	a5,a5,24
8000382c:	00078593          	mv	a1,a5
80003830:	fdc42503          	lw	a0,-36(s0)
80003834:	8acfd0ef          	jal	ra,800008e0 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80003838:	0001d797          	auipc	a5,0x1d
8000383c:	5e478793          	addi	a5,a5,1508 # 80020e1c <pxCurrentTCB>
80003840:	0007a783          	lw	a5,0(a5)
80003844:	00478793          	addi	a5,a5,4
80003848:	00078513          	mv	a0,a5
8000384c:	968fd0ef          	jal	ra,800009b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
80003850:	fd842703          	lw	a4,-40(s0)
80003854:	fff00793          	li	a5,-1
80003858:	02f71463          	bne	a4,a5,80003880 <vTaskPlaceOnEventList+0x8c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
8000385c:	0001d797          	auipc	a5,0x1d
80003860:	5c078793          	addi	a5,a5,1472 # 80020e1c <pxCurrentTCB>
80003864:	0007a783          	lw	a5,0(a5)
80003868:	00478793          	addi	a5,a5,4
8000386c:	00078593          	mv	a1,a5
80003870:	0001e517          	auipc	a0,0x1e
80003874:	09050513          	addi	a0,a0,144 # 80021900 <xSuspendedTaskList>
80003878:	fe1fc0ef          	jal	ra,80000858 <vListInsertEnd>
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
8000387c:	0240006f          	j	800038a0 <vTaskPlaceOnEventList+0xac>
			xTimeToWake = xTickCount + xTicksToWait;
80003880:	0001e797          	auipc	a5,0x1e
80003884:	09878793          	addi	a5,a5,152 # 80021918 <xTickCount>
80003888:	0007a783          	lw	a5,0(a5)
8000388c:	fd842703          	lw	a4,-40(s0)
80003890:	00f707b3          	add	a5,a4,a5
80003894:	fef42623          	sw	a5,-20(s0)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
80003898:	fec42503          	lw	a0,-20(s0)
8000389c:	15d000ef          	jal	ra,800041f8 <prvAddCurrentTaskToDelayedList>
}
800038a0:	00000013          	nop
800038a4:	02c12083          	lw	ra,44(sp)
800038a8:	02812403          	lw	s0,40(sp)
800038ac:	03010113          	addi	sp,sp,48
800038b0:	00008067          	ret

800038b4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
800038b4:	fd010113          	addi	sp,sp,-48
800038b8:	02112623          	sw	ra,44(sp)
800038bc:	02812423          	sw	s0,40(sp)
800038c0:	03010413          	addi	s0,sp,48
800038c4:	fca42e23          	sw	a0,-36(s0)
800038c8:	fcb42c23          	sw	a1,-40(s0)
800038cc:	fcc42a23          	sw	a2,-44(s0)
TickType_t xTimeToWake;

	configASSERT( pxEventList );
800038d0:	fdc42783          	lw	a5,-36(s0)
800038d4:	00079663          	bnez	a5,800038e0 <vTaskPlaceOnUnorderedEventList+0x2c>
800038d8:	30007073          	csrci	mstatus,0
800038dc:	0000006f          	j	800038dc <vTaskPlaceOnUnorderedEventList+0x28>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
800038e0:	0001e797          	auipc	a5,0x1e
800038e4:	05878793          	addi	a5,a5,88 # 80021938 <uxSchedulerSuspended>
800038e8:	0007a783          	lw	a5,0(a5)
800038ec:	00079663          	bnez	a5,800038f8 <vTaskPlaceOnUnorderedEventList+0x44>
800038f0:	30007073          	csrci	mstatus,0
800038f4:	0000006f          	j	800038f4 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
800038f8:	0001d797          	auipc	a5,0x1d
800038fc:	52478793          	addi	a5,a5,1316 # 80020e1c <pxCurrentTCB>
80003900:	0007a783          	lw	a5,0(a5)
80003904:	fd842683          	lw	a3,-40(s0)
80003908:	80000737          	lui	a4,0x80000
8000390c:	00e6e733          	or	a4,a3,a4
80003910:	00e7ac23          	sw	a4,24(a5)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
80003914:	0001d797          	auipc	a5,0x1d
80003918:	50878793          	addi	a5,a5,1288 # 80020e1c <pxCurrentTCB>
8000391c:	0007a783          	lw	a5,0(a5)
80003920:	01878793          	addi	a5,a5,24
80003924:	00078593          	mv	a1,a5
80003928:	fdc42503          	lw	a0,-36(s0)
8000392c:	f2dfc0ef          	jal	ra,80000858 <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80003930:	0001d797          	auipc	a5,0x1d
80003934:	4ec78793          	addi	a5,a5,1260 # 80020e1c <pxCurrentTCB>
80003938:	0007a783          	lw	a5,0(a5)
8000393c:	00478793          	addi	a5,a5,4
80003940:	00078513          	mv	a0,a5
80003944:	870fd0ef          	jal	ra,800009b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
80003948:	fd442703          	lw	a4,-44(s0)
8000394c:	fff00793          	li	a5,-1
80003950:	02f71463          	bne	a4,a5,80003978 <vTaskPlaceOnUnorderedEventList+0xc4>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80003954:	0001d797          	auipc	a5,0x1d
80003958:	4c878793          	addi	a5,a5,1224 # 80020e1c <pxCurrentTCB>
8000395c:	0007a783          	lw	a5,0(a5)
80003960:	00478793          	addi	a5,a5,4
80003964:	00078593          	mv	a1,a5
80003968:	0001e517          	auipc	a0,0x1e
8000396c:	f9850513          	addi	a0,a0,-104 # 80021900 <xSuspendedTaskList>
80003970:	ee9fc0ef          	jal	ra,80000858 <vListInsertEnd>
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
80003974:	0240006f          	j	80003998 <vTaskPlaceOnUnorderedEventList+0xe4>
			xTimeToWake = xTickCount + xTicksToWait;
80003978:	0001e797          	auipc	a5,0x1e
8000397c:	fa078793          	addi	a5,a5,-96 # 80021918 <xTickCount>
80003980:	0007a783          	lw	a5,0(a5)
80003984:	fd442703          	lw	a4,-44(s0)
80003988:	00f707b3          	add	a5,a4,a5
8000398c:	fef42623          	sw	a5,-20(s0)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
80003990:	fec42503          	lw	a0,-20(s0)
80003994:	065000ef          	jal	ra,800041f8 <prvAddCurrentTaskToDelayedList>
}
80003998:	00000013          	nop
8000399c:	02c12083          	lw	ra,44(sp)
800039a0:	02812403          	lw	s0,40(sp)
800039a4:	03010113          	addi	sp,sp,48
800039a8:	00008067          	ret

800039ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
800039ac:	fd010113          	addi	sp,sp,-48
800039b0:	02112623          	sw	ra,44(sp)
800039b4:	02812423          	sw	s0,40(sp)
800039b8:	03010413          	addi	s0,sp,48
800039bc:	fca42e23          	sw	a0,-36(s0)
800039c0:	fcb42c23          	sw	a1,-40(s0)
800039c4:	fcc42a23          	sw	a2,-44(s0)
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
800039c8:	fdc42783          	lw	a5,-36(s0)
800039cc:	00079663          	bnez	a5,800039d8 <vTaskPlaceOnEventListRestricted+0x2c>
800039d0:	30007073          	csrci	mstatus,0
800039d4:	0000006f          	j	800039d4 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
800039d8:	0001d797          	auipc	a5,0x1d
800039dc:	44478793          	addi	a5,a5,1092 # 80020e1c <pxCurrentTCB>
800039e0:	0007a783          	lw	a5,0(a5)
800039e4:	01878793          	addi	a5,a5,24
800039e8:	00078593          	mv	a1,a5
800039ec:	fdc42503          	lw	a0,-36(s0)
800039f0:	e69fc0ef          	jal	ra,80000858 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
800039f4:	0001d797          	auipc	a5,0x1d
800039f8:	42878793          	addi	a5,a5,1064 # 80020e1c <pxCurrentTCB>
800039fc:	0007a783          	lw	a5,0(a5)
80003a00:	00478793          	addi	a5,a5,4
80003a04:	00078513          	mv	a0,a5
80003a08:	fadfc0ef          	jal	ra,800009b4 <uxListRemove>
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
80003a0c:	fd442703          	lw	a4,-44(s0)
80003a10:	00100793          	li	a5,1
80003a14:	02f71463          	bne	a4,a5,80003a3c <vTaskPlaceOnEventListRestricted+0x90>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80003a18:	0001d797          	auipc	a5,0x1d
80003a1c:	40478793          	addi	a5,a5,1028 # 80020e1c <pxCurrentTCB>
80003a20:	0007a783          	lw	a5,0(a5)
80003a24:	00478793          	addi	a5,a5,4
80003a28:	00078593          	mv	a1,a5
80003a2c:	0001e517          	auipc	a0,0x1e
80003a30:	ed450513          	addi	a0,a0,-300 # 80021900 <xSuspendedTaskList>
80003a34:	e25fc0ef          	jal	ra,80000858 <vListInsertEnd>
			/* Remove compiler warnings when INCLUDE_vTaskSuspend() is not
			defined. */
			( void ) xWaitIndefinitely;
		}
		#endif
	}
80003a38:	0240006f          	j	80003a5c <vTaskPlaceOnEventListRestricted+0xb0>
				xTimeToWake = xTickCount + xTicksToWait;
80003a3c:	0001e797          	auipc	a5,0x1e
80003a40:	edc78793          	addi	a5,a5,-292 # 80021918 <xTickCount>
80003a44:	0007a783          	lw	a5,0(a5)
80003a48:	fd842703          	lw	a4,-40(s0)
80003a4c:	00f707b3          	add	a5,a4,a5
80003a50:	fef42623          	sw	a5,-20(s0)
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80003a54:	fec42503          	lw	a0,-20(s0)
80003a58:	7a0000ef          	jal	ra,800041f8 <prvAddCurrentTaskToDelayedList>
	}
80003a5c:	00000013          	nop
80003a60:	02c12083          	lw	ra,44(sp)
80003a64:	02812403          	lw	s0,40(sp)
80003a68:	03010113          	addi	sp,sp,48
80003a6c:	00008067          	ret

80003a70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
80003a70:	fd010113          	addi	sp,sp,-48
80003a74:	02112623          	sw	ra,44(sp)
80003a78:	02812423          	sw	s0,40(sp)
80003a7c:	03010413          	addi	s0,sp,48
80003a80:	fca42e23          	sw	a0,-36(s0)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
80003a84:	fdc42783          	lw	a5,-36(s0)
80003a88:	00c7a783          	lw	a5,12(a5)
80003a8c:	00c7a783          	lw	a5,12(a5)
80003a90:	fef42423          	sw	a5,-24(s0)
	configASSERT( pxUnblockedTCB );
80003a94:	fe842783          	lw	a5,-24(s0)
80003a98:	00079663          	bnez	a5,80003aa4 <xTaskRemoveFromEventList+0x34>
80003a9c:	30007073          	csrci	mstatus,0
80003aa0:	0000006f          	j	80003aa0 <xTaskRemoveFromEventList+0x30>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
80003aa4:	fe842783          	lw	a5,-24(s0)
80003aa8:	01878793          	addi	a5,a5,24
80003aac:	00078513          	mv	a0,a5
80003ab0:	f05fc0ef          	jal	ra,800009b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80003ab4:	0001e797          	auipc	a5,0x1e
80003ab8:	e8478793          	addi	a5,a5,-380 # 80021938 <uxSchedulerSuspended>
80003abc:	0007a783          	lw	a5,0(a5)
80003ac0:	06079e63          	bnez	a5,80003b3c <xTaskRemoveFromEventList+0xcc>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
80003ac4:	fe842783          	lw	a5,-24(s0)
80003ac8:	00478793          	addi	a5,a5,4
80003acc:	00078513          	mv	a0,a5
80003ad0:	ee5fc0ef          	jal	ra,800009b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
80003ad4:	fe842783          	lw	a5,-24(s0)
80003ad8:	02c7a703          	lw	a4,44(a5)
80003adc:	0001e797          	auipc	a5,0x1e
80003ae0:	e4078793          	addi	a5,a5,-448 # 8002191c <uxTopReadyPriority>
80003ae4:	0007a783          	lw	a5,0(a5)
80003ae8:	00e7fc63          	bleu	a4,a5,80003b00 <xTaskRemoveFromEventList+0x90>
80003aec:	fe842783          	lw	a5,-24(s0)
80003af0:	02c7a703          	lw	a4,44(a5)
80003af4:	0001e797          	auipc	a5,0x1e
80003af8:	e2878793          	addi	a5,a5,-472 # 8002191c <uxTopReadyPriority>
80003afc:	00e7a023          	sw	a4,0(a5)
80003b00:	fe842783          	lw	a5,-24(s0)
80003b04:	02c7a703          	lw	a4,44(a5)
80003b08:	00070793          	mv	a5,a4
80003b0c:	00279793          	slli	a5,a5,0x2
80003b10:	00e787b3          	add	a5,a5,a4
80003b14:	00279793          	slli	a5,a5,0x2
80003b18:	0001e717          	auipc	a4,0x1e
80003b1c:	d2870713          	addi	a4,a4,-728 # 80021840 <__bss_start>
80003b20:	00e78733          	add	a4,a5,a4
80003b24:	fe842783          	lw	a5,-24(s0)
80003b28:	00478793          	addi	a5,a5,4
80003b2c:	00078593          	mv	a1,a5
80003b30:	00070513          	mv	a0,a4
80003b34:	d25fc0ef          	jal	ra,80000858 <vListInsertEnd>
80003b38:	01c0006f          	j	80003b54 <xTaskRemoveFromEventList+0xe4>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
80003b3c:	fe842783          	lw	a5,-24(s0)
80003b40:	01878793          	addi	a5,a5,24
80003b44:	00078593          	mv	a1,a5
80003b48:	0001e517          	auipc	a0,0x1e
80003b4c:	d8c50513          	addi	a0,a0,-628 # 800218d4 <xPendingReadyList>
80003b50:	d09fc0ef          	jal	ra,80000858 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
80003b54:	fe842783          	lw	a5,-24(s0)
80003b58:	02c7a703          	lw	a4,44(a5)
80003b5c:	0001d797          	auipc	a5,0x1d
80003b60:	2c078793          	addi	a5,a5,704 # 80020e1c <pxCurrentTCB>
80003b64:	0007a783          	lw	a5,0(a5)
80003b68:	02c7a783          	lw	a5,44(a5)
80003b6c:	02e7f063          	bleu	a4,a5,80003b8c <xTaskRemoveFromEventList+0x11c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
80003b70:	00100793          	li	a5,1
80003b74:	fef42623          	sw	a5,-20(s0)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
80003b78:	0001e797          	auipc	a5,0x1e
80003b7c:	db078793          	addi	a5,a5,-592 # 80021928 <xYieldPending>
80003b80:	00100713          	li	a4,1
80003b84:	00e7a023          	sw	a4,0(a5)
80003b88:	0080006f          	j	80003b90 <xTaskRemoveFromEventList+0x120>
	}
	else
	{
		xReturn = pdFALSE;
80003b8c:	fe042623          	sw	zero,-20(s0)
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
80003b90:	fec42783          	lw	a5,-20(s0)
}
80003b94:	00078513          	mv	a0,a5
80003b98:	02c12083          	lw	ra,44(sp)
80003b9c:	02812403          	lw	s0,40(sp)
80003ba0:	03010113          	addi	sp,sp,48
80003ba4:	00008067          	ret

80003ba8 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
80003ba8:	fd010113          	addi	sp,sp,-48
80003bac:	02112623          	sw	ra,44(sp)
80003bb0:	02812423          	sw	s0,40(sp)
80003bb4:	03010413          	addi	s0,sp,48
80003bb8:	fca42e23          	sw	a0,-36(s0)
80003bbc:	fcb42c23          	sw	a1,-40(s0)
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
80003bc0:	0001e797          	auipc	a5,0x1e
80003bc4:	d7878793          	addi	a5,a5,-648 # 80021938 <uxSchedulerSuspended>
80003bc8:	0007a783          	lw	a5,0(a5)
80003bcc:	00079663          	bnez	a5,80003bd8 <xTaskRemoveFromUnorderedEventList+0x30>
80003bd0:	30007073          	csrci	mstatus,0
80003bd4:	0000006f          	j	80003bd4 <xTaskRemoveFromUnorderedEventList+0x2c>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
80003bd8:	fd842703          	lw	a4,-40(s0)
80003bdc:	800007b7          	lui	a5,0x80000
80003be0:	00f76733          	or	a4,a4,a5
80003be4:	fdc42783          	lw	a5,-36(s0)
80003be8:	00e7a023          	sw	a4,0(a5) # 80000000 <__stack+0xfffc3534>

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
80003bec:	fdc42783          	lw	a5,-36(s0)
80003bf0:	00c7a783          	lw	a5,12(a5)
80003bf4:	fef42423          	sw	a5,-24(s0)
	configASSERT( pxUnblockedTCB );
80003bf8:	fe842783          	lw	a5,-24(s0)
80003bfc:	00079663          	bnez	a5,80003c08 <xTaskRemoveFromUnorderedEventList+0x60>
80003c00:	30007073          	csrci	mstatus,0
80003c04:	0000006f          	j	80003c04 <xTaskRemoveFromUnorderedEventList+0x5c>
	( void ) uxListRemove( pxEventListItem );
80003c08:	fdc42503          	lw	a0,-36(s0)
80003c0c:	da9fc0ef          	jal	ra,800009b4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
80003c10:	fe842783          	lw	a5,-24(s0)
80003c14:	00478793          	addi	a5,a5,4
80003c18:	00078513          	mv	a0,a5
80003c1c:	d99fc0ef          	jal	ra,800009b4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
80003c20:	fe842783          	lw	a5,-24(s0)
80003c24:	02c7a703          	lw	a4,44(a5)
80003c28:	0001e797          	auipc	a5,0x1e
80003c2c:	cf478793          	addi	a5,a5,-780 # 8002191c <uxTopReadyPriority>
80003c30:	0007a783          	lw	a5,0(a5)
80003c34:	00e7fc63          	bleu	a4,a5,80003c4c <xTaskRemoveFromUnorderedEventList+0xa4>
80003c38:	fe842783          	lw	a5,-24(s0)
80003c3c:	02c7a703          	lw	a4,44(a5)
80003c40:	0001e797          	auipc	a5,0x1e
80003c44:	cdc78793          	addi	a5,a5,-804 # 8002191c <uxTopReadyPriority>
80003c48:	00e7a023          	sw	a4,0(a5)
80003c4c:	fe842783          	lw	a5,-24(s0)
80003c50:	02c7a703          	lw	a4,44(a5)
80003c54:	00070793          	mv	a5,a4
80003c58:	00279793          	slli	a5,a5,0x2
80003c5c:	00e787b3          	add	a5,a5,a4
80003c60:	00279793          	slli	a5,a5,0x2
80003c64:	0001e717          	auipc	a4,0x1e
80003c68:	bdc70713          	addi	a4,a4,-1060 # 80021840 <__bss_start>
80003c6c:	00e78733          	add	a4,a5,a4
80003c70:	fe842783          	lw	a5,-24(s0)
80003c74:	00478793          	addi	a5,a5,4
80003c78:	00078593          	mv	a1,a5
80003c7c:	00070513          	mv	a0,a4
80003c80:	bd9fc0ef          	jal	ra,80000858 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
80003c84:	fe842783          	lw	a5,-24(s0)
80003c88:	02c7a703          	lw	a4,44(a5)
80003c8c:	0001d797          	auipc	a5,0x1d
80003c90:	19078793          	addi	a5,a5,400 # 80020e1c <pxCurrentTCB>
80003c94:	0007a783          	lw	a5,0(a5)
80003c98:	02c7a783          	lw	a5,44(a5)
80003c9c:	02e7f063          	bleu	a4,a5,80003cbc <xTaskRemoveFromUnorderedEventList+0x114>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
80003ca0:	00100793          	li	a5,1
80003ca4:	fef42623          	sw	a5,-20(s0)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
80003ca8:	0001e797          	auipc	a5,0x1e
80003cac:	c8078793          	addi	a5,a5,-896 # 80021928 <xYieldPending>
80003cb0:	00100713          	li	a4,1
80003cb4:	00e7a023          	sw	a4,0(a5)
80003cb8:	0080006f          	j	80003cc0 <xTaskRemoveFromUnorderedEventList+0x118>
	}
	else
	{
		xReturn = pdFALSE;
80003cbc:	fe042623          	sw	zero,-20(s0)
	}

	return xReturn;
80003cc0:	fec42783          	lw	a5,-20(s0)
}
80003cc4:	00078513          	mv	a0,a5
80003cc8:	02c12083          	lw	ra,44(sp)
80003ccc:	02812403          	lw	s0,40(sp)
80003cd0:	03010113          	addi	sp,sp,48
80003cd4:	00008067          	ret

80003cd8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
80003cd8:	fe010113          	addi	sp,sp,-32
80003cdc:	00812e23          	sw	s0,28(sp)
80003ce0:	02010413          	addi	s0,sp,32
80003ce4:	fea42623          	sw	a0,-20(s0)
	configASSERT( pxTimeOut );
80003ce8:	fec42783          	lw	a5,-20(s0)
80003cec:	00079663          	bnez	a5,80003cf8 <vTaskSetTimeOutState+0x20>
80003cf0:	30007073          	csrci	mstatus,0
80003cf4:	0000006f          	j	80003cf4 <vTaskSetTimeOutState+0x1c>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
80003cf8:	0001e797          	auipc	a5,0x1e
80003cfc:	c3478793          	addi	a5,a5,-972 # 8002192c <xNumOfOverflows>
80003d00:	0007a703          	lw	a4,0(a5)
80003d04:	fec42783          	lw	a5,-20(s0)
80003d08:	00e7a023          	sw	a4,0(a5)
	pxTimeOut->xTimeOnEntering = xTickCount;
80003d0c:	0001e797          	auipc	a5,0x1e
80003d10:	c0c78793          	addi	a5,a5,-1012 # 80021918 <xTickCount>
80003d14:	0007a703          	lw	a4,0(a5)
80003d18:	fec42783          	lw	a5,-20(s0)
80003d1c:	00e7a223          	sw	a4,4(a5)
}
80003d20:	00000013          	nop
80003d24:	01c12403          	lw	s0,28(sp)
80003d28:	02010113          	addi	sp,sp,32
80003d2c:	00008067          	ret

80003d30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
80003d30:	fd010113          	addi	sp,sp,-48
80003d34:	02112623          	sw	ra,44(sp)
80003d38:	02812423          	sw	s0,40(sp)
80003d3c:	03010413          	addi	s0,sp,48
80003d40:	fca42e23          	sw	a0,-36(s0)
80003d44:	fcb42c23          	sw	a1,-40(s0)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
80003d48:	fdc42783          	lw	a5,-36(s0)
80003d4c:	00079663          	bnez	a5,80003d58 <xTaskCheckForTimeOut+0x28>
80003d50:	30007073          	csrci	mstatus,0
80003d54:	0000006f          	j	80003d54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
80003d58:	fd842783          	lw	a5,-40(s0)
80003d5c:	00079663          	bnez	a5,80003d68 <xTaskCheckForTimeOut+0x38>
80003d60:	30007073          	csrci	mstatus,0
80003d64:	0000006f          	j	80003d64 <xTaskCheckForTimeOut+0x34>

	taskENTER_CRITICAL();
80003d68:	495000ef          	jal	ra,800049fc <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
80003d6c:	0001e797          	auipc	a5,0x1e
80003d70:	bac78793          	addi	a5,a5,-1108 # 80021918 <xTickCount>
80003d74:	0007a783          	lw	a5,0(a5)
80003d78:	fef42423          	sw	a5,-24(s0)

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
80003d7c:	fd842783          	lw	a5,-40(s0)
80003d80:	0007a703          	lw	a4,0(a5)
80003d84:	fff00793          	li	a5,-1
80003d88:	00f71663          	bne	a4,a5,80003d94 <xTaskCheckForTimeOut+0x64>
			{
				xReturn = pdFALSE;
80003d8c:	fe042623          	sw	zero,-20(s0)
80003d90:	0900006f          	j	80003e20 <xTaskCheckForTimeOut+0xf0>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
80003d94:	fdc42783          	lw	a5,-36(s0)
80003d98:	0007a703          	lw	a4,0(a5)
80003d9c:	0001e797          	auipc	a5,0x1e
80003da0:	b9078793          	addi	a5,a5,-1136 # 8002192c <xNumOfOverflows>
80003da4:	0007a783          	lw	a5,0(a5)
80003da8:	02f70063          	beq	a4,a5,80003dc8 <xTaskCheckForTimeOut+0x98>
80003dac:	fdc42783          	lw	a5,-36(s0)
80003db0:	0047a783          	lw	a5,4(a5)
80003db4:	fe842703          	lw	a4,-24(s0)
80003db8:	00f76863          	bltu	a4,a5,80003dc8 <xTaskCheckForTimeOut+0x98>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
80003dbc:	00100793          	li	a5,1
80003dc0:	fef42623          	sw	a5,-20(s0)
80003dc4:	05c0006f          	j	80003e20 <xTaskCheckForTimeOut+0xf0>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
80003dc8:	fdc42783          	lw	a5,-36(s0)
80003dcc:	0047a783          	lw	a5,4(a5)
80003dd0:	fe842703          	lw	a4,-24(s0)
80003dd4:	40f70733          	sub	a4,a4,a5
80003dd8:	fd842783          	lw	a5,-40(s0)
80003ddc:	0007a783          	lw	a5,0(a5)
80003de0:	02f77c63          	bleu	a5,a4,80003e18 <xTaskCheckForTimeOut+0xe8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
80003de4:	fd842783          	lw	a5,-40(s0)
80003de8:	0007a703          	lw	a4,0(a5)
80003dec:	fdc42783          	lw	a5,-36(s0)
80003df0:	0047a683          	lw	a3,4(a5)
80003df4:	fe842783          	lw	a5,-24(s0)
80003df8:	40f687b3          	sub	a5,a3,a5
80003dfc:	00f70733          	add	a4,a4,a5
80003e00:	fd842783          	lw	a5,-40(s0)
80003e04:	00e7a023          	sw	a4,0(a5)
			vTaskSetTimeOutState( pxTimeOut );
80003e08:	fdc42503          	lw	a0,-36(s0)
80003e0c:	ecdff0ef          	jal	ra,80003cd8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
80003e10:	fe042623          	sw	zero,-20(s0)
80003e14:	00c0006f          	j	80003e20 <xTaskCheckForTimeOut+0xf0>
		}
		else
		{
			xReturn = pdTRUE;
80003e18:	00100793          	li	a5,1
80003e1c:	fef42623          	sw	a5,-20(s0)
		}
	}
	taskEXIT_CRITICAL();
80003e20:	431000ef          	jal	ra,80004a50 <vTaskExitCritical>

	return xReturn;
80003e24:	fec42783          	lw	a5,-20(s0)
}
80003e28:	00078513          	mv	a0,a5
80003e2c:	02c12083          	lw	ra,44(sp)
80003e30:	02812403          	lw	s0,40(sp)
80003e34:	03010113          	addi	sp,sp,48
80003e38:	00008067          	ret

80003e3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
80003e3c:	ff010113          	addi	sp,sp,-16
80003e40:	00812623          	sw	s0,12(sp)
80003e44:	01010413          	addi	s0,sp,16
	xYieldPending = pdTRUE;
80003e48:	0001e797          	auipc	a5,0x1e
80003e4c:	ae078793          	addi	a5,a5,-1312 # 80021928 <xYieldPending>
80003e50:	00100713          	li	a4,1
80003e54:	00e7a023          	sw	a4,0(a5)
}
80003e58:	00000013          	nop
80003e5c:	00c12403          	lw	s0,12(sp)
80003e60:	01010113          	addi	sp,sp,16
80003e64:	00008067          	ret

80003e68 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
80003e68:	fd010113          	addi	sp,sp,-48
80003e6c:	02812623          	sw	s0,44(sp)
80003e70:	03010413          	addi	s0,sp,48
80003e74:	fca42e23          	sw	a0,-36(s0)
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
80003e78:	fdc42783          	lw	a5,-36(s0)
80003e7c:	00078e63          	beqz	a5,80003e98 <uxTaskGetTaskNumber+0x30>
		{
			pxTCB = ( TCB_t * ) xTask;
80003e80:	fdc42783          	lw	a5,-36(s0)
80003e84:	fef42423          	sw	a5,-24(s0)
			uxReturn = pxTCB->uxTaskNumber;
80003e88:	fe842783          	lw	a5,-24(s0)
80003e8c:	04c7a783          	lw	a5,76(a5)
80003e90:	fef42623          	sw	a5,-20(s0)
80003e94:	0080006f          	j	80003e9c <uxTaskGetTaskNumber+0x34>
		}
		else
		{
			uxReturn = 0U;
80003e98:	fe042623          	sw	zero,-20(s0)
		}

		return uxReturn;
80003e9c:	fec42783          	lw	a5,-20(s0)
	}
80003ea0:	00078513          	mv	a0,a5
80003ea4:	02c12403          	lw	s0,44(sp)
80003ea8:	03010113          	addi	sp,sp,48
80003eac:	00008067          	ret

80003eb0 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
80003eb0:	fd010113          	addi	sp,sp,-48
80003eb4:	02812623          	sw	s0,44(sp)
80003eb8:	03010413          	addi	s0,sp,48
80003ebc:	fca42e23          	sw	a0,-36(s0)
80003ec0:	fcb42c23          	sw	a1,-40(s0)
	TCB_t *pxTCB;

		if( xTask != NULL )
80003ec4:	fdc42783          	lw	a5,-36(s0)
80003ec8:	00078c63          	beqz	a5,80003ee0 <vTaskSetTaskNumber+0x30>
		{
			pxTCB = ( TCB_t * ) xTask;
80003ecc:	fdc42783          	lw	a5,-36(s0)
80003ed0:	fef42623          	sw	a5,-20(s0)
			pxTCB->uxTaskNumber = uxHandle;
80003ed4:	fec42783          	lw	a5,-20(s0)
80003ed8:	fd842703          	lw	a4,-40(s0)
80003edc:	04e7a623          	sw	a4,76(a5)
		}
	}
80003ee0:	00000013          	nop
80003ee4:	02c12403          	lw	s0,44(sp)
80003ee8:	03010113          	addi	sp,sp,48
80003eec:	00008067          	ret

80003ef0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
80003ef0:	fe010113          	addi	sp,sp,-32
80003ef4:	00112e23          	sw	ra,28(sp)
80003ef8:	00812c23          	sw	s0,24(sp)
80003efc:	02010413          	addi	s0,sp,32
80003f00:	fea42623          	sw	a0,-20(s0)
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
80003f04:	228000ef          	jal	ra,8000412c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
80003f08:	0001e797          	auipc	a5,0x1e
80003f0c:	93878793          	addi	a5,a5,-1736 # 80021840 <__bss_start>
80003f10:	0007a703          	lw	a4,0(a5)
80003f14:	00100793          	li	a5,1
80003f18:	fee7f6e3          	bleu	a4,a5,80003f04 <prvIdleTask+0x14>
			{
				taskYIELD();
80003f1c:	d70fc0ef          	jal	ra,8000048c <vPortYield>
		prvCheckTasksWaitingTermination();
80003f20:	fe5ff06f          	j	80003f04 <prvIdleTask+0x14>

80003f24 <prvInitialiseTCBVariables>:

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80003f24:	fc010113          	addi	sp,sp,-64
80003f28:	02112e23          	sw	ra,60(sp)
80003f2c:	02812c23          	sw	s0,56(sp)
80003f30:	04010413          	addi	s0,sp,64
80003f34:	fca42e23          	sw	a0,-36(s0)
80003f38:	fcb42c23          	sw	a1,-40(s0)
80003f3c:	fcc42a23          	sw	a2,-44(s0)
80003f40:	fcd42823          	sw	a3,-48(s0)
80003f44:	00070793          	mv	a5,a4
80003f48:	fcf41723          	sh	a5,-50(s0)
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80003f4c:	fe042623          	sw	zero,-20(s0)
80003f50:	0440006f          	j	80003f94 <prvInitialiseTCBVariables+0x70>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
80003f54:	fd842703          	lw	a4,-40(s0)
80003f58:	fec42783          	lw	a5,-20(s0)
80003f5c:	00f707b3          	add	a5,a4,a5
80003f60:	0007c703          	lbu	a4,0(a5)
80003f64:	fdc42683          	lw	a3,-36(s0)
80003f68:	fec42783          	lw	a5,-20(s0)
80003f6c:	00f687b3          	add	a5,a3,a5
80003f70:	02e78a23          	sb	a4,52(a5)

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
80003f74:	fd842703          	lw	a4,-40(s0)
80003f78:	fec42783          	lw	a5,-20(s0)
80003f7c:	00f707b3          	add	a5,a4,a5
80003f80:	0007c783          	lbu	a5,0(a5)
80003f84:	02078063          	beqz	a5,80003fa4 <prvInitialiseTCBVariables+0x80>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80003f88:	fec42783          	lw	a5,-20(s0)
80003f8c:	00178793          	addi	a5,a5,1
80003f90:	fef42623          	sw	a5,-20(s0)
80003f94:	fec42703          	lw	a4,-20(s0)
80003f98:	00f00793          	li	a5,15
80003f9c:	fae7fce3          	bleu	a4,a5,80003f54 <prvInitialiseTCBVariables+0x30>
80003fa0:	0080006f          	j	80003fa8 <prvInitialiseTCBVariables+0x84>
		{
			break;
80003fa4:	00000013          	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
80003fa8:	fdc42783          	lw	a5,-36(s0)
80003fac:	040781a3          	sb	zero,67(a5)

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
80003fb0:	fd442703          	lw	a4,-44(s0)
80003fb4:	00400793          	li	a5,4
80003fb8:	00e7f663          	bleu	a4,a5,80003fc4 <prvInitialiseTCBVariables+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
80003fbc:	00400793          	li	a5,4
80003fc0:	fcf42a23          	sw	a5,-44(s0)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
80003fc4:	fdc42783          	lw	a5,-36(s0)
80003fc8:	fd442703          	lw	a4,-44(s0)
80003fcc:	02e7a623          	sw	a4,44(a5)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
80003fd0:	fdc42783          	lw	a5,-36(s0)
80003fd4:	fd442703          	lw	a4,-44(s0)
80003fd8:	04e7a823          	sw	a4,80(a5)
		pxTCB->uxMutexesHeld = 0;
80003fdc:	fdc42783          	lw	a5,-36(s0)
80003fe0:	0407aa23          	sw	zero,84(a5)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
80003fe4:	fdc42783          	lw	a5,-36(s0)
80003fe8:	00478793          	addi	a5,a5,4
80003fec:	00078513          	mv	a0,a5
80003ff0:	841fc0ef          	jal	ra,80000830 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
80003ff4:	fdc42783          	lw	a5,-36(s0)
80003ff8:	01878793          	addi	a5,a5,24
80003ffc:	00078513          	mv	a0,a5
80004000:	831fc0ef          	jal	ra,80000830 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
80004004:	fdc42783          	lw	a5,-36(s0)
80004008:	fdc42703          	lw	a4,-36(s0)
8000400c:	00e7a823          	sw	a4,16(a5)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80004010:	00500713          	li	a4,5
80004014:	fd442783          	lw	a5,-44(s0)
80004018:	40f70733          	sub	a4,a4,a5
8000401c:	fdc42783          	lw	a5,-36(s0)
80004020:	00e7ac23          	sw	a4,24(a5)
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
80004024:	fdc42783          	lw	a5,-36(s0)
80004028:	fdc42703          	lw	a4,-36(s0)
8000402c:	02e7a223          	sw	a4,36(a5)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
80004030:	fdc42783          	lw	a5,-36(s0)
80004034:	0407a223          	sw	zero,68(a5)
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
80004038:	fdc42783          	lw	a5,-36(s0)
8000403c:	0407ac23          	sw	zero,88(a5)
		pxTCB->eNotifyState = eNotWaitingNotification;
80004040:	fdc42783          	lw	a5,-36(s0)
80004044:	0407ae23          	sw	zero,92(a5)
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
80004048:	00000013          	nop
8000404c:	03c12083          	lw	ra,60(sp)
80004050:	03812403          	lw	s0,56(sp)
80004054:	04010113          	addi	sp,sp,64
80004058:	00008067          	ret

8000405c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
8000405c:	fe010113          	addi	sp,sp,-32
80004060:	00112e23          	sw	ra,28(sp)
80004064:	00812c23          	sw	s0,24(sp)
80004068:	02010413          	addi	s0,sp,32
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
8000406c:	fe042623          	sw	zero,-20(s0)
80004070:	0380006f          	j	800040a8 <prvInitialiseTaskLists+0x4c>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
80004074:	fec42703          	lw	a4,-20(s0)
80004078:	00070793          	mv	a5,a4
8000407c:	00279793          	slli	a5,a5,0x2
80004080:	00e787b3          	add	a5,a5,a4
80004084:	00279793          	slli	a5,a5,0x2
80004088:	0001d717          	auipc	a4,0x1d
8000408c:	7b870713          	addi	a4,a4,1976 # 80021840 <__bss_start>
80004090:	00e787b3          	add	a5,a5,a4
80004094:	00078513          	mv	a0,a5
80004098:	f34fc0ef          	jal	ra,800007cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
8000409c:	fec42783          	lw	a5,-20(s0)
800040a0:	00178793          	addi	a5,a5,1
800040a4:	fef42623          	sw	a5,-20(s0)
800040a8:	fec42703          	lw	a4,-20(s0)
800040ac:	00400793          	li	a5,4
800040b0:	fce7f2e3          	bleu	a4,a5,80004074 <prvInitialiseTaskLists+0x18>
	}

	vListInitialise( &xDelayedTaskList1 );
800040b4:	0001d517          	auipc	a0,0x1d
800040b8:	7f050513          	addi	a0,a0,2032 # 800218a4 <xDelayedTaskList1>
800040bc:	f10fc0ef          	jal	ra,800007cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
800040c0:	0001d517          	auipc	a0,0x1d
800040c4:	7f850513          	addi	a0,a0,2040 # 800218b8 <xDelayedTaskList2>
800040c8:	f04fc0ef          	jal	ra,800007cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
800040cc:	0001e517          	auipc	a0,0x1e
800040d0:	80850513          	addi	a0,a0,-2040 # 800218d4 <xPendingReadyList>
800040d4:	ef8fc0ef          	jal	ra,800007cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
800040d8:	0001e517          	auipc	a0,0x1e
800040dc:	81050513          	addi	a0,a0,-2032 # 800218e8 <xTasksWaitingTermination>
800040e0:	eecfc0ef          	jal	ra,800007cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
800040e4:	0001e517          	auipc	a0,0x1e
800040e8:	81c50513          	addi	a0,a0,-2020 # 80021900 <xSuspendedTaskList>
800040ec:	ee0fc0ef          	jal	ra,800007cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
800040f0:	0001d797          	auipc	a5,0x1d
800040f4:	7dc78793          	addi	a5,a5,2012 # 800218cc <pxDelayedTaskList>
800040f8:	0001d717          	auipc	a4,0x1d
800040fc:	7ac70713          	addi	a4,a4,1964 # 800218a4 <xDelayedTaskList1>
80004100:	00e7a023          	sw	a4,0(a5)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
80004104:	0001d797          	auipc	a5,0x1d
80004108:	7cc78793          	addi	a5,a5,1996 # 800218d0 <pxOverflowDelayedTaskList>
8000410c:	0001d717          	auipc	a4,0x1d
80004110:	7ac70713          	addi	a4,a4,1964 # 800218b8 <xDelayedTaskList2>
80004114:	00e7a023          	sw	a4,0(a5)
}
80004118:	00000013          	nop
8000411c:	01c12083          	lw	ra,28(sp)
80004120:	01812403          	lw	s0,24(sp)
80004124:	02010113          	addi	sp,sp,32
80004128:	00008067          	ret

8000412c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
8000412c:	fe010113          	addi	sp,sp,-32
80004130:	00112e23          	sw	ra,28(sp)
80004134:	00812c23          	sw	s0,24(sp)
80004138:	02010413          	addi	s0,sp,32
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
8000413c:	0980006f          	j	800041d4 <prvCheckTasksWaitingTermination+0xa8>
		{
			vTaskSuspendAll();
80004140:	dc5fe0ef          	jal	ra,80002f04 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
80004144:	0001d797          	auipc	a5,0x1d
80004148:	7a478793          	addi	a5,a5,1956 # 800218e8 <xTasksWaitingTermination>
8000414c:	0007a783          	lw	a5,0(a5)
80004150:	0017b793          	seqz	a5,a5
80004154:	0ff7f793          	andi	a5,a5,255
80004158:	fef42623          	sw	a5,-20(s0)
			}
			( void ) xTaskResumeAll();
8000415c:	de1fe0ef          	jal	ra,80002f3c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
80004160:	fec42783          	lw	a5,-20(s0)
80004164:	06079863          	bnez	a5,800041d4 <prvCheckTasksWaitingTermination+0xa8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
80004168:	095000ef          	jal	ra,800049fc <vTaskEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
8000416c:	0001d797          	auipc	a5,0x1d
80004170:	77c78793          	addi	a5,a5,1916 # 800218e8 <xTasksWaitingTermination>
80004174:	00c7a783          	lw	a5,12(a5)
80004178:	00c7a783          	lw	a5,12(a5)
8000417c:	fef42423          	sw	a5,-24(s0)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80004180:	fe842783          	lw	a5,-24(s0)
80004184:	00478793          	addi	a5,a5,4
80004188:	00078513          	mv	a0,a5
8000418c:	829fc0ef          	jal	ra,800009b4 <uxListRemove>
					--uxCurrentNumberOfTasks;
80004190:	0001d797          	auipc	a5,0x1d
80004194:	78478793          	addi	a5,a5,1924 # 80021914 <uxCurrentNumberOfTasks>
80004198:	0007a783          	lw	a5,0(a5)
8000419c:	fff78713          	addi	a4,a5,-1
800041a0:	0001d797          	auipc	a5,0x1d
800041a4:	77478793          	addi	a5,a5,1908 # 80021914 <uxCurrentNumberOfTasks>
800041a8:	00e7a023          	sw	a4,0(a5)
					--uxTasksDeleted;
800041ac:	0001d797          	auipc	a5,0x1d
800041b0:	75078793          	addi	a5,a5,1872 # 800218fc <uxTasksDeleted>
800041b4:	0007a783          	lw	a5,0(a5)
800041b8:	fff78713          	addi	a4,a5,-1
800041bc:	0001d797          	auipc	a5,0x1d
800041c0:	74078793          	addi	a5,a5,1856 # 800218fc <uxTasksDeleted>
800041c4:	00e7a023          	sw	a4,0(a5)
				}
				taskEXIT_CRITICAL();
800041c8:	089000ef          	jal	ra,80004a50 <vTaskExitCritical>

				prvDeleteTCB( pxTCB );
800041cc:	fe842503          	lw	a0,-24(s0)
800041d0:	430000ef          	jal	ra,80004600 <prvDeleteTCB>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
800041d4:	0001d797          	auipc	a5,0x1d
800041d8:	72878793          	addi	a5,a5,1832 # 800218fc <uxTasksDeleted>
800041dc:	0007a783          	lw	a5,0(a5)
800041e0:	f60790e3          	bnez	a5,80004140 <prvCheckTasksWaitingTermination+0x14>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
800041e4:	00000013          	nop
800041e8:	01c12083          	lw	ra,28(sp)
800041ec:	01812403          	lw	s0,24(sp)
800041f0:	02010113          	addi	sp,sp,32
800041f4:	00008067          	ret

800041f8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
800041f8:	fe010113          	addi	sp,sp,-32
800041fc:	00112e23          	sw	ra,28(sp)
80004200:	00812c23          	sw	s0,24(sp)
80004204:	02010413          	addi	s0,sp,32
80004208:	fea42623          	sw	a0,-20(s0)
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
8000420c:	0001d797          	auipc	a5,0x1d
80004210:	c1078793          	addi	a5,a5,-1008 # 80020e1c <pxCurrentTCB>
80004214:	0007a783          	lw	a5,0(a5)
80004218:	fec42703          	lw	a4,-20(s0)
8000421c:	00e7a223          	sw	a4,4(a5)

	if( xTimeToWake < xTickCount )
80004220:	0001d797          	auipc	a5,0x1d
80004224:	6f878793          	addi	a5,a5,1784 # 80021918 <xTickCount>
80004228:	0007a783          	lw	a5,0(a5)
8000422c:	fec42703          	lw	a4,-20(s0)
80004230:	02f77863          	bleu	a5,a4,80004260 <prvAddCurrentTaskToDelayedList+0x68>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80004234:	0001d797          	auipc	a5,0x1d
80004238:	69c78793          	addi	a5,a5,1692 # 800218d0 <pxOverflowDelayedTaskList>
8000423c:	0007a703          	lw	a4,0(a5)
80004240:	0001d797          	auipc	a5,0x1d
80004244:	bdc78793          	addi	a5,a5,-1060 # 80020e1c <pxCurrentTCB>
80004248:	0007a783          	lw	a5,0(a5)
8000424c:	00478793          	addi	a5,a5,4
80004250:	00078593          	mv	a1,a5
80004254:	00070513          	mv	a0,a4
80004258:	e88fc0ef          	jal	ra,800008e0 <vListInsert>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
8000425c:	0500006f          	j	800042ac <prvAddCurrentTaskToDelayedList+0xb4>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80004260:	0001d797          	auipc	a5,0x1d
80004264:	66c78793          	addi	a5,a5,1644 # 800218cc <pxDelayedTaskList>
80004268:	0007a703          	lw	a4,0(a5)
8000426c:	0001d797          	auipc	a5,0x1d
80004270:	bb078793          	addi	a5,a5,-1104 # 80020e1c <pxCurrentTCB>
80004274:	0007a783          	lw	a5,0(a5)
80004278:	00478793          	addi	a5,a5,4
8000427c:	00078593          	mv	a1,a5
80004280:	00070513          	mv	a0,a4
80004284:	e5cfc0ef          	jal	ra,800008e0 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
80004288:	0001d797          	auipc	a5,0x1d
8000428c:	6ac78793          	addi	a5,a5,1708 # 80021934 <xNextTaskUnblockTime>
80004290:	0007a783          	lw	a5,0(a5)
80004294:	fec42703          	lw	a4,-20(s0)
80004298:	00f77a63          	bleu	a5,a4,800042ac <prvAddCurrentTaskToDelayedList+0xb4>
			xNextTaskUnblockTime = xTimeToWake;
8000429c:	0001d797          	auipc	a5,0x1d
800042a0:	69878793          	addi	a5,a5,1688 # 80021934 <xNextTaskUnblockTime>
800042a4:	fec42703          	lw	a4,-20(s0)
800042a8:	00e7a023          	sw	a4,0(a5)
}
800042ac:	00000013          	nop
800042b0:	01c12083          	lw	ra,28(sp)
800042b4:	01812403          	lw	s0,24(sp)
800042b8:	02010113          	addi	sp,sp,32
800042bc:	00008067          	ret

800042c0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
800042c0:	fd010113          	addi	sp,sp,-48
800042c4:	02112623          	sw	ra,44(sp)
800042c8:	02812423          	sw	s0,40(sp)
800042cc:	03010413          	addi	s0,sp,48
800042d0:	00050793          	mv	a5,a0
800042d4:	fcb42c23          	sw	a1,-40(s0)
800042d8:	fcf41f23          	sh	a5,-34(s0)
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
800042dc:	fd842783          	lw	a5,-40(s0)
800042e0:	00079e63          	bnez	a5,800042fc <prvAllocateTCBAndStack+0x3c>
800042e4:	fde45783          	lhu	a5,-34(s0)
800042e8:	00279793          	slli	a5,a5,0x2
800042ec:	00078513          	mv	a0,a5
800042f0:	520020ef          	jal	ra,80006810 <pvPortMalloc>
800042f4:	00050793          	mv	a5,a0
800042f8:	0080006f          	j	80004300 <prvAllocateTCBAndStack+0x40>
800042fc:	fd842783          	lw	a5,-40(s0)
80004300:	fef42423          	sw	a5,-24(s0)

		if( pxStack != NULL )
80004304:	fe842783          	lw	a5,-24(s0)
80004308:	02078a63          	beqz	a5,8000433c <prvAllocateTCBAndStack+0x7c>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
8000430c:	06000513          	li	a0,96
80004310:	500020ef          	jal	ra,80006810 <pvPortMalloc>
80004314:	fea42623          	sw	a0,-20(s0)

			if( pxNewTCB != NULL )
80004318:	fec42783          	lw	a5,-20(s0)
8000431c:	00078a63          	beqz	a5,80004330 <prvAllocateTCBAndStack+0x70>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
80004320:	fec42783          	lw	a5,-20(s0)
80004324:	fe842703          	lw	a4,-24(s0)
80004328:	02e7a823          	sw	a4,48(a5)
8000432c:	0140006f          	j	80004340 <prvAllocateTCBAndStack+0x80>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
80004330:	fe842503          	lw	a0,-24(s0)
80004334:	6e4020ef          	jal	ra,80006a18 <vPortFree>
80004338:	0080006f          	j	80004340 <prvAllocateTCBAndStack+0x80>
			}
		}
		else
		{
			pxNewTCB = NULL;
8000433c:	fe042623          	sw	zero,-20(s0)
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
80004340:	fec42783          	lw	a5,-20(s0)
80004344:	02078263          	beqz	a5,80004368 <prvAllocateTCBAndStack+0xa8>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
80004348:	fec42783          	lw	a5,-20(s0)
8000434c:	0307a703          	lw	a4,48(a5)
80004350:	fde45783          	lhu	a5,-34(s0)
80004354:	00279793          	slli	a5,a5,0x2
80004358:	00078613          	mv	a2,a5
8000435c:	0a500593          	li	a1,165
80004360:	00070513          	mv	a0,a4
80004364:	2c8040ef          	jal	ra,8000862c <memset>
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
80004368:	fec42783          	lw	a5,-20(s0)
}
8000436c:	00078513          	mv	a0,a5
80004370:	02c12083          	lw	ra,44(sp)
80004374:	02812403          	lw	s0,40(sp)
80004378:	03010113          	addi	sp,sp,48
8000437c:	00008067          	ret

80004380 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
80004380:	fc010113          	addi	sp,sp,-64
80004384:	02112e23          	sw	ra,60(sp)
80004388:	02812c23          	sw	s0,56(sp)
8000438c:	02912a23          	sw	s1,52(sp)
80004390:	04010413          	addi	s0,sp,64
80004394:	fca42623          	sw	a0,-52(s0)
80004398:	fcb42423          	sw	a1,-56(s0)
8000439c:	fcc42223          	sw	a2,-60(s0)
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
800043a0:	fe042623          	sw	zero,-20(s0)

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
800043a4:	fc842783          	lw	a5,-56(s0)
800043a8:	0007a783          	lw	a5,0(a5)
800043ac:	1c078863          	beqz	a5,8000457c <prvListTaskWithinSingleList+0x1fc>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
800043b0:	fc842783          	lw	a5,-56(s0)
800043b4:	fef42423          	sw	a5,-24(s0)
800043b8:	fe842783          	lw	a5,-24(s0)
800043bc:	0047a783          	lw	a5,4(a5)
800043c0:	0047a703          	lw	a4,4(a5)
800043c4:	fe842783          	lw	a5,-24(s0)
800043c8:	00e7a223          	sw	a4,4(a5)
800043cc:	fe842783          	lw	a5,-24(s0)
800043d0:	0047a703          	lw	a4,4(a5)
800043d4:	fe842783          	lw	a5,-24(s0)
800043d8:	00878793          	addi	a5,a5,8
800043dc:	00f71c63          	bne	a4,a5,800043f4 <prvListTaskWithinSingleList+0x74>
800043e0:	fe842783          	lw	a5,-24(s0)
800043e4:	0047a783          	lw	a5,4(a5)
800043e8:	0047a703          	lw	a4,4(a5)
800043ec:	fe842783          	lw	a5,-24(s0)
800043f0:	00e7a223          	sw	a4,4(a5)
800043f4:	fe842783          	lw	a5,-24(s0)
800043f8:	0047a783          	lw	a5,4(a5)
800043fc:	00c7a783          	lw	a5,12(a5)
80004400:	fef42223          	sw	a5,-28(s0)
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
80004404:	fc842783          	lw	a5,-56(s0)
80004408:	fef42023          	sw	a5,-32(s0)
8000440c:	fe042783          	lw	a5,-32(s0)
80004410:	0047a783          	lw	a5,4(a5)
80004414:	0047a703          	lw	a4,4(a5)
80004418:	fe042783          	lw	a5,-32(s0)
8000441c:	00e7a223          	sw	a4,4(a5)
80004420:	fe042783          	lw	a5,-32(s0)
80004424:	0047a703          	lw	a4,4(a5)
80004428:	fe042783          	lw	a5,-32(s0)
8000442c:	00878793          	addi	a5,a5,8
80004430:	00f71c63          	bne	a4,a5,80004448 <prvListTaskWithinSingleList+0xc8>
80004434:	fe042783          	lw	a5,-32(s0)
80004438:	0047a783          	lw	a5,4(a5)
8000443c:	0047a703          	lw	a4,4(a5)
80004440:	fe042783          	lw	a5,-32(s0)
80004444:	00e7a223          	sw	a4,4(a5)
80004448:	fe042783          	lw	a5,-32(s0)
8000444c:	0047a783          	lw	a5,4(a5)
80004450:	00c7a783          	lw	a5,12(a5)
80004454:	fcf42e23          	sw	a5,-36(s0)

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
80004458:	fec42783          	lw	a5,-20(s0)
8000445c:	00579793          	slli	a5,a5,0x5
80004460:	fcc42703          	lw	a4,-52(s0)
80004464:	00f707b3          	add	a5,a4,a5
80004468:	fdc42703          	lw	a4,-36(s0)
8000446c:	00e7a023          	sw	a4,0(a5)
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
80004470:	fec42783          	lw	a5,-20(s0)
80004474:	00579793          	slli	a5,a5,0x5
80004478:	fcc42703          	lw	a4,-52(s0)
8000447c:	00f707b3          	add	a5,a4,a5
80004480:	fdc42703          	lw	a4,-36(s0)
80004484:	03470713          	addi	a4,a4,52
80004488:	00e7a223          	sw	a4,4(a5)
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
8000448c:	fec42783          	lw	a5,-20(s0)
80004490:	00579793          	slli	a5,a5,0x5
80004494:	fcc42703          	lw	a4,-52(s0)
80004498:	00f707b3          	add	a5,a4,a5
8000449c:	fdc42703          	lw	a4,-36(s0)
800044a0:	04872703          	lw	a4,72(a4)
800044a4:	00e7a423          	sw	a4,8(a5)
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
800044a8:	fec42783          	lw	a5,-20(s0)
800044ac:	00579793          	slli	a5,a5,0x5
800044b0:	fcc42703          	lw	a4,-52(s0)
800044b4:	00f707b3          	add	a5,a4,a5
800044b8:	fc442703          	lw	a4,-60(s0)
800044bc:	00e7a623          	sw	a4,12(a5)
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
800044c0:	fec42783          	lw	a5,-20(s0)
800044c4:	00579793          	slli	a5,a5,0x5
800044c8:	fcc42703          	lw	a4,-52(s0)
800044cc:	00f707b3          	add	a5,a4,a5
800044d0:	fdc42703          	lw	a4,-36(s0)
800044d4:	02c72703          	lw	a4,44(a4)
800044d8:	00e7a823          	sw	a4,16(a5)
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a chance
					it is actually just blocked indefinitely - so really it should
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
800044dc:	fc442703          	lw	a4,-60(s0)
800044e0:	00300793          	li	a5,3
800044e4:	02f71463          	bne	a4,a5,8000450c <prvListTaskWithinSingleList+0x18c>
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
800044e8:	fdc42783          	lw	a5,-36(s0)
800044ec:	0287a783          	lw	a5,40(a5)
800044f0:	00078e63          	beqz	a5,8000450c <prvListTaskWithinSingleList+0x18c>
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
800044f4:	fec42783          	lw	a5,-20(s0)
800044f8:	00579793          	slli	a5,a5,0x5
800044fc:	fcc42703          	lw	a4,-52(s0)
80004500:	00f707b3          	add	a5,a4,a5
80004504:	00200713          	li	a4,2
80004508:	00e7a623          	sw	a4,12(a5)
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
8000450c:	fec42783          	lw	a5,-20(s0)
80004510:	00579793          	slli	a5,a5,0x5
80004514:	fcc42703          	lw	a4,-52(s0)
80004518:	00f707b3          	add	a5,a4,a5
8000451c:	fdc42703          	lw	a4,-36(s0)
80004520:	05072703          	lw	a4,80(a4)
80004524:	00e7aa23          	sw	a4,20(a5)
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
80004528:	fec42783          	lw	a5,-20(s0)
8000452c:	00579793          	slli	a5,a5,0x5
80004530:	fcc42703          	lw	a4,-52(s0)
80004534:	00f707b3          	add	a5,a4,a5
80004538:	0007ac23          	sw	zero,24(a5)
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
8000453c:	fdc42783          	lw	a5,-36(s0)
80004540:	0307a683          	lw	a3,48(a5)
80004544:	fec42783          	lw	a5,-20(s0)
80004548:	00579793          	slli	a5,a5,0x5
8000454c:	fcc42703          	lw	a4,-52(s0)
80004550:	00f704b3          	add	s1,a4,a5
80004554:	00068513          	mv	a0,a3
80004558:	040000ef          	jal	ra,80004598 <prvTaskCheckFreeStackSpace>
8000455c:	00050793          	mv	a5,a0
80004560:	00f49e23          	sh	a5,28(s1)
				}
				#endif

				uxTask++;
80004564:	fec42783          	lw	a5,-20(s0)
80004568:	00178793          	addi	a5,a5,1
8000456c:	fef42623          	sw	a5,-20(s0)

			} while( pxNextTCB != pxFirstTCB );
80004570:	fdc42703          	lw	a4,-36(s0)
80004574:	fe442783          	lw	a5,-28(s0)
80004578:	e8f716e3          	bne	a4,a5,80004404 <prvListTaskWithinSingleList+0x84>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
8000457c:	fec42783          	lw	a5,-20(s0)
	}
80004580:	00078513          	mv	a0,a5
80004584:	03c12083          	lw	ra,60(sp)
80004588:	03812403          	lw	s0,56(sp)
8000458c:	03412483          	lw	s1,52(sp)
80004590:	04010113          	addi	sp,sp,64
80004594:	00008067          	ret

80004598 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
80004598:	fd010113          	addi	sp,sp,-48
8000459c:	02812623          	sw	s0,44(sp)
800045a0:	03010413          	addi	s0,sp,48
800045a4:	fca42e23          	sw	a0,-36(s0)
	uint32_t ulCount = 0U;
800045a8:	fe042623          	sw	zero,-20(s0)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
800045ac:	01c0006f          	j	800045c8 <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
800045b0:	fdc42783          	lw	a5,-36(s0)
800045b4:	00178793          	addi	a5,a5,1
800045b8:	fcf42e23          	sw	a5,-36(s0)
			ulCount++;
800045bc:	fec42783          	lw	a5,-20(s0)
800045c0:	00178793          	addi	a5,a5,1
800045c4:	fef42623          	sw	a5,-20(s0)
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
800045c8:	fdc42783          	lw	a5,-36(s0)
800045cc:	0007c703          	lbu	a4,0(a5)
800045d0:	0a500793          	li	a5,165
800045d4:	fcf70ee3          	beq	a4,a5,800045b0 <prvTaskCheckFreeStackSpace+0x18>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
800045d8:	fec42783          	lw	a5,-20(s0)
800045dc:	0027d793          	srli	a5,a5,0x2
800045e0:	fef42623          	sw	a5,-20(s0)

		return ( uint16_t ) ulCount;
800045e4:	fec42783          	lw	a5,-20(s0)
800045e8:	01079793          	slli	a5,a5,0x10
800045ec:	0107d793          	srli	a5,a5,0x10
	}
800045f0:	00078513          	mv	a0,a5
800045f4:	02c12403          	lw	s0,44(sp)
800045f8:	03010113          	addi	sp,sp,48
800045fc:	00008067          	ret

80004600 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
80004600:	fe010113          	addi	sp,sp,-32
80004604:	00112e23          	sw	ra,28(sp)
80004608:	00812c23          	sw	s0,24(sp)
8000460c:	02010413          	addi	s0,sp,32
80004610:	fea42623          	sw	a0,-20(s0)
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
80004614:	fec42783          	lw	a5,-20(s0)
80004618:	0307a783          	lw	a5,48(a5)
8000461c:	00078513          	mv	a0,a5
80004620:	3f8020ef          	jal	ra,80006a18 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
80004624:	fec42503          	lw	a0,-20(s0)
80004628:	3f0020ef          	jal	ra,80006a18 <vPortFree>
	}
8000462c:	00000013          	nop
80004630:	01c12083          	lw	ra,28(sp)
80004634:	01812403          	lw	s0,24(sp)
80004638:	02010113          	addi	sp,sp,32
8000463c:	00008067          	ret

80004640 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
80004640:	fe010113          	addi	sp,sp,-32
80004644:	00812e23          	sw	s0,28(sp)
80004648:	02010413          	addi	s0,sp,32
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
8000464c:	0001d797          	auipc	a5,0x1d
80004650:	28078793          	addi	a5,a5,640 # 800218cc <pxDelayedTaskList>
80004654:	0007a783          	lw	a5,0(a5)
80004658:	0007a783          	lw	a5,0(a5)
8000465c:	00079663          	bnez	a5,80004668 <prvResetNextTaskUnblockTime+0x28>
80004660:	00100793          	li	a5,1
80004664:	0080006f          	j	8000466c <prvResetNextTaskUnblockTime+0x2c>
80004668:	00000793          	li	a5,0
8000466c:	00078c63          	beqz	a5,80004684 <prvResetNextTaskUnblockTime+0x44>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
80004670:	0001d797          	auipc	a5,0x1d
80004674:	2c478793          	addi	a5,a5,708 # 80021934 <xNextTaskUnblockTime>
80004678:	fff00713          	li	a4,-1
8000467c:	00e7a023          	sw	a4,0(a5)
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
80004680:	0300006f          	j	800046b0 <prvResetNextTaskUnblockTime+0x70>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80004684:	0001d797          	auipc	a5,0x1d
80004688:	24878793          	addi	a5,a5,584 # 800218cc <pxDelayedTaskList>
8000468c:	0007a783          	lw	a5,0(a5)
80004690:	00c7a783          	lw	a5,12(a5)
80004694:	00c7a783          	lw	a5,12(a5)
80004698:	fef42623          	sw	a5,-20(s0)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
8000469c:	fec42783          	lw	a5,-20(s0)
800046a0:	0047a703          	lw	a4,4(a5)
800046a4:	0001d797          	auipc	a5,0x1d
800046a8:	29078793          	addi	a5,a5,656 # 80021934 <xNextTaskUnblockTime>
800046ac:	00e7a023          	sw	a4,0(a5)
}
800046b0:	00000013          	nop
800046b4:	01c12403          	lw	s0,28(sp)
800046b8:	02010113          	addi	sp,sp,32
800046bc:	00008067          	ret

800046c0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
800046c0:	fe010113          	addi	sp,sp,-32
800046c4:	00812e23          	sw	s0,28(sp)
800046c8:	02010413          	addi	s0,sp,32
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
800046cc:	0001c797          	auipc	a5,0x1c
800046d0:	75078793          	addi	a5,a5,1872 # 80020e1c <pxCurrentTCB>
800046d4:	0007a783          	lw	a5,0(a5)
800046d8:	fef42623          	sw	a5,-20(s0)

		return xReturn;
800046dc:	fec42783          	lw	a5,-20(s0)
	}
800046e0:	00078513          	mv	a0,a5
800046e4:	01c12403          	lw	s0,28(sp)
800046e8:	02010113          	addi	sp,sp,32
800046ec:	00008067          	ret

800046f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
800046f0:	fe010113          	addi	sp,sp,-32
800046f4:	00812e23          	sw	s0,28(sp)
800046f8:	02010413          	addi	s0,sp,32
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
800046fc:	0001d797          	auipc	a5,0x1d
80004700:	22478793          	addi	a5,a5,548 # 80021920 <xSchedulerRunning>
80004704:	0007a783          	lw	a5,0(a5)
80004708:	00079863          	bnez	a5,80004718 <xTaskGetSchedulerState+0x28>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
8000470c:	00100793          	li	a5,1
80004710:	fef42623          	sw	a5,-20(s0)
80004714:	0240006f          	j	80004738 <xTaskGetSchedulerState+0x48>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80004718:	0001d797          	auipc	a5,0x1d
8000471c:	22078793          	addi	a5,a5,544 # 80021938 <uxSchedulerSuspended>
80004720:	0007a783          	lw	a5,0(a5)
80004724:	00079863          	bnez	a5,80004734 <xTaskGetSchedulerState+0x44>
			{
				xReturn = taskSCHEDULER_RUNNING;
80004728:	00200793          	li	a5,2
8000472c:	fef42623          	sw	a5,-20(s0)
80004730:	0080006f          	j	80004738 <xTaskGetSchedulerState+0x48>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
80004734:	fe042623          	sw	zero,-20(s0)
			}
		}

		return xReturn;
80004738:	fec42783          	lw	a5,-20(s0)
	}
8000473c:	00078513          	mv	a0,a5
80004740:	01c12403          	lw	s0,28(sp)
80004744:	02010113          	addi	sp,sp,32
80004748:	00008067          	ret

8000474c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
8000474c:	fd010113          	addi	sp,sp,-48
80004750:	02112623          	sw	ra,44(sp)
80004754:	02812423          	sw	s0,40(sp)
80004758:	03010413          	addi	s0,sp,48
8000475c:	fca42e23          	sw	a0,-36(s0)
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
80004760:	fdc42783          	lw	a5,-36(s0)
80004764:	fef42623          	sw	a5,-20(s0)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
80004768:	fdc42783          	lw	a5,-36(s0)
8000476c:	12078a63          	beqz	a5,800048a0 <vTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
80004770:	fec42783          	lw	a5,-20(s0)
80004774:	02c7a703          	lw	a4,44(a5)
80004778:	0001c797          	auipc	a5,0x1c
8000477c:	6a478793          	addi	a5,a5,1700 # 80020e1c <pxCurrentTCB>
80004780:	0007a783          	lw	a5,0(a5)
80004784:	02c7a783          	lw	a5,44(a5)
80004788:	10f77c63          	bleu	a5,a4,800048a0 <vTaskPriorityInherit+0x154>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
8000478c:	fec42783          	lw	a5,-20(s0)
80004790:	0187a783          	lw	a5,24(a5)
80004794:	0207c263          	bltz	a5,800047b8 <vTaskPriorityInherit+0x6c>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80004798:	0001c797          	auipc	a5,0x1c
8000479c:	68478793          	addi	a5,a5,1668 # 80020e1c <pxCurrentTCB>
800047a0:	0007a783          	lw	a5,0(a5)
800047a4:	02c7a783          	lw	a5,44(a5)
800047a8:	00500713          	li	a4,5
800047ac:	40f70733          	sub	a4,a4,a5
800047b0:	fec42783          	lw	a5,-20(s0)
800047b4:	00e7ac23          	sw	a4,24(a5)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
800047b8:	fec42783          	lw	a5,-20(s0)
800047bc:	0147a683          	lw	a3,20(a5)
800047c0:	fec42783          	lw	a5,-20(s0)
800047c4:	02c7a703          	lw	a4,44(a5)
800047c8:	00070793          	mv	a5,a4
800047cc:	00279793          	slli	a5,a5,0x2
800047d0:	00e787b3          	add	a5,a5,a4
800047d4:	00279793          	slli	a5,a5,0x2
800047d8:	0001d717          	auipc	a4,0x1d
800047dc:	06870713          	addi	a4,a4,104 # 80021840 <__bss_start>
800047e0:	00e787b3          	add	a5,a5,a4
800047e4:	00f69663          	bne	a3,a5,800047f0 <vTaskPriorityInherit+0xa4>
800047e8:	00100793          	li	a5,1
800047ec:	0080006f          	j	800047f4 <vTaskPriorityInherit+0xa8>
800047f0:	00000793          	li	a5,0
800047f4:	08078a63          	beqz	a5,80004888 <vTaskPriorityInherit+0x13c>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
800047f8:	fec42783          	lw	a5,-20(s0)
800047fc:	00478793          	addi	a5,a5,4
80004800:	00078513          	mv	a0,a5
80004804:	9b0fc0ef          	jal	ra,800009b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
80004808:	0001c797          	auipc	a5,0x1c
8000480c:	61478793          	addi	a5,a5,1556 # 80020e1c <pxCurrentTCB>
80004810:	0007a783          	lw	a5,0(a5)
80004814:	02c7a703          	lw	a4,44(a5)
80004818:	fec42783          	lw	a5,-20(s0)
8000481c:	02e7a623          	sw	a4,44(a5)
					prvAddTaskToReadyList( pxTCB );
80004820:	fec42783          	lw	a5,-20(s0)
80004824:	02c7a703          	lw	a4,44(a5)
80004828:	0001d797          	auipc	a5,0x1d
8000482c:	0f478793          	addi	a5,a5,244 # 8002191c <uxTopReadyPriority>
80004830:	0007a783          	lw	a5,0(a5)
80004834:	00e7fc63          	bleu	a4,a5,8000484c <vTaskPriorityInherit+0x100>
80004838:	fec42783          	lw	a5,-20(s0)
8000483c:	02c7a703          	lw	a4,44(a5)
80004840:	0001d797          	auipc	a5,0x1d
80004844:	0dc78793          	addi	a5,a5,220 # 8002191c <uxTopReadyPriority>
80004848:	00e7a023          	sw	a4,0(a5)
8000484c:	fec42783          	lw	a5,-20(s0)
80004850:	02c7a703          	lw	a4,44(a5)
80004854:	00070793          	mv	a5,a4
80004858:	00279793          	slli	a5,a5,0x2
8000485c:	00e787b3          	add	a5,a5,a4
80004860:	00279793          	slli	a5,a5,0x2
80004864:	0001d717          	auipc	a4,0x1d
80004868:	fdc70713          	addi	a4,a4,-36 # 80021840 <__bss_start>
8000486c:	00e78733          	add	a4,a5,a4
80004870:	fec42783          	lw	a5,-20(s0)
80004874:	00478793          	addi	a5,a5,4
80004878:	00078593          	mv	a1,a5
8000487c:	00070513          	mv	a0,a4
80004880:	fd9fb0ef          	jal	ra,80000858 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80004884:	01c0006f          	j	800048a0 <vTaskPriorityInherit+0x154>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
80004888:	0001c797          	auipc	a5,0x1c
8000488c:	59478793          	addi	a5,a5,1428 # 80020e1c <pxCurrentTCB>
80004890:	0007a783          	lw	a5,0(a5)
80004894:	02c7a703          	lw	a4,44(a5)
80004898:	fec42783          	lw	a5,-20(s0)
8000489c:	02e7a623          	sw	a4,44(a5)
	}
800048a0:	00000013          	nop
800048a4:	02c12083          	lw	ra,44(sp)
800048a8:	02812403          	lw	s0,40(sp)
800048ac:	03010113          	addi	sp,sp,48
800048b0:	00008067          	ret

800048b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
800048b4:	fd010113          	addi	sp,sp,-48
800048b8:	02112623          	sw	ra,44(sp)
800048bc:	02812423          	sw	s0,40(sp)
800048c0:	03010413          	addi	s0,sp,48
800048c4:	fca42e23          	sw	a0,-36(s0)
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
800048c8:	fdc42783          	lw	a5,-36(s0)
800048cc:	fef42423          	sw	a5,-24(s0)
	BaseType_t xReturn = pdFALSE;
800048d0:	fe042623          	sw	zero,-20(s0)

		if( pxMutexHolder != NULL )
800048d4:	fdc42783          	lw	a5,-36(s0)
800048d8:	10078663          	beqz	a5,800049e4 <xTaskPriorityDisinherit+0x130>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
800048dc:	0001c797          	auipc	a5,0x1c
800048e0:	54078793          	addi	a5,a5,1344 # 80020e1c <pxCurrentTCB>
800048e4:	0007a783          	lw	a5,0(a5)
800048e8:	fe842703          	lw	a4,-24(s0)
800048ec:	00f70663          	beq	a4,a5,800048f8 <xTaskPriorityDisinherit+0x44>
800048f0:	30007073          	csrci	mstatus,0
800048f4:	0000006f          	j	800048f4 <xTaskPriorityDisinherit+0x40>

			configASSERT( pxTCB->uxMutexesHeld );
800048f8:	fe842783          	lw	a5,-24(s0)
800048fc:	0547a783          	lw	a5,84(a5)
80004900:	00079663          	bnez	a5,8000490c <xTaskPriorityDisinherit+0x58>
80004904:	30007073          	csrci	mstatus,0
80004908:	0000006f          	j	80004908 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
8000490c:	fe842783          	lw	a5,-24(s0)
80004910:	0547a783          	lw	a5,84(a5)
80004914:	fff78713          	addi	a4,a5,-1
80004918:	fe842783          	lw	a5,-24(s0)
8000491c:	04e7aa23          	sw	a4,84(a5)

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
80004920:	fe842783          	lw	a5,-24(s0)
80004924:	02c7a703          	lw	a4,44(a5)
80004928:	fe842783          	lw	a5,-24(s0)
8000492c:	0507a783          	lw	a5,80(a5)
80004930:	0af70a63          	beq	a4,a5,800049e4 <xTaskPriorityDisinherit+0x130>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
80004934:	fe842783          	lw	a5,-24(s0)
80004938:	0547a783          	lw	a5,84(a5)
8000493c:	0a079463          	bnez	a5,800049e4 <xTaskPriorityDisinherit+0x130>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80004940:	fe842783          	lw	a5,-24(s0)
80004944:	00478793          	addi	a5,a5,4
80004948:	00078513          	mv	a0,a5
8000494c:	868fc0ef          	jal	ra,800009b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
80004950:	fe842783          	lw	a5,-24(s0)
80004954:	0507a703          	lw	a4,80(a5)
80004958:	fe842783          	lw	a5,-24(s0)
8000495c:	02e7a623          	sw	a4,44(a5)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80004960:	fe842783          	lw	a5,-24(s0)
80004964:	02c7a783          	lw	a5,44(a5)
80004968:	00500713          	li	a4,5
8000496c:	40f70733          	sub	a4,a4,a5
80004970:	fe842783          	lw	a5,-24(s0)
80004974:	00e7ac23          	sw	a4,24(a5)
					prvAddTaskToReadyList( pxTCB );
80004978:	fe842783          	lw	a5,-24(s0)
8000497c:	02c7a703          	lw	a4,44(a5)
80004980:	0001d797          	auipc	a5,0x1d
80004984:	f9c78793          	addi	a5,a5,-100 # 8002191c <uxTopReadyPriority>
80004988:	0007a783          	lw	a5,0(a5)
8000498c:	00e7fc63          	bleu	a4,a5,800049a4 <xTaskPriorityDisinherit+0xf0>
80004990:	fe842783          	lw	a5,-24(s0)
80004994:	02c7a703          	lw	a4,44(a5)
80004998:	0001d797          	auipc	a5,0x1d
8000499c:	f8478793          	addi	a5,a5,-124 # 8002191c <uxTopReadyPriority>
800049a0:	00e7a023          	sw	a4,0(a5)
800049a4:	fe842783          	lw	a5,-24(s0)
800049a8:	02c7a703          	lw	a4,44(a5)
800049ac:	00070793          	mv	a5,a4
800049b0:	00279793          	slli	a5,a5,0x2
800049b4:	00e787b3          	add	a5,a5,a4
800049b8:	00279793          	slli	a5,a5,0x2
800049bc:	0001d717          	auipc	a4,0x1d
800049c0:	e8470713          	addi	a4,a4,-380 # 80021840 <__bss_start>
800049c4:	00e78733          	add	a4,a5,a4
800049c8:	fe842783          	lw	a5,-24(s0)
800049cc:	00478793          	addi	a5,a5,4
800049d0:	00078593          	mv	a1,a5
800049d4:	00070513          	mv	a0,a4
800049d8:	e81fb0ef          	jal	ra,80000858 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
800049dc:	00100793          	li	a5,1
800049e0:	fef42623          	sw	a5,-20(s0)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
800049e4:	fec42783          	lw	a5,-20(s0)
	}
800049e8:	00078513          	mv	a0,a5
800049ec:	02c12083          	lw	ra,44(sp)
800049f0:	02812403          	lw	s0,40(sp)
800049f4:	03010113          	addi	sp,sp,48
800049f8:	00008067          	ret

800049fc <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
800049fc:	ff010113          	addi	sp,sp,-16
80004a00:	00812623          	sw	s0,12(sp)
80004a04:	01010413          	addi	s0,sp,16
		portDISABLE_INTERRUPTS();
80004a08:	30007073          	csrci	mstatus,0

		if( xSchedulerRunning != pdFALSE )
80004a0c:	0001d797          	auipc	a5,0x1d
80004a10:	f1478793          	addi	a5,a5,-236 # 80021920 <xSchedulerRunning>
80004a14:	0007a783          	lw	a5,0(a5)
80004a18:	02078463          	beqz	a5,80004a40 <vTaskEnterCritical+0x44>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
80004a1c:	0001c797          	auipc	a5,0x1c
80004a20:	40078793          	addi	a5,a5,1024 # 80020e1c <pxCurrentTCB>
80004a24:	0007a783          	lw	a5,0(a5)
80004a28:	0447a703          	lw	a4,68(a5)
80004a2c:	00170713          	addi	a4,a4,1
80004a30:	04e7a223          	sw	a4,68(a5)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
80004a34:	0001c797          	auipc	a5,0x1c
80004a38:	3e878793          	addi	a5,a5,1000 # 80020e1c <pxCurrentTCB>
80004a3c:	0007a783          	lw	a5,0(a5)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80004a40:	00000013          	nop
80004a44:	00c12403          	lw	s0,12(sp)
80004a48:	01010113          	addi	sp,sp,16
80004a4c:	00008067          	ret

80004a50 <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
80004a50:	ff010113          	addi	sp,sp,-16
80004a54:	00812623          	sw	s0,12(sp)
80004a58:	01010413          	addi	s0,sp,16
		if( xSchedulerRunning != pdFALSE )
80004a5c:	0001d797          	auipc	a5,0x1d
80004a60:	ec478793          	addi	a5,a5,-316 # 80021920 <xSchedulerRunning>
80004a64:	0007a783          	lw	a5,0(a5)
80004a68:	04078463          	beqz	a5,80004ab0 <vTaskExitCritical+0x60>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
80004a6c:	0001c797          	auipc	a5,0x1c
80004a70:	3b078793          	addi	a5,a5,944 # 80020e1c <pxCurrentTCB>
80004a74:	0007a783          	lw	a5,0(a5)
80004a78:	0447a783          	lw	a5,68(a5)
80004a7c:	02078a63          	beqz	a5,80004ab0 <vTaskExitCritical+0x60>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
80004a80:	0001c797          	auipc	a5,0x1c
80004a84:	39c78793          	addi	a5,a5,924 # 80020e1c <pxCurrentTCB>
80004a88:	0007a783          	lw	a5,0(a5)
80004a8c:	0447a703          	lw	a4,68(a5)
80004a90:	fff70713          	addi	a4,a4,-1
80004a94:	04e7a223          	sw	a4,68(a5)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
80004a98:	0001c797          	auipc	a5,0x1c
80004a9c:	38478793          	addi	a5,a5,900 # 80020e1c <pxCurrentTCB>
80004aa0:	0007a783          	lw	a5,0(a5)
80004aa4:	0447a783          	lw	a5,68(a5)
80004aa8:	00079463          	bnez	a5,80004ab0 <vTaskExitCritical+0x60>
				{
					portENABLE_INTERRUPTS();
80004aac:	30046073          	csrsi	mstatus,8
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80004ab0:	00000013          	nop
80004ab4:	00c12403          	lw	s0,12(sp)
80004ab8:	01010113          	addi	sp,sp,16
80004abc:	00008067          	ret

80004ac0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
80004ac0:	fe010113          	addi	sp,sp,-32
80004ac4:	00812e23          	sw	s0,28(sp)
80004ac8:	02010413          	addi	s0,sp,32
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
80004acc:	0001c797          	auipc	a5,0x1c
80004ad0:	35078793          	addi	a5,a5,848 # 80020e1c <pxCurrentTCB>
80004ad4:	0007a783          	lw	a5,0(a5)
80004ad8:	0187a783          	lw	a5,24(a5)
80004adc:	fef42623          	sw	a5,-20(s0)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80004ae0:	0001c797          	auipc	a5,0x1c
80004ae4:	33c78793          	addi	a5,a5,828 # 80020e1c <pxCurrentTCB>
80004ae8:	0007a783          	lw	a5,0(a5)
80004aec:	02c7a703          	lw	a4,44(a5)
80004af0:	0001c797          	auipc	a5,0x1c
80004af4:	32c78793          	addi	a5,a5,812 # 80020e1c <pxCurrentTCB>
80004af8:	0007a783          	lw	a5,0(a5)
80004afc:	00500693          	li	a3,5
80004b00:	40e68733          	sub	a4,a3,a4
80004b04:	00e7ac23          	sw	a4,24(a5)

	return uxReturn;
80004b08:	fec42783          	lw	a5,-20(s0)
}
80004b0c:	00078513          	mv	a0,a5
80004b10:	01c12403          	lw	s0,28(sp)
80004b14:	02010113          	addi	sp,sp,32
80004b18:	00008067          	ret

80004b1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
80004b1c:	ff010113          	addi	sp,sp,-16
80004b20:	00812623          	sw	s0,12(sp)
80004b24:	01010413          	addi	s0,sp,16
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
80004b28:	0001c797          	auipc	a5,0x1c
80004b2c:	2f478793          	addi	a5,a5,756 # 80020e1c <pxCurrentTCB>
80004b30:	0007a783          	lw	a5,0(a5)
80004b34:	00078e63          	beqz	a5,80004b50 <pvTaskIncrementMutexHeldCount+0x34>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
80004b38:	0001c797          	auipc	a5,0x1c
80004b3c:	2e478793          	addi	a5,a5,740 # 80020e1c <pxCurrentTCB>
80004b40:	0007a783          	lw	a5,0(a5)
80004b44:	0547a703          	lw	a4,84(a5)
80004b48:	00170713          	addi	a4,a4,1
80004b4c:	04e7aa23          	sw	a4,84(a5)
		}

		return pxCurrentTCB;
80004b50:	0001c797          	auipc	a5,0x1c
80004b54:	2cc78793          	addi	a5,a5,716 # 80020e1c <pxCurrentTCB>
80004b58:	0007a783          	lw	a5,0(a5)
	}
80004b5c:	00078513          	mv	a0,a5
80004b60:	00c12403          	lw	s0,12(sp)
80004b64:	01010113          	addi	sp,sp,16
80004b68:	00008067          	ret

80004b6c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
80004b6c:	fd010113          	addi	sp,sp,-48
80004b70:	02112623          	sw	ra,44(sp)
80004b74:	02812423          	sw	s0,40(sp)
80004b78:	03010413          	addi	s0,sp,48
80004b7c:	fca42e23          	sw	a0,-36(s0)
80004b80:	fcb42c23          	sw	a1,-40(s0)
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
80004b84:	e79ff0ef          	jal	ra,800049fc <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
80004b88:	0001c797          	auipc	a5,0x1c
80004b8c:	29478793          	addi	a5,a5,660 # 80020e1c <pxCurrentTCB>
80004b90:	0007a783          	lw	a5,0(a5)
80004b94:	0587a783          	lw	a5,88(a5)
80004b98:	08079663          	bnez	a5,80004c24 <ulTaskNotifyTake+0xb8>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
80004b9c:	0001c797          	auipc	a5,0x1c
80004ba0:	28078793          	addi	a5,a5,640 # 80020e1c <pxCurrentTCB>
80004ba4:	0007a783          	lw	a5,0(a5)
80004ba8:	00100713          	li	a4,1
80004bac:	04e7ae23          	sw	a4,92(a5)

				if( xTicksToWait > ( TickType_t ) 0 )
80004bb0:	fd842783          	lw	a5,-40(s0)
80004bb4:	06078863          	beqz	a5,80004c24 <ulTaskNotifyTake+0xb8>
				{
					/* The task is going to block.  First it must be removed
					from the ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80004bb8:	0001c797          	auipc	a5,0x1c
80004bbc:	26478793          	addi	a5,a5,612 # 80020e1c <pxCurrentTCB>
80004bc0:	0007a783          	lw	a5,0(a5)
80004bc4:	00478793          	addi	a5,a5,4
80004bc8:	00078513          	mv	a0,a5
80004bcc:	de9fb0ef          	jal	ra,800009b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
80004bd0:	fd842703          	lw	a4,-40(s0)
80004bd4:	fff00793          	li	a5,-1
80004bd8:	02f71463          	bne	a4,a5,80004c00 <ulTaskNotifyTake+0x94>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80004bdc:	0001c797          	auipc	a5,0x1c
80004be0:	24078793          	addi	a5,a5,576 # 80020e1c <pxCurrentTCB>
80004be4:	0007a783          	lw	a5,0(a5)
80004be8:	00478793          	addi	a5,a5,4
80004bec:	00078593          	mv	a1,a5
80004bf0:	0001d517          	auipc	a0,0x1d
80004bf4:	d1050513          	addi	a0,a0,-752 # 80021900 <xSuspendedTaskList>
80004bf8:	c61fb0ef          	jal	ra,80000858 <vListInsertEnd>
80004bfc:	0240006f          	j	80004c20 <ulTaskNotifyTake+0xb4>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
80004c00:	0001d797          	auipc	a5,0x1d
80004c04:	d1878793          	addi	a5,a5,-744 # 80021918 <xTickCount>
80004c08:	0007a783          	lw	a5,0(a5)
80004c0c:	fd842703          	lw	a4,-40(s0)
80004c10:	00f707b3          	add	a5,a4,a5
80004c14:	fef42623          	sw	a5,-20(s0)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
80004c18:	fec42503          	lw	a0,-20(s0)
80004c1c:	ddcff0ef          	jal	ra,800041f8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
80004c20:	86dfb0ef          	jal	ra,8000048c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
80004c24:	e2dff0ef          	jal	ra,80004a50 <vTaskExitCritical>

		taskENTER_CRITICAL();
80004c28:	dd5ff0ef          	jal	ra,800049fc <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
80004c2c:	0001c797          	auipc	a5,0x1c
80004c30:	1f078793          	addi	a5,a5,496 # 80020e1c <pxCurrentTCB>
80004c34:	0007a783          	lw	a5,0(a5)
80004c38:	0587a783          	lw	a5,88(a5)
80004c3c:	fef42423          	sw	a5,-24(s0)

			if( ulReturn != 0UL )
80004c40:	fe842783          	lw	a5,-24(s0)
80004c44:	02078c63          	beqz	a5,80004c7c <ulTaskNotifyTake+0x110>
			{
				if( xClearCountOnExit != pdFALSE )
80004c48:	fdc42783          	lw	a5,-36(s0)
80004c4c:	00078c63          	beqz	a5,80004c64 <ulTaskNotifyTake+0xf8>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
80004c50:	0001c797          	auipc	a5,0x1c
80004c54:	1cc78793          	addi	a5,a5,460 # 80020e1c <pxCurrentTCB>
80004c58:	0007a783          	lw	a5,0(a5)
80004c5c:	0407ac23          	sw	zero,88(a5)
80004c60:	01c0006f          	j	80004c7c <ulTaskNotifyTake+0x110>
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
80004c64:	0001c797          	auipc	a5,0x1c
80004c68:	1b878793          	addi	a5,a5,440 # 80020e1c <pxCurrentTCB>
80004c6c:	0007a783          	lw	a5,0(a5)
80004c70:	0587a703          	lw	a4,88(a5)
80004c74:	fff70713          	addi	a4,a4,-1
80004c78:	04e7ac23          	sw	a4,88(a5)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
80004c7c:	0001c797          	auipc	a5,0x1c
80004c80:	1a078793          	addi	a5,a5,416 # 80020e1c <pxCurrentTCB>
80004c84:	0007a783          	lw	a5,0(a5)
80004c88:	0407ae23          	sw	zero,92(a5)
		}
		taskEXIT_CRITICAL();
80004c8c:	dc5ff0ef          	jal	ra,80004a50 <vTaskExitCritical>

		return ulReturn;
80004c90:	fe842783          	lw	a5,-24(s0)
	}
80004c94:	00078513          	mv	a0,a5
80004c98:	02c12083          	lw	ra,44(sp)
80004c9c:	02812403          	lw	s0,40(sp)
80004ca0:	03010113          	addi	sp,sp,48
80004ca4:	00008067          	ret

80004ca8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
80004ca8:	fd010113          	addi	sp,sp,-48
80004cac:	02112623          	sw	ra,44(sp)
80004cb0:	02812423          	sw	s0,40(sp)
80004cb4:	03010413          	addi	s0,sp,48
80004cb8:	fca42e23          	sw	a0,-36(s0)
80004cbc:	fcb42c23          	sw	a1,-40(s0)
80004cc0:	fcc42a23          	sw	a2,-44(s0)
80004cc4:	fcd42823          	sw	a3,-48(s0)
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
80004cc8:	d35ff0ef          	jal	ra,800049fc <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
80004ccc:	0001c797          	auipc	a5,0x1c
80004cd0:	15078793          	addi	a5,a5,336 # 80020e1c <pxCurrentTCB>
80004cd4:	0007a783          	lw	a5,0(a5)
80004cd8:	05c7a703          	lw	a4,92(a5)
80004cdc:	00200793          	li	a5,2
80004ce0:	0af70663          	beq	a4,a5,80004d8c <xTaskNotifyWait+0xe4>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
80004ce4:	0001c797          	auipc	a5,0x1c
80004ce8:	13878793          	addi	a5,a5,312 # 80020e1c <pxCurrentTCB>
80004cec:	0007a783          	lw	a5,0(a5)
80004cf0:	0587a683          	lw	a3,88(a5)
80004cf4:	fdc42703          	lw	a4,-36(s0)
80004cf8:	fff74713          	not	a4,a4
80004cfc:	00e6f733          	and	a4,a3,a4
80004d00:	04e7ac23          	sw	a4,88(a5)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
80004d04:	0001c797          	auipc	a5,0x1c
80004d08:	11878793          	addi	a5,a5,280 # 80020e1c <pxCurrentTCB>
80004d0c:	0007a783          	lw	a5,0(a5)
80004d10:	00100713          	li	a4,1
80004d14:	04e7ae23          	sw	a4,92(a5)

				if( xTicksToWait > ( TickType_t ) 0 )
80004d18:	fd042783          	lw	a5,-48(s0)
80004d1c:	06078863          	beqz	a5,80004d8c <xTaskNotifyWait+0xe4>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80004d20:	0001c797          	auipc	a5,0x1c
80004d24:	0fc78793          	addi	a5,a5,252 # 80020e1c <pxCurrentTCB>
80004d28:	0007a783          	lw	a5,0(a5)
80004d2c:	00478793          	addi	a5,a5,4
80004d30:	00078513          	mv	a0,a5
80004d34:	c81fb0ef          	jal	ra,800009b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
80004d38:	fd042703          	lw	a4,-48(s0)
80004d3c:	fff00793          	li	a5,-1
80004d40:	02f71463          	bne	a4,a5,80004d68 <xTaskNotifyWait+0xc0>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80004d44:	0001c797          	auipc	a5,0x1c
80004d48:	0d878793          	addi	a5,a5,216 # 80020e1c <pxCurrentTCB>
80004d4c:	0007a783          	lw	a5,0(a5)
80004d50:	00478793          	addi	a5,a5,4
80004d54:	00078593          	mv	a1,a5
80004d58:	0001d517          	auipc	a0,0x1d
80004d5c:	ba850513          	addi	a0,a0,-1112 # 80021900 <xSuspendedTaskList>
80004d60:	af9fb0ef          	jal	ra,80000858 <vListInsertEnd>
80004d64:	0240006f          	j	80004d88 <xTaskNotifyWait+0xe0>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
80004d68:	0001d797          	auipc	a5,0x1d
80004d6c:	bb078793          	addi	a5,a5,-1104 # 80021918 <xTickCount>
80004d70:	0007a783          	lw	a5,0(a5)
80004d74:	fd042703          	lw	a4,-48(s0)
80004d78:	00f707b3          	add	a5,a4,a5
80004d7c:	fef42423          	sw	a5,-24(s0)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
80004d80:	fe842503          	lw	a0,-24(s0)
80004d84:	c74ff0ef          	jal	ra,800041f8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
80004d88:	f04fb0ef          	jal	ra,8000048c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
80004d8c:	cc5ff0ef          	jal	ra,80004a50 <vTaskExitCritical>

		taskENTER_CRITICAL();
80004d90:	c6dff0ef          	jal	ra,800049fc <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
80004d94:	fd442783          	lw	a5,-44(s0)
80004d98:	00078e63          	beqz	a5,80004db4 <xTaskNotifyWait+0x10c>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
80004d9c:	0001c797          	auipc	a5,0x1c
80004da0:	08078793          	addi	a5,a5,128 # 80020e1c <pxCurrentTCB>
80004da4:	0007a783          	lw	a5,0(a5)
80004da8:	0587a703          	lw	a4,88(a5)
80004dac:	fd442783          	lw	a5,-44(s0)
80004db0:	00e7a023          	sw	a4,0(a5)

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
80004db4:	0001c797          	auipc	a5,0x1c
80004db8:	06878793          	addi	a5,a5,104 # 80020e1c <pxCurrentTCB>
80004dbc:	0007a783          	lw	a5,0(a5)
80004dc0:	05c7a703          	lw	a4,92(a5)
80004dc4:	00100793          	li	a5,1
80004dc8:	00f71663          	bne	a4,a5,80004dd4 <xTaskNotifyWait+0x12c>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
80004dcc:	fe042623          	sw	zero,-20(s0)
80004dd0:	02c0006f          	j	80004dfc <xTaskNotifyWait+0x154>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
80004dd4:	0001c797          	auipc	a5,0x1c
80004dd8:	04878793          	addi	a5,a5,72 # 80020e1c <pxCurrentTCB>
80004ddc:	0007a783          	lw	a5,0(a5)
80004de0:	0587a683          	lw	a3,88(a5)
80004de4:	fd842703          	lw	a4,-40(s0)
80004de8:	fff74713          	not	a4,a4
80004dec:	00e6f733          	and	a4,a3,a4
80004df0:	04e7ac23          	sw	a4,88(a5)
				xReturn = pdTRUE;
80004df4:	00100793          	li	a5,1
80004df8:	fef42623          	sw	a5,-20(s0)
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
80004dfc:	0001c797          	auipc	a5,0x1c
80004e00:	02078793          	addi	a5,a5,32 # 80020e1c <pxCurrentTCB>
80004e04:	0007a783          	lw	a5,0(a5)
80004e08:	0407ae23          	sw	zero,92(a5)
		}
		taskEXIT_CRITICAL();
80004e0c:	c45ff0ef          	jal	ra,80004a50 <vTaskExitCritical>

		return xReturn;
80004e10:	fec42783          	lw	a5,-20(s0)
	}
80004e14:	00078513          	mv	a0,a5
80004e18:	02c12083          	lw	ra,44(sp)
80004e1c:	02812403          	lw	s0,40(sp)
80004e20:	03010113          	addi	sp,sp,48
80004e24:	00008067          	ret

80004e28 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
80004e28:	fd010113          	addi	sp,sp,-48
80004e2c:	02112623          	sw	ra,44(sp)
80004e30:	02812423          	sw	s0,40(sp)
80004e34:	03010413          	addi	s0,sp,48
80004e38:	fca42e23          	sw	a0,-36(s0)
80004e3c:	fcb42c23          	sw	a1,-40(s0)
80004e40:	fcc42a23          	sw	a2,-44(s0)
80004e44:	fcd42823          	sw	a3,-48(s0)
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
80004e48:	00100793          	li	a5,1
80004e4c:	fef42623          	sw	a5,-20(s0)

		configASSERT( xTaskToNotify );
80004e50:	fdc42783          	lw	a5,-36(s0)
80004e54:	00079663          	bnez	a5,80004e60 <xTaskGenericNotify+0x38>
80004e58:	30007073          	csrci	mstatus,0
80004e5c:	0000006f          	j	80004e5c <xTaskGenericNotify+0x34>
		pxTCB = ( TCB_t * ) xTaskToNotify;
80004e60:	fdc42783          	lw	a5,-36(s0)
80004e64:	fef42423          	sw	a5,-24(s0)

		taskENTER_CRITICAL();
80004e68:	b95ff0ef          	jal	ra,800049fc <vTaskEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
80004e6c:	fd042783          	lw	a5,-48(s0)
80004e70:	00078a63          	beqz	a5,80004e84 <xTaskGenericNotify+0x5c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
80004e74:	fe842783          	lw	a5,-24(s0)
80004e78:	0587a703          	lw	a4,88(a5)
80004e7c:	fd042783          	lw	a5,-48(s0)
80004e80:	00e7a023          	sw	a4,0(a5)
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
80004e84:	fe842783          	lw	a5,-24(s0)
80004e88:	05c7a783          	lw	a5,92(a5)
80004e8c:	fef42223          	sw	a5,-28(s0)

			pxTCB->eNotifyState = eNotified;
80004e90:	fe842783          	lw	a5,-24(s0)
80004e94:	00200713          	li	a4,2
80004e98:	04e7ae23          	sw	a4,92(a5)

			switch( eAction )
80004e9c:	fd442703          	lw	a4,-44(s0)
80004ea0:	00400793          	li	a5,4
80004ea4:	08e7ec63          	bltu	a5,a4,80004f3c <xTaskGenericNotify+0x114>
80004ea8:	fd442783          	lw	a5,-44(s0)
80004eac:	00279713          	slli	a4,a5,0x2
80004eb0:	0001b797          	auipc	a5,0x1b
80004eb4:	15878793          	addi	a5,a5,344 # 80020008 <__rodata_start+0x8>
80004eb8:	00f707b3          	add	a5,a4,a5
80004ebc:	0007a703          	lw	a4,0(a5)
80004ec0:	0001b797          	auipc	a5,0x1b
80004ec4:	14878793          	addi	a5,a5,328 # 80020008 <__rodata_start+0x8>
80004ec8:	00f707b3          	add	a5,a4,a5
80004ecc:	00078067          	jr	a5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
80004ed0:	fe842783          	lw	a5,-24(s0)
80004ed4:	0587a703          	lw	a4,88(a5)
80004ed8:	fd842783          	lw	a5,-40(s0)
80004edc:	00f76733          	or	a4,a4,a5
80004ee0:	fe842783          	lw	a5,-24(s0)
80004ee4:	04e7ac23          	sw	a4,88(a5)
					break;
80004ee8:	0540006f          	j	80004f3c <xTaskGenericNotify+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
80004eec:	fe842783          	lw	a5,-24(s0)
80004ef0:	0587a783          	lw	a5,88(a5)
80004ef4:	00178713          	addi	a4,a5,1
80004ef8:	fe842783          	lw	a5,-24(s0)
80004efc:	04e7ac23          	sw	a4,88(a5)
					break;
80004f00:	03c0006f          	j	80004f3c <xTaskGenericNotify+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
80004f04:	fe842783          	lw	a5,-24(s0)
80004f08:	fd842703          	lw	a4,-40(s0)
80004f0c:	04e7ac23          	sw	a4,88(a5)
					break;
80004f10:	02c0006f          	j	80004f3c <xTaskGenericNotify+0x114>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
80004f14:	fe442703          	lw	a4,-28(s0)
80004f18:	00200793          	li	a5,2
80004f1c:	00f70a63          	beq	a4,a5,80004f30 <xTaskGenericNotify+0x108>
					{
						pxTCB->ulNotifiedValue = ulValue;
80004f20:	fe842783          	lw	a5,-24(s0)
80004f24:	fd842703          	lw	a4,-40(s0)
80004f28:	04e7ac23          	sw	a4,88(a5)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
80004f2c:	0100006f          	j	80004f3c <xTaskGenericNotify+0x114>
						xReturn = pdFAIL;
80004f30:	fe042623          	sw	zero,-20(s0)
					break;
80004f34:	0080006f          	j	80004f3c <xTaskGenericNotify+0x114>

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
80004f38:	00000013          	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
80004f3c:	fe442703          	lw	a4,-28(s0)
80004f40:	00100793          	li	a5,1
80004f44:	0af71663          	bne	a4,a5,80004ff0 <xTaskGenericNotify+0x1c8>
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80004f48:	fe842783          	lw	a5,-24(s0)
80004f4c:	00478793          	addi	a5,a5,4
80004f50:	00078513          	mv	a0,a5
80004f54:	a61fb0ef          	jal	ra,800009b4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
80004f58:	fe842783          	lw	a5,-24(s0)
80004f5c:	02c7a703          	lw	a4,44(a5)
80004f60:	0001d797          	auipc	a5,0x1d
80004f64:	9bc78793          	addi	a5,a5,-1604 # 8002191c <uxTopReadyPriority>
80004f68:	0007a783          	lw	a5,0(a5)
80004f6c:	00e7fc63          	bleu	a4,a5,80004f84 <xTaskGenericNotify+0x15c>
80004f70:	fe842783          	lw	a5,-24(s0)
80004f74:	02c7a703          	lw	a4,44(a5)
80004f78:	0001d797          	auipc	a5,0x1d
80004f7c:	9a478793          	addi	a5,a5,-1628 # 8002191c <uxTopReadyPriority>
80004f80:	00e7a023          	sw	a4,0(a5)
80004f84:	fe842783          	lw	a5,-24(s0)
80004f88:	02c7a703          	lw	a4,44(a5)
80004f8c:	00070793          	mv	a5,a4
80004f90:	00279793          	slli	a5,a5,0x2
80004f94:	00e787b3          	add	a5,a5,a4
80004f98:	00279793          	slli	a5,a5,0x2
80004f9c:	0001d717          	auipc	a4,0x1d
80004fa0:	8a470713          	addi	a4,a4,-1884 # 80021840 <__bss_start>
80004fa4:	00e78733          	add	a4,a5,a4
80004fa8:	fe842783          	lw	a5,-24(s0)
80004fac:	00478793          	addi	a5,a5,4
80004fb0:	00078593          	mv	a1,a5
80004fb4:	00070513          	mv	a0,a4
80004fb8:	8a1fb0ef          	jal	ra,80000858 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
80004fbc:	fe842783          	lw	a5,-24(s0)
80004fc0:	0287a783          	lw	a5,40(a5)
80004fc4:	00078663          	beqz	a5,80004fd0 <xTaskGenericNotify+0x1a8>
80004fc8:	30007073          	csrci	mstatus,0
80004fcc:	0000006f          	j	80004fcc <xTaskGenericNotify+0x1a4>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
80004fd0:	fe842783          	lw	a5,-24(s0)
80004fd4:	02c7a703          	lw	a4,44(a5)
80004fd8:	0001c797          	auipc	a5,0x1c
80004fdc:	e4478793          	addi	a5,a5,-444 # 80020e1c <pxCurrentTCB>
80004fe0:	0007a783          	lw	a5,0(a5)
80004fe4:	02c7a783          	lw	a5,44(a5)
80004fe8:	00e7f463          	bleu	a4,a5,80004ff0 <xTaskGenericNotify+0x1c8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
80004fec:	ca0fb0ef          	jal	ra,8000048c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
80004ff0:	a61ff0ef          	jal	ra,80004a50 <vTaskExitCritical>

		return xReturn;
80004ff4:	fec42783          	lw	a5,-20(s0)
	}
80004ff8:	00078513          	mv	a0,a5
80004ffc:	02c12083          	lw	ra,44(sp)
80005000:	02812403          	lw	s0,40(sp)
80005004:	03010113          	addi	sp,sp,48
80005008:	00008067          	ret

8000500c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
8000500c:	fc010113          	addi	sp,sp,-64
80005010:	02112e23          	sw	ra,60(sp)
80005014:	02812c23          	sw	s0,56(sp)
80005018:	04010413          	addi	s0,sp,64
8000501c:	fca42e23          	sw	a0,-36(s0)
80005020:	fcb42c23          	sw	a1,-40(s0)
80005024:	fcc42a23          	sw	a2,-44(s0)
80005028:	fcd42823          	sw	a3,-48(s0)
8000502c:	fce42623          	sw	a4,-52(s0)
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
80005030:	00100793          	li	a5,1
80005034:	fef42623          	sw	a5,-20(s0)
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
80005038:	fdc42783          	lw	a5,-36(s0)
8000503c:	00079663          	bnez	a5,80005048 <xTaskGenericNotifyFromISR+0x3c>
80005040:	30007073          	csrci	mstatus,0
80005044:	0000006f          	j	80005044 <xTaskGenericNotifyFromISR+0x38>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
80005048:	fdc42783          	lw	a5,-36(s0)
8000504c:	fef42423          	sw	a5,-24(s0)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80005050:	e84fb0ef          	jal	ra,800006d4 <vPortSetInterruptMask>
80005054:	00050793          	mv	a5,a0
80005058:	fef42223          	sw	a5,-28(s0)
		{
			if( pulPreviousNotificationValue != NULL )
8000505c:	fd042783          	lw	a5,-48(s0)
80005060:	00078a63          	beqz	a5,80005074 <xTaskGenericNotifyFromISR+0x68>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
80005064:	fe842783          	lw	a5,-24(s0)
80005068:	0587a703          	lw	a4,88(a5)
8000506c:	fd042783          	lw	a5,-48(s0)
80005070:	00e7a023          	sw	a4,0(a5)
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
80005074:	fe842783          	lw	a5,-24(s0)
80005078:	05c7a783          	lw	a5,92(a5)
8000507c:	fef42023          	sw	a5,-32(s0)
			pxTCB->eNotifyState = eNotified;
80005080:	fe842783          	lw	a5,-24(s0)
80005084:	00200713          	li	a4,2
80005088:	04e7ae23          	sw	a4,92(a5)

			switch( eAction )
8000508c:	fd442703          	lw	a4,-44(s0)
80005090:	00400793          	li	a5,4
80005094:	08e7ec63          	bltu	a5,a4,8000512c <xTaskGenericNotifyFromISR+0x120>
80005098:	fd442783          	lw	a5,-44(s0)
8000509c:	00279713          	slli	a4,a5,0x2
800050a0:	0001b797          	auipc	a5,0x1b
800050a4:	f7c78793          	addi	a5,a5,-132 # 8002001c <__rodata_start+0x1c>
800050a8:	00f707b3          	add	a5,a4,a5
800050ac:	0007a703          	lw	a4,0(a5)
800050b0:	0001b797          	auipc	a5,0x1b
800050b4:	f6c78793          	addi	a5,a5,-148 # 8002001c <__rodata_start+0x1c>
800050b8:	00f707b3          	add	a5,a4,a5
800050bc:	00078067          	jr	a5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
800050c0:	fe842783          	lw	a5,-24(s0)
800050c4:	0587a703          	lw	a4,88(a5)
800050c8:	fd842783          	lw	a5,-40(s0)
800050cc:	00f76733          	or	a4,a4,a5
800050d0:	fe842783          	lw	a5,-24(s0)
800050d4:	04e7ac23          	sw	a4,88(a5)
					break;
800050d8:	0540006f          	j	8000512c <xTaskGenericNotifyFromISR+0x120>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
800050dc:	fe842783          	lw	a5,-24(s0)
800050e0:	0587a783          	lw	a5,88(a5)
800050e4:	00178713          	addi	a4,a5,1
800050e8:	fe842783          	lw	a5,-24(s0)
800050ec:	04e7ac23          	sw	a4,88(a5)
					break;
800050f0:	03c0006f          	j	8000512c <xTaskGenericNotifyFromISR+0x120>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
800050f4:	fe842783          	lw	a5,-24(s0)
800050f8:	fd842703          	lw	a4,-40(s0)
800050fc:	04e7ac23          	sw	a4,88(a5)
					break;
80005100:	02c0006f          	j	8000512c <xTaskGenericNotifyFromISR+0x120>

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
80005104:	fe042703          	lw	a4,-32(s0)
80005108:	00200793          	li	a5,2
8000510c:	00f70a63          	beq	a4,a5,80005120 <xTaskGenericNotifyFromISR+0x114>
					{
						pxTCB->ulNotifiedValue = ulValue;
80005110:	fe842783          	lw	a5,-24(s0)
80005114:	fd842703          	lw	a4,-40(s0)
80005118:	04e7ac23          	sw	a4,88(a5)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
8000511c:	0100006f          	j	8000512c <xTaskGenericNotifyFromISR+0x120>
						xReturn = pdFAIL;
80005120:	fe042623          	sw	zero,-20(s0)
					break;
80005124:	0080006f          	j	8000512c <xTaskGenericNotifyFromISR+0x120>

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
80005128:	00000013          	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
8000512c:	fe042703          	lw	a4,-32(s0)
80005130:	00100793          	li	a5,1
80005134:	0ef71463          	bne	a4,a5,8000521c <xTaskGenericNotifyFromISR+0x210>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
80005138:	fe842783          	lw	a5,-24(s0)
8000513c:	0287a783          	lw	a5,40(a5)
80005140:	00078663          	beqz	a5,8000514c <xTaskGenericNotifyFromISR+0x140>
80005144:	30007073          	csrci	mstatus,0
80005148:	0000006f          	j	80005148 <xTaskGenericNotifyFromISR+0x13c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
8000514c:	0001c797          	auipc	a5,0x1c
80005150:	7ec78793          	addi	a5,a5,2028 # 80021938 <uxSchedulerSuspended>
80005154:	0007a783          	lw	a5,0(a5)
80005158:	06079e63          	bnez	a5,800051d4 <xTaskGenericNotifyFromISR+0x1c8>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
8000515c:	fe842783          	lw	a5,-24(s0)
80005160:	00478793          	addi	a5,a5,4
80005164:	00078513          	mv	a0,a5
80005168:	84dfb0ef          	jal	ra,800009b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
8000516c:	fe842783          	lw	a5,-24(s0)
80005170:	02c7a703          	lw	a4,44(a5)
80005174:	0001c797          	auipc	a5,0x1c
80005178:	7a878793          	addi	a5,a5,1960 # 8002191c <uxTopReadyPriority>
8000517c:	0007a783          	lw	a5,0(a5)
80005180:	00e7fc63          	bleu	a4,a5,80005198 <xTaskGenericNotifyFromISR+0x18c>
80005184:	fe842783          	lw	a5,-24(s0)
80005188:	02c7a703          	lw	a4,44(a5)
8000518c:	0001c797          	auipc	a5,0x1c
80005190:	79078793          	addi	a5,a5,1936 # 8002191c <uxTopReadyPriority>
80005194:	00e7a023          	sw	a4,0(a5)
80005198:	fe842783          	lw	a5,-24(s0)
8000519c:	02c7a703          	lw	a4,44(a5)
800051a0:	00070793          	mv	a5,a4
800051a4:	00279793          	slli	a5,a5,0x2
800051a8:	00e787b3          	add	a5,a5,a4
800051ac:	00279793          	slli	a5,a5,0x2
800051b0:	0001c717          	auipc	a4,0x1c
800051b4:	69070713          	addi	a4,a4,1680 # 80021840 <__bss_start>
800051b8:	00e78733          	add	a4,a5,a4
800051bc:	fe842783          	lw	a5,-24(s0)
800051c0:	00478793          	addi	a5,a5,4
800051c4:	00078593          	mv	a1,a5
800051c8:	00070513          	mv	a0,a4
800051cc:	e8cfb0ef          	jal	ra,80000858 <vListInsertEnd>
800051d0:	01c0006f          	j	800051ec <xTaskGenericNotifyFromISR+0x1e0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
800051d4:	fe842783          	lw	a5,-24(s0)
800051d8:	01878793          	addi	a5,a5,24
800051dc:	00078593          	mv	a1,a5
800051e0:	0001c517          	auipc	a0,0x1c
800051e4:	6f450513          	addi	a0,a0,1780 # 800218d4 <xPendingReadyList>
800051e8:	e70fb0ef          	jal	ra,80000858 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
800051ec:	fe842783          	lw	a5,-24(s0)
800051f0:	02c7a703          	lw	a4,44(a5)
800051f4:	0001c797          	auipc	a5,0x1c
800051f8:	c2878793          	addi	a5,a5,-984 # 80020e1c <pxCurrentTCB>
800051fc:	0007a783          	lw	a5,0(a5)
80005200:	02c7a783          	lw	a5,44(a5)
80005204:	00e7fc63          	bleu	a4,a5,8000521c <xTaskGenericNotifyFromISR+0x210>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
80005208:	fcc42783          	lw	a5,-52(s0)
8000520c:	00078863          	beqz	a5,8000521c <xTaskGenericNotifyFromISR+0x210>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
80005210:	fcc42783          	lw	a5,-52(s0)
80005214:	00100713          	li	a4,1
80005218:	00e7a023          	sw	a4,0(a5)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
8000521c:	fe442783          	lw	a5,-28(s0)
80005220:	00078513          	mv	a0,a5
80005224:	c88fb0ef          	jal	ra,800006ac <vPortClearInterruptMask>

		return xReturn;
80005228:	fec42783          	lw	a5,-20(s0)
	}
8000522c:	00078513          	mv	a0,a5
80005230:	03c12083          	lw	ra,60(sp)
80005234:	03812403          	lw	s0,56(sp)
80005238:	04010113          	addi	sp,sp,64
8000523c:	00008067          	ret

80005240 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
80005240:	fd010113          	addi	sp,sp,-48
80005244:	02112623          	sw	ra,44(sp)
80005248:	02812423          	sw	s0,40(sp)
8000524c:	03010413          	addi	s0,sp,48
80005250:	fca42e23          	sw	a0,-36(s0)
80005254:	fcb42c23          	sw	a1,-40(s0)
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
80005258:	fdc42783          	lw	a5,-36(s0)
8000525c:	00079663          	bnez	a5,80005268 <vTaskNotifyGiveFromISR+0x28>
80005260:	30007073          	csrci	mstatus,0
80005264:	0000006f          	j	80005264 <vTaskNotifyGiveFromISR+0x24>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
80005268:	fdc42783          	lw	a5,-36(s0)
8000526c:	fef42623          	sw	a5,-20(s0)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80005270:	c64fb0ef          	jal	ra,800006d4 <vPortSetInterruptMask>
80005274:	00050793          	mv	a5,a0
80005278:	fef42423          	sw	a5,-24(s0)
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
8000527c:	fec42783          	lw	a5,-20(s0)
80005280:	05c7a783          	lw	a5,92(a5)
80005284:	fef42223          	sw	a5,-28(s0)
			pxTCB->eNotifyState = eNotified;
80005288:	fec42783          	lw	a5,-20(s0)
8000528c:	00200713          	li	a4,2
80005290:	04e7ae23          	sw	a4,92(a5)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
80005294:	fec42783          	lw	a5,-20(s0)
80005298:	0587a783          	lw	a5,88(a5)
8000529c:	00178713          	addi	a4,a5,1
800052a0:	fec42783          	lw	a5,-20(s0)
800052a4:	04e7ac23          	sw	a4,88(a5)

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
800052a8:	fe442703          	lw	a4,-28(s0)
800052ac:	00100793          	li	a5,1
800052b0:	0ef71463          	bne	a4,a5,80005398 <vTaskNotifyGiveFromISR+0x158>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
800052b4:	fec42783          	lw	a5,-20(s0)
800052b8:	0287a783          	lw	a5,40(a5)
800052bc:	00078663          	beqz	a5,800052c8 <vTaskNotifyGiveFromISR+0x88>
800052c0:	30007073          	csrci	mstatus,0
800052c4:	0000006f          	j	800052c4 <vTaskNotifyGiveFromISR+0x84>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
800052c8:	0001c797          	auipc	a5,0x1c
800052cc:	67078793          	addi	a5,a5,1648 # 80021938 <uxSchedulerSuspended>
800052d0:	0007a783          	lw	a5,0(a5)
800052d4:	06079e63          	bnez	a5,80005350 <vTaskNotifyGiveFromISR+0x110>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
800052d8:	fec42783          	lw	a5,-20(s0)
800052dc:	00478793          	addi	a5,a5,4
800052e0:	00078513          	mv	a0,a5
800052e4:	ed0fb0ef          	jal	ra,800009b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
800052e8:	fec42783          	lw	a5,-20(s0)
800052ec:	02c7a703          	lw	a4,44(a5)
800052f0:	0001c797          	auipc	a5,0x1c
800052f4:	62c78793          	addi	a5,a5,1580 # 8002191c <uxTopReadyPriority>
800052f8:	0007a783          	lw	a5,0(a5)
800052fc:	00e7fc63          	bleu	a4,a5,80005314 <vTaskNotifyGiveFromISR+0xd4>
80005300:	fec42783          	lw	a5,-20(s0)
80005304:	02c7a703          	lw	a4,44(a5)
80005308:	0001c797          	auipc	a5,0x1c
8000530c:	61478793          	addi	a5,a5,1556 # 8002191c <uxTopReadyPriority>
80005310:	00e7a023          	sw	a4,0(a5)
80005314:	fec42783          	lw	a5,-20(s0)
80005318:	02c7a703          	lw	a4,44(a5)
8000531c:	00070793          	mv	a5,a4
80005320:	00279793          	slli	a5,a5,0x2
80005324:	00e787b3          	add	a5,a5,a4
80005328:	00279793          	slli	a5,a5,0x2
8000532c:	0001c717          	auipc	a4,0x1c
80005330:	51470713          	addi	a4,a4,1300 # 80021840 <__bss_start>
80005334:	00e78733          	add	a4,a5,a4
80005338:	fec42783          	lw	a5,-20(s0)
8000533c:	00478793          	addi	a5,a5,4
80005340:	00078593          	mv	a1,a5
80005344:	00070513          	mv	a0,a4
80005348:	d10fb0ef          	jal	ra,80000858 <vListInsertEnd>
8000534c:	01c0006f          	j	80005368 <vTaskNotifyGiveFromISR+0x128>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
80005350:	fec42783          	lw	a5,-20(s0)
80005354:	01878793          	addi	a5,a5,24
80005358:	00078593          	mv	a1,a5
8000535c:	0001c517          	auipc	a0,0x1c
80005360:	57850513          	addi	a0,a0,1400 # 800218d4 <xPendingReadyList>
80005364:	cf4fb0ef          	jal	ra,80000858 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
80005368:	fec42783          	lw	a5,-20(s0)
8000536c:	02c7a703          	lw	a4,44(a5)
80005370:	0001c797          	auipc	a5,0x1c
80005374:	aac78793          	addi	a5,a5,-1364 # 80020e1c <pxCurrentTCB>
80005378:	0007a783          	lw	a5,0(a5)
8000537c:	02c7a783          	lw	a5,44(a5)
80005380:	00e7fc63          	bleu	a4,a5,80005398 <vTaskNotifyGiveFromISR+0x158>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
80005384:	fd842783          	lw	a5,-40(s0)
80005388:	00078863          	beqz	a5,80005398 <vTaskNotifyGiveFromISR+0x158>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
8000538c:	fd842783          	lw	a5,-40(s0)
80005390:	00100713          	li	a4,1
80005394:	00e7a023          	sw	a4,0(a5)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
80005398:	fe842783          	lw	a5,-24(s0)
8000539c:	00078513          	mv	a0,a5
800053a0:	b0cfb0ef          	jal	ra,800006ac <vPortClearInterruptMask>
	}
800053a4:	00000013          	nop
800053a8:	02c12083          	lw	ra,44(sp)
800053ac:	02812403          	lw	s0,40(sp)
800053b0:	03010113          	addi	sp,sp,48
800053b4:	00008067          	ret

800053b8 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
800053b8:	fd010113          	addi	sp,sp,-48
800053bc:	02112623          	sw	ra,44(sp)
800053c0:	02812423          	sw	s0,40(sp)
800053c4:	03010413          	addi	s0,sp,48
800053c8:	fca42e23          	sw	a0,-36(s0)
	TCB_t *pxTCB;
	BaseType_t xReturn;

		pxTCB = ( TCB_t * ) xTask;
800053cc:	fdc42783          	lw	a5,-36(s0)
800053d0:	fef42423          	sw	a5,-24(s0)

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( pxTCB );
800053d4:	fe842783          	lw	a5,-24(s0)
800053d8:	00079a63          	bnez	a5,800053ec <xTaskNotifyStateClear+0x34>
800053dc:	0001c797          	auipc	a5,0x1c
800053e0:	a4078793          	addi	a5,a5,-1472 # 80020e1c <pxCurrentTCB>
800053e4:	0007a783          	lw	a5,0(a5)
800053e8:	0080006f          	j	800053f0 <xTaskNotifyStateClear+0x38>
800053ec:	fe842783          	lw	a5,-24(s0)
800053f0:	fef42423          	sw	a5,-24(s0)

		taskENTER_CRITICAL();
800053f4:	e08ff0ef          	jal	ra,800049fc <vTaskEnterCritical>
		{
			if( pxTCB->eNotifyState == eNotified )
800053f8:	fe842783          	lw	a5,-24(s0)
800053fc:	05c7a703          	lw	a4,92(a5)
80005400:	00200793          	li	a5,2
80005404:	00f71c63          	bne	a4,a5,8000541c <xTaskNotifyStateClear+0x64>
			{
				pxTCB->eNotifyState = eNotWaitingNotification;
80005408:	fe842783          	lw	a5,-24(s0)
8000540c:	0407ae23          	sw	zero,92(a5)
				xReturn = pdPASS;
80005410:	00100793          	li	a5,1
80005414:	fef42623          	sw	a5,-20(s0)
80005418:	0080006f          	j	80005420 <xTaskNotifyStateClear+0x68>
			}
			else
			{
				xReturn = pdFAIL;
8000541c:	fe042623          	sw	zero,-20(s0)
			}
		}
		taskEXIT_CRITICAL();
80005420:	e30ff0ef          	jal	ra,80004a50 <vTaskExitCritical>

		return xReturn;
80005424:	fec42783          	lw	a5,-20(s0)
	}
80005428:	00078513          	mv	a0,a5
8000542c:	02c12083          	lw	ra,44(sp)
80005430:	02812403          	lw	s0,40(sp)
80005434:	03010113          	addi	sp,sp,48
80005438:	00008067          	ret

8000543c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
8000543c:	fe010113          	addi	sp,sp,-32
80005440:	00112e23          	sw	ra,28(sp)
80005444:	00812c23          	sw	s0,24(sp)
80005448:	02010413          	addi	s0,sp,32
BaseType_t xReturn = pdFAIL;
8000544c:	fe042623          	sw	zero,-20(s0)

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
80005450:	139000ef          	jal	ra,80005d88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
80005454:	0001c797          	auipc	a5,0x1c
80005458:	51878793          	addi	a5,a5,1304 # 8002196c <xTimerQueue>
8000545c:	0007a783          	lw	a5,0(a5)
80005460:	02078a63          	beqz	a5,80005494 <xTimerCreateTimerTask+0x58>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
80005464:	00000893          	li	a7,0
80005468:	00000813          	li	a6,0
8000546c:	00000793          	li	a5,0
80005470:	00200713          	li	a4,2
80005474:	00000693          	li	a3,0
80005478:	40000613          	li	a2,1024
8000547c:	0001b597          	auipc	a1,0x1b
80005480:	bb458593          	addi	a1,a1,-1100 # 80020030 <__rodata_start+0x30>
80005484:	00000517          	auipc	a0,0x0
80005488:	31c50513          	addi	a0,a0,796 # 800057a0 <prvTimerTask>
8000548c:	c1dfc0ef          	jal	ra,800020a8 <xTaskGenericCreate>
80005490:	fea42623          	sw	a0,-20(s0)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
80005494:	fec42783          	lw	a5,-20(s0)
80005498:	00079663          	bnez	a5,800054a4 <xTimerCreateTimerTask+0x68>
8000549c:	30007073          	csrci	mstatus,0
800054a0:	0000006f          	j	800054a0 <xTimerCreateTimerTask+0x64>
	return xReturn;
800054a4:	fec42783          	lw	a5,-20(s0)
}
800054a8:	00078513          	mv	a0,a5
800054ac:	01c12083          	lw	ra,28(sp)
800054b0:	01812403          	lw	s0,24(sp)
800054b4:	02010113          	addi	sp,sp,32
800054b8:	00008067          	ret

800054bc <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
800054bc:	fc010113          	addi	sp,sp,-64
800054c0:	02112e23          	sw	ra,60(sp)
800054c4:	02812c23          	sw	s0,56(sp)
800054c8:	04010413          	addi	s0,sp,64
800054cc:	fca42e23          	sw	a0,-36(s0)
800054d0:	fcb42c23          	sw	a1,-40(s0)
800054d4:	fcc42a23          	sw	a2,-44(s0)
800054d8:	fcd42823          	sw	a3,-48(s0)
800054dc:	fce42623          	sw	a4,-52(s0)
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
800054e0:	fd842783          	lw	a5,-40(s0)
800054e4:	00079663          	bnez	a5,800054f0 <xTimerCreate+0x34>
	{
		pxNewTimer = NULL;
800054e8:	fe042623          	sw	zero,-20(s0)
800054ec:	0680006f          	j	80005554 <xTimerCreate+0x98>
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
800054f0:	02c00513          	li	a0,44
800054f4:	31c010ef          	jal	ra,80006810 <pvPortMalloc>
800054f8:	fea42623          	sw	a0,-20(s0)
		if( pxNewTimer != NULL )
800054fc:	fec42783          	lw	a5,-20(s0)
80005500:	04078a63          	beqz	a5,80005554 <xTimerCreate+0x98>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
80005504:	085000ef          	jal	ra,80005d88 <prvCheckForValidListAndQueue>

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
80005508:	fec42783          	lw	a5,-20(s0)
8000550c:	fdc42703          	lw	a4,-36(s0)
80005510:	00e7a023          	sw	a4,0(a5)
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
80005514:	fec42783          	lw	a5,-20(s0)
80005518:	fd842703          	lw	a4,-40(s0)
8000551c:	00e7ac23          	sw	a4,24(a5)
			pxNewTimer->uxAutoReload = uxAutoReload;
80005520:	fec42783          	lw	a5,-20(s0)
80005524:	fd442703          	lw	a4,-44(s0)
80005528:	00e7ae23          	sw	a4,28(a5)
			pxNewTimer->pvTimerID = pvTimerID;
8000552c:	fec42783          	lw	a5,-20(s0)
80005530:	fd042703          	lw	a4,-48(s0)
80005534:	02e7a023          	sw	a4,32(a5)
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
80005538:	fec42783          	lw	a5,-20(s0)
8000553c:	fcc42703          	lw	a4,-52(s0)
80005540:	02e7a223          	sw	a4,36(a5)
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
80005544:	fec42783          	lw	a5,-20(s0)
80005548:	00478793          	addi	a5,a5,4
8000554c:	00078513          	mv	a0,a5
80005550:	ae0fb0ef          	jal	ra,80000830 <vListInitialiseItem>
			traceTIMER_CREATE_FAILED();
		}
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
80005554:	fd842783          	lw	a5,-40(s0)
80005558:	00079663          	bnez	a5,80005564 <xTimerCreate+0xa8>
8000555c:	30007073          	csrci	mstatus,0
80005560:	0000006f          	j	80005560 <xTimerCreate+0xa4>

	return ( TimerHandle_t ) pxNewTimer;
80005564:	fec42783          	lw	a5,-20(s0)
}
80005568:	00078513          	mv	a0,a5
8000556c:	03c12083          	lw	ra,60(sp)
80005570:	03812403          	lw	s0,56(sp)
80005574:	04010113          	addi	sp,sp,64
80005578:	00008067          	ret

8000557c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
8000557c:	fc010113          	addi	sp,sp,-64
80005580:	02112e23          	sw	ra,60(sp)
80005584:	02812c23          	sw	s0,56(sp)
80005588:	04010413          	addi	s0,sp,64
8000558c:	fca42e23          	sw	a0,-36(s0)
80005590:	fcb42c23          	sw	a1,-40(s0)
80005594:	fcc42a23          	sw	a2,-44(s0)
80005598:	fcd42823          	sw	a3,-48(s0)
8000559c:	fce42623          	sw	a4,-52(s0)
BaseType_t xReturn = pdFAIL;
800055a0:	fe042623          	sw	zero,-20(s0)
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
800055a4:	fdc42783          	lw	a5,-36(s0)
800055a8:	00079663          	bnez	a5,800055b4 <xTimerGenericCommand+0x38>
800055ac:	30007073          	csrci	mstatus,0
800055b0:	0000006f          	j	800055b0 <xTimerGenericCommand+0x34>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
800055b4:	0001c797          	auipc	a5,0x1c
800055b8:	3b878793          	addi	a5,a5,952 # 8002196c <xTimerQueue>
800055bc:	0007a783          	lw	a5,0(a5)
800055c0:	0a078c63          	beqz	a5,80005678 <xTimerGenericCommand+0xfc>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
800055c4:	fd842783          	lw	a5,-40(s0)
800055c8:	fef42023          	sw	a5,-32(s0)
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
800055cc:	fd442783          	lw	a5,-44(s0)
800055d0:	fef42223          	sw	a5,-28(s0)
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
800055d4:	fdc42783          	lw	a5,-36(s0)
800055d8:	fef42423          	sw	a5,-24(s0)

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
800055dc:	fd842703          	lw	a4,-40(s0)
800055e0:	00500793          	li	a5,5
800055e4:	06e7c663          	blt	a5,a4,80005650 <xTimerGenericCommand+0xd4>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
800055e8:	908ff0ef          	jal	ra,800046f0 <xTaskGetSchedulerState>
800055ec:	00050713          	mv	a4,a0
800055f0:	00200793          	li	a5,2
800055f4:	02f71863          	bne	a4,a5,80005624 <xTimerGenericCommand+0xa8>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
800055f8:	0001c797          	auipc	a5,0x1c
800055fc:	37478793          	addi	a5,a5,884 # 8002196c <xTimerQueue>
80005600:	0007a783          	lw	a5,0(a5)
80005604:	fe040713          	addi	a4,s0,-32
80005608:	00000693          	li	a3,0
8000560c:	fcc42603          	lw	a2,-52(s0)
80005610:	00070593          	mv	a1,a4
80005614:	00078513          	mv	a0,a5
80005618:	921fb0ef          	jal	ra,80000f38 <xQueueGenericSend>
8000561c:	fea42623          	sw	a0,-20(s0)
80005620:	0580006f          	j	80005678 <xTimerGenericCommand+0xfc>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
80005624:	0001c797          	auipc	a5,0x1c
80005628:	34878793          	addi	a5,a5,840 # 8002196c <xTimerQueue>
8000562c:	0007a783          	lw	a5,0(a5)
80005630:	fe040713          	addi	a4,s0,-32
80005634:	00000693          	li	a3,0
80005638:	00000613          	li	a2,0
8000563c:	00070593          	mv	a1,a4
80005640:	00078513          	mv	a0,a5
80005644:	8f5fb0ef          	jal	ra,80000f38 <xQueueGenericSend>
80005648:	fea42623          	sw	a0,-20(s0)
8000564c:	02c0006f          	j	80005678 <xTimerGenericCommand+0xfc>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
80005650:	0001c797          	auipc	a5,0x1c
80005654:	31c78793          	addi	a5,a5,796 # 8002196c <xTimerQueue>
80005658:	0007a783          	lw	a5,0(a5)
8000565c:	fe040713          	addi	a4,s0,-32
80005660:	00000693          	li	a3,0
80005664:	fd042603          	lw	a2,-48(s0)
80005668:	00070593          	mv	a1,a4
8000566c:	00078513          	mv	a0,a5
80005670:	b15fb0ef          	jal	ra,80001184 <xQueueGenericSendFromISR>
80005674:	fea42623          	sw	a0,-20(s0)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
80005678:	fec42783          	lw	a5,-20(s0)
}
8000567c:	00078513          	mv	a0,a5
80005680:	03c12083          	lw	ra,60(sp)
80005684:	03812403          	lw	s0,56(sp)
80005688:	04010113          	addi	sp,sp,64
8000568c:	00008067          	ret

80005690 <pcTimerGetTimerName>:

#endif
/*-----------------------------------------------------------*/

const char * pcTimerGetTimerName( TimerHandle_t xTimer )
{
80005690:	fd010113          	addi	sp,sp,-48
80005694:	02812623          	sw	s0,44(sp)
80005698:	03010413          	addi	s0,sp,48
8000569c:	fca42e23          	sw	a0,-36(s0)
Timer_t *pxTimer = ( Timer_t * ) xTimer;
800056a0:	fdc42783          	lw	a5,-36(s0)
800056a4:	fef42623          	sw	a5,-20(s0)

	configASSERT( xTimer );
800056a8:	fdc42783          	lw	a5,-36(s0)
800056ac:	00079663          	bnez	a5,800056b8 <pcTimerGetTimerName+0x28>
800056b0:	30007073          	csrci	mstatus,0
800056b4:	0000006f          	j	800056b4 <pcTimerGetTimerName+0x24>
	return pxTimer->pcTimerName;
800056b8:	fec42783          	lw	a5,-20(s0)
800056bc:	0007a783          	lw	a5,0(a5)
}
800056c0:	00078513          	mv	a0,a5
800056c4:	02c12403          	lw	s0,44(sp)
800056c8:	03010113          	addi	sp,sp,48
800056cc:	00008067          	ret

800056d0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
800056d0:	fd010113          	addi	sp,sp,-48
800056d4:	02112623          	sw	ra,44(sp)
800056d8:	02812423          	sw	s0,40(sp)
800056dc:	03010413          	addi	s0,sp,48
800056e0:	fca42e23          	sw	a0,-36(s0)
800056e4:	fcb42c23          	sw	a1,-40(s0)
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
800056e8:	0001c797          	auipc	a5,0x1c
800056ec:	27c78793          	addi	a5,a5,636 # 80021964 <pxCurrentTimerList>
800056f0:	0007a783          	lw	a5,0(a5)
800056f4:	00c7a783          	lw	a5,12(a5)
800056f8:	00c7a783          	lw	a5,12(a5)
800056fc:	fef42623          	sw	a5,-20(s0)

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
80005700:	fec42783          	lw	a5,-20(s0)
80005704:	00478793          	addi	a5,a5,4
80005708:	00078513          	mv	a0,a5
8000570c:	aa8fb0ef          	jal	ra,800009b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
80005710:	fec42783          	lw	a5,-20(s0)
80005714:	01c7a703          	lw	a4,28(a5)
80005718:	00100793          	li	a5,1
8000571c:	06f71063          	bne	a4,a5,8000577c <prvProcessExpiredTimer+0xac>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
80005720:	fec42783          	lw	a5,-20(s0)
80005724:	0187a703          	lw	a4,24(a5)
80005728:	fdc42783          	lw	a5,-36(s0)
8000572c:	00f707b3          	add	a5,a4,a5
80005730:	fdc42683          	lw	a3,-36(s0)
80005734:	fd842603          	lw	a2,-40(s0)
80005738:	00078593          	mv	a1,a5
8000573c:	fec42503          	lw	a0,-20(s0)
80005740:	258000ef          	jal	ra,80005998 <prvInsertTimerInActiveList>
80005744:	00050713          	mv	a4,a0
80005748:	00100793          	li	a5,1
8000574c:	02f71863          	bne	a4,a5,8000577c <prvProcessExpiredTimer+0xac>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
80005750:	00000713          	li	a4,0
80005754:	00000693          	li	a3,0
80005758:	fdc42603          	lw	a2,-36(s0)
8000575c:	00000593          	li	a1,0
80005760:	fec42503          	lw	a0,-20(s0)
80005764:	e19ff0ef          	jal	ra,8000557c <xTimerGenericCommand>
80005768:	fea42423          	sw	a0,-24(s0)
			configASSERT( xResult );
8000576c:	fe842783          	lw	a5,-24(s0)
80005770:	00079663          	bnez	a5,8000577c <prvProcessExpiredTimer+0xac>
80005774:	30007073          	csrci	mstatus,0
80005778:	0000006f          	j	80005778 <prvProcessExpiredTimer+0xa8>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
8000577c:	fec42783          	lw	a5,-20(s0)
80005780:	0247a783          	lw	a5,36(a5)
80005784:	fec42503          	lw	a0,-20(s0)
80005788:	000780e7          	jalr	a5
}
8000578c:	00000013          	nop
80005790:	02c12083          	lw	ra,44(sp)
80005794:	02812403          	lw	s0,40(sp)
80005798:	03010113          	addi	sp,sp,48
8000579c:	00008067          	ret

800057a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
800057a0:	fd010113          	addi	sp,sp,-48
800057a4:	02112623          	sw	ra,44(sp)
800057a8:	02812423          	sw	s0,40(sp)
800057ac:	03010413          	addi	s0,sp,48
800057b0:	fca42e23          	sw	a0,-36(s0)

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
800057b4:	fe840793          	addi	a5,s0,-24
800057b8:	00078513          	mv	a0,a5
800057bc:	0f4000ef          	jal	ra,800058b0 <prvGetNextExpireTime>
800057c0:	fea42623          	sw	a0,-20(s0)

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
800057c4:	fe842783          	lw	a5,-24(s0)
800057c8:	00078593          	mv	a1,a5
800057cc:	fec42503          	lw	a0,-20(s0)
800057d0:	00c000ef          	jal	ra,800057dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
800057d4:	2b0000ef          	jal	ra,80005a84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
800057d8:	fddff06f          	j	800057b4 <prvTimerTask+0x14>

800057dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
800057dc:	fd010113          	addi	sp,sp,-48
800057e0:	02112623          	sw	ra,44(sp)
800057e4:	02812423          	sw	s0,40(sp)
800057e8:	03010413          	addi	s0,sp,48
800057ec:	fca42e23          	sw	a0,-36(s0)
800057f0:	fcb42c23          	sw	a1,-40(s0)
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
800057f4:	f10fd0ef          	jal	ra,80002f04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
800057f8:	fe840793          	addi	a5,s0,-24
800057fc:	00078513          	mv	a0,a5
80005800:	124000ef          	jal	ra,80005924 <prvSampleTimeNow>
80005804:	fea42623          	sw	a0,-20(s0)
		if( xTimerListsWereSwitched == pdFALSE )
80005808:	fe842783          	lw	a5,-24(s0)
8000580c:	08079663          	bnez	a5,80005898 <prvProcessTimerOrBlockTask+0xbc>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
80005810:	fd842783          	lw	a5,-40(s0)
80005814:	02079263          	bnez	a5,80005838 <prvProcessTimerOrBlockTask+0x5c>
80005818:	fdc42703          	lw	a4,-36(s0)
8000581c:	fec42783          	lw	a5,-20(s0)
80005820:	00e7ec63          	bltu	a5,a4,80005838 <prvProcessTimerOrBlockTask+0x5c>
			{
				( void ) xTaskResumeAll();
80005824:	f18fd0ef          	jal	ra,80002f3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
80005828:	fec42583          	lw	a1,-20(s0)
8000582c:	fdc42503          	lw	a0,-36(s0)
80005830:	ea1ff0ef          	jal	ra,800056d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
80005834:	0680006f          	j	8000589c <prvProcessTimerOrBlockTask+0xc0>
				if( xListWasEmpty != pdFALSE )
80005838:	fd842783          	lw	a5,-40(s0)
8000583c:	02078063          	beqz	a5,8000585c <prvProcessTimerOrBlockTask+0x80>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
80005840:	0001c797          	auipc	a5,0x1c
80005844:	12878793          	addi	a5,a5,296 # 80021968 <pxOverflowTimerList>
80005848:	0007a783          	lw	a5,0(a5)
8000584c:	0007a783          	lw	a5,0(a5)
80005850:	0017b793          	seqz	a5,a5
80005854:	0ff7f793          	andi	a5,a5,255
80005858:	fcf42c23          	sw	a5,-40(s0)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
8000585c:	0001c797          	auipc	a5,0x1c
80005860:	11078793          	addi	a5,a5,272 # 8002196c <xTimerQueue>
80005864:	0007a683          	lw	a3,0(a5)
80005868:	fdc42703          	lw	a4,-36(s0)
8000586c:	fec42783          	lw	a5,-20(s0)
80005870:	40f707b3          	sub	a5,a4,a5
80005874:	fd842603          	lw	a2,-40(s0)
80005878:	00078593          	mv	a1,a5
8000587c:	00068513          	mv	a0,a3
80005880:	f8cfc0ef          	jal	ra,8000200c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
80005884:	eb8fd0ef          	jal	ra,80002f3c <xTaskResumeAll>
80005888:	00050793          	mv	a5,a0
8000588c:	00079863          	bnez	a5,8000589c <prvProcessTimerOrBlockTask+0xc0>
					portYIELD_WITHIN_API();
80005890:	bfdfa0ef          	jal	ra,8000048c <vPortYield>
}
80005894:	0080006f          	j	8000589c <prvProcessTimerOrBlockTask+0xc0>
			( void ) xTaskResumeAll();
80005898:	ea4fd0ef          	jal	ra,80002f3c <xTaskResumeAll>
}
8000589c:	00000013          	nop
800058a0:	02c12083          	lw	ra,44(sp)
800058a4:	02812403          	lw	s0,40(sp)
800058a8:	03010113          	addi	sp,sp,48
800058ac:	00008067          	ret

800058b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
800058b0:	fd010113          	addi	sp,sp,-48
800058b4:	02812623          	sw	s0,44(sp)
800058b8:	03010413          	addi	s0,sp,48
800058bc:	fca42e23          	sw	a0,-36(s0)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
800058c0:	0001c797          	auipc	a5,0x1c
800058c4:	0a478793          	addi	a5,a5,164 # 80021964 <pxCurrentTimerList>
800058c8:	0007a783          	lw	a5,0(a5)
800058cc:	0007a783          	lw	a5,0(a5)
800058d0:	0017b793          	seqz	a5,a5
800058d4:	0ff7f793          	andi	a5,a5,255
800058d8:	00078713          	mv	a4,a5
800058dc:	fdc42783          	lw	a5,-36(s0)
800058e0:	00e7a023          	sw	a4,0(a5)
	if( *pxListWasEmpty == pdFALSE )
800058e4:	fdc42783          	lw	a5,-36(s0)
800058e8:	0007a783          	lw	a5,0(a5)
800058ec:	02079063          	bnez	a5,8000590c <prvGetNextExpireTime+0x5c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
800058f0:	0001c797          	auipc	a5,0x1c
800058f4:	07478793          	addi	a5,a5,116 # 80021964 <pxCurrentTimerList>
800058f8:	0007a783          	lw	a5,0(a5)
800058fc:	00c7a783          	lw	a5,12(a5)
80005900:	0007a783          	lw	a5,0(a5)
80005904:	fef42623          	sw	a5,-20(s0)
80005908:	0080006f          	j	80005910 <prvGetNextExpireTime+0x60>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
8000590c:	fe042623          	sw	zero,-20(s0)
	}

	return xNextExpireTime;
80005910:	fec42783          	lw	a5,-20(s0)
}
80005914:	00078513          	mv	a0,a5
80005918:	02c12403          	lw	s0,44(sp)
8000591c:	03010113          	addi	sp,sp,48
80005920:	00008067          	ret

80005924 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
80005924:	fd010113          	addi	sp,sp,-48
80005928:	02112623          	sw	ra,44(sp)
8000592c:	02812423          	sw	s0,40(sp)
80005930:	03010413          	addi	s0,sp,48
80005934:	fca42e23          	sw	a0,-36(s0)
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
80005938:	fe0fd0ef          	jal	ra,80003118 <xTaskGetTickCount>
8000593c:	fea42623          	sw	a0,-20(s0)

	if( xTimeNow < xLastTime )
80005940:	0001c797          	auipc	a5,0x1c
80005944:	03078793          	addi	a5,a5,48 # 80021970 <xLastTime.2538>
80005948:	0007a783          	lw	a5,0(a5)
8000594c:	fec42703          	lw	a4,-20(s0)
80005950:	00f77c63          	bleu	a5,a4,80005968 <prvSampleTimeNow+0x44>
	{
		prvSwitchTimerLists();
80005954:	2d8000ef          	jal	ra,80005c2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
80005958:	fdc42783          	lw	a5,-36(s0)
8000595c:	00100713          	li	a4,1
80005960:	00e7a023          	sw	a4,0(a5)
80005964:	00c0006f          	j	80005970 <prvSampleTimeNow+0x4c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
80005968:	fdc42783          	lw	a5,-36(s0)
8000596c:	0007a023          	sw	zero,0(a5)
	}

	xLastTime = xTimeNow;
80005970:	0001c797          	auipc	a5,0x1c
80005974:	00078793          	mv	a5,a5
80005978:	fec42703          	lw	a4,-20(s0)
8000597c:	00e7a023          	sw	a4,0(a5) # 80021970 <xLastTime.2538>

	return xTimeNow;
80005980:	fec42783          	lw	a5,-20(s0)
}
80005984:	00078513          	mv	a0,a5
80005988:	02c12083          	lw	ra,44(sp)
8000598c:	02812403          	lw	s0,40(sp)
80005990:	03010113          	addi	sp,sp,48
80005994:	00008067          	ret

80005998 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
80005998:	fd010113          	addi	sp,sp,-48
8000599c:	02112623          	sw	ra,44(sp)
800059a0:	02812423          	sw	s0,40(sp)
800059a4:	03010413          	addi	s0,sp,48
800059a8:	fca42e23          	sw	a0,-36(s0)
800059ac:	fcb42c23          	sw	a1,-40(s0)
800059b0:	fcc42a23          	sw	a2,-44(s0)
800059b4:	fcd42823          	sw	a3,-48(s0)
BaseType_t xProcessTimerNow = pdFALSE;
800059b8:	fe042623          	sw	zero,-20(s0)

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
800059bc:	fdc42783          	lw	a5,-36(s0)
800059c0:	fd842703          	lw	a4,-40(s0)
800059c4:	00e7a223          	sw	a4,4(a5)
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
800059c8:	fdc42783          	lw	a5,-36(s0)
800059cc:	fdc42703          	lw	a4,-36(s0)
800059d0:	00e7a823          	sw	a4,16(a5)

	if( xNextExpiryTime <= xTimeNow )
800059d4:	fd842703          	lw	a4,-40(s0)
800059d8:	fd442783          	lw	a5,-44(s0)
800059dc:	04e7e663          	bltu	a5,a4,80005a28 <prvInsertTimerInActiveList+0x90>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
800059e0:	fd442703          	lw	a4,-44(s0)
800059e4:	fd042783          	lw	a5,-48(s0)
800059e8:	40f70733          	sub	a4,a4,a5
800059ec:	fdc42783          	lw	a5,-36(s0)
800059f0:	0187a783          	lw	a5,24(a5)
800059f4:	00f76863          	bltu	a4,a5,80005a04 <prvInsertTimerInActiveList+0x6c>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
800059f8:	00100793          	li	a5,1
800059fc:	fef42623          	sw	a5,-20(s0)
80005a00:	06c0006f          	j	80005a6c <prvInsertTimerInActiveList+0xd4>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
80005a04:	0001c797          	auipc	a5,0x1c
80005a08:	f6478793          	addi	a5,a5,-156 # 80021968 <pxOverflowTimerList>
80005a0c:	0007a703          	lw	a4,0(a5)
80005a10:	fdc42783          	lw	a5,-36(s0)
80005a14:	00478793          	addi	a5,a5,4
80005a18:	00078593          	mv	a1,a5
80005a1c:	00070513          	mv	a0,a4
80005a20:	ec1fa0ef          	jal	ra,800008e0 <vListInsert>
80005a24:	0480006f          	j	80005a6c <prvInsertTimerInActiveList+0xd4>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
80005a28:	fd442703          	lw	a4,-44(s0)
80005a2c:	fd042783          	lw	a5,-48(s0)
80005a30:	00f77e63          	bleu	a5,a4,80005a4c <prvInsertTimerInActiveList+0xb4>
80005a34:	fd842703          	lw	a4,-40(s0)
80005a38:	fd042783          	lw	a5,-48(s0)
80005a3c:	00f76863          	bltu	a4,a5,80005a4c <prvInsertTimerInActiveList+0xb4>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
80005a40:	00100793          	li	a5,1
80005a44:	fef42623          	sw	a5,-20(s0)
80005a48:	0240006f          	j	80005a6c <prvInsertTimerInActiveList+0xd4>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
80005a4c:	0001c797          	auipc	a5,0x1c
80005a50:	f1878793          	addi	a5,a5,-232 # 80021964 <pxCurrentTimerList>
80005a54:	0007a703          	lw	a4,0(a5)
80005a58:	fdc42783          	lw	a5,-36(s0)
80005a5c:	00478793          	addi	a5,a5,4
80005a60:	00078593          	mv	a1,a5
80005a64:	00070513          	mv	a0,a4
80005a68:	e79fa0ef          	jal	ra,800008e0 <vListInsert>
		}
	}

	return xProcessTimerNow;
80005a6c:	fec42783          	lw	a5,-20(s0)
}
80005a70:	00078513          	mv	a0,a5
80005a74:	02c12083          	lw	ra,44(sp)
80005a78:	02812403          	lw	s0,40(sp)
80005a7c:	03010113          	addi	sp,sp,48
80005a80:	00008067          	ret

80005a84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
80005a84:	fd010113          	addi	sp,sp,-48
80005a88:	02112623          	sw	ra,44(sp)
80005a8c:	02812423          	sw	s0,40(sp)
80005a90:	03010413          	addi	s0,sp,48
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
80005a94:	1580006f          	j	80005bec <prvProcessReceivedCommands+0x168>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
80005a98:	fd842783          	lw	a5,-40(s0)
80005a9c:	1407c663          	bltz	a5,80005be8 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
80005aa0:	fe042783          	lw	a5,-32(s0)
80005aa4:	fef42623          	sw	a5,-20(s0)

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
80005aa8:	fec42783          	lw	a5,-20(s0)
80005aac:	0147a783          	lw	a5,20(a5)
80005ab0:	00078a63          	beqz	a5,80005ac4 <prvProcessReceivedCommands+0x40>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
80005ab4:	fec42783          	lw	a5,-20(s0)
80005ab8:	00478793          	addi	a5,a5,4
80005abc:	00078513          	mv	a0,a5
80005ac0:	ef5fa0ef          	jal	ra,800009b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
80005ac4:	fd440793          	addi	a5,s0,-44
80005ac8:	00078513          	mv	a0,a5
80005acc:	e59ff0ef          	jal	ra,80005924 <prvSampleTimeNow>
80005ad0:	fea42423          	sw	a0,-24(s0)

			switch( xMessage.xMessageID )
80005ad4:	fd842783          	lw	a5,-40(s0)
80005ad8:	00900713          	li	a4,9
80005adc:	10f76863          	bltu	a4,a5,80005bec <prvProcessReceivedCommands+0x168>
80005ae0:	00279713          	slli	a4,a5,0x2
80005ae4:	0001a797          	auipc	a5,0x1a
80005ae8:	55478793          	addi	a5,a5,1364 # 80020038 <__rodata_start+0x38>
80005aec:	00f707b3          	add	a5,a4,a5
80005af0:	0007a703          	lw	a4,0(a5)
80005af4:	0001a797          	auipc	a5,0x1a
80005af8:	54478793          	addi	a5,a5,1348 # 80020038 <__rodata_start+0x38>
80005afc:	00f707b3          	add	a5,a4,a5
80005b00:	00078067          	jr	a5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
80005b04:	fdc42703          	lw	a4,-36(s0)
80005b08:	fec42783          	lw	a5,-20(s0)
80005b0c:	0187a783          	lw	a5,24(a5)
80005b10:	00f707b3          	add	a5,a4,a5
80005b14:	fdc42703          	lw	a4,-36(s0)
80005b18:	00070693          	mv	a3,a4
80005b1c:	fe842603          	lw	a2,-24(s0)
80005b20:	00078593          	mv	a1,a5
80005b24:	fec42503          	lw	a0,-20(s0)
80005b28:	e71ff0ef          	jal	ra,80005998 <prvInsertTimerInActiveList>
80005b2c:	00050713          	mv	a4,a0
80005b30:	00100793          	li	a5,1
80005b34:	0af71c63          	bne	a4,a5,80005bec <prvProcessReceivedCommands+0x168>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
80005b38:	fec42783          	lw	a5,-20(s0)
80005b3c:	0247a783          	lw	a5,36(a5)
80005b40:	fec42503          	lw	a0,-20(s0)
80005b44:	000780e7          	jalr	a5
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
80005b48:	fec42783          	lw	a5,-20(s0)
80005b4c:	01c7a703          	lw	a4,28(a5)
80005b50:	00100793          	li	a5,1
80005b54:	08f71c63          	bne	a4,a5,80005bec <prvProcessReceivedCommands+0x168>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
80005b58:	fdc42703          	lw	a4,-36(s0)
80005b5c:	fec42783          	lw	a5,-20(s0)
80005b60:	0187a783          	lw	a5,24(a5)
80005b64:	00f707b3          	add	a5,a4,a5
80005b68:	00000713          	li	a4,0
80005b6c:	00000693          	li	a3,0
80005b70:	00078613          	mv	a2,a5
80005b74:	00000593          	li	a1,0
80005b78:	fec42503          	lw	a0,-20(s0)
80005b7c:	a01ff0ef          	jal	ra,8000557c <xTimerGenericCommand>
80005b80:	fea42223          	sw	a0,-28(s0)
							configASSERT( xResult );
80005b84:	fe442783          	lw	a5,-28(s0)
80005b88:	06079263          	bnez	a5,80005bec <prvProcessReceivedCommands+0x168>
80005b8c:	30007073          	csrci	mstatus,0
80005b90:	0000006f          	j	80005b90 <prvProcessReceivedCommands+0x10c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
80005b94:	fdc42703          	lw	a4,-36(s0)
80005b98:	fec42783          	lw	a5,-20(s0)
80005b9c:	00e7ac23          	sw	a4,24(a5)
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
80005ba0:	fec42783          	lw	a5,-20(s0)
80005ba4:	0187a783          	lw	a5,24(a5)
80005ba8:	00079663          	bnez	a5,80005bb4 <prvProcessReceivedCommands+0x130>
80005bac:	30007073          	csrci	mstatus,0
80005bb0:	0000006f          	j	80005bb0 <prvProcessReceivedCommands+0x12c>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
80005bb4:	fec42783          	lw	a5,-20(s0)
80005bb8:	0187a703          	lw	a4,24(a5)
80005bbc:	fe842783          	lw	a5,-24(s0)
80005bc0:	00f707b3          	add	a5,a4,a5
80005bc4:	fe842683          	lw	a3,-24(s0)
80005bc8:	fe842603          	lw	a2,-24(s0)
80005bcc:	00078593          	mv	a1,a5
80005bd0:	fec42503          	lw	a0,-20(s0)
80005bd4:	dc5ff0ef          	jal	ra,80005998 <prvInsertTimerInActiveList>
					break;
80005bd8:	0140006f          	j	80005bec <prvProcessReceivedCommands+0x168>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
80005bdc:	fec42503          	lw	a0,-20(s0)
80005be0:	639000ef          	jal	ra,80006a18 <vPortFree>
					break;
80005be4:	0080006f          	j	80005bec <prvProcessReceivedCommands+0x168>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
80005be8:	00000013          	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
80005bec:	0001c797          	auipc	a5,0x1c
80005bf0:	d8078793          	addi	a5,a5,-640 # 8002196c <xTimerQueue>
80005bf4:	0007a783          	lw	a5,0(a5)
80005bf8:	fd840713          	addi	a4,s0,-40
80005bfc:	00000693          	li	a3,0
80005c00:	00000613          	li	a2,0
80005c04:	00070593          	mv	a1,a4
80005c08:	00078513          	mv	a0,a5
80005c0c:	81dfb0ef          	jal	ra,80001428 <xQueueGenericReceive>
80005c10:	00050793          	mv	a5,a0
80005c14:	e80792e3          	bnez	a5,80005a98 <prvProcessReceivedCommands+0x14>
	}
}
80005c18:	00000013          	nop
80005c1c:	02c12083          	lw	ra,44(sp)
80005c20:	02812403          	lw	s0,40(sp)
80005c24:	03010113          	addi	sp,sp,48
80005c28:	00008067          	ret

80005c2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
80005c2c:	fd010113          	addi	sp,sp,-48
80005c30:	02112623          	sw	ra,44(sp)
80005c34:	02812423          	sw	s0,40(sp)
80005c38:	03010413          	addi	s0,sp,48

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
80005c3c:	0ec0006f          	j	80005d28 <prvSwitchTimerLists+0xfc>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
80005c40:	0001c797          	auipc	a5,0x1c
80005c44:	d2478793          	addi	a5,a5,-732 # 80021964 <pxCurrentTimerList>
80005c48:	0007a783          	lw	a5,0(a5)
80005c4c:	00c7a783          	lw	a5,12(a5)
80005c50:	0007a783          	lw	a5,0(a5)
80005c54:	fef42423          	sw	a5,-24(s0)

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
80005c58:	0001c797          	auipc	a5,0x1c
80005c5c:	d0c78793          	addi	a5,a5,-756 # 80021964 <pxCurrentTimerList>
80005c60:	0007a783          	lw	a5,0(a5)
80005c64:	00c7a783          	lw	a5,12(a5)
80005c68:	00c7a783          	lw	a5,12(a5)
80005c6c:	fef42223          	sw	a5,-28(s0)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
80005c70:	fe442783          	lw	a5,-28(s0)
80005c74:	00478793          	addi	a5,a5,4
80005c78:	00078513          	mv	a0,a5
80005c7c:	d39fa0ef          	jal	ra,800009b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
80005c80:	fe442783          	lw	a5,-28(s0)
80005c84:	0247a783          	lw	a5,36(a5)
80005c88:	fe442503          	lw	a0,-28(s0)
80005c8c:	000780e7          	jalr	a5

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
80005c90:	fe442783          	lw	a5,-28(s0)
80005c94:	01c7a703          	lw	a4,28(a5)
80005c98:	00100793          	li	a5,1
80005c9c:	08f71663          	bne	a4,a5,80005d28 <prvSwitchTimerLists+0xfc>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
80005ca0:	fe442783          	lw	a5,-28(s0)
80005ca4:	0187a783          	lw	a5,24(a5)
80005ca8:	fe842703          	lw	a4,-24(s0)
80005cac:	00f707b3          	add	a5,a4,a5
80005cb0:	fef42023          	sw	a5,-32(s0)
			if( xReloadTime > xNextExpireTime )
80005cb4:	fe042703          	lw	a4,-32(s0)
80005cb8:	fe842783          	lw	a5,-24(s0)
80005cbc:	04e7f063          	bleu	a4,a5,80005cfc <prvSwitchTimerLists+0xd0>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
80005cc0:	fe442783          	lw	a5,-28(s0)
80005cc4:	fe042703          	lw	a4,-32(s0)
80005cc8:	00e7a223          	sw	a4,4(a5)
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
80005ccc:	fe442783          	lw	a5,-28(s0)
80005cd0:	fe442703          	lw	a4,-28(s0)
80005cd4:	00e7a823          	sw	a4,16(a5)
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
80005cd8:	0001c797          	auipc	a5,0x1c
80005cdc:	c8c78793          	addi	a5,a5,-884 # 80021964 <pxCurrentTimerList>
80005ce0:	0007a703          	lw	a4,0(a5)
80005ce4:	fe442783          	lw	a5,-28(s0)
80005ce8:	00478793          	addi	a5,a5,4
80005cec:	00078593          	mv	a1,a5
80005cf0:	00070513          	mv	a0,a4
80005cf4:	bedfa0ef          	jal	ra,800008e0 <vListInsert>
80005cf8:	0300006f          	j	80005d28 <prvSwitchTimerLists+0xfc>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
80005cfc:	00000713          	li	a4,0
80005d00:	00000693          	li	a3,0
80005d04:	fe842603          	lw	a2,-24(s0)
80005d08:	00000593          	li	a1,0
80005d0c:	fe442503          	lw	a0,-28(s0)
80005d10:	86dff0ef          	jal	ra,8000557c <xTimerGenericCommand>
80005d14:	fca42e23          	sw	a0,-36(s0)
				configASSERT( xResult );
80005d18:	fdc42783          	lw	a5,-36(s0)
80005d1c:	00079663          	bnez	a5,80005d28 <prvSwitchTimerLists+0xfc>
80005d20:	30007073          	csrci	mstatus,0
80005d24:	0000006f          	j	80005d24 <prvSwitchTimerLists+0xf8>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
80005d28:	0001c797          	auipc	a5,0x1c
80005d2c:	c3c78793          	addi	a5,a5,-964 # 80021964 <pxCurrentTimerList>
80005d30:	0007a783          	lw	a5,0(a5)
80005d34:	0007a783          	lw	a5,0(a5)
80005d38:	f00794e3          	bnez	a5,80005c40 <prvSwitchTimerLists+0x14>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
80005d3c:	0001c797          	auipc	a5,0x1c
80005d40:	c2878793          	addi	a5,a5,-984 # 80021964 <pxCurrentTimerList>
80005d44:	0007a783          	lw	a5,0(a5)
80005d48:	fef42623          	sw	a5,-20(s0)
	pxCurrentTimerList = pxOverflowTimerList;
80005d4c:	0001c797          	auipc	a5,0x1c
80005d50:	c1c78793          	addi	a5,a5,-996 # 80021968 <pxOverflowTimerList>
80005d54:	0007a703          	lw	a4,0(a5)
80005d58:	0001c797          	auipc	a5,0x1c
80005d5c:	c0c78793          	addi	a5,a5,-1012 # 80021964 <pxCurrentTimerList>
80005d60:	00e7a023          	sw	a4,0(a5)
	pxOverflowTimerList = pxTemp;
80005d64:	0001c797          	auipc	a5,0x1c
80005d68:	c0478793          	addi	a5,a5,-1020 # 80021968 <pxOverflowTimerList>
80005d6c:	fec42703          	lw	a4,-20(s0)
80005d70:	00e7a023          	sw	a4,0(a5)
}
80005d74:	00000013          	nop
80005d78:	02c12083          	lw	ra,44(sp)
80005d7c:	02812403          	lw	s0,40(sp)
80005d80:	03010113          	addi	sp,sp,48
80005d84:	00008067          	ret

80005d88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
80005d88:	ff010113          	addi	sp,sp,-16
80005d8c:	00112623          	sw	ra,12(sp)
80005d90:	00812423          	sw	s0,8(sp)
80005d94:	01010413          	addi	s0,sp,16
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
80005d98:	c65fe0ef          	jal	ra,800049fc <vTaskEnterCritical>
	{
		if( xTimerQueue == NULL )
80005d9c:	0001c797          	auipc	a5,0x1c
80005da0:	bd078793          	addi	a5,a5,-1072 # 8002196c <xTimerQueue>
80005da4:	0007a783          	lw	a5,0(a5)
80005da8:	0a079463          	bnez	a5,80005e50 <prvCheckForValidListAndQueue+0xc8>
		{
			vListInitialise( &xActiveTimerList1 );
80005dac:	0001c517          	auipc	a0,0x1c
80005db0:	b9050513          	addi	a0,a0,-1136 # 8002193c <xActiveTimerList1>
80005db4:	a19fa0ef          	jal	ra,800007cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
80005db8:	0001c517          	auipc	a0,0x1c
80005dbc:	b9850513          	addi	a0,a0,-1128 # 80021950 <xActiveTimerList2>
80005dc0:	a0dfa0ef          	jal	ra,800007cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
80005dc4:	0001c797          	auipc	a5,0x1c
80005dc8:	ba078793          	addi	a5,a5,-1120 # 80021964 <pxCurrentTimerList>
80005dcc:	0001c717          	auipc	a4,0x1c
80005dd0:	b7070713          	addi	a4,a4,-1168 # 8002193c <xActiveTimerList1>
80005dd4:	00e7a023          	sw	a4,0(a5)
			pxOverflowTimerList = &xActiveTimerList2;
80005dd8:	0001c797          	auipc	a5,0x1c
80005ddc:	b9078793          	addi	a5,a5,-1136 # 80021968 <pxOverflowTimerList>
80005de0:	0001c717          	auipc	a4,0x1c
80005de4:	b7070713          	addi	a4,a4,-1168 # 80021950 <xActiveTimerList2>
80005de8:	00e7a023          	sw	a4,0(a5)
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
80005dec:	00000613          	li	a2,0
80005df0:	00c00593          	li	a1,12
80005df4:	00200513          	li	a0,2
80005df8:	d81fa0ef          	jal	ra,80000b78 <xQueueGenericCreate>
80005dfc:	00050713          	mv	a4,a0
80005e00:	0001c797          	auipc	a5,0x1c
80005e04:	b6c78793          	addi	a5,a5,-1172 # 8002196c <xTimerQueue>
80005e08:	00e7a023          	sw	a4,0(a5)
			configASSERT( xTimerQueue );
80005e0c:	0001c797          	auipc	a5,0x1c
80005e10:	b6078793          	addi	a5,a5,-1184 # 8002196c <xTimerQueue>
80005e14:	0007a783          	lw	a5,0(a5)
80005e18:	00079663          	bnez	a5,80005e24 <prvCheckForValidListAndQueue+0x9c>
80005e1c:	30007073          	csrci	mstatus,0
80005e20:	0000006f          	j	80005e20 <prvCheckForValidListAndQueue+0x98>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
80005e24:	0001c797          	auipc	a5,0x1c
80005e28:	b4878793          	addi	a5,a5,-1208 # 8002196c <xTimerQueue>
80005e2c:	0007a783          	lw	a5,0(a5)
80005e30:	02078063          	beqz	a5,80005e50 <prvCheckForValidListAndQueue+0xc8>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
80005e34:	0001c797          	auipc	a5,0x1c
80005e38:	b3878793          	addi	a5,a5,-1224 # 8002196c <xTimerQueue>
80005e3c:	0007a783          	lw	a5,0(a5)
80005e40:	0001a597          	auipc	a1,0x1a
80005e44:	22058593          	addi	a1,a1,544 # 80020060 <__rodata_start+0x60>
80005e48:	00078513          	mv	a0,a5
80005e4c:	8a8fc0ef          	jal	ra,80001ef4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
80005e50:	c01fe0ef          	jal	ra,80004a50 <vTaskExitCritical>
}
80005e54:	00000013          	nop
80005e58:	00c12083          	lw	ra,12(sp)
80005e5c:	00812403          	lw	s0,8(sp)
80005e60:	01010113          	addi	sp,sp,16
80005e64:	00008067          	ret

80005e68 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
80005e68:	fd010113          	addi	sp,sp,-48
80005e6c:	02112623          	sw	ra,44(sp)
80005e70:	02812423          	sw	s0,40(sp)
80005e74:	03010413          	addi	s0,sp,48
80005e78:	fca42e23          	sw	a0,-36(s0)
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
80005e7c:	fdc42783          	lw	a5,-36(s0)
80005e80:	fef42623          	sw	a5,-20(s0)

	configASSERT( xTimer );
80005e84:	fdc42783          	lw	a5,-36(s0)
80005e88:	00079663          	bnez	a5,80005e94 <xTimerIsTimerActive+0x2c>
80005e8c:	30007073          	csrci	mstatus,0
80005e90:	0000006f          	j	80005e90 <xTimerIsTimerActive+0x28>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
80005e94:	b69fe0ef          	jal	ra,800049fc <vTaskEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
80005e98:	fec42783          	lw	a5,-20(s0)
80005e9c:	0147a783          	lw	a5,20(a5)
80005ea0:	00f037b3          	snez	a5,a5
80005ea4:	0ff7f793          	andi	a5,a5,255
80005ea8:	fef42423          	sw	a5,-24(s0)
	}
	taskEXIT_CRITICAL();
80005eac:	ba5fe0ef          	jal	ra,80004a50 <vTaskExitCritical>

	return xTimerIsInActiveList;
80005eb0:	fe842783          	lw	a5,-24(s0)
} /*lint !e818 Can't be pointer to const due to the typedef. */
80005eb4:	00078513          	mv	a0,a5
80005eb8:	02c12083          	lw	ra,44(sp)
80005ebc:	02812403          	lw	s0,40(sp)
80005ec0:	03010113          	addi	sp,sp,48
80005ec4:	00008067          	ret

80005ec8 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
80005ec8:	fd010113          	addi	sp,sp,-48
80005ecc:	02112623          	sw	ra,44(sp)
80005ed0:	02812423          	sw	s0,40(sp)
80005ed4:	03010413          	addi	s0,sp,48
80005ed8:	fca42e23          	sw	a0,-36(s0)
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
80005edc:	fdc42783          	lw	a5,-36(s0)
80005ee0:	fef42623          	sw	a5,-20(s0)
void *pvReturn;

	configASSERT( xTimer );
80005ee4:	fdc42783          	lw	a5,-36(s0)
80005ee8:	00079663          	bnez	a5,80005ef4 <pvTimerGetTimerID+0x2c>
80005eec:	30007073          	csrci	mstatus,0
80005ef0:	0000006f          	j	80005ef0 <pvTimerGetTimerID+0x28>

	taskENTER_CRITICAL();
80005ef4:	b09fe0ef          	jal	ra,800049fc <vTaskEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
80005ef8:	fec42783          	lw	a5,-20(s0)
80005efc:	0207a783          	lw	a5,32(a5)
80005f00:	fef42423          	sw	a5,-24(s0)
	}
	taskEXIT_CRITICAL();
80005f04:	b4dfe0ef          	jal	ra,80004a50 <vTaskExitCritical>

	return pvReturn;
80005f08:	fe842783          	lw	a5,-24(s0)
}
80005f0c:	00078513          	mv	a0,a5
80005f10:	02c12083          	lw	ra,44(sp)
80005f14:	02812403          	lw	s0,40(sp)
80005f18:	03010113          	addi	sp,sp,48
80005f1c:	00008067          	ret

80005f20 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
80005f20:	fd010113          	addi	sp,sp,-48
80005f24:	02112623          	sw	ra,44(sp)
80005f28:	02812423          	sw	s0,40(sp)
80005f2c:	03010413          	addi	s0,sp,48
80005f30:	fca42e23          	sw	a0,-36(s0)
80005f34:	fcb42c23          	sw	a1,-40(s0)
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
80005f38:	fdc42783          	lw	a5,-36(s0)
80005f3c:	fef42623          	sw	a5,-20(s0)

	configASSERT( xTimer );
80005f40:	fdc42783          	lw	a5,-36(s0)
80005f44:	00079663          	bnez	a5,80005f50 <vTimerSetTimerID+0x30>
80005f48:	30007073          	csrci	mstatus,0
80005f4c:	0000006f          	j	80005f4c <vTimerSetTimerID+0x2c>

	taskENTER_CRITICAL();
80005f50:	aadfe0ef          	jal	ra,800049fc <vTaskEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
80005f54:	fec42783          	lw	a5,-20(s0)
80005f58:	fd842703          	lw	a4,-40(s0)
80005f5c:	02e7a023          	sw	a4,32(a5)
	}
	taskEXIT_CRITICAL();
80005f60:	af1fe0ef          	jal	ra,80004a50 <vTaskExitCritical>
}
80005f64:	00000013          	nop
80005f68:	02c12083          	lw	ra,44(sp)
80005f6c:	02812403          	lw	s0,40(sp)
80005f70:	03010113          	addi	sp,sp,48
80005f74:	00008067          	ret

80005f78 <xEventGroupCreate>:
static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits );

/*-----------------------------------------------------------*/

EventGroupHandle_t xEventGroupCreate( void )
{
80005f78:	fe010113          	addi	sp,sp,-32
80005f7c:	00112e23          	sw	ra,28(sp)
80005f80:	00812c23          	sw	s0,24(sp)
80005f84:	02010413          	addi	s0,sp,32
EventGroup_t *pxEventBits;

	pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
80005f88:	01c00513          	li	a0,28
80005f8c:	085000ef          	jal	ra,80006810 <pvPortMalloc>
80005f90:	fea42623          	sw	a0,-20(s0)
	if( pxEventBits != NULL )
80005f94:	fec42783          	lw	a5,-20(s0)
80005f98:	00078e63          	beqz	a5,80005fb4 <xEventGroupCreate+0x3c>
	{
		pxEventBits->uxEventBits = 0;
80005f9c:	fec42783          	lw	a5,-20(s0)
80005fa0:	0007a023          	sw	zero,0(a5)
		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
80005fa4:	fec42783          	lw	a5,-20(s0)
80005fa8:	00478793          	addi	a5,a5,4
80005fac:	00078513          	mv	a0,a5
80005fb0:	81dfa0ef          	jal	ra,800007cc <vListInitialise>
	else
	{
		traceEVENT_GROUP_CREATE_FAILED();
	}

	return ( EventGroupHandle_t ) pxEventBits;
80005fb4:	fec42783          	lw	a5,-20(s0)
}
80005fb8:	00078513          	mv	a0,a5
80005fbc:	01c12083          	lw	ra,28(sp)
80005fc0:	01812403          	lw	s0,24(sp)
80005fc4:	02010113          	addi	sp,sp,32
80005fc8:	00008067          	ret

80005fcc <xEventGroupSync>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
80005fcc:	fc010113          	addi	sp,sp,-64
80005fd0:	02112e23          	sw	ra,60(sp)
80005fd4:	02812c23          	sw	s0,56(sp)
80005fd8:	04010413          	addi	s0,sp,64
80005fdc:	fca42623          	sw	a0,-52(s0)
80005fe0:	fcb42423          	sw	a1,-56(s0)
80005fe4:	fcc42223          	sw	a2,-60(s0)
80005fe8:	fcd42023          	sw	a3,-64(s0)
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
80005fec:	fcc42783          	lw	a5,-52(s0)
80005ff0:	fef42423          	sw	a5,-24(s0)
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
80005ff4:	fe042223          	sw	zero,-28(s0)

	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
80005ff8:	fc442703          	lw	a4,-60(s0)
80005ffc:	ff0007b7          	lui	a5,0xff000
80006000:	00f777b3          	and	a5,a4,a5
80006004:	00078663          	beqz	a5,80006010 <xEventGroupSync+0x44>
80006008:	30007073          	csrci	mstatus,0
8000600c:	0000006f          	j	8000600c <xEventGroupSync+0x40>
	configASSERT( uxBitsToWaitFor != 0 );
80006010:	fc442783          	lw	a5,-60(s0)
80006014:	00079663          	bnez	a5,80006020 <xEventGroupSync+0x54>
80006018:	30007073          	csrci	mstatus,0
8000601c:	0000006f          	j	8000601c <xEventGroupSync+0x50>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
80006020:	ed0fe0ef          	jal	ra,800046f0 <xTaskGetSchedulerState>
80006024:	00050793          	mv	a5,a0
80006028:	00079663          	bnez	a5,80006034 <xEventGroupSync+0x68>
8000602c:	fc042783          	lw	a5,-64(s0)
80006030:	00079663          	bnez	a5,8000603c <xEventGroupSync+0x70>
80006034:	00100793          	li	a5,1
80006038:	0080006f          	j	80006040 <xEventGroupSync+0x74>
8000603c:	00000793          	li	a5,0
80006040:	00079663          	bnez	a5,8000604c <xEventGroupSync+0x80>
80006044:	30007073          	csrci	mstatus,0
80006048:	0000006f          	j	80006048 <xEventGroupSync+0x7c>
	}
	#endif

	vTaskSuspendAll();
8000604c:	eb9fc0ef          	jal	ra,80002f04 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
80006050:	fe842783          	lw	a5,-24(s0)
80006054:	0007a783          	lw	a5,0(a5) # ff000000 <__stack+0x7efc3534>
80006058:	fef42023          	sw	a5,-32(s0)

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
8000605c:	fc842583          	lw	a1,-56(s0)
80006060:	fcc42503          	lw	a0,-52(s0)
80006064:	440000ef          	jal	ra,800064a4 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
80006068:	fe042703          	lw	a4,-32(s0)
8000606c:	fc842783          	lw	a5,-56(s0)
80006070:	00f76733          	or	a4,a4,a5
80006074:	fc442783          	lw	a5,-60(s0)
80006078:	00f777b3          	and	a5,a4,a5
8000607c:	fc442703          	lw	a4,-60(s0)
80006080:	02f71c63          	bne	a4,a5,800060b8 <xEventGroupSync+0xec>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
80006084:	fe042703          	lw	a4,-32(s0)
80006088:	fc842783          	lw	a5,-56(s0)
8000608c:	00f767b3          	or	a5,a4,a5
80006090:	fef42623          	sw	a5,-20(s0)

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
80006094:	fe842783          	lw	a5,-24(s0)
80006098:	0007a703          	lw	a4,0(a5)
8000609c:	fc442783          	lw	a5,-60(s0)
800060a0:	fff7c793          	not	a5,a5
800060a4:	00f77733          	and	a4,a4,a5
800060a8:	fe842783          	lw	a5,-24(s0)
800060ac:	00e7a023          	sw	a4,0(a5)

			xTicksToWait = 0;
800060b0:	fc042023          	sw	zero,-64(s0)
800060b4:	0440006f          	j	800060f8 <xEventGroupSync+0x12c>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
800060b8:	fc042783          	lw	a5,-64(s0)
800060bc:	02078863          	beqz	a5,800060ec <xEventGroupSync+0x120>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
800060c0:	fe842783          	lw	a5,-24(s0)
800060c4:	00478693          	addi	a3,a5,4
800060c8:	fc442703          	lw	a4,-60(s0)
800060cc:	050007b7          	lui	a5,0x5000
800060d0:	00f767b3          	or	a5,a4,a5
800060d4:	fc042603          	lw	a2,-64(s0)
800060d8:	00078593          	mv	a1,a5
800060dc:	00068513          	mv	a0,a3
800060e0:	fd4fd0ef          	jal	ra,800038b4 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
800060e4:	fe042623          	sw	zero,-20(s0)
800060e8:	0100006f          	j	800060f8 <xEventGroupSync+0x12c>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
800060ec:	fe842783          	lw	a5,-24(s0)
800060f0:	0007a783          	lw	a5,0(a5) # 5000000 <_HEAP_SIZE+0x4fff000>
800060f4:	fef42623          	sw	a5,-20(s0)
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
800060f8:	e45fc0ef          	jal	ra,80002f3c <xTaskResumeAll>
800060fc:	fca42e23          	sw	a0,-36(s0)

	if( xTicksToWait != ( TickType_t ) 0 )
80006100:	fc042783          	lw	a5,-64(s0)
80006104:	08078463          	beqz	a5,8000618c <xEventGroupSync+0x1c0>
	{
		if( xAlreadyYielded == pdFALSE )
80006108:	fdc42783          	lw	a5,-36(s0)
8000610c:	00079463          	bnez	a5,80006114 <xEventGroupSync+0x148>
		{
			portYIELD_WITHIN_API();
80006110:	b7cfa0ef          	jal	ra,8000048c <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
80006114:	9adfe0ef          	jal	ra,80004ac0 <uxTaskResetEventItemValue>
80006118:	fea42623          	sw	a0,-20(s0)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
8000611c:	fec42703          	lw	a4,-20(s0)
80006120:	020007b7          	lui	a5,0x2000
80006124:	00f777b3          	and	a5,a4,a5
80006128:	04079863          	bnez	a5,80006178 <xEventGroupSync+0x1ac>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
8000612c:	8d1fe0ef          	jal	ra,800049fc <vTaskEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
80006130:	fe842783          	lw	a5,-24(s0)
80006134:	0007a783          	lw	a5,0(a5) # 2000000 <_HEAP_SIZE+0x1fff000>
80006138:	fef42623          	sw	a5,-20(s0)

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
8000613c:	fec42703          	lw	a4,-20(s0)
80006140:	fc442783          	lw	a5,-60(s0)
80006144:	00f777b3          	and	a5,a4,a5
80006148:	fc442703          	lw	a4,-60(s0)
8000614c:	02f71063          	bne	a4,a5,8000616c <xEventGroupSync+0x1a0>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
80006150:	fe842783          	lw	a5,-24(s0)
80006154:	0007a703          	lw	a4,0(a5)
80006158:	fc442783          	lw	a5,-60(s0)
8000615c:	fff7c793          	not	a5,a5
80006160:	00f77733          	and	a4,a4,a5
80006164:	fe842783          	lw	a5,-24(s0)
80006168:	00e7a023          	sw	a4,0(a5)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
8000616c:	8e5fe0ef          	jal	ra,80004a50 <vTaskExitCritical>

			xTimeoutOccurred = pdTRUE;
80006170:	00100793          	li	a5,1
80006174:	fef42223          	sw	a5,-28(s0)
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
80006178:	fec42703          	lw	a4,-20(s0)
8000617c:	010007b7          	lui	a5,0x1000
80006180:	fff78793          	addi	a5,a5,-1 # ffffff <_HEAP_SIZE+0xffefff>
80006184:	00f777b3          	and	a5,a4,a5
80006188:	fef42623          	sw	a5,-20(s0)
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
8000618c:	fec42783          	lw	a5,-20(s0)
}
80006190:	00078513          	mv	a0,a5
80006194:	03c12083          	lw	ra,60(sp)
80006198:	03812403          	lw	s0,56(sp)
8000619c:	04010113          	addi	sp,sp,64
800061a0:	00008067          	ret

800061a4 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
800061a4:	fb010113          	addi	sp,sp,-80
800061a8:	04112623          	sw	ra,76(sp)
800061ac:	04812423          	sw	s0,72(sp)
800061b0:	05010413          	addi	s0,sp,80
800061b4:	fca42623          	sw	a0,-52(s0)
800061b8:	fcb42423          	sw	a1,-56(s0)
800061bc:	fcc42223          	sw	a2,-60(s0)
800061c0:	fcd42023          	sw	a3,-64(s0)
800061c4:	fae42e23          	sw	a4,-68(s0)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
800061c8:	fcc42783          	lw	a5,-52(s0)
800061cc:	fef42223          	sw	a5,-28(s0)
EventBits_t uxReturn, uxControlBits = 0;
800061d0:	fe042423          	sw	zero,-24(s0)
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
800061d4:	fe042023          	sw	zero,-32(s0)

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
800061d8:	fcc42783          	lw	a5,-52(s0)
800061dc:	00079663          	bnez	a5,800061e8 <xEventGroupWaitBits+0x44>
800061e0:	30007073          	csrci	mstatus,0
800061e4:	0000006f          	j	800061e4 <xEventGroupWaitBits+0x40>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
800061e8:	fc842703          	lw	a4,-56(s0)
800061ec:	ff0007b7          	lui	a5,0xff000
800061f0:	00f777b3          	and	a5,a4,a5
800061f4:	00078663          	beqz	a5,80006200 <xEventGroupWaitBits+0x5c>
800061f8:	30007073          	csrci	mstatus,0
800061fc:	0000006f          	j	800061fc <xEventGroupWaitBits+0x58>
	configASSERT( uxBitsToWaitFor != 0 );
80006200:	fc842783          	lw	a5,-56(s0)
80006204:	00079663          	bnez	a5,80006210 <xEventGroupWaitBits+0x6c>
80006208:	30007073          	csrci	mstatus,0
8000620c:	0000006f          	j	8000620c <xEventGroupWaitBits+0x68>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
80006210:	ce0fe0ef          	jal	ra,800046f0 <xTaskGetSchedulerState>
80006214:	00050793          	mv	a5,a0
80006218:	00079663          	bnez	a5,80006224 <xEventGroupWaitBits+0x80>
8000621c:	fbc42783          	lw	a5,-68(s0)
80006220:	00079663          	bnez	a5,8000622c <xEventGroupWaitBits+0x88>
80006224:	00100793          	li	a5,1
80006228:	0080006f          	j	80006230 <xEventGroupWaitBits+0x8c>
8000622c:	00000793          	li	a5,0
80006230:	00079663          	bnez	a5,8000623c <xEventGroupWaitBits+0x98>
80006234:	30007073          	csrci	mstatus,0
80006238:	0000006f          	j	80006238 <xEventGroupWaitBits+0x94>
	}
	#endif

	vTaskSuspendAll();
8000623c:	cc9fc0ef          	jal	ra,80002f04 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
80006240:	fe442783          	lw	a5,-28(s0)
80006244:	0007a783          	lw	a5,0(a5) # ff000000 <__stack+0x7efc3534>
80006248:	fcf42e23          	sw	a5,-36(s0)

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
8000624c:	fc042603          	lw	a2,-64(s0)
80006250:	fc842583          	lw	a1,-56(s0)
80006254:	fdc42503          	lw	a0,-36(s0)
80006258:	500000ef          	jal	ra,80006758 <prvTestWaitCondition>
8000625c:	fca42c23          	sw	a0,-40(s0)

		if( xWaitConditionMet != pdFALSE )
80006260:	fd842783          	lw	a5,-40(s0)
80006264:	02078c63          	beqz	a5,8000629c <xEventGroupWaitBits+0xf8>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
80006268:	fdc42783          	lw	a5,-36(s0)
8000626c:	fef42623          	sw	a5,-20(s0)
			xTicksToWait = ( TickType_t ) 0;
80006270:	fa042e23          	sw	zero,-68(s0)

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
80006274:	fc442783          	lw	a5,-60(s0)
80006278:	08078863          	beqz	a5,80006308 <xEventGroupWaitBits+0x164>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
8000627c:	fe442783          	lw	a5,-28(s0)
80006280:	0007a703          	lw	a4,0(a5)
80006284:	fc842783          	lw	a5,-56(s0)
80006288:	fff7c793          	not	a5,a5
8000628c:	00f77733          	and	a4,a4,a5
80006290:	fe442783          	lw	a5,-28(s0)
80006294:	00e7a023          	sw	a4,0(a5)
80006298:	0700006f          	j	80006308 <xEventGroupWaitBits+0x164>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
8000629c:	fbc42783          	lw	a5,-68(s0)
800062a0:	00079863          	bnez	a5,800062b0 <xEventGroupWaitBits+0x10c>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
800062a4:	fdc42783          	lw	a5,-36(s0)
800062a8:	fef42623          	sw	a5,-20(s0)
800062ac:	05c0006f          	j	80006308 <xEventGroupWaitBits+0x164>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
800062b0:	fc442783          	lw	a5,-60(s0)
800062b4:	00078a63          	beqz	a5,800062c8 <xEventGroupWaitBits+0x124>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
800062b8:	fe842703          	lw	a4,-24(s0)
800062bc:	010007b7          	lui	a5,0x1000
800062c0:	00f767b3          	or	a5,a4,a5
800062c4:	fef42423          	sw	a5,-24(s0)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
800062c8:	fc042783          	lw	a5,-64(s0)
800062cc:	00078a63          	beqz	a5,800062e0 <xEventGroupWaitBits+0x13c>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
800062d0:	fe842703          	lw	a4,-24(s0)
800062d4:	040007b7          	lui	a5,0x4000
800062d8:	00f767b3          	or	a5,a4,a5
800062dc:	fef42423          	sw	a5,-24(s0)
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
800062e0:	fe442783          	lw	a5,-28(s0)
800062e4:	00478693          	addi	a3,a5,4 # 4000004 <_HEAP_SIZE+0x3fff004>
800062e8:	fc842703          	lw	a4,-56(s0)
800062ec:	fe842783          	lw	a5,-24(s0)
800062f0:	00f767b3          	or	a5,a4,a5
800062f4:	fbc42603          	lw	a2,-68(s0)
800062f8:	00078593          	mv	a1,a5
800062fc:	00068513          	mv	a0,a3
80006300:	db4fd0ef          	jal	ra,800038b4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
80006304:	fe042623          	sw	zero,-20(s0)

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
80006308:	c35fc0ef          	jal	ra,80002f3c <xTaskResumeAll>
8000630c:	fca42a23          	sw	a0,-44(s0)

	if( xTicksToWait != ( TickType_t ) 0 )
80006310:	fbc42783          	lw	a5,-68(s0)
80006314:	08078863          	beqz	a5,800063a4 <xEventGroupWaitBits+0x200>
	{
		if( xAlreadyYielded == pdFALSE )
80006318:	fd442783          	lw	a5,-44(s0)
8000631c:	00079463          	bnez	a5,80006324 <xEventGroupWaitBits+0x180>
		{
			portYIELD_WITHIN_API();
80006320:	96cfa0ef          	jal	ra,8000048c <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
80006324:	f9cfe0ef          	jal	ra,80004ac0 <uxTaskResetEventItemValue>
80006328:	fea42623          	sw	a0,-20(s0)

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
8000632c:	fec42703          	lw	a4,-20(s0)
80006330:	020007b7          	lui	a5,0x2000
80006334:	00f777b3          	and	a5,a4,a5
80006338:	04079c63          	bnez	a5,80006390 <xEventGroupWaitBits+0x1ec>
		{
			taskENTER_CRITICAL();
8000633c:	ec0fe0ef          	jal	ra,800049fc <vTaskEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
80006340:	fe442783          	lw	a5,-28(s0)
80006344:	0007a783          	lw	a5,0(a5) # 2000000 <_HEAP_SIZE+0x1fff000>
80006348:	fef42623          	sw	a5,-20(s0)

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
8000634c:	fc042603          	lw	a2,-64(s0)
80006350:	fc842583          	lw	a1,-56(s0)
80006354:	fec42503          	lw	a0,-20(s0)
80006358:	400000ef          	jal	ra,80006758 <prvTestWaitCondition>
8000635c:	00050793          	mv	a5,a0
80006360:	02078463          	beqz	a5,80006388 <xEventGroupWaitBits+0x1e4>
				{
					if( xClearOnExit != pdFALSE )
80006364:	fc442783          	lw	a5,-60(s0)
80006368:	02078063          	beqz	a5,80006388 <xEventGroupWaitBits+0x1e4>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
8000636c:	fe442783          	lw	a5,-28(s0)
80006370:	0007a703          	lw	a4,0(a5)
80006374:	fc842783          	lw	a5,-56(s0)
80006378:	fff7c793          	not	a5,a5
8000637c:	00f77733          	and	a4,a4,a5
80006380:	fe442783          	lw	a5,-28(s0)
80006384:	00e7a023          	sw	a4,0(a5)
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
80006388:	ec8fe0ef          	jal	ra,80004a50 <vTaskExitCritical>

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
8000638c:	fe042023          	sw	zero,-32(s0)
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
80006390:	fec42703          	lw	a4,-20(s0)
80006394:	010007b7          	lui	a5,0x1000
80006398:	fff78793          	addi	a5,a5,-1 # ffffff <_HEAP_SIZE+0xffefff>
8000639c:	00f777b3          	and	a5,a4,a5
800063a0:	fef42623          	sw	a5,-20(s0)
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
800063a4:	fec42783          	lw	a5,-20(s0)
}
800063a8:	00078513          	mv	a0,a5
800063ac:	04c12083          	lw	ra,76(sp)
800063b0:	04812403          	lw	s0,72(sp)
800063b4:	05010113          	addi	sp,sp,80
800063b8:	00008067          	ret

800063bc <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
800063bc:	fd010113          	addi	sp,sp,-48
800063c0:	02112623          	sw	ra,44(sp)
800063c4:	02812423          	sw	s0,40(sp)
800063c8:	03010413          	addi	s0,sp,48
800063cc:	fca42e23          	sw	a0,-36(s0)
800063d0:	fcb42c23          	sw	a1,-40(s0)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
800063d4:	fdc42783          	lw	a5,-36(s0)
800063d8:	fef42623          	sw	a5,-20(s0)
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
800063dc:	fdc42783          	lw	a5,-36(s0)
800063e0:	00079663          	bnez	a5,800063ec <xEventGroupClearBits+0x30>
800063e4:	30007073          	csrci	mstatus,0
800063e8:	0000006f          	j	800063e8 <xEventGroupClearBits+0x2c>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
800063ec:	fd842703          	lw	a4,-40(s0)
800063f0:	ff0007b7          	lui	a5,0xff000
800063f4:	00f777b3          	and	a5,a4,a5
800063f8:	00078663          	beqz	a5,80006404 <xEventGroupClearBits+0x48>
800063fc:	30007073          	csrci	mstatus,0
80006400:	0000006f          	j	80006400 <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
80006404:	df8fe0ef          	jal	ra,800049fc <vTaskEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
80006408:	fec42783          	lw	a5,-20(s0)
8000640c:	0007a783          	lw	a5,0(a5) # ff000000 <__stack+0x7efc3534>
80006410:	fef42423          	sw	a5,-24(s0)

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
80006414:	fec42783          	lw	a5,-20(s0)
80006418:	0007a703          	lw	a4,0(a5)
8000641c:	fd842783          	lw	a5,-40(s0)
80006420:	fff7c793          	not	a5,a5
80006424:	00f77733          	and	a4,a4,a5
80006428:	fec42783          	lw	a5,-20(s0)
8000642c:	00e7a023          	sw	a4,0(a5)
	}
	taskEXIT_CRITICAL();
80006430:	e20fe0ef          	jal	ra,80004a50 <vTaskExitCritical>

	return uxReturn;
80006434:	fe842783          	lw	a5,-24(s0)
}
80006438:	00078513          	mv	a0,a5
8000643c:	02c12083          	lw	ra,44(sp)
80006440:	02812403          	lw	s0,40(sp)
80006444:	03010113          	addi	sp,sp,48
80006448:	00008067          	ret

8000644c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
8000644c:	fd010113          	addi	sp,sp,-48
80006450:	02112623          	sw	ra,44(sp)
80006454:	02812423          	sw	s0,40(sp)
80006458:	03010413          	addi	s0,sp,48
8000645c:	fca42e23          	sw	a0,-36(s0)
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
80006460:	fdc42783          	lw	a5,-36(s0)
80006464:	fef42623          	sw	a5,-20(s0)
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80006468:	a6cfa0ef          	jal	ra,800006d4 <vPortSetInterruptMask>
8000646c:	00050793          	mv	a5,a0
80006470:	fef42423          	sw	a5,-24(s0)
	{
		uxReturn = pxEventBits->uxEventBits;
80006474:	fec42783          	lw	a5,-20(s0)
80006478:	0007a783          	lw	a5,0(a5)
8000647c:	fef42223          	sw	a5,-28(s0)
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
80006480:	fe842783          	lw	a5,-24(s0)
80006484:	00078513          	mv	a0,a5
80006488:	a24fa0ef          	jal	ra,800006ac <vPortClearInterruptMask>

	return uxReturn;
8000648c:	fe442783          	lw	a5,-28(s0)
}
80006490:	00078513          	mv	a0,a5
80006494:	02c12083          	lw	ra,44(sp)
80006498:	02812403          	lw	s0,40(sp)
8000649c:	03010113          	addi	sp,sp,48
800064a0:	00008067          	ret

800064a4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
800064a4:	fb010113          	addi	sp,sp,-80
800064a8:	04112623          	sw	ra,76(sp)
800064ac:	04812423          	sw	s0,72(sp)
800064b0:	05010413          	addi	s0,sp,80
800064b4:	faa42e23          	sw	a0,-68(s0)
800064b8:	fab42c23          	sw	a1,-72(s0)
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
800064bc:	fe042423          	sw	zero,-24(s0)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
800064c0:	fbc42783          	lw	a5,-68(s0)
800064c4:	fef42023          	sw	a5,-32(s0)
BaseType_t xMatchFound = pdFALSE;
800064c8:	fe042223          	sw	zero,-28(s0)

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
800064cc:	fbc42783          	lw	a5,-68(s0)
800064d0:	00079663          	bnez	a5,800064dc <xEventGroupSetBits+0x38>
800064d4:	30007073          	csrci	mstatus,0
800064d8:	0000006f          	j	800064d8 <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
800064dc:	fb842703          	lw	a4,-72(s0)
800064e0:	ff0007b7          	lui	a5,0xff000
800064e4:	00f777b3          	and	a5,a4,a5
800064e8:	00078663          	beqz	a5,800064f4 <xEventGroupSetBits+0x50>
800064ec:	30007073          	csrci	mstatus,0
800064f0:	0000006f          	j	800064f0 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
800064f4:	fe042783          	lw	a5,-32(s0)
800064f8:	00478793          	addi	a5,a5,4 # ff000004 <__stack+0x7efc3538>
800064fc:	fcf42e23          	sw	a5,-36(s0)
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80006500:	fdc42783          	lw	a5,-36(s0)
80006504:	00878793          	addi	a5,a5,8
80006508:	fcf42c23          	sw	a5,-40(s0)
	vTaskSuspendAll();
8000650c:	9f9fc0ef          	jal	ra,80002f04 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
80006510:	fdc42783          	lw	a5,-36(s0)
80006514:	00c7a783          	lw	a5,12(a5)
80006518:	fef42623          	sw	a5,-20(s0)

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
8000651c:	fe042783          	lw	a5,-32(s0)
80006520:	0007a703          	lw	a4,0(a5)
80006524:	fb842783          	lw	a5,-72(s0)
80006528:	00f76733          	or	a4,a4,a5
8000652c:	fe042783          	lw	a5,-32(s0)
80006530:	00e7a023          	sw	a4,0(a5)

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
80006534:	0e00006f          	j	80006614 <xEventGroupSetBits+0x170>
		{
			pxNext = listGET_NEXT( pxListItem );
80006538:	fec42783          	lw	a5,-20(s0)
8000653c:	0047a783          	lw	a5,4(a5)
80006540:	fcf42a23          	sw	a5,-44(s0)
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
80006544:	fec42783          	lw	a5,-20(s0)
80006548:	0007a783          	lw	a5,0(a5)
8000654c:	fcf42823          	sw	a5,-48(s0)
			xMatchFound = pdFALSE;
80006550:	fe042223          	sw	zero,-28(s0)

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
80006554:	fd042703          	lw	a4,-48(s0)
80006558:	ff0007b7          	lui	a5,0xff000
8000655c:	00f777b3          	and	a5,a4,a5
80006560:	fcf42623          	sw	a5,-52(s0)
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
80006564:	fd042703          	lw	a4,-48(s0)
80006568:	010007b7          	lui	a5,0x1000
8000656c:	fff78793          	addi	a5,a5,-1 # ffffff <_HEAP_SIZE+0xffefff>
80006570:	00f777b3          	and	a5,a4,a5
80006574:	fcf42823          	sw	a5,-48(s0)

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
80006578:	fcc42703          	lw	a4,-52(s0)
8000657c:	040007b7          	lui	a5,0x4000
80006580:	00f777b3          	and	a5,a4,a5
80006584:	02079263          	bnez	a5,800065a8 <xEventGroupSetBits+0x104>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
80006588:	fe042783          	lw	a5,-32(s0)
8000658c:	0007a703          	lw	a4,0(a5) # 4000000 <_HEAP_SIZE+0x3fff000>
80006590:	fd042783          	lw	a5,-48(s0)
80006594:	00f777b3          	and	a5,a4,a5
80006598:	02078863          	beqz	a5,800065c8 <xEventGroupSetBits+0x124>
				{
					xMatchFound = pdTRUE;
8000659c:	00100793          	li	a5,1
800065a0:	fef42223          	sw	a5,-28(s0)
800065a4:	0240006f          	j	800065c8 <xEventGroupSetBits+0x124>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
800065a8:	fe042783          	lw	a5,-32(s0)
800065ac:	0007a703          	lw	a4,0(a5)
800065b0:	fd042783          	lw	a5,-48(s0)
800065b4:	00f777b3          	and	a5,a4,a5
800065b8:	fd042703          	lw	a4,-48(s0)
800065bc:	00f71663          	bne	a4,a5,800065c8 <xEventGroupSetBits+0x124>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
800065c0:	00100793          	li	a5,1
800065c4:	fef42223          	sw	a5,-28(s0)
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
800065c8:	fe442783          	lw	a5,-28(s0)
800065cc:	04078063          	beqz	a5,8000660c <xEventGroupSetBits+0x168>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
800065d0:	fcc42703          	lw	a4,-52(s0)
800065d4:	010007b7          	lui	a5,0x1000
800065d8:	00f777b3          	and	a5,a4,a5
800065dc:	00078a63          	beqz	a5,800065f0 <xEventGroupSetBits+0x14c>
				{
					uxBitsToClear |= uxBitsWaitedFor;
800065e0:	fe842703          	lw	a4,-24(s0)
800065e4:	fd042783          	lw	a5,-48(s0)
800065e8:	00f767b3          	or	a5,a4,a5
800065ec:	fef42423          	sw	a5,-24(s0)
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
800065f0:	fe042783          	lw	a5,-32(s0)
800065f4:	0007a703          	lw	a4,0(a5) # 1000000 <_HEAP_SIZE+0xfff000>
800065f8:	020007b7          	lui	a5,0x2000
800065fc:	00f767b3          	or	a5,a4,a5
80006600:	00078593          	mv	a1,a5
80006604:	fec42503          	lw	a0,-20(s0)
80006608:	da0fd0ef          	jal	ra,80003ba8 <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
8000660c:	fd442783          	lw	a5,-44(s0)
80006610:	fef42623          	sw	a5,-20(s0)
		while( pxListItem != pxListEnd )
80006614:	fec42703          	lw	a4,-20(s0)
80006618:	fd842783          	lw	a5,-40(s0)
8000661c:	f0f71ee3          	bne	a4,a5,80006538 <xEventGroupSetBits+0x94>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
80006620:	fe042783          	lw	a5,-32(s0)
80006624:	0007a703          	lw	a4,0(a5) # 2000000 <_HEAP_SIZE+0x1fff000>
80006628:	fe842783          	lw	a5,-24(s0)
8000662c:	fff7c793          	not	a5,a5
80006630:	00f77733          	and	a4,a4,a5
80006634:	fe042783          	lw	a5,-32(s0)
80006638:	00e7a023          	sw	a4,0(a5)
	}
	( void ) xTaskResumeAll();
8000663c:	901fc0ef          	jal	ra,80002f3c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
80006640:	fe042783          	lw	a5,-32(s0)
80006644:	0007a783          	lw	a5,0(a5)
}
80006648:	00078513          	mv	a0,a5
8000664c:	04c12083          	lw	ra,76(sp)
80006650:	04812403          	lw	s0,72(sp)
80006654:	05010113          	addi	sp,sp,80
80006658:	00008067          	ret

8000665c <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
8000665c:	fd010113          	addi	sp,sp,-48
80006660:	02112623          	sw	ra,44(sp)
80006664:	02812423          	sw	s0,40(sp)
80006668:	03010413          	addi	s0,sp,48
8000666c:	fca42e23          	sw	a0,-36(s0)
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
80006670:	fdc42783          	lw	a5,-36(s0)
80006674:	fef42623          	sw	a5,-20(s0)
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
80006678:	fec42783          	lw	a5,-20(s0)
8000667c:	00478793          	addi	a5,a5,4
80006680:	fef42423          	sw	a5,-24(s0)

	vTaskSuspendAll();
80006684:	881fc0ef          	jal	ra,80002f04 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
80006688:	0340006f          	j	800066bc <vEventGroupDelete+0x60>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
8000668c:	fe842783          	lw	a5,-24(s0)
80006690:	00c7a703          	lw	a4,12(a5)
80006694:	fe842783          	lw	a5,-24(s0)
80006698:	00878793          	addi	a5,a5,8
8000669c:	00f71663          	bne	a4,a5,800066a8 <vEventGroupDelete+0x4c>
800066a0:	30007073          	csrci	mstatus,0
800066a4:	0000006f          	j	800066a4 <vEventGroupDelete+0x48>
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
800066a8:	fe842783          	lw	a5,-24(s0)
800066ac:	00c7a783          	lw	a5,12(a5)
800066b0:	020005b7          	lui	a1,0x2000
800066b4:	00078513          	mv	a0,a5
800066b8:	cf0fd0ef          	jal	ra,80003ba8 <xTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
800066bc:	fe842783          	lw	a5,-24(s0)
800066c0:	0007a783          	lw	a5,0(a5)
800066c4:	fc0794e3          	bnez	a5,8000668c <vEventGroupDelete+0x30>
		}

		vPortFree( pxEventBits );
800066c8:	fec42503          	lw	a0,-20(s0)
800066cc:	34c000ef          	jal	ra,80006a18 <vPortFree>
	}
	( void ) xTaskResumeAll();
800066d0:	86dfc0ef          	jal	ra,80002f3c <xTaskResumeAll>
}
800066d4:	00000013          	nop
800066d8:	02c12083          	lw	ra,44(sp)
800066dc:	02812403          	lw	s0,40(sp)
800066e0:	03010113          	addi	sp,sp,48
800066e4:	00008067          	ret

800066e8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
800066e8:	fe010113          	addi	sp,sp,-32
800066ec:	00112e23          	sw	ra,28(sp)
800066f0:	00812c23          	sw	s0,24(sp)
800066f4:	02010413          	addi	s0,sp,32
800066f8:	fea42623          	sw	a0,-20(s0)
800066fc:	feb42423          	sw	a1,-24(s0)
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
80006700:	fe842583          	lw	a1,-24(s0)
80006704:	fec42503          	lw	a0,-20(s0)
80006708:	d9dff0ef          	jal	ra,800064a4 <xEventGroupSetBits>
}
8000670c:	00000013          	nop
80006710:	01c12083          	lw	ra,28(sp)
80006714:	01812403          	lw	s0,24(sp)
80006718:	02010113          	addi	sp,sp,32
8000671c:	00008067          	ret

80006720 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
80006720:	fe010113          	addi	sp,sp,-32
80006724:	00112e23          	sw	ra,28(sp)
80006728:	00812c23          	sw	s0,24(sp)
8000672c:	02010413          	addi	s0,sp,32
80006730:	fea42623          	sw	a0,-20(s0)
80006734:	feb42423          	sw	a1,-24(s0)
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
80006738:	fe842583          	lw	a1,-24(s0)
8000673c:	fec42503          	lw	a0,-20(s0)
80006740:	c7dff0ef          	jal	ra,800063bc <xEventGroupClearBits>
}
80006744:	00000013          	nop
80006748:	01c12083          	lw	ra,28(sp)
8000674c:	01812403          	lw	s0,24(sp)
80006750:	02010113          	addi	sp,sp,32
80006754:	00008067          	ret

80006758 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
80006758:	fd010113          	addi	sp,sp,-48
8000675c:	02812623          	sw	s0,44(sp)
80006760:	03010413          	addi	s0,sp,48
80006764:	fca42e23          	sw	a0,-36(s0)
80006768:	fcb42c23          	sw	a1,-40(s0)
8000676c:	fcc42a23          	sw	a2,-44(s0)
BaseType_t xWaitConditionMet = pdFALSE;
80006770:	fe042623          	sw	zero,-20(s0)

	if( xWaitForAllBits == pdFALSE )
80006774:	fd442783          	lw	a5,-44(s0)
80006778:	02079063          	bnez	a5,80006798 <prvTestWaitCondition+0x40>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
8000677c:	fdc42703          	lw	a4,-36(s0)
80006780:	fd842783          	lw	a5,-40(s0)
80006784:	00f777b3          	and	a5,a4,a5
80006788:	02078663          	beqz	a5,800067b4 <prvTestWaitCondition+0x5c>
		{
			xWaitConditionMet = pdTRUE;
8000678c:	00100793          	li	a5,1
80006790:	fef42623          	sw	a5,-20(s0)
80006794:	0200006f          	j	800067b4 <prvTestWaitCondition+0x5c>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
80006798:	fdc42703          	lw	a4,-36(s0)
8000679c:	fd842783          	lw	a5,-40(s0)
800067a0:	00f777b3          	and	a5,a4,a5
800067a4:	fd842703          	lw	a4,-40(s0)
800067a8:	00f71663          	bne	a4,a5,800067b4 <prvTestWaitCondition+0x5c>
		{
			xWaitConditionMet = pdTRUE;
800067ac:	00100793          	li	a5,1
800067b0:	fef42623          	sw	a5,-20(s0)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
800067b4:	fec42783          	lw	a5,-20(s0)
}
800067b8:	00078513          	mv	a0,a5
800067bc:	02c12403          	lw	s0,44(sp)
800067c0:	03010113          	addi	sp,sp,48
800067c4:	00008067          	ret

800067c8 <uxEventGroupGetNumber>:
/*-----------------------------------------------------------*/

#if (configUSE_TRACE_FACILITY == 1)

	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
	{
800067c8:	fd010113          	addi	sp,sp,-48
800067cc:	02812623          	sw	s0,44(sp)
800067d0:	03010413          	addi	s0,sp,48
800067d4:	fca42e23          	sw	a0,-36(s0)
	UBaseType_t xReturn;
	EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
800067d8:	fdc42783          	lw	a5,-36(s0)
800067dc:	fef42423          	sw	a5,-24(s0)

		if( xEventGroup == NULL )
800067e0:	fdc42783          	lw	a5,-36(s0)
800067e4:	00079663          	bnez	a5,800067f0 <uxEventGroupGetNumber+0x28>
		{
			xReturn = 0;
800067e8:	fe042623          	sw	zero,-20(s0)
800067ec:	0100006f          	j	800067fc <uxEventGroupGetNumber+0x34>
		}
		else
		{
			xReturn = pxEventBits->uxEventGroupNumber;
800067f0:	fe842783          	lw	a5,-24(s0)
800067f4:	0187a783          	lw	a5,24(a5)
800067f8:	fef42623          	sw	a5,-20(s0)
		}

		return xReturn;
800067fc:	fec42783          	lw	a5,-20(s0)
	}
80006800:	00078513          	mv	a0,a5
80006804:	02c12403          	lw	s0,44(sp)
80006808:	03010113          	addi	sp,sp,48
8000680c:	00008067          	ret

80006810 <pvPortMalloc>:
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
80006810:	fc010113          	addi	sp,sp,-64
80006814:	02112e23          	sw	ra,60(sp)
80006818:	02812c23          	sw	s0,56(sp)
8000681c:	04010413          	addi	s0,sp,64
80006820:	fca42623          	sw	a0,-52(s0)
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
80006824:	fe042223          	sw	zero,-28(s0)

	vTaskSuspendAll();
80006828:	edcfc0ef          	jal	ra,80002f04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
8000682c:	00034797          	auipc	a5,0x34
80006830:	15878793          	addi	a5,a5,344 # 8003a984 <xHeapHasBeenInitialised.2291>
80006834:	0007a783          	lw	a5,0(a5)
80006838:	00079c63          	bnez	a5,80006850 <pvPortMalloc+0x40>
		{
			prvHeapInit();
8000683c:	2f8000ef          	jal	ra,80006b34 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
80006840:	00034797          	auipc	a5,0x34
80006844:	14478793          	addi	a5,a5,324 # 8003a984 <xHeapHasBeenInitialised.2291>
80006848:	00100713          	li	a4,1
8000684c:	00e7a023          	sw	a4,0(a5)
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
80006850:	fcc42783          	lw	a5,-52(s0)
80006854:	02078a63          	beqz	a5,80006888 <pvPortMalloc+0x78>
		{
			xWantedSize += heapSTRUCT_SIZE;
80006858:	00800793          	li	a5,8
8000685c:	00078713          	mv	a4,a5
80006860:	fcc42783          	lw	a5,-52(s0)
80006864:	00e787b3          	add	a5,a5,a4
80006868:	fcf42623          	sw	a5,-52(s0)

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
8000686c:	fcc42783          	lw	a5,-52(s0)
80006870:	0037f793          	andi	a5,a5,3
80006874:	00078a63          	beqz	a5,80006888 <pvPortMalloc+0x78>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
80006878:	fcc42783          	lw	a5,-52(s0)
8000687c:	ffc7f793          	andi	a5,a5,-4
80006880:	00478793          	addi	a5,a5,4
80006884:	fcf42623          	sw	a5,-52(s0)
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
80006888:	fcc42783          	lw	a5,-52(s0)
8000688c:	16078263          	beqz	a5,800069f0 <pvPortMalloc+0x1e0>
80006890:	fcc42703          	lw	a4,-52(s0)
80006894:	000197b7          	lui	a5,0x19
80006898:	ffb78793          	addi	a5,a5,-5 # 18ffb <_HEAP_SIZE+0x17ffb>
8000689c:	14e7ea63          	bltu	a5,a4,800069f0 <pvPortMalloc+0x1e0>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
800068a0:	00034797          	auipc	a5,0x34
800068a4:	0d478793          	addi	a5,a5,212 # 8003a974 <xStart>
800068a8:	fef42423          	sw	a5,-24(s0)
			pxBlock = xStart.pxNextFreeBlock;
800068ac:	00034797          	auipc	a5,0x34
800068b0:	0c878793          	addi	a5,a5,200 # 8003a974 <xStart>
800068b4:	0007a783          	lw	a5,0(a5)
800068b8:	fef42623          	sw	a5,-20(s0)
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
800068bc:	0180006f          	j	800068d4 <pvPortMalloc+0xc4>
			{
				pxPreviousBlock = pxBlock;
800068c0:	fec42783          	lw	a5,-20(s0)
800068c4:	fef42423          	sw	a5,-24(s0)
				pxBlock = pxBlock->pxNextFreeBlock;
800068c8:	fec42783          	lw	a5,-20(s0)
800068cc:	0007a783          	lw	a5,0(a5)
800068d0:	fef42623          	sw	a5,-20(s0)
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
800068d4:	fec42783          	lw	a5,-20(s0)
800068d8:	0047a783          	lw	a5,4(a5)
800068dc:	fcc42703          	lw	a4,-52(s0)
800068e0:	00e7f863          	bleu	a4,a5,800068f0 <pvPortMalloc+0xe0>
800068e4:	fec42783          	lw	a5,-20(s0)
800068e8:	0007a783          	lw	a5,0(a5)
800068ec:	fc079ae3          	bnez	a5,800068c0 <pvPortMalloc+0xb0>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
800068f0:	fec42703          	lw	a4,-20(s0)
800068f4:	00034797          	auipc	a5,0x34
800068f8:	08878793          	addi	a5,a5,136 # 8003a97c <xEnd>
800068fc:	0ef70a63          	beq	a4,a5,800069f0 <pvPortMalloc+0x1e0>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
80006900:	fe842783          	lw	a5,-24(s0)
80006904:	0007a783          	lw	a5,0(a5)
80006908:	00800713          	li	a4,8
8000690c:	00e787b3          	add	a5,a5,a4
80006910:	fef42223          	sw	a5,-28(s0)

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
80006914:	fec42783          	lw	a5,-20(s0)
80006918:	0007a703          	lw	a4,0(a5)
8000691c:	fe842783          	lw	a5,-24(s0)
80006920:	00e7a023          	sw	a4,0(a5)

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
80006924:	fec42783          	lw	a5,-20(s0)
80006928:	0047a703          	lw	a4,4(a5)
8000692c:	fcc42783          	lw	a5,-52(s0)
80006930:	40f707b3          	sub	a5,a4,a5
80006934:	00800713          	li	a4,8
80006938:	00171713          	slli	a4,a4,0x1
8000693c:	08f77863          	bleu	a5,a4,800069cc <pvPortMalloc+0x1bc>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
80006940:	fec42703          	lw	a4,-20(s0)
80006944:	fcc42783          	lw	a5,-52(s0)
80006948:	00f707b3          	add	a5,a4,a5
8000694c:	fcf42e23          	sw	a5,-36(s0)

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
80006950:	fec42783          	lw	a5,-20(s0)
80006954:	0047a703          	lw	a4,4(a5)
80006958:	fcc42783          	lw	a5,-52(s0)
8000695c:	40f70733          	sub	a4,a4,a5
80006960:	fdc42783          	lw	a5,-36(s0)
80006964:	00e7a223          	sw	a4,4(a5)
					pxBlock->xBlockSize = xWantedSize;
80006968:	fec42783          	lw	a5,-20(s0)
8000696c:	fcc42703          	lw	a4,-52(s0)
80006970:	00e7a223          	sw	a4,4(a5)

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
80006974:	fdc42783          	lw	a5,-36(s0)
80006978:	0047a783          	lw	a5,4(a5)
8000697c:	fcf42c23          	sw	a5,-40(s0)
80006980:	00034797          	auipc	a5,0x34
80006984:	ff478793          	addi	a5,a5,-12 # 8003a974 <xStart>
80006988:	fef42023          	sw	a5,-32(s0)
8000698c:	0100006f          	j	8000699c <pvPortMalloc+0x18c>
80006990:	fe042783          	lw	a5,-32(s0)
80006994:	0007a783          	lw	a5,0(a5)
80006998:	fef42023          	sw	a5,-32(s0)
8000699c:	fe042783          	lw	a5,-32(s0)
800069a0:	0007a783          	lw	a5,0(a5)
800069a4:	0047a783          	lw	a5,4(a5)
800069a8:	fd842703          	lw	a4,-40(s0)
800069ac:	fee7e2e3          	bltu	a5,a4,80006990 <pvPortMalloc+0x180>
800069b0:	fe042783          	lw	a5,-32(s0)
800069b4:	0007a703          	lw	a4,0(a5)
800069b8:	fdc42783          	lw	a5,-36(s0)
800069bc:	00e7a023          	sw	a4,0(a5)
800069c0:	fe042783          	lw	a5,-32(s0)
800069c4:	fdc42703          	lw	a4,-36(s0)
800069c8:	00e7a023          	sw	a4,0(a5)
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
800069cc:	0001a797          	auipc	a5,0x1a
800069d0:	48c78793          	addi	a5,a5,1164 # 80020e58 <xFreeBytesRemaining>
800069d4:	0007a703          	lw	a4,0(a5)
800069d8:	fec42783          	lw	a5,-20(s0)
800069dc:	0047a783          	lw	a5,4(a5)
800069e0:	40f70733          	sub	a4,a4,a5
800069e4:	0001a797          	auipc	a5,0x1a
800069e8:	47478793          	addi	a5,a5,1140 # 80020e58 <xFreeBytesRemaining>
800069ec:	00e7a023          	sw	a4,0(a5)
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
800069f0:	d4cfc0ef          	jal	ra,80002f3c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
800069f4:	fe442783          	lw	a5,-28(s0)
800069f8:	00079463          	bnez	a5,80006a00 <pvPortMalloc+0x1f0>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
800069fc:	714000ef          	jal	ra,80007110 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
80006a00:	fe442783          	lw	a5,-28(s0)
}
80006a04:	00078513          	mv	a0,a5
80006a08:	03c12083          	lw	ra,60(sp)
80006a0c:	03812403          	lw	s0,56(sp)
80006a10:	04010113          	addi	sp,sp,64
80006a14:	00008067          	ret

80006a18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
80006a18:	fd010113          	addi	sp,sp,-48
80006a1c:	02112623          	sw	ra,44(sp)
80006a20:	02812423          	sw	s0,40(sp)
80006a24:	03010413          	addi	s0,sp,48
80006a28:	fca42e23          	sw	a0,-36(s0)
uint8_t *puc = ( uint8_t * ) pv;
80006a2c:	fdc42783          	lw	a5,-36(s0)
80006a30:	fef42423          	sw	a5,-24(s0)
BlockLink_t *pxLink;

	if( pv != NULL )
80006a34:	fdc42783          	lw	a5,-36(s0)
80006a38:	0a078263          	beqz	a5,80006adc <vPortFree+0xc4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
80006a3c:	00800793          	li	a5,8
80006a40:	40f007b3          	neg	a5,a5
80006a44:	fe842703          	lw	a4,-24(s0)
80006a48:	00f707b3          	add	a5,a4,a5
80006a4c:	fef42423          	sw	a5,-24(s0)

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
80006a50:	fe842783          	lw	a5,-24(s0)
80006a54:	fef42223          	sw	a5,-28(s0)

		vTaskSuspendAll();
80006a58:	cacfc0ef          	jal	ra,80002f04 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
80006a5c:	fe442783          	lw	a5,-28(s0)
80006a60:	0047a783          	lw	a5,4(a5)
80006a64:	fef42023          	sw	a5,-32(s0)
80006a68:	00034797          	auipc	a5,0x34
80006a6c:	f0c78793          	addi	a5,a5,-244 # 8003a974 <xStart>
80006a70:	fef42623          	sw	a5,-20(s0)
80006a74:	0100006f          	j	80006a84 <vPortFree+0x6c>
80006a78:	fec42783          	lw	a5,-20(s0)
80006a7c:	0007a783          	lw	a5,0(a5)
80006a80:	fef42623          	sw	a5,-20(s0)
80006a84:	fec42783          	lw	a5,-20(s0)
80006a88:	0007a783          	lw	a5,0(a5)
80006a8c:	0047a783          	lw	a5,4(a5)
80006a90:	fe042703          	lw	a4,-32(s0)
80006a94:	fee7e2e3          	bltu	a5,a4,80006a78 <vPortFree+0x60>
80006a98:	fec42783          	lw	a5,-20(s0)
80006a9c:	0007a703          	lw	a4,0(a5)
80006aa0:	fe442783          	lw	a5,-28(s0)
80006aa4:	00e7a023          	sw	a4,0(a5)
80006aa8:	fec42783          	lw	a5,-20(s0)
80006aac:	fe442703          	lw	a4,-28(s0)
80006ab0:	00e7a023          	sw	a4,0(a5)
			xFreeBytesRemaining += pxLink->xBlockSize;
80006ab4:	fe442783          	lw	a5,-28(s0)
80006ab8:	0047a703          	lw	a4,4(a5)
80006abc:	0001a797          	auipc	a5,0x1a
80006ac0:	39c78793          	addi	a5,a5,924 # 80020e58 <xFreeBytesRemaining>
80006ac4:	0007a783          	lw	a5,0(a5)
80006ac8:	00f70733          	add	a4,a4,a5
80006acc:	0001a797          	auipc	a5,0x1a
80006ad0:	38c78793          	addi	a5,a5,908 # 80020e58 <xFreeBytesRemaining>
80006ad4:	00e7a023          	sw	a4,0(a5)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
80006ad8:	c64fc0ef          	jal	ra,80002f3c <xTaskResumeAll>
	}
}
80006adc:	00000013          	nop
80006ae0:	02c12083          	lw	ra,44(sp)
80006ae4:	02812403          	lw	s0,40(sp)
80006ae8:	03010113          	addi	sp,sp,48
80006aec:	00008067          	ret

80006af0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
80006af0:	ff010113          	addi	sp,sp,-16
80006af4:	00812623          	sw	s0,12(sp)
80006af8:	01010413          	addi	s0,sp,16
	return xFreeBytesRemaining;
80006afc:	0001a797          	auipc	a5,0x1a
80006b00:	35c78793          	addi	a5,a5,860 # 80020e58 <xFreeBytesRemaining>
80006b04:	0007a783          	lw	a5,0(a5)
}
80006b08:	00078513          	mv	a0,a5
80006b0c:	00c12403          	lw	s0,12(sp)
80006b10:	01010113          	addi	sp,sp,16
80006b14:	00008067          	ret

80006b18 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
80006b18:	ff010113          	addi	sp,sp,-16
80006b1c:	00812623          	sw	s0,12(sp)
80006b20:	01010413          	addi	s0,sp,16
	/* This just exists to keep the linker quiet. */
}
80006b24:	00000013          	nop
80006b28:	00c12403          	lw	s0,12(sp)
80006b2c:	01010113          	addi	sp,sp,16
80006b30:	00008067          	ret

80006b34 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
80006b34:	fe010113          	addi	sp,sp,-32
80006b38:	00812e23          	sw	s0,28(sp)
80006b3c:	02010413          	addi	s0,sp,32
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
80006b40:	0001b797          	auipc	a5,0x1b
80006b44:	e3878793          	addi	a5,a5,-456 # 80021978 <ucHeap+0x4>
80006b48:	ffc7f793          	andi	a5,a5,-4
80006b4c:	fef42623          	sw	a5,-20(s0)

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
80006b50:	00034797          	auipc	a5,0x34
80006b54:	e2478793          	addi	a5,a5,-476 # 8003a974 <xStart>
80006b58:	fec42703          	lw	a4,-20(s0)
80006b5c:	00e7a023          	sw	a4,0(a5)
	xStart.xBlockSize = ( size_t ) 0;
80006b60:	00034797          	auipc	a5,0x34
80006b64:	e1478793          	addi	a5,a5,-492 # 8003a974 <xStart>
80006b68:	0007a223          	sw	zero,4(a5)

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
80006b6c:	00034797          	auipc	a5,0x34
80006b70:	e1078793          	addi	a5,a5,-496 # 8003a97c <xEnd>
80006b74:	00019737          	lui	a4,0x19
80006b78:	ffc70713          	addi	a4,a4,-4 # 18ffc <_HEAP_SIZE+0x17ffc>
80006b7c:	00e7a223          	sw	a4,4(a5)
	xEnd.pxNextFreeBlock = NULL;
80006b80:	00034797          	auipc	a5,0x34
80006b84:	dfc78793          	addi	a5,a5,-516 # 8003a97c <xEnd>
80006b88:	0007a023          	sw	zero,0(a5)

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
80006b8c:	fec42783          	lw	a5,-20(s0)
80006b90:	fef42423          	sw	a5,-24(s0)
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
80006b94:	fe842783          	lw	a5,-24(s0)
80006b98:	00019737          	lui	a4,0x19
80006b9c:	ffc70713          	addi	a4,a4,-4 # 18ffc <_HEAP_SIZE+0x17ffc>
80006ba0:	00e7a223          	sw	a4,4(a5)
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
80006ba4:	fe842783          	lw	a5,-24(s0)
80006ba8:	00034717          	auipc	a4,0x34
80006bac:	dd470713          	addi	a4,a4,-556 # 8003a97c <xEnd>
80006bb0:	00e7a023          	sw	a4,0(a5)
}
80006bb4:	00000013          	nop
80006bb8:	01c12403          	lw	s0,28(sp)
80006bbc:	02010113          	addi	sp,sp,32
80006bc0:	00008067          	ret

80006bc4 <_sbrk>:
int _isatty(int fd);
int _kill(int pid,int sig);
int _getpid(int n);

void* _sbrk (int nbytes)
{
80006bc4:	fe010113          	addi	sp,sp,-32
80006bc8:	00112e23          	sw	ra,28(sp)
80006bcc:	00812c23          	sw	s0,24(sp)
80006bd0:	02010413          	addi	s0,sp,32
80006bd4:	fea42623          	sw	a0,-20(s0)
  (void)nbytes;
  errno = ENOMEM;
80006bd8:	161010ef          	jal	ra,80008538 <__errno>
80006bdc:	00050713          	mv	a4,a0
80006be0:	00c00793          	li	a5,12
80006be4:	00f72023          	sw	a5,0(a4)
  return  (void *) -1;
80006be8:	fff00793          	li	a5,-1
}
80006bec:	00078513          	mv	a0,a5
80006bf0:	01c12083          	lw	ra,28(sp)
80006bf4:	01812403          	lw	s0,24(sp)
80006bf8:	02010113          	addi	sp,sp,32
80006bfc:	00008067          	ret

80006c00 <_write>:


int _write(int file, char *ptr, int len) {
80006c00:	fd010113          	addi	sp,sp,-48
80006c04:	02112623          	sw	ra,44(sp)
80006c08:	02812423          	sw	s0,40(sp)
80006c0c:	03010413          	addi	s0,sp,48
80006c10:	fca42e23          	sw	a0,-36(s0)
80006c14:	fcb42c23          	sw	a1,-40(s0)
80006c18:	fcc42a23          	sw	a2,-44(s0)
  int todo;
  (void)file;
//#ifdef CONSOLE_UART
  for (todo = 0; todo < len; todo++) {
80006c1c:	fe042623          	sw	zero,-20(s0)
80006c20:	0280006f          	j	80006c48 <_write+0x48>
    ns16550_txchar (*ptr++);
80006c24:	fd842783          	lw	a5,-40(s0)
80006c28:	00178713          	addi	a4,a5,1
80006c2c:	fce42c23          	sw	a4,-40(s0)
80006c30:	0007c783          	lbu	a5,0(a5)
80006c34:	00078513          	mv	a0,a5
80006c38:	364000ef          	jal	ra,80006f9c <ns16550_txchar>
  for (todo = 0; todo < len; todo++) {
80006c3c:	fec42783          	lw	a5,-20(s0)
80006c40:	00178793          	addi	a5,a5,1
80006c44:	fef42623          	sw	a5,-20(s0)
80006c48:	fec42703          	lw	a4,-20(s0)
80006c4c:	fd442783          	lw	a5,-44(s0)
80006c50:	fcf74ae3          	blt	a4,a5,80006c24 <_write+0x24>
  }
//#endif
  return len;
80006c54:	fd442783          	lw	a5,-44(s0)
}
80006c58:	00078513          	mv	a0,a5
80006c5c:	02c12083          	lw	ra,44(sp)
80006c60:	02812403          	lw	s0,40(sp)
80006c64:	03010113          	addi	sp,sp,48
80006c68:	00008067          	ret

80006c6c <_close>:

int _close(int fd)
{
80006c6c:	fe010113          	addi	sp,sp,-32
80006c70:	00112e23          	sw	ra,28(sp)
80006c74:	00812c23          	sw	s0,24(sp)
80006c78:	02010413          	addi	s0,sp,32
80006c7c:	fea42623          	sw	a0,-20(s0)
  (void)fd;
  errno = EBADF;
80006c80:	0b9010ef          	jal	ra,80008538 <__errno>
80006c84:	00050713          	mv	a4,a0
80006c88:	00900793          	li	a5,9
80006c8c:	00f72023          	sw	a5,0(a4)
  return -1;
80006c90:	fff00793          	li	a5,-1
}
80006c94:	00078513          	mv	a0,a5
80006c98:	01c12083          	lw	ra,28(sp)
80006c9c:	01812403          	lw	s0,24(sp)
80006ca0:	02010113          	addi	sp,sp,32
80006ca4:	00008067          	ret

80006ca8 <_lseek>:

long _lseek(int fd,long offset,int origin)
{
80006ca8:	fe010113          	addi	sp,sp,-32
80006cac:	00112e23          	sw	ra,28(sp)
80006cb0:	00812c23          	sw	s0,24(sp)
80006cb4:	02010413          	addi	s0,sp,32
80006cb8:	fea42623          	sw	a0,-20(s0)
80006cbc:	feb42423          	sw	a1,-24(s0)
80006cc0:	fec42223          	sw	a2,-28(s0)
  (void)fd;
  (void)offset;
  (void)origin;
  errno = EBADF;
80006cc4:	075010ef          	jal	ra,80008538 <__errno>
80006cc8:	00050713          	mv	a4,a0
80006ccc:	00900793          	li	a5,9
80006cd0:	00f72023          	sw	a5,0(a4)
  return -1;
80006cd4:	fff00793          	li	a5,-1
}
80006cd8:	00078513          	mv	a0,a5
80006cdc:	01c12083          	lw	ra,28(sp)
80006ce0:	01812403          	lw	s0,24(sp)
80006ce4:	02010113          	addi	sp,sp,32
80006ce8:	00008067          	ret

80006cec <_read>:

int _read(int fd,void *buffer,unsigned int count)
{
80006cec:	fe010113          	addi	sp,sp,-32
80006cf0:	00112e23          	sw	ra,28(sp)
80006cf4:	00812c23          	sw	s0,24(sp)
80006cf8:	02010413          	addi	s0,sp,32
80006cfc:	fea42623          	sw	a0,-20(s0)
80006d00:	feb42423          	sw	a1,-24(s0)
80006d04:	fec42223          	sw	a2,-28(s0)
  (void)fd;
  (void)buffer;
  (void)count;
  errno = EBADF;
80006d08:	031010ef          	jal	ra,80008538 <__errno>
80006d0c:	00050713          	mv	a4,a0
80006d10:	00900793          	li	a5,9
80006d14:	00f72023          	sw	a5,0(a4)
  return -1;
80006d18:	fff00793          	li	a5,-1
}
80006d1c:	00078513          	mv	a0,a5
80006d20:	01c12083          	lw	ra,28(sp)
80006d24:	01812403          	lw	s0,24(sp)
80006d28:	02010113          	addi	sp,sp,32
80006d2c:	00008067          	ret

80006d30 <_fstat>:

int _fstat(int fd, void *buffer)
{
80006d30:	fe010113          	addi	sp,sp,-32
80006d34:	00112e23          	sw	ra,28(sp)
80006d38:	00812c23          	sw	s0,24(sp)
80006d3c:	02010413          	addi	s0,sp,32
80006d40:	fea42623          	sw	a0,-20(s0)
80006d44:	feb42423          	sw	a1,-24(s0)
  (void)fd;
  (void)buffer;
  errno = EBADF;
80006d48:	7f0010ef          	jal	ra,80008538 <__errno>
80006d4c:	00050713          	mv	a4,a0
80006d50:	00900793          	li	a5,9
80006d54:	00f72023          	sw	a5,0(a4)
  return -1;
80006d58:	fff00793          	li	a5,-1
}
80006d5c:	00078513          	mv	a0,a5
80006d60:	01c12083          	lw	ra,28(sp)
80006d64:	01812403          	lw	s0,24(sp)
80006d68:	02010113          	addi	sp,sp,32
80006d6c:	00008067          	ret

80006d70 <_isatty>:

int _isatty(int fd)
{
80006d70:	fe010113          	addi	sp,sp,-32
80006d74:	00112e23          	sw	ra,28(sp)
80006d78:	00812c23          	sw	s0,24(sp)
80006d7c:	02010413          	addi	s0,sp,32
80006d80:	fea42623          	sw	a0,-20(s0)
  (void)fd;
  errno = EBADF;
80006d84:	7b4010ef          	jal	ra,80008538 <__errno>
80006d88:	00050713          	mv	a4,a0
80006d8c:	00900793          	li	a5,9
80006d90:	00f72023          	sw	a5,0(a4)
  return 0;
80006d94:	00000793          	li	a5,0
}
80006d98:	00078513          	mv	a0,a5
80006d9c:	01c12083          	lw	ra,28(sp)
80006da0:	01812403          	lw	s0,24(sp)
80006da4:	02010113          	addi	sp,sp,32
80006da8:	00008067          	ret

80006dac <_kill>:

int _kill(int pid,int sig)
{
80006dac:	fe010113          	addi	sp,sp,-32
80006db0:	00112e23          	sw	ra,28(sp)
80006db4:	00812c23          	sw	s0,24(sp)
80006db8:	02010413          	addi	s0,sp,32
80006dbc:	fea42623          	sw	a0,-20(s0)
80006dc0:	feb42423          	sw	a1,-24(s0)
  (void)pid;
  (void)sig;
  errno = EBADF;
80006dc4:	774010ef          	jal	ra,80008538 <__errno>
80006dc8:	00050713          	mv	a4,a0
80006dcc:	00900793          	li	a5,9
80006dd0:	00f72023          	sw	a5,0(a4)
  return -1;
80006dd4:	fff00793          	li	a5,-1
}
80006dd8:	00078513          	mv	a0,a5
80006ddc:	01c12083          	lw	ra,28(sp)
80006de0:	01812403          	lw	s0,24(sp)
80006de4:	02010113          	addi	sp,sp,32
80006de8:	00008067          	ret

80006dec <_getpid>:

int _getpid(int n)
{
80006dec:	fe010113          	addi	sp,sp,-32
80006df0:	00812e23          	sw	s0,28(sp)
80006df4:	02010413          	addi	s0,sp,32
80006df8:	fea42623          	sw	a0,-20(s0)
  (void)n;
  return 1;
80006dfc:	00100793          	li	a5,1
}
80006e00:	00078513          	mv	a0,a5
80006e04:	01c12403          	lw	s0,28(sp)
80006e08:	02010113          	addi	sp,sp,32
80006e0c:	00008067          	ret

80006e10 <ns16550_init>:
static struct ns16550_pio * pio = (void*)NS16550_BASE;

#ifdef CONSOLE_UART
__attribute__ ((constructor))
int ns16550_init(void)
{
80006e10:	fe010113          	addi	sp,sp,-32
80006e14:	00812e23          	sw	s0,28(sp)
80006e18:	02010413          	addi	s0,sp,32
  uint32_t divisor;

  pio->ier = 0;
80006e1c:	0001a797          	auipc	a5,0x1a
80006e20:	04078793          	addi	a5,a5,64 # 80020e5c <pio>
80006e24:	0007a783          	lw	a5,0(a5)
80006e28:	00078423          	sb	zero,8(a5)

  divisor = NS16550_CLOCK_RATE / (16 * DEFAULT_BAUDRATE);
80006e2c:	01a00793          	li	a5,26
80006e30:	fef42623          	sw	a5,-20(s0)
  pio->lcr |= LCR_DLAB;
80006e34:	0001a797          	auipc	a5,0x1a
80006e38:	02878793          	addi	a5,a5,40 # 80020e5c <pio>
80006e3c:	0007a783          	lw	a5,0(a5)
80006e40:	0187c783          	lbu	a5,24(a5)
80006e44:	0ff7f713          	andi	a4,a5,255
80006e48:	0001a797          	auipc	a5,0x1a
80006e4c:	01478793          	addi	a5,a5,20 # 80020e5c <pio>
80006e50:	0007a783          	lw	a5,0(a5)
80006e54:	f8076713          	ori	a4,a4,-128
80006e58:	0ff77713          	andi	a4,a4,255
80006e5c:	00e78c23          	sb	a4,24(a5)
  pio->dll = divisor & 0xff;
80006e60:	0001a797          	auipc	a5,0x1a
80006e64:	ffc78793          	addi	a5,a5,-4 # 80020e5c <pio>
80006e68:	0007a783          	lw	a5,0(a5)
80006e6c:	fec42703          	lw	a4,-20(s0)
80006e70:	0ff77713          	andi	a4,a4,255
80006e74:	00e78023          	sb	a4,0(a5)
  pio->dlm = (divisor >> 8) & 0xff;
80006e78:	fec42783          	lw	a5,-20(s0)
80006e7c:	0087d713          	srli	a4,a5,0x8
80006e80:	0001a797          	auipc	a5,0x1a
80006e84:	fdc78793          	addi	a5,a5,-36 # 80020e5c <pio>
80006e88:	0007a783          	lw	a5,0(a5)
80006e8c:	0ff77713          	andi	a4,a4,255
80006e90:	00e78423          	sb	a4,8(a5)
  pio->lcr &= ~LCR_DLAB;
80006e94:	0001a797          	auipc	a5,0x1a
80006e98:	fc878793          	addi	a5,a5,-56 # 80020e5c <pio>
80006e9c:	0007a783          	lw	a5,0(a5)
80006ea0:	0187c783          	lbu	a5,24(a5)
80006ea4:	0ff7f713          	andi	a4,a5,255
80006ea8:	0001a797          	auipc	a5,0x1a
80006eac:	fb478793          	addi	a5,a5,-76 # 80020e5c <pio>
80006eb0:	0007a783          	lw	a5,0(a5)
80006eb4:	07f77713          	andi	a4,a4,127
80006eb8:	0ff77713          	andi	a4,a4,255
80006ebc:	00e78c23          	sb	a4,24(a5)

  pio->lcr = LCR_WLS8;
80006ec0:	0001a797          	auipc	a5,0x1a
80006ec4:	f9c78793          	addi	a5,a5,-100 # 80020e5c <pio>
80006ec8:	0007a783          	lw	a5,0(a5)
80006ecc:	00300713          	li	a4,3
80006ed0:	00e78c23          	sb	a4,24(a5)
  pio->fcr = FCR_FE;
80006ed4:	0001a797          	auipc	a5,0x1a
80006ed8:	f8878793          	addi	a5,a5,-120 # 80020e5c <pio>
80006edc:	0007a783          	lw	a5,0(a5)
80006ee0:	00100713          	li	a4,1
80006ee4:	00e78823          	sb	a4,16(a5)
  pio->mcr = MCR_RTS;
80006ee8:	0001a797          	auipc	a5,0x1a
80006eec:	f7478793          	addi	a5,a5,-140 # 80020e5c <pio>
80006ef0:	0007a783          	lw	a5,0(a5)
80006ef4:	00200713          	li	a4,2
80006ef8:	02e78023          	sb	a4,32(a5)

  return 0;
80006efc:	00000793          	li	a5,0
}
80006f00:	00078513          	mv	a0,a5
80006f04:	01c12403          	lw	s0,28(sp)
80006f08:	02010113          	addi	sp,sp,32
80006f0c:	00008067          	ret

80006f10 <ns16550_rxready>:
#endif


int ns16550_rxready(void)
{
80006f10:	ff010113          	addi	sp,sp,-16
80006f14:	00812623          	sw	s0,12(sp)
80006f18:	01010413          	addi	s0,sp,16
  return ((pio->lsr & LSR_DR) != 0);
80006f1c:	0001a797          	auipc	a5,0x1a
80006f20:	f4078793          	addi	a5,a5,-192 # 80020e5c <pio>
80006f24:	0007a783          	lw	a5,0(a5)
80006f28:	0287c783          	lbu	a5,40(a5)
80006f2c:	0ff7f793          	andi	a5,a5,255
80006f30:	0017f793          	andi	a5,a5,1
80006f34:	00f037b3          	snez	a5,a5
80006f38:	0ff7f793          	andi	a5,a5,255
}
80006f3c:	00078513          	mv	a0,a5
80006f40:	00c12403          	lw	s0,12(sp)
80006f44:	01010113          	addi	sp,sp,16
80006f48:	00008067          	ret

80006f4c <ns16550_rxchar>:


int ns16550_rxchar(void)
{
80006f4c:	ff010113          	addi	sp,sp,-16
80006f50:	00812623          	sw	s0,12(sp)
80006f54:	01010413          	addi	s0,sp,16
  while ((pio->lsr & LSR_DR) == 0)
80006f58:	00000013          	nop
80006f5c:	0001a797          	auipc	a5,0x1a
80006f60:	f0078793          	addi	a5,a5,-256 # 80020e5c <pio>
80006f64:	0007a783          	lw	a5,0(a5)
80006f68:	0287c783          	lbu	a5,40(a5)
80006f6c:	0ff7f793          	andi	a5,a5,255
80006f70:	0017f793          	andi	a5,a5,1
80006f74:	fe0784e3          	beqz	a5,80006f5c <ns16550_rxchar+0x10>
    ;  // nothing

  return pio->rbr;
80006f78:	0001a797          	auipc	a5,0x1a
80006f7c:	ee478793          	addi	a5,a5,-284 # 80020e5c <pio>
80006f80:	0007a783          	lw	a5,0(a5)
80006f84:	0007c783          	lbu	a5,0(a5)
80006f88:	0ff7f793          	andi	a5,a5,255
}
80006f8c:	00078513          	mv	a0,a5
80006f90:	00c12403          	lw	s0,12(sp)
80006f94:	01010113          	addi	sp,sp,16
80006f98:	00008067          	ret

80006f9c <ns16550_txchar>:


int ns16550_txchar(int c)
{
80006f9c:	fe010113          	addi	sp,sp,-32
80006fa0:	00812e23          	sw	s0,28(sp)
80006fa4:	02010413          	addi	s0,sp,32
80006fa8:	fea42623          	sw	a0,-20(s0)
  while ((pio->lsr & LSR_THRE) == 0)
80006fac:	00000013          	nop
80006fb0:	0001a797          	auipc	a5,0x1a
80006fb4:	eac78793          	addi	a5,a5,-340 # 80020e5c <pio>
80006fb8:	0007a783          	lw	a5,0(a5)
80006fbc:	0287c783          	lbu	a5,40(a5)
80006fc0:	0ff7f793          	andi	a5,a5,255
80006fc4:	0207f793          	andi	a5,a5,32
80006fc8:	fe0784e3          	beqz	a5,80006fb0 <ns16550_txchar+0x14>
    ;  // nothing

  pio->thr = c;
80006fcc:	0001a797          	auipc	a5,0x1a
80006fd0:	e9078793          	addi	a5,a5,-368 # 80020e5c <pio>
80006fd4:	0007a783          	lw	a5,0(a5)
80006fd8:	fec42703          	lw	a4,-20(s0)
80006fdc:	0ff77713          	andi	a4,a4,255
80006fe0:	00e78023          	sb	a4,0(a5)

  return c;
80006fe4:	fec42783          	lw	a5,-20(s0)
}
80006fe8:	00078513          	mv	a0,a5
80006fec:	01c12403          	lw	s0,28(sp)
80006ff0:	02010113          	addi	sp,sp,32
80006ff4:	00008067          	ret

80006ff8 <ns16550_flush>:


void ns16550_flush(void)
{
80006ff8:	ff010113          	addi	sp,sp,-16
80006ffc:	00812623          	sw	s0,12(sp)
80007000:	01010413          	addi	s0,sp,16
  while ((pio->lsr & LSR_TEMT) == 0)
80007004:	00000013          	nop
80007008:	0001a797          	auipc	a5,0x1a
8000700c:	e5478793          	addi	a5,a5,-428 # 80020e5c <pio>
80007010:	0007a783          	lw	a5,0(a5)
80007014:	0287c783          	lbu	a5,40(a5)
80007018:	0ff7f793          	andi	a5,a5,255
8000701c:	0407f793          	andi	a5,a5,64
80007020:	fe0784e3          	beqz	a5,80007008 <ns16550_flush+0x10>
    ;  // nothing
}
80007024:	00000013          	nop
80007028:	00c12403          	lw	s0,12(sp)
8000702c:	01010113          	addi	sp,sp,16
80007030:	00008067          	ret

80007034 <main>:
/*-----------------------------------------------------------*/
//volatile int wait = 1;


int main( void )
{
80007034:	fe010113          	addi	sp,sp,-32
80007038:	00112e23          	sw	ra,28(sp)
8000703c:	00812c23          	sw	s0,24(sp)
80007040:	02010413          	addi	s0,sp,32
TimerHandle_t xCheckTimer = NULL;
80007044:	fe042623          	sw	zero,-20(s0)


	ns16550_init();
80007048:	dc9ff0ef          	jal	ra,80006e10 <ns16550_init>
	//vStartCountingSemaphoreTasks();
	//vStartRecursiveMutexTasks();

	/* Create the software timer that performs the 'check' functionality,
	as described at the top of this file. */
	xCheckTimer = xTimerCreate( "CheckTimer",					/* A text name, purely to help debugging. */
8000704c:	00000717          	auipc	a4,0x0
80007050:	06c70713          	addi	a4,a4,108 # 800070b8 <prvCheckTimerCallback>
80007054:	00000693          	li	a3,0
80007058:	00100613          	li	a2,1
8000705c:	000017b7          	lui	a5,0x1
80007060:	bb878593          	addi	a1,a5,-1096 # bb8 <_HEAP_SIZE-0x448>
80007064:	00019517          	auipc	a0,0x19
80007068:	00450513          	addi	a0,a0,4 # 80020068 <__rodata_start+0x68>
8000706c:	c50fe0ef          	jal	ra,800054bc <xTimerCreate>
80007070:	fea42623          	sw	a0,-20(s0)

	/* If the software timer was created successfully, start it.  It won't
	actually start running until the scheduler starts.  A block time of
	zero is used in this call, although any value could be used as the block
	time will be ignored because the scheduler has not started yet. */
	if( xCheckTimer != NULL )
80007074:	fec42783          	lw	a5,-20(s0)
80007078:	02078263          	beqz	a5,8000709c <main+0x68>
	{
		xTimerStart( xCheckTimer, mainDONT_BLOCK );
8000707c:	89cfc0ef          	jal	ra,80003118 <xTaskGetTickCount>
80007080:	00050793          	mv	a5,a0
80007084:	00000713          	li	a4,0
80007088:	00000693          	li	a3,0
8000708c:	00078613          	mv	a2,a5
80007090:	00100593          	li	a1,1
80007094:	fec42503          	lw	a0,-20(s0)
80007098:	ce4fe0ef          	jal	ra,8000557c <xTimerGenericCommand>
	}


	/* Start the kernel.  From here on, only tasks and interrupts will run. */
  //printf("starting scheduler\n");
	vTaskStartScheduler();
8000709c:	d75fb0ef          	jal	ra,80002e10 <vTaskStartScheduler>

  //printf("just hanging here\n");

	/* Exit FreeRTOS */
	return 0;
800070a0:	00000793          	li	a5,0
}
800070a4:	00078513          	mv	a0,a5
800070a8:	01c12083          	lw	ra,28(sp)
800070ac:	01812403          	lw	s0,24(sp)
800070b0:	02010113          	addi	sp,sp,32
800070b4:	00008067          	ret

800070b8 <prvCheckTimerCallback>:
/*-----------------------------------------------------------*/

/* See the description at the top of this file. */
static void prvCheckTimerCallback(__attribute__ ((unused)) TimerHandle_t xTimer )
{
800070b8:	fd010113          	addi	sp,sp,-48
800070bc:	02112623          	sw	ra,44(sp)
800070c0:	02812423          	sw	s0,40(sp)
800070c4:	03010413          	addi	s0,sp,48
800070c8:	fca42e23          	sw	a0,-36(s0)
static int count = 0;
unsigned long ulErrorFound = pdFALSE;
800070cc:	fe042623          	sw	zero,-20(s0)

printf("[%d] Timer callback! \r\n", count++);
800070d0:	00034797          	auipc	a5,0x34
800070d4:	8b878793          	addi	a5,a5,-1864 # 8003a988 <count.2936>
800070d8:	0007a783          	lw	a5,0(a5)
800070dc:	00178693          	addi	a3,a5,1
800070e0:	00034717          	auipc	a4,0x34
800070e4:	8a870713          	addi	a4,a4,-1880 # 8003a988 <count.2936>
800070e8:	00d72023          	sw	a3,0(a4)
800070ec:	00078593          	mv	a1,a5
800070f0:	00019517          	auipc	a0,0x19
800070f4:	f8450513          	addi	a0,a0,-124 # 80020074 <__rodata_start+0x74>
800070f8:	650010ef          	jal	ra,80008748 <printf>
*/
    /* Do _not_ stop the scheduler; this would halt the system, but was left for reference on how to do so */
	/* Stop scheduler */
//    vTaskEndScheduler();

}
800070fc:	00000013          	nop
80007100:	02c12083          	lw	ra,44(sp)
80007104:	02812403          	lw	s0,40(sp)
80007108:	03010113          	addi	sp,sp,48
8000710c:	00008067          	ret

80007110 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
80007110:	ff010113          	addi	sp,sp,-16
80007114:	00812623          	sw	s0,12(sp)
80007118:	01010413          	addi	s0,sp,16
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
8000711c:	30007073          	csrci	mstatus,0
	for( ;; );
80007120:	0000006f          	j	80007120 <vApplicationMallocFailedHook+0x10>

80007124 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
80007124:	ff010113          	addi	sp,sp,-16
80007128:	00812623          	sw	s0,12(sp)
8000712c:	01010413          	addi	s0,sp,16
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
80007130:	00000013          	nop
80007134:	00c12403          	lw	s0,12(sp)
80007138:	01010113          	addi	sp,sp,16
8000713c:	00008067          	ret

80007140 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
80007140:	fe010113          	addi	sp,sp,-32
80007144:	00812e23          	sw	s0,28(sp)
80007148:	02010413          	addi	s0,sp,32
8000714c:	fea42623          	sw	a0,-20(s0)
80007150:	feb42423          	sw	a1,-24(s0)
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
80007154:	30007073          	csrci	mstatus,0
	for( ;; );
80007158:	0000006f          	j	80007158 <vApplicationStackOverflowHook+0x18>

8000715c <vCreateBlockTimeTasks>:
static void vSecondaryBlockTimeTestTask( void *pvParameters );

/*-----------------------------------------------------------*/

void vCreateBlockTimeTasks( void )
{
8000715c:	ff010113          	addi	sp,sp,-16
80007160:	00112623          	sw	ra,12(sp)
80007164:	00812423          	sw	s0,8(sp)
80007168:	01010413          	addi	s0,sp,16
	/* Create the queue on which the two tasks block. */
    xTestQueue = xQueueCreate( bktQUEUE_LENGTH, sizeof( BaseType_t ) );
8000716c:	00000613          	li	a2,0
80007170:	00400593          	li	a1,4
80007174:	00500513          	li	a0,5
80007178:	a01f90ef          	jal	ra,80000b78 <xQueueGenericCreate>
8000717c:	00050713          	mv	a4,a0
80007180:	00034797          	auipc	a5,0x34
80007184:	80c78793          	addi	a5,a5,-2036 # 8003a98c <xTestQueue>
80007188:	00e7a023          	sw	a4,0(a5)
	in use.  The queue registry is provided as a means for kernel aware
	debuggers to locate queues and has no purpose if a kernel aware debugger
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
	defined to be less than 1. */
	vQueueAddToRegistry( xTestQueue, "Block_Time_Queue" );
8000718c:	00034797          	auipc	a5,0x34
80007190:	80078793          	addi	a5,a5,-2048 # 8003a98c <xTestQueue>
80007194:	0007a783          	lw	a5,0(a5)
80007198:	00019597          	auipc	a1,0x19
8000719c:	ef458593          	addi	a1,a1,-268 # 8002008c <__rodata_start+0x8c>
800071a0:	00078513          	mv	a0,a5
800071a4:	d51fa0ef          	jal	ra,80001ef4 <vQueueAddToRegistry>

	/* Create the two test tasks. */
	xTaskCreate( vPrimaryBlockTimeTestTask, "BTest1", configMINIMAL_STACK_SIZE, NULL, bktPRIMARY_PRIORITY, NULL );
800071a8:	00000893          	li	a7,0
800071ac:	00000813          	li	a6,0
800071b0:	00000793          	li	a5,0
800071b4:	00200713          	li	a4,2
800071b8:	00000693          	li	a3,0
800071bc:	40000613          	li	a2,1024
800071c0:	00019597          	auipc	a1,0x19
800071c4:	ee058593          	addi	a1,a1,-288 # 800200a0 <__rodata_start+0xa0>
800071c8:	00000517          	auipc	a0,0x0
800071cc:	05050513          	addi	a0,a0,80 # 80007218 <vPrimaryBlockTimeTestTask>
800071d0:	ed9fa0ef          	jal	ra,800020a8 <xTaskGenericCreate>
	xTaskCreate( vSecondaryBlockTimeTestTask, "BTest2", configMINIMAL_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
800071d4:	00000893          	li	a7,0
800071d8:	00000813          	li	a6,0
800071dc:	00033797          	auipc	a5,0x33
800071e0:	7b478793          	addi	a5,a5,1972 # 8003a990 <xSecondary>
800071e4:	00100713          	li	a4,1
800071e8:	00000693          	li	a3,0
800071ec:	40000613          	li	a2,1024
800071f0:	00019597          	auipc	a1,0x19
800071f4:	eb858593          	addi	a1,a1,-328 # 800200a8 <__rodata_start+0xa8>
800071f8:	00000517          	auipc	a0,0x0
800071fc:	5c450513          	addi	a0,a0,1476 # 800077bc <vSecondaryBlockTimeTestTask>
80007200:	ea9fa0ef          	jal	ra,800020a8 <xTaskGenericCreate>
}
80007204:	00000013          	nop
80007208:	00c12083          	lw	ra,12(sp)
8000720c:	00812403          	lw	s0,8(sp)
80007210:	01010113          	addi	sp,sp,16
80007214:	00008067          	ret

80007218 <vPrimaryBlockTimeTestTask>:
/*-----------------------------------------------------------*/

static void vPrimaryBlockTimeTestTask( void *pvParameters )
{
80007218:	fc010113          	addi	sp,sp,-64
8000721c:	02112e23          	sw	ra,60(sp)
80007220:	02812c23          	sw	s0,56(sp)
80007224:	04010413          	addi	s0,sp,64
80007228:	fca42623          	sw	a0,-52(s0)
	{
		/*********************************************************************
        Test 1

        Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
8000722c:	fe042023          	sw	zero,-32(s0)
80007230:	0b40006f          	j	800072e4 <vPrimaryBlockTimeTestTask+0xcc>
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
80007234:	fe042783          	lw	a5,-32(s0)
80007238:	00a00713          	li	a4,10
8000723c:	00f717b3          	sll	a5,a4,a5
80007240:	fef42623          	sw	a5,-20(s0)

			xTimeWhenBlocking = xTaskGetTickCount();
80007244:	ed5fb0ef          	jal	ra,80003118 <xTaskGetTickCount>
80007248:	fea42423          	sw	a0,-24(s0)

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
8000724c:	00033797          	auipc	a5,0x33
80007250:	74078793          	addi	a5,a5,1856 # 8003a98c <xTestQueue>
80007254:	0007a783          	lw	a5,0(a5)
80007258:	fdc40713          	addi	a4,s0,-36
8000725c:	00000693          	li	a3,0
80007260:	fec42603          	lw	a2,-20(s0)
80007264:	00070593          	mv	a1,a4
80007268:	00078513          	mv	a0,a5
8000726c:	9bcfa0ef          	jal	ra,80001428 <xQueueGenericReceive>
80007270:	00050793          	mv	a5,a0
80007274:	00078a63          	beqz	a5,80007288 <vPrimaryBlockTimeTestTask+0x70>
			{
				xErrorOccurred = pdTRUE;
80007278:	00033797          	auipc	a5,0x33
8000727c:	72478793          	addi	a5,a5,1828 # 8003a99c <xErrorOccurred>
80007280:	00100713          	li	a4,1
80007284:	00e7a023          	sw	a4,0(a5)
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
80007288:	e91fb0ef          	jal	ra,80003118 <xTaskGetTickCount>
8000728c:	00050713          	mv	a4,a0
80007290:	fe842783          	lw	a5,-24(s0)
80007294:	40f707b3          	sub	a5,a4,a5
80007298:	fef42223          	sw	a5,-28(s0)

			if( xBlockedTime < xTimeToBlock )
8000729c:	fe442703          	lw	a4,-28(s0)
800072a0:	fec42783          	lw	a5,-20(s0)
800072a4:	00f77a63          	bleu	a5,a4,800072b8 <vPrimaryBlockTimeTestTask+0xa0>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
800072a8:	00033797          	auipc	a5,0x33
800072ac:	6f478793          	addi	a5,a5,1780 # 8003a99c <xErrorOccurred>
800072b0:	00100713          	li	a4,1
800072b4:	00e7a023          	sw	a4,0(a5)
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
800072b8:	fec42783          	lw	a5,-20(s0)
800072bc:	00f78793          	addi	a5,a5,15
800072c0:	fe442703          	lw	a4,-28(s0)
800072c4:	00e7fa63          	bleu	a4,a5,800072d8 <vPrimaryBlockTimeTestTask+0xc0>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
800072c8:	00033797          	auipc	a5,0x33
800072cc:	6d478793          	addi	a5,a5,1748 # 8003a99c <xErrorOccurred>
800072d0:	00100713          	li	a4,1
800072d4:	00e7a023          	sw	a4,0(a5)
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
800072d8:	fe042783          	lw	a5,-32(s0)
800072dc:	00178793          	addi	a5,a5,1
800072e0:	fef42023          	sw	a5,-32(s0)
800072e4:	fe042703          	lw	a4,-32(s0)
800072e8:	00400793          	li	a5,4
800072ec:	f4e7d4e3          	ble	a4,a5,80007234 <vPrimaryBlockTimeTestTask+0x1c>
        Test 2

        Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
800072f0:	fe042023          	sw	zero,-32(s0)
800072f4:	0500006f          	j	80007344 <vPrimaryBlockTimeTestTask+0x12c>
		{
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
800072f8:	00033797          	auipc	a5,0x33
800072fc:	69478793          	addi	a5,a5,1684 # 8003a98c <xTestQueue>
80007300:	0007a783          	lw	a5,0(a5)
80007304:	fe040713          	addi	a4,s0,-32
80007308:	00000693          	li	a3,0
8000730c:	00000613          	li	a2,0
80007310:	00070593          	mv	a1,a4
80007314:	00078513          	mv	a0,a5
80007318:	c21f90ef          	jal	ra,80000f38 <xQueueGenericSend>
8000731c:	00050713          	mv	a4,a0
80007320:	00100793          	li	a5,1
80007324:	00f70a63          	beq	a4,a5,80007338 <vPrimaryBlockTimeTestTask+0x120>
			{
				xErrorOccurred = pdTRUE;
80007328:	00033797          	auipc	a5,0x33
8000732c:	67478793          	addi	a5,a5,1652 # 8003a99c <xErrorOccurred>
80007330:	00100713          	li	a4,1
80007334:	00e7a023          	sw	a4,0(a5)
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
80007338:	fe042783          	lw	a5,-32(s0)
8000733c:	00178793          	addi	a5,a5,1
80007340:	fef42023          	sw	a5,-32(s0)
80007344:	fe042703          	lw	a4,-32(s0)
80007348:	00400793          	li	a5,4
8000734c:	fae7d6e3          	ble	a4,a5,800072f8 <vPrimaryBlockTimeTestTask+0xe0>
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
80007350:	fe042023          	sw	zero,-32(s0)
80007354:	0b40006f          	j	80007408 <vPrimaryBlockTimeTestTask+0x1f0>
		{
			/* The queue is full. Attempt to write to the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
80007358:	fe042783          	lw	a5,-32(s0)
8000735c:	00a00713          	li	a4,10
80007360:	00f717b3          	sll	a5,a4,a5
80007364:	fef42623          	sw	a5,-20(s0)

			xTimeWhenBlocking = xTaskGetTickCount();
80007368:	db1fb0ef          	jal	ra,80003118 <xTaskGetTickCount>
8000736c:	fea42423          	sw	a0,-24(s0)

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueSend( xTestQueue, &xItem, xTimeToBlock ) != errQUEUE_FULL )
80007370:	00033797          	auipc	a5,0x33
80007374:	61c78793          	addi	a5,a5,1564 # 8003a98c <xTestQueue>
80007378:	0007a783          	lw	a5,0(a5)
8000737c:	fe040713          	addi	a4,s0,-32
80007380:	00000693          	li	a3,0
80007384:	fec42603          	lw	a2,-20(s0)
80007388:	00070593          	mv	a1,a4
8000738c:	00078513          	mv	a0,a5
80007390:	ba9f90ef          	jal	ra,80000f38 <xQueueGenericSend>
80007394:	00050793          	mv	a5,a0
80007398:	00078a63          	beqz	a5,800073ac <vPrimaryBlockTimeTestTask+0x194>
			{
				xErrorOccurred = pdTRUE;
8000739c:	00033797          	auipc	a5,0x33
800073a0:	60078793          	addi	a5,a5,1536 # 8003a99c <xErrorOccurred>
800073a4:	00100713          	li	a4,1
800073a8:	00e7a023          	sw	a4,0(a5)
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
800073ac:	d6dfb0ef          	jal	ra,80003118 <xTaskGetTickCount>
800073b0:	00050713          	mv	a4,a0
800073b4:	fe842783          	lw	a5,-24(s0)
800073b8:	40f707b3          	sub	a5,a4,a5
800073bc:	fef42223          	sw	a5,-28(s0)

			if( xBlockedTime < xTimeToBlock )
800073c0:	fe442703          	lw	a4,-28(s0)
800073c4:	fec42783          	lw	a5,-20(s0)
800073c8:	00f77a63          	bleu	a5,a4,800073dc <vPrimaryBlockTimeTestTask+0x1c4>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
800073cc:	00033797          	auipc	a5,0x33
800073d0:	5d078793          	addi	a5,a5,1488 # 8003a99c <xErrorOccurred>
800073d4:	00100713          	li	a4,1
800073d8:	00e7a023          	sw	a4,0(a5)
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
800073dc:	fec42783          	lw	a5,-20(s0)
800073e0:	00f78793          	addi	a5,a5,15
800073e4:	fe442703          	lw	a4,-28(s0)
800073e8:	00e7fa63          	bleu	a4,a5,800073fc <vPrimaryBlockTimeTestTask+0x1e4>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
800073ec:	00033797          	auipc	a5,0x33
800073f0:	5b078793          	addi	a5,a5,1456 # 8003a99c <xErrorOccurred>
800073f4:	00100713          	li	a4,1
800073f8:	00e7a023          	sw	a4,0(a5)
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
800073fc:	fe042783          	lw	a5,-32(s0)
80007400:	00178793          	addi	a5,a5,1
80007404:	fef42023          	sw	a5,-32(s0)
80007408:	fe042703          	lw	a4,-32(s0)
8000740c:	00400793          	li	a5,4
80007410:	f4e7d4e3          	ble	a4,a5,80007358 <vPrimaryBlockTimeTestTask+0x140>
		recognise that its block time has not expired and return to block for
		the remains of its block time.

		Wake the other task so it blocks attempting to post to the already
		full queue. */
		xRunIndicator = 0;
80007414:	00033797          	auipc	a5,0x33
80007418:	58c78793          	addi	a5,a5,1420 # 8003a9a0 <xRunIndicator>
8000741c:	0007a023          	sw	zero,0(a5)
		vTaskResume( xSecondary );
80007420:	00033797          	auipc	a5,0x33
80007424:	57078793          	addi	a5,a5,1392 # 8003a990 <xSecondary>
80007428:	0007a783          	lw	a5,0(a5)
8000742c:	00078513          	mv	a0,a5
80007430:	f9cfb0ef          	jal	ra,80002bcc <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
80007434:	00c0006f          	j	80007440 <vPrimaryBlockTimeTestTask+0x228>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
80007438:	01400513          	li	a0,20
8000743c:	950fb0ef          	jal	ra,8000258c <vTaskDelay>
		while( xRunIndicator != bktRUN_INDICATOR )
80007440:	00033797          	auipc	a5,0x33
80007444:	56078793          	addi	a5,a5,1376 # 8003a9a0 <xRunIndicator>
80007448:	0007a703          	lw	a4,0(a5)
8000744c:	05500793          	li	a5,85
80007450:	fef714e3          	bne	a4,a5,80007438 <vPrimaryBlockTimeTestTask+0x220>
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
80007454:	01400513          	li	a0,20
80007458:	934fb0ef          	jal	ra,8000258c <vTaskDelay>
		xRunIndicator = 0;
8000745c:	00033797          	auipc	a5,0x33
80007460:	54478793          	addi	a5,a5,1348 # 8003a9a0 <xRunIndicator>
80007464:	0007a023          	sw	zero,0(a5)

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
80007468:	fe042023          	sw	zero,-32(s0)
8000746c:	1080006f          	j	80007574 <vPrimaryBlockTimeTestTask+0x35c>
		{
			/* Now when we make space on the queue the other task should wake
			but not execute as this task has higher priority. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
80007470:	00033797          	auipc	a5,0x33
80007474:	51c78793          	addi	a5,a5,1308 # 8003a98c <xTestQueue>
80007478:	0007a783          	lw	a5,0(a5)
8000747c:	fdc40713          	addi	a4,s0,-36
80007480:	00000693          	li	a3,0
80007484:	00000613          	li	a2,0
80007488:	00070593          	mv	a1,a4
8000748c:	00078513          	mv	a0,a5
80007490:	f99f90ef          	jal	ra,80001428 <xQueueGenericReceive>
80007494:	00050713          	mv	a4,a0
80007498:	00100793          	li	a5,1
8000749c:	00f70a63          	beq	a4,a5,800074b0 <vPrimaryBlockTimeTestTask+0x298>
			{
				xErrorOccurred = pdTRUE;
800074a0:	00033797          	auipc	a5,0x33
800074a4:	4fc78793          	addi	a5,a5,1276 # 8003a99c <xErrorOccurred>
800074a8:	00100713          	li	a4,1
800074ac:	00e7a023          	sw	a4,0(a5)
			}

			/* Now fill the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			full ourselves, and the other task have set xRunIndicator. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
800074b0:	00033797          	auipc	a5,0x33
800074b4:	4dc78793          	addi	a5,a5,1244 # 8003a98c <xTestQueue>
800074b8:	0007a783          	lw	a5,0(a5)
800074bc:	fe040713          	addi	a4,s0,-32
800074c0:	00000693          	li	a3,0
800074c4:	00000613          	li	a2,0
800074c8:	00070593          	mv	a1,a4
800074cc:	00078513          	mv	a0,a5
800074d0:	a69f90ef          	jal	ra,80000f38 <xQueueGenericSend>
800074d4:	00050713          	mv	a4,a0
800074d8:	00100793          	li	a5,1
800074dc:	00f70a63          	beq	a4,a5,800074f0 <vPrimaryBlockTimeTestTask+0x2d8>
			{
				xErrorOccurred = pdTRUE;
800074e0:	00033797          	auipc	a5,0x33
800074e4:	4bc78793          	addi	a5,a5,1212 # 8003a99c <xErrorOccurred>
800074e8:	00100713          	li	a4,1
800074ec:	00e7a023          	sw	a4,0(a5)
			}

			if( xRunIndicator == bktRUN_INDICATOR )
800074f0:	00033797          	auipc	a5,0x33
800074f4:	4b078793          	addi	a5,a5,1200 # 8003a9a0 <xRunIndicator>
800074f8:	0007a703          	lw	a4,0(a5)
800074fc:	05500793          	li	a5,85
80007500:	00f71a63          	bne	a4,a5,80007514 <vPrimaryBlockTimeTestTask+0x2fc>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
80007504:	00033797          	auipc	a5,0x33
80007508:	49878793          	addi	a5,a5,1176 # 8003a99c <xErrorOccurred>
8000750c:	00100713          	li	a4,1
80007510:	00e7a023          	sw	a4,0(a5)
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
80007514:	00033797          	auipc	a5,0x33
80007518:	47c78793          	addi	a5,a5,1148 # 8003a990 <xSecondary>
8000751c:	0007a783          	lw	a5,0(a5)
80007520:	00400593          	li	a1,4
80007524:	00078513          	mv	a0,a5
80007528:	ad0fb0ef          	jal	ra,800027f8 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
8000752c:	00033797          	auipc	a5,0x33
80007530:	47478793          	addi	a5,a5,1140 # 8003a9a0 <xRunIndicator>
80007534:	0007a703          	lw	a4,0(a5)
80007538:	05500793          	li	a5,85
8000753c:	00f71a63          	bne	a4,a5,80007550 <vPrimaryBlockTimeTestTask+0x338>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
80007540:	00033797          	auipc	a5,0x33
80007544:	45c78793          	addi	a5,a5,1116 # 8003a99c <xErrorOccurred>
80007548:	00100713          	li	a4,1
8000754c:	00e7a023          	sw	a4,0(a5)
			}

			/* Set the priority back down. */
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
80007550:	00033797          	auipc	a5,0x33
80007554:	44078793          	addi	a5,a5,1088 # 8003a990 <xSecondary>
80007558:	0007a783          	lw	a5,0(a5)
8000755c:	00100593          	li	a1,1
80007560:	00078513          	mv	a0,a5
80007564:	a94fb0ef          	jal	ra,800027f8 <vTaskPrioritySet>
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
80007568:	fe042783          	lw	a5,-32(s0)
8000756c:	00178793          	addi	a5,a5,1
80007570:	fef42023          	sw	a5,-32(s0)
80007574:	fe042703          	lw	a4,-32(s0)
80007578:	00400793          	li	a5,4
8000757c:	eee7dae3          	ble	a4,a5,80007470 <vPrimaryBlockTimeTestTask+0x258>
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
80007580:	00c0006f          	j	8000758c <vPrimaryBlockTimeTestTask+0x374>
		{
			vTaskDelay( bktSHORT_WAIT );
80007584:	01400513          	li	a0,20
80007588:	804fb0ef          	jal	ra,8000258c <vTaskDelay>
		while( xRunIndicator != bktRUN_INDICATOR )
8000758c:	00033797          	auipc	a5,0x33
80007590:	41478793          	addi	a5,a5,1044 # 8003a9a0 <xRunIndicator>
80007594:	0007a703          	lw	a4,0(a5)
80007598:	05500793          	li	a5,85
8000759c:	fef714e3          	bne	a4,a5,80007584 <vPrimaryBlockTimeTestTask+0x36c>
		}
		vTaskDelay( bktSHORT_WAIT );
800075a0:	01400513          	li	a0,20
800075a4:	fe9fa0ef          	jal	ra,8000258c <vTaskDelay>
		xRunIndicator = 0;
800075a8:	00033797          	auipc	a5,0x33
800075ac:	3f878793          	addi	a5,a5,1016 # 8003a9a0 <xRunIndicator>
800075b0:	0007a023          	sw	zero,0(a5)

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
800075b4:	fe042023          	sw	zero,-32(s0)
800075b8:	0500006f          	j	80007608 <vPrimaryBlockTimeTestTask+0x3f0>
		{
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
800075bc:	00033797          	auipc	a5,0x33
800075c0:	3d078793          	addi	a5,a5,976 # 8003a98c <xTestQueue>
800075c4:	0007a783          	lw	a5,0(a5)
800075c8:	fdc40713          	addi	a4,s0,-36
800075cc:	00000693          	li	a3,0
800075d0:	00000613          	li	a2,0
800075d4:	00070593          	mv	a1,a4
800075d8:	00078513          	mv	a0,a5
800075dc:	e4df90ef          	jal	ra,80001428 <xQueueGenericReceive>
800075e0:	00050713          	mv	a4,a0
800075e4:	00100793          	li	a5,1
800075e8:	00f70a63          	beq	a4,a5,800075fc <vPrimaryBlockTimeTestTask+0x3e4>
			{
				xErrorOccurred = pdTRUE;
800075ec:	00033797          	auipc	a5,0x33
800075f0:	3b078793          	addi	a5,a5,944 # 8003a99c <xErrorOccurred>
800075f4:	00100713          	li	a4,1
800075f8:	00e7a023          	sw	a4,0(a5)
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
800075fc:	fe042783          	lw	a5,-32(s0)
80007600:	00178793          	addi	a5,a5,1
80007604:	fef42023          	sw	a5,-32(s0)
80007608:	fe042703          	lw	a4,-32(s0)
8000760c:	00400793          	li	a5,4
80007610:	fae7d6e3          	ble	a4,a5,800075bc <vPrimaryBlockTimeTestTask+0x3a4>
			}
		}

		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );
80007614:	00033797          	auipc	a5,0x33
80007618:	37c78793          	addi	a5,a5,892 # 8003a990 <xSecondary>
8000761c:	0007a783          	lw	a5,0(a5)
80007620:	00078513          	mv	a0,a5
80007624:	da8fb0ef          	jal	ra,80002bcc <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
80007628:	00c0006f          	j	80007634 <vPrimaryBlockTimeTestTask+0x41c>
		{
			vTaskDelay( bktSHORT_WAIT );
8000762c:	01400513          	li	a0,20
80007630:	f5dfa0ef          	jal	ra,8000258c <vTaskDelay>
		while( xRunIndicator != bktRUN_INDICATOR )
80007634:	00033797          	auipc	a5,0x33
80007638:	36c78793          	addi	a5,a5,876 # 8003a9a0 <xRunIndicator>
8000763c:	0007a703          	lw	a4,0(a5)
80007640:	05500793          	li	a5,85
80007644:	fef714e3          	bne	a4,a5,8000762c <vPrimaryBlockTimeTestTask+0x414>
		}
		vTaskDelay( bktSHORT_WAIT );
80007648:	01400513          	li	a0,20
8000764c:	f41fa0ef          	jal	ra,8000258c <vTaskDelay>
		xRunIndicator = 0;
80007650:	00033797          	auipc	a5,0x33
80007654:	35078793          	addi	a5,a5,848 # 8003a9a0 <xRunIndicator>
80007658:	0007a023          	sw	zero,0(a5)

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
8000765c:	fe042023          	sw	zero,-32(s0)
80007660:	1080006f          	j	80007768 <vPrimaryBlockTimeTestTask+0x550>
		{
			/* Now when we place an item on the queue the other task should
			wake but not execute as this task has higher priority. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
80007664:	00033797          	auipc	a5,0x33
80007668:	32878793          	addi	a5,a5,808 # 8003a98c <xTestQueue>
8000766c:	0007a783          	lw	a5,0(a5)
80007670:	fe040713          	addi	a4,s0,-32
80007674:	00000693          	li	a3,0
80007678:	00000613          	li	a2,0
8000767c:	00070593          	mv	a1,a4
80007680:	00078513          	mv	a0,a5
80007684:	8b5f90ef          	jal	ra,80000f38 <xQueueGenericSend>
80007688:	00050713          	mv	a4,a0
8000768c:	00100793          	li	a5,1
80007690:	00f70a63          	beq	a4,a5,800076a4 <vPrimaryBlockTimeTestTask+0x48c>
			{
				xErrorOccurred = pdTRUE;
80007694:	00033797          	auipc	a5,0x33
80007698:	30878793          	addi	a5,a5,776 # 8003a99c <xErrorOccurred>
8000769c:	00100713          	li	a4,1
800076a0:	00e7a023          	sw	a4,0(a5)
			}

			/* Now empty the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			empty ourselves, and the other task would be suspended. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
800076a4:	00033797          	auipc	a5,0x33
800076a8:	2e878793          	addi	a5,a5,744 # 8003a98c <xTestQueue>
800076ac:	0007a783          	lw	a5,0(a5)
800076b0:	fdc40713          	addi	a4,s0,-36
800076b4:	00000693          	li	a3,0
800076b8:	00000613          	li	a2,0
800076bc:	00070593          	mv	a1,a4
800076c0:	00078513          	mv	a0,a5
800076c4:	d65f90ef          	jal	ra,80001428 <xQueueGenericReceive>
800076c8:	00050713          	mv	a4,a0
800076cc:	00100793          	li	a5,1
800076d0:	00f70a63          	beq	a4,a5,800076e4 <vPrimaryBlockTimeTestTask+0x4cc>
			{
				xErrorOccurred = pdTRUE;
800076d4:	00033797          	auipc	a5,0x33
800076d8:	2c878793          	addi	a5,a5,712 # 8003a99c <xErrorOccurred>
800076dc:	00100713          	li	a4,1
800076e0:	00e7a023          	sw	a4,0(a5)
			}

			if( xRunIndicator == bktRUN_INDICATOR )
800076e4:	00033797          	auipc	a5,0x33
800076e8:	2bc78793          	addi	a5,a5,700 # 8003a9a0 <xRunIndicator>
800076ec:	0007a703          	lw	a4,0(a5)
800076f0:	05500793          	li	a5,85
800076f4:	00f71a63          	bne	a4,a5,80007708 <vPrimaryBlockTimeTestTask+0x4f0>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
800076f8:	00033797          	auipc	a5,0x33
800076fc:	2a478793          	addi	a5,a5,676 # 8003a99c <xErrorOccurred>
80007700:	00100713          	li	a4,1
80007704:	00e7a023          	sw	a4,0(a5)
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
80007708:	00033797          	auipc	a5,0x33
8000770c:	28878793          	addi	a5,a5,648 # 8003a990 <xSecondary>
80007710:	0007a783          	lw	a5,0(a5)
80007714:	00400593          	li	a1,4
80007718:	00078513          	mv	a0,a5
8000771c:	8dcfb0ef          	jal	ra,800027f8 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
80007720:	00033797          	auipc	a5,0x33
80007724:	28078793          	addi	a5,a5,640 # 8003a9a0 <xRunIndicator>
80007728:	0007a703          	lw	a4,0(a5)
8000772c:	05500793          	li	a5,85
80007730:	00f71a63          	bne	a4,a5,80007744 <vPrimaryBlockTimeTestTask+0x52c>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
80007734:	00033797          	auipc	a5,0x33
80007738:	26878793          	addi	a5,a5,616 # 8003a99c <xErrorOccurred>
8000773c:	00100713          	li	a4,1
80007740:	00e7a023          	sw	a4,0(a5)
			}
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
80007744:	00033797          	auipc	a5,0x33
80007748:	24c78793          	addi	a5,a5,588 # 8003a990 <xSecondary>
8000774c:	0007a783          	lw	a5,0(a5)
80007750:	00100593          	li	a1,1
80007754:	00078513          	mv	a0,a5
80007758:	8a0fb0ef          	jal	ra,800027f8 <vTaskPrioritySet>
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
8000775c:	fe042783          	lw	a5,-32(s0)
80007760:	00178793          	addi	a5,a5,1
80007764:	fef42023          	sw	a5,-32(s0)
80007768:	fe042703          	lw	a4,-32(s0)
8000776c:	00400793          	li	a5,4
80007770:	eee7dae3          	ble	a4,a5,80007664 <vPrimaryBlockTimeTestTask+0x44c>
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
80007774:	00c0006f          	j	80007780 <vPrimaryBlockTimeTestTask+0x568>
		{
			vTaskDelay( bktSHORT_WAIT );
80007778:	01400513          	li	a0,20
8000777c:	e11fa0ef          	jal	ra,8000258c <vTaskDelay>
		while( xRunIndicator != bktRUN_INDICATOR )
80007780:	00033797          	auipc	a5,0x33
80007784:	22078793          	addi	a5,a5,544 # 8003a9a0 <xRunIndicator>
80007788:	0007a703          	lw	a4,0(a5)
8000778c:	05500793          	li	a5,85
80007790:	fef714e3          	bne	a4,a5,80007778 <vPrimaryBlockTimeTestTask+0x560>
		}
		vTaskDelay( bktSHORT_WAIT );
80007794:	01400513          	li	a0,20
80007798:	df5fa0ef          	jal	ra,8000258c <vTaskDelay>

		xPrimaryCycles++;
8000779c:	00033797          	auipc	a5,0x33
800077a0:	1f878793          	addi	a5,a5,504 # 8003a994 <xPrimaryCycles>
800077a4:	0007a783          	lw	a5,0(a5)
800077a8:	00178713          	addi	a4,a5,1
800077ac:	00033797          	auipc	a5,0x33
800077b0:	1e878793          	addi	a5,a5,488 # 8003a994 <xPrimaryCycles>
800077b4:	00e7a023          	sw	a4,0(a5)
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
800077b8:	a75ff06f          	j	8000722c <vPrimaryBlockTimeTestTask+0x14>

800077bc <vSecondaryBlockTimeTestTask>:
	}
}
/*-----------------------------------------------------------*/

static void vSecondaryBlockTimeTestTask( void *pvParameters )
{
800077bc:	fd010113          	addi	sp,sp,-48
800077c0:	02112623          	sw	ra,44(sp)
800077c4:	02812423          	sw	s0,40(sp)
800077c8:	03010413          	addi	s0,sp,48
800077cc:	fca42e23          	sw	a0,-36(s0)
	{
		/*********************************************************************
        Test 1 and 2

		This task does does not participate in these tests. */
		vTaskSuspend( NULL );
800077d0:	00000513          	li	a0,0
800077d4:	a34fb0ef          	jal	ra,80002a08 <vTaskSuspend>
        Test 3

		The first thing we do is attempt to read from the queue.  It should be
		full so we block.  Note the time before we block so we can check the
		wake time is as per that expected. */
		xTimeWhenBlocking = xTaskGetTickCount();
800077d8:	941fb0ef          	jal	ra,80003118 <xTaskGetTickCount>
800077dc:	fea42623          	sw	a0,-20(s0)

		/* We should unblock after bktTIME_TO_BLOCK having not sent
		anything to the queue. */
		xData = 0;
800077e0:	fe042223          	sw	zero,-28(s0)
		xRunIndicator = bktRUN_INDICATOR;
800077e4:	00033797          	auipc	a5,0x33
800077e8:	1bc78793          	addi	a5,a5,444 # 8003a9a0 <xRunIndicator>
800077ec:	05500713          	li	a4,85
800077f0:	00e7a023          	sw	a4,0(a5)
		if( xQueueSend( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_FULL )
800077f4:	00033797          	auipc	a5,0x33
800077f8:	19878793          	addi	a5,a5,408 # 8003a98c <xTestQueue>
800077fc:	0007a783          	lw	a5,0(a5)
80007800:	fe440713          	addi	a4,s0,-28
80007804:	00000693          	li	a3,0
80007808:	0af00613          	li	a2,175
8000780c:	00070593          	mv	a1,a4
80007810:	00078513          	mv	a0,a5
80007814:	f24f90ef          	jal	ra,80000f38 <xQueueGenericSend>
80007818:	00050793          	mv	a5,a0
8000781c:	00078a63          	beqz	a5,80007830 <vSecondaryBlockTimeTestTask+0x74>
		{
			xErrorOccurred = pdTRUE;
80007820:	00033797          	auipc	a5,0x33
80007824:	17c78793          	addi	a5,a5,380 # 8003a99c <xErrorOccurred>
80007828:	00100713          	li	a4,1
8000782c:	00e7a023          	sw	a4,0(a5)
		}

		/* How long were we inside the send function? */
		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
80007830:	8e9fb0ef          	jal	ra,80003118 <xTaskGetTickCount>
80007834:	00050713          	mv	a4,a0
80007838:	fec42783          	lw	a5,-20(s0)
8000783c:	40f707b3          	sub	a5,a4,a5
80007840:	fef42423          	sw	a5,-24(s0)

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
80007844:	fe842703          	lw	a4,-24(s0)
80007848:	0ae00793          	li	a5,174
8000784c:	00e7ea63          	bltu	a5,a4,80007860 <vSecondaryBlockTimeTestTask+0xa4>
		{
			xErrorOccurred = pdTRUE;
80007850:	00033797          	auipc	a5,0x33
80007854:	14c78793          	addi	a5,a5,332 # 8003a99c <xErrorOccurred>
80007858:	00100713          	li	a4,1
8000785c:	00e7a023          	sw	a4,0(a5)
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as
		soon as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
80007860:	fe842703          	lw	a4,-24(s0)
80007864:	0be00793          	li	a5,190
80007868:	00e7fa63          	bleu	a4,a5,8000787c <vSecondaryBlockTimeTestTask+0xc0>
		{
			xErrorOccurred = pdTRUE;
8000786c:	00033797          	auipc	a5,0x33
80007870:	13078793          	addi	a5,a5,304 # 8003a99c <xErrorOccurred>
80007874:	00100713          	li	a4,1
80007878:	00e7a023          	sw	a4,0(a5)
		}

		/* Suspend ready for test 3. */
		xRunIndicator = bktRUN_INDICATOR;
8000787c:	00033797          	auipc	a5,0x33
80007880:	12478793          	addi	a5,a5,292 # 8003a9a0 <xRunIndicator>
80007884:	05500713          	li	a4,85
80007888:	00e7a023          	sw	a4,0(a5)
		vTaskSuspend( NULL );
8000788c:	00000513          	li	a0,0
80007890:	978fb0ef          	jal	ra,80002a08 <vTaskSuspend>

		/*********************************************************************
        Test 4

		As per test three, but with the send and receive reversed. */
		xTimeWhenBlocking = xTaskGetTickCount();
80007894:	885fb0ef          	jal	ra,80003118 <xTaskGetTickCount>
80007898:	fea42623          	sw	a0,-20(s0)

		/* We should unblock after bktTIME_TO_BLOCK having not received
		anything on the queue. */
		xRunIndicator = bktRUN_INDICATOR;
8000789c:	00033797          	auipc	a5,0x33
800078a0:	10478793          	addi	a5,a5,260 # 8003a9a0 <xRunIndicator>
800078a4:	05500713          	li	a4,85
800078a8:	00e7a023          	sw	a4,0(a5)
		if( xQueueReceive( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_EMPTY )
800078ac:	00033797          	auipc	a5,0x33
800078b0:	0e078793          	addi	a5,a5,224 # 8003a98c <xTestQueue>
800078b4:	0007a783          	lw	a5,0(a5)
800078b8:	fe440713          	addi	a4,s0,-28
800078bc:	00000693          	li	a3,0
800078c0:	0af00613          	li	a2,175
800078c4:	00070593          	mv	a1,a4
800078c8:	00078513          	mv	a0,a5
800078cc:	b5df90ef          	jal	ra,80001428 <xQueueGenericReceive>
800078d0:	00050793          	mv	a5,a0
800078d4:	00078a63          	beqz	a5,800078e8 <vSecondaryBlockTimeTestTask+0x12c>
		{
			xErrorOccurred = pdTRUE;
800078d8:	00033797          	auipc	a5,0x33
800078dc:	0c478793          	addi	a5,a5,196 # 8003a99c <xErrorOccurred>
800078e0:	00100713          	li	a4,1
800078e4:	00e7a023          	sw	a4,0(a5)
		}

		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
800078e8:	831fb0ef          	jal	ra,80003118 <xTaskGetTickCount>
800078ec:	00050713          	mv	a4,a0
800078f0:	fec42783          	lw	a5,-20(s0)
800078f4:	40f707b3          	sub	a5,a4,a5
800078f8:	fef42423          	sw	a5,-24(s0)

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
800078fc:	fe842703          	lw	a4,-24(s0)
80007900:	0ae00793          	li	a5,174
80007904:	00e7ea63          	bltu	a5,a4,80007918 <vSecondaryBlockTimeTestTask+0x15c>
		{
			xErrorOccurred = pdTRUE;
80007908:	00033797          	auipc	a5,0x33
8000790c:	09478793          	addi	a5,a5,148 # 8003a99c <xErrorOccurred>
80007910:	00100713          	li	a4,1
80007914:	00e7a023          	sw	a4,0(a5)
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as soon
		as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
80007918:	fe842703          	lw	a4,-24(s0)
8000791c:	0be00793          	li	a5,190
80007920:	00e7fa63          	bleu	a4,a5,80007934 <vSecondaryBlockTimeTestTask+0x178>
		{
			xErrorOccurred = pdTRUE;
80007924:	00033797          	auipc	a5,0x33
80007928:	07878793          	addi	a5,a5,120 # 8003a99c <xErrorOccurred>
8000792c:	00100713          	li	a4,1
80007930:	00e7a023          	sw	a4,0(a5)
		}

		xRunIndicator = bktRUN_INDICATOR;
80007934:	00033797          	auipc	a5,0x33
80007938:	06c78793          	addi	a5,a5,108 # 8003a9a0 <xRunIndicator>
8000793c:	05500713          	li	a4,85
80007940:	00e7a023          	sw	a4,0(a5)

		xSecondaryCycles++;
80007944:	00033797          	auipc	a5,0x33
80007948:	05478793          	addi	a5,a5,84 # 8003a998 <xSecondaryCycles>
8000794c:	0007a783          	lw	a5,0(a5)
80007950:	00178713          	addi	a4,a5,1
80007954:	00033797          	auipc	a5,0x33
80007958:	04478793          	addi	a5,a5,68 # 8003a998 <xSecondaryCycles>
8000795c:	00e7a023          	sw	a4,0(a5)
		vTaskSuspend( NULL );
80007960:	e71ff06f          	j	800077d0 <vSecondaryBlockTimeTestTask+0x14>

80007964 <xAreBlockTimeTestTasksStillRunning>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xAreBlockTimeTestTasksStillRunning( void )
{
80007964:	fe010113          	addi	sp,sp,-32
80007968:	00812e23          	sw	s0,28(sp)
8000796c:	02010413          	addi	s0,sp,32
static BaseType_t xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
BaseType_t xReturn = pdPASS;
80007970:	00100793          	li	a5,1
80007974:	fef42623          	sw	a5,-20(s0)

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
80007978:	00033797          	auipc	a5,0x33
8000797c:	01c78793          	addi	a5,a5,28 # 8003a994 <xPrimaryCycles>
80007980:	0007a703          	lw	a4,0(a5)
80007984:	00033797          	auipc	a5,0x33
80007988:	02078793          	addi	a5,a5,32 # 8003a9a4 <xLastPrimaryCycleCount.1866>
8000798c:	0007a783          	lw	a5,0(a5)
80007990:	00f71463          	bne	a4,a5,80007998 <xAreBlockTimeTestTasksStillRunning+0x34>
	{
		xReturn = pdFAIL;
80007994:	fe042623          	sw	zero,-20(s0)
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
80007998:	00033797          	auipc	a5,0x33
8000799c:	00078793          	mv	a5,a5
800079a0:	0007a703          	lw	a4,0(a5) # 8003a998 <xSecondaryCycles>
800079a4:	00033797          	auipc	a5,0x33
800079a8:	00478793          	addi	a5,a5,4 # 8003a9a8 <xLastSecondaryCycleCount.1867>
800079ac:	0007a783          	lw	a5,0(a5)
800079b0:	00f71463          	bne	a4,a5,800079b8 <xAreBlockTimeTestTasksStillRunning+0x54>
	{
		xReturn = pdFAIL;
800079b4:	fe042623          	sw	zero,-20(s0)
	}

	if( xErrorOccurred == pdTRUE )
800079b8:	00033797          	auipc	a5,0x33
800079bc:	fe478793          	addi	a5,a5,-28 # 8003a99c <xErrorOccurred>
800079c0:	0007a703          	lw	a4,0(a5)
800079c4:	00100793          	li	a5,1
800079c8:	00f71463          	bne	a4,a5,800079d0 <xAreBlockTimeTestTasksStillRunning+0x6c>
	{
		xReturn = pdFAIL;
800079cc:	fe042623          	sw	zero,-20(s0)
	}

	xLastSecondaryCycleCount = xSecondaryCycles;
800079d0:	00033797          	auipc	a5,0x33
800079d4:	fc878793          	addi	a5,a5,-56 # 8003a998 <xSecondaryCycles>
800079d8:	0007a703          	lw	a4,0(a5)
800079dc:	00033797          	auipc	a5,0x33
800079e0:	fcc78793          	addi	a5,a5,-52 # 8003a9a8 <xLastSecondaryCycleCount.1867>
800079e4:	00e7a023          	sw	a4,0(a5)
	xLastPrimaryCycleCount = xPrimaryCycles;
800079e8:	00033797          	auipc	a5,0x33
800079ec:	fac78793          	addi	a5,a5,-84 # 8003a994 <xPrimaryCycles>
800079f0:	0007a703          	lw	a4,0(a5)
800079f4:	00033797          	auipc	a5,0x33
800079f8:	fb078793          	addi	a5,a5,-80 # 8003a9a4 <xLastPrimaryCycleCount.1866>
800079fc:	00e7a023          	sw	a4,0(a5)

	return xReturn;
80007a00:	fec42783          	lw	a5,-20(s0)
}
80007a04:	00078513          	mv	a0,a5
80007a08:	01c12403          	lw	s0,28(sp)
80007a0c:	02010113          	addi	sp,sp,32
80007a10:	00008067          	ret

80007a14 <vStartCountingSemaphoreTasks>:
static volatile xCountSemStruct xParameters[ countNUM_TEST_TASKS ];

/*-----------------------------------------------------------*/

void vStartCountingSemaphoreTasks( void )
{
80007a14:	ff010113          	addi	sp,sp,-16
80007a18:	00112623          	sw	ra,12(sp)
80007a1c:	00812423          	sw	s0,8(sp)
80007a20:	01010413          	addi	s0,sp,16
	/* Create the semaphores that we are going to use for the test/demo.  The
	first should be created such that it starts at its maximum count value,
	the second should be created such that it starts with a count value of zero. */
	xParameters[ 0 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, countMAX_COUNT_VALUE );
80007a24:	0c800593          	li	a1,200
80007a28:	0c800513          	li	a0,200
80007a2c:	c80f90ef          	jal	ra,80000eac <xQueueCreateCountingSemaphore>
80007a30:	00050713          	mv	a4,a0
80007a34:	00033797          	auipc	a5,0x33
80007a38:	f7c78793          	addi	a5,a5,-132 # 8003a9b0 <xParameters>
80007a3c:	00e7a023          	sw	a4,0(a5)
	xParameters[ 0 ].uxExpectedStartCount = countSTART_AT_MAX_COUNT;
80007a40:	00033797          	auipc	a5,0x33
80007a44:	f7078793          	addi	a5,a5,-144 # 8003a9b0 <xParameters>
80007a48:	0aa00713          	li	a4,170
80007a4c:	00e7a223          	sw	a4,4(a5)
	xParameters[ 0 ].uxLoopCounter = 0;
80007a50:	00033797          	auipc	a5,0x33
80007a54:	f6078793          	addi	a5,a5,-160 # 8003a9b0 <xParameters>
80007a58:	0007a423          	sw	zero,8(a5)

	xParameters[ 1 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, 0 );
80007a5c:	00000593          	li	a1,0
80007a60:	0c800513          	li	a0,200
80007a64:	c48f90ef          	jal	ra,80000eac <xQueueCreateCountingSemaphore>
80007a68:	00050713          	mv	a4,a0
80007a6c:	00033797          	auipc	a5,0x33
80007a70:	f4478793          	addi	a5,a5,-188 # 8003a9b0 <xParameters>
80007a74:	00e7a623          	sw	a4,12(a5)
	xParameters[ 1 ].uxExpectedStartCount = 0;
80007a78:	00033797          	auipc	a5,0x33
80007a7c:	f3878793          	addi	a5,a5,-200 # 8003a9b0 <xParameters>
80007a80:	0007a823          	sw	zero,16(a5)
	xParameters[ 1 ].uxLoopCounter = 0;
80007a84:	00033797          	auipc	a5,0x33
80007a88:	f2c78793          	addi	a5,a5,-212 # 8003a9b0 <xParameters>
80007a8c:	0007aa23          	sw	zero,20(a5)
	in use.  The registry is provided as a means for kernel aware 
	debuggers to locate semaphores and has no purpose if a kernel aware debugger
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
	defined to be less than 1. */
	vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 0 ].xSemaphore, "Counting_Sem_1" );
80007a90:	00033797          	auipc	a5,0x33
80007a94:	f2078793          	addi	a5,a5,-224 # 8003a9b0 <xParameters>
80007a98:	0007a783          	lw	a5,0(a5)
80007a9c:	00018597          	auipc	a1,0x18
80007aa0:	61458593          	addi	a1,a1,1556 # 800200b0 <__rodata_start+0xb0>
80007aa4:	00078513          	mv	a0,a5
80007aa8:	c4cfa0ef          	jal	ra,80001ef4 <vQueueAddToRegistry>
	vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 1 ].xSemaphore, "Counting_Sem_2" );
80007aac:	00033797          	auipc	a5,0x33
80007ab0:	f0478793          	addi	a5,a5,-252 # 8003a9b0 <xParameters>
80007ab4:	00c7a783          	lw	a5,12(a5)
80007ab8:	00018597          	auipc	a1,0x18
80007abc:	60858593          	addi	a1,a1,1544 # 800200c0 <__rodata_start+0xc0>
80007ac0:	00078513          	mv	a0,a5
80007ac4:	c30fa0ef          	jal	ra,80001ef4 <vQueueAddToRegistry>


	/* Were the semaphores created? */
	if( ( xParameters[ 0 ].xSemaphore != NULL ) || ( xParameters[ 1 ].xSemaphore != NULL ) )
80007ac8:	00033797          	auipc	a5,0x33
80007acc:	ee878793          	addi	a5,a5,-280 # 8003a9b0 <xParameters>
80007ad0:	0007a783          	lw	a5,0(a5)
80007ad4:	00079a63          	bnez	a5,80007ae8 <vStartCountingSemaphoreTasks+0xd4>
80007ad8:	00033797          	auipc	a5,0x33
80007adc:	ed878793          	addi	a5,a5,-296 # 8003a9b0 <xParameters>
80007ae0:	00c7a783          	lw	a5,12(a5)
80007ae4:	06078263          	beqz	a5,80007b48 <vStartCountingSemaphoreTasks+0x134>
	{
		/* Create the demo tasks, passing in the semaphore to use as the parameter. */
		xTaskCreate( prvCountingSemaphoreTask, "CNT1", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 0 ] ), tskIDLE_PRIORITY, NULL );
80007ae8:	00000893          	li	a7,0
80007aec:	00000813          	li	a6,0
80007af0:	00000793          	li	a5,0
80007af4:	00000713          	li	a4,0
80007af8:	00033697          	auipc	a3,0x33
80007afc:	eb868693          	addi	a3,a3,-328 # 8003a9b0 <xParameters>
80007b00:	40000613          	li	a2,1024
80007b04:	00018597          	auipc	a1,0x18
80007b08:	5cc58593          	addi	a1,a1,1484 # 800200d0 <__rodata_start+0xd0>
80007b0c:	00000517          	auipc	a0,0x0
80007b10:	23050513          	addi	a0,a0,560 # 80007d3c <prvCountingSemaphoreTask>
80007b14:	d94fa0ef          	jal	ra,800020a8 <xTaskGenericCreate>
		xTaskCreate( prvCountingSemaphoreTask, "CNT2", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 1 ] ), tskIDLE_PRIORITY, NULL );		
80007b18:	00000893          	li	a7,0
80007b1c:	00000813          	li	a6,0
80007b20:	00000793          	li	a5,0
80007b24:	00000713          	li	a4,0
80007b28:	00033697          	auipc	a3,0x33
80007b2c:	e9468693          	addi	a3,a3,-364 # 8003a9bc <xParameters+0xc>
80007b30:	40000613          	li	a2,1024
80007b34:	00018597          	auipc	a1,0x18
80007b38:	5a458593          	addi	a1,a1,1444 # 800200d8 <__rodata_start+0xd8>
80007b3c:	00000517          	auipc	a0,0x0
80007b40:	20050513          	addi	a0,a0,512 # 80007d3c <prvCountingSemaphoreTask>
80007b44:	d64fa0ef          	jal	ra,800020a8 <xTaskGenericCreate>
	}
}
80007b48:	00000013          	nop
80007b4c:	00c12083          	lw	ra,12(sp)
80007b50:	00812403          	lw	s0,8(sp)
80007b54:	01010113          	addi	sp,sp,16
80007b58:	00008067          	ret

80007b5c <prvDecrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvDecrementSemaphoreCount( SemaphoreHandle_t xSemaphore, UBaseType_t *puxLoopCounter )
{
80007b5c:	fd010113          	addi	sp,sp,-48
80007b60:	02112623          	sw	ra,44(sp)
80007b64:	02812423          	sw	s0,40(sp)
80007b68:	03010413          	addi	s0,sp,48
80007b6c:	fca42e23          	sw	a0,-36(s0)
80007b70:	fcb42c23          	sw	a1,-40(s0)
UBaseType_t ux;

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
80007b74:	00000693          	li	a3,0
80007b78:	00000613          	li	a2,0
80007b7c:	00000593          	li	a1,0
80007b80:	fdc42503          	lw	a0,-36(s0)
80007b84:	bb4f90ef          	jal	ra,80000f38 <xQueueGenericSend>
80007b88:	00050713          	mv	a4,a0
80007b8c:	00100793          	li	a5,1
80007b90:	00f71a63          	bne	a4,a5,80007ba4 <prvDecrementSemaphoreCount+0x48>
	{
		xErrorDetected = pdTRUE;
80007b94:	00033797          	auipc	a5,0x33
80007b98:	e1878793          	addi	a5,a5,-488 # 8003a9ac <xErrorDetected>
80007b9c:	00100713          	li	a4,1
80007ba0:	00e7a023          	sw	a4,0(a5)
	}

	/* We should be able to 'take' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
80007ba4:	fe042623          	sw	zero,-20(s0)
80007ba8:	0540006f          	j	80007bfc <prvDecrementSemaphoreCount+0xa0>
	{
		if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) != pdPASS )
80007bac:	00000693          	li	a3,0
80007bb0:	00000613          	li	a2,0
80007bb4:	00000593          	li	a1,0
80007bb8:	fdc42503          	lw	a0,-36(s0)
80007bbc:	86df90ef          	jal	ra,80001428 <xQueueGenericReceive>
80007bc0:	00050713          	mv	a4,a0
80007bc4:	00100793          	li	a5,1
80007bc8:	00f70a63          	beq	a4,a5,80007bdc <prvDecrementSemaphoreCount+0x80>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
80007bcc:	00033797          	auipc	a5,0x33
80007bd0:	de078793          	addi	a5,a5,-544 # 8003a9ac <xErrorDetected>
80007bd4:	00100713          	li	a4,1
80007bd8:	00e7a023          	sw	a4,0(a5)
		}

		( *puxLoopCounter )++;
80007bdc:	fd842783          	lw	a5,-40(s0)
80007be0:	0007a783          	lw	a5,0(a5)
80007be4:	00178713          	addi	a4,a5,1
80007be8:	fd842783          	lw	a5,-40(s0)
80007bec:	00e7a023          	sw	a4,0(a5)
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
80007bf0:	fec42783          	lw	a5,-20(s0)
80007bf4:	00178793          	addi	a5,a5,1
80007bf8:	fef42623          	sw	a5,-20(s0)
80007bfc:	fec42703          	lw	a4,-20(s0)
80007c00:	0c700793          	li	a5,199
80007c04:	fae7f4e3          	bleu	a4,a5,80007bac <prvDecrementSemaphoreCount+0x50>
		taskYIELD();
	#endif

	/* If the semaphore count is zero then we should not be able to	'take' 
	the semaphore. */
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
80007c08:	00000693          	li	a3,0
80007c0c:	00000613          	li	a2,0
80007c10:	00000593          	li	a1,0
80007c14:	fdc42503          	lw	a0,-36(s0)
80007c18:	811f90ef          	jal	ra,80001428 <xQueueGenericReceive>
80007c1c:	00050713          	mv	a4,a0
80007c20:	00100793          	li	a5,1
80007c24:	00f71a63          	bne	a4,a5,80007c38 <prvDecrementSemaphoreCount+0xdc>
	{
		xErrorDetected = pdTRUE;
80007c28:	00033797          	auipc	a5,0x33
80007c2c:	d8478793          	addi	a5,a5,-636 # 8003a9ac <xErrorDetected>
80007c30:	00100713          	li	a4,1
80007c34:	00e7a023          	sw	a4,0(a5)
	}
}
80007c38:	00000013          	nop
80007c3c:	02c12083          	lw	ra,44(sp)
80007c40:	02812403          	lw	s0,40(sp)
80007c44:	03010113          	addi	sp,sp,48
80007c48:	00008067          	ret

80007c4c <prvIncrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvIncrementSemaphoreCount( SemaphoreHandle_t xSemaphore, UBaseType_t *puxLoopCounter )
{
80007c4c:	fd010113          	addi	sp,sp,-48
80007c50:	02112623          	sw	ra,44(sp)
80007c54:	02812423          	sw	s0,40(sp)
80007c58:	03010413          	addi	s0,sp,48
80007c5c:	fca42e23          	sw	a0,-36(s0)
80007c60:	fcb42c23          	sw	a1,-40(s0)
UBaseType_t ux;

	/* If the semaphore count is zero then we should not be able to	'take' 
	the semaphore. */
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
80007c64:	00000693          	li	a3,0
80007c68:	00000613          	li	a2,0
80007c6c:	00000593          	li	a1,0
80007c70:	fdc42503          	lw	a0,-36(s0)
80007c74:	fb4f90ef          	jal	ra,80001428 <xQueueGenericReceive>
80007c78:	00050713          	mv	a4,a0
80007c7c:	00100793          	li	a5,1
80007c80:	00f71a63          	bne	a4,a5,80007c94 <prvIncrementSemaphoreCount+0x48>
	{
		xErrorDetected = pdTRUE;
80007c84:	00033797          	auipc	a5,0x33
80007c88:	d2878793          	addi	a5,a5,-728 # 8003a9ac <xErrorDetected>
80007c8c:	00100713          	li	a4,1
80007c90:	00e7a023          	sw	a4,0(a5)
	}

	/* We should be able to 'give' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
80007c94:	fe042623          	sw	zero,-20(s0)
80007c98:	0540006f          	j	80007cec <prvIncrementSemaphoreCount+0xa0>
	{
		if( xSemaphoreGive( xSemaphore ) != pdPASS )
80007c9c:	00000693          	li	a3,0
80007ca0:	00000613          	li	a2,0
80007ca4:	00000593          	li	a1,0
80007ca8:	fdc42503          	lw	a0,-36(s0)
80007cac:	a8cf90ef          	jal	ra,80000f38 <xQueueGenericSend>
80007cb0:	00050713          	mv	a4,a0
80007cb4:	00100793          	li	a5,1
80007cb8:	00f70a63          	beq	a4,a5,80007ccc <prvIncrementSemaphoreCount+0x80>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
80007cbc:	00033797          	auipc	a5,0x33
80007cc0:	cf078793          	addi	a5,a5,-784 # 8003a9ac <xErrorDetected>
80007cc4:	00100713          	li	a4,1
80007cc8:	00e7a023          	sw	a4,0(a5)
		}

		( *puxLoopCounter )++;
80007ccc:	fd842783          	lw	a5,-40(s0)
80007cd0:	0007a783          	lw	a5,0(a5)
80007cd4:	00178713          	addi	a4,a5,1
80007cd8:	fd842783          	lw	a5,-40(s0)
80007cdc:	00e7a023          	sw	a4,0(a5)
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
80007ce0:	fec42783          	lw	a5,-20(s0)
80007ce4:	00178793          	addi	a5,a5,1
80007ce8:	fef42623          	sw	a5,-20(s0)
80007cec:	fec42703          	lw	a4,-20(s0)
80007cf0:	0c700793          	li	a5,199
80007cf4:	fae7f4e3          	bleu	a4,a5,80007c9c <prvIncrementSemaphoreCount+0x50>
		taskYIELD();
	#endif

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
80007cf8:	00000693          	li	a3,0
80007cfc:	00000613          	li	a2,0
80007d00:	00000593          	li	a1,0
80007d04:	fdc42503          	lw	a0,-36(s0)
80007d08:	a30f90ef          	jal	ra,80000f38 <xQueueGenericSend>
80007d0c:	00050713          	mv	a4,a0
80007d10:	00100793          	li	a5,1
80007d14:	00f71a63          	bne	a4,a5,80007d28 <prvIncrementSemaphoreCount+0xdc>
	{
		xErrorDetected = pdTRUE;
80007d18:	00033797          	auipc	a5,0x33
80007d1c:	c9478793          	addi	a5,a5,-876 # 8003a9ac <xErrorDetected>
80007d20:	00100713          	li	a4,1
80007d24:	00e7a023          	sw	a4,0(a5)
	}
}
80007d28:	00000013          	nop
80007d2c:	02c12083          	lw	ra,44(sp)
80007d30:	02812403          	lw	s0,40(sp)
80007d34:	03010113          	addi	sp,sp,48
80007d38:	00008067          	ret

80007d3c <prvCountingSemaphoreTask>:
/*-----------------------------------------------------------*/

static void prvCountingSemaphoreTask( void *pvParameters )
{
80007d3c:	fd010113          	addi	sp,sp,-48
80007d40:	02112623          	sw	ra,44(sp)
80007d44:	02812423          	sw	s0,40(sp)
80007d48:	03010413          	addi	s0,sp,48
80007d4c:	fca42e23          	sw	a0,-36(s0)
		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	/* The semaphore to be used was passed as the parameter. */
	pxParameter = ( xCountSemStruct * ) pvParameters;
80007d50:	fdc42783          	lw	a5,-36(s0)
80007d54:	fef42623          	sw	a5,-20(s0)

	/* Did we expect to find the semaphore already at its max count value, or
	at zero? */
	if( pxParameter->uxExpectedStartCount == countSTART_AT_MAX_COUNT )
80007d58:	fec42783          	lw	a5,-20(s0)
80007d5c:	0047a703          	lw	a4,4(a5)
80007d60:	0aa00793          	li	a5,170
80007d64:	02f71063          	bne	a4,a5,80007d84 <prvCountingSemaphoreTask+0x48>
	{
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
80007d68:	fec42783          	lw	a5,-20(s0)
80007d6c:	0007a703          	lw	a4,0(a5)
80007d70:	fec42783          	lw	a5,-20(s0)
80007d74:	00878793          	addi	a5,a5,8
80007d78:	00078593          	mv	a1,a5
80007d7c:	00070513          	mv	a0,a4
80007d80:	dddff0ef          	jal	ra,80007b5c <prvDecrementSemaphoreCount>
	}

	/* Now we expect the semaphore count to be 0, so this time there is an
	error if we can take the semaphore. */
	if( xSemaphoreTake( pxParameter->xSemaphore, 0 ) == pdPASS )
80007d84:	fec42783          	lw	a5,-20(s0)
80007d88:	0007a783          	lw	a5,0(a5)
80007d8c:	00000693          	li	a3,0
80007d90:	00000613          	li	a2,0
80007d94:	00000593          	li	a1,0
80007d98:	00078513          	mv	a0,a5
80007d9c:	e8cf90ef          	jal	ra,80001428 <xQueueGenericReceive>
80007da0:	00050713          	mv	a4,a0
80007da4:	00100793          	li	a5,1
80007da8:	00f71a63          	bne	a4,a5,80007dbc <prvCountingSemaphoreTask+0x80>
	{
		xErrorDetected = pdTRUE;
80007dac:	00033797          	auipc	a5,0x33
80007db0:	c0078793          	addi	a5,a5,-1024 # 8003a9ac <xErrorDetected>
80007db4:	00100713          	li	a4,1
80007db8:	00e7a023          	sw	a4,0(a5)
	}

	for( ;; )
	{
		prvIncrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
80007dbc:	fec42783          	lw	a5,-20(s0)
80007dc0:	0007a703          	lw	a4,0(a5)
80007dc4:	fec42783          	lw	a5,-20(s0)
80007dc8:	00878793          	addi	a5,a5,8
80007dcc:	00078593          	mv	a1,a5
80007dd0:	00070513          	mv	a0,a4
80007dd4:	e79ff0ef          	jal	ra,80007c4c <prvIncrementSemaphoreCount>
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
80007dd8:	fec42783          	lw	a5,-20(s0)
80007ddc:	0007a703          	lw	a4,0(a5)
80007de0:	fec42783          	lw	a5,-20(s0)
80007de4:	00878793          	addi	a5,a5,8
80007de8:	00078593          	mv	a1,a5
80007dec:	00070513          	mv	a0,a4
80007df0:	d6dff0ef          	jal	ra,80007b5c <prvDecrementSemaphoreCount>
		prvIncrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
80007df4:	fc9ff06f          	j	80007dbc <prvCountingSemaphoreTask+0x80>

80007df8 <xAreCountingSemaphoreTasksStillRunning>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xAreCountingSemaphoreTasksStillRunning( void )
{
80007df8:	fe010113          	addi	sp,sp,-32
80007dfc:	00812e23          	sw	s0,28(sp)
80007e00:	02010413          	addi	s0,sp,32
static UBaseType_t uxLastCount0 = 0, uxLastCount1 = 0;
BaseType_t xReturn = pdPASS;
80007e04:	00100793          	li	a5,1
80007e08:	fef42623          	sw	a5,-20(s0)

	/* Return fail if any 'give' or 'take' did not result in the expected
	behaviour. */
	if( xErrorDetected != pdFALSE )
80007e0c:	00033797          	auipc	a5,0x33
80007e10:	ba078793          	addi	a5,a5,-1120 # 8003a9ac <xErrorDetected>
80007e14:	0007a783          	lw	a5,0(a5)
80007e18:	00078463          	beqz	a5,80007e20 <xAreCountingSemaphoreTasksStillRunning+0x28>
	{
		xReturn = pdFAIL;
80007e1c:	fe042623          	sw	zero,-20(s0)
	}

	/* Return fail if either task is not still incrementing its loop counter. */
	if( uxLastCount0 == xParameters[ 0 ].uxLoopCounter )
80007e20:	00033797          	auipc	a5,0x33
80007e24:	b9078793          	addi	a5,a5,-1136 # 8003a9b0 <xParameters>
80007e28:	0087a703          	lw	a4,8(a5)
80007e2c:	00033797          	auipc	a5,0x33
80007e30:	b9c78793          	addi	a5,a5,-1124 # 8003a9c8 <uxLastCount0.1847>
80007e34:	0007a783          	lw	a5,0(a5)
80007e38:	00f71663          	bne	a4,a5,80007e44 <xAreCountingSemaphoreTasksStillRunning+0x4c>
	{
		xReturn = pdFAIL;
80007e3c:	fe042623          	sw	zero,-20(s0)
80007e40:	01c0006f          	j	80007e5c <xAreCountingSemaphoreTasksStillRunning+0x64>
	}
	else
	{
		uxLastCount0 = xParameters[ 0 ].uxLoopCounter;
80007e44:	00033797          	auipc	a5,0x33
80007e48:	b6c78793          	addi	a5,a5,-1172 # 8003a9b0 <xParameters>
80007e4c:	0087a703          	lw	a4,8(a5)
80007e50:	00033797          	auipc	a5,0x33
80007e54:	b7878793          	addi	a5,a5,-1160 # 8003a9c8 <uxLastCount0.1847>
80007e58:	00e7a023          	sw	a4,0(a5)
	}

	if( uxLastCount1 == xParameters[ 1 ].uxLoopCounter )
80007e5c:	00033797          	auipc	a5,0x33
80007e60:	b5478793          	addi	a5,a5,-1196 # 8003a9b0 <xParameters>
80007e64:	0147a703          	lw	a4,20(a5)
80007e68:	00033797          	auipc	a5,0x33
80007e6c:	b6478793          	addi	a5,a5,-1180 # 8003a9cc <uxLastCount1.1848>
80007e70:	0007a783          	lw	a5,0(a5)
80007e74:	00f71663          	bne	a4,a5,80007e80 <xAreCountingSemaphoreTasksStillRunning+0x88>
	{
		xReturn = pdFAIL;
80007e78:	fe042623          	sw	zero,-20(s0)
80007e7c:	01c0006f          	j	80007e98 <xAreCountingSemaphoreTasksStillRunning+0xa0>
	}
	else
	{
		uxLastCount1 = xParameters[ 1 ].uxLoopCounter;
80007e80:	00033797          	auipc	a5,0x33
80007e84:	b3078793          	addi	a5,a5,-1232 # 8003a9b0 <xParameters>
80007e88:	0147a703          	lw	a4,20(a5)
80007e8c:	00033797          	auipc	a5,0x33
80007e90:	b4078793          	addi	a5,a5,-1216 # 8003a9cc <uxLastCount1.1848>
80007e94:	00e7a023          	sw	a4,0(a5)
	}

	return xReturn;
80007e98:	fec42783          	lw	a5,-20(s0)
}
80007e9c:	00078513          	mv	a0,a5
80007ea0:	01c12403          	lw	s0,28(sp)
80007ea4:	02010113          	addi	sp,sp,32
80007ea8:	00008067          	ret

80007eac <vStartRecursiveMutexTasks>:
static TaskHandle_t xControllingTaskHandle, xBlockingTaskHandle;

/*-----------------------------------------------------------*/

void vStartRecursiveMutexTasks( void )
{
80007eac:	ff010113          	addi	sp,sp,-16
80007eb0:	00112623          	sw	ra,12(sp)
80007eb4:	00812423          	sw	s0,8(sp)
80007eb8:	01010413          	addi	s0,sp,16
	/* Just creates the mutex and the three tasks. */

	xMutex = xSemaphoreCreateRecursiveMutex();
80007ebc:	00400513          	li	a0,4
80007ec0:	db5f80ef          	jal	ra,80000c74 <xQueueCreateMutex>
80007ec4:	00050713          	mv	a4,a0
80007ec8:	00033797          	auipc	a5,0x33
80007ecc:	b0878793          	addi	a5,a5,-1272 # 8003a9d0 <xMutex>
80007ed0:	00e7a023          	sw	a4,0(a5)
	in use.  The registry is provided as a means for kernel aware
	debuggers to locate mutex and has no purpose if a kernel aware debugger
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
	defined to be less than 1. */
	vQueueAddToRegistry( ( QueueHandle_t ) xMutex, "Recursive_Mutex" );
80007ed4:	00033797          	auipc	a5,0x33
80007ed8:	afc78793          	addi	a5,a5,-1284 # 8003a9d0 <xMutex>
80007edc:	0007a783          	lw	a5,0(a5)
80007ee0:	00018597          	auipc	a1,0x18
80007ee4:	20058593          	addi	a1,a1,512 # 800200e0 <__rodata_start+0xe0>
80007ee8:	00078513          	mv	a0,a5
80007eec:	808fa0ef          	jal	ra,80001ef4 <vQueueAddToRegistry>


	if( xMutex != NULL )
80007ef0:	00033797          	auipc	a5,0x33
80007ef4:	ae078793          	addi	a5,a5,-1312 # 8003a9d0 <xMutex>
80007ef8:	0007a783          	lw	a5,0(a5)
80007efc:	08078863          	beqz	a5,80007f8c <vStartRecursiveMutexTasks+0xe0>
	{
		xTaskCreate( prvRecursiveMutexControllingTask, "Rec1", configMINIMAL_STACK_SIZE, NULL, recmuCONTROLLING_TASK_PRIORITY, &xControllingTaskHandle );
80007f00:	00000893          	li	a7,0
80007f04:	00000813          	li	a6,0
80007f08:	00033797          	auipc	a5,0x33
80007f0c:	ae478793          	addi	a5,a5,-1308 # 8003a9ec <xControllingTaskHandle>
80007f10:	00200713          	li	a4,2
80007f14:	00000693          	li	a3,0
80007f18:	40000613          	li	a2,1024
80007f1c:	00018597          	auipc	a1,0x18
80007f20:	1d458593          	addi	a1,a1,468 # 800200f0 <__rodata_start+0xf0>
80007f24:	00000517          	auipc	a0,0x0
80007f28:	07c50513          	addi	a0,a0,124 # 80007fa0 <prvRecursiveMutexControllingTask>
80007f2c:	97cfa0ef          	jal	ra,800020a8 <xTaskGenericCreate>
        xTaskCreate( prvRecursiveMutexBlockingTask, "Rec2", configMINIMAL_STACK_SIZE, NULL, recmuBLOCKING_TASK_PRIORITY, &xBlockingTaskHandle );
80007f30:	00000893          	li	a7,0
80007f34:	00000813          	li	a6,0
80007f38:	00033797          	auipc	a5,0x33
80007f3c:	ab878793          	addi	a5,a5,-1352 # 8003a9f0 <xBlockingTaskHandle>
80007f40:	00100713          	li	a4,1
80007f44:	00000693          	li	a3,0
80007f48:	40000613          	li	a2,1024
80007f4c:	00018597          	auipc	a1,0x18
80007f50:	1ac58593          	addi	a1,a1,428 # 800200f8 <__rodata_start+0xf8>
80007f54:	00000517          	auipc	a0,0x0
80007f58:	1b850513          	addi	a0,a0,440 # 8000810c <prvRecursiveMutexBlockingTask>
80007f5c:	94cfa0ef          	jal	ra,800020a8 <xTaskGenericCreate>
        xTaskCreate( prvRecursiveMutexPollingTask, "Rec3", configMINIMAL_STACK_SIZE, NULL, recmuPOLLING_TASK_PRIORITY, NULL );
80007f60:	00000893          	li	a7,0
80007f64:	00000813          	li	a6,0
80007f68:	00000793          	li	a5,0
80007f6c:	00000713          	li	a4,0
80007f70:	00000693          	li	a3,0
80007f74:	40000613          	li	a2,1024
80007f78:	00018597          	auipc	a1,0x18
80007f7c:	18858593          	addi	a1,a1,392 # 80020100 <__rodata_start+0x100>
80007f80:	00000517          	auipc	a0,0x0
80007f84:	2a450513          	addi	a0,a0,676 # 80008224 <prvRecursiveMutexPollingTask>
80007f88:	920fa0ef          	jal	ra,800020a8 <xTaskGenericCreate>
	}
}
80007f8c:	00000013          	nop
80007f90:	00c12083          	lw	ra,12(sp)
80007f94:	00812403          	lw	s0,8(sp)
80007f98:	01010113          	addi	sp,sp,16
80007f9c:	00008067          	ret

80007fa0 <prvRecursiveMutexControllingTask>:
/*-----------------------------------------------------------*/

static void prvRecursiveMutexControllingTask( void *pvParameters )
{
80007fa0:	fd010113          	addi	sp,sp,-48
80007fa4:	02112623          	sw	ra,44(sp)
80007fa8:	02812423          	sw	s0,40(sp)
80007fac:	03010413          	addi	s0,sp,48
80007fb0:	fca42e23          	sw	a0,-36(s0)
	{
		/* Should not be able to 'give' the mutex, as we have not yet 'taken'
		it.   The first time through, the mutex will not have been used yet,
		subsequent times through, at this point the mutex will be held by the
		polling task. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
80007fb4:	00033797          	auipc	a5,0x33
80007fb8:	a1c78793          	addi	a5,a5,-1508 # 8003a9d0 <xMutex>
80007fbc:	0007a783          	lw	a5,0(a5)
80007fc0:	00078513          	mv	a0,a5
80007fc4:	d89f80ef          	jal	ra,80000d4c <xQueueGiveMutexRecursive>
80007fc8:	00050713          	mv	a4,a0
80007fcc:	00100793          	li	a5,1
80007fd0:	00f71a63          	bne	a4,a5,80007fe4 <prvRecursiveMutexControllingTask+0x44>
		{
			xErrorOccurred = pdTRUE;
80007fd4:	00033797          	auipc	a5,0x33
80007fd8:	a0078793          	addi	a5,a5,-1536 # 8003a9d4 <xErrorOccurred>
80007fdc:	00100713          	li	a4,1
80007fe0:	00e7a023          	sw	a4,0(a5)
		}

		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
80007fe4:	fe042623          	sw	zero,-20(s0)
80007fe8:	04c0006f          	j	80008034 <prvRecursiveMutexControllingTask+0x94>
			at this point and this Take will cause the polling task to inherit
			the priority of this task.  In this case the block time must be
			long enough to ensure the polling task will execute again before the
			block time expires.  If the block time does expire then the error
			flag will be set here. */
			if( xSemaphoreTakeRecursive( xMutex, recmuEIGHT_TICK_DELAY ) != pdPASS )
80007fec:	00033797          	auipc	a5,0x33
80007ff0:	9e478793          	addi	a5,a5,-1564 # 8003a9d0 <xMutex>
80007ff4:	0007a783          	lw	a5,0(a5)
80007ff8:	00800593          	li	a1,8
80007ffc:	00078513          	mv	a0,a5
80008000:	df1f80ef          	jal	ra,80000df0 <xQueueTakeMutexRecursive>
80008004:	00050713          	mv	a4,a0
80008008:	00100793          	li	a5,1
8000800c:	00f70a63          	beq	a4,a5,80008020 <prvRecursiveMutexControllingTask+0x80>
			{
				xErrorOccurred = pdTRUE;
80008010:	00033797          	auipc	a5,0x33
80008014:	9c478793          	addi	a5,a5,-1596 # 8003a9d4 <xErrorOccurred>
80008018:	00100713          	li	a4,1
8000801c:	00e7a023          	sw	a4,0(a5)

			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute to ensure they either block
			(where a block time is specified) or return an error (where no
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
80008020:	01400513          	li	a0,20
80008024:	d68fa0ef          	jal	ra,8000258c <vTaskDelay>
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
80008028:	fec42783          	lw	a5,-20(s0)
8000802c:	00178793          	addi	a5,a5,1
80008030:	fef42623          	sw	a5,-20(s0)
80008034:	fec42703          	lw	a4,-20(s0)
80008038:	00900793          	li	a5,9
8000803c:	fae7f8e3          	bleu	a4,a5,80007fec <prvRecursiveMutexControllingTask+0x4c>
		}

		/* For each time we took the mutex, give it back. */
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
80008040:	fe042623          	sw	zero,-20(s0)
80008044:	0480006f          	j	8000808c <prvRecursiveMutexControllingTask+0xec>
		{
			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute. */
			vTaskDelay( recmuSHORT_DELAY );
80008048:	01400513          	li	a0,20
8000804c:	d40fa0ef          	jal	ra,8000258c <vTaskDelay>
			/* We should now be able to give the mutex as many times as we
			took it.  When the mutex is available again the Blocking task
			should be unblocked but not run because it has a lower priority
			than this task.  The polling task should also not run at this point
			as it too has a lower priority than this task. */
			if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
80008050:	00033797          	auipc	a5,0x33
80008054:	98078793          	addi	a5,a5,-1664 # 8003a9d0 <xMutex>
80008058:	0007a783          	lw	a5,0(a5)
8000805c:	00078513          	mv	a0,a5
80008060:	cedf80ef          	jal	ra,80000d4c <xQueueGiveMutexRecursive>
80008064:	00050713          	mv	a4,a0
80008068:	00100793          	li	a5,1
8000806c:	00f70a63          	beq	a4,a5,80008080 <prvRecursiveMutexControllingTask+0xe0>
			{
				xErrorOccurred = pdTRUE;
80008070:	00033797          	auipc	a5,0x33
80008074:	96478793          	addi	a5,a5,-1692 # 8003a9d4 <xErrorOccurred>
80008078:	00100713          	li	a4,1
8000807c:	00e7a023          	sw	a4,0(a5)
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
80008080:	fec42783          	lw	a5,-20(s0)
80008084:	00178793          	addi	a5,a5,1
80008088:	fef42623          	sw	a5,-20(s0)
8000808c:	fec42703          	lw	a4,-20(s0)
80008090:	00900793          	li	a5,9
80008094:	fae7fae3          	bleu	a4,a5,80008048 <prvRecursiveMutexControllingTask+0xa8>
			#endif
		}

		/* Having given it back the same number of times as it was taken, we
		should no longer be the mutex owner, so the next give should fail. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
80008098:	00033797          	auipc	a5,0x33
8000809c:	93878793          	addi	a5,a5,-1736 # 8003a9d0 <xMutex>
800080a0:	0007a783          	lw	a5,0(a5)
800080a4:	00078513          	mv	a0,a5
800080a8:	ca5f80ef          	jal	ra,80000d4c <xQueueGiveMutexRecursive>
800080ac:	00050713          	mv	a4,a0
800080b0:	00100793          	li	a5,1
800080b4:	00f71a63          	bne	a4,a5,800080c8 <prvRecursiveMutexControllingTask+0x128>
		{
			xErrorOccurred = pdTRUE;
800080b8:	00033797          	auipc	a5,0x33
800080bc:	91c78793          	addi	a5,a5,-1764 # 8003a9d4 <xErrorOccurred>
800080c0:	00100713          	li	a4,1
800080c4:	00e7a023          	sw	a4,0(a5)
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxControllingCycles++;
800080c8:	00033797          	auipc	a5,0x33
800080cc:	91878793          	addi	a5,a5,-1768 # 8003a9e0 <uxControllingCycles>
800080d0:	0007a783          	lw	a5,0(a5)
800080d4:	00178713          	addi	a4,a5,1
800080d8:	00033797          	auipc	a5,0x33
800080dc:	90878793          	addi	a5,a5,-1784 # 8003a9e0 <uxControllingCycles>
800080e0:	00e7a023          	sw	a4,0(a5)

		/* Suspend ourselves so the blocking task can execute. */
		xControllingIsSuspended = pdTRUE;
800080e4:	00033797          	auipc	a5,0x33
800080e8:	8f478793          	addi	a5,a5,-1804 # 8003a9d8 <xControllingIsSuspended>
800080ec:	00100713          	li	a4,1
800080f0:	00e7a023          	sw	a4,0(a5)
		vTaskSuspend( NULL );
800080f4:	00000513          	li	a0,0
800080f8:	911fa0ef          	jal	ra,80002a08 <vTaskSuspend>
		xControllingIsSuspended = pdFALSE;
800080fc:	00033797          	auipc	a5,0x33
80008100:	8dc78793          	addi	a5,a5,-1828 # 8003a9d8 <xControllingIsSuspended>
80008104:	0007a023          	sw	zero,0(a5)
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
80008108:	eadff06f          	j	80007fb4 <prvRecursiveMutexControllingTask+0x14>

8000810c <prvRecursiveMutexBlockingTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexBlockingTask( void *pvParameters )
{
8000810c:	fe010113          	addi	sp,sp,-32
80008110:	00112e23          	sw	ra,28(sp)
80008114:	00812c23          	sw	s0,24(sp)
80008118:	02010413          	addi	s0,sp,32
8000811c:	fea42623          	sw	a0,-20(s0)
		this call should block until the controlling task has given up the
		mutex, and not actually execute	past this call until the controlling
		task is suspended.  portMAX_DELAY - 1 is used instead of portMAX_DELAY
		to ensure the task's state is reported as Blocked and not Suspended in
		a later call to configASSERT() (within the polling task). */
		if( xSemaphoreTakeRecursive( xMutex, ( portMAX_DELAY - 1 ) ) == pdPASS )
80008120:	00033797          	auipc	a5,0x33
80008124:	8b078793          	addi	a5,a5,-1872 # 8003a9d0 <xMutex>
80008128:	0007a783          	lw	a5,0(a5)
8000812c:	ffe00593          	li	a1,-2
80008130:	00078513          	mv	a0,a5
80008134:	cbdf80ef          	jal	ra,80000df0 <xQueueTakeMutexRecursive>
80008138:	00050713          	mv	a4,a0
8000813c:	00100793          	li	a5,1
80008140:	08f71263          	bne	a4,a5,800081c4 <prvRecursiveMutexBlockingTask+0xb8>
		{
			if( xControllingIsSuspended != pdTRUE )
80008144:	00033797          	auipc	a5,0x33
80008148:	89478793          	addi	a5,a5,-1900 # 8003a9d8 <xControllingIsSuspended>
8000814c:	0007a703          	lw	a4,0(a5)
80008150:	00100793          	li	a5,1
80008154:	00f70c63          	beq	a4,a5,8000816c <prvRecursiveMutexBlockingTask+0x60>
			{
				/* Did not expect to execute until the controlling task was
				suspended. */
				xErrorOccurred = pdTRUE;
80008158:	00033797          	auipc	a5,0x33
8000815c:	87c78793          	addi	a5,a5,-1924 # 8003a9d4 <xErrorOccurred>
80008160:	00100713          	li	a4,1
80008164:	00e7a023          	sw	a4,0(a5)
80008168:	06c0006f          	j	800081d4 <prvRecursiveMutexBlockingTask+0xc8>
			}
			else
			{
				/* Give the mutex back before suspending ourselves to allow
				the polling task to obtain the mutex. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
8000816c:	00033797          	auipc	a5,0x33
80008170:	86478793          	addi	a5,a5,-1948 # 8003a9d0 <xMutex>
80008174:	0007a783          	lw	a5,0(a5)
80008178:	00078513          	mv	a0,a5
8000817c:	bd1f80ef          	jal	ra,80000d4c <xQueueGiveMutexRecursive>
80008180:	00050713          	mv	a4,a0
80008184:	00100793          	li	a5,1
80008188:	00f70a63          	beq	a4,a5,8000819c <prvRecursiveMutexBlockingTask+0x90>
				{
					xErrorOccurred = pdTRUE;
8000818c:	00033797          	auipc	a5,0x33
80008190:	84878793          	addi	a5,a5,-1976 # 8003a9d4 <xErrorOccurred>
80008194:	00100713          	li	a4,1
80008198:	00e7a023          	sw	a4,0(a5)
				}

				xBlockingIsSuspended = pdTRUE;
8000819c:	00033797          	auipc	a5,0x33
800081a0:	84078793          	addi	a5,a5,-1984 # 8003a9dc <xBlockingIsSuspended>
800081a4:	00100713          	li	a4,1
800081a8:	00e7a023          	sw	a4,0(a5)
				vTaskSuspend( NULL );
800081ac:	00000513          	li	a0,0
800081b0:	859fa0ef          	jal	ra,80002a08 <vTaskSuspend>
				xBlockingIsSuspended = pdFALSE;
800081b4:	00033797          	auipc	a5,0x33
800081b8:	82878793          	addi	a5,a5,-2008 # 8003a9dc <xBlockingIsSuspended>
800081bc:	0007a023          	sw	zero,0(a5)
800081c0:	0140006f          	j	800081d4 <prvRecursiveMutexBlockingTask+0xc8>
		}
		else
		{
			/* We should not leave the xSemaphoreTakeRecursive() function
			until the mutex was obtained. */
			xErrorOccurred = pdTRUE;
800081c4:	00033797          	auipc	a5,0x33
800081c8:	81078793          	addi	a5,a5,-2032 # 8003a9d4 <xErrorOccurred>
800081cc:	00100713          	li	a4,1
800081d0:	00e7a023          	sw	a4,0(a5)
		}

		/* The controlling and blocking tasks should be in lock step. */
		if( uxControllingCycles != ( uxBlockingCycles + 1 ) )
800081d4:	00033797          	auipc	a5,0x33
800081d8:	81078793          	addi	a5,a5,-2032 # 8003a9e4 <uxBlockingCycles>
800081dc:	0007a783          	lw	a5,0(a5)
800081e0:	00178713          	addi	a4,a5,1
800081e4:	00032797          	auipc	a5,0x32
800081e8:	7fc78793          	addi	a5,a5,2044 # 8003a9e0 <uxControllingCycles>
800081ec:	0007a783          	lw	a5,0(a5)
800081f0:	00f70a63          	beq	a4,a5,80008204 <prvRecursiveMutexBlockingTask+0xf8>
		{
			xErrorOccurred = pdTRUE;
800081f4:	00032797          	auipc	a5,0x32
800081f8:	7e078793          	addi	a5,a5,2016 # 8003a9d4 <xErrorOccurred>
800081fc:	00100713          	li	a4,1
80008200:	00e7a023          	sw	a4,0(a5)
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxBlockingCycles++;
80008204:	00032797          	auipc	a5,0x32
80008208:	7e078793          	addi	a5,a5,2016 # 8003a9e4 <uxBlockingCycles>
8000820c:	0007a783          	lw	a5,0(a5)
80008210:	00178713          	addi	a4,a5,1
80008214:	00032797          	auipc	a5,0x32
80008218:	7d078793          	addi	a5,a5,2000 # 8003a9e4 <uxBlockingCycles>
8000821c:	00e7a023          	sw	a4,0(a5)
		if( xSemaphoreTakeRecursive( xMutex, ( portMAX_DELAY - 1 ) ) == pdPASS )
80008220:	f01ff06f          	j	80008120 <prvRecursiveMutexBlockingTask+0x14>

80008224 <prvRecursiveMutexPollingTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexPollingTask( void *pvParameters )
{
80008224:	fe010113          	addi	sp,sp,-32
80008228:	00112e23          	sw	ra,28(sp)
8000822c:	00812c23          	sw	s0,24(sp)
80008230:	02010413          	addi	s0,sp,32
80008234:	fea42623          	sw	a0,-20(s0)
	for( ;; )
	{
		/* Keep attempting to obtain the mutex.  We should only obtain it when
		the blocking task has suspended itself, which in turn should only
		happen when the controlling task is also suspended. */
		if( xSemaphoreTakeRecursive( xMutex, recmuNO_DELAY ) == pdPASS )
80008238:	00032797          	auipc	a5,0x32
8000823c:	79878793          	addi	a5,a5,1944 # 8003a9d0 <xMutex>
80008240:	0007a783          	lw	a5,0(a5)
80008244:	00000593          	li	a1,0
80008248:	00078513          	mv	a0,a5
8000824c:	ba5f80ef          	jal	ra,80000df0 <xQueueTakeMutexRecursive>
80008250:	00050713          	mv	a4,a0
80008254:	00100793          	li	a5,1
80008258:	fef710e3          	bne	a4,a5,80008238 <prvRecursiveMutexPollingTask+0x14>
		{
			#if( INCLUDE_eTaskGetState == 1 )
			{
				configASSERT( eTaskGetState( xControllingTaskHandle ) == eSuspended );
8000825c:	00032797          	auipc	a5,0x32
80008260:	79078793          	addi	a5,a5,1936 # 8003a9ec <xControllingTaskHandle>
80008264:	0007a783          	lw	a5,0(a5)
80008268:	00078513          	mv	a0,a5
8000826c:	bbcfa0ef          	jal	ra,80002628 <eTaskGetState>
80008270:	00050713          	mv	a4,a0
80008274:	00300793          	li	a5,3
80008278:	00f70663          	beq	a4,a5,80008284 <prvRecursiveMutexPollingTask+0x60>
8000827c:	30007073          	csrci	mstatus,0
80008280:	0000006f          	j	80008280 <prvRecursiveMutexPollingTask+0x5c>
				configASSERT( eTaskGetState( xBlockingTaskHandle ) == eSuspended );
80008284:	00032797          	auipc	a5,0x32
80008288:	76c78793          	addi	a5,a5,1900 # 8003a9f0 <xBlockingTaskHandle>
8000828c:	0007a783          	lw	a5,0(a5)
80008290:	00078513          	mv	a0,a5
80008294:	b94fa0ef          	jal	ra,80002628 <eTaskGetState>
80008298:	00050713          	mv	a4,a0
8000829c:	00300793          	li	a5,3
800082a0:	00f70663          	beq	a4,a5,800082ac <prvRecursiveMutexPollingTask+0x88>
800082a4:	30007073          	csrci	mstatus,0
800082a8:	0000006f          	j	800082a8 <prvRecursiveMutexPollingTask+0x84>
			}
			#endif /* INCLUDE_eTaskGetState */

			/* Is the blocking task suspended? */
			if( ( xBlockingIsSuspended != pdTRUE ) || ( xControllingIsSuspended != pdTRUE ) )
800082ac:	00032797          	auipc	a5,0x32
800082b0:	73078793          	addi	a5,a5,1840 # 8003a9dc <xBlockingIsSuspended>
800082b4:	0007a703          	lw	a4,0(a5)
800082b8:	00100793          	li	a5,1
800082bc:	00f71c63          	bne	a4,a5,800082d4 <prvRecursiveMutexPollingTask+0xb0>
800082c0:	00032797          	auipc	a5,0x32
800082c4:	71878793          	addi	a5,a5,1816 # 8003a9d8 <xControllingIsSuspended>
800082c8:	0007a703          	lw	a4,0(a5)
800082cc:	00100793          	li	a5,1
800082d0:	00f70c63          	beq	a4,a5,800082e8 <prvRecursiveMutexPollingTask+0xc4>
			{
				xErrorOccurred = pdTRUE;
800082d4:	00032797          	auipc	a5,0x32
800082d8:	70078793          	addi	a5,a5,1792 # 8003a9d4 <xErrorOccurred>
800082dc:	00100713          	li	a4,1
800082e0:	00e7a023          	sw	a4,0(a5)
800082e4:	1340006f          	j	80008418 <prvRecursiveMutexPollingTask+0x1f4>
			}
			else
			{
				/* Keep count of the number of cycles this task has performed
				so a stall can be detected. */
				uxPollingCycles++;
800082e8:	00032797          	auipc	a5,0x32
800082ec:	70078793          	addi	a5,a5,1792 # 8003a9e8 <uxPollingCycles>
800082f0:	0007a783          	lw	a5,0(a5)
800082f4:	00178713          	addi	a4,a5,1
800082f8:	00032797          	auipc	a5,0x32
800082fc:	6f078793          	addi	a5,a5,1776 # 8003a9e8 <uxPollingCycles>
80008300:	00e7a023          	sw	a4,0(a5)
				will then inherit the higher priority.  The Blocking task will
				block indefinitely when it attempts to obtain the mutex, the
				Controlling task will only block for a fixed period and an
				error will be latched if the polling task has not returned the
				mutex by the time this fixed period has expired. */
				vTaskResume( xBlockingTaskHandle );
80008304:	00032797          	auipc	a5,0x32
80008308:	6ec78793          	addi	a5,a5,1772 # 8003a9f0 <xBlockingTaskHandle>
8000830c:	0007a783          	lw	a5,0(a5)
80008310:	00078513          	mv	a0,a5
80008314:	8b9fa0ef          	jal	ra,80002bcc <vTaskResume>
				#if( configUSE_PREEMPTION == 0 )
					taskYIELD();
				#endif

				vTaskResume( xControllingTaskHandle );
80008318:	00032797          	auipc	a5,0x32
8000831c:	6d478793          	addi	a5,a5,1748 # 8003a9ec <xControllingTaskHandle>
80008320:	0007a783          	lw	a5,0(a5)
80008324:	00078513          	mv	a0,a5
80008328:	8a5fa0ef          	jal	ra,80002bcc <vTaskResume>
					taskYIELD();
				#endif

				/* The other two tasks should now have executed and no longer
				be suspended. */
				if( ( xBlockingIsSuspended == pdTRUE ) || ( xControllingIsSuspended == pdTRUE ) )
8000832c:	00032797          	auipc	a5,0x32
80008330:	6b078793          	addi	a5,a5,1712 # 8003a9dc <xBlockingIsSuspended>
80008334:	0007a703          	lw	a4,0(a5)
80008338:	00100793          	li	a5,1
8000833c:	00f70c63          	beq	a4,a5,80008354 <prvRecursiveMutexPollingTask+0x130>
80008340:	00032797          	auipc	a5,0x32
80008344:	69878793          	addi	a5,a5,1688 # 8003a9d8 <xControllingIsSuspended>
80008348:	0007a703          	lw	a4,0(a5)
8000834c:	00100793          	li	a5,1
80008350:	00f71a63          	bne	a4,a5,80008364 <prvRecursiveMutexPollingTask+0x140>
				{
					xErrorOccurred = pdTRUE;
80008354:	00032797          	auipc	a5,0x32
80008358:	68078793          	addi	a5,a5,1664 # 8003a9d4 <xErrorOccurred>
8000835c:	00100713          	li	a4,1
80008360:	00e7a023          	sw	a4,0(a5)
				}

				#if( INCLUDE_uxTaskPriorityGet == 1 )
				{
					/* Check priority inherited. */
					configASSERT( uxTaskPriorityGet( NULL ) == recmuCONTROLLING_TASK_PRIORITY );
80008364:	00000513          	li	a0,0
80008368:	bc0fa0ef          	jal	ra,80002728 <uxTaskPriorityGet>
8000836c:	00050713          	mv	a4,a0
80008370:	00200793          	li	a5,2
80008374:	00f70663          	beq	a4,a5,80008380 <prvRecursiveMutexPollingTask+0x15c>
80008378:	30007073          	csrci	mstatus,0
8000837c:	0000006f          	j	8000837c <prvRecursiveMutexPollingTask+0x158>
				}
				#endif /* INCLUDE_uxTaskPriorityGet */

				#if( INCLUDE_eTaskGetState == 1 )
				{
					configASSERT( eTaskGetState( xControllingTaskHandle ) == eBlocked );
80008380:	00032797          	auipc	a5,0x32
80008384:	66c78793          	addi	a5,a5,1644 # 8003a9ec <xControllingTaskHandle>
80008388:	0007a783          	lw	a5,0(a5)
8000838c:	00078513          	mv	a0,a5
80008390:	a98fa0ef          	jal	ra,80002628 <eTaskGetState>
80008394:	00050713          	mv	a4,a0
80008398:	00200793          	li	a5,2
8000839c:	00f70663          	beq	a4,a5,800083a8 <prvRecursiveMutexPollingTask+0x184>
800083a0:	30007073          	csrci	mstatus,0
800083a4:	0000006f          	j	800083a4 <prvRecursiveMutexPollingTask+0x180>
					configASSERT( eTaskGetState( xBlockingTaskHandle ) == eBlocked );
800083a8:	00032797          	auipc	a5,0x32
800083ac:	64878793          	addi	a5,a5,1608 # 8003a9f0 <xBlockingTaskHandle>
800083b0:	0007a783          	lw	a5,0(a5)
800083b4:	00078513          	mv	a0,a5
800083b8:	a70fa0ef          	jal	ra,80002628 <eTaskGetState>
800083bc:	00050713          	mv	a4,a0
800083c0:	00200793          	li	a5,2
800083c4:	00f70663          	beq	a4,a5,800083d0 <prvRecursiveMutexPollingTask+0x1ac>
800083c8:	30007073          	csrci	mstatus,0
800083cc:	0000006f          	j	800083cc <prvRecursiveMutexPollingTask+0x1a8>
				}
				#endif /* INCLUDE_eTaskGetState */

				/* Release the mutex, disinheriting the higher priority again. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
800083d0:	00032797          	auipc	a5,0x32
800083d4:	60078793          	addi	a5,a5,1536 # 8003a9d0 <xMutex>
800083d8:	0007a783          	lw	a5,0(a5)
800083dc:	00078513          	mv	a0,a5
800083e0:	96df80ef          	jal	ra,80000d4c <xQueueGiveMutexRecursive>
800083e4:	00050713          	mv	a4,a0
800083e8:	00100793          	li	a5,1
800083ec:	00f70a63          	beq	a4,a5,80008400 <prvRecursiveMutexPollingTask+0x1dc>
				{
					xErrorOccurred = pdTRUE;
800083f0:	00032797          	auipc	a5,0x32
800083f4:	5e478793          	addi	a5,a5,1508 # 8003a9d4 <xErrorOccurred>
800083f8:	00100713          	li	a4,1
800083fc:	00e7a023          	sw	a4,0(a5)
				}

				#if( INCLUDE_uxTaskPriorityGet == 1 )
				{
					/* Check priority disinherited. */
					configASSERT( uxTaskPriorityGet( NULL ) == recmuPOLLING_TASK_PRIORITY );
80008400:	00000513          	li	a0,0
80008404:	b24fa0ef          	jal	ra,80002728 <uxTaskPriorityGet>
80008408:	00050793          	mv	a5,a0
8000840c:	e20786e3          	beqz	a5,80008238 <prvRecursiveMutexPollingTask+0x14>
80008410:	30007073          	csrci	mstatus,0
80008414:	0000006f          	j	80008414 <prvRecursiveMutexPollingTask+0x1f0>
		if( xSemaphoreTakeRecursive( xMutex, recmuNO_DELAY ) == pdPASS )
80008418:	e21ff06f          	j	80008238 <prvRecursiveMutexPollingTask+0x14>

8000841c <xAreRecursiveMutexTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreRecursiveMutexTasksStillRunning( void )
{
8000841c:	fe010113          	addi	sp,sp,-32
80008420:	00812e23          	sw	s0,28(sp)
80008424:	02010413          	addi	s0,sp,32
BaseType_t xReturn;
static UBaseType_t uxLastControllingCycles = 0, uxLastBlockingCycles = 0, uxLastPollingCycles = 0;

	/* Is the controlling task still cycling? */
	if( uxLastControllingCycles == uxControllingCycles )
80008428:	00032797          	auipc	a5,0x32
8000842c:	5cc78793          	addi	a5,a5,1484 # 8003a9f4 <uxLastControllingCycles.1852>
80008430:	0007a703          	lw	a4,0(a5)
80008434:	00032797          	auipc	a5,0x32
80008438:	5ac78793          	addi	a5,a5,1452 # 8003a9e0 <uxControllingCycles>
8000843c:	0007a783          	lw	a5,0(a5)
80008440:	00f71c63          	bne	a4,a5,80008458 <xAreRecursiveMutexTasksStillRunning+0x3c>
	{
		xErrorOccurred = pdTRUE;
80008444:	00032797          	auipc	a5,0x32
80008448:	59078793          	addi	a5,a5,1424 # 8003a9d4 <xErrorOccurred>
8000844c:	00100713          	li	a4,1
80008450:	00e7a023          	sw	a4,0(a5)
80008454:	01c0006f          	j	80008470 <xAreRecursiveMutexTasksStillRunning+0x54>
	}
	else
	{
		uxLastControllingCycles = uxControllingCycles;
80008458:	00032797          	auipc	a5,0x32
8000845c:	58878793          	addi	a5,a5,1416 # 8003a9e0 <uxControllingCycles>
80008460:	0007a703          	lw	a4,0(a5)
80008464:	00032797          	auipc	a5,0x32
80008468:	59078793          	addi	a5,a5,1424 # 8003a9f4 <uxLastControllingCycles.1852>
8000846c:	00e7a023          	sw	a4,0(a5)
	}

	/* Is the blocking task still cycling? */
	if( uxLastBlockingCycles == uxBlockingCycles )
80008470:	00032797          	auipc	a5,0x32
80008474:	58878793          	addi	a5,a5,1416 # 8003a9f8 <uxLastBlockingCycles.1853>
80008478:	0007a703          	lw	a4,0(a5)
8000847c:	00032797          	auipc	a5,0x32
80008480:	56878793          	addi	a5,a5,1384 # 8003a9e4 <uxBlockingCycles>
80008484:	0007a783          	lw	a5,0(a5)
80008488:	00f71c63          	bne	a4,a5,800084a0 <xAreRecursiveMutexTasksStillRunning+0x84>
	{
		xErrorOccurred = pdTRUE;
8000848c:	00032797          	auipc	a5,0x32
80008490:	54878793          	addi	a5,a5,1352 # 8003a9d4 <xErrorOccurred>
80008494:	00100713          	li	a4,1
80008498:	00e7a023          	sw	a4,0(a5)
8000849c:	01c0006f          	j	800084b8 <xAreRecursiveMutexTasksStillRunning+0x9c>
	}
	else
	{
		uxLastBlockingCycles = uxBlockingCycles;
800084a0:	00032797          	auipc	a5,0x32
800084a4:	54478793          	addi	a5,a5,1348 # 8003a9e4 <uxBlockingCycles>
800084a8:	0007a703          	lw	a4,0(a5)
800084ac:	00032797          	auipc	a5,0x32
800084b0:	54c78793          	addi	a5,a5,1356 # 8003a9f8 <uxLastBlockingCycles.1853>
800084b4:	00e7a023          	sw	a4,0(a5)
	}

	/* Is the polling task still cycling? */
	if( uxLastPollingCycles == uxPollingCycles )
800084b8:	00032797          	auipc	a5,0x32
800084bc:	54478793          	addi	a5,a5,1348 # 8003a9fc <uxLastPollingCycles.1854>
800084c0:	0007a703          	lw	a4,0(a5)
800084c4:	00032797          	auipc	a5,0x32
800084c8:	52478793          	addi	a5,a5,1316 # 8003a9e8 <uxPollingCycles>
800084cc:	0007a783          	lw	a5,0(a5)
800084d0:	00f71c63          	bne	a4,a5,800084e8 <xAreRecursiveMutexTasksStillRunning+0xcc>
	{
		xErrorOccurred = pdTRUE;
800084d4:	00032797          	auipc	a5,0x32
800084d8:	50078793          	addi	a5,a5,1280 # 8003a9d4 <xErrorOccurred>
800084dc:	00100713          	li	a4,1
800084e0:	00e7a023          	sw	a4,0(a5)
800084e4:	01c0006f          	j	80008500 <xAreRecursiveMutexTasksStillRunning+0xe4>
	}
	else
	{
		uxLastPollingCycles = uxPollingCycles;
800084e8:	00032797          	auipc	a5,0x32
800084ec:	50078793          	addi	a5,a5,1280 # 8003a9e8 <uxPollingCycles>
800084f0:	0007a703          	lw	a4,0(a5)
800084f4:	00032797          	auipc	a5,0x32
800084f8:	50878793          	addi	a5,a5,1288 # 8003a9fc <uxLastPollingCycles.1854>
800084fc:	00e7a023          	sw	a4,0(a5)
	}

	if( xErrorOccurred == pdTRUE )
80008500:	00032797          	auipc	a5,0x32
80008504:	4d478793          	addi	a5,a5,1236 # 8003a9d4 <xErrorOccurred>
80008508:	0007a703          	lw	a4,0(a5)
8000850c:	00100793          	li	a5,1
80008510:	00f71663          	bne	a4,a5,8000851c <xAreRecursiveMutexTasksStillRunning+0x100>
	{
		xReturn = pdFAIL;
80008514:	fe042623          	sw	zero,-20(s0)
80008518:	00c0006f          	j	80008524 <xAreRecursiveMutexTasksStillRunning+0x108>
	}
	else
	{
		xReturn = pdPASS;
8000851c:	00100793          	li	a5,1
80008520:	fef42623          	sw	a5,-20(s0)
	}

	return xReturn;
80008524:	fec42783          	lw	a5,-20(s0)
}
80008528:	00078513          	mv	a0,a5
8000852c:	01c12403          	lw	s0,28(sp)
80008530:	02010113          	addi	sp,sp,32
80008534:	00008067          	ret

80008538 <__errno>:
80008538:	800217b7          	lui	a5,0x80021
8000853c:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
80008540:	00008067          	ret

80008544 <memcpy>:
80008544:	00a5c7b3          	xor	a5,a1,a0
80008548:	0037f793          	andi	a5,a5,3
8000854c:	00c50733          	add	a4,a0,a2
80008550:	00079663          	bnez	a5,8000855c <memcpy+0x18>
80008554:	00300793          	li	a5,3
80008558:	02c7e463          	bltu	a5,a2,80008580 <memcpy+0x3c>
8000855c:	00050793          	mv	a5,a0
80008560:	00e56c63          	bltu	a0,a4,80008578 <memcpy+0x34>
80008564:	00008067          	ret
80008568:	0005c683          	lbu	a3,0(a1)
8000856c:	00178793          	addi	a5,a5,1
80008570:	00158593          	addi	a1,a1,1
80008574:	fed78fa3          	sb	a3,-1(a5)
80008578:	fee7e8e3          	bltu	a5,a4,80008568 <memcpy+0x24>
8000857c:	00008067          	ret
80008580:	00357793          	andi	a5,a0,3
80008584:	08079263          	bnez	a5,80008608 <memcpy+0xc4>
80008588:	00050793          	mv	a5,a0
8000858c:	ffc77693          	andi	a3,a4,-4
80008590:	fe068613          	addi	a2,a3,-32
80008594:	08c7f663          	bleu	a2,a5,80008620 <memcpy+0xdc>
80008598:	0005a383          	lw	t2,0(a1)
8000859c:	0045a283          	lw	t0,4(a1)
800085a0:	0085af83          	lw	t6,8(a1)
800085a4:	00c5af03          	lw	t5,12(a1)
800085a8:	0105ae83          	lw	t4,16(a1)
800085ac:	0145ae03          	lw	t3,20(a1)
800085b0:	0185a303          	lw	t1,24(a1)
800085b4:	01c5a883          	lw	a7,28(a1)
800085b8:	02458593          	addi	a1,a1,36
800085bc:	02478793          	addi	a5,a5,36
800085c0:	ffc5a803          	lw	a6,-4(a1)
800085c4:	fc77ae23          	sw	t2,-36(a5)
800085c8:	fe57a023          	sw	t0,-32(a5)
800085cc:	fff7a223          	sw	t6,-28(a5)
800085d0:	ffe7a423          	sw	t5,-24(a5)
800085d4:	ffd7a623          	sw	t4,-20(a5)
800085d8:	ffc7a823          	sw	t3,-16(a5)
800085dc:	fe67aa23          	sw	t1,-12(a5)
800085e0:	ff17ac23          	sw	a7,-8(a5)
800085e4:	ff07ae23          	sw	a6,-4(a5)
800085e8:	fadff06f          	j	80008594 <memcpy+0x50>
800085ec:	0005c683          	lbu	a3,0(a1)
800085f0:	00178793          	addi	a5,a5,1
800085f4:	00158593          	addi	a1,a1,1
800085f8:	fed78fa3          	sb	a3,-1(a5)
800085fc:	0037f693          	andi	a3,a5,3
80008600:	fe0696e3          	bnez	a3,800085ec <memcpy+0xa8>
80008604:	f89ff06f          	j	8000858c <memcpy+0x48>
80008608:	00050793          	mv	a5,a0
8000860c:	ff1ff06f          	j	800085fc <memcpy+0xb8>
80008610:	0005a603          	lw	a2,0(a1)
80008614:	00478793          	addi	a5,a5,4
80008618:	00458593          	addi	a1,a1,4
8000861c:	fec7ae23          	sw	a2,-4(a5)
80008620:	fed7e8e3          	bltu	a5,a3,80008610 <memcpy+0xcc>
80008624:	f4e7eae3          	bltu	a5,a4,80008578 <memcpy+0x34>
80008628:	00008067          	ret

8000862c <memset>:
8000862c:	00f00313          	li	t1,15
80008630:	00050713          	mv	a4,a0
80008634:	02c37e63          	bleu	a2,t1,80008670 <memset+0x44>
80008638:	00f77793          	andi	a5,a4,15
8000863c:	0a079063          	bnez	a5,800086dc <memset+0xb0>
80008640:	08059263          	bnez	a1,800086c4 <memset+0x98>
80008644:	ff067693          	andi	a3,a2,-16
80008648:	00f67613          	andi	a2,a2,15
8000864c:	00e686b3          	add	a3,a3,a4
80008650:	00b72023          	sw	a1,0(a4)
80008654:	00b72223          	sw	a1,4(a4)
80008658:	00b72423          	sw	a1,8(a4)
8000865c:	00b72623          	sw	a1,12(a4)
80008660:	01070713          	addi	a4,a4,16
80008664:	fed766e3          	bltu	a4,a3,80008650 <memset+0x24>
80008668:	00061463          	bnez	a2,80008670 <memset+0x44>
8000866c:	00008067          	ret
80008670:	40c306b3          	sub	a3,t1,a2
80008674:	00269693          	slli	a3,a3,0x2
80008678:	00000297          	auipc	t0,0x0
8000867c:	005686b3          	add	a3,a3,t0
80008680:	00c68067          	jr	12(a3)
80008684:	00b70723          	sb	a1,14(a4)
80008688:	00b706a3          	sb	a1,13(a4)
8000868c:	00b70623          	sb	a1,12(a4)
80008690:	00b705a3          	sb	a1,11(a4)
80008694:	00b70523          	sb	a1,10(a4)
80008698:	00b704a3          	sb	a1,9(a4)
8000869c:	00b70423          	sb	a1,8(a4)
800086a0:	00b703a3          	sb	a1,7(a4)
800086a4:	00b70323          	sb	a1,6(a4)
800086a8:	00b702a3          	sb	a1,5(a4)
800086ac:	00b70223          	sb	a1,4(a4)
800086b0:	00b701a3          	sb	a1,3(a4)
800086b4:	00b70123          	sb	a1,2(a4)
800086b8:	00b700a3          	sb	a1,1(a4)
800086bc:	00b70023          	sb	a1,0(a4)
800086c0:	00008067          	ret
800086c4:	0ff5f593          	andi	a1,a1,255
800086c8:	00859693          	slli	a3,a1,0x8
800086cc:	00d5e5b3          	or	a1,a1,a3
800086d0:	01059693          	slli	a3,a1,0x10
800086d4:	00d5e5b3          	or	a1,a1,a3
800086d8:	f6dff06f          	j	80008644 <memset+0x18>
800086dc:	00279693          	slli	a3,a5,0x2
800086e0:	00000297          	auipc	t0,0x0
800086e4:	005686b3          	add	a3,a3,t0
800086e8:	00008293          	mv	t0,ra
800086ec:	fa0680e7          	jalr	-96(a3)
800086f0:	00028093          	mv	ra,t0
800086f4:	ff078793          	addi	a5,a5,-16
800086f8:	40f70733          	sub	a4,a4,a5
800086fc:	00f60633          	add	a2,a2,a5
80008700:	f6c378e3          	bleu	a2,t1,80008670 <memset+0x44>
80008704:	f3dff06f          	j	80008640 <memset+0x14>

80008708 <_printf_r>:
80008708:	fc010113          	addi	sp,sp,-64
8000870c:	02c12423          	sw	a2,40(sp)
80008710:	02d12623          	sw	a3,44(sp)
80008714:	02e12823          	sw	a4,48(sp)
80008718:	02f12a23          	sw	a5,52(sp)
8000871c:	03012c23          	sw	a6,56(sp)
80008720:	03112e23          	sw	a7,60(sp)
80008724:	00058613          	mv	a2,a1
80008728:	00852583          	lw	a1,8(a0)
8000872c:	02810693          	addi	a3,sp,40
80008730:	00112e23          	sw	ra,28(sp)
80008734:	00d12623          	sw	a3,12(sp)
80008738:	060000ef          	jal	ra,80008798 <_vfprintf_r>
8000873c:	01c12083          	lw	ra,28(sp)
80008740:	04010113          	addi	sp,sp,64
80008744:	00008067          	ret

80008748 <printf>:
80008748:	fc010113          	addi	sp,sp,-64
8000874c:	02f12a23          	sw	a5,52(sp)
80008750:	800217b7          	lui	a5,0x80021
80008754:	e647a783          	lw	a5,-412(a5) # 80020e64 <__stack+0xfffe4398>
80008758:	02c12423          	sw	a2,40(sp)
8000875c:	02d12623          	sw	a3,44(sp)
80008760:	02b12223          	sw	a1,36(sp)
80008764:	02e12823          	sw	a4,48(sp)
80008768:	03012c23          	sw	a6,56(sp)
8000876c:	03112e23          	sw	a7,60(sp)
80008770:	0087a583          	lw	a1,8(a5)
80008774:	02410693          	addi	a3,sp,36
80008778:	00050613          	mv	a2,a0
8000877c:	00078513          	mv	a0,a5
80008780:	00112e23          	sw	ra,28(sp)
80008784:	00d12623          	sw	a3,12(sp)
80008788:	010000ef          	jal	ra,80008798 <_vfprintf_r>
8000878c:	01c12083          	lw	ra,28(sp)
80008790:	04010113          	addi	sp,sp,64
80008794:	00008067          	ret

80008798 <_vfprintf_r>:
80008798:	e2010113          	addi	sp,sp,-480
8000879c:	1c112e23          	sw	ra,476(sp)
800087a0:	1c912a23          	sw	s1,468(sp)
800087a4:	1d212823          	sw	s2,464(sp)
800087a8:	1d312623          	sw	s3,460(sp)
800087ac:	1d512223          	sw	s5,452(sp)
800087b0:	00058913          	mv	s2,a1
800087b4:	00060493          	mv	s1,a2
800087b8:	00068a93          	mv	s5,a3
800087bc:	1c812c23          	sw	s0,472(sp)
800087c0:	1d412423          	sw	s4,456(sp)
800087c4:	1d612023          	sw	s6,448(sp)
800087c8:	1b712e23          	sw	s7,444(sp)
800087cc:	1b812c23          	sw	s8,440(sp)
800087d0:	1b912a23          	sw	s9,436(sp)
800087d4:	1ba12823          	sw	s10,432(sp)
800087d8:	1bb12623          	sw	s11,428(sp)
800087dc:	00050993          	mv	s3,a0
800087e0:	3a5040ef          	jal	ra,8000d384 <_localeconv_r>
800087e4:	00052783          	lw	a5,0(a0)
800087e8:	00078513          	mv	a0,a5
800087ec:	02f12a23          	sw	a5,52(sp)
800087f0:	069060ef          	jal	ra,8000f058 <strlen>
800087f4:	02a12023          	sw	a0,32(sp)
800087f8:	0e012023          	sw	zero,224(sp)
800087fc:	0e012223          	sw	zero,228(sp)
80008800:	0e012423          	sw	zero,232(sp)
80008804:	0e012623          	sw	zero,236(sp)
80008808:	00098a63          	beqz	s3,8000881c <_vfprintf_r+0x84>
8000880c:	0389a783          	lw	a5,56(s3)
80008810:	00079663          	bnez	a5,8000881c <_vfprintf_r+0x84>
80008814:	00098513          	mv	a0,s3
80008818:	4c8020ef          	jal	ra,8000ace0 <__sinit>
8000881c:	00c91783          	lh	a5,12(s2)
80008820:	01279713          	slli	a4,a5,0x12
80008824:	02074263          	bltz	a4,80008848 <_vfprintf_r+0xb0>
80008828:	000026b7          	lui	a3,0x2
8000882c:	06492703          	lw	a4,100(s2)
80008830:	00d7e7b3          	or	a5,a5,a3
80008834:	00f91623          	sh	a5,12(s2)
80008838:	ffffe7b7          	lui	a5,0xffffe
8000883c:	fff78793          	addi	a5,a5,-1 # ffffdfff <__stack+0x7ffc1533>
80008840:	00f777b3          	and	a5,a4,a5
80008844:	06f92223          	sw	a5,100(s2)
80008848:	00c95783          	lhu	a5,12(s2)
8000884c:	0087f793          	andi	a5,a5,8
80008850:	06078e63          	beqz	a5,800088cc <_vfprintf_r+0x134>
80008854:	01092783          	lw	a5,16(s2)
80008858:	06078a63          	beqz	a5,800088cc <_vfprintf_r+0x134>
8000885c:	00c95783          	lhu	a5,12(s2)
80008860:	00a00713          	li	a4,10
80008864:	01a7f793          	andi	a5,a5,26
80008868:	08e79063          	bne	a5,a4,800088e8 <_vfprintf_r+0x150>
8000886c:	00e91783          	lh	a5,14(s2)
80008870:	0607cc63          	bltz	a5,800088e8 <_vfprintf_r+0x150>
80008874:	000a8693          	mv	a3,s5
80008878:	00048613          	mv	a2,s1
8000887c:	00090593          	mv	a1,s2
80008880:	00098513          	mv	a0,s3
80008884:	6c5010ef          	jal	ra,8000a748 <__sbprintf>
80008888:	02a12223          	sw	a0,36(sp)
8000888c:	1dc12083          	lw	ra,476(sp)
80008890:	1d812403          	lw	s0,472(sp)
80008894:	02412503          	lw	a0,36(sp)
80008898:	1d412483          	lw	s1,468(sp)
8000889c:	1d012903          	lw	s2,464(sp)
800088a0:	1cc12983          	lw	s3,460(sp)
800088a4:	1c812a03          	lw	s4,456(sp)
800088a8:	1c412a83          	lw	s5,452(sp)
800088ac:	1c012b03          	lw	s6,448(sp)
800088b0:	1bc12b83          	lw	s7,444(sp)
800088b4:	1b812c03          	lw	s8,440(sp)
800088b8:	1b412c83          	lw	s9,436(sp)
800088bc:	1b012d03          	lw	s10,432(sp)
800088c0:	1ac12d83          	lw	s11,428(sp)
800088c4:	1e010113          	addi	sp,sp,480
800088c8:	00008067          	ret
800088cc:	00090593          	mv	a1,s2
800088d0:	00098513          	mv	a0,s3
800088d4:	731010ef          	jal	ra,8000a804 <__swsetup_r>
800088d8:	f80502e3          	beqz	a0,8000885c <_vfprintf_r+0xc4>
800088dc:	fff00793          	li	a5,-1
800088e0:	02f12223          	sw	a5,36(sp)
800088e4:	fa9ff06f          	j	8000888c <_vfprintf_r+0xf4>
800088e8:	800207b7          	lui	a5,0x80020
800088ec:	10878793          	addi	a5,a5,264 # 80020108 <__stack+0xfffe363c>
800088f0:	04f12623          	sw	a5,76(sp)
800088f4:	800207b7          	lui	a5,0x80020
800088f8:	0fc10893          	addi	a7,sp,252
800088fc:	28478793          	addi	a5,a5,644 # 80020284 <__stack+0xfffe37b8>
80008900:	0d112a23          	sw	a7,212(sp)
80008904:	0c012e23          	sw	zero,220(sp)
80008908:	0c012c23          	sw	zero,216(sp)
8000890c:	00000a13          	li	s4,0
80008910:	04012023          	sw	zero,64(sp)
80008914:	02012e23          	sw	zero,60(sp)
80008918:	00012823          	sw	zero,16(sp)
8000891c:	02012823          	sw	zero,48(sp)
80008920:	02012c23          	sw	zero,56(sp)
80008924:	02012223          	sw	zero,36(sp)
80008928:	00f12a23          	sw	a5,20(sp)
8000892c:	00048413          	mv	s0,s1
80008930:	02500713          	li	a4,37
80008934:	00044783          	lbu	a5,0(s0)
80008938:	00078463          	beqz	a5,80008940 <_vfprintf_r+0x1a8>
8000893c:	0ce79063          	bne	a5,a4,800089fc <_vfprintf_r+0x264>
80008940:	40940b33          	sub	s6,s0,s1
80008944:	040b0a63          	beqz	s6,80008998 <_vfprintf_r+0x200>
80008948:	0dc12783          	lw	a5,220(sp)
8000894c:	0098a023          	sw	s1,0(a7)
80008950:	0168a223          	sw	s6,4(a7)
80008954:	016787b3          	add	a5,a5,s6
80008958:	0cf12e23          	sw	a5,220(sp)
8000895c:	0d812783          	lw	a5,216(sp)
80008960:	00700713          	li	a4,7
80008964:	00888893          	addi	a7,a7,8
80008968:	00178793          	addi	a5,a5,1
8000896c:	0cf12c23          	sw	a5,216(sp)
80008970:	00f75e63          	ble	a5,a4,8000898c <_vfprintf_r+0x1f4>
80008974:	0d410613          	addi	a2,sp,212
80008978:	00090593          	mv	a1,s2
8000897c:	00098513          	mv	a0,s3
80008980:	678080ef          	jal	ra,80010ff8 <__sprint_r>
80008984:	4e051663          	bnez	a0,80008e70 <_vfprintf_r+0x6d8>
80008988:	0fc10893          	addi	a7,sp,252
8000898c:	02412783          	lw	a5,36(sp)
80008990:	016787b3          	add	a5,a5,s6
80008994:	02f12223          	sw	a5,36(sp)
80008998:	00044783          	lbu	a5,0(s0)
8000899c:	00079463          	bnez	a5,800089a4 <_vfprintf_r+0x20c>
800089a0:	5710106f          	j	8000a710 <_vfprintf_r+0x1f78>
800089a4:	00140793          	addi	a5,s0,1
800089a8:	00f12e23          	sw	a5,28(sp)
800089ac:	0a010ba3          	sb	zero,183(sp)
800089b0:	fff00b13          	li	s6,-1
800089b4:	02012423          	sw	zero,40(sp)
800089b8:	00000413          	li	s0,0
800089bc:	00a00c13          	li	s8,10
800089c0:	02a00b93          	li	s7,42
800089c4:	05a00613          	li	a2,90
800089c8:	00900713          	li	a4,9
800089cc:	01c12783          	lw	a5,28(sp)
800089d0:	0007cd03          	lbu	s10,0(a5)
800089d4:	00178793          	addi	a5,a5,1
800089d8:	00f12e23          	sw	a5,28(sp)
800089dc:	fe0d0793          	addi	a5,s10,-32
800089e0:	00f67463          	bleu	a5,a2,800089e8 <_vfprintf_r+0x250>
800089e4:	2600106f          	j	80009c44 <_vfprintf_r+0x14ac>
800089e8:	04c12683          	lw	a3,76(sp)
800089ec:	00279793          	slli	a5,a5,0x2
800089f0:	00d787b3          	add	a5,a5,a3
800089f4:	0007a783          	lw	a5,0(a5)
800089f8:	00078067          	jr	a5
800089fc:	00140413          	addi	s0,s0,1
80008a00:	f35ff06f          	j	80008934 <_vfprintf_r+0x19c>
80008a04:	800217b7          	lui	a5,0x80021
80008a08:	d9078793          	addi	a5,a5,-624 # 80020d90 <__stack+0xfffe42c4>
80008a0c:	04f12023          	sw	a5,64(sp)
80008a10:	02047793          	andi	a5,s0,32
80008a14:	00079463          	bnez	a5,80008a1c <_vfprintf_r+0x284>
80008a18:	0480106f          	j	80009a60 <_vfprintf_r+0x12c8>
80008a1c:	007a8a93          	addi	s5,s5,7
80008a20:	ff8afa93          	andi	s5,s5,-8
80008a24:	000aac83          	lw	s9,0(s5)
80008a28:	004aac03          	lw	s8,4(s5)
80008a2c:	008a8793          	addi	a5,s5,8
80008a30:	00f12c23          	sw	a5,24(sp)
80008a34:	00147793          	andi	a5,s0,1
80008a38:	00078e63          	beqz	a5,80008a54 <_vfprintf_r+0x2bc>
80008a3c:	018ce7b3          	or	a5,s9,s8
80008a40:	00078a63          	beqz	a5,80008a54 <_vfprintf_r+0x2bc>
80008a44:	03000793          	li	a5,48
80008a48:	0af10c23          	sb	a5,184(sp)
80008a4c:	0ba10ca3          	sb	s10,185(sp)
80008a50:	00246413          	ori	s0,s0,2
80008a54:	bff47413          	andi	s0,s0,-1025
80008a58:	00200793          	li	a5,2
80008a5c:	4150006f          	j	80009670 <_vfprintf_r+0xed8>
80008a60:	00098513          	mv	a0,s3
80008a64:	01112623          	sw	a7,12(sp)
80008a68:	11d040ef          	jal	ra,8000d384 <_localeconv_r>
80008a6c:	00452783          	lw	a5,4(a0)
80008a70:	00078513          	mv	a0,a5
80008a74:	02f12c23          	sw	a5,56(sp)
80008a78:	5e0060ef          	jal	ra,8000f058 <strlen>
80008a7c:	02a12823          	sw	a0,48(sp)
80008a80:	00098513          	mv	a0,s3
80008a84:	101040ef          	jal	ra,8000d384 <_localeconv_r>
80008a88:	00852783          	lw	a5,8(a0)
80008a8c:	00c12883          	lw	a7,12(sp)
80008a90:	00f12823          	sw	a5,16(sp)
80008a94:	03012783          	lw	a5,48(sp)
80008a98:	f20786e3          	beqz	a5,800089c4 <_vfprintf_r+0x22c>
80008a9c:	01012783          	lw	a5,16(sp)
80008aa0:	f20782e3          	beqz	a5,800089c4 <_vfprintf_r+0x22c>
80008aa4:	0007c783          	lbu	a5,0(a5)
80008aa8:	f0078ee3          	beqz	a5,800089c4 <_vfprintf_r+0x22c>
80008aac:	40046413          	ori	s0,s0,1024
80008ab0:	f15ff06f          	j	800089c4 <_vfprintf_r+0x22c>
80008ab4:	0b714783          	lbu	a5,183(sp)
80008ab8:	f00796e3          	bnez	a5,800089c4 <_vfprintf_r+0x22c>
80008abc:	02000793          	li	a5,32
80008ac0:	0af10ba3          	sb	a5,183(sp)
80008ac4:	f01ff06f          	j	800089c4 <_vfprintf_r+0x22c>
80008ac8:	00146413          	ori	s0,s0,1
80008acc:	ef9ff06f          	j	800089c4 <_vfprintf_r+0x22c>
80008ad0:	000aa783          	lw	a5,0(s5)
80008ad4:	004a8a93          	addi	s5,s5,4
80008ad8:	02f12423          	sw	a5,40(sp)
80008adc:	ee07d4e3          	bgez	a5,800089c4 <_vfprintf_r+0x22c>
80008ae0:	40f007b3          	neg	a5,a5
80008ae4:	02f12423          	sw	a5,40(sp)
80008ae8:	00446413          	ori	s0,s0,4
80008aec:	ed9ff06f          	j	800089c4 <_vfprintf_r+0x22c>
80008af0:	02b00793          	li	a5,43
80008af4:	fcdff06f          	j	80008ac0 <_vfprintf_r+0x328>
80008af8:	01c12683          	lw	a3,28(sp)
80008afc:	01c12783          	lw	a5,28(sp)
80008b00:	0006cd03          	lbu	s10,0(a3) # 2000 <_HEAP_SIZE+0x1000>
80008b04:	00178793          	addi	a5,a5,1
80008b08:	037d1e63          	bne	s10,s7,80008b44 <_vfprintf_r+0x3ac>
80008b0c:	000aab03          	lw	s6,0(s5)
80008b10:	004a8713          	addi	a4,s5,4
80008b14:	000b5463          	bgez	s6,80008b1c <_vfprintf_r+0x384>
80008b18:	fff00b13          	li	s6,-1
80008b1c:	00070a93          	mv	s5,a4
80008b20:	00f12e23          	sw	a5,28(sp)
80008b24:	ea1ff06f          	j	800089c4 <_vfprintf_r+0x22c>
80008b28:	038b0333          	mul	t1,s6,s8
80008b2c:	00178793          	addi	a5,a5,1
80008b30:	fff7cd03          	lbu	s10,-1(a5)
80008b34:	00d30b33          	add	s6,t1,a3
80008b38:	fd0d0693          	addi	a3,s10,-48
80008b3c:	fed776e3          	bleu	a3,a4,80008b28 <_vfprintf_r+0x390>
80008b40:	e99ff06f          	j	800089d8 <_vfprintf_r+0x240>
80008b44:	00000b13          	li	s6,0
80008b48:	ff1ff06f          	j	80008b38 <_vfprintf_r+0x3a0>
80008b4c:	08046413          	ori	s0,s0,128
80008b50:	e75ff06f          	j	800089c4 <_vfprintf_r+0x22c>
80008b54:	01c12783          	lw	a5,28(sp)
80008b58:	02012423          	sw	zero,40(sp)
80008b5c:	02812683          	lw	a3,40(sp)
80008b60:	fd0d0d13          	addi	s10,s10,-48
80008b64:	00178793          	addi	a5,a5,1
80008b68:	038686b3          	mul	a3,a3,s8
80008b6c:	00dd06b3          	add	a3,s10,a3
80008b70:	fff7cd03          	lbu	s10,-1(a5)
80008b74:	02d12423          	sw	a3,40(sp)
80008b78:	fd0d0693          	addi	a3,s10,-48
80008b7c:	fed770e3          	bleu	a3,a4,80008b5c <_vfprintf_r+0x3c4>
80008b80:	e59ff06f          	j	800089d8 <_vfprintf_r+0x240>
80008b84:	00846413          	ori	s0,s0,8
80008b88:	e3dff06f          	j	800089c4 <_vfprintf_r+0x22c>
80008b8c:	01c12783          	lw	a5,28(sp)
80008b90:	0007c703          	lbu	a4,0(a5)
80008b94:	06800793          	li	a5,104
80008b98:	00f71c63          	bne	a4,a5,80008bb0 <_vfprintf_r+0x418>
80008b9c:	01c12783          	lw	a5,28(sp)
80008ba0:	20046413          	ori	s0,s0,512
80008ba4:	00178793          	addi	a5,a5,1
80008ba8:	00f12e23          	sw	a5,28(sp)
80008bac:	e19ff06f          	j	800089c4 <_vfprintf_r+0x22c>
80008bb0:	04046413          	ori	s0,s0,64
80008bb4:	e11ff06f          	j	800089c4 <_vfprintf_r+0x22c>
80008bb8:	01c12783          	lw	a5,28(sp)
80008bbc:	0007c703          	lbu	a4,0(a5)
80008bc0:	06c00793          	li	a5,108
80008bc4:	00f71c63          	bne	a4,a5,80008bdc <_vfprintf_r+0x444>
80008bc8:	01c12783          	lw	a5,28(sp)
80008bcc:	00178793          	addi	a5,a5,1
80008bd0:	00f12e23          	sw	a5,28(sp)
80008bd4:	02046413          	ori	s0,s0,32
80008bd8:	dedff06f          	j	800089c4 <_vfprintf_r+0x22c>
80008bdc:	01046413          	ori	s0,s0,16
80008be0:	de5ff06f          	j	800089c4 <_vfprintf_r+0x22c>
80008be4:	004a8793          	addi	a5,s5,4
80008be8:	00f12c23          	sw	a5,24(sp)
80008bec:	000aa783          	lw	a5,0(s5)
80008bf0:	0a010ba3          	sb	zero,183(sp)
80008bf4:	12f10e23          	sb	a5,316(sp)
80008bf8:	00012623          	sw	zero,12(sp)
80008bfc:	00100b13          	li	s6,1
80008c00:	00000a93          	li	s5,0
80008c04:	00000c13          	li	s8,0
80008c08:	00000b93          	li	s7,0
80008c0c:	00000c93          	li	s9,0
80008c10:	13c10493          	addi	s1,sp,316
80008c14:	3650006f          	j	80009778 <_vfprintf_r+0xfe0>
80008c18:	01046413          	ori	s0,s0,16
80008c1c:	02047793          	andi	a5,s0,32
80008c20:	04078e63          	beqz	a5,80008c7c <_vfprintf_r+0x4e4>
80008c24:	007a8a93          	addi	s5,s5,7
80008c28:	ff8afa93          	andi	s5,s5,-8
80008c2c:	000aac83          	lw	s9,0(s5)
80008c30:	004aac03          	lw	s8,4(s5)
80008c34:	008a8793          	addi	a5,s5,8
80008c38:	00f12c23          	sw	a5,24(sp)
80008c3c:	000c5e63          	bgez	s8,80008c58 <_vfprintf_r+0x4c0>
80008c40:	41900cb3          	neg	s9,s9
80008c44:	019037b3          	snez	a5,s9
80008c48:	41800c33          	neg	s8,s8
80008c4c:	40fc0c33          	sub	s8,s8,a5
80008c50:	02d00793          	li	a5,45
80008c54:	0af10ba3          	sb	a5,183(sp)
80008c58:	fff00793          	li	a5,-1
80008c5c:	64fb10e3          	bne	s6,a5,80009a9c <_vfprintf_r+0x1304>
80008c60:	6c0c12e3          	bnez	s8,80009b24 <_vfprintf_r+0x138c>
80008c64:	00900793          	li	a5,9
80008c68:	6b97eee3          	bltu	a5,s9,80009b24 <_vfprintf_r+0x138c>
80008c6c:	030c8c93          	addi	s9,s9,48
80008c70:	19910fa3          	sb	s9,415(sp)
80008c74:	19f10493          	addi	s1,sp,415
80008c78:	6850006f          	j	80009afc <_vfprintf_r+0x1364>
80008c7c:	004a8793          	addi	a5,s5,4
80008c80:	00f12c23          	sw	a5,24(sp)
80008c84:	01047793          	andi	a5,s0,16
80008c88:	00078863          	beqz	a5,80008c98 <_vfprintf_r+0x500>
80008c8c:	000aac83          	lw	s9,0(s5)
80008c90:	41fcdc13          	srai	s8,s9,0x1f
80008c94:	fa9ff06f          	j	80008c3c <_vfprintf_r+0x4a4>
80008c98:	04047793          	andi	a5,s0,64
80008c9c:	000aac83          	lw	s9,0(s5)
80008ca0:	00078863          	beqz	a5,80008cb0 <_vfprintf_r+0x518>
80008ca4:	010c9c93          	slli	s9,s9,0x10
80008ca8:	410cdc93          	srai	s9,s9,0x10
80008cac:	fe5ff06f          	j	80008c90 <_vfprintf_r+0x4f8>
80008cb0:	20047793          	andi	a5,s0,512
80008cb4:	fc078ee3          	beqz	a5,80008c90 <_vfprintf_r+0x4f8>
80008cb8:	018c9c93          	slli	s9,s9,0x18
80008cbc:	418cdc93          	srai	s9,s9,0x18
80008cc0:	fd1ff06f          	j	80008c90 <_vfprintf_r+0x4f8>
80008cc4:	00847793          	andi	a5,s0,8
80008cc8:	0a078e63          	beqz	a5,80008d84 <_vfprintf_r+0x5ec>
80008ccc:	004a8793          	addi	a5,s5,4
80008cd0:	00f12c23          	sw	a5,24(sp)
80008cd4:	000aa783          	lw	a5,0(s5)
80008cd8:	0007a603          	lw	a2,0(a5)
80008cdc:	0047a683          	lw	a3,4(a5)
80008ce0:	0087a703          	lw	a4,8(a5)
80008ce4:	00c7a783          	lw	a5,12(a5)
80008ce8:	0ec12023          	sw	a2,224(sp)
80008cec:	0ed12223          	sw	a3,228(sp)
80008cf0:	0ee12423          	sw	a4,232(sp)
80008cf4:	0ef12623          	sw	a5,236(sp)
80008cf8:	0e010513          	addi	a0,sp,224
80008cfc:	01112623          	sw	a7,12(sp)
80008d00:	618040ef          	jal	ra,8000d318 <_ldcheck>
80008d04:	0aa12e23          	sw	a0,188(sp)
80008d08:	00200793          	li	a5,2
80008d0c:	00c12883          	lw	a7,12(sp)
80008d10:	0cf51663          	bne	a0,a5,80008ddc <_vfprintf_r+0x644>
80008d14:	0e012783          	lw	a5,224(sp)
80008d18:	09010593          	addi	a1,sp,144
80008d1c:	0a010513          	addi	a0,sp,160
80008d20:	0af12023          	sw	a5,160(sp)
80008d24:	0e412783          	lw	a5,228(sp)
80008d28:	08012823          	sw	zero,144(sp)
80008d2c:	08012a23          	sw	zero,148(sp)
80008d30:	0af12223          	sw	a5,164(sp)
80008d34:	0e812783          	lw	a5,232(sp)
80008d38:	08012c23          	sw	zero,152(sp)
80008d3c:	08012e23          	sw	zero,156(sp)
80008d40:	0af12423          	sw	a5,168(sp)
80008d44:	0ec12783          	lw	a5,236(sp)
80008d48:	0af12623          	sw	a5,172(sp)
80008d4c:	0c10c0ef          	jal	ra,8001560c <__letf2>
80008d50:	00c12883          	lw	a7,12(sp)
80008d54:	00055663          	bgez	a0,80008d60 <_vfprintf_r+0x5c8>
80008d58:	02d00793          	li	a5,45
80008d5c:	0af10ba3          	sb	a5,183(sp)
80008d60:	04700793          	li	a5,71
80008d64:	07a7c663          	blt	a5,s10,80008dd0 <_vfprintf_r+0x638>
80008d68:	800214b7          	lui	s1,0x80021
80008d6c:	d6c48493          	addi	s1,s1,-660 # 80020d6c <__stack+0xfffe42a0>
80008d70:	f7f47413          	andi	s0,s0,-129
80008d74:	00012623          	sw	zero,12(sp)
80008d78:	00300b13          	li	s6,3
80008d7c:	00000a93          	li	s5,0
80008d80:	58d0006f          	j	80009b0c <_vfprintf_r+0x1374>
80008d84:	007a8a93          	addi	s5,s5,7
80008d88:	ff8afa93          	andi	s5,s5,-8
80008d8c:	000aa583          	lw	a1,0(s5)
80008d90:	004aa603          	lw	a2,4(s5)
80008d94:	008a8793          	addi	a5,s5,8
80008d98:	0a010513          	addi	a0,sp,160
80008d9c:	01112623          	sw	a7,12(sp)
80008da0:	00f12c23          	sw	a5,24(sp)
80008da4:	1a80f0ef          	jal	ra,80017f4c <__extenddftf2>
80008da8:	0a012783          	lw	a5,160(sp)
80008dac:	00c12883          	lw	a7,12(sp)
80008db0:	0ef12023          	sw	a5,224(sp)
80008db4:	0a412783          	lw	a5,164(sp)
80008db8:	0ef12223          	sw	a5,228(sp)
80008dbc:	0a812783          	lw	a5,168(sp)
80008dc0:	0ef12423          	sw	a5,232(sp)
80008dc4:	0ac12783          	lw	a5,172(sp)
80008dc8:	0ef12623          	sw	a5,236(sp)
80008dcc:	f2dff06f          	j	80008cf8 <_vfprintf_r+0x560>
80008dd0:	800214b7          	lui	s1,0x80021
80008dd4:	d7048493          	addi	s1,s1,-656 # 80020d70 <__stack+0xfffe42a4>
80008dd8:	f99ff06f          	j	80008d70 <_vfprintf_r+0x5d8>
80008ddc:	00100793          	li	a5,1
80008de0:	02f51a63          	bne	a0,a5,80008e14 <_vfprintf_r+0x67c>
80008de4:	0ec12783          	lw	a5,236(sp)
80008de8:	0007d663          	bgez	a5,80008df4 <_vfprintf_r+0x65c>
80008dec:	02d00793          	li	a5,45
80008df0:	0af10ba3          	sb	a5,183(sp)
80008df4:	04700793          	li	a5,71
80008df8:	01a7c863          	blt	a5,s10,80008e08 <_vfprintf_r+0x670>
80008dfc:	800214b7          	lui	s1,0x80021
80008e00:	d7448493          	addi	s1,s1,-652 # 80020d74 <__stack+0xfffe42a8>
80008e04:	f6dff06f          	j	80008d70 <_vfprintf_r+0x5d8>
80008e08:	800214b7          	lui	s1,0x80021
80008e0c:	d7848493          	addi	s1,s1,-648 # 80020d78 <__stack+0xfffe42ac>
80008e10:	f61ff06f          	j	80008d70 <_vfprintf_r+0x5d8>
80008e14:	fdfd7b93          	andi	s7,s10,-33
80008e18:	04100793          	li	a5,65
80008e1c:	06fb9263          	bne	s7,a5,80008e80 <_vfprintf_r+0x6e8>
80008e20:	03000793          	li	a5,48
80008e24:	0af10c23          	sb	a5,184(sp)
80008e28:	06100713          	li	a4,97
80008e2c:	05800793          	li	a5,88
80008e30:	00ed1463          	bne	s10,a4,80008e38 <_vfprintf_r+0x6a0>
80008e34:	07800793          	li	a5,120
80008e38:	0af10ca3          	sb	a5,185(sp)
80008e3c:	06300793          	li	a5,99
80008e40:	00246413          	ori	s0,s0,2
80008e44:	4b67d463          	ble	s6,a5,800092ec <_vfprintf_r+0xb54>
80008e48:	001b0593          	addi	a1,s6,1
80008e4c:	00098513          	mv	a0,s3
80008e50:	01112623          	sw	a7,12(sp)
80008e54:	7cc040ef          	jal	ra,8000d620 <_malloc_r>
80008e58:	00050493          	mv	s1,a0
80008e5c:	00c12883          	lw	a7,12(sp)
80008e60:	48051c63          	bnez	a0,800092f8 <_vfprintf_r+0xb60>
80008e64:	00c95783          	lhu	a5,12(s2)
80008e68:	0407e793          	ori	a5,a5,64
80008e6c:	00f91623          	sh	a5,12(s2)
80008e70:	00c95783          	lhu	a5,12(s2)
80008e74:	0407f793          	andi	a5,a5,64
80008e78:	a0078ae3          	beqz	a5,8000888c <_vfprintf_r+0xf4>
80008e7c:	a61ff06f          	j	800088dc <_vfprintf_r+0x144>
80008e80:	fff00793          	li	a5,-1
80008e84:	46fb0e63          	beq	s6,a5,80009300 <_vfprintf_r+0xb68>
80008e88:	04700793          	li	a5,71
80008e8c:	00012623          	sw	zero,12(sp)
80008e90:	00fb9463          	bne	s7,a5,80008e98 <_vfprintf_r+0x700>
80008e94:	460b0c63          	beqz	s6,8000930c <_vfprintf_r+0xb74>
80008e98:	0ec12a03          	lw	s4,236(sp)
80008e9c:	10046793          	ori	a5,s0,256
80008ea0:	02f12623          	sw	a5,44(sp)
80008ea4:	04012223          	sw	zero,68(sp)
80008ea8:	0e012e03          	lw	t3,224(sp)
80008eac:	0e412d83          	lw	s11,228(sp)
80008eb0:	0e812c83          	lw	s9,232(sp)
80008eb4:	000a5a63          	bgez	s4,80008ec8 <_vfprintf_r+0x730>
80008eb8:	800007b7          	lui	a5,0x80000
80008ebc:	0147ca33          	xor	s4,a5,s4
80008ec0:	02d00793          	li	a5,45
80008ec4:	04f12223          	sw	a5,68(sp)
80008ec8:	04100793          	li	a5,65
80008ecc:	48fb9a63          	bne	s7,a5,80009360 <_vfprintf_r+0xbc8>
80008ed0:	0a010513          	addi	a0,sp,160
80008ed4:	05112c23          	sw	a7,88(sp)
80008ed8:	0bc12023          	sw	t3,160(sp)
80008edc:	0b912423          	sw	s9,168(sp)
80008ee0:	0bb12223          	sw	s11,164(sp)
80008ee4:	0b412623          	sw	s4,172(sp)
80008ee8:	2880f0ef          	jal	ra,80018170 <__trunctfdf2>
80008eec:	0bc10613          	addi	a2,sp,188
80008ef0:	50d050ef          	jal	ra,8000ebfc <frexp>
80008ef4:	00058613          	mv	a2,a1
80008ef8:	00050593          	mv	a1,a0
80008efc:	0a010513          	addi	a0,sp,160
80008f00:	04c0f0ef          	jal	ra,80017f4c <__extenddftf2>
80008f04:	0a012783          	lw	a5,160(sp)
80008f08:	07010613          	addi	a2,sp,112
80008f0c:	08010593          	addi	a1,sp,128
80008f10:	08f12023          	sw	a5,128(sp)
80008f14:	0a412783          	lw	a5,164(sp)
80008f18:	09010513          	addi	a0,sp,144
80008f1c:	06012823          	sw	zero,112(sp)
80008f20:	08f12223          	sw	a5,132(sp)
80008f24:	0a812783          	lw	a5,168(sp)
80008f28:	06012a23          	sw	zero,116(sp)
80008f2c:	06012c23          	sw	zero,120(sp)
80008f30:	08f12423          	sw	a5,136(sp)
80008f34:	0ac12783          	lw	a5,172(sp)
80008f38:	08f12623          	sw	a5,140(sp)
80008f3c:	3ffc07b7          	lui	a5,0x3ffc0
80008f40:	06f12e23          	sw	a5,124(sp)
80008f44:	0290c0ef          	jal	ra,8001576c <__multf3>
80008f48:	09012803          	lw	a6,144(sp)
80008f4c:	09412603          	lw	a2,148(sp)
80008f50:	09812683          	lw	a3,152(sp)
80008f54:	09c12c83          	lw	s9,156(sp)
80008f58:	09010593          	addi	a1,sp,144
80008f5c:	0a010513          	addi	a0,sp,160
80008f60:	0b012023          	sw	a6,160(sp)
80008f64:	05012a23          	sw	a6,84(sp)
80008f68:	0ac12223          	sw	a2,164(sp)
80008f6c:	04c12823          	sw	a2,80(sp)
80008f70:	0ad12423          	sw	a3,168(sp)
80008f74:	04d12423          	sw	a3,72(sp)
80008f78:	0b912623          	sw	s9,172(sp)
80008f7c:	08012823          	sw	zero,144(sp)
80008f80:	08012a23          	sw	zero,148(sp)
80008f84:	08012c23          	sw	zero,152(sp)
80008f88:	08012e23          	sw	zero,156(sp)
80008f8c:	4540c0ef          	jal	ra,800153e0 <__eqtf2>
80008f90:	04812683          	lw	a3,72(sp)
80008f94:	05012603          	lw	a2,80(sp)
80008f98:	05412803          	lw	a6,84(sp)
80008f9c:	05812883          	lw	a7,88(sp)
80008fa0:	00051663          	bnez	a0,80008fac <_vfprintf_r+0x814>
80008fa4:	00100713          	li	a4,1
80008fa8:	0ae12e23          	sw	a4,188(sp)
80008fac:	06100713          	li	a4,97
80008fb0:	36ed1463          	bne	s10,a4,80009318 <_vfprintf_r+0xb80>
80008fb4:	80021c37          	lui	s8,0x80021
80008fb8:	d7cc0c13          	addi	s8,s8,-644 # 80020d7c <__stack+0xfffe42b0>
80008fbc:	fffb0e13          	addi	t3,s6,-1
80008fc0:	00048d93          	mv	s11,s1
80008fc4:	400307b7          	lui	a5,0x40030
80008fc8:	09010593          	addi	a1,sp,144
80008fcc:	08c12a23          	sw	a2,148(sp)
80008fd0:	0a010513          	addi	a0,sp,160
80008fd4:	08010613          	addi	a2,sp,128
80008fd8:	05112c23          	sw	a7,88(sp)
80008fdc:	05c12a23          	sw	t3,84(sp)
80008fe0:	09012823          	sw	a6,144(sp)
80008fe4:	08f12623          	sw	a5,140(sp)
80008fe8:	08d12c23          	sw	a3,152(sp)
80008fec:	09912e23          	sw	s9,156(sp)
80008ff0:	08012023          	sw	zero,128(sp)
80008ff4:	08012223          	sw	zero,132(sp)
80008ff8:	08012423          	sw	zero,136(sp)
80008ffc:	7700c0ef          	jal	ra,8001576c <__multf3>
80009000:	0a012603          	lw	a2,160(sp)
80009004:	0a412683          	lw	a3,164(sp)
80009008:	0a010513          	addi	a0,sp,160
8000900c:	04c12823          	sw	a2,80(sp)
80009010:	04d12423          	sw	a3,72(sp)
80009014:	4550e0ef          	jal	ra,80017c68 <__fixtfsi>
80009018:	00050593          	mv	a1,a0
8000901c:	00050a13          	mv	s4,a0
80009020:	0a010513          	addi	a0,sp,160
80009024:	0a812c83          	lw	s9,168(sp)
80009028:	0ac12a83          	lw	s5,172(sp)
8000902c:	5a10e0ef          	jal	ra,80017dcc <__floatsitf>
80009030:	0a012783          	lw	a5,160(sp)
80009034:	05012603          	lw	a2,80(sp)
80009038:	04812683          	lw	a3,72(sp)
8000903c:	06f12823          	sw	a5,112(sp)
80009040:	0a412783          	lw	a5,164(sp)
80009044:	08c12023          	sw	a2,128(sp)
80009048:	08010593          	addi	a1,sp,128
8000904c:	06f12a23          	sw	a5,116(sp)
80009050:	0a812783          	lw	a5,168(sp)
80009054:	07010613          	addi	a2,sp,112
80009058:	09010513          	addi	a0,sp,144
8000905c:	06f12c23          	sw	a5,120(sp)
80009060:	0ac12783          	lw	a5,172(sp)
80009064:	09912423          	sw	s9,136(sp)
80009068:	09512623          	sw	s5,140(sp)
8000906c:	06f12e23          	sw	a5,124(sp)
80009070:	08d12223          	sw	a3,132(sp)
80009074:	7340d0ef          	jal	ra,800167a8 <__subtf3>
80009078:	014c05b3          	add	a1,s8,s4
8000907c:	0005c583          	lbu	a1,0(a1)
80009080:	05412e03          	lw	t3,84(sp)
80009084:	09c12a83          	lw	s5,156(sp)
80009088:	001d8d93          	addi	s11,s11,1
8000908c:	09012283          	lw	t0,144(sp)
80009090:	09412f83          	lw	t6,148(sp)
80009094:	09812f03          	lw	t5,152(sp)
80009098:	05c12423          	sw	t3,72(sp)
8000909c:	febd8fa3          	sb	a1,-1(s11)
800090a0:	fff00793          	li	a5,-1
800090a4:	000a8c93          	mv	s9,s5
800090a8:	05812883          	lw	a7,88(sp)
800090ac:	06fe0c63          	beq	t3,a5,80009124 <_vfprintf_r+0x98c>
800090b0:	fffe0e13          	addi	t3,t3,-1
800090b4:	09010593          	addi	a1,sp,144
800090b8:	0a010513          	addi	a0,sp,160
800090bc:	07e12623          	sw	t5,108(sp)
800090c0:	07f12423          	sw	t6,104(sp)
800090c4:	06512223          	sw	t0,100(sp)
800090c8:	07112023          	sw	a7,96(sp)
800090cc:	05c12e23          	sw	t3,92(sp)
800090d0:	0a512023          	sw	t0,160(sp)
800090d4:	04512c23          	sw	t0,88(sp)
800090d8:	0bf12223          	sw	t6,164(sp)
800090dc:	05f12a23          	sw	t6,84(sp)
800090e0:	0be12423          	sw	t5,168(sp)
800090e4:	05e12823          	sw	t5,80(sp)
800090e8:	0b512623          	sw	s5,172(sp)
800090ec:	08012823          	sw	zero,144(sp)
800090f0:	08012a23          	sw	zero,148(sp)
800090f4:	08012c23          	sw	zero,152(sp)
800090f8:	08012e23          	sw	zero,156(sp)
800090fc:	2e40c0ef          	jal	ra,800153e0 <__eqtf2>
80009100:	05012683          	lw	a3,80(sp)
80009104:	05412603          	lw	a2,84(sp)
80009108:	05812803          	lw	a6,88(sp)
8000910c:	05c12e03          	lw	t3,92(sp)
80009110:	06012883          	lw	a7,96(sp)
80009114:	06412283          	lw	t0,100(sp)
80009118:	06812f83          	lw	t6,104(sp)
8000911c:	06c12f03          	lw	t5,108(sp)
80009120:	ea0512e3          	bnez	a0,80008fc4 <_vfprintf_r+0x82c>
80009124:	3ffe0cb7          	lui	s9,0x3ffe0
80009128:	09010593          	addi	a1,sp,144
8000912c:	0a010513          	addi	a0,sp,160
80009130:	05112823          	sw	a7,80(sp)
80009134:	0a512023          	sw	t0,160(sp)
80009138:	04512e23          	sw	t0,92(sp)
8000913c:	0bf12223          	sw	t6,164(sp)
80009140:	05f12c23          	sw	t6,88(sp)
80009144:	0be12423          	sw	t5,168(sp)
80009148:	05e12a23          	sw	t5,84(sp)
8000914c:	0b512623          	sw	s5,172(sp)
80009150:	08012823          	sw	zero,144(sp)
80009154:	08012a23          	sw	zero,148(sp)
80009158:	08012c23          	sw	zero,152(sp)
8000915c:	09912e23          	sw	s9,156(sp)
80009160:	34c0c0ef          	jal	ra,800154ac <__getf2>
80009164:	05012883          	lw	a7,80(sp)
80009168:	04a04663          	bgtz	a0,800091b4 <_vfprintf_r+0xa1c>
8000916c:	05c12283          	lw	t0,92(sp)
80009170:	05812f83          	lw	t6,88(sp)
80009174:	05412f03          	lw	t5,84(sp)
80009178:	09010593          	addi	a1,sp,144
8000917c:	0a010513          	addi	a0,sp,160
80009180:	0a512023          	sw	t0,160(sp)
80009184:	0bf12223          	sw	t6,164(sp)
80009188:	0be12423          	sw	t5,168(sp)
8000918c:	0b512623          	sw	s5,172(sp)
80009190:	08012823          	sw	zero,144(sp)
80009194:	08012a23          	sw	zero,148(sp)
80009198:	08012c23          	sw	zero,152(sp)
8000919c:	09912e23          	sw	s9,156(sp)
800091a0:	2400c0ef          	jal	ra,800153e0 <__eqtf2>
800091a4:	05012883          	lw	a7,80(sp)
800091a8:	1a051263          	bnez	a0,8000934c <_vfprintf_r+0xbb4>
800091ac:	001a7a13          	andi	s4,s4,1
800091b0:	180a0e63          	beqz	s4,8000934c <_vfprintf_r+0xbb4>
800091b4:	00fc4603          	lbu	a2,15(s8)
800091b8:	0db12623          	sw	s11,204(sp)
800091bc:	03000593          	li	a1,48
800091c0:	0cc12683          	lw	a3,204(sp)
800091c4:	fff68793          	addi	a5,a3,-1
800091c8:	0cf12623          	sw	a5,204(sp)
800091cc:	fff6c783          	lbu	a5,-1(a3)
800091d0:	14c78a63          	beq	a5,a2,80009324 <_vfprintf_r+0xb8c>
800091d4:	03900613          	li	a2,57
800091d8:	14c79a63          	bne	a5,a2,8000932c <_vfprintf_r+0xb94>
800091dc:	00ac4783          	lbu	a5,10(s8)
800091e0:	fef68fa3          	sb	a5,-1(a3)
800091e4:	000d8a13          	mv	s4,s11
800091e8:	04700713          	li	a4,71
800091ec:	409a0a33          	sub	s4,s4,s1
800091f0:	0bc12c83          	lw	s9,188(sp)
800091f4:	2aeb9863          	bne	s7,a4,800094a4 <_vfprintf_r+0xd0c>
800091f8:	ffd00713          	li	a4,-3
800091fc:	00ecc463          	blt	s9,a4,80009204 <_vfprintf_r+0xa6c>
80009200:	339b5463          	ble	s9,s6,80009528 <_vfprintf_r+0xd90>
80009204:	ffed0d13          	addi	s10,s10,-2
80009208:	fffc8693          	addi	a3,s9,-1 # 3ffdffff <_HEAP_SIZE+0x3ffdefff>
8000920c:	0ad12e23          	sw	a3,188(sp)
80009210:	fdfd7613          	andi	a2,s10,-33
80009214:	04100513          	li	a0,65
80009218:	0ffd7713          	andi	a4,s10,255
8000921c:	00000593          	li	a1,0
80009220:	00a61863          	bne	a2,a0,80009230 <_vfprintf_r+0xa98>
80009224:	00f70713          	addi	a4,a4,15
80009228:	0ff77713          	andi	a4,a4,255
8000922c:	00100593          	li	a1,1
80009230:	0ce10223          	sb	a4,196(sp)
80009234:	02b00793          	li	a5,43
80009238:	0006d863          	bgez	a3,80009248 <_vfprintf_r+0xab0>
8000923c:	00100693          	li	a3,1
80009240:	419686b3          	sub	a3,a3,s9
80009244:	02d00793          	li	a5,45
80009248:	0cf102a3          	sb	a5,197(sp)
8000924c:	00900793          	li	a5,9
80009250:	28d7de63          	ble	a3,a5,800094ec <_vfprintf_r+0xd54>
80009254:	0d310713          	addi	a4,sp,211
80009258:	00070513          	mv	a0,a4
8000925c:	00a00593          	li	a1,10
80009260:	00900813          	li	a6,9
80009264:	02b6e7b3          	rem	a5,a3,a1
80009268:	fff70613          	addi	a2,a4,-1
8000926c:	02b6c6b3          	div	a3,a3,a1
80009270:	03078793          	addi	a5,a5,48 # 40030030 <_HEAP_SIZE+0x4002f030>
80009274:	fef70fa3          	sb	a5,-1(a4)
80009278:	24d84c63          	blt	a6,a3,800094d0 <_vfprintf_r+0xd38>
8000927c:	03068793          	addi	a5,a3,48
80009280:	fef60fa3          	sb	a5,-1(a2)
80009284:	ffe70713          	addi	a4,a4,-2
80009288:	0c610613          	addi	a2,sp,198
8000928c:	24a76663          	bltu	a4,a0,800094d8 <_vfprintf_r+0xd40>
80009290:	0c410793          	addi	a5,sp,196
80009294:	40f607b3          	sub	a5,a2,a5
80009298:	02f12e23          	sw	a5,60(sp)
8000929c:	01478b33          	add	s6,a5,s4
800092a0:	00100793          	li	a5,1
800092a4:	0147c663          	blt	a5,s4,800092b0 <_vfprintf_r+0xb18>
800092a8:	00147793          	andi	a5,s0,1
800092ac:	00078663          	beqz	a5,800092b8 <_vfprintf_r+0xb20>
800092b0:	02012783          	lw	a5,32(sp)
800092b4:	00fb0b33          	add	s6,s6,a5
800092b8:	bff47413          	andi	s0,s0,-1025
800092bc:	10046793          	ori	a5,s0,256
800092c0:	02f12623          	sw	a5,44(sp)
800092c4:	00000c13          	li	s8,0
800092c8:	00000b93          	li	s7,0
800092cc:	00000c93          	li	s9,0
800092d0:	04412783          	lw	a5,68(sp)
800092d4:	00078663          	beqz	a5,800092e0 <_vfprintf_r+0xb48>
800092d8:	02d00713          	li	a4,45
800092dc:	0ae10ba3          	sb	a4,183(sp)
800092e0:	02c12403          	lw	s0,44(sp)
800092e4:	00000a93          	li	s5,0
800092e8:	4900006f          	j	80009778 <_vfprintf_r+0xfe0>
800092ec:	00012623          	sw	zero,12(sp)
800092f0:	13c10493          	addi	s1,sp,316
800092f4:	ba5ff06f          	j	80008e98 <_vfprintf_r+0x700>
800092f8:	00a12623          	sw	a0,12(sp)
800092fc:	b9dff06f          	j	80008e98 <_vfprintf_r+0x700>
80009300:	00012623          	sw	zero,12(sp)
80009304:	00600b13          	li	s6,6
80009308:	b91ff06f          	j	80008e98 <_vfprintf_r+0x700>
8000930c:	01612623          	sw	s6,12(sp)
80009310:	00100b13          	li	s6,1
80009314:	b85ff06f          	j	80008e98 <_vfprintf_r+0x700>
80009318:	80021c37          	lui	s8,0x80021
8000931c:	d90c0c13          	addi	s8,s8,-624 # 80020d90 <__stack+0xfffe42c4>
80009320:	c9dff06f          	j	80008fbc <_vfprintf_r+0x824>
80009324:	feb68fa3          	sb	a1,-1(a3)
80009328:	e99ff06f          	j	800091c0 <_vfprintf_r+0xa28>
8000932c:	00178793          	addi	a5,a5,1
80009330:	0ff7f793          	andi	a5,a5,255
80009334:	eadff06f          	j	800091e0 <_vfprintf_r+0xa48>
80009338:	001a0a13          	addi	s4,s4,1
8000933c:	feea0fa3          	sb	a4,-1(s4)
80009340:	414a87b3          	sub	a5,s5,s4
80009344:	fe07dae3          	bgez	a5,80009338 <_vfprintf_r+0xba0>
80009348:	ea1ff06f          	j	800091e8 <_vfprintf_r+0xa50>
8000934c:	04812783          	lw	a5,72(sp)
80009350:	000d8a13          	mv	s4,s11
80009354:	03000713          	li	a4,48
80009358:	00fd8ab3          	add	s5,s11,a5
8000935c:	fe5ff06f          	j	80009340 <_vfprintf_r+0xba8>
80009360:	04600793          	li	a5,70
80009364:	00fb8e63          	beq	s7,a5,80009380 <_vfprintf_r+0xbe8>
80009368:	04500793          	li	a5,69
8000936c:	001b0a93          	addi	s5,s6,1
80009370:	00fb8463          	beq	s7,a5,80009378 <_vfprintf_r+0xbe0>
80009374:	000b0a93          	mv	s5,s6
80009378:	00200613          	li	a2,2
8000937c:	00c0006f          	j	80009388 <_vfprintf_r+0xbf0>
80009380:	000b0a93          	mv	s5,s6
80009384:	00300613          	li	a2,3
80009388:	0c010793          	addi	a5,sp,192
8000938c:	0cc10813          	addi	a6,sp,204
80009390:	0bc10713          	addi	a4,sp,188
80009394:	000a8693          	mv	a3,s5
80009398:	0a010593          	addi	a1,sp,160
8000939c:	00098513          	mv	a0,s3
800093a0:	05112823          	sw	a7,80(sp)
800093a4:	0bc12023          	sw	t3,160(sp)
800093a8:	05c12423          	sw	t3,72(sp)
800093ac:	0bb12223          	sw	s11,164(sp)
800093b0:	0b912423          	sw	s9,168(sp)
800093b4:	0b412623          	sw	s4,172(sp)
800093b8:	314030ef          	jal	ra,8000c6cc <_ldtoa_r>
800093bc:	04700793          	li	a5,71
800093c0:	00050493          	mv	s1,a0
800093c4:	04812e03          	lw	t3,72(sp)
800093c8:	05012883          	lw	a7,80(sp)
800093cc:	00fb9663          	bne	s7,a5,800093d8 <_vfprintf_r+0xc40>
800093d0:	00147793          	andi	a5,s0,1
800093d4:	0a078863          	beqz	a5,80009484 <_vfprintf_r+0xcec>
800093d8:	04600793          	li	a5,70
800093dc:	01548c33          	add	s8,s1,s5
800093e0:	06fb9263          	bne	s7,a5,80009444 <_vfprintf_r+0xcac>
800093e4:	0004c703          	lbu	a4,0(s1)
800093e8:	03000793          	li	a5,48
800093ec:	04f71863          	bne	a4,a5,8000943c <_vfprintf_r+0xca4>
800093f0:	09010593          	addi	a1,sp,144
800093f4:	0a010513          	addi	a0,sp,160
800093f8:	05112823          	sw	a7,80(sp)
800093fc:	0bc12023          	sw	t3,160(sp)
80009400:	05c12423          	sw	t3,72(sp)
80009404:	0bb12223          	sw	s11,164(sp)
80009408:	0b912423          	sw	s9,168(sp)
8000940c:	0b412623          	sw	s4,172(sp)
80009410:	08012823          	sw	zero,144(sp)
80009414:	08012a23          	sw	zero,148(sp)
80009418:	08012c23          	sw	zero,152(sp)
8000941c:	08012e23          	sw	zero,156(sp)
80009420:	7c10b0ef          	jal	ra,800153e0 <__eqtf2>
80009424:	04812e03          	lw	t3,72(sp)
80009428:	05012883          	lw	a7,80(sp)
8000942c:	00050863          	beqz	a0,8000943c <_vfprintf_r+0xca4>
80009430:	00100793          	li	a5,1
80009434:	41578ab3          	sub	s5,a5,s5
80009438:	0b512e23          	sw	s5,188(sp)
8000943c:	0bc12783          	lw	a5,188(sp)
80009440:	00fc0c33          	add	s8,s8,a5
80009444:	09010593          	addi	a1,sp,144
80009448:	0a010513          	addi	a0,sp,160
8000944c:	05112423          	sw	a7,72(sp)
80009450:	0bc12023          	sw	t3,160(sp)
80009454:	0bb12223          	sw	s11,164(sp)
80009458:	0b912423          	sw	s9,168(sp)
8000945c:	0b412623          	sw	s4,172(sp)
80009460:	08012823          	sw	zero,144(sp)
80009464:	08012a23          	sw	zero,148(sp)
80009468:	08012c23          	sw	zero,152(sp)
8000946c:	08012e23          	sw	zero,156(sp)
80009470:	7710b0ef          	jal	ra,800153e0 <__eqtf2>
80009474:	04812883          	lw	a7,72(sp)
80009478:	03000713          	li	a4,48
8000947c:	00051e63          	bnez	a0,80009498 <_vfprintf_r+0xd00>
80009480:	0d812623          	sw	s8,204(sp)
80009484:	0cc12a03          	lw	s4,204(sp)
80009488:	d61ff06f          	j	800091e8 <_vfprintf_r+0xa50>
8000948c:	00178693          	addi	a3,a5,1
80009490:	0cd12623          	sw	a3,204(sp)
80009494:	00e78023          	sb	a4,0(a5)
80009498:	0cc12783          	lw	a5,204(sp)
8000949c:	ff87e8e3          	bltu	a5,s8,8000948c <_vfprintf_r+0xcf4>
800094a0:	fe5ff06f          	j	80009484 <_vfprintf_r+0xcec>
800094a4:	04600713          	li	a4,70
800094a8:	d6eb90e3          	bne	s7,a4,80009208 <_vfprintf_r+0xa70>
800094ac:	07905263          	blez	s9,80009510 <_vfprintf_r+0xd78>
800094b0:	000b1663          	bnez	s6,800094bc <_vfprintf_r+0xd24>
800094b4:	00147713          	andi	a4,s0,1
800094b8:	0c070263          	beqz	a4,8000957c <_vfprintf_r+0xde4>
800094bc:	02012783          	lw	a5,32(sp)
800094c0:	00fc8733          	add	a4,s9,a5
800094c4:	00eb0b33          	add	s6,s6,a4
800094c8:	06600d13          	li	s10,102
800094cc:	0940006f          	j	80009560 <_vfprintf_r+0xdc8>
800094d0:	00060713          	mv	a4,a2
800094d4:	d91ff06f          	j	80009264 <_vfprintf_r+0xacc>
800094d8:	00170713          	addi	a4,a4,1
800094dc:	fff74783          	lbu	a5,-1(a4)
800094e0:	00160613          	addi	a2,a2,1
800094e4:	fef60fa3          	sb	a5,-1(a2)
800094e8:	da5ff06f          	j	8000928c <_vfprintf_r+0xaf4>
800094ec:	0c610713          	addi	a4,sp,198
800094f0:	00059863          	bnez	a1,80009500 <_vfprintf_r+0xd68>
800094f4:	03000793          	li	a5,48
800094f8:	0cf10323          	sb	a5,198(sp)
800094fc:	0c710713          	addi	a4,sp,199
80009500:	03068793          	addi	a5,a3,48
80009504:	00170613          	addi	a2,a4,1
80009508:	00f70023          	sb	a5,0(a4)
8000950c:	d85ff06f          	j	80009290 <_vfprintf_r+0xaf8>
80009510:	000b1663          	bnez	s6,8000951c <_vfprintf_r+0xd84>
80009514:	00147713          	andi	a4,s0,1
80009518:	06070663          	beqz	a4,80009584 <_vfprintf_r+0xdec>
8000951c:	02012783          	lw	a5,32(sp)
80009520:	00178713          	addi	a4,a5,1
80009524:	fa1ff06f          	j	800094c4 <_vfprintf_r+0xd2c>
80009528:	034cc063          	blt	s9,s4,80009548 <_vfprintf_r+0xdb0>
8000952c:	00147713          	andi	a4,s0,1
80009530:	000c8b13          	mv	s6,s9
80009534:	00070663          	beqz	a4,80009540 <_vfprintf_r+0xda8>
80009538:	02012783          	lw	a5,32(sp)
8000953c:	00fc8b33          	add	s6,s9,a5
80009540:	06700d13          	li	s10,103
80009544:	01c0006f          	j	80009560 <_vfprintf_r+0xdc8>
80009548:	02012783          	lw	a5,32(sp)
8000954c:	06700d13          	li	s10,103
80009550:	00fa0b33          	add	s6,s4,a5
80009554:	01904663          	bgtz	s9,80009560 <_vfprintf_r+0xdc8>
80009558:	419b0333          	sub	t1,s6,s9
8000955c:	00130b13          	addi	s6,t1,1
80009560:	40047b93          	andi	s7,s0,1024
80009564:	00000c13          	li	s8,0
80009568:	d60b84e3          	beqz	s7,800092d0 <_vfprintf_r+0xb38>
8000956c:	00000b93          	li	s7,0
80009570:	d79050e3          	blez	s9,800092d0 <_vfprintf_r+0xb38>
80009574:	0ff00693          	li	a3,255
80009578:	0380006f          	j	800095b0 <_vfprintf_r+0xe18>
8000957c:	000c8b13          	mv	s6,s9
80009580:	f49ff06f          	j	800094c8 <_vfprintf_r+0xd30>
80009584:	06600d13          	li	s10,102
80009588:	00100b13          	li	s6,1
8000958c:	fd5ff06f          	j	80009560 <_vfprintf_r+0xdc8>
80009590:	03975663          	ble	s9,a4,800095bc <_vfprintf_r+0xe24>
80009594:	01012783          	lw	a5,16(sp)
80009598:	40ec8cb3          	sub	s9,s9,a4
8000959c:	0017c703          	lbu	a4,1(a5)
800095a0:	02070863          	beqz	a4,800095d0 <_vfprintf_r+0xe38>
800095a4:	00178793          	addi	a5,a5,1
800095a8:	001b8b93          	addi	s7,s7,1
800095ac:	00f12823          	sw	a5,16(sp)
800095b0:	01012783          	lw	a5,16(sp)
800095b4:	0007c703          	lbu	a4,0(a5)
800095b8:	fcd71ce3          	bne	a4,a3,80009590 <_vfprintf_r+0xdf8>
800095bc:	03012783          	lw	a5,48(sp)
800095c0:	018b8733          	add	a4,s7,s8
800095c4:	02f70733          	mul	a4,a4,a5
800095c8:	01670b33          	add	s6,a4,s6
800095cc:	d05ff06f          	j	800092d0 <_vfprintf_r+0xb38>
800095d0:	001c0c13          	addi	s8,s8,1
800095d4:	fddff06f          	j	800095b0 <_vfprintf_r+0xe18>
800095d8:	004a8713          	addi	a4,s5,4
800095dc:	00e12c23          	sw	a4,24(sp)
800095e0:	02047713          	andi	a4,s0,32
800095e4:	000aa783          	lw	a5,0(s5)
800095e8:	02070063          	beqz	a4,80009608 <_vfprintf_r+0xe70>
800095ec:	02412703          	lw	a4,36(sp)
800095f0:	00e7a023          	sw	a4,0(a5)
800095f4:	41f75713          	srai	a4,a4,0x1f
800095f8:	00e7a223          	sw	a4,4(a5)
800095fc:	01812a83          	lw	s5,24(sp)
80009600:	01c12483          	lw	s1,28(sp)
80009604:	b28ff06f          	j	8000892c <_vfprintf_r+0x194>
80009608:	01047713          	andi	a4,s0,16
8000960c:	00070863          	beqz	a4,8000961c <_vfprintf_r+0xe84>
80009610:	02412703          	lw	a4,36(sp)
80009614:	00e7a023          	sw	a4,0(a5)
80009618:	fe5ff06f          	j	800095fc <_vfprintf_r+0xe64>
8000961c:	04047713          	andi	a4,s0,64
80009620:	00070863          	beqz	a4,80009630 <_vfprintf_r+0xe98>
80009624:	02415703          	lhu	a4,36(sp)
80009628:	00e79023          	sh	a4,0(a5)
8000962c:	fd1ff06f          	j	800095fc <_vfprintf_r+0xe64>
80009630:	20047413          	andi	s0,s0,512
80009634:	fc040ee3          	beqz	s0,80009610 <_vfprintf_r+0xe78>
80009638:	02414703          	lbu	a4,36(sp)
8000963c:	00e78023          	sb	a4,0(a5)
80009640:	fbdff06f          	j	800095fc <_vfprintf_r+0xe64>
80009644:	01046413          	ori	s0,s0,16
80009648:	02047793          	andi	a5,s0,32
8000964c:	04078863          	beqz	a5,8000969c <_vfprintf_r+0xf04>
80009650:	007a8a93          	addi	s5,s5,7
80009654:	ff8afa93          	andi	s5,s5,-8
80009658:	000aac83          	lw	s9,0(s5)
8000965c:	004aac03          	lw	s8,4(s5)
80009660:	008a8793          	addi	a5,s5,8
80009664:	00f12c23          	sw	a5,24(sp)
80009668:	bff47413          	andi	s0,s0,-1025
8000966c:	00000793          	li	a5,0
80009670:	0a010ba3          	sb	zero,183(sp)
80009674:	fff00713          	li	a4,-1
80009678:	42eb0863          	beq	s6,a4,80009aa8 <_vfprintf_r+0x1310>
8000967c:	00040713          	mv	a4,s0
80009680:	018ce6b3          	or	a3,s9,s8
80009684:	f7f47413          	andi	s0,s0,-129
80009688:	42069063          	bnez	a3,80009aa8 <_vfprintf_r+0x1310>
8000968c:	580b0e63          	beqz	s6,80009c28 <_vfprintf_r+0x1490>
80009690:	00100713          	li	a4,1
80009694:	40e79e63          	bne	a5,a4,80009ab0 <_vfprintf_r+0x1318>
80009698:	dd4ff06f          	j	80008c6c <_vfprintf_r+0x4d4>
8000969c:	004a8793          	addi	a5,s5,4
800096a0:	00f12c23          	sw	a5,24(sp)
800096a4:	01047793          	andi	a5,s0,16
800096a8:	00078663          	beqz	a5,800096b4 <_vfprintf_r+0xf1c>
800096ac:	000aac83          	lw	s9,0(s5)
800096b0:	0100006f          	j	800096c0 <_vfprintf_r+0xf28>
800096b4:	04047793          	andi	a5,s0,64
800096b8:	00078863          	beqz	a5,800096c8 <_vfprintf_r+0xf30>
800096bc:	000adc83          	lhu	s9,0(s5)
800096c0:	00000c13          	li	s8,0
800096c4:	fa5ff06f          	j	80009668 <_vfprintf_r+0xed0>
800096c8:	20047793          	andi	a5,s0,512
800096cc:	fe0780e3          	beqz	a5,800096ac <_vfprintf_r+0xf14>
800096d0:	000acc83          	lbu	s9,0(s5)
800096d4:	fedff06f          	j	800096c0 <_vfprintf_r+0xf28>
800096d8:	004a8793          	addi	a5,s5,4
800096dc:	00f12c23          	sw	a5,24(sp)
800096e0:	ffff87b7          	lui	a5,0xffff8
800096e4:	8307c793          	xori	a5,a5,-2000
800096e8:	0af11c23          	sh	a5,184(sp)
800096ec:	800217b7          	lui	a5,0x80021
800096f0:	d7c78793          	addi	a5,a5,-644 # 80020d7c <__stack+0xfffe42b0>
800096f4:	04f12023          	sw	a5,64(sp)
800096f8:	000aac83          	lw	s9,0(s5)
800096fc:	00000c13          	li	s8,0
80009700:	00246413          	ori	s0,s0,2
80009704:	00200793          	li	a5,2
80009708:	07800d13          	li	s10,120
8000970c:	f65ff06f          	j	80009670 <_vfprintf_r+0xed8>
80009710:	004a8793          	addi	a5,s5,4
80009714:	00f12c23          	sw	a5,24(sp)
80009718:	0a010ba3          	sb	zero,183(sp)
8000971c:	fff00793          	li	a5,-1
80009720:	03112623          	sw	a7,44(sp)
80009724:	000aa483          	lw	s1,0(s5)
80009728:	02fb0663          	beq	s6,a5,80009754 <_vfprintf_r+0xfbc>
8000972c:	000b0613          	mv	a2,s6
80009730:	00000593          	li	a1,0
80009734:	00048513          	mv	a0,s1
80009738:	5bc040ef          	jal	ra,8000dcf4 <memchr>
8000973c:	00a12623          	sw	a0,12(sp)
80009740:	02c12883          	lw	a7,44(sp)
80009744:	e2050c63          	beqz	a0,80008d7c <_vfprintf_r+0x5e4>
80009748:	40950b33          	sub	s6,a0,s1
8000974c:	00012623          	sw	zero,12(sp)
80009750:	e2cff06f          	j	80008d7c <_vfprintf_r+0x5e4>
80009754:	00048513          	mv	a0,s1
80009758:	101050ef          	jal	ra,8000f058 <strlen>
8000975c:	02c12883          	lw	a7,44(sp)
80009760:	00050b13          	mv	s6,a0
80009764:	00012623          	sw	zero,12(sp)
80009768:	00000a93          	li	s5,0
8000976c:	00000c13          	li	s8,0
80009770:	00000b93          	li	s7,0
80009774:	00000c93          	li	s9,0
80009778:	03512623          	sw	s5,44(sp)
8000977c:	016ad463          	ble	s6,s5,80009784 <_vfprintf_r+0xfec>
80009780:	03612623          	sw	s6,44(sp)
80009784:	0b714703          	lbu	a4,183(sp)
80009788:	00070863          	beqz	a4,80009798 <_vfprintf_r+0x1000>
8000978c:	02c12783          	lw	a5,44(sp)
80009790:	00178793          	addi	a5,a5,1
80009794:	02f12623          	sw	a5,44(sp)
80009798:	00247d93          	andi	s11,s0,2
8000979c:	000d8863          	beqz	s11,800097ac <_vfprintf_r+0x1014>
800097a0:	02c12783          	lw	a5,44(sp)
800097a4:	00278793          	addi	a5,a5,2
800097a8:	02f12623          	sw	a5,44(sp)
800097ac:	08447793          	andi	a5,s0,132
800097b0:	04f12223          	sw	a5,68(sp)
800097b4:	06079863          	bnez	a5,80009824 <_vfprintf_r+0x108c>
800097b8:	02812783          	lw	a5,40(sp)
800097bc:	02c12703          	lw	a4,44(sp)
800097c0:	40e78733          	sub	a4,a5,a4
800097c4:	06e05063          	blez	a4,80009824 <_vfprintf_r+0x108c>
800097c8:	80020e37          	lui	t3,0x80020
800097cc:	01000e93          	li	t4,16
800097d0:	274e0e13          	addi	t3,t3,628 # 80020274 <__stack+0xfffe37a8>
800097d4:	00700f13          	li	t5,7
800097d8:	0d812683          	lw	a3,216(sp)
800097dc:	01c8a023          	sw	t3,0(a7)
800097e0:	0dc12603          	lw	a2,220(sp)
800097e4:	00168693          	addi	a3,a3,1
800097e8:	00888593          	addi	a1,a7,8
800097ec:	46eec663          	blt	t4,a4,80009c58 <_vfprintf_r+0x14c0>
800097f0:	00e8a223          	sw	a4,4(a7)
800097f4:	00c70733          	add	a4,a4,a2
800097f8:	0ce12e23          	sw	a4,220(sp)
800097fc:	0cd12c23          	sw	a3,216(sp)
80009800:	00700713          	li	a4,7
80009804:	00058893          	mv	a7,a1
80009808:	00d75e63          	ble	a3,a4,80009824 <_vfprintf_r+0x108c>
8000980c:	0d410613          	addi	a2,sp,212
80009810:	00090593          	mv	a1,s2
80009814:	00098513          	mv	a0,s3
80009818:	7e0070ef          	jal	ra,80010ff8 <__sprint_r>
8000981c:	680518e3          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
80009820:	0fc10893          	addi	a7,sp,252
80009824:	0b714703          	lbu	a4,183(sp)
80009828:	04070863          	beqz	a4,80009878 <_vfprintf_r+0x10e0>
8000982c:	0b710713          	addi	a4,sp,183
80009830:	00e8a023          	sw	a4,0(a7)
80009834:	00100713          	li	a4,1
80009838:	00e8a223          	sw	a4,4(a7)
8000983c:	0dc12703          	lw	a4,220(sp)
80009840:	00700693          	li	a3,7
80009844:	00888893          	addi	a7,a7,8
80009848:	00170713          	addi	a4,a4,1
8000984c:	0ce12e23          	sw	a4,220(sp)
80009850:	0d812703          	lw	a4,216(sp)
80009854:	00170713          	addi	a4,a4,1
80009858:	0ce12c23          	sw	a4,216(sp)
8000985c:	00e6de63          	ble	a4,a3,80009878 <_vfprintf_r+0x10e0>
80009860:	0d410613          	addi	a2,sp,212
80009864:	00090593          	mv	a1,s2
80009868:	00098513          	mv	a0,s3
8000986c:	78c070ef          	jal	ra,80010ff8 <__sprint_r>
80009870:	62051ee3          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
80009874:	0fc10893          	addi	a7,sp,252
80009878:	040d8863          	beqz	s11,800098c8 <_vfprintf_r+0x1130>
8000987c:	0b810713          	addi	a4,sp,184
80009880:	00e8a023          	sw	a4,0(a7)
80009884:	00200713          	li	a4,2
80009888:	00e8a223          	sw	a4,4(a7)
8000988c:	0dc12703          	lw	a4,220(sp)
80009890:	00700693          	li	a3,7
80009894:	00888893          	addi	a7,a7,8
80009898:	00270713          	addi	a4,a4,2
8000989c:	0ce12e23          	sw	a4,220(sp)
800098a0:	0d812703          	lw	a4,216(sp)
800098a4:	00170713          	addi	a4,a4,1
800098a8:	0ce12c23          	sw	a4,216(sp)
800098ac:	00e6de63          	ble	a4,a3,800098c8 <_vfprintf_r+0x1130>
800098b0:	0d410613          	addi	a2,sp,212
800098b4:	00090593          	mv	a1,s2
800098b8:	00098513          	mv	a0,s3
800098bc:	73c070ef          	jal	ra,80010ff8 <__sprint_r>
800098c0:	5e0516e3          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
800098c4:	0fc10893          	addi	a7,sp,252
800098c8:	04412783          	lw	a5,68(sp)
800098cc:	08000713          	li	a4,128
800098d0:	06e79663          	bne	a5,a4,8000993c <_vfprintf_r+0x11a4>
800098d4:	02812783          	lw	a5,40(sp)
800098d8:	02c12703          	lw	a4,44(sp)
800098dc:	40e78db3          	sub	s11,a5,a4
800098e0:	05b05e63          	blez	s11,8000993c <_vfprintf_r+0x11a4>
800098e4:	01000793          	li	a5,16
800098e8:	00700e13          	li	t3,7
800098ec:	0d812703          	lw	a4,216(sp)
800098f0:	0dc12683          	lw	a3,220(sp)
800098f4:	00888613          	addi	a2,a7,8
800098f8:	00170713          	addi	a4,a4,1
800098fc:	3bb7ca63          	blt	a5,s11,80009cb0 <_vfprintf_r+0x1518>
80009900:	01412783          	lw	a5,20(sp)
80009904:	01b8a223          	sw	s11,4(a7)
80009908:	00dd8db3          	add	s11,s11,a3
8000990c:	00f8a023          	sw	a5,0(a7)
80009910:	0db12e23          	sw	s11,220(sp)
80009914:	0ce12c23          	sw	a4,216(sp)
80009918:	00700693          	li	a3,7
8000991c:	00060893          	mv	a7,a2
80009920:	00e6de63          	ble	a4,a3,8000993c <_vfprintf_r+0x11a4>
80009924:	0d410613          	addi	a2,sp,212
80009928:	00090593          	mv	a1,s2
8000992c:	00098513          	mv	a0,s3
80009930:	6c8070ef          	jal	ra,80010ff8 <__sprint_r>
80009934:	56051ce3          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
80009938:	0fc10893          	addi	a7,sp,252
8000993c:	416a8ab3          	sub	s5,s5,s6
80009940:	05505e63          	blez	s5,8000999c <_vfprintf_r+0x1204>
80009944:	01000d93          	li	s11,16
80009948:	00700813          	li	a6,7
8000994c:	01412783          	lw	a5,20(sp)
80009950:	0d812703          	lw	a4,216(sp)
80009954:	0dc12683          	lw	a3,220(sp)
80009958:	00f8a023          	sw	a5,0(a7)
8000995c:	00170713          	addi	a4,a4,1
80009960:	00888613          	addi	a2,a7,8
80009964:	395dce63          	blt	s11,s5,80009d00 <_vfprintf_r+0x1568>
80009968:	0158a223          	sw	s5,4(a7)
8000996c:	00da8ab3          	add	s5,s5,a3
80009970:	0d512e23          	sw	s5,220(sp)
80009974:	0ce12c23          	sw	a4,216(sp)
80009978:	00700693          	li	a3,7
8000997c:	00060893          	mv	a7,a2
80009980:	00e6de63          	ble	a4,a3,8000999c <_vfprintf_r+0x1204>
80009984:	0d410613          	addi	a2,sp,212
80009988:	00090593          	mv	a1,s2
8000998c:	00098513          	mv	a0,s3
80009990:	668070ef          	jal	ra,80010ff8 <__sprint_r>
80009994:	50051ce3          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
80009998:	0fc10893          	addi	a7,sp,252
8000999c:	10047713          	andi	a4,s0,256
800099a0:	0dc12d83          	lw	s11,220(sp)
800099a4:	38071e63          	bnez	a4,80009d40 <_vfprintf_r+0x15a8>
800099a8:	01bb0333          	add	t1,s6,s11
800099ac:	0098a023          	sw	s1,0(a7)
800099b0:	0168a223          	sw	s6,4(a7)
800099b4:	0c612e23          	sw	t1,220(sp)
800099b8:	0d812783          	lw	a5,216(sp)
800099bc:	00700713          	li	a4,7
800099c0:	00888893          	addi	a7,a7,8
800099c4:	00178793          	addi	a5,a5,1
800099c8:	0cf12c23          	sw	a5,216(sp)
800099cc:	4af75c63          	ble	a5,a4,80009e84 <_vfprintf_r+0x16ec>
800099d0:	0d410613          	addi	a2,sp,212
800099d4:	00090593          	mv	a1,s2
800099d8:	00098513          	mv	a0,s3
800099dc:	61c070ef          	jal	ra,80010ff8 <__sprint_r>
800099e0:	4c0516e3          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
800099e4:	0fc10893          	addi	a7,sp,252
800099e8:	49c0006f          	j	80009e84 <_vfprintf_r+0x16ec>
800099ec:	01046413          	ori	s0,s0,16
800099f0:	02047793          	andi	a5,s0,32
800099f4:	02078263          	beqz	a5,80009a18 <_vfprintf_r+0x1280>
800099f8:	007a8a93          	addi	s5,s5,7
800099fc:	ff8afa93          	andi	s5,s5,-8
80009a00:	000aac83          	lw	s9,0(s5)
80009a04:	004aac03          	lw	s8,4(s5)
80009a08:	008a8793          	addi	a5,s5,8
80009a0c:	00f12c23          	sw	a5,24(sp)
80009a10:	00100793          	li	a5,1
80009a14:	c5dff06f          	j	80009670 <_vfprintf_r+0xed8>
80009a18:	004a8793          	addi	a5,s5,4
80009a1c:	00f12c23          	sw	a5,24(sp)
80009a20:	01047793          	andi	a5,s0,16
80009a24:	00078663          	beqz	a5,80009a30 <_vfprintf_r+0x1298>
80009a28:	000aac83          	lw	s9,0(s5)
80009a2c:	0100006f          	j	80009a3c <_vfprintf_r+0x12a4>
80009a30:	04047793          	andi	a5,s0,64
80009a34:	00078863          	beqz	a5,80009a44 <_vfprintf_r+0x12ac>
80009a38:	000adc83          	lhu	s9,0(s5)
80009a3c:	00000c13          	li	s8,0
80009a40:	fd1ff06f          	j	80009a10 <_vfprintf_r+0x1278>
80009a44:	20047793          	andi	a5,s0,512
80009a48:	fe0780e3          	beqz	a5,80009a28 <_vfprintf_r+0x1290>
80009a4c:	000acc83          	lbu	s9,0(s5)
80009a50:	fedff06f          	j	80009a3c <_vfprintf_r+0x12a4>
80009a54:	800217b7          	lui	a5,0x80021
80009a58:	d7c78793          	addi	a5,a5,-644 # 80020d7c <__stack+0xfffe42b0>
80009a5c:	fb1fe06f          	j	80008a0c <_vfprintf_r+0x274>
80009a60:	004a8793          	addi	a5,s5,4
80009a64:	00f12c23          	sw	a5,24(sp)
80009a68:	01047793          	andi	a5,s0,16
80009a6c:	00078663          	beqz	a5,80009a78 <_vfprintf_r+0x12e0>
80009a70:	000aac83          	lw	s9,0(s5)
80009a74:	0100006f          	j	80009a84 <_vfprintf_r+0x12ec>
80009a78:	04047793          	andi	a5,s0,64
80009a7c:	00078863          	beqz	a5,80009a8c <_vfprintf_r+0x12f4>
80009a80:	000adc83          	lhu	s9,0(s5)
80009a84:	00000c13          	li	s8,0
80009a88:	fadfe06f          	j	80008a34 <_vfprintf_r+0x29c>
80009a8c:	20047793          	andi	a5,s0,512
80009a90:	fe0780e3          	beqz	a5,80009a70 <_vfprintf_r+0x12d8>
80009a94:	000acc83          	lbu	s9,0(s5)
80009a98:	fedff06f          	j	80009a84 <_vfprintf_r+0x12ec>
80009a9c:	00040713          	mv	a4,s0
80009aa0:	00100793          	li	a5,1
80009aa4:	bddff06f          	j	80009680 <_vfprintf_r+0xee8>
80009aa8:	00100713          	li	a4,1
80009aac:	9ae78a63          	beq	a5,a4,80008c60 <_vfprintf_r+0x4c8>
80009ab0:	00200713          	li	a4,2
80009ab4:	12e78e63          	beq	a5,a4,80009bf0 <_vfprintf_r+0x1458>
80009ab8:	1a010793          	addi	a5,sp,416
80009abc:	01dc1693          	slli	a3,s8,0x1d
80009ac0:	007cf713          	andi	a4,s9,7
80009ac4:	003cdc93          	srli	s9,s9,0x3
80009ac8:	03070713          	addi	a4,a4,48
80009acc:	0196ecb3          	or	s9,a3,s9
80009ad0:	003c5c13          	srli	s8,s8,0x3
80009ad4:	fee78fa3          	sb	a4,-1(a5)
80009ad8:	018ce6b3          	or	a3,s9,s8
80009adc:	fff78493          	addi	s1,a5,-1
80009ae0:	02069e63          	bnez	a3,80009b1c <_vfprintf_r+0x1384>
80009ae4:	00147693          	andi	a3,s0,1
80009ae8:	00068a63          	beqz	a3,80009afc <_vfprintf_r+0x1364>
80009aec:	03000693          	li	a3,48
80009af0:	00d70663          	beq	a4,a3,80009afc <_vfprintf_r+0x1364>
80009af4:	fed48fa3          	sb	a3,-1(s1)
80009af8:	ffe78493          	addi	s1,a5,-2
80009afc:	1a010793          	addi	a5,sp,416
80009b00:	000b0a93          	mv	s5,s6
80009b04:	00012623          	sw	zero,12(sp)
80009b08:	40978b33          	sub	s6,a5,s1
80009b0c:	00000c13          	li	s8,0
80009b10:	00000b93          	li	s7,0
80009b14:	00000c93          	li	s9,0
80009b18:	c61ff06f          	j	80009778 <_vfprintf_r+0xfe0>
80009b1c:	00048793          	mv	a5,s1
80009b20:	f9dff06f          	j	80009abc <_vfprintf_r+0x1324>
80009b24:	00000a13          	li	s4,0
80009b28:	1a010d93          	addi	s11,sp,416
80009b2c:	40047a93          	andi	s5,s0,1024
80009b30:	00900b93          	li	s7,9
80009b34:	00a00613          	li	a2,10
80009b38:	00000693          	li	a3,0
80009b3c:	000c8513          	mv	a0,s9
80009b40:	000c0593          	mv	a1,s8
80009b44:	01112623          	sw	a7,12(sp)
80009b48:	7d40a0ef          	jal	ra,8001431c <__umoddi3>
80009b4c:	03050513          	addi	a0,a0,48
80009b50:	fead8fa3          	sb	a0,-1(s11)
80009b54:	fffd8493          	addi	s1,s11,-1
80009b58:	001a0a13          	addi	s4,s4,1
80009b5c:	00c12883          	lw	a7,12(sp)
80009b60:	040a8e63          	beqz	s5,80009bbc <_vfprintf_r+0x1424>
80009b64:	01012783          	lw	a5,16(sp)
80009b68:	0007c783          	lbu	a5,0(a5)
80009b6c:	04fa1863          	bne	s4,a5,80009bbc <_vfprintf_r+0x1424>
80009b70:	0ff00793          	li	a5,255
80009b74:	04fa0463          	beq	s4,a5,80009bbc <_vfprintf_r+0x1424>
80009b78:	000c1463          	bnez	s8,80009b80 <_vfprintf_r+0x13e8>
80009b7c:	059bf063          	bleu	s9,s7,80009bbc <_vfprintf_r+0x1424>
80009b80:	03012783          	lw	a5,48(sp)
80009b84:	03812583          	lw	a1,56(sp)
80009b88:	01112623          	sw	a7,12(sp)
80009b8c:	40f484b3          	sub	s1,s1,a5
80009b90:	00078613          	mv	a2,a5
80009b94:	00048513          	mv	a0,s1
80009b98:	4dc050ef          	jal	ra,8000f074 <strncpy>
80009b9c:	01012783          	lw	a5,16(sp)
80009ba0:	00000a13          	li	s4,0
80009ba4:	00c12883          	lw	a7,12(sp)
80009ba8:	0017c783          	lbu	a5,1(a5)
80009bac:	00078863          	beqz	a5,80009bbc <_vfprintf_r+0x1424>
80009bb0:	01012783          	lw	a5,16(sp)
80009bb4:	00178793          	addi	a5,a5,1
80009bb8:	00f12823          	sw	a5,16(sp)
80009bbc:	000c8513          	mv	a0,s9
80009bc0:	000c0593          	mv	a1,s8
80009bc4:	00a00613          	li	a2,10
80009bc8:	00000693          	li	a3,0
80009bcc:	01112623          	sw	a7,12(sp)
80009bd0:	3180a0ef          	jal	ra,80013ee8 <__udivdi3>
80009bd4:	00058c13          	mv	s8,a1
80009bd8:	00a5e5b3          	or	a1,a1,a0
80009bdc:	00050c93          	mv	s9,a0
80009be0:	00c12883          	lw	a7,12(sp)
80009be4:	f0058ce3          	beqz	a1,80009afc <_vfprintf_r+0x1364>
80009be8:	00048d93          	mv	s11,s1
80009bec:	f49ff06f          	j	80009b34 <_vfprintf_r+0x139c>
80009bf0:	1a010493          	addi	s1,sp,416
80009bf4:	04012703          	lw	a4,64(sp)
80009bf8:	00fcf793          	andi	a5,s9,15
80009bfc:	fff48493          	addi	s1,s1,-1
80009c00:	00f707b3          	add	a5,a4,a5
80009c04:	0007c783          	lbu	a5,0(a5)
80009c08:	004cdc93          	srli	s9,s9,0x4
80009c0c:	00f48023          	sb	a5,0(s1)
80009c10:	01cc1793          	slli	a5,s8,0x1c
80009c14:	0197ecb3          	or	s9,a5,s9
80009c18:	004c5c13          	srli	s8,s8,0x4
80009c1c:	018ce7b3          	or	a5,s9,s8
80009c20:	fc079ae3          	bnez	a5,80009bf4 <_vfprintf_r+0x145c>
80009c24:	ed9ff06f          	j	80009afc <_vfprintf_r+0x1364>
80009c28:	1a010493          	addi	s1,sp,416
80009c2c:	ec0798e3          	bnez	a5,80009afc <_vfprintf_r+0x1364>
80009c30:	00177713          	andi	a4,a4,1
80009c34:	ec0704e3          	beqz	a4,80009afc <_vfprintf_r+0x1364>
80009c38:	03000793          	li	a5,48
80009c3c:	18f10fa3          	sb	a5,415(sp)
80009c40:	834ff06f          	j	80008c74 <_vfprintf_r+0x4dc>
80009c44:	2c0d06e3          	beqz	s10,8000a710 <_vfprintf_r+0x1f78>
80009c48:	13a10e23          	sb	s10,316(sp)
80009c4c:	0a010ba3          	sb	zero,183(sp)
80009c50:	01512c23          	sw	s5,24(sp)
80009c54:	fa5fe06f          	j	80008bf8 <_vfprintf_r+0x460>
80009c58:	01060613          	addi	a2,a2,16
80009c5c:	01d8a223          	sw	t4,4(a7)
80009c60:	0cc12e23          	sw	a2,220(sp)
80009c64:	0cd12c23          	sw	a3,216(sp)
80009c68:	02df5e63          	ble	a3,t5,80009ca4 <_vfprintf_r+0x150c>
80009c6c:	0d410613          	addi	a2,sp,212
80009c70:	00090593          	mv	a1,s2
80009c74:	00098513          	mv	a0,s3
80009c78:	05e12c23          	sw	t5,88(sp)
80009c7c:	05c12a23          	sw	t3,84(sp)
80009c80:	05d12823          	sw	t4,80(sp)
80009c84:	04e12423          	sw	a4,72(sp)
80009c88:	370070ef          	jal	ra,80010ff8 <__sprint_r>
80009c8c:	220510e3          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
80009c90:	05812f03          	lw	t5,88(sp)
80009c94:	05412e03          	lw	t3,84(sp)
80009c98:	05012e83          	lw	t4,80(sp)
80009c9c:	04812703          	lw	a4,72(sp)
80009ca0:	0fc10593          	addi	a1,sp,252
80009ca4:	ff070713          	addi	a4,a4,-16
80009ca8:	00058893          	mv	a7,a1
80009cac:	b2dff06f          	j	800097d8 <_vfprintf_r+0x1040>
80009cb0:	01412583          	lw	a1,20(sp)
80009cb4:	01068693          	addi	a3,a3,16
80009cb8:	00f8a223          	sw	a5,4(a7)
80009cbc:	00b8a023          	sw	a1,0(a7)
80009cc0:	0cd12e23          	sw	a3,220(sp)
80009cc4:	0ce12c23          	sw	a4,216(sp)
80009cc8:	02ee5663          	ble	a4,t3,80009cf4 <_vfprintf_r+0x155c>
80009ccc:	0d410613          	addi	a2,sp,212
80009cd0:	00090593          	mv	a1,s2
80009cd4:	00098513          	mv	a0,s3
80009cd8:	05c12423          	sw	t3,72(sp)
80009cdc:	04f12223          	sw	a5,68(sp)
80009ce0:	318070ef          	jal	ra,80010ff8 <__sprint_r>
80009ce4:	1c0514e3          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
80009ce8:	04812e03          	lw	t3,72(sp)
80009cec:	04412783          	lw	a5,68(sp)
80009cf0:	0fc10613          	addi	a2,sp,252
80009cf4:	ff0d8d93          	addi	s11,s11,-16
80009cf8:	00060893          	mv	a7,a2
80009cfc:	bf1ff06f          	j	800098ec <_vfprintf_r+0x1154>
80009d00:	01068693          	addi	a3,a3,16
80009d04:	01b8a223          	sw	s11,4(a7)
80009d08:	0cd12e23          	sw	a3,220(sp)
80009d0c:	0ce12c23          	sw	a4,216(sp)
80009d10:	02e85263          	ble	a4,a6,80009d34 <_vfprintf_r+0x159c>
80009d14:	0d410613          	addi	a2,sp,212
80009d18:	00090593          	mv	a1,s2
80009d1c:	00098513          	mv	a0,s3
80009d20:	05012223          	sw	a6,68(sp)
80009d24:	2d4070ef          	jal	ra,80010ff8 <__sprint_r>
80009d28:	180512e3          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
80009d2c:	04412803          	lw	a6,68(sp)
80009d30:	0fc10613          	addi	a2,sp,252
80009d34:	ff0a8a93          	addi	s5,s5,-16
80009d38:	00060893          	mv	a7,a2
80009d3c:	c11ff06f          	j	8000994c <_vfprintf_r+0x11b4>
80009d40:	06500713          	li	a4,101
80009d44:	71a75263          	ble	s10,a4,8000a448 <_vfprintf_r+0x1cb0>
80009d48:	0e012703          	lw	a4,224(sp)
80009d4c:	09010593          	addi	a1,sp,144
80009d50:	0a010513          	addi	a0,sp,160
80009d54:	0ae12023          	sw	a4,160(sp)
80009d58:	0e412703          	lw	a4,228(sp)
80009d5c:	05112223          	sw	a7,68(sp)
80009d60:	08012823          	sw	zero,144(sp)
80009d64:	0ae12223          	sw	a4,164(sp)
80009d68:	0e812703          	lw	a4,232(sp)
80009d6c:	08012a23          	sw	zero,148(sp)
80009d70:	08012c23          	sw	zero,152(sp)
80009d74:	0ae12423          	sw	a4,168(sp)
80009d78:	0ec12703          	lw	a4,236(sp)
80009d7c:	08012e23          	sw	zero,156(sp)
80009d80:	0ae12623          	sw	a4,172(sp)
80009d84:	65c0b0ef          	jal	ra,800153e0 <__eqtf2>
80009d88:	04412883          	lw	a7,68(sp)
80009d8c:	18051263          	bnez	a0,80009f10 <_vfprintf_r+0x1778>
80009d90:	800217b7          	lui	a5,0x80021
80009d94:	da478793          	addi	a5,a5,-604 # 80020da4 <__stack+0xfffe42d8>
80009d98:	00f8a023          	sw	a5,0(a7)
80009d9c:	00100793          	li	a5,1
80009da0:	00f8a223          	sw	a5,4(a7)
80009da4:	0d812783          	lw	a5,216(sp)
80009da8:	001d8d93          	addi	s11,s11,1
80009dac:	0db12e23          	sw	s11,220(sp)
80009db0:	00178793          	addi	a5,a5,1
80009db4:	0cf12c23          	sw	a5,216(sp)
80009db8:	00700713          	li	a4,7
80009dbc:	00888893          	addi	a7,a7,8
80009dc0:	00f75e63          	ble	a5,a4,80009ddc <_vfprintf_r+0x1644>
80009dc4:	0d410613          	addi	a2,sp,212
80009dc8:	00090593          	mv	a1,s2
80009dcc:	00098513          	mv	a0,s3
80009dd0:	228070ef          	jal	ra,80010ff8 <__sprint_r>
80009dd4:	0c051ce3          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
80009dd8:	0fc10893          	addi	a7,sp,252
80009ddc:	0bc12783          	lw	a5,188(sp)
80009de0:	0147c663          	blt	a5,s4,80009dec <_vfprintf_r+0x1654>
80009de4:	00147793          	andi	a5,s0,1
80009de8:	08078e63          	beqz	a5,80009e84 <_vfprintf_r+0x16ec>
80009dec:	03412783          	lw	a5,52(sp)
80009df0:	02012703          	lw	a4,32(sp)
80009df4:	00888893          	addi	a7,a7,8
80009df8:	fef8ac23          	sw	a5,-8(a7)
80009dfc:	02012783          	lw	a5,32(sp)
80009e00:	fef8ae23          	sw	a5,-4(a7)
80009e04:	0dc12783          	lw	a5,220(sp)
80009e08:	00e787b3          	add	a5,a5,a4
80009e0c:	0cf12e23          	sw	a5,220(sp)
80009e10:	0d812783          	lw	a5,216(sp)
80009e14:	00700713          	li	a4,7
80009e18:	00178793          	addi	a5,a5,1
80009e1c:	0cf12c23          	sw	a5,216(sp)
80009e20:	00f75e63          	ble	a5,a4,80009e3c <_vfprintf_r+0x16a4>
80009e24:	0d410613          	addi	a2,sp,212
80009e28:	00090593          	mv	a1,s2
80009e2c:	00098513          	mv	a0,s3
80009e30:	1c8070ef          	jal	ra,80010ff8 <__sprint_r>
80009e34:	06051ce3          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
80009e38:	0fc10893          	addi	a7,sp,252
80009e3c:	fffa0493          	addi	s1,s4,-1
80009e40:	04905263          	blez	s1,80009e84 <_vfprintf_r+0x16ec>
80009e44:	01000a93          	li	s5,16
80009e48:	00700b93          	li	s7,7
80009e4c:	01412603          	lw	a2,20(sp)
80009e50:	0d812783          	lw	a5,216(sp)
80009e54:	0dc12703          	lw	a4,220(sp)
80009e58:	00c8a023          	sw	a2,0(a7)
80009e5c:	00178793          	addi	a5,a5,1
80009e60:	00888693          	addi	a3,a7,8
80009e64:	069aca63          	blt	s5,s1,80009ed8 <_vfprintf_r+0x1740>
80009e68:	0098a223          	sw	s1,4(a7)
80009e6c:	00e484b3          	add	s1,s1,a4
80009e70:	0c912e23          	sw	s1,220(sp)
80009e74:	0cf12c23          	sw	a5,216(sp)
80009e78:	00700713          	li	a4,7
80009e7c:	00068893          	mv	a7,a3
80009e80:	b4f748e3          	blt	a4,a5,800099d0 <_vfprintf_r+0x1238>
80009e84:	00447413          	andi	s0,s0,4
80009e88:	7c041263          	bnez	s0,8000a64c <_vfprintf_r+0x1eb4>
80009e8c:	02812d03          	lw	s10,40(sp)
80009e90:	02c12783          	lw	a5,44(sp)
80009e94:	00fd5463          	ble	a5,s10,80009e9c <_vfprintf_r+0x1704>
80009e98:	00078d13          	mv	s10,a5
80009e9c:	02412783          	lw	a5,36(sp)
80009ea0:	01a787b3          	add	a5,a5,s10
80009ea4:	02f12223          	sw	a5,36(sp)
80009ea8:	0dc12783          	lw	a5,220(sp)
80009eac:	00078c63          	beqz	a5,80009ec4 <_vfprintf_r+0x172c>
80009eb0:	0d410613          	addi	a2,sp,212
80009eb4:	00090593          	mv	a1,s2
80009eb8:	00098513          	mv	a0,s3
80009ebc:	13c070ef          	jal	ra,80010ff8 <__sprint_r>
80009ec0:	7e051663          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
80009ec4:	00c12783          	lw	a5,12(sp)
80009ec8:	0c012c23          	sw	zero,216(sp)
80009ecc:	02079ae3          	bnez	a5,8000a700 <_vfprintf_r+0x1f68>
80009ed0:	0fc10893          	addi	a7,sp,252
80009ed4:	f28ff06f          	j	800095fc <_vfprintf_r+0xe64>
80009ed8:	01070713          	addi	a4,a4,16
80009edc:	0158a223          	sw	s5,4(a7)
80009ee0:	0ce12e23          	sw	a4,220(sp)
80009ee4:	0cf12c23          	sw	a5,216(sp)
80009ee8:	00fbde63          	ble	a5,s7,80009f04 <_vfprintf_r+0x176c>
80009eec:	0d410613          	addi	a2,sp,212
80009ef0:	00090593          	mv	a1,s2
80009ef4:	00098513          	mv	a0,s3
80009ef8:	100070ef          	jal	ra,80010ff8 <__sprint_r>
80009efc:	7a051863          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
80009f00:	0fc10693          	addi	a3,sp,252
80009f04:	ff048493          	addi	s1,s1,-16
80009f08:	00068893          	mv	a7,a3
80009f0c:	f41ff06f          	j	80009e4c <_vfprintf_r+0x16b4>
80009f10:	0bc12703          	lw	a4,188(sp)
80009f14:	16e04463          	bgtz	a4,8000a07c <_vfprintf_r+0x18e4>
80009f18:	800217b7          	lui	a5,0x80021
80009f1c:	da478793          	addi	a5,a5,-604 # 80020da4 <__stack+0xfffe42d8>
80009f20:	00f8a023          	sw	a5,0(a7)
80009f24:	00100793          	li	a5,1
80009f28:	00f8a223          	sw	a5,4(a7)
80009f2c:	0d812783          	lw	a5,216(sp)
80009f30:	001d8d93          	addi	s11,s11,1
80009f34:	0db12e23          	sw	s11,220(sp)
80009f38:	00178793          	addi	a5,a5,1
80009f3c:	0cf12c23          	sw	a5,216(sp)
80009f40:	00700713          	li	a4,7
80009f44:	00888893          	addi	a7,a7,8
80009f48:	00f75e63          	ble	a5,a4,80009f64 <_vfprintf_r+0x17cc>
80009f4c:	0d410613          	addi	a2,sp,212
80009f50:	00090593          	mv	a1,s2
80009f54:	00098513          	mv	a0,s3
80009f58:	0a0070ef          	jal	ra,80010ff8 <__sprint_r>
80009f5c:	74051863          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
80009f60:	0fc10893          	addi	a7,sp,252
80009f64:	0bc12783          	lw	a5,188(sp)
80009f68:	00079863          	bnez	a5,80009f78 <_vfprintf_r+0x17e0>
80009f6c:	000a1663          	bnez	s4,80009f78 <_vfprintf_r+0x17e0>
80009f70:	00147793          	andi	a5,s0,1
80009f74:	f00788e3          	beqz	a5,80009e84 <_vfprintf_r+0x16ec>
80009f78:	03412783          	lw	a5,52(sp)
80009f7c:	02012703          	lw	a4,32(sp)
80009f80:	00888893          	addi	a7,a7,8
80009f84:	fef8ac23          	sw	a5,-8(a7)
80009f88:	02012783          	lw	a5,32(sp)
80009f8c:	fef8ae23          	sw	a5,-4(a7)
80009f90:	0dc12783          	lw	a5,220(sp)
80009f94:	00e787b3          	add	a5,a5,a4
80009f98:	0cf12e23          	sw	a5,220(sp)
80009f9c:	0d812783          	lw	a5,216(sp)
80009fa0:	00700713          	li	a4,7
80009fa4:	00178793          	addi	a5,a5,1
80009fa8:	0cf12c23          	sw	a5,216(sp)
80009fac:	00f75e63          	ble	a5,a4,80009fc8 <_vfprintf_r+0x1830>
80009fb0:	0d410613          	addi	a2,sp,212
80009fb4:	00090593          	mv	a1,s2
80009fb8:	00098513          	mv	a0,s3
80009fbc:	03c070ef          	jal	ra,80010ff8 <__sprint_r>
80009fc0:	6e051663          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
80009fc4:	0fc10893          	addi	a7,sp,252
80009fc8:	0bc12a83          	lw	s5,188(sp)
80009fcc:	060ad063          	bgez	s5,8000a02c <_vfprintf_r+0x1894>
80009fd0:	41500ab3          	neg	s5,s5
80009fd4:	00088713          	mv	a4,a7
80009fd8:	01000b93          	li	s7,16
80009fdc:	00700c13          	li	s8,7
80009fe0:	01412603          	lw	a2,20(sp)
80009fe4:	0d812783          	lw	a5,216(sp)
80009fe8:	0dc12683          	lw	a3,220(sp)
80009fec:	00c72023          	sw	a2,0(a4)
80009ff0:	00178793          	addi	a5,a5,1
80009ff4:	00888893          	addi	a7,a7,8
80009ff8:	055bc663          	blt	s7,s5,8000a044 <_vfprintf_r+0x18ac>
80009ffc:	01572223          	sw	s5,4(a4)
8000a000:	00da8ab3          	add	s5,s5,a3
8000a004:	0d512e23          	sw	s5,220(sp)
8000a008:	0cf12c23          	sw	a5,216(sp)
8000a00c:	00700713          	li	a4,7
8000a010:	00f75e63          	ble	a5,a4,8000a02c <_vfprintf_r+0x1894>
8000a014:	0d410613          	addi	a2,sp,212
8000a018:	00090593          	mv	a1,s2
8000a01c:	00098513          	mv	a0,s3
8000a020:	7d9060ef          	jal	ra,80010ff8 <__sprint_r>
8000a024:	68051463          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
8000a028:	0fc10893          	addi	a7,sp,252
8000a02c:	0dc12783          	lw	a5,220(sp)
8000a030:	0098a023          	sw	s1,0(a7)
8000a034:	0148a223          	sw	s4,4(a7)
8000a038:	014787b3          	add	a5,a5,s4
8000a03c:	0cf12e23          	sw	a5,220(sp)
8000a040:	979ff06f          	j	800099b8 <_vfprintf_r+0x1220>
8000a044:	01068693          	addi	a3,a3,16
8000a048:	01772223          	sw	s7,4(a4)
8000a04c:	0cd12e23          	sw	a3,220(sp)
8000a050:	0cf12c23          	sw	a5,216(sp)
8000a054:	00fc5e63          	ble	a5,s8,8000a070 <_vfprintf_r+0x18d8>
8000a058:	0d410613          	addi	a2,sp,212
8000a05c:	00090593          	mv	a1,s2
8000a060:	00098513          	mv	a0,s3
8000a064:	795060ef          	jal	ra,80010ff8 <__sprint_r>
8000a068:	64051263          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
8000a06c:	0fc10893          	addi	a7,sp,252
8000a070:	ff0a8a93          	addi	s5,s5,-16
8000a074:	00088713          	mv	a4,a7
8000a078:	f69ff06f          	j	80009fe0 <_vfprintf_r+0x1848>
8000a07c:	000c8a93          	mv	s5,s9
8000a080:	019a5463          	ble	s9,s4,8000a088 <_vfprintf_r+0x18f0>
8000a084:	000a0a93          	mv	s5,s4
8000a088:	05505263          	blez	s5,8000a0cc <_vfprintf_r+0x1934>
8000a08c:	0d812703          	lw	a4,216(sp)
8000a090:	01ba8db3          	add	s11,s5,s11
8000a094:	0098a023          	sw	s1,0(a7)
8000a098:	00170713          	addi	a4,a4,1
8000a09c:	0158a223          	sw	s5,4(a7)
8000a0a0:	0db12e23          	sw	s11,220(sp)
8000a0a4:	0ce12c23          	sw	a4,216(sp)
8000a0a8:	00700693          	li	a3,7
8000a0ac:	00888893          	addi	a7,a7,8
8000a0b0:	00e6de63          	ble	a4,a3,8000a0cc <_vfprintf_r+0x1934>
8000a0b4:	0d410613          	addi	a2,sp,212
8000a0b8:	00090593          	mv	a1,s2
8000a0bc:	00098513          	mv	a0,s3
8000a0c0:	739060ef          	jal	ra,80010ff8 <__sprint_r>
8000a0c4:	5e051463          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
8000a0c8:	0fc10893          	addi	a7,sp,252
8000a0cc:	000ad463          	bgez	s5,8000a0d4 <_vfprintf_r+0x193c>
8000a0d0:	00000a93          	li	s5,0
8000a0d4:	415c8ab3          	sub	s5,s9,s5
8000a0d8:	05505e63          	blez	s5,8000a134 <_vfprintf_r+0x199c>
8000a0dc:	01000d13          	li	s10,16
8000a0e0:	00700d93          	li	s11,7
8000a0e4:	01412783          	lw	a5,20(sp)
8000a0e8:	0d812703          	lw	a4,216(sp)
8000a0ec:	0dc12683          	lw	a3,220(sp)
8000a0f0:	00f8a023          	sw	a5,0(a7)
8000a0f4:	00170713          	addi	a4,a4,1
8000a0f8:	00888613          	addi	a2,a7,8
8000a0fc:	195d4c63          	blt	s10,s5,8000a294 <_vfprintf_r+0x1afc>
8000a100:	0158a223          	sw	s5,4(a7)
8000a104:	00da8ab3          	add	s5,s5,a3
8000a108:	0d512e23          	sw	s5,220(sp)
8000a10c:	0ce12c23          	sw	a4,216(sp)
8000a110:	00700693          	li	a3,7
8000a114:	00060893          	mv	a7,a2
8000a118:	00e6de63          	ble	a4,a3,8000a134 <_vfprintf_r+0x199c>
8000a11c:	0d410613          	addi	a2,sp,212
8000a120:	00090593          	mv	a1,s2
8000a124:	00098513          	mv	a0,s3
8000a128:	6d1060ef          	jal	ra,80010ff8 <__sprint_r>
8000a12c:	58051063          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
8000a130:	0fc10893          	addi	a7,sp,252
8000a134:	40047793          	andi	a5,s0,1024
8000a138:	01948ab3          	add	s5,s1,s9
8000a13c:	02078063          	beqz	a5,8000a15c <_vfprintf_r+0x19c4>
8000a140:	00700d13          	li	s10,7
8000a144:	01448db3          	add	s11,s1,s4
8000a148:	180b9263          	bnez	s7,8000a2cc <_vfprintf_r+0x1b34>
8000a14c:	180c1263          	bnez	s8,8000a2d0 <_vfprintf_r+0x1b38>
8000a150:	014487b3          	add	a5,s1,s4
8000a154:	0157f463          	bleu	s5,a5,8000a15c <_vfprintf_r+0x19c4>
8000a158:	00078a93          	mv	s5,a5
8000a15c:	0bc12783          	lw	a5,188(sp)
8000a160:	0147c663          	blt	a5,s4,8000a16c <_vfprintf_r+0x19d4>
8000a164:	00147793          	andi	a5,s0,1
8000a168:	04078a63          	beqz	a5,8000a1bc <_vfprintf_r+0x1a24>
8000a16c:	03412783          	lw	a5,52(sp)
8000a170:	02012703          	lw	a4,32(sp)
8000a174:	00888893          	addi	a7,a7,8
8000a178:	fef8ac23          	sw	a5,-8(a7)
8000a17c:	02012783          	lw	a5,32(sp)
8000a180:	fef8ae23          	sw	a5,-4(a7)
8000a184:	0dc12783          	lw	a5,220(sp)
8000a188:	00e787b3          	add	a5,a5,a4
8000a18c:	0cf12e23          	sw	a5,220(sp)
8000a190:	0d812783          	lw	a5,216(sp)
8000a194:	00700713          	li	a4,7
8000a198:	00178793          	addi	a5,a5,1
8000a19c:	0cf12c23          	sw	a5,216(sp)
8000a1a0:	00f75e63          	ble	a5,a4,8000a1bc <_vfprintf_r+0x1a24>
8000a1a4:	0d410613          	addi	a2,sp,212
8000a1a8:	00090593          	mv	a1,s2
8000a1ac:	00098513          	mv	a0,s3
8000a1b0:	649060ef          	jal	ra,80010ff8 <__sprint_r>
8000a1b4:	4e051c63          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
8000a1b8:	0fc10893          	addi	a7,sp,252
8000a1bc:	014484b3          	add	s1,s1,s4
8000a1c0:	415487b3          	sub	a5,s1,s5
8000a1c4:	0bc12483          	lw	s1,188(sp)
8000a1c8:	409a04b3          	sub	s1,s4,s1
8000a1cc:	0097d463          	ble	s1,a5,8000a1d4 <_vfprintf_r+0x1a3c>
8000a1d0:	00078493          	mv	s1,a5
8000a1d4:	04905463          	blez	s1,8000a21c <_vfprintf_r+0x1a84>
8000a1d8:	0dc12783          	lw	a5,220(sp)
8000a1dc:	0158a023          	sw	s5,0(a7)
8000a1e0:	0098a223          	sw	s1,4(a7)
8000a1e4:	00f487b3          	add	a5,s1,a5
8000a1e8:	0cf12e23          	sw	a5,220(sp)
8000a1ec:	0d812783          	lw	a5,216(sp)
8000a1f0:	00700713          	li	a4,7
8000a1f4:	00888893          	addi	a7,a7,8
8000a1f8:	00178793          	addi	a5,a5,1
8000a1fc:	0cf12c23          	sw	a5,216(sp)
8000a200:	00f75e63          	ble	a5,a4,8000a21c <_vfprintf_r+0x1a84>
8000a204:	0d410613          	addi	a2,sp,212
8000a208:	00090593          	mv	a1,s2
8000a20c:	00098513          	mv	a0,s3
8000a210:	5e9060ef          	jal	ra,80010ff8 <__sprint_r>
8000a214:	48051c63          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
8000a218:	0fc10893          	addi	a7,sp,252
8000a21c:	00048793          	mv	a5,s1
8000a220:	0004d463          	bgez	s1,8000a228 <_vfprintf_r+0x1a90>
8000a224:	00000793          	li	a5,0
8000a228:	0bc12483          	lw	s1,188(sp)
8000a22c:	409a04b3          	sub	s1,s4,s1
8000a230:	40f484b3          	sub	s1,s1,a5
8000a234:	c49058e3          	blez	s1,80009e84 <_vfprintf_r+0x16ec>
8000a238:	01000a93          	li	s5,16
8000a23c:	00700b93          	li	s7,7
8000a240:	01412603          	lw	a2,20(sp)
8000a244:	0d812783          	lw	a5,216(sp)
8000a248:	0dc12703          	lw	a4,220(sp)
8000a24c:	00c8a023          	sw	a2,0(a7)
8000a250:	00178793          	addi	a5,a5,1
8000a254:	00888693          	addi	a3,a7,8
8000a258:	c09ad8e3          	ble	s1,s5,80009e68 <_vfprintf_r+0x16d0>
8000a25c:	01070713          	addi	a4,a4,16
8000a260:	0158a223          	sw	s5,4(a7)
8000a264:	0ce12e23          	sw	a4,220(sp)
8000a268:	0cf12c23          	sw	a5,216(sp)
8000a26c:	00fbde63          	ble	a5,s7,8000a288 <_vfprintf_r+0x1af0>
8000a270:	0d410613          	addi	a2,sp,212
8000a274:	00090593          	mv	a1,s2
8000a278:	00098513          	mv	a0,s3
8000a27c:	57d060ef          	jal	ra,80010ff8 <__sprint_r>
8000a280:	42051663          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
8000a284:	0fc10693          	addi	a3,sp,252
8000a288:	ff048493          	addi	s1,s1,-16
8000a28c:	00068893          	mv	a7,a3
8000a290:	fb1ff06f          	j	8000a240 <_vfprintf_r+0x1aa8>
8000a294:	01068693          	addi	a3,a3,16
8000a298:	01a8a223          	sw	s10,4(a7)
8000a29c:	0cd12e23          	sw	a3,220(sp)
8000a2a0:	0ce12c23          	sw	a4,216(sp)
8000a2a4:	00edde63          	ble	a4,s11,8000a2c0 <_vfprintf_r+0x1b28>
8000a2a8:	0d410613          	addi	a2,sp,212
8000a2ac:	00090593          	mv	a1,s2
8000a2b0:	00098513          	mv	a0,s3
8000a2b4:	545060ef          	jal	ra,80010ff8 <__sprint_r>
8000a2b8:	3e051a63          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
8000a2bc:	0fc10613          	addi	a2,sp,252
8000a2c0:	ff0a8a93          	addi	s5,s5,-16
8000a2c4:	00060893          	mv	a7,a2
8000a2c8:	e1dff06f          	j	8000a0e4 <_vfprintf_r+0x194c>
8000a2cc:	0c0c0e63          	beqz	s8,8000a3a8 <_vfprintf_r+0x1c10>
8000a2d0:	fffc0c13          	addi	s8,s8,-1
8000a2d4:	03812783          	lw	a5,56(sp)
8000a2d8:	03012703          	lw	a4,48(sp)
8000a2dc:	00888893          	addi	a7,a7,8
8000a2e0:	fef8ac23          	sw	a5,-8(a7)
8000a2e4:	03012783          	lw	a5,48(sp)
8000a2e8:	fef8ae23          	sw	a5,-4(a7)
8000a2ec:	0dc12783          	lw	a5,220(sp)
8000a2f0:	00e787b3          	add	a5,a5,a4
8000a2f4:	0cf12e23          	sw	a5,220(sp)
8000a2f8:	0d812783          	lw	a5,216(sp)
8000a2fc:	00178793          	addi	a5,a5,1
8000a300:	0cf12c23          	sw	a5,216(sp)
8000a304:	00fd5e63          	ble	a5,s10,8000a320 <_vfprintf_r+0x1b88>
8000a308:	0d410613          	addi	a2,sp,212
8000a30c:	00090593          	mv	a1,s2
8000a310:	00098513          	mv	a0,s3
8000a314:	4e5060ef          	jal	ra,80010ff8 <__sprint_r>
8000a318:	38051a63          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
8000a31c:	0fc10893          	addi	a7,sp,252
8000a320:	01012783          	lw	a5,16(sp)
8000a324:	415d8733          	sub	a4,s11,s5
8000a328:	0007cb03          	lbu	s6,0(a5)
8000a32c:	01675463          	ble	s6,a4,8000a334 <_vfprintf_r+0x1b9c>
8000a330:	00070b13          	mv	s6,a4
8000a334:	05605263          	blez	s6,8000a378 <_vfprintf_r+0x1be0>
8000a338:	0dc12703          	lw	a4,220(sp)
8000a33c:	0158a023          	sw	s5,0(a7)
8000a340:	0168a223          	sw	s6,4(a7)
8000a344:	00eb0733          	add	a4,s6,a4
8000a348:	0ce12e23          	sw	a4,220(sp)
8000a34c:	0d812703          	lw	a4,216(sp)
8000a350:	00888893          	addi	a7,a7,8
8000a354:	00170713          	addi	a4,a4,1
8000a358:	0ce12c23          	sw	a4,216(sp)
8000a35c:	00ed5e63          	ble	a4,s10,8000a378 <_vfprintf_r+0x1be0>
8000a360:	0d410613          	addi	a2,sp,212
8000a364:	00090593          	mv	a1,s2
8000a368:	00098513          	mv	a0,s3
8000a36c:	48d060ef          	jal	ra,80010ff8 <__sprint_r>
8000a370:	32051e63          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
8000a374:	0fc10893          	addi	a7,sp,252
8000a378:	000b0713          	mv	a4,s6
8000a37c:	000b5463          	bgez	s6,8000a384 <_vfprintf_r+0x1bec>
8000a380:	00000713          	li	a4,0
8000a384:	01012783          	lw	a5,16(sp)
8000a388:	01000813          	li	a6,16
8000a38c:	0007c783          	lbu	a5,0(a5)
8000a390:	40e78b33          	sub	s6,a5,a4
8000a394:	07604263          	bgtz	s6,8000a3f8 <_vfprintf_r+0x1c60>
8000a398:	01012783          	lw	a5,16(sp)
8000a39c:	0007c783          	lbu	a5,0(a5)
8000a3a0:	00fa8ab3          	add	s5,s5,a5
8000a3a4:	da5ff06f          	j	8000a148 <_vfprintf_r+0x19b0>
8000a3a8:	01012783          	lw	a5,16(sp)
8000a3ac:	fffb8b93          	addi	s7,s7,-1
8000a3b0:	fff78793          	addi	a5,a5,-1
8000a3b4:	00f12823          	sw	a5,16(sp)
8000a3b8:	f1dff06f          	j	8000a2d4 <_vfprintf_r+0x1b3c>
8000a3bc:	01068693          	addi	a3,a3,16
8000a3c0:	0108a223          	sw	a6,4(a7)
8000a3c4:	0cd12e23          	sw	a3,220(sp)
8000a3c8:	0ce12c23          	sw	a4,216(sp)
8000a3cc:	02ed5263          	ble	a4,s10,8000a3f0 <_vfprintf_r+0x1c58>
8000a3d0:	0d410613          	addi	a2,sp,212
8000a3d4:	00090593          	mv	a1,s2
8000a3d8:	00098513          	mv	a0,s3
8000a3dc:	05012223          	sw	a6,68(sp)
8000a3e0:	419060ef          	jal	ra,80010ff8 <__sprint_r>
8000a3e4:	2c051463          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
8000a3e8:	04412803          	lw	a6,68(sp)
8000a3ec:	0fc10613          	addi	a2,sp,252
8000a3f0:	ff0b0b13          	addi	s6,s6,-16
8000a3f4:	00060893          	mv	a7,a2
8000a3f8:	01412783          	lw	a5,20(sp)
8000a3fc:	0d812703          	lw	a4,216(sp)
8000a400:	0dc12683          	lw	a3,220(sp)
8000a404:	00f8a023          	sw	a5,0(a7)
8000a408:	00170713          	addi	a4,a4,1
8000a40c:	00888613          	addi	a2,a7,8
8000a410:	fb6846e3          	blt	a6,s6,8000a3bc <_vfprintf_r+0x1c24>
8000a414:	00db07b3          	add	a5,s6,a3
8000a418:	0168a223          	sw	s6,4(a7)
8000a41c:	0cf12e23          	sw	a5,220(sp)
8000a420:	0ce12c23          	sw	a4,216(sp)
8000a424:	00060893          	mv	a7,a2
8000a428:	f6ed58e3          	ble	a4,s10,8000a398 <_vfprintf_r+0x1c00>
8000a42c:	0d410613          	addi	a2,sp,212
8000a430:	00090593          	mv	a1,s2
8000a434:	00098513          	mv	a0,s3
8000a438:	3c1060ef          	jal	ra,80010ff8 <__sprint_r>
8000a43c:	26051863          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
8000a440:	0fc10893          	addi	a7,sp,252
8000a444:	f55ff06f          	j	8000a398 <_vfprintf_r+0x1c00>
8000a448:	0d812783          	lw	a5,216(sp)
8000a44c:	00100713          	li	a4,1
8000a450:	0098a023          	sw	s1,0(a7)
8000a454:	001d8d93          	addi	s11,s11,1
8000a458:	00178793          	addi	a5,a5,1
8000a45c:	00888b93          	addi	s7,a7,8
8000a460:	01474663          	blt	a4,s4,8000a46c <_vfprintf_r+0x1cd4>
8000a464:	00147693          	andi	a3,s0,1
8000a468:	1c068663          	beqz	a3,8000a634 <_vfprintf_r+0x1e9c>
8000a46c:	00100713          	li	a4,1
8000a470:	00e8a223          	sw	a4,4(a7)
8000a474:	0db12e23          	sw	s11,220(sp)
8000a478:	0cf12c23          	sw	a5,216(sp)
8000a47c:	00700713          	li	a4,7
8000a480:	00f75e63          	ble	a5,a4,8000a49c <_vfprintf_r+0x1d04>
8000a484:	0d410613          	addi	a2,sp,212
8000a488:	00090593          	mv	a1,s2
8000a48c:	00098513          	mv	a0,s3
8000a490:	369060ef          	jal	ra,80010ff8 <__sprint_r>
8000a494:	20051c63          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
8000a498:	0fc10b93          	addi	s7,sp,252
8000a49c:	03412783          	lw	a5,52(sp)
8000a4a0:	02012703          	lw	a4,32(sp)
8000a4a4:	008b8b93          	addi	s7,s7,8
8000a4a8:	fefbac23          	sw	a5,-8(s7)
8000a4ac:	02012783          	lw	a5,32(sp)
8000a4b0:	fefbae23          	sw	a5,-4(s7)
8000a4b4:	0dc12783          	lw	a5,220(sp)
8000a4b8:	00e787b3          	add	a5,a5,a4
8000a4bc:	0cf12e23          	sw	a5,220(sp)
8000a4c0:	0d812783          	lw	a5,216(sp)
8000a4c4:	00700713          	li	a4,7
8000a4c8:	00178793          	addi	a5,a5,1
8000a4cc:	0cf12c23          	sw	a5,216(sp)
8000a4d0:	00f75e63          	ble	a5,a4,8000a4ec <_vfprintf_r+0x1d54>
8000a4d4:	0d410613          	addi	a2,sp,212
8000a4d8:	00090593          	mv	a1,s2
8000a4dc:	00098513          	mv	a0,s3
8000a4e0:	319060ef          	jal	ra,80010ff8 <__sprint_r>
8000a4e4:	1c051463          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
8000a4e8:	0fc10b93          	addi	s7,sp,252
8000a4ec:	0e012783          	lw	a5,224(sp)
8000a4f0:	09010593          	addi	a1,sp,144
8000a4f4:	0a010513          	addi	a0,sp,160
8000a4f8:	0af12023          	sw	a5,160(sp)
8000a4fc:	0e412783          	lw	a5,228(sp)
8000a500:	fffa0a93          	addi	s5,s4,-1
8000a504:	08012823          	sw	zero,144(sp)
8000a508:	0af12223          	sw	a5,164(sp)
8000a50c:	0e812783          	lw	a5,232(sp)
8000a510:	08012a23          	sw	zero,148(sp)
8000a514:	08012c23          	sw	zero,152(sp)
8000a518:	0af12423          	sw	a5,168(sp)
8000a51c:	0ec12783          	lw	a5,236(sp)
8000a520:	08012e23          	sw	zero,156(sp)
8000a524:	0af12623          	sw	a5,172(sp)
8000a528:	6b90a0ef          	jal	ra,800153e0 <__eqtf2>
8000a52c:	08050663          	beqz	a0,8000a5b8 <_vfprintf_r+0x1e20>
8000a530:	0dc12783          	lw	a5,220(sp)
8000a534:	0d812703          	lw	a4,216(sp)
8000a538:	00148493          	addi	s1,s1,1
8000a53c:	fff78793          	addi	a5,a5,-1
8000a540:	014787b3          	add	a5,a5,s4
8000a544:	00170713          	addi	a4,a4,1
8000a548:	009ba023          	sw	s1,0(s7)
8000a54c:	015ba223          	sw	s5,4(s7)
8000a550:	0cf12e23          	sw	a5,220(sp)
8000a554:	0ce12c23          	sw	a4,216(sp)
8000a558:	00700793          	li	a5,7
8000a55c:	008b8b93          	addi	s7,s7,8
8000a560:	00e7de63          	ble	a4,a5,8000a57c <_vfprintf_r+0x1de4>
8000a564:	0d410613          	addi	a2,sp,212
8000a568:	00090593          	mv	a1,s2
8000a56c:	00098513          	mv	a0,s3
8000a570:	289060ef          	jal	ra,80010ff8 <__sprint_r>
8000a574:	12051c63          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
8000a578:	0fc10b93          	addi	s7,sp,252
8000a57c:	0c410793          	addi	a5,sp,196
8000a580:	00fba023          	sw	a5,0(s7)
8000a584:	03c12783          	lw	a5,60(sp)
8000a588:	03c12703          	lw	a4,60(sp)
8000a58c:	008b8893          	addi	a7,s7,8
8000a590:	00fba223          	sw	a5,4(s7)
8000a594:	0dc12783          	lw	a5,220(sp)
8000a598:	00e787b3          	add	a5,a5,a4
8000a59c:	0cf12e23          	sw	a5,220(sp)
8000a5a0:	0d812783          	lw	a5,216(sp)
8000a5a4:	00700713          	li	a4,7
8000a5a8:	00178793          	addi	a5,a5,1
8000a5ac:	0cf12c23          	sw	a5,216(sp)
8000a5b0:	8cf75ae3          	ble	a5,a4,80009e84 <_vfprintf_r+0x16ec>
8000a5b4:	c1cff06f          	j	800099d0 <_vfprintf_r+0x1238>
8000a5b8:	fd5052e3          	blez	s5,8000a57c <_vfprintf_r+0x1de4>
8000a5bc:	01000493          	li	s1,16
8000a5c0:	00700c13          	li	s8,7
8000a5c4:	01412603          	lw	a2,20(sp)
8000a5c8:	0d812703          	lw	a4,216(sp)
8000a5cc:	0dc12783          	lw	a5,220(sp)
8000a5d0:	00cba023          	sw	a2,0(s7)
8000a5d4:	00170713          	addi	a4,a4,1
8000a5d8:	008b8693          	addi	a3,s7,8
8000a5dc:	0354c063          	blt	s1,s5,8000a5fc <_vfprintf_r+0x1e64>
8000a5e0:	00fa87b3          	add	a5,s5,a5
8000a5e4:	015ba223          	sw	s5,4(s7)
8000a5e8:	0cf12e23          	sw	a5,220(sp)
8000a5ec:	0ce12c23          	sw	a4,216(sp)
8000a5f0:	00700793          	li	a5,7
8000a5f4:	00068b93          	mv	s7,a3
8000a5f8:	f69ff06f          	j	8000a560 <_vfprintf_r+0x1dc8>
8000a5fc:	01078793          	addi	a5,a5,16
8000a600:	009ba223          	sw	s1,4(s7)
8000a604:	0cf12e23          	sw	a5,220(sp)
8000a608:	0ce12c23          	sw	a4,216(sp)
8000a60c:	00ec5e63          	ble	a4,s8,8000a628 <_vfprintf_r+0x1e90>
8000a610:	0d410613          	addi	a2,sp,212
8000a614:	00090593          	mv	a1,s2
8000a618:	00098513          	mv	a0,s3
8000a61c:	1dd060ef          	jal	ra,80010ff8 <__sprint_r>
8000a620:	08051663          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
8000a624:	0fc10693          	addi	a3,sp,252
8000a628:	ff0a8a93          	addi	s5,s5,-16
8000a62c:	00068b93          	mv	s7,a3
8000a630:	f95ff06f          	j	8000a5c4 <_vfprintf_r+0x1e2c>
8000a634:	00e8a223          	sw	a4,4(a7)
8000a638:	0db12e23          	sw	s11,220(sp)
8000a63c:	0cf12c23          	sw	a5,216(sp)
8000a640:	00700713          	li	a4,7
8000a644:	f2f75ce3          	ble	a5,a4,8000a57c <_vfprintf_r+0x1de4>
8000a648:	f1dff06f          	j	8000a564 <_vfprintf_r+0x1dcc>
8000a64c:	02812783          	lw	a5,40(sp)
8000a650:	02c12703          	lw	a4,44(sp)
8000a654:	40e78433          	sub	s0,a5,a4
8000a658:	82805ae3          	blez	s0,80009e8c <_vfprintf_r+0x16f4>
8000a65c:	800204b7          	lui	s1,0x80020
8000a660:	01000a93          	li	s5,16
8000a664:	27448493          	addi	s1,s1,628 # 80020274 <__stack+0xfffe37a8>
8000a668:	00700b93          	li	s7,7
8000a66c:	0d812783          	lw	a5,216(sp)
8000a670:	0098a023          	sw	s1,0(a7)
8000a674:	0dc12703          	lw	a4,220(sp)
8000a678:	00178793          	addi	a5,a5,1
8000a67c:	048ac663          	blt	s5,s0,8000a6c8 <_vfprintf_r+0x1f30>
8000a680:	0088a223          	sw	s0,4(a7)
8000a684:	00e40433          	add	s0,s0,a4
8000a688:	0c812e23          	sw	s0,220(sp)
8000a68c:	0cf12c23          	sw	a5,216(sp)
8000a690:	00700713          	li	a4,7
8000a694:	fef75c63          	ble	a5,a4,80009e8c <_vfprintf_r+0x16f4>
8000a698:	0d410613          	addi	a2,sp,212
8000a69c:	00090593          	mv	a1,s2
8000a6a0:	00098513          	mv	a0,s3
8000a6a4:	155060ef          	jal	ra,80010ff8 <__sprint_r>
8000a6a8:	fe050263          	beqz	a0,80009e8c <_vfprintf_r+0x16f4>
8000a6ac:	00c12783          	lw	a5,12(sp)
8000a6b0:	00079463          	bnez	a5,8000a6b8 <_vfprintf_r+0x1f20>
8000a6b4:	fbcfe06f          	j	80008e70 <_vfprintf_r+0x6d8>
8000a6b8:	00078593          	mv	a1,a5
8000a6bc:	00098513          	mv	a0,s3
8000a6c0:	0e5000ef          	jal	ra,8000afa4 <_free_r>
8000a6c4:	facfe06f          	j	80008e70 <_vfprintf_r+0x6d8>
8000a6c8:	01070713          	addi	a4,a4,16
8000a6cc:	0158a223          	sw	s5,4(a7)
8000a6d0:	0ce12e23          	sw	a4,220(sp)
8000a6d4:	0cf12c23          	sw	a5,216(sp)
8000a6d8:	00888893          	addi	a7,a7,8
8000a6dc:	00fbde63          	ble	a5,s7,8000a6f8 <_vfprintf_r+0x1f60>
8000a6e0:	0d410613          	addi	a2,sp,212
8000a6e4:	00090593          	mv	a1,s2
8000a6e8:	00098513          	mv	a0,s3
8000a6ec:	10d060ef          	jal	ra,80010ff8 <__sprint_r>
8000a6f0:	fa051ee3          	bnez	a0,8000a6ac <_vfprintf_r+0x1f14>
8000a6f4:	0fc10893          	addi	a7,sp,252
8000a6f8:	ff040413          	addi	s0,s0,-16
8000a6fc:	f71ff06f          	j	8000a66c <_vfprintf_r+0x1ed4>
8000a700:	00c12583          	lw	a1,12(sp)
8000a704:	00098513          	mv	a0,s3
8000a708:	09d000ef          	jal	ra,8000afa4 <_free_r>
8000a70c:	fc4ff06f          	j	80009ed0 <_vfprintf_r+0x1738>
8000a710:	0dc12783          	lw	a5,220(sp)
8000a714:	00079463          	bnez	a5,8000a71c <_vfprintf_r+0x1f84>
8000a718:	f58fe06f          	j	80008e70 <_vfprintf_r+0x6d8>
8000a71c:	0d410613          	addi	a2,sp,212
8000a720:	00090593          	mv	a1,s2
8000a724:	00098513          	mv	a0,s3
8000a728:	0d1060ef          	jal	ra,80010ff8 <__sprint_r>
8000a72c:	f44fe06f          	j	80008e70 <_vfprintf_r+0x6d8>

8000a730 <vfprintf>:
8000a730:	800217b7          	lui	a5,0x80021
8000a734:	00060693          	mv	a3,a2
8000a738:	00058613          	mv	a2,a1
8000a73c:	00050593          	mv	a1,a0
8000a740:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000a744:	854fe06f          	j	80008798 <_vfprintf_r>

8000a748 <__sbprintf>:
8000a748:	00c5d783          	lhu	a5,12(a1)
8000a74c:	b8010113          	addi	sp,sp,-1152
8000a750:	46812c23          	sw	s0,1144(sp)
8000a754:	ffd7f793          	andi	a5,a5,-3
8000a758:	00f11a23          	sh	a5,20(sp)
8000a75c:	0645a783          	lw	a5,100(a1)
8000a760:	00058413          	mv	s0,a1
8000a764:	46912a23          	sw	s1,1140(sp)
8000a768:	06f12623          	sw	a5,108(sp)
8000a76c:	00e5d783          	lhu	a5,14(a1)
8000a770:	47212823          	sw	s2,1136(sp)
8000a774:	46112e23          	sw	ra,1148(sp)
8000a778:	00f11b23          	sh	a5,22(sp)
8000a77c:	01c5a783          	lw	a5,28(a1)
8000a780:	00050913          	mv	s2,a0
8000a784:	02012023          	sw	zero,32(sp)
8000a788:	02f12223          	sw	a5,36(sp)
8000a78c:	0245a783          	lw	a5,36(a1)
8000a790:	00810593          	addi	a1,sp,8
8000a794:	02f12623          	sw	a5,44(sp)
8000a798:	07010793          	addi	a5,sp,112
8000a79c:	00f12423          	sw	a5,8(sp)
8000a7a0:	00f12c23          	sw	a5,24(sp)
8000a7a4:	40000793          	li	a5,1024
8000a7a8:	00f12823          	sw	a5,16(sp)
8000a7ac:	00f12e23          	sw	a5,28(sp)
8000a7b0:	fe9fd0ef          	jal	ra,80008798 <_vfprintf_r>
8000a7b4:	00050493          	mv	s1,a0
8000a7b8:	00054c63          	bltz	a0,8000a7d0 <__sbprintf+0x88>
8000a7bc:	00810593          	addi	a1,sp,8
8000a7c0:	00090513          	mv	a0,s2
8000a7c4:	380000ef          	jal	ra,8000ab44 <_fflush_r>
8000a7c8:	00050463          	beqz	a0,8000a7d0 <__sbprintf+0x88>
8000a7cc:	fff00493          	li	s1,-1
8000a7d0:	01415783          	lhu	a5,20(sp)
8000a7d4:	0407f793          	andi	a5,a5,64
8000a7d8:	00078863          	beqz	a5,8000a7e8 <__sbprintf+0xa0>
8000a7dc:	00c45783          	lhu	a5,12(s0)
8000a7e0:	0407e793          	ori	a5,a5,64
8000a7e4:	00f41623          	sh	a5,12(s0)
8000a7e8:	47c12083          	lw	ra,1148(sp)
8000a7ec:	47812403          	lw	s0,1144(sp)
8000a7f0:	00048513          	mv	a0,s1
8000a7f4:	47012903          	lw	s2,1136(sp)
8000a7f8:	47412483          	lw	s1,1140(sp)
8000a7fc:	48010113          	addi	sp,sp,1152
8000a800:	00008067          	ret

8000a804 <__swsetup_r>:
8000a804:	ff010113          	addi	sp,sp,-16
8000a808:	800217b7          	lui	a5,0x80021
8000a80c:	00912223          	sw	s1,4(sp)
8000a810:	00050493          	mv	s1,a0
8000a814:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000a818:	00812423          	sw	s0,8(sp)
8000a81c:	00112623          	sw	ra,12(sp)
8000a820:	00058413          	mv	s0,a1
8000a824:	00050863          	beqz	a0,8000a834 <__swsetup_r+0x30>
8000a828:	03852783          	lw	a5,56(a0)
8000a82c:	00079463          	bnez	a5,8000a834 <__swsetup_r+0x30>
8000a830:	4b0000ef          	jal	ra,8000ace0 <__sinit>
8000a834:	00c41703          	lh	a4,12(s0)
8000a838:	01071793          	slli	a5,a4,0x10
8000a83c:	0107d793          	srli	a5,a5,0x10
8000a840:	0087f693          	andi	a3,a5,8
8000a844:	06069e63          	bnez	a3,8000a8c0 <__swsetup_r+0xbc>
8000a848:	0107f693          	andi	a3,a5,16
8000a84c:	02069663          	bnez	a3,8000a878 <__swsetup_r+0x74>
8000a850:	00900793          	li	a5,9
8000a854:	00f4a023          	sw	a5,0(s1)
8000a858:	04076713          	ori	a4,a4,64
8000a85c:	00e41623          	sh	a4,12(s0)
8000a860:	fff00513          	li	a0,-1
8000a864:	00c12083          	lw	ra,12(sp)
8000a868:	00812403          	lw	s0,8(sp)
8000a86c:	00412483          	lw	s1,4(sp)
8000a870:	01010113          	addi	sp,sp,16
8000a874:	00008067          	ret
8000a878:	0047f793          	andi	a5,a5,4
8000a87c:	02078c63          	beqz	a5,8000a8b4 <__swsetup_r+0xb0>
8000a880:	03042583          	lw	a1,48(s0)
8000a884:	00058c63          	beqz	a1,8000a89c <__swsetup_r+0x98>
8000a888:	04040793          	addi	a5,s0,64
8000a88c:	00f58663          	beq	a1,a5,8000a898 <__swsetup_r+0x94>
8000a890:	00048513          	mv	a0,s1
8000a894:	710000ef          	jal	ra,8000afa4 <_free_r>
8000a898:	02042823          	sw	zero,48(s0)
8000a89c:	00c45783          	lhu	a5,12(s0)
8000a8a0:	00042223          	sw	zero,4(s0)
8000a8a4:	fdb7f793          	andi	a5,a5,-37
8000a8a8:	00f41623          	sh	a5,12(s0)
8000a8ac:	01042783          	lw	a5,16(s0)
8000a8b0:	00f42023          	sw	a5,0(s0)
8000a8b4:	00c45783          	lhu	a5,12(s0)
8000a8b8:	0087e793          	ori	a5,a5,8
8000a8bc:	00f41623          	sh	a5,12(s0)
8000a8c0:	01042783          	lw	a5,16(s0)
8000a8c4:	02079063          	bnez	a5,8000a8e4 <__swsetup_r+0xe0>
8000a8c8:	00c45783          	lhu	a5,12(s0)
8000a8cc:	20000713          	li	a4,512
8000a8d0:	2807f793          	andi	a5,a5,640
8000a8d4:	00e78863          	beq	a5,a4,8000a8e4 <__swsetup_r+0xe0>
8000a8d8:	00040593          	mv	a1,s0
8000a8dc:	00048513          	mv	a0,s1
8000a8e0:	451020ef          	jal	ra,8000d530 <__smakebuf_r>
8000a8e4:	00c45783          	lhu	a5,12(s0)
8000a8e8:	0017f713          	andi	a4,a5,1
8000a8ec:	02070c63          	beqz	a4,8000a924 <__swsetup_r+0x120>
8000a8f0:	01442783          	lw	a5,20(s0)
8000a8f4:	00042423          	sw	zero,8(s0)
8000a8f8:	40f007b3          	neg	a5,a5
8000a8fc:	00f42c23          	sw	a5,24(s0)
8000a900:	01042783          	lw	a5,16(s0)
8000a904:	00000513          	li	a0,0
8000a908:	f4079ee3          	bnez	a5,8000a864 <__swsetup_r+0x60>
8000a90c:	00c41783          	lh	a5,12(s0)
8000a910:	0807f713          	andi	a4,a5,128
8000a914:	f40708e3          	beqz	a4,8000a864 <__swsetup_r+0x60>
8000a918:	0407e793          	ori	a5,a5,64
8000a91c:	00f41623          	sh	a5,12(s0)
8000a920:	f41ff06f          	j	8000a860 <__swsetup_r+0x5c>
8000a924:	0027f793          	andi	a5,a5,2
8000a928:	00000713          	li	a4,0
8000a92c:	00079463          	bnez	a5,8000a934 <__swsetup_r+0x130>
8000a930:	01442703          	lw	a4,20(s0)
8000a934:	00e42423          	sw	a4,8(s0)
8000a938:	fc9ff06f          	j	8000a900 <__swsetup_r+0xfc>

8000a93c <__sflush_r>:
8000a93c:	00c59783          	lh	a5,12(a1)
8000a940:	fe010113          	addi	sp,sp,-32
8000a944:	00812c23          	sw	s0,24(sp)
8000a948:	01079713          	slli	a4,a5,0x10
8000a94c:	01075713          	srli	a4,a4,0x10
8000a950:	00912a23          	sw	s1,20(sp)
8000a954:	00112e23          	sw	ra,28(sp)
8000a958:	01212823          	sw	s2,16(sp)
8000a95c:	01312623          	sw	s3,12(sp)
8000a960:	00877693          	andi	a3,a4,8
8000a964:	00050493          	mv	s1,a0
8000a968:	00058413          	mv	s0,a1
8000a96c:	16069c63          	bnez	a3,8000aae4 <__sflush_r+0x1a8>
8000a970:	00001737          	lui	a4,0x1
8000a974:	80070713          	addi	a4,a4,-2048 # 800 <_HEAP_SIZE-0x800>
8000a978:	00e7e7b3          	or	a5,a5,a4
8000a97c:	0045a703          	lw	a4,4(a1)
8000a980:	00f59623          	sh	a5,12(a1)
8000a984:	02e04663          	bgtz	a4,8000a9b0 <__sflush_r+0x74>
8000a988:	03c5a703          	lw	a4,60(a1)
8000a98c:	02e04263          	bgtz	a4,8000a9b0 <__sflush_r+0x74>
8000a990:	00000513          	li	a0,0
8000a994:	01c12083          	lw	ra,28(sp)
8000a998:	01812403          	lw	s0,24(sp)
8000a99c:	01412483          	lw	s1,20(sp)
8000a9a0:	01012903          	lw	s2,16(sp)
8000a9a4:	00c12983          	lw	s3,12(sp)
8000a9a8:	02010113          	addi	sp,sp,32
8000a9ac:	00008067          	ret
8000a9b0:	02842703          	lw	a4,40(s0)
8000a9b4:	fc070ee3          	beqz	a4,8000a990 <__sflush_r+0x54>
8000a9b8:	0004a903          	lw	s2,0(s1)
8000a9bc:	01379693          	slli	a3,a5,0x13
8000a9c0:	0004a023          	sw	zero,0(s1)
8000a9c4:	01c42583          	lw	a1,28(s0)
8000a9c8:	0c06d863          	bgez	a3,8000aa98 <__sflush_r+0x15c>
8000a9cc:	05042603          	lw	a2,80(s0)
8000a9d0:	00c45783          	lhu	a5,12(s0)
8000a9d4:	0047f793          	andi	a5,a5,4
8000a9d8:	00078e63          	beqz	a5,8000a9f4 <__sflush_r+0xb8>
8000a9dc:	00442783          	lw	a5,4(s0)
8000a9e0:	40f60633          	sub	a2,a2,a5
8000a9e4:	03042783          	lw	a5,48(s0)
8000a9e8:	00078663          	beqz	a5,8000a9f4 <__sflush_r+0xb8>
8000a9ec:	03c42783          	lw	a5,60(s0)
8000a9f0:	40f60633          	sub	a2,a2,a5
8000a9f4:	02842783          	lw	a5,40(s0)
8000a9f8:	01c42583          	lw	a1,28(s0)
8000a9fc:	00000693          	li	a3,0
8000aa00:	00048513          	mv	a0,s1
8000aa04:	000780e7          	jalr	a5
8000aa08:	fff00793          	li	a5,-1
8000aa0c:	00c45683          	lhu	a3,12(s0)
8000aa10:	02f51263          	bne	a0,a5,8000aa34 <__sflush_r+0xf8>
8000aa14:	0004a783          	lw	a5,0(s1)
8000aa18:	01d00713          	li	a4,29
8000aa1c:	0af76c63          	bltu	a4,a5,8000aad4 <__sflush_r+0x198>
8000aa20:	20400737          	lui	a4,0x20400
8000aa24:	00170713          	addi	a4,a4,1 # 20400001 <_HEAP_SIZE+0x203ff001>
8000aa28:	00f75733          	srl	a4,a4,a5
8000aa2c:	00177713          	andi	a4,a4,1
8000aa30:	0a070263          	beqz	a4,8000aad4 <__sflush_r+0x198>
8000aa34:	fffff7b7          	lui	a5,0xfffff
8000aa38:	7ff78793          	addi	a5,a5,2047 # fffff7ff <__stack+0x7ffc2d33>
8000aa3c:	01042703          	lw	a4,16(s0)
8000aa40:	00d7f7b3          	and	a5,a5,a3
8000aa44:	01079793          	slli	a5,a5,0x10
8000aa48:	4107d793          	srai	a5,a5,0x10
8000aa4c:	00e42023          	sw	a4,0(s0)
8000aa50:	00f41623          	sh	a5,12(s0)
8000aa54:	00042223          	sw	zero,4(s0)
8000aa58:	01379713          	slli	a4,a5,0x13
8000aa5c:	00075c63          	bgez	a4,8000aa74 <__sflush_r+0x138>
8000aa60:	fff00793          	li	a5,-1
8000aa64:	00f51663          	bne	a0,a5,8000aa70 <__sflush_r+0x134>
8000aa68:	0004a783          	lw	a5,0(s1)
8000aa6c:	00079463          	bnez	a5,8000aa74 <__sflush_r+0x138>
8000aa70:	04a42823          	sw	a0,80(s0)
8000aa74:	03042583          	lw	a1,48(s0)
8000aa78:	0124a023          	sw	s2,0(s1)
8000aa7c:	f0058ae3          	beqz	a1,8000a990 <__sflush_r+0x54>
8000aa80:	04040793          	addi	a5,s0,64
8000aa84:	00f58663          	beq	a1,a5,8000aa90 <__sflush_r+0x154>
8000aa88:	00048513          	mv	a0,s1
8000aa8c:	518000ef          	jal	ra,8000afa4 <_free_r>
8000aa90:	02042823          	sw	zero,48(s0)
8000aa94:	efdff06f          	j	8000a990 <__sflush_r+0x54>
8000aa98:	00000613          	li	a2,0
8000aa9c:	00100693          	li	a3,1
8000aaa0:	00048513          	mv	a0,s1
8000aaa4:	000700e7          	jalr	a4
8000aaa8:	fff00793          	li	a5,-1
8000aaac:	00050613          	mv	a2,a0
8000aab0:	f2f510e3          	bne	a0,a5,8000a9d0 <__sflush_r+0x94>
8000aab4:	0004a783          	lw	a5,0(s1)
8000aab8:	f0078ce3          	beqz	a5,8000a9d0 <__sflush_r+0x94>
8000aabc:	01d00713          	li	a4,29
8000aac0:	00e78663          	beq	a5,a4,8000aacc <__sflush_r+0x190>
8000aac4:	01600713          	li	a4,22
8000aac8:	06e79263          	bne	a5,a4,8000ab2c <__sflush_r+0x1f0>
8000aacc:	0124a023          	sw	s2,0(s1)
8000aad0:	ec1ff06f          	j	8000a990 <__sflush_r+0x54>
8000aad4:	0406e793          	ori	a5,a3,64
8000aad8:	00f41623          	sh	a5,12(s0)
8000aadc:	fff00513          	li	a0,-1
8000aae0:	eb5ff06f          	j	8000a994 <__sflush_r+0x58>
8000aae4:	0105a983          	lw	s3,16(a1)
8000aae8:	ea0984e3          	beqz	s3,8000a990 <__sflush_r+0x54>
8000aaec:	0005a903          	lw	s2,0(a1)
8000aaf0:	00377713          	andi	a4,a4,3
8000aaf4:	0135a023          	sw	s3,0(a1)
8000aaf8:	41390933          	sub	s2,s2,s3
8000aafc:	00000793          	li	a5,0
8000ab00:	00071463          	bnez	a4,8000ab08 <__sflush_r+0x1cc>
8000ab04:	0145a783          	lw	a5,20(a1)
8000ab08:	00f42423          	sw	a5,8(s0)
8000ab0c:	e92052e3          	blez	s2,8000a990 <__sflush_r+0x54>
8000ab10:	02442783          	lw	a5,36(s0)
8000ab14:	01c42583          	lw	a1,28(s0)
8000ab18:	00090693          	mv	a3,s2
8000ab1c:	00098613          	mv	a2,s3
8000ab20:	00048513          	mv	a0,s1
8000ab24:	000780e7          	jalr	a5
8000ab28:	00a04863          	bgtz	a0,8000ab38 <__sflush_r+0x1fc>
8000ab2c:	00c45783          	lhu	a5,12(s0)
8000ab30:	0407e793          	ori	a5,a5,64
8000ab34:	fa5ff06f          	j	8000aad8 <__sflush_r+0x19c>
8000ab38:	00a989b3          	add	s3,s3,a0
8000ab3c:	40a90933          	sub	s2,s2,a0
8000ab40:	fcdff06f          	j	8000ab0c <__sflush_r+0x1d0>

8000ab44 <_fflush_r>:
8000ab44:	fe010113          	addi	sp,sp,-32
8000ab48:	00812c23          	sw	s0,24(sp)
8000ab4c:	00112e23          	sw	ra,28(sp)
8000ab50:	00050413          	mv	s0,a0
8000ab54:	00050c63          	beqz	a0,8000ab6c <_fflush_r+0x28>
8000ab58:	03852783          	lw	a5,56(a0)
8000ab5c:	00079863          	bnez	a5,8000ab6c <_fflush_r+0x28>
8000ab60:	00b12623          	sw	a1,12(sp)
8000ab64:	17c000ef          	jal	ra,8000ace0 <__sinit>
8000ab68:	00c12583          	lw	a1,12(sp)
8000ab6c:	00c59783          	lh	a5,12(a1)
8000ab70:	00078c63          	beqz	a5,8000ab88 <_fflush_r+0x44>
8000ab74:	00040513          	mv	a0,s0
8000ab78:	01812403          	lw	s0,24(sp)
8000ab7c:	01c12083          	lw	ra,28(sp)
8000ab80:	02010113          	addi	sp,sp,32
8000ab84:	db9ff06f          	j	8000a93c <__sflush_r>
8000ab88:	01c12083          	lw	ra,28(sp)
8000ab8c:	01812403          	lw	s0,24(sp)
8000ab90:	00000513          	li	a0,0
8000ab94:	02010113          	addi	sp,sp,32
8000ab98:	00008067          	ret

8000ab9c <fflush>:
8000ab9c:	00050593          	mv	a1,a0
8000aba0:	00051c63          	bnez	a0,8000abb8 <fflush+0x1c>
8000aba4:	800217b7          	lui	a5,0x80021
8000aba8:	e607a503          	lw	a0,-416(a5) # 80020e60 <__stack+0xfffe4394>
8000abac:	8000b5b7          	lui	a1,0x8000b
8000abb0:	b4458593          	addi	a1,a1,-1212 # 8000ab44 <__stack+0xfffce078>
8000abb4:	6f40006f          	j	8000b2a8 <_fwalk_reent>
8000abb8:	800217b7          	lui	a5,0x80021
8000abbc:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000abc0:	f85ff06f          	j	8000ab44 <_fflush_r>

8000abc4 <__fp_lock>:
8000abc4:	00000513          	li	a0,0
8000abc8:	00008067          	ret

8000abcc <_cleanup_r>:
8000abcc:	800125b7          	lui	a1,0x80012
8000abd0:	fe458593          	addi	a1,a1,-28 # 80011fe4 <__stack+0xfffd5518>
8000abd4:	6d40006f          	j	8000b2a8 <_fwalk_reent>

8000abd8 <std.isra.0>:
8000abd8:	ff010113          	addi	sp,sp,-16
8000abdc:	00812423          	sw	s0,8(sp)
8000abe0:	00112623          	sw	ra,12(sp)
8000abe4:	00050413          	mv	s0,a0
8000abe8:	00b51623          	sh	a1,12(a0)
8000abec:	00c51723          	sh	a2,14(a0)
8000abf0:	00052023          	sw	zero,0(a0)
8000abf4:	00052223          	sw	zero,4(a0)
8000abf8:	00052423          	sw	zero,8(a0)
8000abfc:	06052223          	sw	zero,100(a0)
8000ac00:	00052823          	sw	zero,16(a0)
8000ac04:	00052a23          	sw	zero,20(a0)
8000ac08:	00052c23          	sw	zero,24(a0)
8000ac0c:	00800613          	li	a2,8
8000ac10:	00000593          	li	a1,0
8000ac14:	05c50513          	addi	a0,a0,92
8000ac18:	a15fd0ef          	jal	ra,8000862c <memset>
8000ac1c:	8000f7b7          	lui	a5,0x8000f
8000ac20:	d8478793          	addi	a5,a5,-636 # 8000ed84 <__stack+0xfffd22b8>
8000ac24:	02f42023          	sw	a5,32(s0)
8000ac28:	8000f7b7          	lui	a5,0x8000f
8000ac2c:	ddc78793          	addi	a5,a5,-548 # 8000eddc <__stack+0xfffd2310>
8000ac30:	02f42223          	sw	a5,36(s0)
8000ac34:	8000f7b7          	lui	a5,0x8000f
8000ac38:	e6078793          	addi	a5,a5,-416 # 8000ee60 <__stack+0xfffd2394>
8000ac3c:	02f42423          	sw	a5,40(s0)
8000ac40:	8000f7b7          	lui	a5,0x8000f
8000ac44:	eb878793          	addi	a5,a5,-328 # 8000eeb8 <__stack+0xfffd23ec>
8000ac48:	00842e23          	sw	s0,28(s0)
8000ac4c:	02f42623          	sw	a5,44(s0)
8000ac50:	00c12083          	lw	ra,12(sp)
8000ac54:	00812403          	lw	s0,8(sp)
8000ac58:	01010113          	addi	sp,sp,16
8000ac5c:	00008067          	ret

8000ac60 <__fp_unlock>:
8000ac60:	00000513          	li	a0,0
8000ac64:	00008067          	ret

8000ac68 <__sfmoreglue>:
8000ac68:	ff010113          	addi	sp,sp,-16
8000ac6c:	00912223          	sw	s1,4(sp)
8000ac70:	06800613          	li	a2,104
8000ac74:	fff58493          	addi	s1,a1,-1
8000ac78:	02c484b3          	mul	s1,s1,a2
8000ac7c:	01212023          	sw	s2,0(sp)
8000ac80:	00058913          	mv	s2,a1
8000ac84:	00812423          	sw	s0,8(sp)
8000ac88:	00112623          	sw	ra,12(sp)
8000ac8c:	07448593          	addi	a1,s1,116
8000ac90:	191020ef          	jal	ra,8000d620 <_malloc_r>
8000ac94:	00050413          	mv	s0,a0
8000ac98:	02050063          	beqz	a0,8000acb8 <__sfmoreglue+0x50>
8000ac9c:	00052023          	sw	zero,0(a0)
8000aca0:	01252223          	sw	s2,4(a0)
8000aca4:	00c50513          	addi	a0,a0,12
8000aca8:	00a42423          	sw	a0,8(s0)
8000acac:	06848613          	addi	a2,s1,104
8000acb0:	00000593          	li	a1,0
8000acb4:	979fd0ef          	jal	ra,8000862c <memset>
8000acb8:	00040513          	mv	a0,s0
8000acbc:	00c12083          	lw	ra,12(sp)
8000acc0:	00812403          	lw	s0,8(sp)
8000acc4:	00412483          	lw	s1,4(sp)
8000acc8:	00012903          	lw	s2,0(sp)
8000accc:	01010113          	addi	sp,sp,16
8000acd0:	00008067          	ret

8000acd4 <_cleanup>:
8000acd4:	800217b7          	lui	a5,0x80021
8000acd8:	e607a503          	lw	a0,-416(a5) # 80020e60 <__stack+0xfffe4394>
8000acdc:	ef1ff06f          	j	8000abcc <_cleanup_r>

8000ace0 <__sinit>:
8000ace0:	03852783          	lw	a5,56(a0)
8000ace4:	06079e63          	bnez	a5,8000ad60 <__sinit+0x80>
8000ace8:	ff010113          	addi	sp,sp,-16
8000acec:	8000b7b7          	lui	a5,0x8000b
8000acf0:	00112623          	sw	ra,12(sp)
8000acf4:	00812423          	sw	s0,8(sp)
8000acf8:	bcc78793          	addi	a5,a5,-1076 # 8000abcc <__stack+0xfffce100>
8000acfc:	02f52e23          	sw	a5,60(a0)
8000ad00:	00300793          	li	a5,3
8000ad04:	2ef52223          	sw	a5,740(a0)
8000ad08:	2ec50793          	addi	a5,a0,748
8000ad0c:	00050413          	mv	s0,a0
8000ad10:	2ef52423          	sw	a5,744(a0)
8000ad14:	2e052023          	sw	zero,736(a0)
8000ad18:	00452503          	lw	a0,4(a0)
8000ad1c:	00000613          	li	a2,0
8000ad20:	00400593          	li	a1,4
8000ad24:	eb5ff0ef          	jal	ra,8000abd8 <std.isra.0>
8000ad28:	00842503          	lw	a0,8(s0)
8000ad2c:	00100613          	li	a2,1
8000ad30:	00900593          	li	a1,9
8000ad34:	ea5ff0ef          	jal	ra,8000abd8 <std.isra.0>
8000ad38:	00c42503          	lw	a0,12(s0)
8000ad3c:	00200613          	li	a2,2
8000ad40:	01200593          	li	a1,18
8000ad44:	e95ff0ef          	jal	ra,8000abd8 <std.isra.0>
8000ad48:	00100793          	li	a5,1
8000ad4c:	02f42c23          	sw	a5,56(s0)
8000ad50:	00c12083          	lw	ra,12(sp)
8000ad54:	00812403          	lw	s0,8(sp)
8000ad58:	01010113          	addi	sp,sp,16
8000ad5c:	00008067          	ret
8000ad60:	00008067          	ret

8000ad64 <__sfp>:
8000ad64:	ff010113          	addi	sp,sp,-16
8000ad68:	800217b7          	lui	a5,0x80021
8000ad6c:	00912223          	sw	s1,4(sp)
8000ad70:	e607a483          	lw	s1,-416(a5) # 80020e60 <__stack+0xfffe4394>
8000ad74:	01212023          	sw	s2,0(sp)
8000ad78:	00112623          	sw	ra,12(sp)
8000ad7c:	0384a783          	lw	a5,56(s1)
8000ad80:	00812423          	sw	s0,8(sp)
8000ad84:	00050913          	mv	s2,a0
8000ad88:	00079663          	bnez	a5,8000ad94 <__sfp+0x30>
8000ad8c:	00048513          	mv	a0,s1
8000ad90:	f51ff0ef          	jal	ra,8000ace0 <__sinit>
8000ad94:	2e048493          	addi	s1,s1,736
8000ad98:	0084a403          	lw	s0,8(s1)
8000ad9c:	0044a783          	lw	a5,4(s1)
8000ada0:	fff78793          	addi	a5,a5,-1
8000ada4:	0007da63          	bgez	a5,8000adb8 <__sfp+0x54>
8000ada8:	0004a783          	lw	a5,0(s1)
8000adac:	00078e63          	beqz	a5,8000adc8 <__sfp+0x64>
8000adb0:	0004a483          	lw	s1,0(s1)
8000adb4:	fe5ff06f          	j	8000ad98 <__sfp+0x34>
8000adb8:	00c41703          	lh	a4,12(s0)
8000adbc:	04070463          	beqz	a4,8000ae04 <__sfp+0xa0>
8000adc0:	06840413          	addi	s0,s0,104
8000adc4:	fddff06f          	j	8000ada0 <__sfp+0x3c>
8000adc8:	00400593          	li	a1,4
8000adcc:	00090513          	mv	a0,s2
8000add0:	e99ff0ef          	jal	ra,8000ac68 <__sfmoreglue>
8000add4:	00a4a023          	sw	a0,0(s1)
8000add8:	fc051ce3          	bnez	a0,8000adb0 <__sfp+0x4c>
8000addc:	00c00793          	li	a5,12
8000ade0:	00f92023          	sw	a5,0(s2)
8000ade4:	00000413          	li	s0,0
8000ade8:	00040513          	mv	a0,s0
8000adec:	00c12083          	lw	ra,12(sp)
8000adf0:	00812403          	lw	s0,8(sp)
8000adf4:	00412483          	lw	s1,4(sp)
8000adf8:	00012903          	lw	s2,0(sp)
8000adfc:	01010113          	addi	sp,sp,16
8000ae00:	00008067          	ret
8000ae04:	ffff07b7          	lui	a5,0xffff0
8000ae08:	00178793          	addi	a5,a5,1 # ffff0001 <__stack+0x7ffb3535>
8000ae0c:	06042223          	sw	zero,100(s0)
8000ae10:	00042023          	sw	zero,0(s0)
8000ae14:	00042223          	sw	zero,4(s0)
8000ae18:	00042423          	sw	zero,8(s0)
8000ae1c:	00f42623          	sw	a5,12(s0)
8000ae20:	00042823          	sw	zero,16(s0)
8000ae24:	00042a23          	sw	zero,20(s0)
8000ae28:	00042c23          	sw	zero,24(s0)
8000ae2c:	00800613          	li	a2,8
8000ae30:	00000593          	li	a1,0
8000ae34:	05c40513          	addi	a0,s0,92
8000ae38:	ff4fd0ef          	jal	ra,8000862c <memset>
8000ae3c:	02042823          	sw	zero,48(s0)
8000ae40:	02042a23          	sw	zero,52(s0)
8000ae44:	04042223          	sw	zero,68(s0)
8000ae48:	04042423          	sw	zero,72(s0)
8000ae4c:	f9dff06f          	j	8000ade8 <__sfp+0x84>

8000ae50 <__sfp_lock_acquire>:
8000ae50:	00008067          	ret

8000ae54 <__sfp_lock_release>:
8000ae54:	00008067          	ret

8000ae58 <__sinit_lock_acquire>:
8000ae58:	00008067          	ret

8000ae5c <__sinit_lock_release>:
8000ae5c:	00008067          	ret

8000ae60 <__fp_lock_all>:
8000ae60:	800217b7          	lui	a5,0x80021
8000ae64:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000ae68:	8000b5b7          	lui	a1,0x8000b
8000ae6c:	bc458593          	addi	a1,a1,-1084 # 8000abc4 <__stack+0xfffce0f8>
8000ae70:	3980006f          	j	8000b208 <_fwalk>

8000ae74 <__fp_unlock_all>:
8000ae74:	800217b7          	lui	a5,0x80021
8000ae78:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000ae7c:	8000b5b7          	lui	a1,0x8000b
8000ae80:	c6058593          	addi	a1,a1,-928 # 8000ac60 <__stack+0xfffce194>
8000ae84:	3840006f          	j	8000b208 <_fwalk>

8000ae88 <_malloc_trim_r>:
8000ae88:	fd010113          	addi	sp,sp,-48
8000ae8c:	03212023          	sw	s2,32(sp)
8000ae90:	80021937          	lui	s2,0x80021
8000ae94:	02812423          	sw	s0,40(sp)
8000ae98:	02912223          	sw	s1,36(sp)
8000ae9c:	01312e23          	sw	s3,28(sp)
8000aea0:	00b12623          	sw	a1,12(sp)
8000aea4:	02112623          	sw	ra,44(sp)
8000aea8:	00050993          	mv	s3,a0
8000aeac:	40490913          	addi	s2,s2,1028 # 80021404 <__stack+0xfffe4938>
8000aeb0:	669020ef          	jal	ra,8000dd18 <__malloc_lock>
8000aeb4:	00892783          	lw	a5,8(s2)
8000aeb8:	00c12583          	lw	a1,12(sp)
8000aebc:	0047a483          	lw	s1,4(a5)
8000aec0:	000017b7          	lui	a5,0x1
8000aec4:	fef78413          	addi	s0,a5,-17 # fef <_HEAP_SIZE-0x11>
8000aec8:	ffc4f493          	andi	s1,s1,-4
8000aecc:	40b40433          	sub	s0,s0,a1
8000aed0:	00940433          	add	s0,s0,s1
8000aed4:	00c45413          	srli	s0,s0,0xc
8000aed8:	fff40413          	addi	s0,s0,-1
8000aedc:	00c41413          	slli	s0,s0,0xc
8000aee0:	02f45663          	ble	a5,s0,8000af0c <_malloc_trim_r+0x84>
8000aee4:	00098513          	mv	a0,s3
8000aee8:	635020ef          	jal	ra,8000dd1c <__malloc_unlock>
8000aeec:	00000513          	li	a0,0
8000aef0:	02c12083          	lw	ra,44(sp)
8000aef4:	02812403          	lw	s0,40(sp)
8000aef8:	02412483          	lw	s1,36(sp)
8000aefc:	02012903          	lw	s2,32(sp)
8000af00:	01c12983          	lw	s3,28(sp)
8000af04:	03010113          	addi	sp,sp,48
8000af08:	00008067          	ret
8000af0c:	00000593          	li	a1,0
8000af10:	00098513          	mv	a0,s3
8000af14:	49d030ef          	jal	ra,8000ebb0 <_sbrk_r>
8000af18:	00892783          	lw	a5,8(s2)
8000af1c:	009787b3          	add	a5,a5,s1
8000af20:	fcf512e3          	bne	a0,a5,8000aee4 <_malloc_trim_r+0x5c>
8000af24:	408005b3          	neg	a1,s0
8000af28:	00098513          	mv	a0,s3
8000af2c:	485030ef          	jal	ra,8000ebb0 <_sbrk_r>
8000af30:	fff00793          	li	a5,-1
8000af34:	04f51063          	bne	a0,a5,8000af74 <_malloc_trim_r+0xec>
8000af38:	00000593          	li	a1,0
8000af3c:	00098513          	mv	a0,s3
8000af40:	471030ef          	jal	ra,8000ebb0 <_sbrk_r>
8000af44:	00892703          	lw	a4,8(s2)
8000af48:	00f00693          	li	a3,15
8000af4c:	40e507b3          	sub	a5,a0,a4
8000af50:	f8f6dae3          	ble	a5,a3,8000aee4 <_malloc_trim_r+0x5c>
8000af54:	800216b7          	lui	a3,0x80021
8000af58:	e686a683          	lw	a3,-408(a3) # 80020e68 <__stack+0xfffe439c>
8000af5c:	0017e793          	ori	a5,a5,1
8000af60:	00f72223          	sw	a5,4(a4)
8000af64:	40d50533          	sub	a0,a0,a3
8000af68:	8003b6b7          	lui	a3,0x8003b
8000af6c:	a0a6a023          	sw	a0,-1536(a3) # 8003aa00 <__stack+0xffffdf34>
8000af70:	f75ff06f          	j	8000aee4 <_malloc_trim_r+0x5c>
8000af74:	00892783          	lw	a5,8(s2)
8000af78:	408484b3          	sub	s1,s1,s0
8000af7c:	8003b737          	lui	a4,0x8003b
8000af80:	0014e493          	ori	s1,s1,1
8000af84:	0097a223          	sw	s1,4(a5)
8000af88:	a0072783          	lw	a5,-1536(a4) # 8003aa00 <__stack+0xffffdf34>
8000af8c:	00098513          	mv	a0,s3
8000af90:	40878433          	sub	s0,a5,s0
8000af94:	a0872023          	sw	s0,-1536(a4)
8000af98:	585020ef          	jal	ra,8000dd1c <__malloc_unlock>
8000af9c:	00100513          	li	a0,1
8000afa0:	f51ff06f          	j	8000aef0 <_malloc_trim_r+0x68>

8000afa4 <_free_r>:
8000afa4:	26058063          	beqz	a1,8000b204 <_free_r+0x260>
8000afa8:	ff010113          	addi	sp,sp,-16
8000afac:	00812423          	sw	s0,8(sp)
8000afb0:	00912223          	sw	s1,4(sp)
8000afb4:	00050413          	mv	s0,a0
8000afb8:	00058493          	mv	s1,a1
8000afbc:	00112623          	sw	ra,12(sp)
8000afc0:	559020ef          	jal	ra,8000dd18 <__malloc_lock>
8000afc4:	ffc4a503          	lw	a0,-4(s1)
8000afc8:	80021637          	lui	a2,0x80021
8000afcc:	ff848693          	addi	a3,s1,-8
8000afd0:	ffe57793          	andi	a5,a0,-2
8000afd4:	40460813          	addi	a6,a2,1028 # 80021404 <__stack+0xfffe4938>
8000afd8:	00f685b3          	add	a1,a3,a5
8000afdc:	0045a703          	lw	a4,4(a1)
8000afe0:	00882803          	lw	a6,8(a6)
8000afe4:	40460613          	addi	a2,a2,1028
8000afe8:	ffc77713          	andi	a4,a4,-4
8000afec:	00157513          	andi	a0,a0,1
8000aff0:	06b81463          	bne	a6,a1,8000b058 <_free_r+0xb4>
8000aff4:	00e787b3          	add	a5,a5,a4
8000aff8:	02051063          	bnez	a0,8000b018 <_free_r+0x74>
8000affc:	ff84a703          	lw	a4,-8(s1)
8000b000:	40e686b3          	sub	a3,a3,a4
8000b004:	0086a583          	lw	a1,8(a3)
8000b008:	00e787b3          	add	a5,a5,a4
8000b00c:	00c6a703          	lw	a4,12(a3)
8000b010:	00e5a623          	sw	a4,12(a1)
8000b014:	00b72423          	sw	a1,8(a4)
8000b018:	0017e713          	ori	a4,a5,1
8000b01c:	00e6a223          	sw	a4,4(a3)
8000b020:	80021737          	lui	a4,0x80021
8000b024:	e6c72703          	lw	a4,-404(a4) # 80020e6c <__stack+0xfffe43a0>
8000b028:	00d62423          	sw	a3,8(a2)
8000b02c:	00e7ea63          	bltu	a5,a4,8000b040 <_free_r+0x9c>
8000b030:	800217b7          	lui	a5,0x80021
8000b034:	e2c7a583          	lw	a1,-468(a5) # 80020e2c <__stack+0xfffe4360>
8000b038:	00040513          	mv	a0,s0
8000b03c:	e4dff0ef          	jal	ra,8000ae88 <_malloc_trim_r>
8000b040:	00040513          	mv	a0,s0
8000b044:	00812403          	lw	s0,8(sp)
8000b048:	00c12083          	lw	ra,12(sp)
8000b04c:	00412483          	lw	s1,4(sp)
8000b050:	01010113          	addi	sp,sp,16
8000b054:	4c90206f          	j	8000dd1c <__malloc_unlock>
8000b058:	00e5a223          	sw	a4,4(a1)
8000b05c:	00000813          	li	a6,0
8000b060:	02051663          	bnez	a0,8000b08c <_free_r+0xe8>
8000b064:	ff84a503          	lw	a0,-8(s1)
8000b068:	800218b7          	lui	a7,0x80021
8000b06c:	40c88893          	addi	a7,a7,1036 # 8002140c <__stack+0xfffe4940>
8000b070:	40a686b3          	sub	a3,a3,a0
8000b074:	00a787b3          	add	a5,a5,a0
8000b078:	0086a503          	lw	a0,8(a3)
8000b07c:	0b150663          	beq	a0,a7,8000b128 <_free_r+0x184>
8000b080:	00c6a883          	lw	a7,12(a3)
8000b084:	01152623          	sw	a7,12(a0)
8000b088:	00a8a423          	sw	a0,8(a7)
8000b08c:	00e58533          	add	a0,a1,a4
8000b090:	00452503          	lw	a0,4(a0)
8000b094:	00157513          	andi	a0,a0,1
8000b098:	02051863          	bnez	a0,8000b0c8 <_free_r+0x124>
8000b09c:	00e787b3          	add	a5,a5,a4
8000b0a0:	0085a703          	lw	a4,8(a1)
8000b0a4:	08081663          	bnez	a6,8000b130 <_free_r+0x18c>
8000b0a8:	80021537          	lui	a0,0x80021
8000b0ac:	40c50513          	addi	a0,a0,1036 # 8002140c <__stack+0xfffe4940>
8000b0b0:	08a71063          	bne	a4,a0,8000b130 <_free_r+0x18c>
8000b0b4:	00d62a23          	sw	a3,20(a2)
8000b0b8:	00d62823          	sw	a3,16(a2)
8000b0bc:	00e6a623          	sw	a4,12(a3)
8000b0c0:	00e6a423          	sw	a4,8(a3)
8000b0c4:	00100813          	li	a6,1
8000b0c8:	0017e713          	ori	a4,a5,1
8000b0cc:	00e6a223          	sw	a4,4(a3)
8000b0d0:	00f68733          	add	a4,a3,a5
8000b0d4:	00f72023          	sw	a5,0(a4)
8000b0d8:	f60814e3          	bnez	a6,8000b040 <_free_r+0x9c>
8000b0dc:	1ff00713          	li	a4,511
8000b0e0:	06f76063          	bltu	a4,a5,8000b140 <_free_r+0x19c>
8000b0e4:	0037d793          	srli	a5,a5,0x3
8000b0e8:	4027d593          	srai	a1,a5,0x2
8000b0ec:	00100713          	li	a4,1
8000b0f0:	00b71733          	sll	a4,a4,a1
8000b0f4:	00462583          	lw	a1,4(a2)
8000b0f8:	00178793          	addi	a5,a5,1
8000b0fc:	00379793          	slli	a5,a5,0x3
8000b100:	00f607b3          	add	a5,a2,a5
8000b104:	00b76733          	or	a4,a4,a1
8000b108:	00e62223          	sw	a4,4(a2)
8000b10c:	0007a703          	lw	a4,0(a5)
8000b110:	ff878613          	addi	a2,a5,-8
8000b114:	00c6a623          	sw	a2,12(a3)
8000b118:	00e6a423          	sw	a4,8(a3)
8000b11c:	00d7a023          	sw	a3,0(a5)
8000b120:	00d72623          	sw	a3,12(a4)
8000b124:	f1dff06f          	j	8000b040 <_free_r+0x9c>
8000b128:	00100813          	li	a6,1
8000b12c:	f61ff06f          	j	8000b08c <_free_r+0xe8>
8000b130:	00c5a583          	lw	a1,12(a1)
8000b134:	00b72623          	sw	a1,12(a4)
8000b138:	00e5a423          	sw	a4,8(a1)
8000b13c:	f8dff06f          	j	8000b0c8 <_free_r+0x124>
8000b140:	0097d593          	srli	a1,a5,0x9
8000b144:	00400713          	li	a4,4
8000b148:	04b76863          	bltu	a4,a1,8000b198 <_free_r+0x1f4>
8000b14c:	0067d713          	srli	a4,a5,0x6
8000b150:	03870713          	addi	a4,a4,56
8000b154:	00170593          	addi	a1,a4,1
8000b158:	00359593          	slli	a1,a1,0x3
8000b15c:	00b605b3          	add	a1,a2,a1
8000b160:	ff858513          	addi	a0,a1,-8
8000b164:	0005a583          	lw	a1,0(a1)
8000b168:	08b51463          	bne	a0,a1,8000b1f0 <_free_r+0x24c>
8000b16c:	00100793          	li	a5,1
8000b170:	40275713          	srai	a4,a4,0x2
8000b174:	00e79733          	sll	a4,a5,a4
8000b178:	00462783          	lw	a5,4(a2)
8000b17c:	00f76733          	or	a4,a4,a5
8000b180:	00e62223          	sw	a4,4(a2)
8000b184:	00a6a623          	sw	a0,12(a3)
8000b188:	00b6a423          	sw	a1,8(a3)
8000b18c:	00d52423          	sw	a3,8(a0)
8000b190:	00d5a623          	sw	a3,12(a1)
8000b194:	eadff06f          	j	8000b040 <_free_r+0x9c>
8000b198:	01400713          	li	a4,20
8000b19c:	00b76663          	bltu	a4,a1,8000b1a8 <_free_r+0x204>
8000b1a0:	05b58713          	addi	a4,a1,91
8000b1a4:	fb1ff06f          	j	8000b154 <_free_r+0x1b0>
8000b1a8:	05400713          	li	a4,84
8000b1ac:	00b76863          	bltu	a4,a1,8000b1bc <_free_r+0x218>
8000b1b0:	00c7d713          	srli	a4,a5,0xc
8000b1b4:	06e70713          	addi	a4,a4,110
8000b1b8:	f9dff06f          	j	8000b154 <_free_r+0x1b0>
8000b1bc:	15400713          	li	a4,340
8000b1c0:	00b76863          	bltu	a4,a1,8000b1d0 <_free_r+0x22c>
8000b1c4:	00f7d713          	srli	a4,a5,0xf
8000b1c8:	07770713          	addi	a4,a4,119
8000b1cc:	f89ff06f          	j	8000b154 <_free_r+0x1b0>
8000b1d0:	55400513          	li	a0,1364
8000b1d4:	07e00713          	li	a4,126
8000b1d8:	f6b56ee3          	bltu	a0,a1,8000b154 <_free_r+0x1b0>
8000b1dc:	0127d713          	srli	a4,a5,0x12
8000b1e0:	07c70713          	addi	a4,a4,124
8000b1e4:	f71ff06f          	j	8000b154 <_free_r+0x1b0>
8000b1e8:	0085a583          	lw	a1,8(a1)
8000b1ec:	00b50863          	beq	a0,a1,8000b1fc <_free_r+0x258>
8000b1f0:	0045a703          	lw	a4,4(a1)
8000b1f4:	ffc77713          	andi	a4,a4,-4
8000b1f8:	fee7e8e3          	bltu	a5,a4,8000b1e8 <_free_r+0x244>
8000b1fc:	00c5a503          	lw	a0,12(a1)
8000b200:	f85ff06f          	j	8000b184 <_free_r+0x1e0>
8000b204:	00008067          	ret

8000b208 <_fwalk>:
8000b208:	fd010113          	addi	sp,sp,-48
8000b20c:	02812423          	sw	s0,40(sp)
8000b210:	03212023          	sw	s2,32(sp)
8000b214:	01412c23          	sw	s4,24(sp)
8000b218:	01512a23          	sw	s5,20(sp)
8000b21c:	02112623          	sw	ra,44(sp)
8000b220:	02912223          	sw	s1,36(sp)
8000b224:	01312e23          	sw	s3,28(sp)
8000b228:	2e050413          	addi	s0,a0,736
8000b22c:	00000913          	li	s2,0
8000b230:	00100a13          	li	s4,1
8000b234:	fff00a93          	li	s5,-1
8000b238:	02041663          	bnez	s0,8000b264 <_fwalk+0x5c>
8000b23c:	02c12083          	lw	ra,44(sp)
8000b240:	02812403          	lw	s0,40(sp)
8000b244:	00090513          	mv	a0,s2
8000b248:	02412483          	lw	s1,36(sp)
8000b24c:	02012903          	lw	s2,32(sp)
8000b250:	01c12983          	lw	s3,28(sp)
8000b254:	01812a03          	lw	s4,24(sp)
8000b258:	01412a83          	lw	s5,20(sp)
8000b25c:	03010113          	addi	sp,sp,48
8000b260:	00008067          	ret
8000b264:	00842483          	lw	s1,8(s0)
8000b268:	00442983          	lw	s3,4(s0)
8000b26c:	fff98993          	addi	s3,s3,-1
8000b270:	0009d663          	bgez	s3,8000b27c <_fwalk+0x74>
8000b274:	00042403          	lw	s0,0(s0)
8000b278:	fc1ff06f          	j	8000b238 <_fwalk+0x30>
8000b27c:	00c4d783          	lhu	a5,12(s1)
8000b280:	02fa7063          	bleu	a5,s4,8000b2a0 <_fwalk+0x98>
8000b284:	00e49783          	lh	a5,14(s1)
8000b288:	01578c63          	beq	a5,s5,8000b2a0 <_fwalk+0x98>
8000b28c:	00048513          	mv	a0,s1
8000b290:	00b12623          	sw	a1,12(sp)
8000b294:	000580e7          	jalr	a1
8000b298:	00c12583          	lw	a1,12(sp)
8000b29c:	00a96933          	or	s2,s2,a0
8000b2a0:	06848493          	addi	s1,s1,104
8000b2a4:	fc9ff06f          	j	8000b26c <_fwalk+0x64>

8000b2a8 <_fwalk_reent>:
8000b2a8:	fd010113          	addi	sp,sp,-48
8000b2ac:	02812423          	sw	s0,40(sp)
8000b2b0:	03212023          	sw	s2,32(sp)
8000b2b4:	01412c23          	sw	s4,24(sp)
8000b2b8:	01512a23          	sw	s5,20(sp)
8000b2bc:	01612823          	sw	s6,16(sp)
8000b2c0:	01712623          	sw	s7,12(sp)
8000b2c4:	02112623          	sw	ra,44(sp)
8000b2c8:	02912223          	sw	s1,36(sp)
8000b2cc:	01312e23          	sw	s3,28(sp)
8000b2d0:	00050a13          	mv	s4,a0
8000b2d4:	00058a93          	mv	s5,a1
8000b2d8:	2e050413          	addi	s0,a0,736
8000b2dc:	00000913          	li	s2,0
8000b2e0:	00100b13          	li	s6,1
8000b2e4:	fff00b93          	li	s7,-1
8000b2e8:	02041a63          	bnez	s0,8000b31c <_fwalk_reent+0x74>
8000b2ec:	02c12083          	lw	ra,44(sp)
8000b2f0:	02812403          	lw	s0,40(sp)
8000b2f4:	00090513          	mv	a0,s2
8000b2f8:	02412483          	lw	s1,36(sp)
8000b2fc:	02012903          	lw	s2,32(sp)
8000b300:	01c12983          	lw	s3,28(sp)
8000b304:	01812a03          	lw	s4,24(sp)
8000b308:	01412a83          	lw	s5,20(sp)
8000b30c:	01012b03          	lw	s6,16(sp)
8000b310:	00c12b83          	lw	s7,12(sp)
8000b314:	03010113          	addi	sp,sp,48
8000b318:	00008067          	ret
8000b31c:	00842483          	lw	s1,8(s0)
8000b320:	00442983          	lw	s3,4(s0)
8000b324:	fff98993          	addi	s3,s3,-1
8000b328:	0009d663          	bgez	s3,8000b334 <_fwalk_reent+0x8c>
8000b32c:	00042403          	lw	s0,0(s0)
8000b330:	fb9ff06f          	j	8000b2e8 <_fwalk_reent+0x40>
8000b334:	00c4d783          	lhu	a5,12(s1)
8000b338:	00fb7e63          	bleu	a5,s6,8000b354 <_fwalk_reent+0xac>
8000b33c:	00e49783          	lh	a5,14(s1)
8000b340:	01778a63          	beq	a5,s7,8000b354 <_fwalk_reent+0xac>
8000b344:	00048593          	mv	a1,s1
8000b348:	000a0513          	mv	a0,s4
8000b34c:	000a80e7          	jalr	s5
8000b350:	00a96933          	or	s2,s2,a0
8000b354:	06848493          	addi	s1,s1,104
8000b358:	fcdff06f          	j	8000b324 <_fwalk_reent+0x7c>

8000b35c <eclear>:
8000b35c:	01450793          	addi	a5,a0,20
8000b360:	00250513          	addi	a0,a0,2
8000b364:	fe051f23          	sh	zero,-2(a0)
8000b368:	fef51ce3          	bne	a0,a5,8000b360 <eclear+0x4>
8000b36c:	00008067          	ret

8000b370 <emov>:
8000b370:	01450793          	addi	a5,a0,20
8000b374:	00250513          	addi	a0,a0,2
8000b378:	ffe55703          	lhu	a4,-2(a0)
8000b37c:	00258593          	addi	a1,a1,2
8000b380:	fee59f23          	sh	a4,-2(a1)
8000b384:	fea798e3          	bne	a5,a0,8000b374 <emov+0x4>
8000b388:	00008067          	ret

8000b38c <ecleaz>:
8000b38c:	01a50793          	addi	a5,a0,26
8000b390:	00250513          	addi	a0,a0,2
8000b394:	fe051f23          	sh	zero,-2(a0)
8000b398:	fef51ce3          	bne	a0,a5,8000b390 <ecleaz+0x4>
8000b39c:	00008067          	ret

8000b3a0 <emovz>:
8000b3a0:	01850713          	addi	a4,a0,24
8000b3a4:	00058793          	mv	a5,a1
8000b3a8:	00250513          	addi	a0,a0,2
8000b3ac:	ffe55683          	lhu	a3,-2(a0)
8000b3b0:	00278793          	addi	a5,a5,2
8000b3b4:	fed79f23          	sh	a3,-2(a5)
8000b3b8:	fea718e3          	bne	a4,a0,8000b3a8 <emovz+0x8>
8000b3bc:	00059c23          	sh	zero,24(a1)
8000b3c0:	00008067          	ret

8000b3c4 <ecmpm>:
8000b3c4:	00450793          	addi	a5,a0,4
8000b3c8:	00458593          	addi	a1,a1,4
8000b3cc:	01a50513          	addi	a0,a0,26
8000b3d0:	00278793          	addi	a5,a5,2
8000b3d4:	00258593          	addi	a1,a1,2
8000b3d8:	ffe7d683          	lhu	a3,-2(a5)
8000b3dc:	ffe5d703          	lhu	a4,-2(a1)
8000b3e0:	00e69863          	bne	a3,a4,8000b3f0 <ecmpm+0x2c>
8000b3e4:	fef516e3          	bne	a0,a5,8000b3d0 <ecmpm+0xc>
8000b3e8:	00000513          	li	a0,0
8000b3ec:	00008067          	ret
8000b3f0:	00100513          	li	a0,1
8000b3f4:	00d76463          	bltu	a4,a3,8000b3fc <ecmpm+0x38>
8000b3f8:	fff00513          	li	a0,-1
8000b3fc:	00008067          	ret

8000b400 <eshdn1>:
8000b400:	00450693          	addi	a3,a0,4
8000b404:	00000793          	li	a5,0
8000b408:	01a50513          	addi	a0,a0,26
8000b40c:	ffff8637          	lui	a2,0xffff8
8000b410:	0006d703          	lhu	a4,0(a3)
8000b414:	00177593          	andi	a1,a4,1
8000b418:	00058463          	beqz	a1,8000b420 <eshdn1+0x20>
8000b41c:	0017e793          	ori	a5,a5,1
8000b420:	0027f593          	andi	a1,a5,2
8000b424:	00175713          	srli	a4,a4,0x1
8000b428:	02059063          	bnez	a1,8000b448 <eshdn1+0x48>
8000b42c:	00179793          	slli	a5,a5,0x1
8000b430:	00e69023          	sh	a4,0(a3)
8000b434:	01079793          	slli	a5,a5,0x10
8000b438:	00268693          	addi	a3,a3,2
8000b43c:	0107d793          	srli	a5,a5,0x10
8000b440:	fcd518e3          	bne	a0,a3,8000b410 <eshdn1+0x10>
8000b444:	00008067          	ret
8000b448:	00c76733          	or	a4,a4,a2
8000b44c:	fe1ff06f          	j	8000b42c <eshdn1+0x2c>

8000b450 <eshup1>:
8000b450:	01650693          	addi	a3,a0,22
8000b454:	00000713          	li	a4,0
8000b458:	0026d783          	lhu	a5,2(a3)
8000b45c:	01079613          	slli	a2,a5,0x10
8000b460:	41065613          	srai	a2,a2,0x10
8000b464:	00065463          	bgez	a2,8000b46c <eshup1+0x1c>
8000b468:	00176713          	ori	a4,a4,1
8000b46c:	00179793          	slli	a5,a5,0x1
8000b470:	01079793          	slli	a5,a5,0x10
8000b474:	00277613          	andi	a2,a4,2
8000b478:	0107d793          	srli	a5,a5,0x10
8000b47c:	02061063          	bnez	a2,8000b49c <eshup1+0x4c>
8000b480:	00171713          	slli	a4,a4,0x1
8000b484:	00f69123          	sh	a5,2(a3)
8000b488:	01071713          	slli	a4,a4,0x10
8000b48c:	ffe68693          	addi	a3,a3,-2
8000b490:	01075713          	srli	a4,a4,0x10
8000b494:	fcd512e3          	bne	a0,a3,8000b458 <eshup1+0x8>
8000b498:	00008067          	ret
8000b49c:	0017e793          	ori	a5,a5,1
8000b4a0:	fe1ff06f          	j	8000b480 <eshup1+0x30>

8000b4a4 <eshdn8>:
8000b4a4:	00450793          	addi	a5,a0,4
8000b4a8:	00000713          	li	a4,0
8000b4ac:	01a50513          	addi	a0,a0,26
8000b4b0:	0007d683          	lhu	a3,0(a5)
8000b4b4:	00278793          	addi	a5,a5,2
8000b4b8:	0086d613          	srli	a2,a3,0x8
8000b4bc:	00c76733          	or	a4,a4,a2
8000b4c0:	fee79f23          	sh	a4,-2(a5)
8000b4c4:	00869713          	slli	a4,a3,0x8
8000b4c8:	01071713          	slli	a4,a4,0x10
8000b4cc:	01075713          	srli	a4,a4,0x10
8000b4d0:	fef510e3          	bne	a0,a5,8000b4b0 <eshdn8+0xc>
8000b4d4:	00008067          	ret

8000b4d8 <eshup8>:
8000b4d8:	01650793          	addi	a5,a0,22
8000b4dc:	00000713          	li	a4,0
8000b4e0:	0027d683          	lhu	a3,2(a5)
8000b4e4:	ffe78793          	addi	a5,a5,-2
8000b4e8:	00869613          	slli	a2,a3,0x8
8000b4ec:	00c76733          	or	a4,a4,a2
8000b4f0:	00e79223          	sh	a4,4(a5)
8000b4f4:	0086d713          	srli	a4,a3,0x8
8000b4f8:	fef514e3          	bne	a0,a5,8000b4e0 <eshup8+0x8>
8000b4fc:	00008067          	ret

8000b500 <eshup6>:
8000b500:	00450793          	addi	a5,a0,4
8000b504:	01850713          	addi	a4,a0,24
8000b508:	00278793          	addi	a5,a5,2
8000b50c:	0007d683          	lhu	a3,0(a5)
8000b510:	fed79f23          	sh	a3,-2(a5)
8000b514:	fef71ae3          	bne	a4,a5,8000b508 <eshup6+0x8>
8000b518:	00051c23          	sh	zero,24(a0)
8000b51c:	00008067          	ret

8000b520 <eshdn6>:
8000b520:	01850793          	addi	a5,a0,24
8000b524:	01a50713          	addi	a4,a0,26
8000b528:	00450693          	addi	a3,a0,4
8000b52c:	ffe78793          	addi	a5,a5,-2
8000b530:	0007d603          	lhu	a2,0(a5)
8000b534:	ffe70713          	addi	a4,a4,-2
8000b538:	00c71023          	sh	a2,0(a4)
8000b53c:	fef698e3          	bne	a3,a5,8000b52c <eshdn6+0xc>
8000b540:	00051223          	sh	zero,4(a0)
8000b544:	00008067          	ret

8000b548 <eaddm>:
8000b548:	01858593          	addi	a1,a1,24
8000b54c:	01650713          	addi	a4,a0,22
8000b550:	00000693          	li	a3,0
8000b554:	00275783          	lhu	a5,2(a4)
8000b558:	0005d603          	lhu	a2,0(a1)
8000b55c:	ffe70713          	addi	a4,a4,-2
8000b560:	ffe58593          	addi	a1,a1,-2
8000b564:	00c787b3          	add	a5,a5,a2
8000b568:	00d787b3          	add	a5,a5,a3
8000b56c:	00f59123          	sh	a5,2(a1)
8000b570:	0107d793          	srli	a5,a5,0x10
8000b574:	0017f693          	andi	a3,a5,1
8000b578:	fce51ee3          	bne	a0,a4,8000b554 <eaddm+0xc>
8000b57c:	00008067          	ret

8000b580 <esubm>:
8000b580:	01858593          	addi	a1,a1,24
8000b584:	01650713          	addi	a4,a0,22
8000b588:	00000693          	li	a3,0
8000b58c:	0005d783          	lhu	a5,0(a1)
8000b590:	00275603          	lhu	a2,2(a4)
8000b594:	ffe70713          	addi	a4,a4,-2
8000b598:	ffe58593          	addi	a1,a1,-2
8000b59c:	40c787b3          	sub	a5,a5,a2
8000b5a0:	40d787b3          	sub	a5,a5,a3
8000b5a4:	00f59123          	sh	a5,2(a1)
8000b5a8:	0107d793          	srli	a5,a5,0x10
8000b5ac:	0017f693          	andi	a3,a5,1
8000b5b0:	fce51ee3          	bne	a0,a4,8000b58c <esubm+0xc>
8000b5b4:	00008067          	ret

8000b5b8 <m16m>:
8000b5b8:	fe010113          	addi	sp,sp,-32
8000b5bc:	00010337          	lui	t1,0x10
8000b5c0:	01858893          	addi	a7,a1,24
8000b5c4:	00011d23          	sh	zero,26(sp)
8000b5c8:	00011e23          	sh	zero,28(sp)
8000b5cc:	00458593          	addi	a1,a1,4
8000b5d0:	01c10693          	addi	a3,sp,28
8000b5d4:	fff30313          	addi	t1,t1,-1 # ffff <_HEAP_SIZE+0xefff>
8000b5d8:	0008d703          	lhu	a4,0(a7)
8000b5dc:	ffe68693          	addi	a3,a3,-2
8000b5e0:	ffe88893          	addi	a7,a7,-2
8000b5e4:	02071c63          	bnez	a4,8000b61c <m16m+0x64>
8000b5e8:	fe069f23          	sh	zero,-2(a3)
8000b5ec:	ff1596e3          	bne	a1,a7,8000b5d8 <m16m+0x20>
8000b5f0:	00400793          	li	a5,4
8000b5f4:	01a00713          	li	a4,26
8000b5f8:	00410593          	addi	a1,sp,4
8000b5fc:	00f585b3          	add	a1,a1,a5
8000b600:	0005d583          	lhu	a1,0(a1)
8000b604:	00f606b3          	add	a3,a2,a5
8000b608:	00278793          	addi	a5,a5,2
8000b60c:	00b69023          	sh	a1,0(a3)
8000b610:	fee794e3          	bne	a5,a4,8000b5f8 <m16m+0x40>
8000b614:	02010113          	addi	sp,sp,32
8000b618:	00008067          	ret
8000b61c:	02a70733          	mul	a4,a4,a0
8000b620:	0026d803          	lhu	a6,2(a3)
8000b624:	006777b3          	and	a5,a4,t1
8000b628:	010787b3          	add	a5,a5,a6
8000b62c:	0107d813          	srli	a6,a5,0x10
8000b630:	00f69123          	sh	a5,2(a3)
8000b634:	01075793          	srli	a5,a4,0x10
8000b638:	0006d703          	lhu	a4,0(a3)
8000b63c:	00e787b3          	add	a5,a5,a4
8000b640:	010787b3          	add	a5,a5,a6
8000b644:	00f69023          	sh	a5,0(a3)
8000b648:	0107d793          	srli	a5,a5,0x10
8000b64c:	fef69f23          	sh	a5,-2(a3)
8000b650:	f9dff06f          	j	8000b5ec <m16m+0x34>

8000b654 <eisnan>:
8000b654:	01255783          	lhu	a5,18(a0)
8000b658:	fff7c793          	not	a5,a5
8000b65c:	01179713          	slli	a4,a5,0x11
8000b660:	00071c63          	bnez	a4,8000b678 <eisnan+0x24>
8000b664:	01250793          	addi	a5,a0,18
8000b668:	00250513          	addi	a0,a0,2
8000b66c:	ffe55703          	lhu	a4,-2(a0)
8000b670:	00071863          	bnez	a4,8000b680 <eisnan+0x2c>
8000b674:	fea79ae3          	bne	a5,a0,8000b668 <eisnan+0x14>
8000b678:	00000513          	li	a0,0
8000b67c:	00008067          	ret
8000b680:	00100513          	li	a0,1
8000b684:	00008067          	ret

8000b688 <eisneg>:
8000b688:	ff010113          	addi	sp,sp,-16
8000b68c:	00812423          	sw	s0,8(sp)
8000b690:	00112623          	sw	ra,12(sp)
8000b694:	00050413          	mv	s0,a0
8000b698:	fbdff0ef          	jal	ra,8000b654 <eisnan>
8000b69c:	00051e63          	bnez	a0,8000b6b8 <eisneg+0x30>
8000b6a0:	01241503          	lh	a0,18(s0)
8000b6a4:	01f55513          	srli	a0,a0,0x1f
8000b6a8:	00c12083          	lw	ra,12(sp)
8000b6ac:	00812403          	lw	s0,8(sp)
8000b6b0:	01010113          	addi	sp,sp,16
8000b6b4:	00008067          	ret
8000b6b8:	00000513          	li	a0,0
8000b6bc:	fedff06f          	j	8000b6a8 <eisneg+0x20>

8000b6c0 <emovi>:
8000b6c0:	01251783          	lh	a5,18(a0)
8000b6c4:	ff010113          	addi	sp,sp,-16
8000b6c8:	00112623          	sw	ra,12(sp)
8000b6cc:	00812423          	sw	s0,8(sp)
8000b6d0:	00912223          	sw	s1,4(sp)
8000b6d4:	01212023          	sw	s2,0(sp)
8000b6d8:	0607d863          	bgez	a5,8000b748 <emovi+0x88>
8000b6dc:	fff00793          	li	a5,-1
8000b6e0:	00f59023          	sh	a5,0(a1)
8000b6e4:	01255703          	lhu	a4,18(a0)
8000b6e8:	000087b7          	lui	a5,0x8
8000b6ec:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
8000b6f0:	00e7f733          	and	a4,a5,a4
8000b6f4:	00e59123          	sh	a4,2(a1)
8000b6f8:	01050913          	addi	s2,a0,16
8000b6fc:	06f71663          	bne	a4,a5,8000b768 <emovi+0xa8>
8000b700:	00058413          	mv	s0,a1
8000b704:	00050493          	mv	s1,a0
8000b708:	f4dff0ef          	jal	ra,8000b654 <eisnan>
8000b70c:	04050263          	beqz	a0,8000b750 <emovi+0x90>
8000b710:	00640793          	addi	a5,s0,6
8000b714:	00041223          	sh	zero,4(s0)
8000b718:	ffc48513          	addi	a0,s1,-4
8000b71c:	ffe90913          	addi	s2,s2,-2
8000b720:	00295703          	lhu	a4,2(s2)
8000b724:	00278793          	addi	a5,a5,2
8000b728:	fee79f23          	sh	a4,-2(a5)
8000b72c:	fea918e3          	bne	s2,a0,8000b71c <emovi+0x5c>
8000b730:	00c12083          	lw	ra,12(sp)
8000b734:	00812403          	lw	s0,8(sp)
8000b738:	00412483          	lw	s1,4(sp)
8000b73c:	00012903          	lw	s2,0(sp)
8000b740:	01010113          	addi	sp,sp,16
8000b744:	00008067          	ret
8000b748:	00059023          	sh	zero,0(a1)
8000b74c:	f99ff06f          	j	8000b6e4 <emovi+0x24>
8000b750:	00440793          	addi	a5,s0,4
8000b754:	01a40593          	addi	a1,s0,26
8000b758:	00278793          	addi	a5,a5,2
8000b75c:	fe079f23          	sh	zero,-2(a5)
8000b760:	feb79ce3          	bne	a5,a1,8000b758 <emovi+0x98>
8000b764:	fcdff06f          	j	8000b730 <emovi+0x70>
8000b768:	00658793          	addi	a5,a1,6
8000b76c:	00059223          	sh	zero,4(a1)
8000b770:	ffe50513          	addi	a0,a0,-2
8000b774:	ffe90913          	addi	s2,s2,-2
8000b778:	00295703          	lhu	a4,2(s2)
8000b77c:	00278793          	addi	a5,a5,2
8000b780:	fee79f23          	sh	a4,-2(a5)
8000b784:	fea918e3          	bne	s2,a0,8000b774 <emovi+0xb4>
8000b788:	00059c23          	sh	zero,24(a1)
8000b78c:	fa5ff06f          	j	8000b730 <emovi+0x70>

8000b790 <ecmp>:
8000b790:	fb010113          	addi	sp,sp,-80
8000b794:	04912223          	sw	s1,68(sp)
8000b798:	05212023          	sw	s2,64(sp)
8000b79c:	04112623          	sw	ra,76(sp)
8000b7a0:	04812423          	sw	s0,72(sp)
8000b7a4:	00050913          	mv	s2,a0
8000b7a8:	00058493          	mv	s1,a1
8000b7ac:	ea9ff0ef          	jal	ra,8000b654 <eisnan>
8000b7b0:	0e051063          	bnez	a0,8000b890 <ecmp+0x100>
8000b7b4:	00048513          	mv	a0,s1
8000b7b8:	e9dff0ef          	jal	ra,8000b654 <eisnan>
8000b7bc:	00050413          	mv	s0,a0
8000b7c0:	0c051863          	bnez	a0,8000b890 <ecmp+0x100>
8000b7c4:	00810593          	addi	a1,sp,8
8000b7c8:	00090513          	mv	a0,s2
8000b7cc:	ef5ff0ef          	jal	ra,8000b6c0 <emovi>
8000b7d0:	02410593          	addi	a1,sp,36
8000b7d4:	00048513          	mv	a0,s1
8000b7d8:	ee9ff0ef          	jal	ra,8000b6c0 <emovi>
8000b7dc:	00815703          	lhu	a4,8(sp)
8000b7e0:	02415783          	lhu	a5,36(sp)
8000b7e4:	06e78063          	beq	a5,a4,8000b844 <ecmp+0xb4>
8000b7e8:	00200793          	li	a5,2
8000b7ec:	01800693          	li	a3,24
8000b7f0:	00810613          	addi	a2,sp,8
8000b7f4:	00f60633          	add	a2,a2,a5
8000b7f8:	00065603          	lhu	a2,0(a2) # ffff8000 <__stack+0x7ffbb534>
8000b7fc:	02061c63          	bnez	a2,8000b834 <ecmp+0xa4>
8000b800:	02410613          	addi	a2,sp,36
8000b804:	00f60633          	add	a2,a2,a5
8000b808:	00065603          	lhu	a2,0(a2)
8000b80c:	02061463          	bnez	a2,8000b834 <ecmp+0xa4>
8000b810:	00278793          	addi	a5,a5,2
8000b814:	fcd79ee3          	bne	a5,a3,8000b7f0 <ecmp+0x60>
8000b818:	00040513          	mv	a0,s0
8000b81c:	04c12083          	lw	ra,76(sp)
8000b820:	04812403          	lw	s0,72(sp)
8000b824:	04412483          	lw	s1,68(sp)
8000b828:	04012903          	lw	s2,64(sp)
8000b82c:	05010113          	addi	sp,sp,80
8000b830:	00008067          	ret
8000b834:	00100413          	li	s0,1
8000b838:	fe0700e3          	beqz	a4,8000b818 <ecmp+0x88>
8000b83c:	fff00413          	li	s0,-1
8000b840:	fd9ff06f          	j	8000b818 <ecmp+0x88>
8000b844:	00100613          	li	a2,1
8000b848:	00078463          	beqz	a5,8000b850 <ecmp+0xc0>
8000b84c:	fff00613          	li	a2,-1
8000b850:	00000793          	li	a5,0
8000b854:	01800593          	li	a1,24
8000b858:	00810713          	addi	a4,sp,8
8000b85c:	00f70733          	add	a4,a4,a5
8000b860:	00075683          	lhu	a3,0(a4)
8000b864:	02410713          	addi	a4,sp,36
8000b868:	00f70733          	add	a4,a4,a5
8000b86c:	00075703          	lhu	a4,0(a4)
8000b870:	00e69863          	bne	a3,a4,8000b880 <ecmp+0xf0>
8000b874:	00278793          	addi	a5,a5,2
8000b878:	feb790e3          	bne	a5,a1,8000b858 <ecmp+0xc8>
8000b87c:	f9dff06f          	j	8000b818 <ecmp+0x88>
8000b880:	00060413          	mv	s0,a2
8000b884:	f8d76ae3          	bltu	a4,a3,8000b818 <ecmp+0x88>
8000b888:	40c00433          	neg	s0,a2
8000b88c:	f8dff06f          	j	8000b818 <ecmp+0x88>
8000b890:	ffe00413          	li	s0,-2
8000b894:	f85ff06f          	j	8000b818 <ecmp+0x88>

8000b898 <eisinf>:
8000b898:	01255783          	lhu	a5,18(a0)
8000b89c:	fff7c793          	not	a5,a5
8000b8a0:	01179713          	slli	a4,a5,0x11
8000b8a4:	02071063          	bnez	a4,8000b8c4 <eisinf+0x2c>
8000b8a8:	ff010113          	addi	sp,sp,-16
8000b8ac:	00112623          	sw	ra,12(sp)
8000b8b0:	da5ff0ef          	jal	ra,8000b654 <eisnan>
8000b8b4:	00c12083          	lw	ra,12(sp)
8000b8b8:	00153513          	seqz	a0,a0
8000b8bc:	01010113          	addi	sp,sp,16
8000b8c0:	00008067          	ret
8000b8c4:	00000513          	li	a0,0
8000b8c8:	00008067          	ret

8000b8cc <einfin.isra.2>:
8000b8cc:	01250793          	addi	a5,a0,18
8000b8d0:	00250513          	addi	a0,a0,2
8000b8d4:	fe051f23          	sh	zero,-2(a0)
8000b8d8:	fef51ce3          	bne	a0,a5,8000b8d0 <einfin.isra.2+0x4>
8000b8dc:	00055783          	lhu	a5,0(a0)
8000b8e0:	00008737          	lui	a4,0x8
8000b8e4:	fff70713          	addi	a4,a4,-1 # 7fff <_HEAP_SIZE+0x6fff>
8000b8e8:	00e7e7b3          	or	a5,a5,a4
8000b8ec:	00f51023          	sh	a5,0(a0)
8000b8f0:	00008067          	ret

8000b8f4 <eshift.part.3>:
8000b8f4:	fe010113          	addi	sp,sp,-32
8000b8f8:	00812c23          	sw	s0,24(sp)
8000b8fc:	01312623          	sw	s3,12(sp)
8000b900:	00112e23          	sw	ra,28(sp)
8000b904:	00912a23          	sw	s1,20(sp)
8000b908:	01212823          	sw	s2,16(sp)
8000b90c:	01412423          	sw	s4,8(sp)
8000b910:	01512223          	sw	s5,4(sp)
8000b914:	00050993          	mv	s3,a0
8000b918:	00058413          	mv	s0,a1
8000b91c:	1005d263          	bgez	a1,8000ba20 <eshift.part.3+0x12c>
8000b920:	40b00933          	neg	s2,a1
8000b924:	00090a13          	mv	s4,s2
8000b928:	00000493          	li	s1,0
8000b92c:	00f00a93          	li	s5,15
8000b930:	034ace63          	blt	s5,s4,8000b96c <eshift.part.3+0x78>
8000b934:	00495913          	srli	s2,s2,0x4
8000b938:	ff000593          	li	a1,-16
8000b93c:	02b905b3          	mul	a1,s2,a1
8000b940:	00700a13          	li	s4,7
8000b944:	40858433          	sub	s0,a1,s0
8000b948:	00040913          	mv	s2,s0
8000b94c:	032a4c63          	blt	s4,s2,8000b984 <eshift.part.3+0x90>
8000b950:	00345593          	srli	a1,s0,0x3
8000b954:	ff800793          	li	a5,-8
8000b958:	02f585b3          	mul	a1,a1,a5
8000b95c:	00858433          	add	s0,a1,s0
8000b960:	02041e63          	bnez	s0,8000b99c <eshift.part.3+0xa8>
8000b964:	00903533          	snez	a0,s1
8000b968:	0940006f          	j	8000b9fc <eshift.part.3+0x108>
8000b96c:	0189d783          	lhu	a5,24(s3)
8000b970:	00098513          	mv	a0,s3
8000b974:	ff0a0a13          	addi	s4,s4,-16
8000b978:	00f4e4b3          	or	s1,s1,a5
8000b97c:	ba5ff0ef          	jal	ra,8000b520 <eshdn6>
8000b980:	fb1ff06f          	j	8000b930 <eshift.part.3+0x3c>
8000b984:	0189c783          	lbu	a5,24(s3)
8000b988:	00098513          	mv	a0,s3
8000b98c:	ff890913          	addi	s2,s2,-8
8000b990:	0097e4b3          	or	s1,a5,s1
8000b994:	b11ff0ef          	jal	ra,8000b4a4 <eshdn8>
8000b998:	fb5ff06f          	j	8000b94c <eshift.part.3+0x58>
8000b99c:	0189d783          	lhu	a5,24(s3)
8000b9a0:	00098513          	mv	a0,s3
8000b9a4:	fff40413          	addi	s0,s0,-1
8000b9a8:	0017f793          	andi	a5,a5,1
8000b9ac:	0097e4b3          	or	s1,a5,s1
8000b9b0:	a51ff0ef          	jal	ra,8000b400 <eshdn1>
8000b9b4:	fadff06f          	j	8000b960 <eshift.part.3+0x6c>
8000b9b8:	00098513          	mv	a0,s3
8000b9bc:	b45ff0ef          	jal	ra,8000b500 <eshup6>
8000b9c0:	ff048493          	addi	s1,s1,-16
8000b9c4:	fe994ae3          	blt	s2,s1,8000b9b8 <eshift.part.3+0xc4>
8000b9c8:	00445593          	srli	a1,s0,0x4
8000b9cc:	ff000793          	li	a5,-16
8000b9d0:	02f585b3          	mul	a1,a1,a5
8000b9d4:	00700913          	li	s2,7
8000b9d8:	00b40433          	add	s0,s0,a1
8000b9dc:	00040493          	mv	s1,s0
8000b9e0:	04994663          	blt	s2,s1,8000ba2c <eshift.part.3+0x138>
8000b9e4:	00345593          	srli	a1,s0,0x3
8000b9e8:	ff800793          	li	a5,-8
8000b9ec:	02f585b3          	mul	a1,a1,a5
8000b9f0:	00b40433          	add	s0,s0,a1
8000b9f4:	04041463          	bnez	s0,8000ba3c <eshift.part.3+0x148>
8000b9f8:	00000513          	li	a0,0
8000b9fc:	01c12083          	lw	ra,28(sp)
8000ba00:	01812403          	lw	s0,24(sp)
8000ba04:	01412483          	lw	s1,20(sp)
8000ba08:	01012903          	lw	s2,16(sp)
8000ba0c:	00c12983          	lw	s3,12(sp)
8000ba10:	00812a03          	lw	s4,8(sp)
8000ba14:	00412a83          	lw	s5,4(sp)
8000ba18:	02010113          	addi	sp,sp,32
8000ba1c:	00008067          	ret
8000ba20:	00058493          	mv	s1,a1
8000ba24:	00f00913          	li	s2,15
8000ba28:	f9dff06f          	j	8000b9c4 <eshift.part.3+0xd0>
8000ba2c:	00098513          	mv	a0,s3
8000ba30:	aa9ff0ef          	jal	ra,8000b4d8 <eshup8>
8000ba34:	ff848493          	addi	s1,s1,-8
8000ba38:	fa9ff06f          	j	8000b9e0 <eshift.part.3+0xec>
8000ba3c:	00098513          	mv	a0,s3
8000ba40:	a11ff0ef          	jal	ra,8000b450 <eshup1>
8000ba44:	fff40413          	addi	s0,s0,-1
8000ba48:	fadff06f          	j	8000b9f4 <eshift.part.3+0x100>

8000ba4c <enormlz>:
8000ba4c:	00455783          	lhu	a5,4(a0)
8000ba50:	ff010113          	addi	sp,sp,-16
8000ba54:	00912223          	sw	s1,4(sp)
8000ba58:	00112623          	sw	ra,12(sp)
8000ba5c:	00812423          	sw	s0,8(sp)
8000ba60:	01212023          	sw	s2,0(sp)
8000ba64:	00050493          	mv	s1,a0
8000ba68:	08079263          	bnez	a5,8000baec <enormlz+0xa0>
8000ba6c:	00651783          	lh	a5,6(a0)
8000ba70:	00000413          	li	s0,0
8000ba74:	0a000913          	li	s2,160
8000ba78:	0207d863          	bgez	a5,8000baa8 <enormlz+0x5c>
8000ba7c:	00040513          	mv	a0,s0
8000ba80:	00c12083          	lw	ra,12(sp)
8000ba84:	00812403          	lw	s0,8(sp)
8000ba88:	00412483          	lw	s1,4(sp)
8000ba8c:	00012903          	lw	s2,0(sp)
8000ba90:	01010113          	addi	sp,sp,16
8000ba94:	00008067          	ret
8000ba98:	00048513          	mv	a0,s1
8000ba9c:	01040413          	addi	s0,s0,16
8000baa0:	a61ff0ef          	jal	ra,8000b500 <eshup6>
8000baa4:	fd240ce3          	beq	s0,s2,8000ba7c <enormlz+0x30>
8000baa8:	0064d783          	lhu	a5,6(s1)
8000baac:	fe0786e3          	beqz	a5,8000ba98 <enormlz+0x4c>
8000bab0:	0064d783          	lhu	a5,6(s1)
8000bab4:	f007f793          	andi	a5,a5,-256
8000bab8:	02078263          	beqz	a5,8000badc <enormlz+0x90>
8000babc:	0a000913          	li	s2,160
8000bac0:	00649783          	lh	a5,6(s1)
8000bac4:	fa07cce3          	bltz	a5,8000ba7c <enormlz+0x30>
8000bac8:	00048513          	mv	a0,s1
8000bacc:	00140413          	addi	s0,s0,1
8000bad0:	981ff0ef          	jal	ra,8000b450 <eshup1>
8000bad4:	fe8956e3          	ble	s0,s2,8000bac0 <enormlz+0x74>
8000bad8:	fa5ff06f          	j	8000ba7c <enormlz+0x30>
8000badc:	00048513          	mv	a0,s1
8000bae0:	9f9ff0ef          	jal	ra,8000b4d8 <eshup8>
8000bae4:	00840413          	addi	s0,s0,8
8000bae8:	fc9ff06f          	j	8000bab0 <enormlz+0x64>
8000baec:	f007f793          	andi	a5,a5,-256
8000baf0:	00000413          	li	s0,0
8000baf4:	00078663          	beqz	a5,8000bb00 <enormlz+0xb4>
8000baf8:	9adff0ef          	jal	ra,8000b4a4 <eshdn8>
8000bafc:	ff800413          	li	s0,-8
8000bb00:	f7000913          	li	s2,-144
8000bb04:	0140006f          	j	8000bb18 <enormlz+0xcc>
8000bb08:	00048513          	mv	a0,s1
8000bb0c:	fff40413          	addi	s0,s0,-1
8000bb10:	8f1ff0ef          	jal	ra,8000b400 <eshdn1>
8000bb14:	f72444e3          	blt	s0,s2,8000ba7c <enormlz+0x30>
8000bb18:	0044d783          	lhu	a5,4(s1)
8000bb1c:	fe0796e3          	bnez	a5,8000bb08 <enormlz+0xbc>
8000bb20:	f5dff06f          	j	8000ba7c <enormlz+0x30>

8000bb24 <enan.constprop.12>:
8000bb24:	01050793          	addi	a5,a0,16
8000bb28:	00250513          	addi	a0,a0,2
8000bb2c:	fe051f23          	sh	zero,-2(a0)
8000bb30:	fef51ce3          	bne	a0,a5,8000bb28 <enan.constprop.12+0x4>
8000bb34:	ffffc7b7          	lui	a5,0xffffc
8000bb38:	00f51023          	sh	a5,0(a0)
8000bb3c:	ffff87b7          	lui	a5,0xffff8
8000bb40:	fff7c793          	not	a5,a5
8000bb44:	00f51123          	sh	a5,2(a0)
8000bb48:	00008067          	ret

8000bb4c <emovo.isra.6>:
8000bb4c:	00050713          	mv	a4,a0
8000bb50:	00075683          	lhu	a3,0(a4)
8000bb54:	00058513          	mv	a0,a1
8000bb58:	00275783          	lhu	a5,2(a4)
8000bb5c:	00068663          	beqz	a3,8000bb68 <emovo.isra.6+0x1c>
8000bb60:	ffff86b7          	lui	a3,0xffff8
8000bb64:	00d7e7b3          	or	a5,a5,a3
8000bb68:	00f51923          	sh	a5,18(a0)
8000bb6c:	00275603          	lhu	a2,2(a4)
8000bb70:	000086b7          	lui	a3,0x8
8000bb74:	fff68693          	addi	a3,a3,-1 # 7fff <_HEAP_SIZE+0x6fff>
8000bb78:	00670793          	addi	a5,a4,6
8000bb7c:	00d61e63          	bne	a2,a3,8000bb98 <emovo.isra.6+0x4c>
8000bb80:	01a70713          	addi	a4,a4,26
8000bb84:	0007d683          	lhu	a3,0(a5) # ffff8000 <__stack+0x7ffbb534>
8000bb88:	02069863          	bnez	a3,8000bbb8 <emovo.isra.6+0x6c>
8000bb8c:	00278793          	addi	a5,a5,2
8000bb90:	fee79ae3          	bne	a5,a4,8000bb84 <emovo.isra.6+0x38>
8000bb94:	d39ff06f          	j	8000b8cc <einfin.isra.2>
8000bb98:	01050513          	addi	a0,a0,16
8000bb9c:	01870713          	addi	a4,a4,24
8000bba0:	00278793          	addi	a5,a5,2
8000bba4:	ffe7d683          	lhu	a3,-2(a5)
8000bba8:	ffe50513          	addi	a0,a0,-2
8000bbac:	00d51123          	sh	a3,2(a0)
8000bbb0:	fee798e3          	bne	a5,a4,8000bba0 <emovo.isra.6+0x54>
8000bbb4:	00008067          	ret
8000bbb8:	f6dff06f          	j	8000bb24 <enan.constprop.12>

8000bbbc <e113toe.isra.8>:
8000bbbc:	fd010113          	addi	sp,sp,-48
8000bbc0:	02912223          	sw	s1,36(sp)
8000bbc4:	00050493          	mv	s1,a0
8000bbc8:	00410513          	addi	a0,sp,4
8000bbcc:	02812423          	sw	s0,40(sp)
8000bbd0:	02112623          	sw	ra,44(sp)
8000bbd4:	00058413          	mv	s0,a1
8000bbd8:	fb4ff0ef          	jal	ra,8000b38c <ecleaz>
8000bbdc:	00e4d703          	lhu	a4,14(s1)
8000bbe0:	01071793          	slli	a5,a4,0x10
8000bbe4:	4107d793          	srai	a5,a5,0x10
8000bbe8:	0407c263          	bltz	a5,8000bc2c <e113toe.isra.8+0x70>
8000bbec:	00011223          	sh	zero,4(sp)
8000bbf0:	000086b7          	lui	a3,0x8
8000bbf4:	fff68693          	addi	a3,a3,-1 # 7fff <_HEAP_SIZE+0x6fff>
8000bbf8:	00d77733          	and	a4,a4,a3
8000bbfc:	00e48793          	addi	a5,s1,14
8000bc00:	06d71c63          	bne	a4,a3,8000bc78 <e113toe.isra.8+0xbc>
8000bc04:	00048713          	mv	a4,s1
8000bc08:	00075683          	lhu	a3,0(a4)
8000bc0c:	02068663          	beqz	a3,8000bc38 <e113toe.isra.8+0x7c>
8000bc10:	00040513          	mv	a0,s0
8000bc14:	f11ff0ef          	jal	ra,8000bb24 <enan.constprop.12>
8000bc18:	02c12083          	lw	ra,44(sp)
8000bc1c:	02812403          	lw	s0,40(sp)
8000bc20:	02412483          	lw	s1,36(sp)
8000bc24:	03010113          	addi	sp,sp,48
8000bc28:	00008067          	ret
8000bc2c:	fff00793          	li	a5,-1
8000bc30:	00f11223          	sh	a5,4(sp)
8000bc34:	fbdff06f          	j	8000bbf0 <e113toe.isra.8+0x34>
8000bc38:	00270713          	addi	a4,a4,2
8000bc3c:	fce796e3          	bne	a5,a4,8000bc08 <e113toe.isra.8+0x4c>
8000bc40:	00040513          	mv	a0,s0
8000bc44:	f18ff0ef          	jal	ra,8000b35c <eclear>
8000bc48:	00040513          	mv	a0,s0
8000bc4c:	c81ff0ef          	jal	ra,8000b8cc <einfin.isra.2>
8000bc50:	00e49783          	lh	a5,14(s1)
8000bc54:	fc07d2e3          	bgez	a5,8000bc18 <e113toe.isra.8+0x5c>
8000bc58:	00040513          	mv	a0,s0
8000bc5c:	9f9ff0ef          	jal	ra,8000b654 <eisnan>
8000bc60:	fa051ce3          	bnez	a0,8000bc18 <e113toe.isra.8+0x5c>
8000bc64:	01245783          	lhu	a5,18(s0)
8000bc68:	ffff8737          	lui	a4,0xffff8
8000bc6c:	00e7c7b3          	xor	a5,a5,a4
8000bc70:	00f41923          	sh	a5,18(s0)
8000bc74:	fa5ff06f          	j	8000bc18 <e113toe.isra.8+0x5c>
8000bc78:	00e11323          	sh	a4,6(sp)
8000bc7c:	00410693          	addi	a3,sp,4
8000bc80:	ffe78793          	addi	a5,a5,-2
8000bc84:	0007d603          	lhu	a2,0(a5)
8000bc88:	00268693          	addi	a3,a3,2
8000bc8c:	00c69223          	sh	a2,4(a3)
8000bc90:	fef498e3          	bne	s1,a5,8000bc80 <e113toe.isra.8+0xc4>
8000bc94:	00071c63          	bnez	a4,8000bcac <e113toe.isra.8+0xf0>
8000bc98:	00011423          	sh	zero,8(sp)
8000bc9c:	00040593          	mv	a1,s0
8000bca0:	00410513          	addi	a0,sp,4
8000bca4:	ea9ff0ef          	jal	ra,8000bb4c <emovo.isra.6>
8000bca8:	f71ff06f          	j	8000bc18 <e113toe.isra.8+0x5c>
8000bcac:	00100793          	li	a5,1
8000bcb0:	fff00593          	li	a1,-1
8000bcb4:	00410513          	addi	a0,sp,4
8000bcb8:	00f11423          	sh	a5,8(sp)
8000bcbc:	c39ff0ef          	jal	ra,8000b8f4 <eshift.part.3>
8000bcc0:	fddff06f          	j	8000bc9c <e113toe.isra.8+0xe0>

8000bcc4 <emdnorm>:
8000bcc4:	fe010113          	addi	sp,sp,-32
8000bcc8:	00812c23          	sw	s0,24(sp)
8000bccc:	00912a23          	sw	s1,20(sp)
8000bcd0:	01212823          	sw	s2,16(sp)
8000bcd4:	01312623          	sw	s3,12(sp)
8000bcd8:	01412423          	sw	s4,8(sp)
8000bcdc:	01512223          	sw	s5,4(sp)
8000bce0:	00068913          	mv	s2,a3
8000bce4:	00078413          	mv	s0,a5
8000bce8:	00112e23          	sw	ra,28(sp)
8000bcec:	00050493          	mv	s1,a0
8000bcf0:	00058993          	mv	s3,a1
8000bcf4:	00060a13          	mv	s4,a2
8000bcf8:	00070a93          	mv	s5,a4
8000bcfc:	d51ff0ef          	jal	ra,8000ba4c <enormlz>
8000bd00:	09000793          	li	a5,144
8000bd04:	40a90933          	sub	s2,s2,a0
8000bd08:	04a7d463          	ble	a0,a5,8000bd50 <emdnorm+0x8c>
8000bd0c:	000087b7          	lui	a5,0x8
8000bd10:	ffe78793          	addi	a5,a5,-2 # 7ffe <_HEAP_SIZE+0x6ffe>
8000bd14:	2d27c663          	blt	a5,s2,8000bfe0 <emdnorm+0x31c>
8000bd18:	00248793          	addi	a5,s1,2
8000bd1c:	01a48493          	addi	s1,s1,26
8000bd20:	00278793          	addi	a5,a5,2
8000bd24:	fe079f23          	sh	zero,-2(a5)
8000bd28:	fe979ce3          	bne	a5,s1,8000bd20 <emdnorm+0x5c>
8000bd2c:	01c12083          	lw	ra,28(sp)
8000bd30:	01812403          	lw	s0,24(sp)
8000bd34:	01412483          	lw	s1,20(sp)
8000bd38:	01012903          	lw	s2,16(sp)
8000bd3c:	00c12983          	lw	s3,12(sp)
8000bd40:	00812a03          	lw	s4,8(sp)
8000bd44:	00412a83          	lw	s5,4(sp)
8000bd48:	02010113          	addi	sp,sp,32
8000bd4c:	00008067          	ret
8000bd50:	00095e63          	bgez	s2,8000bd6c <emdnorm+0xa8>
8000bd54:	f7000793          	li	a5,-144
8000bd58:	12f94c63          	blt	s2,a5,8000be90 <emdnorm+0x1cc>
8000bd5c:	00090593          	mv	a1,s2
8000bd60:	00048513          	mv	a0,s1
8000bd64:	b91ff0ef          	jal	ra,8000b8f4 <eshift.part.3>
8000bd68:	14051063          	bnez	a0,8000bea8 <emdnorm+0x1e4>
8000bd6c:	220a8663          	beqz	s5,8000bf98 <emdnorm+0x2d4>
8000bd70:	00442703          	lw	a4,4(s0)
8000bd74:	00042783          	lw	a5,0(s0)
8000bd78:	06f70663          	beq	a4,a5,8000bde4 <emdnorm+0x120>
8000bd7c:	01a40513          	addi	a0,s0,26
8000bd80:	e0cff0ef          	jal	ra,8000b38c <ecleaz>
8000bd84:	00442783          	lw	a5,4(s0)
8000bd88:	03800713          	li	a4,56
8000bd8c:	16e78e63          	beq	a5,a4,8000bf08 <emdnorm+0x244>
8000bd90:	12f74063          	blt	a4,a5,8000beb0 <emdnorm+0x1ec>
8000bd94:	01800713          	li	a4,24
8000bd98:	1ae78663          	beq	a5,a4,8000bf44 <emdnorm+0x280>
8000bd9c:	03500713          	li	a4,53
8000bda0:	18e78263          	beq	a5,a4,8000bf24 <emdnorm+0x260>
8000bda4:	00c00713          	li	a4,12
8000bda8:	00e42423          	sw	a4,8(s0)
8000bdac:	80010737          	lui	a4,0x80010
8000bdb0:	fff70713          	addi	a4,a4,-1 # 8000ffff <__stack+0xfffd3533>
8000bdb4:	00e42a23          	sw	a4,20(s0)
8000bdb8:	00100713          	li	a4,1
8000bdbc:	00e41c23          	sh	a4,24(s0)
8000bdc0:	00b00713          	li	a4,11
8000bdc4:	00e42623          	sw	a4,12(s0)
8000bdc8:	00c42703          	lw	a4,12(s0)
8000bdcc:	01845683          	lhu	a3,24(s0)
8000bdd0:	00870713          	addi	a4,a4,8
8000bdd4:	00171713          	slli	a4,a4,0x1
8000bdd8:	00e40733          	add	a4,s0,a4
8000bddc:	00d71523          	sh	a3,10(a4)
8000bde0:	00f42023          	sw	a5,0(s0)
8000bde4:	03204263          	bgtz	s2,8000be08 <emdnorm+0x144>
8000bde8:	00442703          	lw	a4,4(s0)
8000bdec:	09000793          	li	a5,144
8000bdf0:	00f70c63          	beq	a4,a5,8000be08 <emdnorm+0x144>
8000bdf4:	0184d783          	lhu	a5,24(s1)
8000bdf8:	00048513          	mv	a0,s1
8000bdfc:	0017f793          	andi	a5,a5,1
8000be00:	00f9e9b3          	or	s3,s3,a5
8000be04:	dfcff0ef          	jal	ra,8000b400 <eshdn1>
8000be08:	00842683          	lw	a3,8(s0)
8000be0c:	01445603          	lhu	a2,20(s0)
8000be10:	00442583          	lw	a1,4(s0)
8000be14:	00169713          	slli	a4,a3,0x1
8000be18:	00e48733          	add	a4,s1,a4
8000be1c:	00075783          	lhu	a5,0(a4)
8000be20:	00c7f7b3          	and	a5,a5,a2
8000be24:	08f00613          	li	a2,143
8000be28:	00b64a63          	blt	a2,a1,8000be3c <emdnorm+0x178>
8000be2c:	00168693          	addi	a3,a3,1
8000be30:	00070613          	mv	a2,a4
8000be34:	00c00593          	li	a1,12
8000be38:	10d5da63          	ble	a3,a1,8000bf4c <emdnorm+0x288>
8000be3c:	01445683          	lhu	a3,20(s0)
8000be40:	00075603          	lhu	a2,0(a4)
8000be44:	fff6c693          	not	a3,a3
8000be48:	00c6f6b3          	and	a3,a3,a2
8000be4c:	00d71023          	sh	a3,0(a4)
8000be50:	01645703          	lhu	a4,22(s0)
8000be54:	00f776b3          	and	a3,a4,a5
8000be58:	10068a63          	beqz	a3,8000bf6c <emdnorm+0x2a8>
8000be5c:	02f71263          	bne	a4,a5,8000be80 <emdnorm+0x1bc>
8000be60:	10099463          	bnez	s3,8000bf68 <emdnorm+0x2a4>
8000be64:	00c42783          	lw	a5,12(s0)
8000be68:	01845703          	lhu	a4,24(s0)
8000be6c:	00179793          	slli	a5,a5,0x1
8000be70:	00f487b3          	add	a5,s1,a5
8000be74:	0007d783          	lhu	a5,0(a5)
8000be78:	00e7f7b3          	and	a5,a5,a4
8000be7c:	0e078863          	beqz	a5,8000bf6c <emdnorm+0x2a8>
8000be80:	00048593          	mv	a1,s1
8000be84:	01a40513          	addi	a0,s0,26
8000be88:	ec0ff0ef          	jal	ra,8000b548 <eaddm>
8000be8c:	0e00006f          	j	8000bf6c <emdnorm+0x2a8>
8000be90:	00248793          	addi	a5,s1,2
8000be94:	01a48493          	addi	s1,s1,26
8000be98:	00278793          	addi	a5,a5,2
8000be9c:	fe079f23          	sh	zero,-2(a5)
8000bea0:	fe979ce3          	bne	a5,s1,8000be98 <emdnorm+0x1d4>
8000bea4:	e89ff06f          	j	8000bd2c <emdnorm+0x68>
8000bea8:	00100993          	li	s3,1
8000beac:	ec1ff06f          	j	8000bd6c <emdnorm+0xa8>
8000beb0:	04000713          	li	a4,64
8000beb4:	02e78863          	beq	a5,a4,8000bee4 <emdnorm+0x220>
8000beb8:	07100713          	li	a4,113
8000bebc:	eee794e3          	bne	a5,a4,8000bda4 <emdnorm+0xe0>
8000bec0:	40008737          	lui	a4,0x40008
8000bec4:	fff70713          	addi	a4,a4,-1 # 40007fff <_HEAP_SIZE+0x40006fff>
8000bec8:	00a00693          	li	a3,10
8000becc:	00e42a23          	sw	a4,20(s0)
8000bed0:	00d42423          	sw	a3,8(s0)
8000bed4:	ffff8737          	lui	a4,0xffff8
8000bed8:	00e41c23          	sh	a4,24(s0)
8000bedc:	00d42623          	sw	a3,12(s0)
8000bee0:	ee9ff06f          	j	8000bdc8 <emdnorm+0x104>
8000bee4:	00700713          	li	a4,7
8000bee8:	00e42423          	sw	a4,8(s0)
8000beec:	80010737          	lui	a4,0x80010
8000bef0:	fff70713          	addi	a4,a4,-1 # 8000ffff <__stack+0xfffd3533>
8000bef4:	00e42a23          	sw	a4,20(s0)
8000bef8:	00100713          	li	a4,1
8000befc:	00e41c23          	sh	a4,24(s0)
8000bf00:	00600713          	li	a4,6
8000bf04:	ec1ff06f          	j	8000bdc4 <emdnorm+0x100>
8000bf08:	00600693          	li	a3,6
8000bf0c:	00800737          	lui	a4,0x800
8000bf10:	0ff70713          	addi	a4,a4,255 # 8000ff <_HEAP_SIZE+0x7ff0ff>
8000bf14:	00e42a23          	sw	a4,20(s0)
8000bf18:	00d42423          	sw	a3,8(s0)
8000bf1c:	10000713          	li	a4,256
8000bf20:	fb9ff06f          	j	8000bed8 <emdnorm+0x214>
8000bf24:	04000737          	lui	a4,0x4000
8000bf28:	7ff70713          	addi	a4,a4,2047 # 40007ff <_HEAP_SIZE+0x3fff7ff>
8000bf2c:	00600693          	li	a3,6
8000bf30:	00e42a23          	sw	a4,20(s0)
8000bf34:	00001737          	lui	a4,0x1
8000bf38:	00d42423          	sw	a3,8(s0)
8000bf3c:	80070713          	addi	a4,a4,-2048 # 800 <_HEAP_SIZE-0x800>
8000bf40:	f99ff06f          	j	8000bed8 <emdnorm+0x214>
8000bf44:	00400693          	li	a3,4
8000bf48:	fc5ff06f          	j	8000bf0c <emdnorm+0x248>
8000bf4c:	00265503          	lhu	a0,2(a2)
8000bf50:	00050463          	beqz	a0,8000bf58 <emdnorm+0x294>
8000bf54:	0017e793          	ori	a5,a5,1
8000bf58:	00061123          	sh	zero,2(a2)
8000bf5c:	00168693          	addi	a3,a3,1
8000bf60:	00260613          	addi	a2,a2,2
8000bf64:	ed5ff06f          	j	8000be38 <emdnorm+0x174>
8000bf68:	f00a0ce3          	beqz	s4,8000be80 <emdnorm+0x1bc>
8000bf6c:	01204c63          	bgtz	s2,8000bf84 <emdnorm+0x2c0>
8000bf70:	00442703          	lw	a4,4(s0)
8000bf74:	09000793          	li	a5,144
8000bf78:	00f70663          	beq	a4,a5,8000bf84 <emdnorm+0x2c0>
8000bf7c:	00048513          	mv	a0,s1
8000bf80:	cd0ff0ef          	jal	ra,8000b450 <eshup1>
8000bf84:	0044d783          	lhu	a5,4(s1)
8000bf88:	00078863          	beqz	a5,8000bf98 <emdnorm+0x2d4>
8000bf8c:	00048513          	mv	a0,s1
8000bf90:	c70ff0ef          	jal	ra,8000b400 <eshdn1>
8000bf94:	00190913          	addi	s2,s2,1
8000bf98:	000087b7          	lui	a5,0x8
8000bf9c:	00049c23          	sh	zero,24(s1)
8000bfa0:	ffe78793          	addi	a5,a5,-2 # 7ffe <_HEAP_SIZE+0x6ffe>
8000bfa4:	0327d463          	ble	s2,a5,8000bfcc <emdnorm+0x308>
8000bfa8:	ffff87b7          	lui	a5,0xffff8
8000bfac:	fff7c793          	not	a5,a5
8000bfb0:	00f49123          	sh	a5,2(s1)
8000bfb4:	00448793          	addi	a5,s1,4
8000bfb8:	01848493          	addi	s1,s1,24
8000bfbc:	00079023          	sh	zero,0(a5) # ffff8000 <__stack+0x7ffbb534>
8000bfc0:	00278793          	addi	a5,a5,2
8000bfc4:	fef49ce3          	bne	s1,a5,8000bfbc <emdnorm+0x2f8>
8000bfc8:	d65ff06f          	j	8000bd2c <emdnorm+0x68>
8000bfcc:	00095663          	bgez	s2,8000bfd8 <emdnorm+0x314>
8000bfd0:	00049123          	sh	zero,2(s1)
8000bfd4:	d59ff06f          	j	8000bd2c <emdnorm+0x68>
8000bfd8:	01249123          	sh	s2,2(s1)
8000bfdc:	d51ff06f          	j	8000bd2c <emdnorm+0x68>
8000bfe0:	d80a98e3          	bnez	s5,8000bd70 <emdnorm+0xac>
8000bfe4:	00049c23          	sh	zero,24(s1)
8000bfe8:	fc1ff06f          	j	8000bfa8 <emdnorm+0x2e4>

8000bfec <eiremain>:
8000bfec:	fe010113          	addi	sp,sp,-32
8000bff0:	01412423          	sw	s4,8(sp)
8000bff4:	00255a03          	lhu	s4,2(a0)
8000bff8:	00812c23          	sw	s0,24(sp)
8000bffc:	00058413          	mv	s0,a1
8000c000:	00112e23          	sw	ra,28(sp)
8000c004:	00912a23          	sw	s1,20(sp)
8000c008:	01212823          	sw	s2,16(sp)
8000c00c:	01512223          	sw	s5,4(sp)
8000c010:	01612023          	sw	s6,0(sp)
8000c014:	00060913          	mv	s2,a2
8000c018:	03460b13          	addi	s6,a2,52
8000c01c:	01312623          	sw	s3,12(sp)
8000c020:	00050a93          	mv	s5,a0
8000c024:	a29ff0ef          	jal	ra,8000ba4c <enormlz>
8000c028:	00245483          	lhu	s1,2(s0)
8000c02c:	40aa0a33          	sub	s4,s4,a0
8000c030:	00040513          	mv	a0,s0
8000c034:	a19ff0ef          	jal	ra,8000ba4c <enormlz>
8000c038:	40a484b3          	sub	s1,s1,a0
8000c03c:	000b0513          	mv	a0,s6
8000c040:	b4cff0ef          	jal	ra,8000b38c <ecleaz>
8000c044:	0544d263          	ble	s4,s1,8000c088 <eiremain+0x9c>
8000c048:	00040513          	mv	a0,s0
8000c04c:	01812403          	lw	s0,24(sp)
8000c050:	01c12083          	lw	ra,28(sp)
8000c054:	00c12983          	lw	s3,12(sp)
8000c058:	00812a03          	lw	s4,8(sp)
8000c05c:	00412a83          	lw	s5,4(sp)
8000c060:	00012b03          	lw	s6,0(sp)
8000c064:	00090793          	mv	a5,s2
8000c068:	00048693          	mv	a3,s1
8000c06c:	01012903          	lw	s2,16(sp)
8000c070:	01412483          	lw	s1,20(sp)
8000c074:	00000713          	li	a4,0
8000c078:	00000613          	li	a2,0
8000c07c:	00000593          	li	a1,0
8000c080:	02010113          	addi	sp,sp,32
8000c084:	c41ff06f          	j	8000bcc4 <emdnorm>
8000c088:	00040593          	mv	a1,s0
8000c08c:	000a8513          	mv	a0,s5
8000c090:	b34ff0ef          	jal	ra,8000b3c4 <ecmpm>
8000c094:	00000993          	li	s3,0
8000c098:	00a04a63          	bgtz	a0,8000c0ac <eiremain+0xc0>
8000c09c:	00040593          	mv	a1,s0
8000c0a0:	000a8513          	mv	a0,s5
8000c0a4:	cdcff0ef          	jal	ra,8000b580 <esubm>
8000c0a8:	00100993          	li	s3,1
8000c0ac:	000b0513          	mv	a0,s6
8000c0b0:	ba0ff0ef          	jal	ra,8000b450 <eshup1>
8000c0b4:	04c95783          	lhu	a5,76(s2)
8000c0b8:	00040513          	mv	a0,s0
8000c0bc:	fff48493          	addi	s1,s1,-1
8000c0c0:	00f9e9b3          	or	s3,s3,a5
8000c0c4:	05391623          	sh	s3,76(s2)
8000c0c8:	b88ff0ef          	jal	ra,8000b450 <eshup1>
8000c0cc:	f79ff06f          	j	8000c044 <eiremain+0x58>

8000c0d0 <emul>:
8000c0d0:	f7010113          	addi	sp,sp,-144
8000c0d4:	08812423          	sw	s0,136(sp)
8000c0d8:	08912223          	sw	s1,132(sp)
8000c0dc:	09212023          	sw	s2,128(sp)
8000c0e0:	07312e23          	sw	s3,124(sp)
8000c0e4:	08112623          	sw	ra,140(sp)
8000c0e8:	07412c23          	sw	s4,120(sp)
8000c0ec:	07512a23          	sw	s5,116(sp)
8000c0f0:	07612823          	sw	s6,112(sp)
8000c0f4:	07712623          	sw	s7,108(sp)
8000c0f8:	07812423          	sw	s8,104(sp)
8000c0fc:	07912223          	sw	s9,100(sp)
8000c100:	00050493          	mv	s1,a0
8000c104:	00058413          	mv	s0,a1
8000c108:	00060913          	mv	s2,a2
8000c10c:	00068993          	mv	s3,a3
8000c110:	d44ff0ef          	jal	ra,8000b654 <eisnan>
8000c114:	04050263          	beqz	a0,8000c158 <emul+0x88>
8000c118:	00090593          	mv	a1,s2
8000c11c:	00048513          	mv	a0,s1
8000c120:	a50ff0ef          	jal	ra,8000b370 <emov>
8000c124:	08c12083          	lw	ra,140(sp)
8000c128:	08812403          	lw	s0,136(sp)
8000c12c:	08412483          	lw	s1,132(sp)
8000c130:	08012903          	lw	s2,128(sp)
8000c134:	07c12983          	lw	s3,124(sp)
8000c138:	07812a03          	lw	s4,120(sp)
8000c13c:	07412a83          	lw	s5,116(sp)
8000c140:	07012b03          	lw	s6,112(sp)
8000c144:	06c12b83          	lw	s7,108(sp)
8000c148:	06812c03          	lw	s8,104(sp)
8000c14c:	06412c83          	lw	s9,100(sp)
8000c150:	09010113          	addi	sp,sp,144
8000c154:	00008067          	ret
8000c158:	00040513          	mv	a0,s0
8000c15c:	cf8ff0ef          	jal	ra,8000b654 <eisnan>
8000c160:	00050863          	beqz	a0,8000c170 <emul+0xa0>
8000c164:	00090593          	mv	a1,s2
8000c168:	00040513          	mv	a0,s0
8000c16c:	fb5ff06f          	j	8000c120 <emul+0x50>
8000c170:	00048513          	mv	a0,s1
8000c174:	f24ff0ef          	jal	ra,8000b898 <eisinf>
8000c178:	06051463          	bnez	a0,8000c1e0 <emul+0x110>
8000c17c:	00040513          	mv	a0,s0
8000c180:	f18ff0ef          	jal	ra,8000b898 <eisinf>
8000c184:	00050c63          	beqz	a0,8000c19c <emul+0xcc>
8000c188:	800205b7          	lui	a1,0x80020
8000c18c:	29458593          	addi	a1,a1,660 # 80020294 <__stack+0xfffe37c8>
8000c190:	00048513          	mv	a0,s1
8000c194:	dfcff0ef          	jal	ra,8000b790 <ecmp>
8000c198:	04050e63          	beqz	a0,8000c1f4 <emul+0x124>
8000c19c:	00048513          	mv	a0,s1
8000c1a0:	ef8ff0ef          	jal	ra,8000b898 <eisinf>
8000c1a4:	00051863          	bnez	a0,8000c1b4 <emul+0xe4>
8000c1a8:	00040513          	mv	a0,s0
8000c1ac:	eecff0ef          	jal	ra,8000b898 <eisinf>
8000c1b0:	04050c63          	beqz	a0,8000c208 <emul+0x138>
8000c1b4:	00048513          	mv	a0,s1
8000c1b8:	cd0ff0ef          	jal	ra,8000b688 <eisneg>
8000c1bc:	00050493          	mv	s1,a0
8000c1c0:	00040513          	mv	a0,s0
8000c1c4:	cc4ff0ef          	jal	ra,8000b688 <eisneg>
8000c1c8:	02a48c63          	beq	s1,a0,8000c200 <emul+0x130>
8000c1cc:	ffff87b7          	lui	a5,0xffff8
8000c1d0:	00f91923          	sh	a5,18(s2)
8000c1d4:	00090513          	mv	a0,s2
8000c1d8:	ef4ff0ef          	jal	ra,8000b8cc <einfin.isra.2>
8000c1dc:	f49ff06f          	j	8000c124 <emul+0x54>
8000c1e0:	800205b7          	lui	a1,0x80020
8000c1e4:	29458593          	addi	a1,a1,660 # 80020294 <__stack+0xfffe37c8>
8000c1e8:	00040513          	mv	a0,s0
8000c1ec:	da4ff0ef          	jal	ra,8000b790 <ecmp>
8000c1f0:	f80516e3          	bnez	a0,8000c17c <emul+0xac>
8000c1f4:	00090513          	mv	a0,s2
8000c1f8:	92dff0ef          	jal	ra,8000bb24 <enan.constprop.12>
8000c1fc:	f29ff06f          	j	8000c124 <emul+0x54>
8000c200:	00091923          	sh	zero,18(s2)
8000c204:	fd1ff06f          	j	8000c1d4 <emul+0x104>
8000c208:	00048513          	mv	a0,s1
8000c20c:	00c10593          	addi	a1,sp,12
8000c210:	cb0ff0ef          	jal	ra,8000b6c0 <emovi>
8000c214:	00040513          	mv	a0,s0
8000c218:	02810593          	addi	a1,sp,40
8000c21c:	ca4ff0ef          	jal	ra,8000b6c0 <emovi>
8000c220:	00e15403          	lhu	s0,14(sp)
8000c224:	02a15483          	lhu	s1,42(sp)
8000c228:	02041463          	bnez	s0,8000c250 <emul+0x180>
8000c22c:	00000793          	li	a5,0
8000c230:	01600713          	li	a4,22
8000c234:	00c10693          	addi	a3,sp,12
8000c238:	00f686b3          	add	a3,a3,a5
8000c23c:	0026d683          	lhu	a3,2(a3)
8000c240:	10068a63          	beqz	a3,8000c354 <emul+0x284>
8000c244:	00c10513          	addi	a0,sp,12
8000c248:	805ff0ef          	jal	ra,8000ba4c <enormlz>
8000c24c:	40a00433          	neg	s0,a0
8000c250:	02a15783          	lhu	a5,42(sp)
8000c254:	00048c13          	mv	s8,s1
8000c258:	02079263          	bnez	a5,8000c27c <emul+0x1ac>
8000c25c:	01600713          	li	a4,22
8000c260:	02810693          	addi	a3,sp,40
8000c264:	00f686b3          	add	a3,a3,a5
8000c268:	0026d683          	lhu	a3,2(a3)
8000c26c:	0e068e63          	beqz	a3,8000c368 <emul+0x298>
8000c270:	02810513          	addi	a0,sp,40
8000c274:	fd8ff0ef          	jal	ra,8000ba4c <enormlz>
8000c278:	40a48c33          	sub	s8,s1,a0
8000c27c:	02815783          	lhu	a5,40(sp)
8000c280:	03498b93          	addi	s7,s3,52
8000c284:	03898493          	addi	s1,s3,56
8000c288:	02f99a23          	sh	a5,52(s3)
8000c28c:	02a15783          	lhu	a5,42(sp)
8000c290:	000b8a13          	mv	s4,s7
8000c294:	02f99b23          	sh	a5,54(s3)
8000c298:	04e98793          	addi	a5,s3,78
8000c29c:	00049023          	sh	zero,0(s1)
8000c2a0:	00248493          	addi	s1,s1,2
8000c2a4:	fe979ce3          	bne	a5,s1,8000c29c <emul+0x1cc>
8000c2a8:	00000a93          	li	s5,0
8000c2ac:	00000b13          	li	s6,0
8000c2b0:	fec00c93          	li	s9,-20
8000c2b4:	00c10793          	addi	a5,sp,12
8000c2b8:	015787b3          	add	a5,a5,s5
8000c2bc:	0187d503          	lhu	a0,24(a5) # ffff8018 <__stack+0x7ffbb54c>
8000c2c0:	00050e63          	beqz	a0,8000c2dc <emul+0x20c>
8000c2c4:	02810593          	addi	a1,sp,40
8000c2c8:	04410613          	addi	a2,sp,68
8000c2cc:	aecff0ef          	jal	ra,8000b5b8 <m16m>
8000c2d0:	000b8593          	mv	a1,s7
8000c2d4:	04410513          	addi	a0,sp,68
8000c2d8:	a70ff0ef          	jal	ra,8000b548 <eaddm>
8000c2dc:	04c9d783          	lhu	a5,76(s3)
8000c2e0:	000b8513          	mv	a0,s7
8000c2e4:	ffea8a93          	addi	s5,s5,-2
8000c2e8:	00fb6b33          	or	s6,s6,a5
8000c2ec:	a34ff0ef          	jal	ra,8000b520 <eshdn6>
8000c2f0:	fd9a92e3          	bne	s5,s9,8000c2b4 <emul+0x1e4>
8000c2f4:	02810793          	addi	a5,sp,40
8000c2f8:	000a5703          	lhu	a4,0(s4)
8000c2fc:	002a0a13          	addi	s4,s4,2
8000c300:	00278793          	addi	a5,a5,2
8000c304:	fee79f23          	sh	a4,-2(a5)
8000c308:	fe9a18e3          	bne	s4,s1,8000c2f8 <emul+0x228>
8000c30c:	ffffc6b7          	lui	a3,0xffffc
8000c310:	01840433          	add	s0,s0,s8
8000c314:	00268693          	addi	a3,a3,2 # ffffc002 <__stack+0x7ffbf536>
8000c318:	00098793          	mv	a5,s3
8000c31c:	04000713          	li	a4,64
8000c320:	00d406b3          	add	a3,s0,a3
8000c324:	00000613          	li	a2,0
8000c328:	000b0593          	mv	a1,s6
8000c32c:	02810513          	addi	a0,sp,40
8000c330:	995ff0ef          	jal	ra,8000bcc4 <emdnorm>
8000c334:	00c15703          	lhu	a4,12(sp)
8000c338:	02815783          	lhu	a5,40(sp)
8000c33c:	02f71c63          	bne	a4,a5,8000c374 <emul+0x2a4>
8000c340:	02011423          	sh	zero,40(sp)
8000c344:	00090593          	mv	a1,s2
8000c348:	02810513          	addi	a0,sp,40
8000c34c:	801ff0ef          	jal	ra,8000bb4c <emovo.isra.6>
8000c350:	dd5ff06f          	j	8000c124 <emul+0x54>
8000c354:	00278793          	addi	a5,a5,2
8000c358:	ece79ee3          	bne	a5,a4,8000c234 <emul+0x164>
8000c35c:	00090513          	mv	a0,s2
8000c360:	ffdfe0ef          	jal	ra,8000b35c <eclear>
8000c364:	dc1ff06f          	j	8000c124 <emul+0x54>
8000c368:	00278793          	addi	a5,a5,2
8000c36c:	eee79ae3          	bne	a5,a4,8000c260 <emul+0x190>
8000c370:	fedff06f          	j	8000c35c <emul+0x28c>
8000c374:	fff00793          	li	a5,-1
8000c378:	02f11423          	sh	a5,40(sp)
8000c37c:	fc9ff06f          	j	8000c344 <emul+0x274>

8000c380 <ediv>:
8000c380:	f7010113          	addi	sp,sp,-144
8000c384:	08812423          	sw	s0,136(sp)
8000c388:	08912223          	sw	s1,132(sp)
8000c38c:	09212023          	sw	s2,128(sp)
8000c390:	07512a23          	sw	s5,116(sp)
8000c394:	08112623          	sw	ra,140(sp)
8000c398:	07312e23          	sw	s3,124(sp)
8000c39c:	07412c23          	sw	s4,120(sp)
8000c3a0:	07612823          	sw	s6,112(sp)
8000c3a4:	07712623          	sw	s7,108(sp)
8000c3a8:	07812423          	sw	s8,104(sp)
8000c3ac:	07912223          	sw	s9,100(sp)
8000c3b0:	07a12023          	sw	s10,96(sp)
8000c3b4:	00050493          	mv	s1,a0
8000c3b8:	00058413          	mv	s0,a1
8000c3bc:	00060913          	mv	s2,a2
8000c3c0:	00068a93          	mv	s5,a3
8000c3c4:	a90ff0ef          	jal	ra,8000b654 <eisnan>
8000c3c8:	04050463          	beqz	a0,8000c410 <ediv+0x90>
8000c3cc:	00090593          	mv	a1,s2
8000c3d0:	00048513          	mv	a0,s1
8000c3d4:	f9dfe0ef          	jal	ra,8000b370 <emov>
8000c3d8:	08c12083          	lw	ra,140(sp)
8000c3dc:	08812403          	lw	s0,136(sp)
8000c3e0:	08412483          	lw	s1,132(sp)
8000c3e4:	08012903          	lw	s2,128(sp)
8000c3e8:	07c12983          	lw	s3,124(sp)
8000c3ec:	07812a03          	lw	s4,120(sp)
8000c3f0:	07412a83          	lw	s5,116(sp)
8000c3f4:	07012b03          	lw	s6,112(sp)
8000c3f8:	06c12b83          	lw	s7,108(sp)
8000c3fc:	06812c03          	lw	s8,104(sp)
8000c400:	06412c83          	lw	s9,100(sp)
8000c404:	06012d03          	lw	s10,96(sp)
8000c408:	09010113          	addi	sp,sp,144
8000c40c:	00008067          	ret
8000c410:	00040513          	mv	a0,s0
8000c414:	a40ff0ef          	jal	ra,8000b654 <eisnan>
8000c418:	00050863          	beqz	a0,8000c428 <ediv+0xa8>
8000c41c:	00090593          	mv	a1,s2
8000c420:	00040513          	mv	a0,s0
8000c424:	fb1ff06f          	j	8000c3d4 <ediv+0x54>
8000c428:	800209b7          	lui	s3,0x80020
8000c42c:	29498593          	addi	a1,s3,660 # 80020294 <__stack+0xfffe37c8>
8000c430:	00048513          	mv	a0,s1
8000c434:	b5cff0ef          	jal	ra,8000b790 <ecmp>
8000c438:	1e050663          	beqz	a0,8000c624 <ediv+0x2a4>
8000c43c:	00048513          	mv	a0,s1
8000c440:	c58ff0ef          	jal	ra,8000b898 <eisinf>
8000c444:	00050993          	mv	s3,a0
8000c448:	00040513          	mv	a0,s0
8000c44c:	c4cff0ef          	jal	ra,8000b898 <eisinf>
8000c450:	1e099863          	bnez	s3,8000c640 <ediv+0x2c0>
8000c454:	1e051e63          	bnez	a0,8000c650 <ediv+0x2d0>
8000c458:	00048513          	mv	a0,s1
8000c45c:	00c10593          	addi	a1,sp,12
8000c460:	a60ff0ef          	jal	ra,8000b6c0 <emovi>
8000c464:	00040513          	mv	a0,s0
8000c468:	02810593          	addi	a1,sp,40
8000c46c:	a54ff0ef          	jal	ra,8000b6c0 <emovi>
8000c470:	02a15483          	lhu	s1,42(sp)
8000c474:	00e15403          	lhu	s0,14(sp)
8000c478:	02049463          	bnez	s1,8000c4a0 <ediv+0x120>
8000c47c:	00000793          	li	a5,0
8000c480:	01600713          	li	a4,22
8000c484:	02810693          	addi	a3,sp,40
8000c488:	00f686b3          	add	a3,a3,a5
8000c48c:	0026d683          	lhu	a3,2(a3)
8000c490:	1e068663          	beqz	a3,8000c67c <ediv+0x2fc>
8000c494:	02810513          	addi	a0,sp,40
8000c498:	db4ff0ef          	jal	ra,8000ba4c <enormlz>
8000c49c:	40a004b3          	neg	s1,a0
8000c4a0:	00e15783          	lhu	a5,14(sp)
8000c4a4:	00040b93          	mv	s7,s0
8000c4a8:	02079263          	bnez	a5,8000c4cc <ediv+0x14c>
8000c4ac:	01600713          	li	a4,22
8000c4b0:	00c10693          	addi	a3,sp,12
8000c4b4:	00f686b3          	add	a3,a3,a5
8000c4b8:	0026d683          	lhu	a3,2(a3)
8000c4bc:	1c068663          	beqz	a3,8000c688 <ediv+0x308>
8000c4c0:	00c10513          	addi	a0,sp,12
8000c4c4:	d88ff0ef          	jal	ra,8000ba4c <enormlz>
8000c4c8:	40a40bb3          	sub	s7,s0,a0
8000c4cc:	02815783          	lhu	a5,40(sp)
8000c4d0:	02a15703          	lhu	a4,42(sp)
8000c4d4:	034a8993          	addi	s3,s5,52
8000c4d8:	02fa9a23          	sh	a5,52(s5)
8000c4dc:	038a8793          	addi	a5,s5,56
8000c4e0:	02ea9b23          	sh	a4,54(s5)
8000c4e4:	00078a13          	mv	s4,a5
8000c4e8:	04ea8713          	addi	a4,s5,78
8000c4ec:	00278793          	addi	a5,a5,2
8000c4f0:	fe079f23          	sh	zero,-2(a5)
8000c4f4:	fee79ce3          	bne	a5,a4,8000c4ec <ediv+0x16c>
8000c4f8:	02810513          	addi	a0,sp,40
8000c4fc:	f05fe0ef          	jal	ra,8000b400 <eshdn1>
8000c500:	01215c03          	lhu	s8,18(sp)
8000c504:	00010b37          	lui	s6,0x10
8000c508:	fffb0b13          	addi	s6,s6,-1 # ffff <_HEAP_SIZE+0xefff>
8000c50c:	036c0d33          	mul	s10,s8,s6
8000c510:	01a98c93          	addi	s9,s3,26
8000c514:	02c15783          	lhu	a5,44(sp)
8000c518:	02e15403          	lhu	s0,46(sp)
8000c51c:	01079793          	slli	a5,a5,0x10
8000c520:	008787b3          	add	a5,a5,s0
8000c524:	000b0413          	mv	s0,s6
8000c528:	00fd6863          	bltu	s10,a5,8000c538 <ediv+0x1b8>
8000c52c:	0387d433          	divu	s0,a5,s8
8000c530:	01041413          	slli	s0,s0,0x10
8000c534:	01045413          	srli	s0,s0,0x10
8000c538:	00c10593          	addi	a1,sp,12
8000c53c:	00040513          	mv	a0,s0
8000c540:	04410613          	addi	a2,sp,68
8000c544:	874ff0ef          	jal	ra,8000b5b8 <m16m>
8000c548:	02810593          	addi	a1,sp,40
8000c54c:	04410513          	addi	a0,sp,68
8000c550:	e75fe0ef          	jal	ra,8000b3c4 <ecmpm>
8000c554:	02a05663          	blez	a0,8000c580 <ediv+0x200>
8000c558:	04410593          	addi	a1,sp,68
8000c55c:	00c10513          	addi	a0,sp,12
8000c560:	820ff0ef          	jal	ra,8000b580 <esubm>
8000c564:	02810593          	addi	a1,sp,40
8000c568:	04410513          	addi	a0,sp,68
8000c56c:	e59fe0ef          	jal	ra,8000b3c4 <ecmpm>
8000c570:	12a04a63          	bgtz	a0,8000c6a4 <ediv+0x324>
8000c574:	fff40413          	addi	s0,s0,-1
8000c578:	01041413          	slli	s0,s0,0x10
8000c57c:	01045413          	srli	s0,s0,0x10
8000c580:	02810593          	addi	a1,sp,40
8000c584:	04410513          	addi	a0,sp,68
8000c588:	ff9fe0ef          	jal	ra,8000b580 <esubm>
8000c58c:	02810513          	addi	a0,sp,40
8000c590:	008a1023          	sh	s0,0(s4)
8000c594:	002a0a13          	addi	s4,s4,2
8000c598:	f69fe0ef          	jal	ra,8000b500 <eshup6>
8000c59c:	f79a1ce3          	bne	s4,s9,8000c514 <ediv+0x194>
8000c5a0:	00000793          	li	a5,0
8000c5a4:	00000593          	li	a1,0
8000c5a8:	01600713          	li	a4,22
8000c5ac:	02810693          	addi	a3,sp,40
8000c5b0:	00f686b3          	add	a3,a3,a5
8000c5b4:	0046d683          	lhu	a3,4(a3)
8000c5b8:	00278793          	addi	a5,a5,2
8000c5bc:	00d5e5b3          	or	a1,a1,a3
8000c5c0:	fee796e3          	bne	a5,a4,8000c5ac <ediv+0x22c>
8000c5c4:	00b035b3          	snez	a1,a1
8000c5c8:	02810793          	addi	a5,sp,40
8000c5cc:	0009d703          	lhu	a4,0(s3)
8000c5d0:	00298993          	addi	s3,s3,2
8000c5d4:	00278793          	addi	a5,a5,2
8000c5d8:	fee79f23          	sh	a4,-2(a5)
8000c5dc:	ff3a18e3          	bne	s4,s3,8000c5cc <ediv+0x24c>
8000c5e0:	000046b7          	lui	a3,0x4
8000c5e4:	417484b3          	sub	s1,s1,s7
8000c5e8:	fff68693          	addi	a3,a3,-1 # 3fff <_HEAP_SIZE+0x2fff>
8000c5ec:	000a8793          	mv	a5,s5
8000c5f0:	04000713          	li	a4,64
8000c5f4:	00d486b3          	add	a3,s1,a3
8000c5f8:	00000613          	li	a2,0
8000c5fc:	02810513          	addi	a0,sp,40
8000c600:	ec4ff0ef          	jal	ra,8000bcc4 <emdnorm>
8000c604:	00c15703          	lhu	a4,12(sp)
8000c608:	02815783          	lhu	a5,40(sp)
8000c60c:	0af71a63          	bne	a4,a5,8000c6c0 <ediv+0x340>
8000c610:	02011423          	sh	zero,40(sp)
8000c614:	00090593          	mv	a1,s2
8000c618:	02810513          	addi	a0,sp,40
8000c61c:	d30ff0ef          	jal	ra,8000bb4c <emovo.isra.6>
8000c620:	db9ff06f          	j	8000c3d8 <ediv+0x58>
8000c624:	29498593          	addi	a1,s3,660
8000c628:	00040513          	mv	a0,s0
8000c62c:	964ff0ef          	jal	ra,8000b790 <ecmp>
8000c630:	e00516e3          	bnez	a0,8000c43c <ediv+0xbc>
8000c634:	00090513          	mv	a0,s2
8000c638:	cecff0ef          	jal	ra,8000bb24 <enan.constprop.12>
8000c63c:	d9dff06f          	j	8000c3d8 <ediv+0x58>
8000c640:	fe051ae3          	bnez	a0,8000c634 <ediv+0x2b4>
8000c644:	00090513          	mv	a0,s2
8000c648:	d15fe0ef          	jal	ra,8000b35c <eclear>
8000c64c:	d8dff06f          	j	8000c3d8 <ediv+0x58>
8000c650:	00048513          	mv	a0,s1
8000c654:	834ff0ef          	jal	ra,8000b688 <eisneg>
8000c658:	00050493          	mv	s1,a0
8000c65c:	00040513          	mv	a0,s0
8000c660:	828ff0ef          	jal	ra,8000b688 <eisneg>
8000c664:	02a48c63          	beq	s1,a0,8000c69c <ediv+0x31c>
8000c668:	ffff87b7          	lui	a5,0xffff8
8000c66c:	00f91923          	sh	a5,18(s2)
8000c670:	00090513          	mv	a0,s2
8000c674:	a58ff0ef          	jal	ra,8000b8cc <einfin.isra.2>
8000c678:	d61ff06f          	j	8000c3d8 <ediv+0x58>
8000c67c:	00278793          	addi	a5,a5,2 # ffff8002 <__stack+0x7ffbb536>
8000c680:	e0e792e3          	bne	a5,a4,8000c484 <ediv+0x104>
8000c684:	fc1ff06f          	j	8000c644 <ediv+0x2c4>
8000c688:	00278793          	addi	a5,a5,2
8000c68c:	e2e792e3          	bne	a5,a4,8000c4b0 <ediv+0x130>
8000c690:	00c15703          	lhu	a4,12(sp)
8000c694:	02815783          	lhu	a5,40(sp)
8000c698:	fcf718e3          	bne	a4,a5,8000c668 <ediv+0x2e8>
8000c69c:	00091923          	sh	zero,18(s2)
8000c6a0:	fd1ff06f          	j	8000c670 <ediv+0x2f0>
8000c6a4:	ffe40413          	addi	s0,s0,-2
8000c6a8:	01041413          	slli	s0,s0,0x10
8000c6ac:	04410593          	addi	a1,sp,68
8000c6b0:	00c10513          	addi	a0,sp,12
8000c6b4:	01045413          	srli	s0,s0,0x10
8000c6b8:	ec9fe0ef          	jal	ra,8000b580 <esubm>
8000c6bc:	ec5ff06f          	j	8000c580 <ediv+0x200>
8000c6c0:	fff00793          	li	a5,-1
8000c6c4:	02f11423          	sh	a5,40(sp)
8000c6c8:	f4dff06f          	j	8000c614 <ediv+0x294>

8000c6cc <_ldtoa_r>:
8000c6cc:	0005ae03          	lw	t3,0(a1)
8000c6d0:	0045a303          	lw	t1,4(a1)
8000c6d4:	0085a883          	lw	a7,8(a1)
8000c6d8:	00c5a583          	lw	a1,12(a1)
8000c6dc:	e2010113          	addi	sp,sp,-480
8000c6e0:	1c812c23          	sw	s0,472(sp)
8000c6e4:	02b12623          	sw	a1,44(sp)
8000c6e8:	00078413          	mv	s0,a5
8000c6ec:	04052583          	lw	a1,64(a0)
8000c6f0:	fff00793          	li	a5,-1
8000c6f4:	14f12823          	sw	a5,336(sp)
8000c6f8:	09000793          	li	a5,144
8000c6fc:	1d412423          	sw	s4,456(sp)
8000c700:	1d512223          	sw	s5,452(sp)
8000c704:	1b712e23          	sw	s7,444(sp)
8000c708:	1b912a23          	sw	s9,436(sp)
8000c70c:	1c112e23          	sw	ra,476(sp)
8000c710:	1c912a23          	sw	s1,468(sp)
8000c714:	1d212823          	sw	s2,464(sp)
8000c718:	1d312623          	sw	s3,460(sp)
8000c71c:	1d612023          	sw	s6,448(sp)
8000c720:	1b812c23          	sw	s8,440(sp)
8000c724:	1ba12823          	sw	s10,432(sp)
8000c728:	1bb12623          	sw	s11,428(sp)
8000c72c:	01012623          	sw	a6,12(sp)
8000c730:	03c12023          	sw	t3,32(sp)
8000c734:	02612223          	sw	t1,36(sp)
8000c738:	03112423          	sw	a7,40(sp)
8000c73c:	14f12a23          	sw	a5,340(sp)
8000c740:	00050a13          	mv	s4,a0
8000c744:	00060b93          	mv	s7,a2
8000c748:	00068a93          	mv	s5,a3
8000c74c:	00070c93          	mv	s9,a4
8000c750:	02058063          	beqz	a1,8000c770 <_ldtoa_r+0xa4>
8000c754:	04452783          	lw	a5,68(a0)
8000c758:	00100713          	li	a4,1
8000c75c:	00f71733          	sll	a4,a4,a5
8000c760:	00f5a223          	sw	a5,4(a1)
8000c764:	00e5a423          	sw	a4,8(a1)
8000c768:	660010ef          	jal	ra,8000ddc8 <_Bfree>
8000c76c:	040a2023          	sw	zero,64(s4)
8000c770:	02010513          	addi	a0,sp,32
8000c774:	05010593          	addi	a1,sp,80
8000c778:	c44ff0ef          	jal	ra,8000bbbc <e113toe.isra.8>
8000c77c:	05010513          	addi	a0,sp,80
8000c780:	f09fe0ef          	jal	ra,8000b688 <eisneg>
8000c784:	0e050063          	beqz	a0,8000c864 <_ldtoa_r+0x198>
8000c788:	00100793          	li	a5,1
8000c78c:	00f42023          	sw	a5,0(s0)
8000c790:	00300793          	li	a5,3
8000c794:	0cfb8c63          	beq	s7,a5,8000c86c <_ldtoa_r+0x1a0>
8000c798:	01400913          	li	s2,20
8000c79c:	000b8a63          	beqz	s7,8000c7b0 <_ldtoa_r+0xe4>
8000c7a0:	fffa8913          	addi	s2,s5,-1
8000c7a4:	02a00793          	li	a5,42
8000c7a8:	0127d463          	ble	s2,a5,8000c7b0 <_ldtoa_r+0xe4>
8000c7ac:	02a00913          	li	s2,42
8000c7b0:	15412783          	lw	a5,340(sp)
8000c7b4:	05010513          	addi	a0,sp,80
8000c7b8:	00f12823          	sw	a5,16(sp)
8000c7bc:	e99fe0ef          	jal	ra,8000b654 <eisnan>
8000c7c0:	00050413          	mv	s0,a0
8000c7c4:	0a050863          	beqz	a0,8000c874 <_ldtoa_r+0x1a8>
8000c7c8:	800215b7          	lui	a1,0x80021
8000c7cc:	da858593          	addi	a1,a1,-600 # 80020da8 <__stack+0xfffe42dc>
8000c7d0:	11410513          	addi	a0,sp,276
8000c7d4:	00002437          	lui	s0,0x2
8000c7d8:	538020ef          	jal	ra,8000ed10 <sprintf>
8000c7dc:	70f40413          	addi	s0,s0,1807 # 270f <_HEAP_SIZE+0x170f>
8000c7e0:	01012783          	lw	a5,16(sp)
8000c7e4:	05010513          	addi	a0,sp,80
8000c7e8:	16812023          	sw	s0,352(sp)
8000c7ec:	14f12a23          	sw	a5,340(sp)
8000c7f0:	8a8ff0ef          	jal	ra,8000b898 <eisinf>
8000c7f4:	11410993          	addi	s3,sp,276
8000c7f8:	00051863          	bnez	a0,8000c808 <_ldtoa_r+0x13c>
8000c7fc:	05010513          	addi	a0,sp,80
8000c800:	e55fe0ef          	jal	ra,8000b654 <eisnan>
8000c804:	180506e3          	beqz	a0,8000d190 <_ldtoa_r+0xac4>
8000c808:	000027b7          	lui	a5,0x2
8000c80c:	70f78793          	addi	a5,a5,1807 # 270f <_HEAP_SIZE+0x170f>
8000c810:	00fca023          	sw	a5,0(s9)
8000c814:	00098793          	mv	a5,s3
8000c818:	02000613          	li	a2,32
8000c81c:	02d00693          	li	a3,45
8000c820:	0007c703          	lbu	a4,0(a5)
8000c824:	1cc704e3          	beq	a4,a2,8000d1ec <_ldtoa_r+0xb20>
8000c828:	1cd702e3          	beq	a4,a3,8000d1ec <_ldtoa_r+0xb20>
8000c82c:	00098413          	mv	s0,s3
8000c830:	00178793          	addi	a5,a5,1
8000c834:	fff7c703          	lbu	a4,-1(a5)
8000c838:	00140693          	addi	a3,s0,1
8000c83c:	fee68fa3          	sb	a4,-1(a3)
8000c840:	1a071ae3          	bnez	a4,8000d1f4 <_ldtoa_r+0xb28>
8000c844:	00200713          	li	a4,2
8000c848:	00100793          	li	a5,1
8000c84c:	00eb8863          	beq	s7,a4,8000c85c <_ldtoa_r+0x190>
8000c850:	16012783          	lw	a5,352(sp)
8000c854:	0127d463          	ble	s2,a5,8000c85c <_ldtoa_r+0x190>
8000c858:	00090793          	mv	a5,s2
8000c85c:	03000693          	li	a3,48
8000c860:	1a50006f          	j	8000d204 <_ldtoa_r+0xb38>
8000c864:	00042023          	sw	zero,0(s0)
8000c868:	f29ff06f          	j	8000c790 <_ldtoa_r+0xc4>
8000c86c:	000a8913          	mv	s2,s5
8000c870:	f35ff06f          	j	8000c7a4 <_ldtoa_r+0xd8>
8000c874:	09000793          	li	a5,144
8000c878:	06c10593          	addi	a1,sp,108
8000c87c:	05010513          	addi	a0,sp,80
8000c880:	14f12a23          	sw	a5,340(sp)
8000c884:	aedfe0ef          	jal	ra,8000b370 <emov>
8000c888:	07e15783          	lhu	a5,126(sp)
8000c88c:	00012223          	sw	zero,4(sp)
8000c890:	01079713          	slli	a4,a5,0x10
8000c894:	41075713          	srai	a4,a4,0x10
8000c898:	02075063          	bgez	a4,8000c8b8 <_ldtoa_r+0x1ec>
8000c89c:	00008737          	lui	a4,0x8
8000c8a0:	fff70713          	addi	a4,a4,-1 # 7fff <_HEAP_SIZE+0x6fff>
8000c8a4:	00e7f7b3          	and	a5,a5,a4
8000c8a8:	06f11f23          	sh	a5,126(sp)
8000c8ac:	000107b7          	lui	a5,0x10
8000c8b0:	fff78793          	addi	a5,a5,-1 # ffff <_HEAP_SIZE+0xefff>
8000c8b4:	00f12223          	sw	a5,4(sp)
8000c8b8:	80020b37          	lui	s6,0x80020
8000c8bc:	294b0513          	addi	a0,s6,660 # 80020294 <__stack+0xfffe37c8>
8000c8c0:	08810593          	addi	a1,sp,136
8000c8c4:	01450513          	addi	a0,a0,20
8000c8c8:	aa9fe0ef          	jal	ra,8000b370 <emov>
8000c8cc:	07e15703          	lhu	a4,126(sp)
8000c8d0:	800204b7          	lui	s1,0x80020
8000c8d4:	294b0993          	addi	s3,s6,660
8000c8d8:	2a848493          	addi	s1,s1,680 # 800202a8 <__stack+0xfffe37dc>
8000c8dc:	1e071ce3          	bnez	a4,8000d2d4 <_ldtoa_r+0xc08>
8000c8e0:	06c10713          	addi	a4,sp,108
8000c8e4:	00000793          	li	a5,0
8000c8e8:	00900693          	li	a3,9
8000c8ec:	00075603          	lhu	a2,0(a4)
8000c8f0:	10061063          	bnez	a2,8000c9f0 <_ldtoa_r+0x324>
8000c8f4:	00178793          	addi	a5,a5,1
8000c8f8:	00270713          	addi	a4,a4,2
8000c8fc:	fed798e3          	bne	a5,a3,8000c8ec <_ldtoa_r+0x220>
8000c900:	0c010593          	addi	a1,sp,192
8000c904:	08810513          	addi	a0,sp,136
8000c908:	db9fe0ef          	jal	ra,8000b6c0 <emovi>
8000c90c:	08810593          	addi	a1,sp,136
8000c910:	0c010513          	addi	a0,sp,192
8000c914:	a8dfe0ef          	jal	ra,8000b3a0 <emovz>
8000c918:	0c010593          	addi	a1,sp,192
8000c91c:	06c10513          	addi	a0,sp,108
8000c920:	da1fe0ef          	jal	ra,8000b6c0 <emovi>
8000c924:	06c10593          	addi	a1,sp,108
8000c928:	0c010513          	addi	a0,sp,192
8000c92c:	a75fe0ef          	jal	ra,8000b3a0 <emovz>
8000c930:	15010613          	addi	a2,sp,336
8000c934:	06c10593          	addi	a1,sp,108
8000c938:	08810513          	addi	a0,sp,136
8000c93c:	eb0ff0ef          	jal	ra,8000bfec <eiremain>
8000c940:	19c15483          	lhu	s1,412(sp)
8000c944:	00049a63          	bnez	s1,8000c958 <_ldtoa_r+0x28c>
8000c948:	294b0593          	addi	a1,s6,660
8000c94c:	06c10513          	addi	a0,sp,108
8000c950:	e41fe0ef          	jal	ra,8000b790 <ecmp>
8000c954:	6a051463          	bnez	a0,8000cffc <_ldtoa_r+0x930>
8000c958:	00412783          	lw	a5,4(sp)
8000c95c:	6e078663          	beqz	a5,8000d048 <_ldtoa_r+0x97c>
8000c960:	02d00793          	li	a5,45
8000c964:	10f10a23          	sb	a5,276(sp)
8000c968:	00300793          	li	a5,3
8000c96c:	00090993          	mv	s3,s2
8000c970:	00fb9863          	bne	s7,a5,8000c980 <_ldtoa_r+0x2b4>
8000c974:	008909b3          	add	s3,s2,s0
8000c978:	02a00793          	li	a5,42
8000c97c:	1737cce3          	blt	a5,s3,8000d2f4 <_ldtoa_r+0xc28>
8000c980:	00a00793          	li	a5,10
8000c984:	6cf49663          	bne	s1,a5,8000d050 <_ldtoa_r+0x984>
8000c988:	03100793          	li	a5,49
8000c98c:	10f10aa3          	sb	a5,277(sp)
8000c990:	02e00793          	li	a5,46
8000c994:	10f10b23          	sb	a5,278(sp)
8000c998:	11710c13          	addi	s8,sp,279
8000c99c:	01305a63          	blez	s3,8000c9b0 <_ldtoa_r+0x2e4>
8000c9a0:	03000793          	li	a5,48
8000c9a4:	10f10ba3          	sb	a5,279(sp)
8000c9a8:	fff98993          	addi	s3,s3,-1
8000c9ac:	11810c13          	addi	s8,sp,280
8000c9b0:	00140413          	addi	s0,s0,1
8000c9b4:	6a09d863          	bgez	s3,8000d064 <_ldtoa_r+0x998>
8000c9b8:	800215b7          	lui	a1,0x80021
8000c9bc:	00040613          	mv	a2,s0
8000c9c0:	dcc58593          	addi	a1,a1,-564 # 80020dcc <__stack+0xfffe4300>
8000c9c4:	000c0513          	mv	a0,s8
8000c9c8:	348020ef          	jal	ra,8000ed10 <sprintf>
8000c9cc:	e15ff06f          	j	8000c7e0 <_ldtoa_r+0x114>
8000c9d0:	800215b7          	lui	a1,0x80021
8000c9d4:	dbc58593          	addi	a1,a1,-580 # 80020dbc <__stack+0xfffe42f0>
8000c9d8:	df9ff06f          	j	8000c7d0 <_ldtoa_r+0x104>
8000c9dc:	07c11783          	lh	a5,124(sp)
8000c9e0:	0007c863          	bltz	a5,8000c9f0 <_ldtoa_r+0x324>
8000c9e4:	800215b7          	lui	a1,0x80021
8000c9e8:	dc858593          	addi	a1,a1,-568 # 80020dc8 <__stack+0xfffe42fc>
8000c9ec:	de5ff06f          	j	8000c7d0 <_ldtoa_r+0x104>
8000c9f0:	06c10593          	addi	a1,sp,108
8000c9f4:	00048513          	mv	a0,s1
8000c9f8:	d99fe0ef          	jal	ra,8000b790 <ecmp>
8000c9fc:	f00502e3          	beqz	a0,8000c900 <_ldtoa_r+0x234>
8000ca00:	46055663          	bgez	a0,8000ce6c <_ldtoa_r+0x7a0>
8000ca04:	0a410593          	addi	a1,sp,164
8000ca08:	06c10513          	addi	a0,sp,108
8000ca0c:	965fe0ef          	jal	ra,8000b370 <emov>
8000ca10:	000047b7          	lui	a5,0x4
8000ca14:	08e78793          	addi	a5,a5,142 # 408e <_HEAP_SIZE+0x308e>
8000ca18:	0af11b23          	sh	a5,182(sp)
8000ca1c:	01000793          	li	a5,16
8000ca20:	00f12423          	sw	a5,8(sp)
8000ca24:	000087b7          	lui	a5,0x8
8000ca28:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
8000ca2c:	00f12a23          	sw	a5,20(sp)
8000ca30:	ffffc7b7          	lui	a5,0xffffc
8000ca34:	00278793          	addi	a5,a5,2 # ffffc002 <__stack+0x7ffbf536>
8000ca38:	00000d13          	li	s10,0
8000ca3c:	00f12c23          	sw	a5,24(sp)
8000ca40:	800207b7          	lui	a5,0x80020
8000ca44:	35c78793          	addi	a5,a5,860 # 8002035c <__stack+0xfffe3890>
8000ca48:	01a78533          	add	a0,a5,s10
8000ca4c:	15010693          	addi	a3,sp,336
8000ca50:	08810613          	addi	a2,sp,136
8000ca54:	0a410593          	addi	a1,sp,164
8000ca58:	929ff0ef          	jal	ra,8000c380 <ediv>
8000ca5c:	03c10593          	addi	a1,sp,60
8000ca60:	08810513          	addi	a0,sp,136
8000ca64:	90dfe0ef          	jal	ra,8000b370 <emov>
8000ca68:	01412783          	lw	a5,20(sp)
8000ca6c:	04e15c03          	lhu	s8,78(sp)
8000ca70:	00fc7733          	and	a4,s8,a5
8000ca74:	01812783          	lw	a5,24(sp)
8000ca78:	00f70733          	add	a4,a4,a5
8000ca7c:	04e04a63          	bgtz	a4,8000cad0 <_ldtoa_r+0x404>
8000ca80:	0c010513          	addi	a0,sp,192
8000ca84:	8d9fe0ef          	jal	ra,8000b35c <eclear>
8000ca88:	010c1c13          	slli	s8,s8,0x10
8000ca8c:	410c5c13          	srai	s8,s8,0x10
8000ca90:	100c5463          	bgez	s8,8000cb98 <_ldtoa_r+0x4cc>
8000ca94:	00000793          	li	a5,0
8000ca98:	03c10713          	addi	a4,sp,60
8000ca9c:	00f70733          	add	a4,a4,a5
8000caa0:	00075683          	lhu	a3,0(a4)
8000caa4:	0c010713          	addi	a4,sp,192
8000caa8:	00f70733          	add	a4,a4,a5
8000caac:	00075703          	lhu	a4,0(a4)
8000cab0:	3ae68663          	beq	a3,a4,8000ce5c <_ldtoa_r+0x790>
8000cab4:	00048513          	mv	a0,s1
8000cab8:	b9dfe0ef          	jal	ra,8000b654 <eisnan>
8000cabc:	08050263          	beqz	a0,8000cb40 <_ldtoa_r+0x474>
8000cac0:	0c010593          	addi	a1,sp,192
8000cac4:	00048513          	mv	a0,s1
8000cac8:	8a9fe0ef          	jal	ra,8000b370 <emov>
8000cacc:	0cc0006f          	j	8000cb98 <_ldtoa_r+0x4cc>
8000cad0:	09000793          	li	a5,144
8000cad4:	40e78db3          	sub	s11,a5,a4
8000cad8:	0c010593          	addi	a1,sp,192
8000cadc:	03c10513          	addi	a0,sp,60
8000cae0:	891fe0ef          	jal	ra,8000b370 <emov>
8000cae4:	0bb05a63          	blez	s11,8000cb98 <_ldtoa_r+0x4cc>
8000cae8:	0c010693          	addi	a3,sp,192
8000caec:	000d8793          	mv	a5,s11
8000caf0:	00f00613          	li	a2,15
8000caf4:	02f64e63          	blt	a2,a5,8000cb30 <_ldtoa_r+0x464>
8000caf8:	004dd793          	srli	a5,s11,0x4
8000cafc:	ff000613          	li	a2,-16
8000cb00:	00179693          	slli	a3,a5,0x1
8000cb04:	02c787b3          	mul	a5,a5,a2
8000cb08:	0c010713          	addi	a4,sp,192
8000cb0c:	00d706b3          	add	a3,a4,a3
8000cb10:	0006d703          	lhu	a4,0(a3)
8000cb14:	01b787b3          	add	a5,a5,s11
8000cb18:	00179793          	slli	a5,a5,0x1
8000cb1c:	00f987b3          	add	a5,s3,a5
8000cb20:	12c7d783          	lhu	a5,300(a5)
8000cb24:	00e7f7b3          	and	a5,a5,a4
8000cb28:	00f69023          	sh	a5,0(a3)
8000cb2c:	f5dff06f          	j	8000ca88 <_ldtoa_r+0x3bc>
8000cb30:	00069023          	sh	zero,0(a3)
8000cb34:	ff078793          	addi	a5,a5,-16
8000cb38:	00268693          	addi	a3,a3,2
8000cb3c:	fb9ff06f          	j	8000caf4 <_ldtoa_r+0x428>
8000cb40:	0c010513          	addi	a0,sp,192
8000cb44:	b11fe0ef          	jal	ra,8000b654 <eisnan>
8000cb48:	00050863          	beqz	a0,8000cb58 <_ldtoa_r+0x48c>
8000cb4c:	0c010593          	addi	a1,sp,192
8000cb50:	00058513          	mv	a0,a1
8000cb54:	f75ff06f          	j	8000cac8 <_ldtoa_r+0x3fc>
8000cb58:	00048513          	mv	a0,s1
8000cb5c:	d3dfe0ef          	jal	ra,8000b898 <eisinf>
8000cb60:	00050d93          	mv	s11,a0
8000cb64:	0c010513          	addi	a0,sp,192
8000cb68:	d31fe0ef          	jal	ra,8000b898 <eisinf>
8000cb6c:	00050c13          	mv	s8,a0
8000cb70:	140d8c63          	beqz	s11,8000ccc8 <_ldtoa_r+0x5fc>
8000cb74:	12050463          	beqz	a0,8000cc9c <_ldtoa_r+0x5d0>
8000cb78:	00048513          	mv	a0,s1
8000cb7c:	b0dfe0ef          	jal	ra,8000b688 <eisneg>
8000cb80:	00050c13          	mv	s8,a0
8000cb84:	0c010513          	addi	a0,sp,192
8000cb88:	b01fe0ef          	jal	ra,8000b688 <eisneg>
8000cb8c:	10ac1863          	bne	s8,a0,8000cc9c <_ldtoa_r+0x5d0>
8000cb90:	0c010513          	addi	a0,sp,192
8000cb94:	f91fe0ef          	jal	ra,8000bb24 <enan.constprop.12>
8000cb98:	00000793          	li	a5,0
8000cb9c:	08810713          	addi	a4,sp,136
8000cba0:	00f70733          	add	a4,a4,a5
8000cba4:	00075683          	lhu	a3,0(a4)
8000cba8:	0c010713          	addi	a4,sp,192
8000cbac:	00f70733          	add	a4,a4,a5
8000cbb0:	00075703          	lhu	a4,0(a4)
8000cbb4:	02e69263          	bne	a3,a4,8000cbd8 <_ldtoa_r+0x50c>
8000cbb8:	00278793          	addi	a5,a5,2
8000cbbc:	01200713          	li	a4,18
8000cbc0:	fce79ee3          	bne	a5,a4,8000cb9c <_ldtoa_r+0x4d0>
8000cbc4:	0a410593          	addi	a1,sp,164
8000cbc8:	08810513          	addi	a0,sp,136
8000cbcc:	fa4fe0ef          	jal	ra,8000b370 <emov>
8000cbd0:	00812783          	lw	a5,8(sp)
8000cbd4:	00f40433          	add	s0,s0,a5
8000cbd8:	00812783          	lw	a5,8(sp)
8000cbdc:	014d0d13          	addi	s10,s10,20
8000cbe0:	0017d793          	srli	a5,a5,0x1
8000cbe4:	00f12423          	sw	a5,8(sp)
8000cbe8:	06400793          	li	a5,100
8000cbec:	e4fd1ae3          	bne	s10,a5,8000ca40 <_ldtoa_r+0x374>
8000cbf0:	0b615783          	lhu	a5,182(sp)
8000cbf4:	07e15703          	lhu	a4,126(sp)
8000cbf8:	06c10593          	addi	a1,sp,108
8000cbfc:	0a410513          	addi	a0,sp,164
8000cc00:	00e787b3          	add	a5,a5,a4
8000cc04:	ffffc737          	lui	a4,0xffffc
8000cc08:	f7270713          	addi	a4,a4,-142 # ffffbf72 <__stack+0x7ffbf4a6>
8000cc0c:	00e787b3          	add	a5,a5,a4
8000cc10:	0af11b23          	sh	a5,182(sp)
8000cc14:	f5cfe0ef          	jal	ra,8000b370 <emov>
8000cc18:	00048513          	mv	a0,s1
8000cc1c:	08810593          	addi	a1,sp,136
8000cc20:	f50fe0ef          	jal	ra,8000b370 <emov>
8000cc24:	00000493          	li	s1,0
8000cc28:	00001d37          	lui	s10,0x1
8000cc2c:	11898993          	addi	s3,s3,280
8000cc30:	10400d93          	li	s11,260
8000cc34:	800207b7          	lui	a5,0x80020
8000cc38:	2bc78793          	addi	a5,a5,700 # 800202bc <__stack+0xfffe37f0>
8000cc3c:	0a410593          	addi	a1,sp,164
8000cc40:	00098513          	mv	a0,s3
8000cc44:	00978c33          	add	s8,a5,s1
8000cc48:	b49fe0ef          	jal	ra,8000b790 <ecmp>
8000cc4c:	caa04ae3          	bgtz	a0,8000c900 <_ldtoa_r+0x234>
8000cc50:	0a410593          	addi	a1,sp,164
8000cc54:	000c0513          	mv	a0,s8
8000cc58:	b39fe0ef          	jal	ra,8000b790 <ecmp>
8000cc5c:	02a04863          	bgtz	a0,8000cc8c <_ldtoa_r+0x5c0>
8000cc60:	0a410613          	addi	a2,sp,164
8000cc64:	00060593          	mv	a1,a2
8000cc68:	15010693          	addi	a3,sp,336
8000cc6c:	000c0513          	mv	a0,s8
8000cc70:	f10ff0ef          	jal	ra,8000c380 <ediv>
8000cc74:	08810613          	addi	a2,sp,136
8000cc78:	15010693          	addi	a3,sp,336
8000cc7c:	00060593          	mv	a1,a2
8000cc80:	000c0513          	mv	a0,s8
8000cc84:	c4cff0ef          	jal	ra,8000c0d0 <emul>
8000cc88:	01a40433          	add	s0,s0,s10
8000cc8c:	01448493          	addi	s1,s1,20
8000cc90:	001d5d13          	srli	s10,s10,0x1
8000cc94:	fbb490e3          	bne	s1,s11,8000cc34 <_ldtoa_r+0x568>
8000cc98:	c69ff06f          	j	8000c900 <_ldtoa_r+0x234>
8000cc9c:	00048513          	mv	a0,s1
8000cca0:	0c010593          	addi	a1,sp,192
8000cca4:	eccfe0ef          	jal	ra,8000b370 <emov>
8000cca8:	0c010513          	addi	a0,sp,192
8000ccac:	9a9fe0ef          	jal	ra,8000b654 <eisnan>
8000ccb0:	ee0514e3          	bnez	a0,8000cb98 <_ldtoa_r+0x4cc>
8000ccb4:	0d215783          	lhu	a5,210(sp)
8000ccb8:	ffff8737          	lui	a4,0xffff8
8000ccbc:	00e7c7b3          	xor	a5,a5,a4
8000ccc0:	0cf11923          	sh	a5,210(sp)
8000ccc4:	ed5ff06f          	j	8000cb98 <_ldtoa_r+0x4cc>
8000ccc8:	e80512e3          	bnez	a0,8000cb4c <_ldtoa_r+0x480>
8000cccc:	0dc10593          	addi	a1,sp,220
8000ccd0:	00048513          	mv	a0,s1
8000ccd4:	9edfe0ef          	jal	ra,8000b6c0 <emovi>
8000ccd8:	0f810593          	addi	a1,sp,248
8000ccdc:	0c010513          	addi	a0,sp,192
8000cce0:	9e1fe0ef          	jal	ra,8000b6c0 <emovi>
8000cce4:	0dc15703          	lhu	a4,220(sp)
8000cce8:	0fa15d83          	lhu	s11,250(sp)
8000ccec:	0de15783          	lhu	a5,222(sp)
8000ccf0:	fff74713          	not	a4,a4
8000ccf4:	01071713          	slli	a4,a4,0x10
8000ccf8:	01075713          	srli	a4,a4,0x10
8000ccfc:	0ce11e23          	sh	a4,220(sp)
8000cd00:	41b787b3          	sub	a5,a5,s11
8000cd04:	08f05863          	blez	a5,8000cd94 <_ldtoa_r+0x6c8>
8000cd08:	11410593          	addi	a1,sp,276
8000cd0c:	0f810513          	addi	a0,sp,248
8000cd10:	00f12e23          	sw	a5,28(sp)
8000cd14:	e8cfe0ef          	jal	ra,8000b3a0 <emovz>
8000cd18:	0f810593          	addi	a1,sp,248
8000cd1c:	0dc10513          	addi	a0,sp,220
8000cd20:	e80fe0ef          	jal	ra,8000b3a0 <emovz>
8000cd24:	0dc10593          	addi	a1,sp,220
8000cd28:	11410513          	addi	a0,sp,276
8000cd2c:	e74fe0ef          	jal	ra,8000b3a0 <emovz>
8000cd30:	01c12783          	lw	a5,28(sp)
8000cd34:	0fa15d83          	lhu	s11,250(sp)
8000cd38:	40f007b3          	neg	a5,a5
8000cd3c:	f6f00713          	li	a4,-145
8000cd40:	08e7ce63          	blt	a5,a4,8000cddc <_ldtoa_r+0x710>
8000cd44:	00078593          	mv	a1,a5
8000cd48:	0dc10513          	addi	a0,sp,220
8000cd4c:	ba9fe0ef          	jal	ra,8000b8f4 <eshift.part.3>
8000cd50:	00050813          	mv	a6,a0
8000cd54:	0dc15703          	lhu	a4,220(sp)
8000cd58:	0f815783          	lhu	a5,248(sp)
8000cd5c:	01012e23          	sw	a6,28(sp)
8000cd60:	0f810593          	addi	a1,sp,248
8000cd64:	0dc10513          	addi	a0,sp,220
8000cd68:	0ef71463          	bne	a4,a5,8000ce50 <_ldtoa_r+0x784>
8000cd6c:	fdcfe0ef          	jal	ra,8000b548 <eaddm>
8000cd70:	01c12803          	lw	a6,28(sp)
8000cd74:	15010793          	addi	a5,sp,336
8000cd78:	04000713          	li	a4,64
8000cd7c:	000d8693          	mv	a3,s11
8000cd80:	000c0613          	mv	a2,s8
8000cd84:	00080593          	mv	a1,a6
8000cd88:	0f810513          	addi	a0,sp,248
8000cd8c:	f39fe0ef          	jal	ra,8000bcc4 <emdnorm>
8000cd90:	04c0006f          	j	8000cddc <_ldtoa_r+0x710>
8000cd94:	fa0794e3          	bnez	a5,8000cd3c <_ldtoa_r+0x670>
8000cd98:	0f810593          	addi	a1,sp,248
8000cd9c:	0dc10513          	addi	a0,sp,220
8000cda0:	00e12e23          	sw	a4,28(sp)
8000cda4:	e20fe0ef          	jal	ra,8000b3c4 <ecmpm>
8000cda8:	06051a63          	bnez	a0,8000ce1c <_ldtoa_r+0x750>
8000cdac:	0f815783          	lhu	a5,248(sp)
8000cdb0:	01c12703          	lw	a4,28(sp)
8000cdb4:	00e78863          	beq	a5,a4,8000cdc4 <_ldtoa_r+0x6f8>
8000cdb8:	0c010513          	addi	a0,sp,192
8000cdbc:	da0fe0ef          	jal	ra,8000b35c <eclear>
8000cdc0:	dd9ff06f          	j	8000cb98 <_ldtoa_r+0x4cc>
8000cdc4:	020d9463          	bnez	s11,8000cdec <_ldtoa_r+0x720>
8000cdc8:	0fe11703          	lh	a4,254(sp)
8000cdcc:	00000793          	li	a5,0
8000cdd0:	02074063          	bltz	a4,8000cdf0 <_ldtoa_r+0x724>
8000cdd4:	0f810513          	addi	a0,sp,248
8000cdd8:	e78fe0ef          	jal	ra,8000b450 <eshup1>
8000cddc:	0c010593          	addi	a1,sp,192
8000cde0:	0f810513          	addi	a0,sp,248
8000cde4:	d69fe0ef          	jal	ra,8000bb4c <emovo.isra.6>
8000cde8:	db1ff06f          	j	8000cb98 <_ldtoa_r+0x4cc>
8000cdec:	00000793          	li	a5,0
8000cdf0:	01600713          	li	a4,22
8000cdf4:	0f810693          	addi	a3,sp,248
8000cdf8:	00f68633          	add	a2,a3,a5
8000cdfc:	00265603          	lhu	a2,2(a2)
8000ce00:	00060863          	beqz	a2,8000ce10 <_ldtoa_r+0x744>
8000ce04:	001d8d93          	addi	s11,s11,1
8000ce08:	0fb11d23          	sh	s11,250(sp)
8000ce0c:	fd1ff06f          	j	8000cddc <_ldtoa_r+0x710>
8000ce10:	00278793          	addi	a5,a5,2
8000ce14:	fee790e3          	bne	a5,a4,8000cdf4 <_ldtoa_r+0x728>
8000ce18:	ff1ff06f          	j	8000ce08 <_ldtoa_r+0x73c>
8000ce1c:	00000813          	li	a6,0
8000ce20:	f2a05ae3          	blez	a0,8000cd54 <_ldtoa_r+0x688>
8000ce24:	11410593          	addi	a1,sp,276
8000ce28:	0f810513          	addi	a0,sp,248
8000ce2c:	d74fe0ef          	jal	ra,8000b3a0 <emovz>
8000ce30:	0f810593          	addi	a1,sp,248
8000ce34:	0dc10513          	addi	a0,sp,220
8000ce38:	d68fe0ef          	jal	ra,8000b3a0 <emovz>
8000ce3c:	0dc10593          	addi	a1,sp,220
8000ce40:	11410513          	addi	a0,sp,276
8000ce44:	d5cfe0ef          	jal	ra,8000b3a0 <emovz>
8000ce48:	000c0813          	mv	a6,s8
8000ce4c:	f09ff06f          	j	8000cd54 <_ldtoa_r+0x688>
8000ce50:	f30fe0ef          	jal	ra,8000b580 <esubm>
8000ce54:	00100c13          	li	s8,1
8000ce58:	f19ff06f          	j	8000cd70 <_ldtoa_r+0x6a4>
8000ce5c:	00278793          	addi	a5,a5,2
8000ce60:	01200713          	li	a4,18
8000ce64:	c2e79ae3          	bne	a5,a4,8000ca98 <_ldtoa_r+0x3cc>
8000ce68:	d31ff06f          	j	8000cb98 <_ldtoa_r+0x4cc>
8000ce6c:	07e15783          	lhu	a5,126(sp)
8000ce70:	11898c13          	addi	s8,s3,280
8000ce74:	0a078863          	beqz	a5,8000cf24 <_ldtoa_r+0x858>
8000ce78:	0c010593          	addi	a1,sp,192
8000ce7c:	06c10513          	addi	a0,sp,108
8000ce80:	00004c37          	lui	s8,0x4
8000ce84:	83dfe0ef          	jal	ra,8000b6c0 <emovi>
8000ce88:	ffec0c13          	addi	s8,s8,-2 # 3ffe <_HEAP_SIZE+0x2ffe>
8000ce8c:	fd500d13          	li	s10,-43
8000ce90:	0d815783          	lhu	a5,216(sp)
8000ce94:	0077f793          	andi	a5,a5,7
8000ce98:	06079263          	bnez	a5,8000cefc <_ldtoa_r+0x830>
8000ce9c:	0a410593          	addi	a1,sp,164
8000cea0:	0c010513          	addi	a0,sp,192
8000cea4:	cfcfe0ef          	jal	ra,8000b3a0 <emovz>
8000cea8:	0a410513          	addi	a0,sp,164
8000ceac:	d54fe0ef          	jal	ra,8000b400 <eshdn1>
8000ceb0:	0a410513          	addi	a0,sp,164
8000ceb4:	d4cfe0ef          	jal	ra,8000b400 <eshdn1>
8000ceb8:	0a410593          	addi	a1,sp,164
8000cebc:	0c010513          	addi	a0,sp,192
8000cec0:	e88fe0ef          	jal	ra,8000b548 <eaddm>
8000cec4:	0a615783          	lhu	a5,166(sp)
8000cec8:	00378793          	addi	a5,a5,3
8000cecc:	0af11323          	sh	a5,166(sp)
8000ced0:	0a815783          	lhu	a5,168(sp)
8000ced4:	10079a63          	bnez	a5,8000cfe8 <_ldtoa_r+0x91c>
8000ced8:	0bc15783          	lhu	a5,188(sp)
8000cedc:	02079063          	bnez	a5,8000cefc <_ldtoa_r+0x830>
8000cee0:	0a615783          	lhu	a5,166(sp)
8000cee4:	00fc6c63          	bltu	s8,a5,8000cefc <_ldtoa_r+0x830>
8000cee8:	0c010593          	addi	a1,sp,192
8000ceec:	0a410513          	addi	a0,sp,164
8000cef0:	fff40413          	addi	s0,s0,-1
8000cef4:	cacfe0ef          	jal	ra,8000b3a0 <emovz>
8000cef8:	f9a41ce3          	bne	s0,s10,8000ce90 <_ldtoa_r+0x7c4>
8000cefc:	06c10593          	addi	a1,sp,108
8000cf00:	0c010513          	addi	a0,sp,192
8000cf04:	c49fe0ef          	jal	ra,8000bb4c <emovo.isra.6>
8000cf08:	0240006f          	j	8000cf2c <_ldtoa_r+0x860>
8000cf0c:	06c10613          	addi	a2,sp,108
8000cf10:	15010693          	addi	a3,sp,336
8000cf14:	00060593          	mv	a1,a2
8000cf18:	000c0513          	mv	a0,s8
8000cf1c:	9b4ff0ef          	jal	ra,8000c0d0 <emul>
8000cf20:	fff40413          	addi	s0,s0,-1
8000cf24:	07c11783          	lh	a5,124(sp)
8000cf28:	fe07d2e3          	bgez	a5,8000cf0c <_ldtoa_r+0x840>
8000cf2c:	0c010593          	addi	a1,sp,192
8000cf30:	06c10513          	addi	a0,sp,108
8000cf34:	c3cfe0ef          	jal	ra,8000b370 <emov>
8000cf38:	08810593          	addi	a1,sp,136
8000cf3c:	00048513          	mv	a0,s1
8000cf40:	c30fe0ef          	jal	ra,8000b370 <emov>
8000cf44:	15098793          	addi	a5,s3,336
8000cf48:	00000d13          	li	s10,0
8000cf4c:	fffffc37          	lui	s8,0xfffff
8000cf50:	00f12423          	sw	a5,8(sp)
8000cf54:	00200d93          	li	s11,2
8000cf58:	800207b7          	lui	a5,0x80020
8000cf5c:	2bc78793          	addi	a5,a5,700 # 800202bc <__stack+0xfffe37f0>
8000cf60:	01a789b3          	add	s3,a5,s10
8000cf64:	00812783          	lw	a5,8(sp)
8000cf68:	0c010593          	addi	a1,sp,192
8000cf6c:	00048513          	mv	a0,s1
8000cf70:	01a78733          	add	a4,a5,s10
8000cf74:	00e12a23          	sw	a4,20(sp)
8000cf78:	819fe0ef          	jal	ra,8000b790 <ecmp>
8000cf7c:	01412703          	lw	a4,20(sp)
8000cf80:	04a05863          	blez	a0,8000cfd0 <_ldtoa_r+0x904>
8000cf84:	0c010593          	addi	a1,sp,192
8000cf88:	00070513          	mv	a0,a4
8000cf8c:	805fe0ef          	jal	ra,8000b790 <ecmp>
8000cf90:	02054863          	bltz	a0,8000cfc0 <_ldtoa_r+0x8f4>
8000cf94:	0c010613          	addi	a2,sp,192
8000cf98:	00060593          	mv	a1,a2
8000cf9c:	15010693          	addi	a3,sp,336
8000cfa0:	00098513          	mv	a0,s3
8000cfa4:	92cff0ef          	jal	ra,8000c0d0 <emul>
8000cfa8:	08810613          	addi	a2,sp,136
8000cfac:	15010693          	addi	a3,sp,336
8000cfb0:	00060593          	mv	a1,a2
8000cfb4:	00098513          	mv	a0,s3
8000cfb8:	918ff0ef          	jal	ra,8000c0d0 <emul>
8000cfbc:	01840433          	add	s0,s0,s8
8000cfc0:	014d0d13          	addi	s10,s10,20 # 1014 <_HEAP_SIZE+0x14>
8000cfc4:	10400793          	li	a5,260
8000cfc8:	03bc4c33          	div	s8,s8,s11
8000cfcc:	f8fd16e3          	bne	s10,a5,8000cf58 <_ldtoa_r+0x88c>
8000cfd0:	08810613          	addi	a2,sp,136
8000cfd4:	15010693          	addi	a3,sp,336
8000cfd8:	00048593          	mv	a1,s1
8000cfdc:	00060513          	mv	a0,a2
8000cfe0:	ba0ff0ef          	jal	ra,8000c380 <ediv>
8000cfe4:	91dff06f          	j	8000c900 <_ldtoa_r+0x234>
8000cfe8:	0a410513          	addi	a0,sp,164
8000cfec:	c14fe0ef          	jal	ra,8000b400 <eshdn1>
8000cff0:	0a615783          	lhu	a5,166(sp)
8000cff4:	00178793          	addi	a5,a5,1
8000cff8:	ed5ff06f          	j	8000cecc <_ldtoa_r+0x800>
8000cffc:	06c10513          	addi	a0,sp,108
8000d000:	c50fe0ef          	jal	ra,8000b450 <eshup1>
8000d004:	0a410593          	addi	a1,sp,164
8000d008:	06c10513          	addi	a0,sp,108
8000d00c:	b94fe0ef          	jal	ra,8000b3a0 <emovz>
8000d010:	0a410513          	addi	a0,sp,164
8000d014:	c3cfe0ef          	jal	ra,8000b450 <eshup1>
8000d018:	0a410513          	addi	a0,sp,164
8000d01c:	c34fe0ef          	jal	ra,8000b450 <eshup1>
8000d020:	06c10593          	addi	a1,sp,108
8000d024:	0a410513          	addi	a0,sp,164
8000d028:	d20fe0ef          	jal	ra,8000b548 <eaddm>
8000d02c:	15010613          	addi	a2,sp,336
8000d030:	06c10593          	addi	a1,sp,108
8000d034:	08810513          	addi	a0,sp,136
8000d038:	fb5fe0ef          	jal	ra,8000bfec <eiremain>
8000d03c:	fff40413          	addi	s0,s0,-1
8000d040:	19c15483          	lhu	s1,412(sp)
8000d044:	901ff06f          	j	8000c944 <_ldtoa_r+0x278>
8000d048:	02000793          	li	a5,32
8000d04c:	919ff06f          	j	8000c964 <_ldtoa_r+0x298>
8000d050:	03048493          	addi	s1,s1,48
8000d054:	02e00793          	li	a5,46
8000d058:	10910aa3          	sb	s1,277(sp)
8000d05c:	10f10b23          	sb	a5,278(sp)
8000d060:	11710c13          	addi	s8,sp,279
8000d064:	000c0493          	mv	s1,s8
8000d068:	418487b3          	sub	a5,s1,s8
8000d06c:	04f9d663          	ble	a5,s3,8000d0b8 <_ldtoa_r+0x9ec>
8000d070:	19c15783          	lhu	a5,412(sp)
8000d074:	00400713          	li	a4,4
8000d078:	fff48c13          	addi	s8,s1,-1
8000d07c:	92f75ee3          	ble	a5,a4,8000c9b8 <_ldtoa_r+0x2ec>
8000d080:	00500713          	li	a4,5
8000d084:	08e78463          	beq	a5,a4,8000d10c <_ldtoa_r+0xa40>
8000d088:	000c0793          	mv	a5,s8
8000d08c:	02e00613          	li	a2,46
8000d090:	03800593          	li	a1,56
8000d094:	03000693          	li	a3,48
8000d098:	fff78793          	addi	a5,a5,-1
8000d09c:	0007c703          	lbu	a4,0(a5)
8000d0a0:	07f77713          	andi	a4,a4,127
8000d0a4:	0a09d663          	bgez	s3,8000d150 <_ldtoa_r+0xa84>
8000d0a8:	03100713          	li	a4,49
8000d0ac:	00e78023          	sb	a4,0(a5)
8000d0b0:	00140413          	addi	s0,s0,1
8000d0b4:	905ff06f          	j	8000c9b8 <_ldtoa_r+0x2ec>
8000d0b8:	06c10513          	addi	a0,sp,108
8000d0bc:	b94fe0ef          	jal	ra,8000b450 <eshup1>
8000d0c0:	0a410593          	addi	a1,sp,164
8000d0c4:	06c10513          	addi	a0,sp,108
8000d0c8:	ad8fe0ef          	jal	ra,8000b3a0 <emovz>
8000d0cc:	0a410513          	addi	a0,sp,164
8000d0d0:	b80fe0ef          	jal	ra,8000b450 <eshup1>
8000d0d4:	0a410513          	addi	a0,sp,164
8000d0d8:	b78fe0ef          	jal	ra,8000b450 <eshup1>
8000d0dc:	06c10593          	addi	a1,sp,108
8000d0e0:	0a410513          	addi	a0,sp,164
8000d0e4:	c64fe0ef          	jal	ra,8000b548 <eaddm>
8000d0e8:	15010613          	addi	a2,sp,336
8000d0ec:	06c10593          	addi	a1,sp,108
8000d0f0:	08810513          	addi	a0,sp,136
8000d0f4:	ef9fe0ef          	jal	ra,8000bfec <eiremain>
8000d0f8:	19c14783          	lbu	a5,412(sp)
8000d0fc:	00148493          	addi	s1,s1,1
8000d100:	03078793          	addi	a5,a5,48
8000d104:	fef48fa3          	sb	a5,-1(s1)
8000d108:	f61ff06f          	j	8000d068 <_ldtoa_r+0x99c>
8000d10c:	08810593          	addi	a1,sp,136
8000d110:	06c10513          	addi	a0,sp,108
8000d114:	a39fe0ef          	jal	ra,8000bb4c <emovo.isra.6>
8000d118:	294b0593          	addi	a1,s6,660
8000d11c:	08810513          	addi	a0,sp,136
8000d120:	e70fe0ef          	jal	ra,8000b790 <ecmp>
8000d124:	f60512e3          	bnez	a0,8000d088 <_ldtoa_r+0x9bc>
8000d128:	8809c8e3          	bltz	s3,8000c9b8 <_ldtoa_r+0x2ec>
8000d12c:	ffe4c783          	lbu	a5,-2(s1)
8000d130:	fd278793          	addi	a5,a5,-46
8000d134:	0017b793          	seqz	a5,a5
8000d138:	fff7c793          	not	a5,a5
8000d13c:	00fc07b3          	add	a5,s8,a5
8000d140:	0007c783          	lbu	a5,0(a5)
8000d144:	0017f793          	andi	a5,a5,1
8000d148:	860788e3          	beqz	a5,8000c9b8 <_ldtoa_r+0x2ec>
8000d14c:	f3dff06f          	j	8000d088 <_ldtoa_r+0x9bc>
8000d150:	02c71463          	bne	a4,a2,8000d178 <_ldtoa_r+0xaac>
8000d154:	fff7c703          	lbu	a4,-1(a5)
8000d158:	03800693          	li	a3,56
8000d15c:	00e6e863          	bltu	a3,a4,8000d16c <_ldtoa_r+0xaa0>
8000d160:	00170713          	addi	a4,a4,1 # ffff8001 <__stack+0x7ffbb535>
8000d164:	fee78fa3          	sb	a4,-1(a5)
8000d168:	851ff06f          	j	8000c9b8 <_ldtoa_r+0x2ec>
8000d16c:	00140413          	addi	s0,s0,1
8000d170:	03100713          	li	a4,49
8000d174:	ff1ff06f          	j	8000d164 <_ldtoa_r+0xa98>
8000d178:	00e5e863          	bltu	a1,a4,8000d188 <_ldtoa_r+0xabc>
8000d17c:	00170713          	addi	a4,a4,1
8000d180:	00e78023          	sb	a4,0(a5)
8000d184:	835ff06f          	j	8000c9b8 <_ldtoa_r+0x2ec>
8000d188:	00d78023          	sb	a3,0(a5)
8000d18c:	f0dff06f          	j	8000d098 <_ldtoa_r+0x9cc>
8000d190:	00140413          	addi	s0,s0,1
8000d194:	008ca023          	sw	s0,0(s9)
8000d198:	00098793          	mv	a5,s3
8000d19c:	02e00693          	li	a3,46
8000d1a0:	0007c703          	lbu	a4,0(a5)
8000d1a4:	00071663          	bnez	a4,8000d1b0 <_ldtoa_r+0xae4>
8000d1a8:	04500713          	li	a4,69
8000d1ac:	02c0006f          	j	8000d1d8 <_ldtoa_r+0xb0c>
8000d1b0:	00d70c63          	beq	a4,a3,8000d1c8 <_ldtoa_r+0xafc>
8000d1b4:	00178793          	addi	a5,a5,1
8000d1b8:	fe9ff06f          	j	8000d1a0 <_ldtoa_r+0xad4>
8000d1bc:	0017c703          	lbu	a4,1(a5)
8000d1c0:	00178793          	addi	a5,a5,1
8000d1c4:	fee78fa3          	sb	a4,-1(a5)
8000d1c8:	0007c703          	lbu	a4,0(a5)
8000d1cc:	fe0718e3          	bnez	a4,8000d1bc <_ldtoa_r+0xaf0>
8000d1d0:	fd9ff06f          	j	8000d1a8 <_ldtoa_r+0xadc>
8000d1d4:	fff78793          	addi	a5,a5,-1
8000d1d8:	0007c683          	lbu	a3,0(a5)
8000d1dc:	00e68463          	beq	a3,a4,8000d1e4 <_ldtoa_r+0xb18>
8000d1e0:	fef9eae3          	bltu	s3,a5,8000d1d4 <_ldtoa_r+0xb08>
8000d1e4:	00078023          	sb	zero,0(a5)
8000d1e8:	e2cff06f          	j	8000c814 <_ldtoa_r+0x148>
8000d1ec:	00178793          	addi	a5,a5,1
8000d1f0:	e30ff06f          	j	8000c820 <_ldtoa_r+0x154>
8000d1f4:	00068413          	mv	s0,a3
8000d1f8:	e38ff06f          	j	8000c830 <_ldtoa_r+0x164>
8000d1fc:	fff40413          	addi	s0,s0,-1
8000d200:	00040023          	sb	zero,0(s0)
8000d204:	fff44703          	lbu	a4,-1(s0)
8000d208:	00d71663          	bne	a4,a3,8000d214 <_ldtoa_r+0xb48>
8000d20c:	41340733          	sub	a4,s0,s3
8000d210:	fee7c6e3          	blt	a5,a4,8000d1fc <_ldtoa_r+0xb30>
8000d214:	00300793          	li	a5,3
8000d218:	009a8713          	addi	a4,s5,9
8000d21c:	02fb9463          	bne	s7,a5,8000d244 <_ldtoa_r+0xb78>
8000d220:	16012783          	lw	a5,352(sp)
8000d224:	00f90933          	add	s2,s2,a5
8000d228:	00095863          	bgez	s2,8000d238 <_ldtoa_r+0xb6c>
8000d22c:	10010a23          	sb	zero,276(sp)
8000d230:	000ca023          	sw	zero,0(s9)
8000d234:	00098413          	mv	s0,s3
8000d238:	000ca783          	lw	a5,0(s9)
8000d23c:	00fa8ab3          	add	s5,s5,a5
8000d240:	003a8713          	addi	a4,s5,3
8000d244:	040a2223          	sw	zero,68(s4)
8000d248:	00400793          	li	a5,4
8000d24c:	01478693          	addi	a3,a5,20
8000d250:	044a2583          	lw	a1,68(s4)
8000d254:	06d77863          	bleu	a3,a4,8000d2c4 <_ldtoa_r+0xbf8>
8000d258:	000a0513          	mv	a0,s4
8000d25c:	2c5000ef          	jal	ra,8000dd20 <_Balloc>
8000d260:	04aa2023          	sw	a0,64(s4)
8000d264:	00098593          	mv	a1,s3
8000d268:	00050493          	mv	s1,a0
8000d26c:	5d1010ef          	jal	ra,8000f03c <strcpy>
8000d270:	00c12783          	lw	a5,12(sp)
8000d274:	00078863          	beqz	a5,8000d284 <_ldtoa_r+0xbb8>
8000d278:	41340433          	sub	s0,s0,s3
8000d27c:	00848433          	add	s0,s1,s0
8000d280:	0087a023          	sw	s0,0(a5)
8000d284:	1dc12083          	lw	ra,476(sp)
8000d288:	1d812403          	lw	s0,472(sp)
8000d28c:	00048513          	mv	a0,s1
8000d290:	1d012903          	lw	s2,464(sp)
8000d294:	1d412483          	lw	s1,468(sp)
8000d298:	1cc12983          	lw	s3,460(sp)
8000d29c:	1c812a03          	lw	s4,456(sp)
8000d2a0:	1c412a83          	lw	s5,452(sp)
8000d2a4:	1c012b03          	lw	s6,448(sp)
8000d2a8:	1bc12b83          	lw	s7,444(sp)
8000d2ac:	1b812c03          	lw	s8,440(sp)
8000d2b0:	1b412c83          	lw	s9,436(sp)
8000d2b4:	1b012d03          	lw	s10,432(sp)
8000d2b8:	1ac12d83          	lw	s11,428(sp)
8000d2bc:	1e010113          	addi	sp,sp,480
8000d2c0:	00008067          	ret
8000d2c4:	00158593          	addi	a1,a1,1
8000d2c8:	04ba2223          	sw	a1,68(s4)
8000d2cc:	00179793          	slli	a5,a5,0x1
8000d2d0:	f7dff06f          	j	8000d24c <_ldtoa_r+0xb80>
8000d2d4:	000087b7          	lui	a5,0x8
8000d2d8:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
8000d2dc:	f0f71063          	bne	a4,a5,8000c9dc <_ldtoa_r+0x310>
8000d2e0:	00412783          	lw	a5,4(sp)
8000d2e4:	ee078663          	beqz	a5,8000c9d0 <_ldtoa_r+0x304>
8000d2e8:	800215b7          	lui	a1,0x80021
8000d2ec:	db058593          	addi	a1,a1,-592 # 80020db0 <__stack+0xfffe42e4>
8000d2f0:	ce0ff06f          	j	8000c7d0 <_ldtoa_r+0x104>
8000d2f4:	00a00793          	li	a5,10
8000d2f8:	02a00993          	li	s3,42
8000d2fc:	d4f49ae3          	bne	s1,a5,8000d050 <_ldtoa_r+0x984>
8000d300:	03100793          	li	a5,49
8000d304:	10f10aa3          	sb	a5,277(sp)
8000d308:	02e00793          	li	a5,46
8000d30c:	10f10b23          	sb	a5,278(sp)
8000d310:	02a00993          	li	s3,42
8000d314:	e8cff06f          	j	8000c9a0 <_ldtoa_r+0x2d4>

8000d318 <_ldcheck>:
8000d318:	00052783          	lw	a5,0(a0)
8000d31c:	fc010113          	addi	sp,sp,-64
8000d320:	01410593          	addi	a1,sp,20
8000d324:	00f12023          	sw	a5,0(sp)
8000d328:	00452783          	lw	a5,4(a0)
8000d32c:	02112e23          	sw	ra,60(sp)
8000d330:	00f12223          	sw	a5,4(sp)
8000d334:	00852783          	lw	a5,8(a0)
8000d338:	00f12423          	sw	a5,8(sp)
8000d33c:	00c52783          	lw	a5,12(a0)
8000d340:	00010513          	mv	a0,sp
8000d344:	00f12623          	sw	a5,12(sp)
8000d348:	875fe0ef          	jal	ra,8000bbbc <e113toe.isra.8>
8000d34c:	02615783          	lhu	a5,38(sp)
8000d350:	00000513          	li	a0,0
8000d354:	fff7c793          	not	a5,a5
8000d358:	01179713          	slli	a4,a5,0x11
8000d35c:	00071a63          	bnez	a4,8000d370 <_ldcheck+0x58>
8000d360:	01410513          	addi	a0,sp,20
8000d364:	af0fe0ef          	jal	ra,8000b654 <eisnan>
8000d368:	00153513          	seqz	a0,a0
8000d36c:	00150513          	addi	a0,a0,1
8000d370:	03c12083          	lw	ra,60(sp)
8000d374:	04010113          	addi	sp,sp,64
8000d378:	00008067          	ret

8000d37c <__localeconv_l>:
8000d37c:	0f050513          	addi	a0,a0,240
8000d380:	00008067          	ret

8000d384 <_localeconv_r>:
8000d384:	800217b7          	lui	a5,0x80021
8000d388:	e647a783          	lw	a5,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000d38c:	0347a503          	lw	a0,52(a5)
8000d390:	00051663          	bnez	a0,8000d39c <_localeconv_r+0x18>
8000d394:	80021537          	lui	a0,0x80021
8000d398:	29850513          	addi	a0,a0,664 # 80021298 <__stack+0xfffe47cc>
8000d39c:	0f050513          	addi	a0,a0,240
8000d3a0:	00008067          	ret

8000d3a4 <localeconv>:
8000d3a4:	800217b7          	lui	a5,0x80021
8000d3a8:	e647a783          	lw	a5,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000d3ac:	0347a503          	lw	a0,52(a5)
8000d3b0:	00051663          	bnez	a0,8000d3bc <localeconv+0x18>
8000d3b4:	80021537          	lui	a0,0x80021
8000d3b8:	29850513          	addi	a0,a0,664 # 80021298 <__stack+0xfffe47cc>
8000d3bc:	0f050513          	addi	a0,a0,240
8000d3c0:	00008067          	ret

8000d3c4 <_setlocale_r>:
8000d3c4:	ff010113          	addi	sp,sp,-16
8000d3c8:	00912223          	sw	s1,4(sp)
8000d3cc:	00112623          	sw	ra,12(sp)
8000d3d0:	00812423          	sw	s0,8(sp)
8000d3d4:	800214b7          	lui	s1,0x80021
8000d3d8:	04060263          	beqz	a2,8000d41c <_setlocale_r+0x58>
8000d3dc:	800215b7          	lui	a1,0x80021
8000d3e0:	dd458593          	addi	a1,a1,-556 # 80020dd4 <__stack+0xfffe4308>
8000d3e4:	00060513          	mv	a0,a2
8000d3e8:	00060413          	mv	s0,a2
8000d3ec:	2d5010ef          	jal	ra,8000eec0 <strcmp>
8000d3f0:	02050663          	beqz	a0,8000d41c <_setlocale_r+0x58>
8000d3f4:	dd048593          	addi	a1,s1,-560 # 80020dd0 <__stack+0xfffe4304>
8000d3f8:	00040513          	mv	a0,s0
8000d3fc:	2c5010ef          	jal	ra,8000eec0 <strcmp>
8000d400:	00050e63          	beqz	a0,8000d41c <_setlocale_r+0x58>
8000d404:	800215b7          	lui	a1,0x80021
8000d408:	da058593          	addi	a1,a1,-608 # 80020da0 <__stack+0xfffe42d4>
8000d40c:	00040513          	mv	a0,s0
8000d410:	2b1010ef          	jal	ra,8000eec0 <strcmp>
8000d414:	00000793          	li	a5,0
8000d418:	00051463          	bnez	a0,8000d420 <_setlocale_r+0x5c>
8000d41c:	dd048793          	addi	a5,s1,-560
8000d420:	00c12083          	lw	ra,12(sp)
8000d424:	00812403          	lw	s0,8(sp)
8000d428:	00412483          	lw	s1,4(sp)
8000d42c:	00078513          	mv	a0,a5
8000d430:	01010113          	addi	sp,sp,16
8000d434:	00008067          	ret

8000d438 <__locale_mb_cur_max>:
8000d438:	800217b7          	lui	a5,0x80021
8000d43c:	e647a783          	lw	a5,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000d440:	0347a783          	lw	a5,52(a5)
8000d444:	00079663          	bnez	a5,8000d450 <__locale_mb_cur_max+0x18>
8000d448:	800217b7          	lui	a5,0x80021
8000d44c:	29878793          	addi	a5,a5,664 # 80021298 <__stack+0xfffe47cc>
8000d450:	1287c503          	lbu	a0,296(a5)
8000d454:	00008067          	ret

8000d458 <__locale_ctype_ptr_l>:
8000d458:	0ec52503          	lw	a0,236(a0)
8000d45c:	00008067          	ret

8000d460 <__locale_ctype_ptr>:
8000d460:	800217b7          	lui	a5,0x80021
8000d464:	e647a783          	lw	a5,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000d468:	0347a783          	lw	a5,52(a5)
8000d46c:	00079663          	bnez	a5,8000d478 <__locale_ctype_ptr+0x18>
8000d470:	800217b7          	lui	a5,0x80021
8000d474:	29878793          	addi	a5,a5,664 # 80021298 <__stack+0xfffe47cc>
8000d478:	0ec7a503          	lw	a0,236(a5)
8000d47c:	00008067          	ret

8000d480 <setlocale>:
8000d480:	800217b7          	lui	a5,0x80021
8000d484:	00058613          	mv	a2,a1
8000d488:	00050593          	mv	a1,a0
8000d48c:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000d490:	f35ff06f          	j	8000d3c4 <_setlocale_r>

8000d494 <__swhatbuf_r>:
8000d494:	fa010113          	addi	sp,sp,-96
8000d498:	04912a23          	sw	s1,84(sp)
8000d49c:	00058493          	mv	s1,a1
8000d4a0:	00e59583          	lh	a1,14(a1)
8000d4a4:	04812c23          	sw	s0,88(sp)
8000d4a8:	04112e23          	sw	ra,92(sp)
8000d4ac:	00060413          	mv	s0,a2
8000d4b0:	0005de63          	bgez	a1,8000d4cc <__swhatbuf_r+0x38>
8000d4b4:	00c4d783          	lhu	a5,12(s1)
8000d4b8:	0006a023          	sw	zero,0(a3)
8000d4bc:	0807f793          	andi	a5,a5,128
8000d4c0:	04079863          	bnez	a5,8000d510 <__swhatbuf_r+0x7c>
8000d4c4:	40000793          	li	a5,1024
8000d4c8:	04c0006f          	j	8000d514 <__swhatbuf_r+0x80>
8000d4cc:	01410613          	addi	a2,sp,20
8000d4d0:	00d12623          	sw	a3,12(sp)
8000d4d4:	595040ef          	jal	ra,80012268 <_fstat_r>
8000d4d8:	00c12683          	lw	a3,12(sp)
8000d4dc:	fc054ce3          	bltz	a0,8000d4b4 <__swhatbuf_r+0x20>
8000d4e0:	01812703          	lw	a4,24(sp)
8000d4e4:	0000f7b7          	lui	a5,0xf
8000d4e8:	00001537          	lui	a0,0x1
8000d4ec:	00e7f7b3          	and	a5,a5,a4
8000d4f0:	ffffe737          	lui	a4,0xffffe
8000d4f4:	00e787b3          	add	a5,a5,a4
8000d4f8:	0017b793          	seqz	a5,a5
8000d4fc:	00f6a023          	sw	a5,0(a3)
8000d500:	40000793          	li	a5,1024
8000d504:	00f42023          	sw	a5,0(s0)
8000d508:	80050513          	addi	a0,a0,-2048 # 800 <_HEAP_SIZE-0x800>
8000d50c:	0100006f          	j	8000d51c <__swhatbuf_r+0x88>
8000d510:	04000793          	li	a5,64
8000d514:	00f42023          	sw	a5,0(s0)
8000d518:	00000513          	li	a0,0
8000d51c:	05c12083          	lw	ra,92(sp)
8000d520:	05812403          	lw	s0,88(sp)
8000d524:	05412483          	lw	s1,84(sp)
8000d528:	06010113          	addi	sp,sp,96
8000d52c:	00008067          	ret

8000d530 <__smakebuf_r>:
8000d530:	00c5d783          	lhu	a5,12(a1)
8000d534:	fe010113          	addi	sp,sp,-32
8000d538:	00812c23          	sw	s0,24(sp)
8000d53c:	00112e23          	sw	ra,28(sp)
8000d540:	00912a23          	sw	s1,20(sp)
8000d544:	01212823          	sw	s2,16(sp)
8000d548:	0027f793          	andi	a5,a5,2
8000d54c:	00058413          	mv	s0,a1
8000d550:	02078863          	beqz	a5,8000d580 <__smakebuf_r+0x50>
8000d554:	04340793          	addi	a5,s0,67
8000d558:	00f42023          	sw	a5,0(s0)
8000d55c:	00f42823          	sw	a5,16(s0)
8000d560:	00100793          	li	a5,1
8000d564:	00f42a23          	sw	a5,20(s0)
8000d568:	01c12083          	lw	ra,28(sp)
8000d56c:	01812403          	lw	s0,24(sp)
8000d570:	01412483          	lw	s1,20(sp)
8000d574:	01012903          	lw	s2,16(sp)
8000d578:	02010113          	addi	sp,sp,32
8000d57c:	00008067          	ret
8000d580:	00c10693          	addi	a3,sp,12
8000d584:	00810613          	addi	a2,sp,8
8000d588:	00050493          	mv	s1,a0
8000d58c:	f09ff0ef          	jal	ra,8000d494 <__swhatbuf_r>
8000d590:	00812583          	lw	a1,8(sp)
8000d594:	00050913          	mv	s2,a0
8000d598:	00048513          	mv	a0,s1
8000d59c:	084000ef          	jal	ra,8000d620 <_malloc_r>
8000d5a0:	02051063          	bnez	a0,8000d5c0 <__smakebuf_r+0x90>
8000d5a4:	00c41783          	lh	a5,12(s0)
8000d5a8:	2007f713          	andi	a4,a5,512
8000d5ac:	fa071ee3          	bnez	a4,8000d568 <__smakebuf_r+0x38>
8000d5b0:	ffc7f793          	andi	a5,a5,-4
8000d5b4:	0027e793          	ori	a5,a5,2
8000d5b8:	00f41623          	sh	a5,12(s0)
8000d5bc:	f99ff06f          	j	8000d554 <__smakebuf_r+0x24>
8000d5c0:	8000b7b7          	lui	a5,0x8000b
8000d5c4:	bcc78793          	addi	a5,a5,-1076 # 8000abcc <__stack+0xfffce100>
8000d5c8:	02f4ae23          	sw	a5,60(s1)
8000d5cc:	00c45783          	lhu	a5,12(s0)
8000d5d0:	00a42023          	sw	a0,0(s0)
8000d5d4:	00a42823          	sw	a0,16(s0)
8000d5d8:	0807e793          	ori	a5,a5,128
8000d5dc:	00f41623          	sh	a5,12(s0)
8000d5e0:	00812783          	lw	a5,8(sp)
8000d5e4:	00f42a23          	sw	a5,20(s0)
8000d5e8:	00c12783          	lw	a5,12(sp)
8000d5ec:	02078263          	beqz	a5,8000d610 <__smakebuf_r+0xe0>
8000d5f0:	00e41583          	lh	a1,14(s0)
8000d5f4:	00048513          	mv	a0,s1
8000d5f8:	120050ef          	jal	ra,80012718 <_isatty_r>
8000d5fc:	00050a63          	beqz	a0,8000d610 <__smakebuf_r+0xe0>
8000d600:	00c45783          	lhu	a5,12(s0)
8000d604:	ffc7f793          	andi	a5,a5,-4
8000d608:	0017e793          	ori	a5,a5,1
8000d60c:	00f41623          	sh	a5,12(s0)
8000d610:	00c45783          	lhu	a5,12(s0)
8000d614:	00f96933          	or	s2,s2,a5
8000d618:	01241623          	sh	s2,12(s0)
8000d61c:	f4dff06f          	j	8000d568 <__smakebuf_r+0x38>

8000d620 <_malloc_r>:
8000d620:	fd010113          	addi	sp,sp,-48
8000d624:	02112623          	sw	ra,44(sp)
8000d628:	02812423          	sw	s0,40(sp)
8000d62c:	02912223          	sw	s1,36(sp)
8000d630:	03212023          	sw	s2,32(sp)
8000d634:	01312e23          	sw	s3,28(sp)
8000d638:	01412c23          	sw	s4,24(sp)
8000d63c:	01512a23          	sw	s5,20(sp)
8000d640:	01612823          	sw	s6,16(sp)
8000d644:	01712623          	sw	s7,12(sp)
8000d648:	01812423          	sw	s8,8(sp)
8000d64c:	00b58793          	addi	a5,a1,11
8000d650:	01600713          	li	a4,22
8000d654:	04f77463          	bleu	a5,a4,8000d69c <_malloc_r+0x7c>
8000d658:	ff87f493          	andi	s1,a5,-8
8000d65c:	0404d263          	bgez	s1,8000d6a0 <_malloc_r+0x80>
8000d660:	00c00793          	li	a5,12
8000d664:	00f52023          	sw	a5,0(a0)
8000d668:	00000513          	li	a0,0
8000d66c:	02c12083          	lw	ra,44(sp)
8000d670:	02812403          	lw	s0,40(sp)
8000d674:	02412483          	lw	s1,36(sp)
8000d678:	02012903          	lw	s2,32(sp)
8000d67c:	01c12983          	lw	s3,28(sp)
8000d680:	01812a03          	lw	s4,24(sp)
8000d684:	01412a83          	lw	s5,20(sp)
8000d688:	01012b03          	lw	s6,16(sp)
8000d68c:	00c12b83          	lw	s7,12(sp)
8000d690:	00812c03          	lw	s8,8(sp)
8000d694:	03010113          	addi	sp,sp,48
8000d698:	00008067          	ret
8000d69c:	01000493          	li	s1,16
8000d6a0:	fcb4e0e3          	bltu	s1,a1,8000d660 <_malloc_r+0x40>
8000d6a4:	00050993          	mv	s3,a0
8000d6a8:	670000ef          	jal	ra,8000dd18 <__malloc_lock>
8000d6ac:	80021937          	lui	s2,0x80021
8000d6b0:	1f700793          	li	a5,503
8000d6b4:	40490913          	addi	s2,s2,1028 # 80021404 <__stack+0xfffe4938>
8000d6b8:	0497ea63          	bltu	a5,s1,8000d70c <_malloc_r+0xec>
8000d6bc:	00848713          	addi	a4,s1,8
8000d6c0:	00e90733          	add	a4,s2,a4
8000d6c4:	00472403          	lw	s0,4(a4) # ffffe004 <__stack+0x7ffc1538>
8000d6c8:	ff870693          	addi	a3,a4,-8
8000d6cc:	0034d793          	srli	a5,s1,0x3
8000d6d0:	00d41863          	bne	s0,a3,8000d6e0 <_malloc_r+0xc0>
8000d6d4:	00c72403          	lw	s0,12(a4)
8000d6d8:	00278793          	addi	a5,a5,2
8000d6dc:	08870063          	beq	a4,s0,8000d75c <_malloc_r+0x13c>
8000d6e0:	00442783          	lw	a5,4(s0)
8000d6e4:	00c42703          	lw	a4,12(s0)
8000d6e8:	00842683          	lw	a3,8(s0)
8000d6ec:	ffc7f793          	andi	a5,a5,-4
8000d6f0:	00f407b3          	add	a5,s0,a5
8000d6f4:	00e6a623          	sw	a4,12(a3)
8000d6f8:	00d72423          	sw	a3,8(a4)
8000d6fc:	0047a703          	lw	a4,4(a5)
8000d700:	00176713          	ori	a4,a4,1
8000d704:	00e7a223          	sw	a4,4(a5)
8000d708:	0a80006f          	j	8000d7b0 <_malloc_r+0x190>
8000d70c:	0094d713          	srli	a4,s1,0x9
8000d710:	03f00793          	li	a5,63
8000d714:	00070a63          	beqz	a4,8000d728 <_malloc_r+0x108>
8000d718:	00400793          	li	a5,4
8000d71c:	0ae7e263          	bltu	a5,a4,8000d7c0 <_malloc_r+0x1a0>
8000d720:	0064d793          	srli	a5,s1,0x6
8000d724:	03878793          	addi	a5,a5,56
8000d728:	00178713          	addi	a4,a5,1
8000d72c:	00371713          	slli	a4,a4,0x3
8000d730:	00e90733          	add	a4,s2,a4
8000d734:	00472403          	lw	s0,4(a4)
8000d738:	ff870593          	addi	a1,a4,-8
8000d73c:	00f00513          	li	a0,15
8000d740:	00b40c63          	beq	s0,a1,8000d758 <_malloc_r+0x138>
8000d744:	00442703          	lw	a4,4(s0)
8000d748:	ffc77713          	andi	a4,a4,-4
8000d74c:	40970633          	sub	a2,a4,s1
8000d750:	0cc55063          	ble	a2,a0,8000d810 <_malloc_r+0x1f0>
8000d754:	fff78793          	addi	a5,a5,-1
8000d758:	00178793          	addi	a5,a5,1
8000d75c:	01092403          	lw	s0,16(s2)
8000d760:	800215b7          	lui	a1,0x80021
8000d764:	00890693          	addi	a3,s2,8
8000d768:	40c58593          	addi	a1,a1,1036 # 8002140c <__stack+0xfffe4940>
8000d76c:	12d40863          	beq	s0,a3,8000d89c <_malloc_r+0x27c>
8000d770:	00442703          	lw	a4,4(s0)
8000d774:	00f00613          	li	a2,15
8000d778:	ffc77713          	andi	a4,a4,-4
8000d77c:	40970533          	sub	a0,a4,s1
8000d780:	0aa65a63          	ble	a0,a2,8000d834 <_malloc_r+0x214>
8000d784:	0014e793          	ori	a5,s1,1
8000d788:	00f42223          	sw	a5,4(s0)
8000d78c:	00940633          	add	a2,s0,s1
8000d790:	00c92a23          	sw	a2,20(s2)
8000d794:	00c92823          	sw	a2,16(s2)
8000d798:	00156793          	ori	a5,a0,1
8000d79c:	00d62623          	sw	a3,12(a2)
8000d7a0:	00d62423          	sw	a3,8(a2)
8000d7a4:	00f62223          	sw	a5,4(a2)
8000d7a8:	00e40733          	add	a4,s0,a4
8000d7ac:	00a72023          	sw	a0,0(a4)
8000d7b0:	00098513          	mv	a0,s3
8000d7b4:	568000ef          	jal	ra,8000dd1c <__malloc_unlock>
8000d7b8:	00840513          	addi	a0,s0,8
8000d7bc:	eb1ff06f          	j	8000d66c <_malloc_r+0x4c>
8000d7c0:	01400793          	li	a5,20
8000d7c4:	00e7e663          	bltu	a5,a4,8000d7d0 <_malloc_r+0x1b0>
8000d7c8:	05b70793          	addi	a5,a4,91
8000d7cc:	f5dff06f          	j	8000d728 <_malloc_r+0x108>
8000d7d0:	05400793          	li	a5,84
8000d7d4:	00e7e863          	bltu	a5,a4,8000d7e4 <_malloc_r+0x1c4>
8000d7d8:	00c4d793          	srli	a5,s1,0xc
8000d7dc:	06e78793          	addi	a5,a5,110
8000d7e0:	f49ff06f          	j	8000d728 <_malloc_r+0x108>
8000d7e4:	15400793          	li	a5,340
8000d7e8:	00e7e863          	bltu	a5,a4,8000d7f8 <_malloc_r+0x1d8>
8000d7ec:	00f4d793          	srli	a5,s1,0xf
8000d7f0:	07778793          	addi	a5,a5,119
8000d7f4:	f35ff06f          	j	8000d728 <_malloc_r+0x108>
8000d7f8:	55400693          	li	a3,1364
8000d7fc:	07e00793          	li	a5,126
8000d800:	f2e6e4e3          	bltu	a3,a4,8000d728 <_malloc_r+0x108>
8000d804:	0124d793          	srli	a5,s1,0x12
8000d808:	07c78793          	addi	a5,a5,124
8000d80c:	f1dff06f          	j	8000d728 <_malloc_r+0x108>
8000d810:	00c42683          	lw	a3,12(s0)
8000d814:	00064c63          	bltz	a2,8000d82c <_malloc_r+0x20c>
8000d818:	00842783          	lw	a5,8(s0)
8000d81c:	00d7a623          	sw	a3,12(a5)
8000d820:	00f6a423          	sw	a5,8(a3)
8000d824:	00e407b3          	add	a5,s0,a4
8000d828:	ed5ff06f          	j	8000d6fc <_malloc_r+0xdc>
8000d82c:	00068413          	mv	s0,a3
8000d830:	f11ff06f          	j	8000d740 <_malloc_r+0x120>
8000d834:	00d92a23          	sw	a3,20(s2)
8000d838:	00d92823          	sw	a3,16(s2)
8000d83c:	00054c63          	bltz	a0,8000d854 <_malloc_r+0x234>
8000d840:	00e40733          	add	a4,s0,a4
8000d844:	00472783          	lw	a5,4(a4)
8000d848:	0017e793          	ori	a5,a5,1
8000d84c:	00f72223          	sw	a5,4(a4)
8000d850:	f61ff06f          	j	8000d7b0 <_malloc_r+0x190>
8000d854:	1ff00693          	li	a3,511
8000d858:	00492803          	lw	a6,4(s2)
8000d85c:	18e6e063          	bltu	a3,a4,8000d9dc <_malloc_r+0x3bc>
8000d860:	00375713          	srli	a4,a4,0x3
8000d864:	40275613          	srai	a2,a4,0x2
8000d868:	00100693          	li	a3,1
8000d86c:	00170713          	addi	a4,a4,1
8000d870:	00c696b3          	sll	a3,a3,a2
8000d874:	00371713          	slli	a4,a4,0x3
8000d878:	00e90733          	add	a4,s2,a4
8000d87c:	0106e6b3          	or	a3,a3,a6
8000d880:	00d92223          	sw	a3,4(s2)
8000d884:	00072683          	lw	a3,0(a4)
8000d888:	ff870613          	addi	a2,a4,-8
8000d88c:	00c42623          	sw	a2,12(s0)
8000d890:	00d42423          	sw	a3,8(s0)
8000d894:	00872023          	sw	s0,0(a4)
8000d898:	0086a623          	sw	s0,12(a3)
8000d89c:	4027d713          	srai	a4,a5,0x2
8000d8a0:	00100313          	li	t1,1
8000d8a4:	00e31333          	sll	t1,t1,a4
8000d8a8:	00492703          	lw	a4,4(s2)
8000d8ac:	06676a63          	bltu	a4,t1,8000d920 <_malloc_r+0x300>
8000d8b0:	006776b3          	and	a3,a4,t1
8000d8b4:	00069c63          	bnez	a3,8000d8cc <_malloc_r+0x2ac>
8000d8b8:	ffc7f793          	andi	a5,a5,-4
8000d8bc:	00131313          	slli	t1,t1,0x1
8000d8c0:	006776b3          	and	a3,a4,t1
8000d8c4:	00478793          	addi	a5,a5,4
8000d8c8:	fe068ae3          	beqz	a3,8000d8bc <_malloc_r+0x29c>
8000d8cc:	00f00e13          	li	t3,15
8000d8d0:	00379693          	slli	a3,a5,0x3
8000d8d4:	00d906b3          	add	a3,s2,a3
8000d8d8:	00068813          	mv	a6,a3
8000d8dc:	00078513          	mv	a0,a5
8000d8e0:	00c82403          	lw	s0,12(a6)
8000d8e4:	1b041c63          	bne	s0,a6,8000da9c <_malloc_r+0x47c>
8000d8e8:	00150513          	addi	a0,a0,1
8000d8ec:	00357713          	andi	a4,a0,3
8000d8f0:	00880813          	addi	a6,a6,8
8000d8f4:	fe0716e3          	bnez	a4,8000d8e0 <_malloc_r+0x2c0>
8000d8f8:	0037f713          	andi	a4,a5,3
8000d8fc:	20071e63          	bnez	a4,8000db18 <_malloc_r+0x4f8>
8000d900:	00492703          	lw	a4,4(s2)
8000d904:	fff34793          	not	a5,t1
8000d908:	00f777b3          	and	a5,a4,a5
8000d90c:	00f92223          	sw	a5,4(s2)
8000d910:	00492703          	lw	a4,4(s2)
8000d914:	00131313          	slli	t1,t1,0x1
8000d918:	00676463          	bltu	a4,t1,8000d920 <_malloc_r+0x300>
8000d91c:	22031263          	bnez	t1,8000db40 <_malloc_r+0x520>
8000d920:	00892b83          	lw	s7,8(s2)
8000d924:	004ba403          	lw	s0,4(s7)
8000d928:	ffc47a93          	andi	s5,s0,-4
8000d92c:	009ae863          	bltu	s5,s1,8000d93c <_malloc_r+0x31c>
8000d930:	409a8733          	sub	a4,s5,s1
8000d934:	00f00793          	li	a5,15
8000d938:	32e7c463          	blt	a5,a4,8000dc60 <_malloc_r+0x640>
8000d93c:	800217b7          	lui	a5,0x80021
8000d940:	80021a37          	lui	s4,0x80021
8000d944:	e2c7a403          	lw	s0,-468(a5) # 80020e2c <__stack+0xfffe4360>
8000d948:	e68a2703          	lw	a4,-408(s4) # 80020e68 <__stack+0xfffe439c>
8000d94c:	fff00793          	li	a5,-1
8000d950:	00848433          	add	s0,s1,s0
8000d954:	1ef71a63          	bne	a4,a5,8000db48 <_malloc_r+0x528>
8000d958:	01040413          	addi	s0,s0,16
8000d95c:	00040593          	mv	a1,s0
8000d960:	00098513          	mv	a0,s3
8000d964:	24c010ef          	jal	ra,8000ebb0 <_sbrk_r>
8000d968:	fff00793          	li	a5,-1
8000d96c:	00050b13          	mv	s6,a0
8000d970:	26f50e63          	beq	a0,a5,8000dbec <_malloc_r+0x5cc>
8000d974:	015b87b3          	add	a5,s7,s5
8000d978:	00f57463          	bleu	a5,a0,8000d980 <_malloc_r+0x360>
8000d97c:	272b9863          	bne	s7,s2,8000dbec <_malloc_r+0x5cc>
8000d980:	8003bc37          	lui	s8,0x8003b
8000d984:	a00c0693          	addi	a3,s8,-1536 # 8003aa00 <__stack+0xffffdf34>
8000d988:	0006a703          	lw	a4,0(a3)
8000d98c:	a00c0c13          	addi	s8,s8,-1536
8000d990:	00e40733          	add	a4,s0,a4
8000d994:	00e6a023          	sw	a4,0(a3)
8000d998:	1d679463          	bne	a5,s6,8000db60 <_malloc_r+0x540>
8000d99c:	01479693          	slli	a3,a5,0x14
8000d9a0:	1c069063          	bnez	a3,8000db60 <_malloc_r+0x540>
8000d9a4:	00892783          	lw	a5,8(s2)
8000d9a8:	008a8433          	add	s0,s5,s0
8000d9ac:	00146413          	ori	s0,s0,1
8000d9b0:	0087a223          	sw	s0,4(a5)
8000d9b4:	80021737          	lui	a4,0x80021
8000d9b8:	000c2783          	lw	a5,0(s8)
8000d9bc:	e2872683          	lw	a3,-472(a4) # 80020e28 <__stack+0xfffe435c>
8000d9c0:	00f6f463          	bleu	a5,a3,8000d9c8 <_malloc_r+0x3a8>
8000d9c4:	e2f72423          	sw	a5,-472(a4)
8000d9c8:	80021737          	lui	a4,0x80021
8000d9cc:	e2472683          	lw	a3,-476(a4) # 80020e24 <__stack+0xfffe4358>
8000d9d0:	20f6fe63          	bleu	a5,a3,8000dbec <_malloc_r+0x5cc>
8000d9d4:	e2f72223          	sw	a5,-476(a4)
8000d9d8:	2140006f          	j	8000dbec <_malloc_r+0x5cc>
8000d9dc:	00975613          	srli	a2,a4,0x9
8000d9e0:	00400693          	li	a3,4
8000d9e4:	04c6e663          	bltu	a3,a2,8000da30 <_malloc_r+0x410>
8000d9e8:	00675693          	srli	a3,a4,0x6
8000d9ec:	03868693          	addi	a3,a3,56
8000d9f0:	00168613          	addi	a2,a3,1
8000d9f4:	00361613          	slli	a2,a2,0x3
8000d9f8:	00c90633          	add	a2,s2,a2
8000d9fc:	ff860513          	addi	a0,a2,-8
8000da00:	00062603          	lw	a2,0(a2)
8000da04:	08c51263          	bne	a0,a2,8000da88 <_malloc_r+0x468>
8000da08:	4026d693          	srai	a3,a3,0x2
8000da0c:	00100713          	li	a4,1
8000da10:	00d716b3          	sll	a3,a4,a3
8000da14:	0106e6b3          	or	a3,a3,a6
8000da18:	00d92223          	sw	a3,4(s2)
8000da1c:	00a42623          	sw	a0,12(s0)
8000da20:	00c42423          	sw	a2,8(s0)
8000da24:	00852423          	sw	s0,8(a0)
8000da28:	00862623          	sw	s0,12(a2)
8000da2c:	e71ff06f          	j	8000d89c <_malloc_r+0x27c>
8000da30:	01400693          	li	a3,20
8000da34:	00c6e663          	bltu	a3,a2,8000da40 <_malloc_r+0x420>
8000da38:	05b60693          	addi	a3,a2,91
8000da3c:	fb5ff06f          	j	8000d9f0 <_malloc_r+0x3d0>
8000da40:	05400693          	li	a3,84
8000da44:	00c6e863          	bltu	a3,a2,8000da54 <_malloc_r+0x434>
8000da48:	00c75693          	srli	a3,a4,0xc
8000da4c:	06e68693          	addi	a3,a3,110
8000da50:	fa1ff06f          	j	8000d9f0 <_malloc_r+0x3d0>
8000da54:	15400693          	li	a3,340
8000da58:	00c6e863          	bltu	a3,a2,8000da68 <_malloc_r+0x448>
8000da5c:	00f75693          	srli	a3,a4,0xf
8000da60:	07768693          	addi	a3,a3,119
8000da64:	f8dff06f          	j	8000d9f0 <_malloc_r+0x3d0>
8000da68:	55400513          	li	a0,1364
8000da6c:	07e00693          	li	a3,126
8000da70:	f8c560e3          	bltu	a0,a2,8000d9f0 <_malloc_r+0x3d0>
8000da74:	01275693          	srli	a3,a4,0x12
8000da78:	07c68693          	addi	a3,a3,124
8000da7c:	f75ff06f          	j	8000d9f0 <_malloc_r+0x3d0>
8000da80:	00862603          	lw	a2,8(a2)
8000da84:	00c50863          	beq	a0,a2,8000da94 <_malloc_r+0x474>
8000da88:	00462683          	lw	a3,4(a2)
8000da8c:	ffc6f693          	andi	a3,a3,-4
8000da90:	fed768e3          	bltu	a4,a3,8000da80 <_malloc_r+0x460>
8000da94:	00c62503          	lw	a0,12(a2)
8000da98:	f85ff06f          	j	8000da1c <_malloc_r+0x3fc>
8000da9c:	00442703          	lw	a4,4(s0)
8000daa0:	00c42603          	lw	a2,12(s0)
8000daa4:	ffc77713          	andi	a4,a4,-4
8000daa8:	409708b3          	sub	a7,a4,s1
8000daac:	051e5063          	ble	a7,t3,8000daec <_malloc_r+0x4cc>
8000dab0:	0014e793          	ori	a5,s1,1
8000dab4:	00f42223          	sw	a5,4(s0)
8000dab8:	00842783          	lw	a5,8(s0)
8000dabc:	009406b3          	add	a3,s0,s1
8000dac0:	00e40733          	add	a4,s0,a4
8000dac4:	00c7a623          	sw	a2,12(a5)
8000dac8:	00f62423          	sw	a5,8(a2)
8000dacc:	00d92a23          	sw	a3,20(s2)
8000dad0:	00d92823          	sw	a3,16(s2)
8000dad4:	0018e793          	ori	a5,a7,1
8000dad8:	00b6a623          	sw	a1,12(a3)
8000dadc:	00b6a423          	sw	a1,8(a3)
8000dae0:	00f6a223          	sw	a5,4(a3)
8000dae4:	01172023          	sw	a7,0(a4)
8000dae8:	cc9ff06f          	j	8000d7b0 <_malloc_r+0x190>
8000daec:	0208c263          	bltz	a7,8000db10 <_malloc_r+0x4f0>
8000daf0:	00e40733          	add	a4,s0,a4
8000daf4:	00472783          	lw	a5,4(a4)
8000daf8:	0017e793          	ori	a5,a5,1
8000dafc:	00f72223          	sw	a5,4(a4)
8000db00:	00842783          	lw	a5,8(s0)
8000db04:	00c7a623          	sw	a2,12(a5)
8000db08:	00f62423          	sw	a5,8(a2)
8000db0c:	ca5ff06f          	j	8000d7b0 <_malloc_r+0x190>
8000db10:	00060413          	mv	s0,a2
8000db14:	dd1ff06f          	j	8000d8e4 <_malloc_r+0x2c4>
8000db18:	ff868713          	addi	a4,a3,-8
8000db1c:	0006a683          	lw	a3,0(a3)
8000db20:	fff78793          	addi	a5,a5,-1
8000db24:	dce68ae3          	beq	a3,a4,8000d8f8 <_malloc_r+0x2d8>
8000db28:	de9ff06f          	j	8000d910 <_malloc_r+0x2f0>
8000db2c:	00478793          	addi	a5,a5,4
8000db30:	00131313          	slli	t1,t1,0x1
8000db34:	006776b3          	and	a3,a4,t1
8000db38:	fe068ae3          	beqz	a3,8000db2c <_malloc_r+0x50c>
8000db3c:	d95ff06f          	j	8000d8d0 <_malloc_r+0x2b0>
8000db40:	00050793          	mv	a5,a0
8000db44:	ff1ff06f          	j	8000db34 <_malloc_r+0x514>
8000db48:	000017b7          	lui	a5,0x1
8000db4c:	00f78793          	addi	a5,a5,15 # 100f <_HEAP_SIZE+0xf>
8000db50:	00f40433          	add	s0,s0,a5
8000db54:	fffff7b7          	lui	a5,0xfffff
8000db58:	00f47433          	and	s0,s0,a5
8000db5c:	e01ff06f          	j	8000d95c <_malloc_r+0x33c>
8000db60:	e68a2603          	lw	a2,-408(s4)
8000db64:	fff00693          	li	a3,-1
8000db68:	0ad61663          	bne	a2,a3,8000dc14 <_malloc_r+0x5f4>
8000db6c:	e76a2423          	sw	s6,-408(s4)
8000db70:	007b7593          	andi	a1,s6,7
8000db74:	00058863          	beqz	a1,8000db84 <_malloc_r+0x564>
8000db78:	00800793          	li	a5,8
8000db7c:	40b785b3          	sub	a1,a5,a1
8000db80:	00bb0b33          	add	s6,s6,a1
8000db84:	000017b7          	lui	a5,0x1
8000db88:	00f585b3          	add	a1,a1,a5
8000db8c:	008b0433          	add	s0,s6,s0
8000db90:	fff78793          	addi	a5,a5,-1 # fff <_HEAP_SIZE-0x1>
8000db94:	00f47433          	and	s0,s0,a5
8000db98:	40858a33          	sub	s4,a1,s0
8000db9c:	000a0593          	mv	a1,s4
8000dba0:	00098513          	mv	a0,s3
8000dba4:	00c010ef          	jal	ra,8000ebb0 <_sbrk_r>
8000dba8:	fff00793          	li	a5,-1
8000dbac:	00f51663          	bne	a0,a5,8000dbb8 <_malloc_r+0x598>
8000dbb0:	000b0513          	mv	a0,s6
8000dbb4:	00000a13          	li	s4,0
8000dbb8:	000c2783          	lw	a5,0(s8)
8000dbbc:	41650533          	sub	a0,a0,s6
8000dbc0:	01692423          	sw	s6,8(s2)
8000dbc4:	014787b3          	add	a5,a5,s4
8000dbc8:	01450a33          	add	s4,a0,s4
8000dbcc:	001a6a13          	ori	s4,s4,1
8000dbd0:	00fc2023          	sw	a5,0(s8)
8000dbd4:	014b2223          	sw	s4,4(s6)
8000dbd8:	dd2b8ee3          	beq	s7,s2,8000d9b4 <_malloc_r+0x394>
8000dbdc:	00f00713          	li	a4,15
8000dbe0:	05576263          	bltu	a4,s5,8000dc24 <_malloc_r+0x604>
8000dbe4:	00100793          	li	a5,1
8000dbe8:	00fb2223          	sw	a5,4(s6)
8000dbec:	00892783          	lw	a5,8(s2)
8000dbf0:	0047a783          	lw	a5,4(a5)
8000dbf4:	ffc7f793          	andi	a5,a5,-4
8000dbf8:	40978733          	sub	a4,a5,s1
8000dbfc:	0097e663          	bltu	a5,s1,8000dc08 <_malloc_r+0x5e8>
8000dc00:	00f00793          	li	a5,15
8000dc04:	04e7ce63          	blt	a5,a4,8000dc60 <_malloc_r+0x640>
8000dc08:	00098513          	mv	a0,s3
8000dc0c:	110000ef          	jal	ra,8000dd1c <__malloc_unlock>
8000dc10:	a59ff06f          	j	8000d668 <_malloc_r+0x48>
8000dc14:	40fb07b3          	sub	a5,s6,a5
8000dc18:	00e787b3          	add	a5,a5,a4
8000dc1c:	00fc2023          	sw	a5,0(s8)
8000dc20:	f51ff06f          	j	8000db70 <_malloc_r+0x550>
8000dc24:	004ba783          	lw	a5,4(s7)
8000dc28:	ff4a8413          	addi	s0,s5,-12
8000dc2c:	ff847413          	andi	s0,s0,-8
8000dc30:	0017f793          	andi	a5,a5,1
8000dc34:	0087e7b3          	or	a5,a5,s0
8000dc38:	00fba223          	sw	a5,4(s7)
8000dc3c:	00500693          	li	a3,5
8000dc40:	008b87b3          	add	a5,s7,s0
8000dc44:	00d7a223          	sw	a3,4(a5)
8000dc48:	00d7a423          	sw	a3,8(a5)
8000dc4c:	d68774e3          	bleu	s0,a4,8000d9b4 <_malloc_r+0x394>
8000dc50:	008b8593          	addi	a1,s7,8
8000dc54:	00098513          	mv	a0,s3
8000dc58:	b4cfd0ef          	jal	ra,8000afa4 <_free_r>
8000dc5c:	d59ff06f          	j	8000d9b4 <_malloc_r+0x394>
8000dc60:	00892403          	lw	s0,8(s2)
8000dc64:	0014e793          	ori	a5,s1,1
8000dc68:	00f42223          	sw	a5,4(s0)
8000dc6c:	009407b3          	add	a5,s0,s1
8000dc70:	00f92423          	sw	a5,8(s2)
8000dc74:	a8dff06f          	j	8000d700 <_malloc_r+0xe0>

8000dc78 <_mbtowc_r>:
8000dc78:	800217b7          	lui	a5,0x80021
8000dc7c:	e647a783          	lw	a5,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000dc80:	0347a783          	lw	a5,52(a5)
8000dc84:	00079663          	bnez	a5,8000dc90 <_mbtowc_r+0x18>
8000dc88:	800217b7          	lui	a5,0x80021
8000dc8c:	29878793          	addi	a5,a5,664 # 80021298 <__stack+0xfffe47cc>
8000dc90:	0e47a303          	lw	t1,228(a5)
8000dc94:	00030067          	jr	t1

8000dc98 <__ascii_mbtowc>:
8000dc98:	02059a63          	bnez	a1,8000dccc <__ascii_mbtowc+0x34>
8000dc9c:	ff010113          	addi	sp,sp,-16
8000dca0:	00c10593          	addi	a1,sp,12
8000dca4:	00000513          	li	a0,0
8000dca8:	00060e63          	beqz	a2,8000dcc4 <__ascii_mbtowc+0x2c>
8000dcac:	ffe00513          	li	a0,-2
8000dcb0:	00068a63          	beqz	a3,8000dcc4 <__ascii_mbtowc+0x2c>
8000dcb4:	00064783          	lbu	a5,0(a2)
8000dcb8:	00f5a023          	sw	a5,0(a1)
8000dcbc:	00064503          	lbu	a0,0(a2)
8000dcc0:	00a03533          	snez	a0,a0
8000dcc4:	01010113          	addi	sp,sp,16
8000dcc8:	00008067          	ret
8000dccc:	00000513          	li	a0,0
8000dcd0:	02060063          	beqz	a2,8000dcf0 <__ascii_mbtowc+0x58>
8000dcd4:	ffe00513          	li	a0,-2
8000dcd8:	00068c63          	beqz	a3,8000dcf0 <__ascii_mbtowc+0x58>
8000dcdc:	00064783          	lbu	a5,0(a2)
8000dce0:	00f5a023          	sw	a5,0(a1)
8000dce4:	00064503          	lbu	a0,0(a2)
8000dce8:	00a03533          	snez	a0,a0
8000dcec:	00008067          	ret
8000dcf0:	00008067          	ret

8000dcf4 <memchr>:
8000dcf4:	0ff5f593          	andi	a1,a1,255
8000dcf8:	00c50633          	add	a2,a0,a2
8000dcfc:	00c51663          	bne	a0,a2,8000dd08 <memchr+0x14>
8000dd00:	00000513          	li	a0,0
8000dd04:	00008067          	ret
8000dd08:	00054783          	lbu	a5,0(a0)
8000dd0c:	feb78ce3          	beq	a5,a1,8000dd04 <memchr+0x10>
8000dd10:	00150513          	addi	a0,a0,1
8000dd14:	fe9ff06f          	j	8000dcfc <memchr+0x8>

8000dd18 <__malloc_lock>:
8000dd18:	00008067          	ret

8000dd1c <__malloc_unlock>:
8000dd1c:	00008067          	ret

8000dd20 <_Balloc>:
8000dd20:	04c52783          	lw	a5,76(a0)
8000dd24:	ff010113          	addi	sp,sp,-16
8000dd28:	00912223          	sw	s1,4(sp)
8000dd2c:	01212023          	sw	s2,0(sp)
8000dd30:	00112623          	sw	ra,12(sp)
8000dd34:	00812423          	sw	s0,8(sp)
8000dd38:	00050493          	mv	s1,a0
8000dd3c:	00058913          	mv	s2,a1
8000dd40:	04078263          	beqz	a5,8000dd84 <_Balloc+0x64>
8000dd44:	04c4a703          	lw	a4,76(s1)
8000dd48:	00291793          	slli	a5,s2,0x2
8000dd4c:	00f707b3          	add	a5,a4,a5
8000dd50:	0007a503          	lw	a0,0(a5)
8000dd54:	06051063          	bnez	a0,8000ddb4 <_Balloc+0x94>
8000dd58:	00100413          	li	s0,1
8000dd5c:	01241433          	sll	s0,s0,s2
8000dd60:	00540613          	addi	a2,s0,5
8000dd64:	00261613          	slli	a2,a2,0x2
8000dd68:	00100593          	li	a1,1
8000dd6c:	00048513          	mv	a0,s1
8000dd70:	18c040ef          	jal	ra,80011efc <_calloc_r>
8000dd74:	02050263          	beqz	a0,8000dd98 <_Balloc+0x78>
8000dd78:	01252223          	sw	s2,4(a0)
8000dd7c:	00852423          	sw	s0,8(a0)
8000dd80:	03c0006f          	j	8000ddbc <_Balloc+0x9c>
8000dd84:	02100613          	li	a2,33
8000dd88:	00400593          	li	a1,4
8000dd8c:	170040ef          	jal	ra,80011efc <_calloc_r>
8000dd90:	04a4a623          	sw	a0,76(s1)
8000dd94:	fa0518e3          	bnez	a0,8000dd44 <_Balloc+0x24>
8000dd98:	00000513          	li	a0,0
8000dd9c:	00c12083          	lw	ra,12(sp)
8000dda0:	00812403          	lw	s0,8(sp)
8000dda4:	00412483          	lw	s1,4(sp)
8000dda8:	00012903          	lw	s2,0(sp)
8000ddac:	01010113          	addi	sp,sp,16
8000ddb0:	00008067          	ret
8000ddb4:	00052703          	lw	a4,0(a0)
8000ddb8:	00e7a023          	sw	a4,0(a5)
8000ddbc:	00052823          	sw	zero,16(a0)
8000ddc0:	00052623          	sw	zero,12(a0)
8000ddc4:	fd9ff06f          	j	8000dd9c <_Balloc+0x7c>

8000ddc8 <_Bfree>:
8000ddc8:	02058063          	beqz	a1,8000dde8 <_Bfree+0x20>
8000ddcc:	0045a783          	lw	a5,4(a1)
8000ddd0:	00279713          	slli	a4,a5,0x2
8000ddd4:	04c52783          	lw	a5,76(a0)
8000ddd8:	00e787b3          	add	a5,a5,a4
8000dddc:	0007a703          	lw	a4,0(a5)
8000dde0:	00e5a023          	sw	a4,0(a1)
8000dde4:	00b7a023          	sw	a1,0(a5)
8000dde8:	00008067          	ret

8000ddec <__multadd>:
8000ddec:	fd010113          	addi	sp,sp,-48
8000ddf0:	01312e23          	sw	s3,28(sp)
8000ddf4:	00050993          	mv	s3,a0
8000ddf8:	00010537          	lui	a0,0x10
8000ddfc:	02812423          	sw	s0,40(sp)
8000de00:	02912223          	sw	s1,36(sp)
8000de04:	00058413          	mv	s0,a1
8000de08:	0105a483          	lw	s1,16(a1)
8000de0c:	02112623          	sw	ra,44(sp)
8000de10:	03212023          	sw	s2,32(sp)
8000de14:	01458593          	addi	a1,a1,20
8000de18:	00000813          	li	a6,0
8000de1c:	fff50513          	addi	a0,a0,-1 # ffff <_HEAP_SIZE+0xefff>
8000de20:	0005a783          	lw	a5,0(a1)
8000de24:	00458593          	addi	a1,a1,4
8000de28:	00180813          	addi	a6,a6,1
8000de2c:	00a7f733          	and	a4,a5,a0
8000de30:	02c70733          	mul	a4,a4,a2
8000de34:	0107d793          	srli	a5,a5,0x10
8000de38:	02c787b3          	mul	a5,a5,a2
8000de3c:	00d70733          	add	a4,a4,a3
8000de40:	01075693          	srli	a3,a4,0x10
8000de44:	00a77733          	and	a4,a4,a0
8000de48:	00d787b3          	add	a5,a5,a3
8000de4c:	0107d693          	srli	a3,a5,0x10
8000de50:	01079793          	slli	a5,a5,0x10
8000de54:	00e787b3          	add	a5,a5,a4
8000de58:	fef5ae23          	sw	a5,-4(a1)
8000de5c:	fc9842e3          	blt	a6,s1,8000de20 <__multadd+0x34>
8000de60:	06068463          	beqz	a3,8000dec8 <__multadd+0xdc>
8000de64:	00842783          	lw	a5,8(s0)
8000de68:	04f4c463          	blt	s1,a5,8000deb0 <__multadd+0xc4>
8000de6c:	00442583          	lw	a1,4(s0)
8000de70:	00098513          	mv	a0,s3
8000de74:	00d12623          	sw	a3,12(sp)
8000de78:	00158593          	addi	a1,a1,1
8000de7c:	ea5ff0ef          	jal	ra,8000dd20 <_Balloc>
8000de80:	01042603          	lw	a2,16(s0)
8000de84:	00c40593          	addi	a1,s0,12
8000de88:	00050913          	mv	s2,a0
8000de8c:	00260613          	addi	a2,a2,2
8000de90:	00261613          	slli	a2,a2,0x2
8000de94:	00c50513          	addi	a0,a0,12
8000de98:	eacfa0ef          	jal	ra,80008544 <memcpy>
8000de9c:	00040593          	mv	a1,s0
8000dea0:	00098513          	mv	a0,s3
8000dea4:	f25ff0ef          	jal	ra,8000ddc8 <_Bfree>
8000dea8:	00c12683          	lw	a3,12(sp)
8000deac:	00090413          	mv	s0,s2
8000deb0:	00448793          	addi	a5,s1,4
8000deb4:	00279793          	slli	a5,a5,0x2
8000deb8:	00f407b3          	add	a5,s0,a5
8000debc:	00d7a223          	sw	a3,4(a5)
8000dec0:	00148493          	addi	s1,s1,1
8000dec4:	00942823          	sw	s1,16(s0)
8000dec8:	00040513          	mv	a0,s0
8000decc:	02c12083          	lw	ra,44(sp)
8000ded0:	02812403          	lw	s0,40(sp)
8000ded4:	02412483          	lw	s1,36(sp)
8000ded8:	02012903          	lw	s2,32(sp)
8000dedc:	01c12983          	lw	s3,28(sp)
8000dee0:	03010113          	addi	sp,sp,48
8000dee4:	00008067          	ret

8000dee8 <__s2b>:
8000dee8:	fd010113          	addi	sp,sp,-48
8000deec:	00868793          	addi	a5,a3,8
8000def0:	01512a23          	sw	s5,20(sp)
8000def4:	00068a93          	mv	s5,a3
8000def8:	00900693          	li	a3,9
8000defc:	02812423          	sw	s0,40(sp)
8000df00:	02912223          	sw	s1,36(sp)
8000df04:	01412c23          	sw	s4,24(sp)
8000df08:	00058413          	mv	s0,a1
8000df0c:	02d7c7b3          	div	a5,a5,a3
8000df10:	02112623          	sw	ra,44(sp)
8000df14:	03212023          	sw	s2,32(sp)
8000df18:	01312e23          	sw	s3,28(sp)
8000df1c:	00050a13          	mv	s4,a0
8000df20:	00060493          	mv	s1,a2
8000df24:	00100693          	li	a3,1
8000df28:	00000593          	li	a1,0
8000df2c:	08f6c663          	blt	a3,a5,8000dfb8 <__s2b+0xd0>
8000df30:	000a0513          	mv	a0,s4
8000df34:	00e12623          	sw	a4,12(sp)
8000df38:	de9ff0ef          	jal	ra,8000dd20 <_Balloc>
8000df3c:	00c12703          	lw	a4,12(sp)
8000df40:	00100793          	li	a5,1
8000df44:	00f52823          	sw	a5,16(a0)
8000df48:	00e52a23          	sw	a4,20(a0)
8000df4c:	00900793          	li	a5,9
8000df50:	0697da63          	ble	s1,a5,8000dfc4 <__s2b+0xdc>
8000df54:	00940913          	addi	s2,s0,9
8000df58:	00090993          	mv	s3,s2
8000df5c:	00940433          	add	s0,s0,s1
8000df60:	00198993          	addi	s3,s3,1
8000df64:	fff9c683          	lbu	a3,-1(s3)
8000df68:	00050593          	mv	a1,a0
8000df6c:	00a00613          	li	a2,10
8000df70:	fd068693          	addi	a3,a3,-48
8000df74:	000a0513          	mv	a0,s4
8000df78:	e75ff0ef          	jal	ra,8000ddec <__multadd>
8000df7c:	fe8992e3          	bne	s3,s0,8000df60 <__s2b+0x78>
8000df80:	00990433          	add	s0,s2,s1
8000df84:	ff840413          	addi	s0,s0,-8
8000df88:	408484b3          	sub	s1,s1,s0
8000df8c:	009407b3          	add	a5,s0,s1
8000df90:	0557c063          	blt	a5,s5,8000dfd0 <__s2b+0xe8>
8000df94:	02c12083          	lw	ra,44(sp)
8000df98:	02812403          	lw	s0,40(sp)
8000df9c:	02412483          	lw	s1,36(sp)
8000dfa0:	02012903          	lw	s2,32(sp)
8000dfa4:	01c12983          	lw	s3,28(sp)
8000dfa8:	01812a03          	lw	s4,24(sp)
8000dfac:	01412a83          	lw	s5,20(sp)
8000dfb0:	03010113          	addi	sp,sp,48
8000dfb4:	00008067          	ret
8000dfb8:	00169693          	slli	a3,a3,0x1
8000dfbc:	00158593          	addi	a1,a1,1
8000dfc0:	f6dff06f          	j	8000df2c <__s2b+0x44>
8000dfc4:	00a40413          	addi	s0,s0,10
8000dfc8:	00900493          	li	s1,9
8000dfcc:	fbdff06f          	j	8000df88 <__s2b+0xa0>
8000dfd0:	00140413          	addi	s0,s0,1
8000dfd4:	fff44683          	lbu	a3,-1(s0)
8000dfd8:	00050593          	mv	a1,a0
8000dfdc:	00a00613          	li	a2,10
8000dfe0:	fd068693          	addi	a3,a3,-48
8000dfe4:	000a0513          	mv	a0,s4
8000dfe8:	e05ff0ef          	jal	ra,8000ddec <__multadd>
8000dfec:	fa1ff06f          	j	8000df8c <__s2b+0xa4>

8000dff0 <__hi0bits>:
8000dff0:	ffff0737          	lui	a4,0xffff0
8000dff4:	00e57733          	and	a4,a0,a4
8000dff8:	00050793          	mv	a5,a0
8000dffc:	00000513          	li	a0,0
8000e000:	00071663          	bnez	a4,8000e00c <__hi0bits+0x1c>
8000e004:	01079793          	slli	a5,a5,0x10
8000e008:	01000513          	li	a0,16
8000e00c:	ff000737          	lui	a4,0xff000
8000e010:	00e7f733          	and	a4,a5,a4
8000e014:	00071663          	bnez	a4,8000e020 <__hi0bits+0x30>
8000e018:	00850513          	addi	a0,a0,8
8000e01c:	00879793          	slli	a5,a5,0x8
8000e020:	f0000737          	lui	a4,0xf0000
8000e024:	00e7f733          	and	a4,a5,a4
8000e028:	00071663          	bnez	a4,8000e034 <__hi0bits+0x44>
8000e02c:	00450513          	addi	a0,a0,4
8000e030:	00479793          	slli	a5,a5,0x4
8000e034:	c0000737          	lui	a4,0xc0000
8000e038:	00e7f733          	and	a4,a5,a4
8000e03c:	00071663          	bnez	a4,8000e048 <__hi0bits+0x58>
8000e040:	00250513          	addi	a0,a0,2
8000e044:	00279793          	slli	a5,a5,0x2
8000e048:	0007cc63          	bltz	a5,8000e060 <__hi0bits+0x70>
8000e04c:	00179713          	slli	a4,a5,0x1
8000e050:	00075663          	bgez	a4,8000e05c <__hi0bits+0x6c>
8000e054:	00150513          	addi	a0,a0,1
8000e058:	00008067          	ret
8000e05c:	02000513          	li	a0,32
8000e060:	00008067          	ret

8000e064 <__lo0bits>:
8000e064:	00052783          	lw	a5,0(a0)
8000e068:	0077f713          	andi	a4,a5,7
8000e06c:	02070e63          	beqz	a4,8000e0a8 <__lo0bits+0x44>
8000e070:	0017f693          	andi	a3,a5,1
8000e074:	00000713          	li	a4,0
8000e078:	00069c63          	bnez	a3,8000e090 <__lo0bits+0x2c>
8000e07c:	0027f713          	andi	a4,a5,2
8000e080:	00070c63          	beqz	a4,8000e098 <__lo0bits+0x34>
8000e084:	0017d793          	srli	a5,a5,0x1
8000e088:	00f52023          	sw	a5,0(a0)
8000e08c:	00100713          	li	a4,1
8000e090:	00070513          	mv	a0,a4
8000e094:	00008067          	ret
8000e098:	0027d793          	srli	a5,a5,0x2
8000e09c:	00f52023          	sw	a5,0(a0)
8000e0a0:	00200713          	li	a4,2
8000e0a4:	fedff06f          	j	8000e090 <__lo0bits+0x2c>
8000e0a8:	01079693          	slli	a3,a5,0x10
8000e0ac:	0106d693          	srli	a3,a3,0x10
8000e0b0:	00000713          	li	a4,0
8000e0b4:	00069663          	bnez	a3,8000e0c0 <__lo0bits+0x5c>
8000e0b8:	0107d793          	srli	a5,a5,0x10
8000e0bc:	01000713          	li	a4,16
8000e0c0:	0ff7f693          	andi	a3,a5,255
8000e0c4:	00069663          	bnez	a3,8000e0d0 <__lo0bits+0x6c>
8000e0c8:	00870713          	addi	a4,a4,8 # c0000008 <__stack+0x3ffc353c>
8000e0cc:	0087d793          	srli	a5,a5,0x8
8000e0d0:	00f7f693          	andi	a3,a5,15
8000e0d4:	00069663          	bnez	a3,8000e0e0 <__lo0bits+0x7c>
8000e0d8:	00470713          	addi	a4,a4,4
8000e0dc:	0047d793          	srli	a5,a5,0x4
8000e0e0:	0037f693          	andi	a3,a5,3
8000e0e4:	00069663          	bnez	a3,8000e0f0 <__lo0bits+0x8c>
8000e0e8:	00270713          	addi	a4,a4,2
8000e0ec:	0027d793          	srli	a5,a5,0x2
8000e0f0:	0017f693          	andi	a3,a5,1
8000e0f4:	00069863          	bnez	a3,8000e104 <__lo0bits+0xa0>
8000e0f8:	0017d793          	srli	a5,a5,0x1
8000e0fc:	00078863          	beqz	a5,8000e10c <__lo0bits+0xa8>
8000e100:	00170713          	addi	a4,a4,1
8000e104:	00f52023          	sw	a5,0(a0)
8000e108:	f89ff06f          	j	8000e090 <__lo0bits+0x2c>
8000e10c:	02000713          	li	a4,32
8000e110:	f81ff06f          	j	8000e090 <__lo0bits+0x2c>

8000e114 <__i2b>:
8000e114:	ff010113          	addi	sp,sp,-16
8000e118:	00812423          	sw	s0,8(sp)
8000e11c:	00058413          	mv	s0,a1
8000e120:	00100593          	li	a1,1
8000e124:	00112623          	sw	ra,12(sp)
8000e128:	bf9ff0ef          	jal	ra,8000dd20 <_Balloc>
8000e12c:	00852a23          	sw	s0,20(a0)
8000e130:	00c12083          	lw	ra,12(sp)
8000e134:	00812403          	lw	s0,8(sp)
8000e138:	00100713          	li	a4,1
8000e13c:	00e52823          	sw	a4,16(a0)
8000e140:	01010113          	addi	sp,sp,16
8000e144:	00008067          	ret

8000e148 <__multiply>:
8000e148:	0105a703          	lw	a4,16(a1)
8000e14c:	01062783          	lw	a5,16(a2)
8000e150:	fd010113          	addi	sp,sp,-48
8000e154:	02912223          	sw	s1,36(sp)
8000e158:	02112623          	sw	ra,44(sp)
8000e15c:	02812423          	sw	s0,40(sp)
8000e160:	03212023          	sw	s2,32(sp)
8000e164:	01312e23          	sw	s3,28(sp)
8000e168:	00058493          	mv	s1,a1
8000e16c:	00f75663          	ble	a5,a4,8000e178 <__multiply+0x30>
8000e170:	00060493          	mv	s1,a2
8000e174:	00058613          	mv	a2,a1
8000e178:	0104a983          	lw	s3,16(s1)
8000e17c:	01062903          	lw	s2,16(a2)
8000e180:	0084a783          	lw	a5,8(s1)
8000e184:	0044a583          	lw	a1,4(s1)
8000e188:	01298433          	add	s0,s3,s2
8000e18c:	0087d463          	ble	s0,a5,8000e194 <__multiply+0x4c>
8000e190:	00158593          	addi	a1,a1,1
8000e194:	00c12623          	sw	a2,12(sp)
8000e198:	b89ff0ef          	jal	ra,8000dd20 <_Balloc>
8000e19c:	00c12603          	lw	a2,12(sp)
8000e1a0:	01450813          	addi	a6,a0,20
8000e1a4:	00241313          	slli	t1,s0,0x2
8000e1a8:	00680333          	add	t1,a6,t1
8000e1ac:	00080793          	mv	a5,a6
8000e1b0:	0467ec63          	bltu	a5,t1,8000e208 <__multiply+0xc0>
8000e1b4:	01448593          	addi	a1,s1,20
8000e1b8:	00299893          	slli	a7,s3,0x2
8000e1bc:	01460613          	addi	a2,a2,20
8000e1c0:	00291e13          	slli	t3,s2,0x2
8000e1c4:	000106b7          	lui	a3,0x10
8000e1c8:	011588b3          	add	a7,a1,a7
8000e1cc:	01c60e33          	add	t3,a2,t3
8000e1d0:	fff68693          	addi	a3,a3,-1 # ffff <_HEAP_SIZE+0xefff>
8000e1d4:	05c66063          	bltu	a2,t3,8000e214 <__multiply+0xcc>
8000e1d8:	00805863          	blez	s0,8000e1e8 <__multiply+0xa0>
8000e1dc:	ffc30313          	addi	t1,t1,-4
8000e1e0:	00032783          	lw	a5,0(t1)
8000e1e4:	12078663          	beqz	a5,8000e310 <__multiply+0x1c8>
8000e1e8:	00852823          	sw	s0,16(a0)
8000e1ec:	02c12083          	lw	ra,44(sp)
8000e1f0:	02812403          	lw	s0,40(sp)
8000e1f4:	02412483          	lw	s1,36(sp)
8000e1f8:	02012903          	lw	s2,32(sp)
8000e1fc:	01c12983          	lw	s3,28(sp)
8000e200:	03010113          	addi	sp,sp,48
8000e204:	00008067          	ret
8000e208:	0007a023          	sw	zero,0(a5)
8000e20c:	00478793          	addi	a5,a5,4
8000e210:	fa1ff06f          	j	8000e1b0 <__multiply+0x68>
8000e214:	00062f03          	lw	t5,0(a2)
8000e218:	00df7f33          	and	t5,t5,a3
8000e21c:	060f0463          	beqz	t5,8000e284 <__multiply+0x13c>
8000e220:	00080f93          	mv	t6,a6
8000e224:	00058293          	mv	t0,a1
8000e228:	00000493          	li	s1,0
8000e22c:	0002a703          	lw	a4,0(t0) # 800086e0 <memset+0xb4>
8000e230:	000fa383          	lw	t2,0(t6)
8000e234:	00428293          	addi	t0,t0,4
8000e238:	00d77eb3          	and	t4,a4,a3
8000e23c:	03ee8eb3          	mul	t4,t4,t5
8000e240:	00d3f7b3          	and	a5,t2,a3
8000e244:	0103d393          	srli	t2,t2,0x10
8000e248:	00fe8eb3          	add	t4,t4,a5
8000e24c:	01075793          	srli	a5,a4,0x10
8000e250:	03e787b3          	mul	a5,a5,t5
8000e254:	009e8eb3          	add	t4,t4,s1
8000e258:	010ed713          	srli	a4,t4,0x10
8000e25c:	00defeb3          	and	t4,t4,a3
8000e260:	007787b3          	add	a5,a5,t2
8000e264:	00e787b3          	add	a5,a5,a4
8000e268:	0107d493          	srli	s1,a5,0x10
8000e26c:	01079793          	slli	a5,a5,0x10
8000e270:	004f8713          	addi	a4,t6,4
8000e274:	01d7e7b3          	or	a5,a5,t4
8000e278:	fef72e23          	sw	a5,-4(a4)
8000e27c:	0912e263          	bltu	t0,a7,8000e300 <__multiply+0x1b8>
8000e280:	009fa223          	sw	s1,4(t6)
8000e284:	00265283          	lhu	t0,2(a2)
8000e288:	06028663          	beqz	t0,8000e2f4 <__multiply+0x1ac>
8000e28c:	00082783          	lw	a5,0(a6)
8000e290:	00080e93          	mv	t4,a6
8000e294:	00058f13          	mv	t5,a1
8000e298:	00000f93          	li	t6,0
8000e29c:	000f2703          	lw	a4,0(t5)
8000e2a0:	002ed383          	lhu	t2,2(t4)
8000e2a4:	00d7f7b3          	and	a5,a5,a3
8000e2a8:	00d77733          	and	a4,a4,a3
8000e2ac:	02570733          	mul	a4,a4,t0
8000e2b0:	004f0f13          	addi	t5,t5,4
8000e2b4:	00770733          	add	a4,a4,t2
8000e2b8:	01f70733          	add	a4,a4,t6
8000e2bc:	01071f93          	slli	t6,a4,0x10
8000e2c0:	00ffe7b3          	or	a5,t6,a5
8000e2c4:	004e8393          	addi	t2,t4,4
8000e2c8:	fef3ae23          	sw	a5,-4(t2)
8000e2cc:	ffef5783          	lhu	a5,-2(t5)
8000e2d0:	004eaf83          	lw	t6,4(t4)
8000e2d4:	01075713          	srli	a4,a4,0x10
8000e2d8:	025787b3          	mul	a5,a5,t0
8000e2dc:	00dfffb3          	and	t6,t6,a3
8000e2e0:	01f787b3          	add	a5,a5,t6
8000e2e4:	00e787b3          	add	a5,a5,a4
8000e2e8:	0107df93          	srli	t6,a5,0x10
8000e2ec:	011f6e63          	bltu	t5,a7,8000e308 <__multiply+0x1c0>
8000e2f0:	00fea223          	sw	a5,4(t4)
8000e2f4:	00460613          	addi	a2,a2,4
8000e2f8:	00480813          	addi	a6,a6,4
8000e2fc:	ed9ff06f          	j	8000e1d4 <__multiply+0x8c>
8000e300:	00070f93          	mv	t6,a4
8000e304:	f29ff06f          	j	8000e22c <__multiply+0xe4>
8000e308:	00038e93          	mv	t4,t2
8000e30c:	f91ff06f          	j	8000e29c <__multiply+0x154>
8000e310:	fff40413          	addi	s0,s0,-1
8000e314:	ec5ff06f          	j	8000e1d8 <__multiply+0x90>

8000e318 <__pow5mult>:
8000e318:	fe010113          	addi	sp,sp,-32
8000e31c:	00912a23          	sw	s1,20(sp)
8000e320:	01212823          	sw	s2,16(sp)
8000e324:	01312623          	sw	s3,12(sp)
8000e328:	00112e23          	sw	ra,28(sp)
8000e32c:	00812c23          	sw	s0,24(sp)
8000e330:	01412423          	sw	s4,8(sp)
8000e334:	00367793          	andi	a5,a2,3
8000e338:	00050913          	mv	s2,a0
8000e33c:	00060493          	mv	s1,a2
8000e340:	00058993          	mv	s3,a1
8000e344:	02078463          	beqz	a5,8000e36c <__pow5mult+0x54>
8000e348:	fff78793          	addi	a5,a5,-1
8000e34c:	80020737          	lui	a4,0x80020
8000e350:	4e870713          	addi	a4,a4,1256 # 800204e8 <__stack+0xfffe3a1c>
8000e354:	00279793          	slli	a5,a5,0x2
8000e358:	00f707b3          	add	a5,a4,a5
8000e35c:	0007a603          	lw	a2,0(a5)
8000e360:	00000693          	li	a3,0
8000e364:	a89ff0ef          	jal	ra,8000ddec <__multadd>
8000e368:	00050993          	mv	s3,a0
8000e36c:	4024d493          	srai	s1,s1,0x2
8000e370:	08048063          	beqz	s1,8000e3f0 <__pow5mult+0xd8>
8000e374:	04892403          	lw	s0,72(s2)
8000e378:	00041e63          	bnez	s0,8000e394 <__pow5mult+0x7c>
8000e37c:	27100593          	li	a1,625
8000e380:	00090513          	mv	a0,s2
8000e384:	d91ff0ef          	jal	ra,8000e114 <__i2b>
8000e388:	04a92423          	sw	a0,72(s2)
8000e38c:	00050413          	mv	s0,a0
8000e390:	00052023          	sw	zero,0(a0)
8000e394:	0014f793          	andi	a5,s1,1
8000e398:	02078463          	beqz	a5,8000e3c0 <__pow5mult+0xa8>
8000e39c:	00098593          	mv	a1,s3
8000e3a0:	00040613          	mv	a2,s0
8000e3a4:	00090513          	mv	a0,s2
8000e3a8:	da1ff0ef          	jal	ra,8000e148 <__multiply>
8000e3ac:	00050a13          	mv	s4,a0
8000e3b0:	00098593          	mv	a1,s3
8000e3b4:	00090513          	mv	a0,s2
8000e3b8:	a11ff0ef          	jal	ra,8000ddc8 <_Bfree>
8000e3bc:	000a0993          	mv	s3,s4
8000e3c0:	4014d493          	srai	s1,s1,0x1
8000e3c4:	02048663          	beqz	s1,8000e3f0 <__pow5mult+0xd8>
8000e3c8:	00042503          	lw	a0,0(s0)
8000e3cc:	00051e63          	bnez	a0,8000e3e8 <__pow5mult+0xd0>
8000e3d0:	00040613          	mv	a2,s0
8000e3d4:	00040593          	mv	a1,s0
8000e3d8:	00090513          	mv	a0,s2
8000e3dc:	d6dff0ef          	jal	ra,8000e148 <__multiply>
8000e3e0:	00a42023          	sw	a0,0(s0)
8000e3e4:	00052023          	sw	zero,0(a0)
8000e3e8:	00050413          	mv	s0,a0
8000e3ec:	fa9ff06f          	j	8000e394 <__pow5mult+0x7c>
8000e3f0:	01c12083          	lw	ra,28(sp)
8000e3f4:	01812403          	lw	s0,24(sp)
8000e3f8:	00098513          	mv	a0,s3
8000e3fc:	01412483          	lw	s1,20(sp)
8000e400:	01012903          	lw	s2,16(sp)
8000e404:	00c12983          	lw	s3,12(sp)
8000e408:	00812a03          	lw	s4,8(sp)
8000e40c:	02010113          	addi	sp,sp,32
8000e410:	00008067          	ret

8000e414 <__lshift>:
8000e414:	fd010113          	addi	sp,sp,-48
8000e418:	02912223          	sw	s1,36(sp)
8000e41c:	00058493          	mv	s1,a1
8000e420:	01312e23          	sw	s3,28(sp)
8000e424:	0104a983          	lw	s3,16(s1)
8000e428:	02812423          	sw	s0,40(sp)
8000e42c:	0045a583          	lw	a1,4(a1)
8000e430:	40565413          	srai	s0,a2,0x5
8000e434:	0084a783          	lw	a5,8(s1)
8000e438:	013409b3          	add	s3,s0,s3
8000e43c:	03212023          	sw	s2,32(sp)
8000e440:	01512a23          	sw	s5,20(sp)
8000e444:	02112623          	sw	ra,44(sp)
8000e448:	01412c23          	sw	s4,24(sp)
8000e44c:	00050a93          	mv	s5,a0
8000e450:	00198913          	addi	s2,s3,1
8000e454:	0d27c663          	blt	a5,s2,8000e520 <__lshift+0x10c>
8000e458:	000a8513          	mv	a0,s5
8000e45c:	00c12623          	sw	a2,12(sp)
8000e460:	8c1ff0ef          	jal	ra,8000dd20 <_Balloc>
8000e464:	00c12603          	lw	a2,12(sp)
8000e468:	01450793          	addi	a5,a0,20
8000e46c:	00050a13          	mv	s4,a0
8000e470:	00078693          	mv	a3,a5
8000e474:	00000713          	li	a4,0
8000e478:	00468693          	addi	a3,a3,4
8000e47c:	0a874863          	blt	a4,s0,8000e52c <__lshift+0x118>
8000e480:	00045463          	bgez	s0,8000e488 <__lshift+0x74>
8000e484:	00000413          	li	s0,0
8000e488:	0104a683          	lw	a3,16(s1)
8000e48c:	00241413          	slli	s0,s0,0x2
8000e490:	00878733          	add	a4,a5,s0
8000e494:	00269693          	slli	a3,a3,0x2
8000e498:	01448793          	addi	a5,s1,20
8000e49c:	01f67613          	andi	a2,a2,31
8000e4a0:	00d786b3          	add	a3,a5,a3
8000e4a4:	08060e63          	beqz	a2,8000e540 <__lshift+0x12c>
8000e4a8:	02000813          	li	a6,32
8000e4ac:	40c80833          	sub	a6,a6,a2
8000e4b0:	00000593          	li	a1,0
8000e4b4:	0007a503          	lw	a0,0(a5)
8000e4b8:	00470893          	addi	a7,a4,4
8000e4bc:	00478793          	addi	a5,a5,4
8000e4c0:	00c51533          	sll	a0,a0,a2
8000e4c4:	00b565b3          	or	a1,a0,a1
8000e4c8:	feb8ae23          	sw	a1,-4(a7)
8000e4cc:	ffc7a583          	lw	a1,-4(a5)
8000e4d0:	0105d5b3          	srl	a1,a1,a6
8000e4d4:	06d7e263          	bltu	a5,a3,8000e538 <__lshift+0x124>
8000e4d8:	00b72223          	sw	a1,4(a4)
8000e4dc:	00058463          	beqz	a1,8000e4e4 <__lshift+0xd0>
8000e4e0:	00298913          	addi	s2,s3,2
8000e4e4:	fff90913          	addi	s2,s2,-1
8000e4e8:	012a2823          	sw	s2,16(s4)
8000e4ec:	000a8513          	mv	a0,s5
8000e4f0:	00048593          	mv	a1,s1
8000e4f4:	8d5ff0ef          	jal	ra,8000ddc8 <_Bfree>
8000e4f8:	02c12083          	lw	ra,44(sp)
8000e4fc:	02812403          	lw	s0,40(sp)
8000e500:	000a0513          	mv	a0,s4
8000e504:	02412483          	lw	s1,36(sp)
8000e508:	02012903          	lw	s2,32(sp)
8000e50c:	01c12983          	lw	s3,28(sp)
8000e510:	01812a03          	lw	s4,24(sp)
8000e514:	01412a83          	lw	s5,20(sp)
8000e518:	03010113          	addi	sp,sp,48
8000e51c:	00008067          	ret
8000e520:	00158593          	addi	a1,a1,1
8000e524:	00179793          	slli	a5,a5,0x1
8000e528:	f2dff06f          	j	8000e454 <__lshift+0x40>
8000e52c:	fe06ae23          	sw	zero,-4(a3)
8000e530:	00170713          	addi	a4,a4,1
8000e534:	f45ff06f          	j	8000e478 <__lshift+0x64>
8000e538:	00088713          	mv	a4,a7
8000e53c:	f79ff06f          	j	8000e4b4 <__lshift+0xa0>
8000e540:	00478793          	addi	a5,a5,4
8000e544:	ffc7a603          	lw	a2,-4(a5)
8000e548:	00470713          	addi	a4,a4,4
8000e54c:	fec72e23          	sw	a2,-4(a4)
8000e550:	fed7e8e3          	bltu	a5,a3,8000e540 <__lshift+0x12c>
8000e554:	f91ff06f          	j	8000e4e4 <__lshift+0xd0>

8000e558 <__mcmp>:
8000e558:	01052783          	lw	a5,16(a0)
8000e55c:	0105a703          	lw	a4,16(a1)
8000e560:	40e787b3          	sub	a5,a5,a4
8000e564:	02079c63          	bnez	a5,8000e59c <__mcmp+0x44>
8000e568:	00271713          	slli	a4,a4,0x2
8000e56c:	01450513          	addi	a0,a0,20
8000e570:	01458593          	addi	a1,a1,20
8000e574:	00e506b3          	add	a3,a0,a4
8000e578:	00e585b3          	add	a1,a1,a4
8000e57c:	ffc68693          	addi	a3,a3,-4
8000e580:	ffc58593          	addi	a1,a1,-4
8000e584:	0006a603          	lw	a2,0(a3)
8000e588:	0005a703          	lw	a4,0(a1)
8000e58c:	00e60c63          	beq	a2,a4,8000e5a4 <__mcmp+0x4c>
8000e590:	fff00793          	li	a5,-1
8000e594:	00e66463          	bltu	a2,a4,8000e59c <__mcmp+0x44>
8000e598:	00100793          	li	a5,1
8000e59c:	00078513          	mv	a0,a5
8000e5a0:	00008067          	ret
8000e5a4:	fcd56ce3          	bltu	a0,a3,8000e57c <__mcmp+0x24>
8000e5a8:	ff5ff06f          	j	8000e59c <__mcmp+0x44>

8000e5ac <__mdiff>:
8000e5ac:	fe010113          	addi	sp,sp,-32
8000e5b0:	00912a23          	sw	s1,20(sp)
8000e5b4:	00058493          	mv	s1,a1
8000e5b8:	01312623          	sw	s3,12(sp)
8000e5bc:	00060593          	mv	a1,a2
8000e5c0:	00050993          	mv	s3,a0
8000e5c4:	00048513          	mv	a0,s1
8000e5c8:	00812c23          	sw	s0,24(sp)
8000e5cc:	00112e23          	sw	ra,28(sp)
8000e5d0:	01212823          	sw	s2,16(sp)
8000e5d4:	00060413          	mv	s0,a2
8000e5d8:	f81ff0ef          	jal	ra,8000e558 <__mcmp>
8000e5dc:	02051c63          	bnez	a0,8000e614 <__mdiff+0x68>
8000e5e0:	00000593          	li	a1,0
8000e5e4:	00098513          	mv	a0,s3
8000e5e8:	f38ff0ef          	jal	ra,8000dd20 <_Balloc>
8000e5ec:	00100793          	li	a5,1
8000e5f0:	00f52823          	sw	a5,16(a0)
8000e5f4:	00052a23          	sw	zero,20(a0)
8000e5f8:	01c12083          	lw	ra,28(sp)
8000e5fc:	01812403          	lw	s0,24(sp)
8000e600:	01412483          	lw	s1,20(sp)
8000e604:	01012903          	lw	s2,16(sp)
8000e608:	00c12983          	lw	s3,12(sp)
8000e60c:	02010113          	addi	sp,sp,32
8000e610:	00008067          	ret
8000e614:	00100913          	li	s2,1
8000e618:	00054a63          	bltz	a0,8000e62c <__mdiff+0x80>
8000e61c:	00040793          	mv	a5,s0
8000e620:	00000913          	li	s2,0
8000e624:	00048413          	mv	s0,s1
8000e628:	00078493          	mv	s1,a5
8000e62c:	00442583          	lw	a1,4(s0)
8000e630:	00098513          	mv	a0,s3
8000e634:	eecff0ef          	jal	ra,8000dd20 <_Balloc>
8000e638:	01042303          	lw	t1,16(s0)
8000e63c:	0104a883          	lw	a7,16(s1)
8000e640:	01440613          	addi	a2,s0,20
8000e644:	00231e13          	slli	t3,t1,0x2
8000e648:	01448813          	addi	a6,s1,20
8000e64c:	00289893          	slli	a7,a7,0x2
8000e650:	00010eb7          	lui	t4,0x10
8000e654:	01252623          	sw	s2,12(a0)
8000e658:	01c60e33          	add	t3,a2,t3
8000e65c:	011808b3          	add	a7,a6,a7
8000e660:	01450693          	addi	a3,a0,20
8000e664:	00000f13          	li	t5,0
8000e668:	fffe8e93          	addi	t4,t4,-1 # ffff <_HEAP_SIZE+0xefff>
8000e66c:	00062703          	lw	a4,0(a2)
8000e670:	00082f83          	lw	t6,0(a6)
8000e674:	00468693          	addi	a3,a3,4
8000e678:	01d775b3          	and	a1,a4,t4
8000e67c:	01dff7b3          	and	a5,t6,t4
8000e680:	01e585b3          	add	a1,a1,t5
8000e684:	40f585b3          	sub	a1,a1,a5
8000e688:	010fdf93          	srli	t6,t6,0x10
8000e68c:	01075793          	srli	a5,a4,0x10
8000e690:	41f787b3          	sub	a5,a5,t6
8000e694:	4105d713          	srai	a4,a1,0x10
8000e698:	00e787b3          	add	a5,a5,a4
8000e69c:	4107df13          	srai	t5,a5,0x10
8000e6a0:	01d5f5b3          	and	a1,a1,t4
8000e6a4:	01079793          	slli	a5,a5,0x10
8000e6a8:	00b7e7b3          	or	a5,a5,a1
8000e6ac:	00480813          	addi	a6,a6,4
8000e6b0:	fef6ae23          	sw	a5,-4(a3)
8000e6b4:	00460613          	addi	a2,a2,4
8000e6b8:	fb186ae3          	bltu	a6,a7,8000e66c <__mdiff+0xc0>
8000e6bc:	000105b7          	lui	a1,0x10
8000e6c0:	fff58593          	addi	a1,a1,-1 # ffff <_HEAP_SIZE+0xefff>
8000e6c4:	01c66c63          	bltu	a2,t3,8000e6dc <__mdiff+0x130>
8000e6c8:	ffc68693          	addi	a3,a3,-4
8000e6cc:	0006a783          	lw	a5,0(a3)
8000e6d0:	04078263          	beqz	a5,8000e714 <__mdiff+0x168>
8000e6d4:	00652823          	sw	t1,16(a0)
8000e6d8:	f21ff06f          	j	8000e5f8 <__mdiff+0x4c>
8000e6dc:	00062783          	lw	a5,0(a2)
8000e6e0:	00468693          	addi	a3,a3,4
8000e6e4:	00460613          	addi	a2,a2,4
8000e6e8:	00b7f733          	and	a4,a5,a1
8000e6ec:	01e70733          	add	a4,a4,t5
8000e6f0:	41075813          	srai	a6,a4,0x10
8000e6f4:	0107d793          	srli	a5,a5,0x10
8000e6f8:	010787b3          	add	a5,a5,a6
8000e6fc:	4107df13          	srai	t5,a5,0x10
8000e700:	00b77733          	and	a4,a4,a1
8000e704:	01079793          	slli	a5,a5,0x10
8000e708:	00e7e7b3          	or	a5,a5,a4
8000e70c:	fef6ae23          	sw	a5,-4(a3)
8000e710:	fb5ff06f          	j	8000e6c4 <__mdiff+0x118>
8000e714:	fff30313          	addi	t1,t1,-1
8000e718:	fb1ff06f          	j	8000e6c8 <__mdiff+0x11c>

8000e71c <__ulp>:
8000e71c:	7ff007b7          	lui	a5,0x7ff00
8000e720:	00b7f5b3          	and	a1,a5,a1
8000e724:	fcc007b7          	lui	a5,0xfcc00
8000e728:	00f585b3          	add	a1,a1,a5
8000e72c:	00b05863          	blez	a1,8000e73c <__ulp+0x20>
8000e730:	00000793          	li	a5,0
8000e734:	00078513          	mv	a0,a5
8000e738:	00008067          	ret
8000e73c:	40b005b3          	neg	a1,a1
8000e740:	4145d793          	srai	a5,a1,0x14
8000e744:	01300713          	li	a4,19
8000e748:	00f74863          	blt	a4,a5,8000e758 <__ulp+0x3c>
8000e74c:	000805b7          	lui	a1,0x80
8000e750:	40f5d5b3          	sra	a1,a1,a5
8000e754:	fddff06f          	j	8000e730 <__ulp+0x14>
8000e758:	fec78793          	addi	a5,a5,-20 # fcbfffec <__stack+0x7cbc3520>
8000e75c:	01e00693          	li	a3,30
8000e760:	00000593          	li	a1,0
8000e764:	00100713          	li	a4,1
8000e768:	00f6c663          	blt	a3,a5,8000e774 <__ulp+0x58>
8000e76c:	fff7c793          	not	a5,a5
8000e770:	00f71733          	sll	a4,a4,a5
8000e774:	00070793          	mv	a5,a4
8000e778:	fbdff06f          	j	8000e734 <__ulp+0x18>

8000e77c <__b2d>:
8000e77c:	fd010113          	addi	sp,sp,-48
8000e780:	02912223          	sw	s1,36(sp)
8000e784:	01052483          	lw	s1,16(a0)
8000e788:	01312e23          	sw	s3,28(sp)
8000e78c:	01450993          	addi	s3,a0,20
8000e790:	00249493          	slli	s1,s1,0x2
8000e794:	009984b3          	add	s1,s3,s1
8000e798:	02812423          	sw	s0,40(sp)
8000e79c:	ffc4a403          	lw	s0,-4(s1)
8000e7a0:	03212023          	sw	s2,32(sp)
8000e7a4:	00b12623          	sw	a1,12(sp)
8000e7a8:	00040513          	mv	a0,s0
8000e7ac:	02112623          	sw	ra,44(sp)
8000e7b0:	841ff0ef          	jal	ra,8000dff0 <__hi0bits>
8000e7b4:	00c12583          	lw	a1,12(sp)
8000e7b8:	02000793          	li	a5,32
8000e7bc:	40a787b3          	sub	a5,a5,a0
8000e7c0:	00f5a023          	sw	a5,0(a1) # 80000 <_HEAP_SIZE+0x7f000>
8000e7c4:	00a00793          	li	a5,10
8000e7c8:	ffc48913          	addi	s2,s1,-4
8000e7cc:	04a7cc63          	blt	a5,a0,8000e824 <__b2d+0xa8>
8000e7d0:	00b00793          	li	a5,11
8000e7d4:	40a787b3          	sub	a5,a5,a0
8000e7d8:	3ff00737          	lui	a4,0x3ff00
8000e7dc:	00f456b3          	srl	a3,s0,a5
8000e7e0:	00e6e6b3          	or	a3,a3,a4
8000e7e4:	00000713          	li	a4,0
8000e7e8:	0129f463          	bleu	s2,s3,8000e7f0 <__b2d+0x74>
8000e7ec:	ff84a703          	lw	a4,-8(s1)
8000e7f0:	01550513          	addi	a0,a0,21
8000e7f4:	00a41533          	sll	a0,s0,a0
8000e7f8:	00f757b3          	srl	a5,a4,a5
8000e7fc:	00f567b3          	or	a5,a0,a5
8000e800:	02c12083          	lw	ra,44(sp)
8000e804:	02812403          	lw	s0,40(sp)
8000e808:	02412483          	lw	s1,36(sp)
8000e80c:	02012903          	lw	s2,32(sp)
8000e810:	01c12983          	lw	s3,28(sp)
8000e814:	00078513          	mv	a0,a5
8000e818:	00068593          	mv	a1,a3
8000e81c:	03010113          	addi	sp,sp,48
8000e820:	00008067          	ret
8000e824:	00000793          	li	a5,0
8000e828:	0129f663          	bleu	s2,s3,8000e834 <__b2d+0xb8>
8000e82c:	ff84a783          	lw	a5,-8(s1)
8000e830:	ff848913          	addi	s2,s1,-8
8000e834:	ff550513          	addi	a0,a0,-11
8000e838:	02050e63          	beqz	a0,8000e874 <__b2d+0xf8>
8000e83c:	02000713          	li	a4,32
8000e840:	40a70633          	sub	a2,a4,a0
8000e844:	00a41433          	sll	s0,s0,a0
8000e848:	3ff00737          	lui	a4,0x3ff00
8000e84c:	00e46433          	or	s0,s0,a4
8000e850:	00c7d6b3          	srl	a3,a5,a2
8000e854:	00d466b3          	or	a3,s0,a3
8000e858:	00000713          	li	a4,0
8000e85c:	0129f463          	bleu	s2,s3,8000e864 <__b2d+0xe8>
8000e860:	ffc92703          	lw	a4,-4(s2)
8000e864:	00a797b3          	sll	a5,a5,a0
8000e868:	00c75733          	srl	a4,a4,a2
8000e86c:	00e7e7b3          	or	a5,a5,a4
8000e870:	f91ff06f          	j	8000e800 <__b2d+0x84>
8000e874:	3ff006b7          	lui	a3,0x3ff00
8000e878:	00d466b3          	or	a3,s0,a3
8000e87c:	f85ff06f          	j	8000e800 <__b2d+0x84>

8000e880 <__d2b>:
8000e880:	fd010113          	addi	sp,sp,-48
8000e884:	02812423          	sw	s0,40(sp)
8000e888:	00058413          	mv	s0,a1
8000e88c:	00100593          	li	a1,1
8000e890:	02912223          	sw	s1,36(sp)
8000e894:	03212023          	sw	s2,32(sp)
8000e898:	00060493          	mv	s1,a2
8000e89c:	01312e23          	sw	s3,28(sp)
8000e8a0:	01412c23          	sw	s4,24(sp)
8000e8a4:	00070913          	mv	s2,a4
8000e8a8:	02112623          	sw	ra,44(sp)
8000e8ac:	00068a13          	mv	s4,a3
8000e8b0:	c70ff0ef          	jal	ra,8000dd20 <_Balloc>
8000e8b4:	00100737          	lui	a4,0x100
8000e8b8:	fff70793          	addi	a5,a4,-1 # fffff <_HEAP_SIZE+0xfefff>
8000e8bc:	0097f7b3          	and	a5,a5,s1
8000e8c0:	0144d493          	srli	s1,s1,0x14
8000e8c4:	7ff4f493          	andi	s1,s1,2047
8000e8c8:	00050993          	mv	s3,a0
8000e8cc:	08049a63          	bnez	s1,8000e960 <__d2b+0xe0>
8000e8d0:	00f12623          	sw	a5,12(sp)
8000e8d4:	08040e63          	beqz	s0,8000e970 <__d2b+0xf0>
8000e8d8:	00810513          	addi	a0,sp,8
8000e8dc:	00812423          	sw	s0,8(sp)
8000e8e0:	f84ff0ef          	jal	ra,8000e064 <__lo0bits>
8000e8e4:	00812683          	lw	a3,8(sp)
8000e8e8:	08050063          	beqz	a0,8000e968 <__d2b+0xe8>
8000e8ec:	00c12703          	lw	a4,12(sp)
8000e8f0:	02000793          	li	a5,32
8000e8f4:	40a787b3          	sub	a5,a5,a0
8000e8f8:	00f717b3          	sll	a5,a4,a5
8000e8fc:	00d7e7b3          	or	a5,a5,a3
8000e900:	00a75733          	srl	a4,a4,a0
8000e904:	00f9aa23          	sw	a5,20(s3)
8000e908:	00e12623          	sw	a4,12(sp)
8000e90c:	00c12403          	lw	s0,12(sp)
8000e910:	0089ac23          	sw	s0,24(s3)
8000e914:	00803433          	snez	s0,s0
8000e918:	00140413          	addi	s0,s0,1
8000e91c:	0089a823          	sw	s0,16(s3)
8000e920:	06048a63          	beqz	s1,8000e994 <__d2b+0x114>
8000e924:	bcd48493          	addi	s1,s1,-1075
8000e928:	00a484b3          	add	s1,s1,a0
8000e92c:	03500793          	li	a5,53
8000e930:	009a2023          	sw	s1,0(s4)
8000e934:	40a78533          	sub	a0,a5,a0
8000e938:	00a92023          	sw	a0,0(s2)
8000e93c:	02c12083          	lw	ra,44(sp)
8000e940:	02812403          	lw	s0,40(sp)
8000e944:	00098513          	mv	a0,s3
8000e948:	02412483          	lw	s1,36(sp)
8000e94c:	02012903          	lw	s2,32(sp)
8000e950:	01c12983          	lw	s3,28(sp)
8000e954:	01812a03          	lw	s4,24(sp)
8000e958:	03010113          	addi	sp,sp,48
8000e95c:	00008067          	ret
8000e960:	00e7e7b3          	or	a5,a5,a4
8000e964:	f6dff06f          	j	8000e8d0 <__d2b+0x50>
8000e968:	00d9aa23          	sw	a3,20(s3)
8000e96c:	fa1ff06f          	j	8000e90c <__d2b+0x8c>
8000e970:	00c10513          	addi	a0,sp,12
8000e974:	ef0ff0ef          	jal	ra,8000e064 <__lo0bits>
8000e978:	00c12783          	lw	a5,12(sp)
8000e97c:	02050513          	addi	a0,a0,32
8000e980:	00100413          	li	s0,1
8000e984:	00f9aa23          	sw	a5,20(s3)
8000e988:	00100793          	li	a5,1
8000e98c:	00f9a823          	sw	a5,16(s3)
8000e990:	f91ff06f          	j	8000e920 <__d2b+0xa0>
8000e994:	00241793          	slli	a5,s0,0x2
8000e998:	bce50513          	addi	a0,a0,-1074
8000e99c:	00f987b3          	add	a5,s3,a5
8000e9a0:	00aa2023          	sw	a0,0(s4)
8000e9a4:	0107a503          	lw	a0,16(a5)
8000e9a8:	00541413          	slli	s0,s0,0x5
8000e9ac:	e44ff0ef          	jal	ra,8000dff0 <__hi0bits>
8000e9b0:	40a40433          	sub	s0,s0,a0
8000e9b4:	00892023          	sw	s0,0(s2)
8000e9b8:	f85ff06f          	j	8000e93c <__d2b+0xbc>

8000e9bc <__ratio>:
8000e9bc:	fd010113          	addi	sp,sp,-48
8000e9c0:	03212023          	sw	s2,32(sp)
8000e9c4:	00058913          	mv	s2,a1
8000e9c8:	00810593          	addi	a1,sp,8
8000e9cc:	02112623          	sw	ra,44(sp)
8000e9d0:	02812423          	sw	s0,40(sp)
8000e9d4:	02912223          	sw	s1,36(sp)
8000e9d8:	01312e23          	sw	s3,28(sp)
8000e9dc:	01412c23          	sw	s4,24(sp)
8000e9e0:	00050a13          	mv	s4,a0
8000e9e4:	d99ff0ef          	jal	ra,8000e77c <__b2d>
8000e9e8:	00050993          	mv	s3,a0
8000e9ec:	00058493          	mv	s1,a1
8000e9f0:	00058413          	mv	s0,a1
8000e9f4:	00090513          	mv	a0,s2
8000e9f8:	00c10593          	addi	a1,sp,12
8000e9fc:	d81ff0ef          	jal	ra,8000e77c <__b2d>
8000ea00:	01092783          	lw	a5,16(s2)
8000ea04:	010a2703          	lw	a4,16(s4)
8000ea08:	00812683          	lw	a3,8(sp)
8000ea0c:	40f70733          	sub	a4,a4,a5
8000ea10:	00c12783          	lw	a5,12(sp)
8000ea14:	00571713          	slli	a4,a4,0x5
8000ea18:	40f686b3          	sub	a3,a3,a5
8000ea1c:	00d707b3          	add	a5,a4,a3
8000ea20:	04f05463          	blez	a5,8000ea68 <__ratio+0xac>
8000ea24:	01479793          	slli	a5,a5,0x14
8000ea28:	00058613          	mv	a2,a1
8000ea2c:	00978433          	add	s0,a5,s1
8000ea30:	00060713          	mv	a4,a2
8000ea34:	00040593          	mv	a1,s0
8000ea38:	00050613          	mv	a2,a0
8000ea3c:	00070693          	mv	a3,a4
8000ea40:	00098513          	mv	a0,s3
8000ea44:	4e9050ef          	jal	ra,8001472c <__divdf3>
8000ea48:	02c12083          	lw	ra,44(sp)
8000ea4c:	02812403          	lw	s0,40(sp)
8000ea50:	02412483          	lw	s1,36(sp)
8000ea54:	02012903          	lw	s2,32(sp)
8000ea58:	01c12983          	lw	s3,28(sp)
8000ea5c:	01812a03          	lw	s4,24(sp)
8000ea60:	03010113          	addi	sp,sp,48
8000ea64:	00008067          	ret
8000ea68:	fff00737          	lui	a4,0xfff00
8000ea6c:	02e787b3          	mul	a5,a5,a4
8000ea70:	00b78633          	add	a2,a5,a1
8000ea74:	fbdff06f          	j	8000ea30 <__ratio+0x74>

8000ea78 <_mprec_log10>:
8000ea78:	ff010113          	addi	sp,sp,-16
8000ea7c:	00812423          	sw	s0,8(sp)
8000ea80:	00112623          	sw	ra,12(sp)
8000ea84:	01212223          	sw	s2,4(sp)
8000ea88:	01312023          	sw	s3,0(sp)
8000ea8c:	01700793          	li	a5,23
8000ea90:	00050413          	mv	s0,a0
8000ea94:	02a7ca63          	blt	a5,a0,8000eac8 <_mprec_log10+0x50>
8000ea98:	800207b7          	lui	a5,0x80020
8000ea9c:	00351413          	slli	s0,a0,0x3
8000eaa0:	4e878793          	addi	a5,a5,1256 # 800204e8 <__stack+0xfffe3a1c>
8000eaa4:	00878433          	add	s0,a5,s0
8000eaa8:	01042503          	lw	a0,16(s0)
8000eaac:	01442583          	lw	a1,20(s0)
8000eab0:	00c12083          	lw	ra,12(sp)
8000eab4:	00812403          	lw	s0,8(sp)
8000eab8:	00412903          	lw	s2,4(sp)
8000eabc:	00012983          	lw	s3,0(sp)
8000eac0:	01010113          	addi	sp,sp,16
8000eac4:	00008067          	ret
8000eac8:	800217b7          	lui	a5,0x80021
8000eacc:	e307a503          	lw	a0,-464(a5) # 80020e30 <__stack+0xfffe4364>
8000ead0:	e347a583          	lw	a1,-460(a5)
8000ead4:	800217b7          	lui	a5,0x80021
8000ead8:	e387a903          	lw	s2,-456(a5) # 80020e38 <__stack+0xfffe436c>
8000eadc:	e3c7a983          	lw	s3,-452(a5)
8000eae0:	00090613          	mv	a2,s2
8000eae4:	00098693          	mv	a3,s3
8000eae8:	fff40413          	addi	s0,s0,-1
8000eaec:	31c060ef          	jal	ra,80014e08 <__muldf3>
8000eaf0:	fe0418e3          	bnez	s0,8000eae0 <_mprec_log10+0x68>
8000eaf4:	fbdff06f          	j	8000eab0 <_mprec_log10+0x38>

8000eaf8 <__copybits>:
8000eaf8:	fff58793          	addi	a5,a1,-1
8000eafc:	01062703          	lw	a4,16(a2)
8000eb00:	4057d793          	srai	a5,a5,0x5
8000eb04:	00178793          	addi	a5,a5,1
8000eb08:	00279793          	slli	a5,a5,0x2
8000eb0c:	01460693          	addi	a3,a2,20
8000eb10:	00271713          	slli	a4,a4,0x2
8000eb14:	00f507b3          	add	a5,a0,a5
8000eb18:	00e68733          	add	a4,a3,a4
8000eb1c:	00e6e663          	bltu	a3,a4,8000eb28 <__copybits+0x30>
8000eb20:	00f56e63          	bltu	a0,a5,8000eb3c <__copybits+0x44>
8000eb24:	00008067          	ret
8000eb28:	00468693          	addi	a3,a3,4 # 3ff00004 <_HEAP_SIZE+0x3feff004>
8000eb2c:	ffc6a603          	lw	a2,-4(a3)
8000eb30:	00450513          	addi	a0,a0,4
8000eb34:	fec52e23          	sw	a2,-4(a0)
8000eb38:	fe5ff06f          	j	8000eb1c <__copybits+0x24>
8000eb3c:	00450513          	addi	a0,a0,4
8000eb40:	fe052e23          	sw	zero,-4(a0)
8000eb44:	fddff06f          	j	8000eb20 <__copybits+0x28>

8000eb48 <__any_on>:
8000eb48:	01052683          	lw	a3,16(a0)
8000eb4c:	4055d793          	srai	a5,a1,0x5
8000eb50:	01450713          	addi	a4,a0,20
8000eb54:	04f6c063          	blt	a3,a5,8000eb94 <__any_on+0x4c>
8000eb58:	02d7d463          	ble	a3,a5,8000eb80 <__any_on+0x38>
8000eb5c:	01f5f593          	andi	a1,a1,31
8000eb60:	02058063          	beqz	a1,8000eb80 <__any_on+0x38>
8000eb64:	00279693          	slli	a3,a5,0x2
8000eb68:	00d706b3          	add	a3,a4,a3
8000eb6c:	0006a603          	lw	a2,0(a3)
8000eb70:	00100513          	li	a0,1
8000eb74:	00b656b3          	srl	a3,a2,a1
8000eb78:	00b695b3          	sll	a1,a3,a1
8000eb7c:	02b61863          	bne	a2,a1,8000ebac <__any_on+0x64>
8000eb80:	00279793          	slli	a5,a5,0x2
8000eb84:	00f707b3          	add	a5,a4,a5
8000eb88:	00f76a63          	bltu	a4,a5,8000eb9c <__any_on+0x54>
8000eb8c:	00000513          	li	a0,0
8000eb90:	00008067          	ret
8000eb94:	00068793          	mv	a5,a3
8000eb98:	fe9ff06f          	j	8000eb80 <__any_on+0x38>
8000eb9c:	ffc78793          	addi	a5,a5,-4
8000eba0:	0007a683          	lw	a3,0(a5)
8000eba4:	fe0682e3          	beqz	a3,8000eb88 <__any_on+0x40>
8000eba8:	00100513          	li	a0,1
8000ebac:	00008067          	ret

8000ebb0 <_sbrk_r>:
8000ebb0:	ff010113          	addi	sp,sp,-16
8000ebb4:	00812423          	sw	s0,8(sp)
8000ebb8:	00912223          	sw	s1,4(sp)
8000ebbc:	8003b437          	lui	s0,0x8003b
8000ebc0:	00050493          	mv	s1,a0
8000ebc4:	00058513          	mv	a0,a1
8000ebc8:	00112623          	sw	ra,12(sp)
8000ebcc:	ac042423          	sw	zero,-1336(s0) # 8003aac8 <__stack+0xffffdffc>
8000ebd0:	ff5f70ef          	jal	ra,80006bc4 <_sbrk>
8000ebd4:	fff00793          	li	a5,-1
8000ebd8:	00f51863          	bne	a0,a5,8000ebe8 <_sbrk_r+0x38>
8000ebdc:	ac842783          	lw	a5,-1336(s0)
8000ebe0:	00078463          	beqz	a5,8000ebe8 <_sbrk_r+0x38>
8000ebe4:	00f4a023          	sw	a5,0(s1)
8000ebe8:	00c12083          	lw	ra,12(sp)
8000ebec:	00812403          	lw	s0,8(sp)
8000ebf0:	00412483          	lw	s1,4(sp)
8000ebf4:	01010113          	addi	sp,sp,16
8000ebf8:	00008067          	ret

8000ebfc <frexp>:
8000ebfc:	ff010113          	addi	sp,sp,-16
8000ec00:	00912223          	sw	s1,4(sp)
8000ec04:	800004b7          	lui	s1,0x80000
8000ec08:	00812423          	sw	s0,8(sp)
8000ec0c:	00112623          	sw	ra,12(sp)
8000ec10:	fff4c493          	not	s1,s1
8000ec14:	00b4f733          	and	a4,s1,a1
8000ec18:	00062023          	sw	zero,0(a2)
8000ec1c:	7ff00837          	lui	a6,0x7ff00
8000ec20:	00050693          	mv	a3,a0
8000ec24:	00058793          	mv	a5,a1
8000ec28:	00060413          	mv	s0,a2
8000ec2c:	07075263          	ble	a6,a4,8000ec90 <frexp+0x94>
8000ec30:	00a76833          	or	a6,a4,a0
8000ec34:	04080e63          	beqz	a6,8000ec90 <frexp+0x94>
8000ec38:	001007b7          	lui	a5,0x100
8000ec3c:	00058613          	mv	a2,a1
8000ec40:	02f75463          	ble	a5,a4,8000ec68 <frexp+0x6c>
8000ec44:	800217b7          	lui	a5,0x80021
8000ec48:	e407a603          	lw	a2,-448(a5) # 80020e40 <__stack+0xfffe4374>
8000ec4c:	e447a683          	lw	a3,-444(a5)
8000ec50:	1b8060ef          	jal	ra,80014e08 <__muldf3>
8000ec54:	fca00793          	li	a5,-54
8000ec58:	00050693          	mv	a3,a0
8000ec5c:	00058613          	mv	a2,a1
8000ec60:	00b4f733          	and	a4,s1,a1
8000ec64:	00f42023          	sw	a5,0(s0)
8000ec68:	00042783          	lw	a5,0(s0)
8000ec6c:	41475713          	srai	a4,a4,0x14
8000ec70:	c0270713          	addi	a4,a4,-1022 # ffeffc02 <__stack+0x7fec3136>
8000ec74:	00e78733          	add	a4,a5,a4
8000ec78:	801007b7          	lui	a5,0x80100
8000ec7c:	fff78793          	addi	a5,a5,-1 # 800fffff <__stack+0xc3533>
8000ec80:	00f67633          	and	a2,a2,a5
8000ec84:	3fe007b7          	lui	a5,0x3fe00
8000ec88:	00e42023          	sw	a4,0(s0)
8000ec8c:	00f667b3          	or	a5,a2,a5
8000ec90:	00c12083          	lw	ra,12(sp)
8000ec94:	00812403          	lw	s0,8(sp)
8000ec98:	00412483          	lw	s1,4(sp)
8000ec9c:	00068513          	mv	a0,a3
8000eca0:	00078593          	mv	a1,a5
8000eca4:	01010113          	addi	sp,sp,16
8000eca8:	00008067          	ret

8000ecac <_sprintf_r>:
8000ecac:	f6010113          	addi	sp,sp,-160
8000ecb0:	08f12a23          	sw	a5,148(sp)
8000ecb4:	800007b7          	lui	a5,0x80000
8000ecb8:	fff7c793          	not	a5,a5
8000ecbc:	00f12e23          	sw	a5,28(sp)
8000ecc0:	00f12823          	sw	a5,16(sp)
8000ecc4:	ffff07b7          	lui	a5,0xffff0
8000ecc8:	08d12623          	sw	a3,140(sp)
8000eccc:	00b12423          	sw	a1,8(sp)
8000ecd0:	00b12c23          	sw	a1,24(sp)
8000ecd4:	20878793          	addi	a5,a5,520 # ffff0208 <__stack+0x7ffb373c>
8000ecd8:	08c10693          	addi	a3,sp,140
8000ecdc:	00810593          	addi	a1,sp,8
8000ece0:	06112e23          	sw	ra,124(sp)
8000ece4:	00f12a23          	sw	a5,20(sp)
8000ece8:	08e12823          	sw	a4,144(sp)
8000ecec:	09012c23          	sw	a6,152(sp)
8000ecf0:	09112e23          	sw	a7,156(sp)
8000ecf4:	00d12223          	sw	a3,4(sp)
8000ecf8:	3c4000ef          	jal	ra,8000f0bc <_svfprintf_r>
8000ecfc:	00812783          	lw	a5,8(sp)
8000ed00:	00078023          	sb	zero,0(a5)
8000ed04:	07c12083          	lw	ra,124(sp)
8000ed08:	0a010113          	addi	sp,sp,160
8000ed0c:	00008067          	ret

8000ed10 <sprintf>:
8000ed10:	f6010113          	addi	sp,sp,-160
8000ed14:	08f12a23          	sw	a5,148(sp)
8000ed18:	800007b7          	lui	a5,0x80000
8000ed1c:	fff7c793          	not	a5,a5
8000ed20:	00f12e23          	sw	a5,28(sp)
8000ed24:	00f12823          	sw	a5,16(sp)
8000ed28:	ffff07b7          	lui	a5,0xffff0
8000ed2c:	20878793          	addi	a5,a5,520 # ffff0208 <__stack+0x7ffb373c>
8000ed30:	00f12a23          	sw	a5,20(sp)
8000ed34:	800217b7          	lui	a5,0x80021
8000ed38:	00a12423          	sw	a0,8(sp)
8000ed3c:	00a12c23          	sw	a0,24(sp)
8000ed40:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
8000ed44:	08c12423          	sw	a2,136(sp)
8000ed48:	08d12623          	sw	a3,140(sp)
8000ed4c:	00058613          	mv	a2,a1
8000ed50:	08810693          	addi	a3,sp,136
8000ed54:	00810593          	addi	a1,sp,8
8000ed58:	06112e23          	sw	ra,124(sp)
8000ed5c:	08e12823          	sw	a4,144(sp)
8000ed60:	09012c23          	sw	a6,152(sp)
8000ed64:	09112e23          	sw	a7,156(sp)
8000ed68:	00d12223          	sw	a3,4(sp)
8000ed6c:	350000ef          	jal	ra,8000f0bc <_svfprintf_r>
8000ed70:	00812783          	lw	a5,8(sp)
8000ed74:	00078023          	sb	zero,0(a5)
8000ed78:	07c12083          	lw	ra,124(sp)
8000ed7c:	0a010113          	addi	sp,sp,160
8000ed80:	00008067          	ret

8000ed84 <__sread>:
8000ed84:	ff010113          	addi	sp,sp,-16
8000ed88:	00812423          	sw	s0,8(sp)
8000ed8c:	00058413          	mv	s0,a1
8000ed90:	00e59583          	lh	a1,14(a1)
8000ed94:	00112623          	sw	ra,12(sp)
8000ed98:	275030ef          	jal	ra,8001280c <_read_r>
8000ed9c:	02054063          	bltz	a0,8000edbc <__sread+0x38>
8000eda0:	05042783          	lw	a5,80(s0)
8000eda4:	00a787b3          	add	a5,a5,a0
8000eda8:	04f42823          	sw	a5,80(s0)
8000edac:	00c12083          	lw	ra,12(sp)
8000edb0:	00812403          	lw	s0,8(sp)
8000edb4:	01010113          	addi	sp,sp,16
8000edb8:	00008067          	ret
8000edbc:	00c45783          	lhu	a5,12(s0)
8000edc0:	fffff737          	lui	a4,0xfffff
8000edc4:	fff70713          	addi	a4,a4,-1 # ffffefff <__stack+0x7ffc2533>
8000edc8:	00e7f7b3          	and	a5,a5,a4
8000edcc:	00f41623          	sh	a5,12(s0)
8000edd0:	fddff06f          	j	8000edac <__sread+0x28>

8000edd4 <__seofread>:
8000edd4:	00000513          	li	a0,0
8000edd8:	00008067          	ret

8000eddc <__swrite>:
8000eddc:	00c5d783          	lhu	a5,12(a1)
8000ede0:	fe010113          	addi	sp,sp,-32
8000ede4:	00812c23          	sw	s0,24(sp)
8000ede8:	00912a23          	sw	s1,20(sp)
8000edec:	01212823          	sw	s2,16(sp)
8000edf0:	01312623          	sw	s3,12(sp)
8000edf4:	00112e23          	sw	ra,28(sp)
8000edf8:	1007f793          	andi	a5,a5,256
8000edfc:	00050493          	mv	s1,a0
8000ee00:	00058413          	mv	s0,a1
8000ee04:	00060913          	mv	s2,a2
8000ee08:	00068993          	mv	s3,a3
8000ee0c:	00078a63          	beqz	a5,8000ee20 <__swrite+0x44>
8000ee10:	00e59583          	lh	a1,14(a1)
8000ee14:	00200693          	li	a3,2
8000ee18:	00000613          	li	a2,0
8000ee1c:	149030ef          	jal	ra,80012764 <_lseek_r>
8000ee20:	00c45783          	lhu	a5,12(s0)
8000ee24:	fffff737          	lui	a4,0xfffff
8000ee28:	fff70713          	addi	a4,a4,-1 # ffffefff <__stack+0x7ffc2533>
8000ee2c:	00e7f7b3          	and	a5,a5,a4
8000ee30:	00f41623          	sh	a5,12(s0)
8000ee34:	00e41583          	lh	a1,14(s0)
8000ee38:	01812403          	lw	s0,24(sp)
8000ee3c:	01c12083          	lw	ra,28(sp)
8000ee40:	00098693          	mv	a3,s3
8000ee44:	00090613          	mv	a2,s2
8000ee48:	00c12983          	lw	s3,12(sp)
8000ee4c:	01012903          	lw	s2,16(sp)
8000ee50:	00048513          	mv	a0,s1
8000ee54:	01412483          	lw	s1,20(sp)
8000ee58:	02010113          	addi	sp,sp,32
8000ee5c:	04c0306f          	j	80011ea8 <_write_r>

8000ee60 <__sseek>:
8000ee60:	ff010113          	addi	sp,sp,-16
8000ee64:	00812423          	sw	s0,8(sp)
8000ee68:	00058413          	mv	s0,a1
8000ee6c:	00e59583          	lh	a1,14(a1)
8000ee70:	00112623          	sw	ra,12(sp)
8000ee74:	0f1030ef          	jal	ra,80012764 <_lseek_r>
8000ee78:	fff00793          	li	a5,-1
8000ee7c:	00c45703          	lhu	a4,12(s0)
8000ee80:	02f51263          	bne	a0,a5,8000eea4 <__sseek+0x44>
8000ee84:	fffff7b7          	lui	a5,0xfffff
8000ee88:	fff78793          	addi	a5,a5,-1 # ffffefff <__stack+0x7ffc2533>
8000ee8c:	00e7f7b3          	and	a5,a5,a4
8000ee90:	00f41623          	sh	a5,12(s0)
8000ee94:	00c12083          	lw	ra,12(sp)
8000ee98:	00812403          	lw	s0,8(sp)
8000ee9c:	01010113          	addi	sp,sp,16
8000eea0:	00008067          	ret
8000eea4:	000017b7          	lui	a5,0x1
8000eea8:	00f767b3          	or	a5,a4,a5
8000eeac:	00f41623          	sh	a5,12(s0)
8000eeb0:	04a42823          	sw	a0,80(s0)
8000eeb4:	fe1ff06f          	j	8000ee94 <__sseek+0x34>

8000eeb8 <__sclose>:
8000eeb8:	00e59583          	lh	a1,14(a1)
8000eebc:	0dc0306f          	j	80011f98 <_close_r>

8000eec0 <strcmp>:
8000eec0:	00b56733          	or	a4,a0,a1
8000eec4:	fff00393          	li	t2,-1
8000eec8:	00377713          	andi	a4,a4,3
8000eecc:	10071063          	bnez	a4,8000efcc <strcmp+0x10c>
8000eed0:	7f7f87b7          	lui	a5,0x7f7f8
8000eed4:	f7f78793          	addi	a5,a5,-129 # 7f7f7f7f <_HEAP_SIZE+0x7f7f6f7f>
8000eed8:	00052603          	lw	a2,0(a0)
8000eedc:	0005a683          	lw	a3,0(a1)
8000eee0:	00f672b3          	and	t0,a2,a5
8000eee4:	00f66333          	or	t1,a2,a5
8000eee8:	00f282b3          	add	t0,t0,a5
8000eeec:	0062e2b3          	or	t0,t0,t1
8000eef0:	10729263          	bne	t0,t2,8000eff4 <strcmp+0x134>
8000eef4:	08d61663          	bne	a2,a3,8000ef80 <strcmp+0xc0>
8000eef8:	00452603          	lw	a2,4(a0)
8000eefc:	0045a683          	lw	a3,4(a1)
8000ef00:	00f672b3          	and	t0,a2,a5
8000ef04:	00f66333          	or	t1,a2,a5
8000ef08:	00f282b3          	add	t0,t0,a5
8000ef0c:	0062e2b3          	or	t0,t0,t1
8000ef10:	0c729e63          	bne	t0,t2,8000efec <strcmp+0x12c>
8000ef14:	06d61663          	bne	a2,a3,8000ef80 <strcmp+0xc0>
8000ef18:	00852603          	lw	a2,8(a0)
8000ef1c:	0085a683          	lw	a3,8(a1)
8000ef20:	00f672b3          	and	t0,a2,a5
8000ef24:	00f66333          	or	t1,a2,a5
8000ef28:	00f282b3          	add	t0,t0,a5
8000ef2c:	0062e2b3          	or	t0,t0,t1
8000ef30:	0c729863          	bne	t0,t2,8000f000 <strcmp+0x140>
8000ef34:	04d61663          	bne	a2,a3,8000ef80 <strcmp+0xc0>
8000ef38:	00c52603          	lw	a2,12(a0)
8000ef3c:	00c5a683          	lw	a3,12(a1)
8000ef40:	00f672b3          	and	t0,a2,a5
8000ef44:	00f66333          	or	t1,a2,a5
8000ef48:	00f282b3          	add	t0,t0,a5
8000ef4c:	0062e2b3          	or	t0,t0,t1
8000ef50:	0c729263          	bne	t0,t2,8000f014 <strcmp+0x154>
8000ef54:	02d61663          	bne	a2,a3,8000ef80 <strcmp+0xc0>
8000ef58:	01052603          	lw	a2,16(a0)
8000ef5c:	0105a683          	lw	a3,16(a1)
8000ef60:	00f672b3          	and	t0,a2,a5
8000ef64:	00f66333          	or	t1,a2,a5
8000ef68:	00f282b3          	add	t0,t0,a5
8000ef6c:	0062e2b3          	or	t0,t0,t1
8000ef70:	0a729c63          	bne	t0,t2,8000f028 <strcmp+0x168>
8000ef74:	01450513          	addi	a0,a0,20
8000ef78:	01458593          	addi	a1,a1,20
8000ef7c:	f4d60ee3          	beq	a2,a3,8000eed8 <strcmp+0x18>
8000ef80:	01061713          	slli	a4,a2,0x10
8000ef84:	01069793          	slli	a5,a3,0x10
8000ef88:	00f71e63          	bne	a4,a5,8000efa4 <strcmp+0xe4>
8000ef8c:	01065713          	srli	a4,a2,0x10
8000ef90:	0106d793          	srli	a5,a3,0x10
8000ef94:	40f70533          	sub	a0,a4,a5
8000ef98:	0ff57593          	andi	a1,a0,255
8000ef9c:	02059063          	bnez	a1,8000efbc <strcmp+0xfc>
8000efa0:	00008067          	ret
8000efa4:	01075713          	srli	a4,a4,0x10
8000efa8:	0107d793          	srli	a5,a5,0x10
8000efac:	40f70533          	sub	a0,a4,a5
8000efb0:	0ff57593          	andi	a1,a0,255
8000efb4:	00059463          	bnez	a1,8000efbc <strcmp+0xfc>
8000efb8:	00008067          	ret
8000efbc:	0ff77713          	andi	a4,a4,255
8000efc0:	0ff7f793          	andi	a5,a5,255
8000efc4:	40f70533          	sub	a0,a4,a5
8000efc8:	00008067          	ret
8000efcc:	00054603          	lbu	a2,0(a0)
8000efd0:	0005c683          	lbu	a3,0(a1)
8000efd4:	00150513          	addi	a0,a0,1
8000efd8:	00158593          	addi	a1,a1,1
8000efdc:	00d61463          	bne	a2,a3,8000efe4 <strcmp+0x124>
8000efe0:	fe0616e3          	bnez	a2,8000efcc <strcmp+0x10c>
8000efe4:	40d60533          	sub	a0,a2,a3
8000efe8:	00008067          	ret
8000efec:	00450513          	addi	a0,a0,4
8000eff0:	00458593          	addi	a1,a1,4
8000eff4:	fcd61ce3          	bne	a2,a3,8000efcc <strcmp+0x10c>
8000eff8:	00000513          	li	a0,0
8000effc:	00008067          	ret
8000f000:	00850513          	addi	a0,a0,8
8000f004:	00858593          	addi	a1,a1,8
8000f008:	fcd612e3          	bne	a2,a3,8000efcc <strcmp+0x10c>
8000f00c:	00000513          	li	a0,0
8000f010:	00008067          	ret
8000f014:	00c50513          	addi	a0,a0,12
8000f018:	00c58593          	addi	a1,a1,12
8000f01c:	fad618e3          	bne	a2,a3,8000efcc <strcmp+0x10c>
8000f020:	00000513          	li	a0,0
8000f024:	00008067          	ret
8000f028:	01050513          	addi	a0,a0,16
8000f02c:	01058593          	addi	a1,a1,16
8000f030:	f8d61ee3          	bne	a2,a3,8000efcc <strcmp+0x10c>
8000f034:	00000513          	li	a0,0
8000f038:	00008067          	ret

8000f03c <strcpy>:
8000f03c:	00050793          	mv	a5,a0
8000f040:	0005c703          	lbu	a4,0(a1)
8000f044:	00178793          	addi	a5,a5,1
8000f048:	00158593          	addi	a1,a1,1
8000f04c:	fee78fa3          	sb	a4,-1(a5)
8000f050:	fe0718e3          	bnez	a4,8000f040 <strcpy+0x4>
8000f054:	00008067          	ret

8000f058 <strlen>:
8000f058:	00050793          	mv	a5,a0
8000f05c:	00178793          	addi	a5,a5,1
8000f060:	fff7c703          	lbu	a4,-1(a5)
8000f064:	fe071ce3          	bnez	a4,8000f05c <strlen+0x4>
8000f068:	40a78533          	sub	a0,a5,a0
8000f06c:	fff50513          	addi	a0,a0,-1
8000f070:	00008067          	ret

8000f074 <strncpy>:
8000f074:	00050713          	mv	a4,a0
8000f078:	00061463          	bnez	a2,8000f080 <strncpy+0xc>
8000f07c:	00008067          	ret
8000f080:	00158593          	addi	a1,a1,1
8000f084:	fff5c683          	lbu	a3,-1(a1)
8000f088:	00170793          	addi	a5,a4,1
8000f08c:	fff60813          	addi	a6,a2,-1
8000f090:	fed78fa3          	sb	a3,-1(a5)
8000f094:	00069863          	bnez	a3,8000f0a4 <strncpy+0x30>
8000f098:	00c70733          	add	a4,a4,a2
8000f09c:	00e79a63          	bne	a5,a4,8000f0b0 <strncpy+0x3c>
8000f0a0:	00008067          	ret
8000f0a4:	00078713          	mv	a4,a5
8000f0a8:	00080613          	mv	a2,a6
8000f0ac:	fcdff06f          	j	8000f078 <strncpy+0x4>
8000f0b0:	00178793          	addi	a5,a5,1
8000f0b4:	fe078fa3          	sb	zero,-1(a5)
8000f0b8:	fe5ff06f          	j	8000f09c <strncpy+0x28>

8000f0bc <_svfprintf_r>:
8000f0bc:	e2010113          	addi	sp,sp,-480
8000f0c0:	1c112e23          	sw	ra,476(sp)
8000f0c4:	1c912a23          	sw	s1,468(sp)
8000f0c8:	1d212823          	sw	s2,464(sp)
8000f0cc:	1d312623          	sw	s3,460(sp)
8000f0d0:	1d512223          	sw	s5,452(sp)
8000f0d4:	00058993          	mv	s3,a1
8000f0d8:	00060493          	mv	s1,a2
8000f0dc:	00068a93          	mv	s5,a3
8000f0e0:	1c812c23          	sw	s0,472(sp)
8000f0e4:	1d412423          	sw	s4,456(sp)
8000f0e8:	1d612023          	sw	s6,448(sp)
8000f0ec:	1b712e23          	sw	s7,444(sp)
8000f0f0:	1b812c23          	sw	s8,440(sp)
8000f0f4:	1b912a23          	sw	s9,436(sp)
8000f0f8:	1ba12823          	sw	s10,432(sp)
8000f0fc:	1bb12623          	sw	s11,428(sp)
8000f100:	00050913          	mv	s2,a0
8000f104:	a80fe0ef          	jal	ra,8000d384 <_localeconv_r>
8000f108:	00052783          	lw	a5,0(a0)
8000f10c:	00078513          	mv	a0,a5
8000f110:	02f12a23          	sw	a5,52(sp)
8000f114:	f45ff0ef          	jal	ra,8000f058 <strlen>
8000f118:	00c9d783          	lhu	a5,12(s3)
8000f11c:	02a12023          	sw	a0,32(sp)
8000f120:	0e012023          	sw	zero,224(sp)
8000f124:	0e012223          	sw	zero,228(sp)
8000f128:	0e012423          	sw	zero,232(sp)
8000f12c:	0e012623          	sw	zero,236(sp)
8000f130:	0807f793          	andi	a5,a5,128
8000f134:	04078063          	beqz	a5,8000f174 <_svfprintf_r+0xb8>
8000f138:	0109a783          	lw	a5,16(s3)
8000f13c:	02079c63          	bnez	a5,8000f174 <_svfprintf_r+0xb8>
8000f140:	04000593          	li	a1,64
8000f144:	00090513          	mv	a0,s2
8000f148:	cd8fe0ef          	jal	ra,8000d620 <_malloc_r>
8000f14c:	00a9a023          	sw	a0,0(s3)
8000f150:	00a9a823          	sw	a0,16(s3)
8000f154:	00051c63          	bnez	a0,8000f16c <_svfprintf_r+0xb0>
8000f158:	00c00793          	li	a5,12
8000f15c:	00f92023          	sw	a5,0(s2)
8000f160:	fff00793          	li	a5,-1
8000f164:	02f12223          	sw	a5,36(sp)
8000f168:	5a00006f          	j	8000f708 <_svfprintf_r+0x64c>
8000f16c:	04000793          	li	a5,64
8000f170:	00f9aa23          	sw	a5,20(s3)
8000f174:	800207b7          	lui	a5,0x80020
8000f178:	61078793          	addi	a5,a5,1552 # 80020610 <__stack+0xfffe3b44>
8000f17c:	04f12623          	sw	a5,76(sp)
8000f180:	800207b7          	lui	a5,0x80020
8000f184:	0fc10893          	addi	a7,sp,252
8000f188:	78c78793          	addi	a5,a5,1932 # 8002078c <__stack+0xfffe3cc0>
8000f18c:	0d112a23          	sw	a7,212(sp)
8000f190:	0c012e23          	sw	zero,220(sp)
8000f194:	0c012c23          	sw	zero,216(sp)
8000f198:	00000a13          	li	s4,0
8000f19c:	04012023          	sw	zero,64(sp)
8000f1a0:	02012e23          	sw	zero,60(sp)
8000f1a4:	00012823          	sw	zero,16(sp)
8000f1a8:	02012823          	sw	zero,48(sp)
8000f1ac:	02012c23          	sw	zero,56(sp)
8000f1b0:	02012223          	sw	zero,36(sp)
8000f1b4:	00f12a23          	sw	a5,20(sp)
8000f1b8:	00048413          	mv	s0,s1
8000f1bc:	02500713          	li	a4,37
8000f1c0:	00044783          	lbu	a5,0(s0)
8000f1c4:	00078463          	beqz	a5,8000f1cc <_svfprintf_r+0x110>
8000f1c8:	0ce79063          	bne	a5,a4,8000f288 <_svfprintf_r+0x1cc>
8000f1cc:	40940b33          	sub	s6,s0,s1
8000f1d0:	040b0a63          	beqz	s6,8000f224 <_svfprintf_r+0x168>
8000f1d4:	0dc12783          	lw	a5,220(sp)
8000f1d8:	0098a023          	sw	s1,0(a7)
8000f1dc:	0168a223          	sw	s6,4(a7)
8000f1e0:	016787b3          	add	a5,a5,s6
8000f1e4:	0cf12e23          	sw	a5,220(sp)
8000f1e8:	0d812783          	lw	a5,216(sp)
8000f1ec:	00700713          	li	a4,7
8000f1f0:	00888893          	addi	a7,a7,8
8000f1f4:	00178793          	addi	a5,a5,1
8000f1f8:	0cf12c23          	sw	a5,216(sp)
8000f1fc:	00f75e63          	ble	a5,a4,8000f218 <_svfprintf_r+0x15c>
8000f200:	0d410613          	addi	a2,sp,212
8000f204:	00098593          	mv	a1,s3
8000f208:	00090513          	mv	a0,s2
8000f20c:	4fd030ef          	jal	ra,80012f08 <__ssprint_r>
8000f210:	4e051663          	bnez	a0,8000f6fc <_svfprintf_r+0x640>
8000f214:	0fc10893          	addi	a7,sp,252
8000f218:	02412783          	lw	a5,36(sp)
8000f21c:	016787b3          	add	a5,a5,s6
8000f220:	02f12223          	sw	a5,36(sp)
8000f224:	00044783          	lbu	a5,0(s0)
8000f228:	00079463          	bnez	a5,8000f230 <_svfprintf_r+0x174>
8000f22c:	5ad0106f          	j	80010fd8 <_svfprintf_r+0x1f1c>
8000f230:	00140793          	addi	a5,s0,1
8000f234:	00f12e23          	sw	a5,28(sp)
8000f238:	0a010ba3          	sb	zero,183(sp)
8000f23c:	fff00b13          	li	s6,-1
8000f240:	02012423          	sw	zero,40(sp)
8000f244:	00000413          	li	s0,0
8000f248:	00a00c13          	li	s8,10
8000f24c:	02a00b93          	li	s7,42
8000f250:	05a00613          	li	a2,90
8000f254:	00900713          	li	a4,9
8000f258:	01c12783          	lw	a5,28(sp)
8000f25c:	0007cd03          	lbu	s10,0(a5)
8000f260:	00178793          	addi	a5,a5,1
8000f264:	00f12e23          	sw	a5,28(sp)
8000f268:	fe0d0793          	addi	a5,s10,-32
8000f26c:	00f67463          	bleu	a5,a2,8000f274 <_svfprintf_r+0x1b8>
8000f270:	29c0106f          	j	8001050c <_svfprintf_r+0x1450>
8000f274:	04c12683          	lw	a3,76(sp)
8000f278:	00279793          	slli	a5,a5,0x2
8000f27c:	00d787b3          	add	a5,a5,a3
8000f280:	0007a783          	lw	a5,0(a5)
8000f284:	00078067          	jr	a5
8000f288:	00140413          	addi	s0,s0,1
8000f28c:	f35ff06f          	j	8000f1c0 <_svfprintf_r+0x104>
8000f290:	800217b7          	lui	a5,0x80021
8000f294:	d9078793          	addi	a5,a5,-624 # 80020d90 <__stack+0xfffe42c4>
8000f298:	04f12023          	sw	a5,64(sp)
8000f29c:	02047793          	andi	a5,s0,32
8000f2a0:	00079463          	bnez	a5,8000f2a8 <_svfprintf_r+0x1ec>
8000f2a4:	0840106f          	j	80010328 <_svfprintf_r+0x126c>
8000f2a8:	007a8a93          	addi	s5,s5,7
8000f2ac:	ff8afa93          	andi	s5,s5,-8
8000f2b0:	000aac03          	lw	s8,0(s5)
8000f2b4:	004aac83          	lw	s9,4(s5)
8000f2b8:	008a8793          	addi	a5,s5,8
8000f2bc:	00f12c23          	sw	a5,24(sp)
8000f2c0:	00147793          	andi	a5,s0,1
8000f2c4:	00078e63          	beqz	a5,8000f2e0 <_svfprintf_r+0x224>
8000f2c8:	019c67b3          	or	a5,s8,s9
8000f2cc:	00078a63          	beqz	a5,8000f2e0 <_svfprintf_r+0x224>
8000f2d0:	03000793          	li	a5,48
8000f2d4:	0af10c23          	sb	a5,184(sp)
8000f2d8:	0ba10ca3          	sb	s10,185(sp)
8000f2dc:	00246413          	ori	s0,s0,2
8000f2e0:	bff47413          	andi	s0,s0,-1025
8000f2e4:	00200793          	li	a5,2
8000f2e8:	4510006f          	j	8000ff38 <_svfprintf_r+0xe7c>
8000f2ec:	00090513          	mv	a0,s2
8000f2f0:	01112623          	sw	a7,12(sp)
8000f2f4:	890fe0ef          	jal	ra,8000d384 <_localeconv_r>
8000f2f8:	00452783          	lw	a5,4(a0)
8000f2fc:	00078513          	mv	a0,a5
8000f300:	02f12c23          	sw	a5,56(sp)
8000f304:	d55ff0ef          	jal	ra,8000f058 <strlen>
8000f308:	02a12823          	sw	a0,48(sp)
8000f30c:	00090513          	mv	a0,s2
8000f310:	874fe0ef          	jal	ra,8000d384 <_localeconv_r>
8000f314:	00852783          	lw	a5,8(a0)
8000f318:	00c12883          	lw	a7,12(sp)
8000f31c:	00f12823          	sw	a5,16(sp)
8000f320:	03012783          	lw	a5,48(sp)
8000f324:	f20786e3          	beqz	a5,8000f250 <_svfprintf_r+0x194>
8000f328:	01012783          	lw	a5,16(sp)
8000f32c:	f20782e3          	beqz	a5,8000f250 <_svfprintf_r+0x194>
8000f330:	0007c783          	lbu	a5,0(a5)
8000f334:	f0078ee3          	beqz	a5,8000f250 <_svfprintf_r+0x194>
8000f338:	40046413          	ori	s0,s0,1024
8000f33c:	f15ff06f          	j	8000f250 <_svfprintf_r+0x194>
8000f340:	0b714783          	lbu	a5,183(sp)
8000f344:	f00796e3          	bnez	a5,8000f250 <_svfprintf_r+0x194>
8000f348:	02000793          	li	a5,32
8000f34c:	0af10ba3          	sb	a5,183(sp)
8000f350:	f01ff06f          	j	8000f250 <_svfprintf_r+0x194>
8000f354:	00146413          	ori	s0,s0,1
8000f358:	ef9ff06f          	j	8000f250 <_svfprintf_r+0x194>
8000f35c:	000aa783          	lw	a5,0(s5)
8000f360:	004a8a93          	addi	s5,s5,4
8000f364:	02f12423          	sw	a5,40(sp)
8000f368:	ee07d4e3          	bgez	a5,8000f250 <_svfprintf_r+0x194>
8000f36c:	40f007b3          	neg	a5,a5
8000f370:	02f12423          	sw	a5,40(sp)
8000f374:	00446413          	ori	s0,s0,4
8000f378:	ed9ff06f          	j	8000f250 <_svfprintf_r+0x194>
8000f37c:	02b00793          	li	a5,43
8000f380:	fcdff06f          	j	8000f34c <_svfprintf_r+0x290>
8000f384:	01c12683          	lw	a3,28(sp)
8000f388:	01c12783          	lw	a5,28(sp)
8000f38c:	0006cd03          	lbu	s10,0(a3)
8000f390:	00178793          	addi	a5,a5,1
8000f394:	037d1e63          	bne	s10,s7,8000f3d0 <_svfprintf_r+0x314>
8000f398:	000aab03          	lw	s6,0(s5)
8000f39c:	004a8713          	addi	a4,s5,4
8000f3a0:	000b5463          	bgez	s6,8000f3a8 <_svfprintf_r+0x2ec>
8000f3a4:	fff00b13          	li	s6,-1
8000f3a8:	00070a93          	mv	s5,a4
8000f3ac:	00f12e23          	sw	a5,28(sp)
8000f3b0:	ea1ff06f          	j	8000f250 <_svfprintf_r+0x194>
8000f3b4:	038b0333          	mul	t1,s6,s8
8000f3b8:	00178793          	addi	a5,a5,1
8000f3bc:	fff7cd03          	lbu	s10,-1(a5)
8000f3c0:	00d30b33          	add	s6,t1,a3
8000f3c4:	fd0d0693          	addi	a3,s10,-48
8000f3c8:	fed776e3          	bleu	a3,a4,8000f3b4 <_svfprintf_r+0x2f8>
8000f3cc:	e99ff06f          	j	8000f264 <_svfprintf_r+0x1a8>
8000f3d0:	00000b13          	li	s6,0
8000f3d4:	ff1ff06f          	j	8000f3c4 <_svfprintf_r+0x308>
8000f3d8:	08046413          	ori	s0,s0,128
8000f3dc:	e75ff06f          	j	8000f250 <_svfprintf_r+0x194>
8000f3e0:	01c12783          	lw	a5,28(sp)
8000f3e4:	02012423          	sw	zero,40(sp)
8000f3e8:	02812683          	lw	a3,40(sp)
8000f3ec:	fd0d0d13          	addi	s10,s10,-48
8000f3f0:	00178793          	addi	a5,a5,1
8000f3f4:	038686b3          	mul	a3,a3,s8
8000f3f8:	00dd06b3          	add	a3,s10,a3
8000f3fc:	fff7cd03          	lbu	s10,-1(a5)
8000f400:	02d12423          	sw	a3,40(sp)
8000f404:	fd0d0693          	addi	a3,s10,-48
8000f408:	fed770e3          	bleu	a3,a4,8000f3e8 <_svfprintf_r+0x32c>
8000f40c:	e59ff06f          	j	8000f264 <_svfprintf_r+0x1a8>
8000f410:	00846413          	ori	s0,s0,8
8000f414:	e3dff06f          	j	8000f250 <_svfprintf_r+0x194>
8000f418:	01c12783          	lw	a5,28(sp)
8000f41c:	0007c703          	lbu	a4,0(a5)
8000f420:	06800793          	li	a5,104
8000f424:	00f71c63          	bne	a4,a5,8000f43c <_svfprintf_r+0x380>
8000f428:	01c12783          	lw	a5,28(sp)
8000f42c:	20046413          	ori	s0,s0,512
8000f430:	00178793          	addi	a5,a5,1
8000f434:	00f12e23          	sw	a5,28(sp)
8000f438:	e19ff06f          	j	8000f250 <_svfprintf_r+0x194>
8000f43c:	04046413          	ori	s0,s0,64
8000f440:	e11ff06f          	j	8000f250 <_svfprintf_r+0x194>
8000f444:	01c12783          	lw	a5,28(sp)
8000f448:	0007c703          	lbu	a4,0(a5)
8000f44c:	06c00793          	li	a5,108
8000f450:	00f71c63          	bne	a4,a5,8000f468 <_svfprintf_r+0x3ac>
8000f454:	01c12783          	lw	a5,28(sp)
8000f458:	00178793          	addi	a5,a5,1
8000f45c:	00f12e23          	sw	a5,28(sp)
8000f460:	02046413          	ori	s0,s0,32
8000f464:	dedff06f          	j	8000f250 <_svfprintf_r+0x194>
8000f468:	01046413          	ori	s0,s0,16
8000f46c:	de5ff06f          	j	8000f250 <_svfprintf_r+0x194>
8000f470:	004a8793          	addi	a5,s5,4
8000f474:	00f12c23          	sw	a5,24(sp)
8000f478:	000aa783          	lw	a5,0(s5)
8000f47c:	0a010ba3          	sb	zero,183(sp)
8000f480:	12f10e23          	sb	a5,316(sp)
8000f484:	00012623          	sw	zero,12(sp)
8000f488:	00100b13          	li	s6,1
8000f48c:	00000a93          	li	s5,0
8000f490:	00000c13          	li	s8,0
8000f494:	00000b93          	li	s7,0
8000f498:	00000c93          	li	s9,0
8000f49c:	13c10493          	addi	s1,sp,316
8000f4a0:	3a10006f          	j	80010040 <_svfprintf_r+0xf84>
8000f4a4:	01046413          	ori	s0,s0,16
8000f4a8:	02047793          	andi	a5,s0,32
8000f4ac:	04078e63          	beqz	a5,8000f508 <_svfprintf_r+0x44c>
8000f4b0:	007a8a93          	addi	s5,s5,7
8000f4b4:	ff8afa93          	andi	s5,s5,-8
8000f4b8:	000aac03          	lw	s8,0(s5)
8000f4bc:	004aac83          	lw	s9,4(s5)
8000f4c0:	008a8793          	addi	a5,s5,8
8000f4c4:	00f12c23          	sw	a5,24(sp)
8000f4c8:	000cde63          	bgez	s9,8000f4e4 <_svfprintf_r+0x428>
8000f4cc:	41800c33          	neg	s8,s8
8000f4d0:	018037b3          	snez	a5,s8
8000f4d4:	41900cb3          	neg	s9,s9
8000f4d8:	40fc8cb3          	sub	s9,s9,a5
8000f4dc:	02d00793          	li	a5,45
8000f4e0:	0af10ba3          	sb	a5,183(sp)
8000f4e4:	fff00793          	li	a5,-1
8000f4e8:	66fb1ee3          	bne	s6,a5,80010364 <_svfprintf_r+0x12a8>
8000f4ec:	700c90e3          	bnez	s9,800103ec <_svfprintf_r+0x1330>
8000f4f0:	00900793          	li	a5,9
8000f4f4:	6f87ece3          	bltu	a5,s8,800103ec <_svfprintf_r+0x1330>
8000f4f8:	030c0c13          	addi	s8,s8,48
8000f4fc:	19810fa3          	sb	s8,415(sp)
8000f500:	19f10493          	addi	s1,sp,415
8000f504:	6c10006f          	j	800103c4 <_svfprintf_r+0x1308>
8000f508:	004a8793          	addi	a5,s5,4
8000f50c:	00f12c23          	sw	a5,24(sp)
8000f510:	01047793          	andi	a5,s0,16
8000f514:	00078863          	beqz	a5,8000f524 <_svfprintf_r+0x468>
8000f518:	000aac03          	lw	s8,0(s5)
8000f51c:	41fc5c93          	srai	s9,s8,0x1f
8000f520:	fa9ff06f          	j	8000f4c8 <_svfprintf_r+0x40c>
8000f524:	04047793          	andi	a5,s0,64
8000f528:	000aac03          	lw	s8,0(s5)
8000f52c:	00078863          	beqz	a5,8000f53c <_svfprintf_r+0x480>
8000f530:	010c1c13          	slli	s8,s8,0x10
8000f534:	410c5c13          	srai	s8,s8,0x10
8000f538:	fe5ff06f          	j	8000f51c <_svfprintf_r+0x460>
8000f53c:	20047793          	andi	a5,s0,512
8000f540:	fc078ee3          	beqz	a5,8000f51c <_svfprintf_r+0x460>
8000f544:	018c1c13          	slli	s8,s8,0x18
8000f548:	418c5c13          	srai	s8,s8,0x18
8000f54c:	fd1ff06f          	j	8000f51c <_svfprintf_r+0x460>
8000f550:	00847793          	andi	a5,s0,8
8000f554:	0a078e63          	beqz	a5,8000f610 <_svfprintf_r+0x554>
8000f558:	004a8793          	addi	a5,s5,4
8000f55c:	00f12c23          	sw	a5,24(sp)
8000f560:	000aa783          	lw	a5,0(s5)
8000f564:	0007a603          	lw	a2,0(a5)
8000f568:	0047a683          	lw	a3,4(a5)
8000f56c:	0087a703          	lw	a4,8(a5)
8000f570:	00c7a783          	lw	a5,12(a5)
8000f574:	0ec12023          	sw	a2,224(sp)
8000f578:	0ed12223          	sw	a3,228(sp)
8000f57c:	0ee12423          	sw	a4,232(sp)
8000f580:	0ef12623          	sw	a5,236(sp)
8000f584:	0e010513          	addi	a0,sp,224
8000f588:	01112623          	sw	a7,12(sp)
8000f58c:	d8dfd0ef          	jal	ra,8000d318 <_ldcheck>
8000f590:	0aa12e23          	sw	a0,188(sp)
8000f594:	00200793          	li	a5,2
8000f598:	00c12883          	lw	a7,12(sp)
8000f59c:	0cf51663          	bne	a0,a5,8000f668 <_svfprintf_r+0x5ac>
8000f5a0:	0e012783          	lw	a5,224(sp)
8000f5a4:	09010593          	addi	a1,sp,144
8000f5a8:	0a010513          	addi	a0,sp,160
8000f5ac:	0af12023          	sw	a5,160(sp)
8000f5b0:	0e412783          	lw	a5,228(sp)
8000f5b4:	08012823          	sw	zero,144(sp)
8000f5b8:	08012a23          	sw	zero,148(sp)
8000f5bc:	0af12223          	sw	a5,164(sp)
8000f5c0:	0e812783          	lw	a5,232(sp)
8000f5c4:	08012c23          	sw	zero,152(sp)
8000f5c8:	08012e23          	sw	zero,156(sp)
8000f5cc:	0af12423          	sw	a5,168(sp)
8000f5d0:	0ec12783          	lw	a5,236(sp)
8000f5d4:	0af12623          	sw	a5,172(sp)
8000f5d8:	034060ef          	jal	ra,8001560c <__letf2>
8000f5dc:	00c12883          	lw	a7,12(sp)
8000f5e0:	00055663          	bgez	a0,8000f5ec <_svfprintf_r+0x530>
8000f5e4:	02d00793          	li	a5,45
8000f5e8:	0af10ba3          	sb	a5,183(sp)
8000f5ec:	04700793          	li	a5,71
8000f5f0:	07a7c663          	blt	a5,s10,8000f65c <_svfprintf_r+0x5a0>
8000f5f4:	800214b7          	lui	s1,0x80021
8000f5f8:	d6c48493          	addi	s1,s1,-660 # 80020d6c <__stack+0xfffe42a0>
8000f5fc:	f7f47413          	andi	s0,s0,-129
8000f600:	00012623          	sw	zero,12(sp)
8000f604:	00300b13          	li	s6,3
8000f608:	00000a93          	li	s5,0
8000f60c:	5c90006f          	j	800103d4 <_svfprintf_r+0x1318>
8000f610:	007a8a93          	addi	s5,s5,7
8000f614:	ff8afa93          	andi	s5,s5,-8
8000f618:	000aa583          	lw	a1,0(s5)
8000f61c:	004aa603          	lw	a2,4(s5)
8000f620:	008a8793          	addi	a5,s5,8
8000f624:	0a010513          	addi	a0,sp,160
8000f628:	01112623          	sw	a7,12(sp)
8000f62c:	00f12c23          	sw	a5,24(sp)
8000f630:	11d080ef          	jal	ra,80017f4c <__extenddftf2>
8000f634:	0a012783          	lw	a5,160(sp)
8000f638:	00c12883          	lw	a7,12(sp)
8000f63c:	0ef12023          	sw	a5,224(sp)
8000f640:	0a412783          	lw	a5,164(sp)
8000f644:	0ef12223          	sw	a5,228(sp)
8000f648:	0a812783          	lw	a5,168(sp)
8000f64c:	0ef12423          	sw	a5,232(sp)
8000f650:	0ac12783          	lw	a5,172(sp)
8000f654:	0ef12623          	sw	a5,236(sp)
8000f658:	f2dff06f          	j	8000f584 <_svfprintf_r+0x4c8>
8000f65c:	800214b7          	lui	s1,0x80021
8000f660:	d7048493          	addi	s1,s1,-656 # 80020d70 <__stack+0xfffe42a4>
8000f664:	f99ff06f          	j	8000f5fc <_svfprintf_r+0x540>
8000f668:	00100793          	li	a5,1
8000f66c:	02f51a63          	bne	a0,a5,8000f6a0 <_svfprintf_r+0x5e4>
8000f670:	0ec12783          	lw	a5,236(sp)
8000f674:	0007d663          	bgez	a5,8000f680 <_svfprintf_r+0x5c4>
8000f678:	02d00793          	li	a5,45
8000f67c:	0af10ba3          	sb	a5,183(sp)
8000f680:	04700793          	li	a5,71
8000f684:	01a7c863          	blt	a5,s10,8000f694 <_svfprintf_r+0x5d8>
8000f688:	800214b7          	lui	s1,0x80021
8000f68c:	d7448493          	addi	s1,s1,-652 # 80020d74 <__stack+0xfffe42a8>
8000f690:	f6dff06f          	j	8000f5fc <_svfprintf_r+0x540>
8000f694:	800214b7          	lui	s1,0x80021
8000f698:	d7848493          	addi	s1,s1,-648 # 80020d78 <__stack+0xfffe42ac>
8000f69c:	f61ff06f          	j	8000f5fc <_svfprintf_r+0x540>
8000f6a0:	fdfd7b93          	andi	s7,s10,-33
8000f6a4:	04100793          	li	a5,65
8000f6a8:	0afb9063          	bne	s7,a5,8000f748 <_svfprintf_r+0x68c>
8000f6ac:	03000793          	li	a5,48
8000f6b0:	0af10c23          	sb	a5,184(sp)
8000f6b4:	06100713          	li	a4,97
8000f6b8:	05800793          	li	a5,88
8000f6bc:	00ed1463          	bne	s10,a4,8000f6c4 <_svfprintf_r+0x608>
8000f6c0:	07800793          	li	a5,120
8000f6c4:	0af10ca3          	sb	a5,185(sp)
8000f6c8:	06300793          	li	a5,99
8000f6cc:	00246413          	ori	s0,s0,2
8000f6d0:	4f67d263          	ble	s6,a5,8000fbb4 <_svfprintf_r+0xaf8>
8000f6d4:	001b0593          	addi	a1,s6,1
8000f6d8:	00090513          	mv	a0,s2
8000f6dc:	01112623          	sw	a7,12(sp)
8000f6e0:	f41fd0ef          	jal	ra,8000d620 <_malloc_r>
8000f6e4:	00050493          	mv	s1,a0
8000f6e8:	00c12883          	lw	a7,12(sp)
8000f6ec:	4c051a63          	bnez	a0,8000fbc0 <_svfprintf_r+0xb04>
8000f6f0:	00c9d783          	lhu	a5,12(s3)
8000f6f4:	0407e793          	ori	a5,a5,64
8000f6f8:	00f99623          	sh	a5,12(s3)
8000f6fc:	00c9d783          	lhu	a5,12(s3)
8000f700:	0407f793          	andi	a5,a5,64
8000f704:	a4079ee3          	bnez	a5,8000f160 <_svfprintf_r+0xa4>
8000f708:	1dc12083          	lw	ra,476(sp)
8000f70c:	1d812403          	lw	s0,472(sp)
8000f710:	02412503          	lw	a0,36(sp)
8000f714:	1d412483          	lw	s1,468(sp)
8000f718:	1d012903          	lw	s2,464(sp)
8000f71c:	1cc12983          	lw	s3,460(sp)
8000f720:	1c812a03          	lw	s4,456(sp)
8000f724:	1c412a83          	lw	s5,452(sp)
8000f728:	1c012b03          	lw	s6,448(sp)
8000f72c:	1bc12b83          	lw	s7,444(sp)
8000f730:	1b812c03          	lw	s8,440(sp)
8000f734:	1b412c83          	lw	s9,436(sp)
8000f738:	1b012d03          	lw	s10,432(sp)
8000f73c:	1ac12d83          	lw	s11,428(sp)
8000f740:	1e010113          	addi	sp,sp,480
8000f744:	00008067          	ret
8000f748:	fff00793          	li	a5,-1
8000f74c:	46fb0e63          	beq	s6,a5,8000fbc8 <_svfprintf_r+0xb0c>
8000f750:	04700793          	li	a5,71
8000f754:	00012623          	sw	zero,12(sp)
8000f758:	00fb9463          	bne	s7,a5,8000f760 <_svfprintf_r+0x6a4>
8000f75c:	460b0c63          	beqz	s6,8000fbd4 <_svfprintf_r+0xb18>
8000f760:	0ec12a83          	lw	s5,236(sp)
8000f764:	10046793          	ori	a5,s0,256
8000f768:	02f12623          	sw	a5,44(sp)
8000f76c:	04012223          	sw	zero,68(sp)
8000f770:	0e012e03          	lw	t3,224(sp)
8000f774:	0e412d83          	lw	s11,228(sp)
8000f778:	0e812c83          	lw	s9,232(sp)
8000f77c:	000ada63          	bgez	s5,8000f790 <_svfprintf_r+0x6d4>
8000f780:	800007b7          	lui	a5,0x80000
8000f784:	0157cab3          	xor	s5,a5,s5
8000f788:	02d00793          	li	a5,45
8000f78c:	04f12223          	sw	a5,68(sp)
8000f790:	04100793          	li	a5,65
8000f794:	48fb9a63          	bne	s7,a5,8000fc28 <_svfprintf_r+0xb6c>
8000f798:	0a010513          	addi	a0,sp,160
8000f79c:	05112c23          	sw	a7,88(sp)
8000f7a0:	0bc12023          	sw	t3,160(sp)
8000f7a4:	0b912423          	sw	s9,168(sp)
8000f7a8:	0bb12223          	sw	s11,164(sp)
8000f7ac:	0b512623          	sw	s5,172(sp)
8000f7b0:	1c1080ef          	jal	ra,80018170 <__trunctfdf2>
8000f7b4:	0bc10613          	addi	a2,sp,188
8000f7b8:	c44ff0ef          	jal	ra,8000ebfc <frexp>
8000f7bc:	00058613          	mv	a2,a1
8000f7c0:	00050593          	mv	a1,a0
8000f7c4:	0a010513          	addi	a0,sp,160
8000f7c8:	784080ef          	jal	ra,80017f4c <__extenddftf2>
8000f7cc:	0a012783          	lw	a5,160(sp)
8000f7d0:	07010613          	addi	a2,sp,112
8000f7d4:	08010593          	addi	a1,sp,128
8000f7d8:	08f12023          	sw	a5,128(sp)
8000f7dc:	0a412783          	lw	a5,164(sp)
8000f7e0:	09010513          	addi	a0,sp,144
8000f7e4:	06012823          	sw	zero,112(sp)
8000f7e8:	08f12223          	sw	a5,132(sp)
8000f7ec:	0a812783          	lw	a5,168(sp)
8000f7f0:	06012a23          	sw	zero,116(sp)
8000f7f4:	06012c23          	sw	zero,120(sp)
8000f7f8:	08f12423          	sw	a5,136(sp)
8000f7fc:	0ac12783          	lw	a5,172(sp)
8000f800:	08f12623          	sw	a5,140(sp)
8000f804:	3ffc07b7          	lui	a5,0x3ffc0
8000f808:	06f12e23          	sw	a5,124(sp)
8000f80c:	761050ef          	jal	ra,8001576c <__multf3>
8000f810:	09012803          	lw	a6,144(sp)
8000f814:	09412603          	lw	a2,148(sp)
8000f818:	09812683          	lw	a3,152(sp)
8000f81c:	09c12c83          	lw	s9,156(sp)
8000f820:	09010593          	addi	a1,sp,144
8000f824:	0a010513          	addi	a0,sp,160
8000f828:	0b012023          	sw	a6,160(sp)
8000f82c:	05012a23          	sw	a6,84(sp)
8000f830:	0ac12223          	sw	a2,164(sp)
8000f834:	04c12823          	sw	a2,80(sp)
8000f838:	0ad12423          	sw	a3,168(sp)
8000f83c:	04d12423          	sw	a3,72(sp)
8000f840:	0b912623          	sw	s9,172(sp)
8000f844:	08012823          	sw	zero,144(sp)
8000f848:	08012a23          	sw	zero,148(sp)
8000f84c:	08012c23          	sw	zero,152(sp)
8000f850:	08012e23          	sw	zero,156(sp)
8000f854:	38d050ef          	jal	ra,800153e0 <__eqtf2>
8000f858:	04812683          	lw	a3,72(sp)
8000f85c:	05012603          	lw	a2,80(sp)
8000f860:	05412803          	lw	a6,84(sp)
8000f864:	05812883          	lw	a7,88(sp)
8000f868:	00051663          	bnez	a0,8000f874 <_svfprintf_r+0x7b8>
8000f86c:	00100713          	li	a4,1
8000f870:	0ae12e23          	sw	a4,188(sp)
8000f874:	06100713          	li	a4,97
8000f878:	36ed1463          	bne	s10,a4,8000fbe0 <_svfprintf_r+0xb24>
8000f87c:	80021a37          	lui	s4,0x80021
8000f880:	d7ca0a13          	addi	s4,s4,-644 # 80020d7c <__stack+0xfffe42b0>
8000f884:	fffb0e13          	addi	t3,s6,-1
8000f888:	00048d93          	mv	s11,s1
8000f88c:	400307b7          	lui	a5,0x40030
8000f890:	09010593          	addi	a1,sp,144
8000f894:	08c12a23          	sw	a2,148(sp)
8000f898:	0a010513          	addi	a0,sp,160
8000f89c:	08010613          	addi	a2,sp,128
8000f8a0:	05112c23          	sw	a7,88(sp)
8000f8a4:	05c12a23          	sw	t3,84(sp)
8000f8a8:	09012823          	sw	a6,144(sp)
8000f8ac:	08f12623          	sw	a5,140(sp)
8000f8b0:	08d12c23          	sw	a3,152(sp)
8000f8b4:	09912e23          	sw	s9,156(sp)
8000f8b8:	08012023          	sw	zero,128(sp)
8000f8bc:	08012223          	sw	zero,132(sp)
8000f8c0:	08012423          	sw	zero,136(sp)
8000f8c4:	6a9050ef          	jal	ra,8001576c <__multf3>
8000f8c8:	0a012603          	lw	a2,160(sp)
8000f8cc:	0a412683          	lw	a3,164(sp)
8000f8d0:	0a010513          	addi	a0,sp,160
8000f8d4:	04c12823          	sw	a2,80(sp)
8000f8d8:	04d12423          	sw	a3,72(sp)
8000f8dc:	38c080ef          	jal	ra,80017c68 <__fixtfsi>
8000f8e0:	00050593          	mv	a1,a0
8000f8e4:	00050a93          	mv	s5,a0
8000f8e8:	0a010513          	addi	a0,sp,160
8000f8ec:	0a812c83          	lw	s9,168(sp)
8000f8f0:	0ac12c03          	lw	s8,172(sp)
8000f8f4:	4d8080ef          	jal	ra,80017dcc <__floatsitf>
8000f8f8:	0a012783          	lw	a5,160(sp)
8000f8fc:	05012603          	lw	a2,80(sp)
8000f900:	04812683          	lw	a3,72(sp)
8000f904:	06f12823          	sw	a5,112(sp)
8000f908:	0a412783          	lw	a5,164(sp)
8000f90c:	08c12023          	sw	a2,128(sp)
8000f910:	08010593          	addi	a1,sp,128
8000f914:	06f12a23          	sw	a5,116(sp)
8000f918:	0a812783          	lw	a5,168(sp)
8000f91c:	07010613          	addi	a2,sp,112
8000f920:	09010513          	addi	a0,sp,144
8000f924:	06f12c23          	sw	a5,120(sp)
8000f928:	0ac12783          	lw	a5,172(sp)
8000f92c:	09912423          	sw	s9,136(sp)
8000f930:	09812623          	sw	s8,140(sp)
8000f934:	06f12e23          	sw	a5,124(sp)
8000f938:	08d12223          	sw	a3,132(sp)
8000f93c:	66d060ef          	jal	ra,800167a8 <__subtf3>
8000f940:	015a05b3          	add	a1,s4,s5
8000f944:	0005c583          	lbu	a1,0(a1)
8000f948:	05412e03          	lw	t3,84(sp)
8000f94c:	09c12c03          	lw	s8,156(sp)
8000f950:	001d8d93          	addi	s11,s11,1
8000f954:	09012283          	lw	t0,144(sp)
8000f958:	09412f83          	lw	t6,148(sp)
8000f95c:	09812f03          	lw	t5,152(sp)
8000f960:	05c12423          	sw	t3,72(sp)
8000f964:	febd8fa3          	sb	a1,-1(s11)
8000f968:	fff00793          	li	a5,-1
8000f96c:	000c0c93          	mv	s9,s8
8000f970:	05812883          	lw	a7,88(sp)
8000f974:	06fe0c63          	beq	t3,a5,8000f9ec <_svfprintf_r+0x930>
8000f978:	fffe0e13          	addi	t3,t3,-1
8000f97c:	09010593          	addi	a1,sp,144
8000f980:	0a010513          	addi	a0,sp,160
8000f984:	07e12623          	sw	t5,108(sp)
8000f988:	07f12423          	sw	t6,104(sp)
8000f98c:	06512223          	sw	t0,100(sp)
8000f990:	07112023          	sw	a7,96(sp)
8000f994:	05c12e23          	sw	t3,92(sp)
8000f998:	0a512023          	sw	t0,160(sp)
8000f99c:	04512c23          	sw	t0,88(sp)
8000f9a0:	0bf12223          	sw	t6,164(sp)
8000f9a4:	05f12a23          	sw	t6,84(sp)
8000f9a8:	0be12423          	sw	t5,168(sp)
8000f9ac:	05e12823          	sw	t5,80(sp)
8000f9b0:	0b812623          	sw	s8,172(sp)
8000f9b4:	08012823          	sw	zero,144(sp)
8000f9b8:	08012a23          	sw	zero,148(sp)
8000f9bc:	08012c23          	sw	zero,152(sp)
8000f9c0:	08012e23          	sw	zero,156(sp)
8000f9c4:	21d050ef          	jal	ra,800153e0 <__eqtf2>
8000f9c8:	05012683          	lw	a3,80(sp)
8000f9cc:	05412603          	lw	a2,84(sp)
8000f9d0:	05812803          	lw	a6,88(sp)
8000f9d4:	05c12e03          	lw	t3,92(sp)
8000f9d8:	06012883          	lw	a7,96(sp)
8000f9dc:	06412283          	lw	t0,100(sp)
8000f9e0:	06812f83          	lw	t6,104(sp)
8000f9e4:	06c12f03          	lw	t5,108(sp)
8000f9e8:	ea0512e3          	bnez	a0,8000f88c <_svfprintf_r+0x7d0>
8000f9ec:	3ffe0cb7          	lui	s9,0x3ffe0
8000f9f0:	09010593          	addi	a1,sp,144
8000f9f4:	0a010513          	addi	a0,sp,160
8000f9f8:	05112823          	sw	a7,80(sp)
8000f9fc:	0a512023          	sw	t0,160(sp)
8000fa00:	04512e23          	sw	t0,92(sp)
8000fa04:	0bf12223          	sw	t6,164(sp)
8000fa08:	05f12c23          	sw	t6,88(sp)
8000fa0c:	0be12423          	sw	t5,168(sp)
8000fa10:	05e12a23          	sw	t5,84(sp)
8000fa14:	0b812623          	sw	s8,172(sp)
8000fa18:	08012823          	sw	zero,144(sp)
8000fa1c:	08012a23          	sw	zero,148(sp)
8000fa20:	08012c23          	sw	zero,152(sp)
8000fa24:	09912e23          	sw	s9,156(sp)
8000fa28:	285050ef          	jal	ra,800154ac <__getf2>
8000fa2c:	05012883          	lw	a7,80(sp)
8000fa30:	04a04663          	bgtz	a0,8000fa7c <_svfprintf_r+0x9c0>
8000fa34:	05c12283          	lw	t0,92(sp)
8000fa38:	05812f83          	lw	t6,88(sp)
8000fa3c:	05412f03          	lw	t5,84(sp)
8000fa40:	09010593          	addi	a1,sp,144
8000fa44:	0a010513          	addi	a0,sp,160
8000fa48:	0a512023          	sw	t0,160(sp)
8000fa4c:	0bf12223          	sw	t6,164(sp)
8000fa50:	0be12423          	sw	t5,168(sp)
8000fa54:	0b812623          	sw	s8,172(sp)
8000fa58:	08012823          	sw	zero,144(sp)
8000fa5c:	08012a23          	sw	zero,148(sp)
8000fa60:	08012c23          	sw	zero,152(sp)
8000fa64:	09912e23          	sw	s9,156(sp)
8000fa68:	179050ef          	jal	ra,800153e0 <__eqtf2>
8000fa6c:	05012883          	lw	a7,80(sp)
8000fa70:	1a051263          	bnez	a0,8000fc14 <_svfprintf_r+0xb58>
8000fa74:	001afa93          	andi	s5,s5,1
8000fa78:	180a8e63          	beqz	s5,8000fc14 <_svfprintf_r+0xb58>
8000fa7c:	00fa4603          	lbu	a2,15(s4)
8000fa80:	0db12623          	sw	s11,204(sp)
8000fa84:	03000593          	li	a1,48
8000fa88:	0cc12683          	lw	a3,204(sp)
8000fa8c:	fff68793          	addi	a5,a3,-1
8000fa90:	0cf12623          	sw	a5,204(sp)
8000fa94:	fff6c783          	lbu	a5,-1(a3)
8000fa98:	14c78a63          	beq	a5,a2,8000fbec <_svfprintf_r+0xb30>
8000fa9c:	03900613          	li	a2,57
8000faa0:	14c79a63          	bne	a5,a2,8000fbf4 <_svfprintf_r+0xb38>
8000faa4:	00aa4783          	lbu	a5,10(s4)
8000faa8:	fef68fa3          	sb	a5,-1(a3)
8000faac:	000d8a13          	mv	s4,s11
8000fab0:	04700713          	li	a4,71
8000fab4:	409a0a33          	sub	s4,s4,s1
8000fab8:	0bc12c83          	lw	s9,188(sp)
8000fabc:	2aeb9863          	bne	s7,a4,8000fd6c <_svfprintf_r+0xcb0>
8000fac0:	ffd00713          	li	a4,-3
8000fac4:	00ecc463          	blt	s9,a4,8000facc <_svfprintf_r+0xa10>
8000fac8:	339b5463          	ble	s9,s6,8000fdf0 <_svfprintf_r+0xd34>
8000facc:	ffed0d13          	addi	s10,s10,-2
8000fad0:	fffc8693          	addi	a3,s9,-1 # 3ffdffff <_HEAP_SIZE+0x3ffdefff>
8000fad4:	0ad12e23          	sw	a3,188(sp)
8000fad8:	fdfd7613          	andi	a2,s10,-33
8000fadc:	04100513          	li	a0,65
8000fae0:	0ffd7713          	andi	a4,s10,255
8000fae4:	00000593          	li	a1,0
8000fae8:	00a61863          	bne	a2,a0,8000faf8 <_svfprintf_r+0xa3c>
8000faec:	00f70713          	addi	a4,a4,15
8000faf0:	0ff77713          	andi	a4,a4,255
8000faf4:	00100593          	li	a1,1
8000faf8:	0ce10223          	sb	a4,196(sp)
8000fafc:	02b00793          	li	a5,43
8000fb00:	0006d863          	bgez	a3,8000fb10 <_svfprintf_r+0xa54>
8000fb04:	00100693          	li	a3,1
8000fb08:	419686b3          	sub	a3,a3,s9
8000fb0c:	02d00793          	li	a5,45
8000fb10:	0cf102a3          	sb	a5,197(sp)
8000fb14:	00900793          	li	a5,9
8000fb18:	28d7de63          	ble	a3,a5,8000fdb4 <_svfprintf_r+0xcf8>
8000fb1c:	0d310713          	addi	a4,sp,211
8000fb20:	00070513          	mv	a0,a4
8000fb24:	00a00593          	li	a1,10
8000fb28:	00900813          	li	a6,9
8000fb2c:	02b6e7b3          	rem	a5,a3,a1
8000fb30:	fff70613          	addi	a2,a4,-1
8000fb34:	02b6c6b3          	div	a3,a3,a1
8000fb38:	03078793          	addi	a5,a5,48 # 40030030 <_HEAP_SIZE+0x4002f030>
8000fb3c:	fef70fa3          	sb	a5,-1(a4)
8000fb40:	24d84c63          	blt	a6,a3,8000fd98 <_svfprintf_r+0xcdc>
8000fb44:	03068793          	addi	a5,a3,48
8000fb48:	fef60fa3          	sb	a5,-1(a2)
8000fb4c:	ffe70713          	addi	a4,a4,-2
8000fb50:	0c610613          	addi	a2,sp,198
8000fb54:	24a76663          	bltu	a4,a0,8000fda0 <_svfprintf_r+0xce4>
8000fb58:	0c410793          	addi	a5,sp,196
8000fb5c:	40f607b3          	sub	a5,a2,a5
8000fb60:	02f12e23          	sw	a5,60(sp)
8000fb64:	01478b33          	add	s6,a5,s4
8000fb68:	00100793          	li	a5,1
8000fb6c:	0147c663          	blt	a5,s4,8000fb78 <_svfprintf_r+0xabc>
8000fb70:	00147793          	andi	a5,s0,1
8000fb74:	00078663          	beqz	a5,8000fb80 <_svfprintf_r+0xac4>
8000fb78:	02012783          	lw	a5,32(sp)
8000fb7c:	00fb0b33          	add	s6,s6,a5
8000fb80:	bff47413          	andi	s0,s0,-1025
8000fb84:	10046793          	ori	a5,s0,256
8000fb88:	02f12623          	sw	a5,44(sp)
8000fb8c:	00000c13          	li	s8,0
8000fb90:	00000b93          	li	s7,0
8000fb94:	00000c93          	li	s9,0
8000fb98:	04412783          	lw	a5,68(sp)
8000fb9c:	00078663          	beqz	a5,8000fba8 <_svfprintf_r+0xaec>
8000fba0:	02d00713          	li	a4,45
8000fba4:	0ae10ba3          	sb	a4,183(sp)
8000fba8:	02c12403          	lw	s0,44(sp)
8000fbac:	00000a93          	li	s5,0
8000fbb0:	4900006f          	j	80010040 <_svfprintf_r+0xf84>
8000fbb4:	00012623          	sw	zero,12(sp)
8000fbb8:	13c10493          	addi	s1,sp,316
8000fbbc:	ba5ff06f          	j	8000f760 <_svfprintf_r+0x6a4>
8000fbc0:	00a12623          	sw	a0,12(sp)
8000fbc4:	b9dff06f          	j	8000f760 <_svfprintf_r+0x6a4>
8000fbc8:	00012623          	sw	zero,12(sp)
8000fbcc:	00600b13          	li	s6,6
8000fbd0:	b91ff06f          	j	8000f760 <_svfprintf_r+0x6a4>
8000fbd4:	01612623          	sw	s6,12(sp)
8000fbd8:	00100b13          	li	s6,1
8000fbdc:	b85ff06f          	j	8000f760 <_svfprintf_r+0x6a4>
8000fbe0:	80021a37          	lui	s4,0x80021
8000fbe4:	d90a0a13          	addi	s4,s4,-624 # 80020d90 <__stack+0xfffe42c4>
8000fbe8:	c9dff06f          	j	8000f884 <_svfprintf_r+0x7c8>
8000fbec:	feb68fa3          	sb	a1,-1(a3)
8000fbf0:	e99ff06f          	j	8000fa88 <_svfprintf_r+0x9cc>
8000fbf4:	00178793          	addi	a5,a5,1
8000fbf8:	0ff7f793          	andi	a5,a5,255
8000fbfc:	eadff06f          	j	8000faa8 <_svfprintf_r+0x9ec>
8000fc00:	001a0a13          	addi	s4,s4,1
8000fc04:	feea0fa3          	sb	a4,-1(s4)
8000fc08:	414c07b3          	sub	a5,s8,s4
8000fc0c:	fe07dae3          	bgez	a5,8000fc00 <_svfprintf_r+0xb44>
8000fc10:	ea1ff06f          	j	8000fab0 <_svfprintf_r+0x9f4>
8000fc14:	04812783          	lw	a5,72(sp)
8000fc18:	000d8a13          	mv	s4,s11
8000fc1c:	03000713          	li	a4,48
8000fc20:	00fd8c33          	add	s8,s11,a5
8000fc24:	fe5ff06f          	j	8000fc08 <_svfprintf_r+0xb4c>
8000fc28:	04600793          	li	a5,70
8000fc2c:	00fb8e63          	beq	s7,a5,8000fc48 <_svfprintf_r+0xb8c>
8000fc30:	04500793          	li	a5,69
8000fc34:	001b0c13          	addi	s8,s6,1
8000fc38:	00fb8463          	beq	s7,a5,8000fc40 <_svfprintf_r+0xb84>
8000fc3c:	000b0c13          	mv	s8,s6
8000fc40:	00200613          	li	a2,2
8000fc44:	00c0006f          	j	8000fc50 <_svfprintf_r+0xb94>
8000fc48:	000b0c13          	mv	s8,s6
8000fc4c:	00300613          	li	a2,3
8000fc50:	0c010793          	addi	a5,sp,192
8000fc54:	0cc10813          	addi	a6,sp,204
8000fc58:	0bc10713          	addi	a4,sp,188
8000fc5c:	000c0693          	mv	a3,s8
8000fc60:	0a010593          	addi	a1,sp,160
8000fc64:	00090513          	mv	a0,s2
8000fc68:	05112823          	sw	a7,80(sp)
8000fc6c:	0bc12023          	sw	t3,160(sp)
8000fc70:	05c12423          	sw	t3,72(sp)
8000fc74:	0bb12223          	sw	s11,164(sp)
8000fc78:	0b912423          	sw	s9,168(sp)
8000fc7c:	0b512623          	sw	s5,172(sp)
8000fc80:	a4dfc0ef          	jal	ra,8000c6cc <_ldtoa_r>
8000fc84:	04700793          	li	a5,71
8000fc88:	00050493          	mv	s1,a0
8000fc8c:	04812e03          	lw	t3,72(sp)
8000fc90:	05012883          	lw	a7,80(sp)
8000fc94:	00fb9663          	bne	s7,a5,8000fca0 <_svfprintf_r+0xbe4>
8000fc98:	00147793          	andi	a5,s0,1
8000fc9c:	0a078863          	beqz	a5,8000fd4c <_svfprintf_r+0xc90>
8000fca0:	04600793          	li	a5,70
8000fca4:	01848a33          	add	s4,s1,s8
8000fca8:	06fb9263          	bne	s7,a5,8000fd0c <_svfprintf_r+0xc50>
8000fcac:	0004c703          	lbu	a4,0(s1)
8000fcb0:	03000793          	li	a5,48
8000fcb4:	04f71863          	bne	a4,a5,8000fd04 <_svfprintf_r+0xc48>
8000fcb8:	09010593          	addi	a1,sp,144
8000fcbc:	0a010513          	addi	a0,sp,160
8000fcc0:	05112823          	sw	a7,80(sp)
8000fcc4:	0bc12023          	sw	t3,160(sp)
8000fcc8:	05c12423          	sw	t3,72(sp)
8000fccc:	0bb12223          	sw	s11,164(sp)
8000fcd0:	0b912423          	sw	s9,168(sp)
8000fcd4:	0b512623          	sw	s5,172(sp)
8000fcd8:	08012823          	sw	zero,144(sp)
8000fcdc:	08012a23          	sw	zero,148(sp)
8000fce0:	08012c23          	sw	zero,152(sp)
8000fce4:	08012e23          	sw	zero,156(sp)
8000fce8:	6f8050ef          	jal	ra,800153e0 <__eqtf2>
8000fcec:	04812e03          	lw	t3,72(sp)
8000fcf0:	05012883          	lw	a7,80(sp)
8000fcf4:	00050863          	beqz	a0,8000fd04 <_svfprintf_r+0xc48>
8000fcf8:	00100793          	li	a5,1
8000fcfc:	41878c33          	sub	s8,a5,s8
8000fd00:	0b812e23          	sw	s8,188(sp)
8000fd04:	0bc12783          	lw	a5,188(sp)
8000fd08:	00fa0a33          	add	s4,s4,a5
8000fd0c:	09010593          	addi	a1,sp,144
8000fd10:	0a010513          	addi	a0,sp,160
8000fd14:	05112423          	sw	a7,72(sp)
8000fd18:	0bc12023          	sw	t3,160(sp)
8000fd1c:	0bb12223          	sw	s11,164(sp)
8000fd20:	0b912423          	sw	s9,168(sp)
8000fd24:	0b512623          	sw	s5,172(sp)
8000fd28:	08012823          	sw	zero,144(sp)
8000fd2c:	08012a23          	sw	zero,148(sp)
8000fd30:	08012c23          	sw	zero,152(sp)
8000fd34:	08012e23          	sw	zero,156(sp)
8000fd38:	6a8050ef          	jal	ra,800153e0 <__eqtf2>
8000fd3c:	04812883          	lw	a7,72(sp)
8000fd40:	03000713          	li	a4,48
8000fd44:	00051e63          	bnez	a0,8000fd60 <_svfprintf_r+0xca4>
8000fd48:	0d412623          	sw	s4,204(sp)
8000fd4c:	0cc12a03          	lw	s4,204(sp)
8000fd50:	d61ff06f          	j	8000fab0 <_svfprintf_r+0x9f4>
8000fd54:	00178693          	addi	a3,a5,1
8000fd58:	0cd12623          	sw	a3,204(sp)
8000fd5c:	00e78023          	sb	a4,0(a5)
8000fd60:	0cc12783          	lw	a5,204(sp)
8000fd64:	ff47e8e3          	bltu	a5,s4,8000fd54 <_svfprintf_r+0xc98>
8000fd68:	fe5ff06f          	j	8000fd4c <_svfprintf_r+0xc90>
8000fd6c:	04600713          	li	a4,70
8000fd70:	d6eb90e3          	bne	s7,a4,8000fad0 <_svfprintf_r+0xa14>
8000fd74:	07905263          	blez	s9,8000fdd8 <_svfprintf_r+0xd1c>
8000fd78:	000b1663          	bnez	s6,8000fd84 <_svfprintf_r+0xcc8>
8000fd7c:	00147713          	andi	a4,s0,1
8000fd80:	0c070263          	beqz	a4,8000fe44 <_svfprintf_r+0xd88>
8000fd84:	02012783          	lw	a5,32(sp)
8000fd88:	00fc8733          	add	a4,s9,a5
8000fd8c:	00eb0b33          	add	s6,s6,a4
8000fd90:	06600d13          	li	s10,102
8000fd94:	0940006f          	j	8000fe28 <_svfprintf_r+0xd6c>
8000fd98:	00060713          	mv	a4,a2
8000fd9c:	d91ff06f          	j	8000fb2c <_svfprintf_r+0xa70>
8000fda0:	00170713          	addi	a4,a4,1
8000fda4:	fff74783          	lbu	a5,-1(a4)
8000fda8:	00160613          	addi	a2,a2,1
8000fdac:	fef60fa3          	sb	a5,-1(a2)
8000fdb0:	da5ff06f          	j	8000fb54 <_svfprintf_r+0xa98>
8000fdb4:	0c610713          	addi	a4,sp,198
8000fdb8:	00059863          	bnez	a1,8000fdc8 <_svfprintf_r+0xd0c>
8000fdbc:	03000793          	li	a5,48
8000fdc0:	0cf10323          	sb	a5,198(sp)
8000fdc4:	0c710713          	addi	a4,sp,199
8000fdc8:	03068793          	addi	a5,a3,48
8000fdcc:	00170613          	addi	a2,a4,1
8000fdd0:	00f70023          	sb	a5,0(a4)
8000fdd4:	d85ff06f          	j	8000fb58 <_svfprintf_r+0xa9c>
8000fdd8:	000b1663          	bnez	s6,8000fde4 <_svfprintf_r+0xd28>
8000fddc:	00147713          	andi	a4,s0,1
8000fde0:	06070663          	beqz	a4,8000fe4c <_svfprintf_r+0xd90>
8000fde4:	02012783          	lw	a5,32(sp)
8000fde8:	00178713          	addi	a4,a5,1
8000fdec:	fa1ff06f          	j	8000fd8c <_svfprintf_r+0xcd0>
8000fdf0:	034cc063          	blt	s9,s4,8000fe10 <_svfprintf_r+0xd54>
8000fdf4:	00147713          	andi	a4,s0,1
8000fdf8:	000c8b13          	mv	s6,s9
8000fdfc:	00070663          	beqz	a4,8000fe08 <_svfprintf_r+0xd4c>
8000fe00:	02012783          	lw	a5,32(sp)
8000fe04:	00fc8b33          	add	s6,s9,a5
8000fe08:	06700d13          	li	s10,103
8000fe0c:	01c0006f          	j	8000fe28 <_svfprintf_r+0xd6c>
8000fe10:	02012783          	lw	a5,32(sp)
8000fe14:	06700d13          	li	s10,103
8000fe18:	00fa0b33          	add	s6,s4,a5
8000fe1c:	01904663          	bgtz	s9,8000fe28 <_svfprintf_r+0xd6c>
8000fe20:	419b0333          	sub	t1,s6,s9
8000fe24:	00130b13          	addi	s6,t1,1
8000fe28:	40047b93          	andi	s7,s0,1024
8000fe2c:	00000c13          	li	s8,0
8000fe30:	d60b84e3          	beqz	s7,8000fb98 <_svfprintf_r+0xadc>
8000fe34:	00000b93          	li	s7,0
8000fe38:	d79050e3          	blez	s9,8000fb98 <_svfprintf_r+0xadc>
8000fe3c:	0ff00693          	li	a3,255
8000fe40:	0380006f          	j	8000fe78 <_svfprintf_r+0xdbc>
8000fe44:	000c8b13          	mv	s6,s9
8000fe48:	f49ff06f          	j	8000fd90 <_svfprintf_r+0xcd4>
8000fe4c:	06600d13          	li	s10,102
8000fe50:	00100b13          	li	s6,1
8000fe54:	fd5ff06f          	j	8000fe28 <_svfprintf_r+0xd6c>
8000fe58:	03975663          	ble	s9,a4,8000fe84 <_svfprintf_r+0xdc8>
8000fe5c:	01012783          	lw	a5,16(sp)
8000fe60:	40ec8cb3          	sub	s9,s9,a4
8000fe64:	0017c703          	lbu	a4,1(a5)
8000fe68:	02070863          	beqz	a4,8000fe98 <_svfprintf_r+0xddc>
8000fe6c:	00178793          	addi	a5,a5,1
8000fe70:	001b8b93          	addi	s7,s7,1
8000fe74:	00f12823          	sw	a5,16(sp)
8000fe78:	01012783          	lw	a5,16(sp)
8000fe7c:	0007c703          	lbu	a4,0(a5)
8000fe80:	fcd71ce3          	bne	a4,a3,8000fe58 <_svfprintf_r+0xd9c>
8000fe84:	03012783          	lw	a5,48(sp)
8000fe88:	018b8733          	add	a4,s7,s8
8000fe8c:	02f70733          	mul	a4,a4,a5
8000fe90:	01670b33          	add	s6,a4,s6
8000fe94:	d05ff06f          	j	8000fb98 <_svfprintf_r+0xadc>
8000fe98:	001c0c13          	addi	s8,s8,1
8000fe9c:	fddff06f          	j	8000fe78 <_svfprintf_r+0xdbc>
8000fea0:	004a8713          	addi	a4,s5,4
8000fea4:	00e12c23          	sw	a4,24(sp)
8000fea8:	02047713          	andi	a4,s0,32
8000feac:	000aa783          	lw	a5,0(s5)
8000feb0:	02070063          	beqz	a4,8000fed0 <_svfprintf_r+0xe14>
8000feb4:	02412703          	lw	a4,36(sp)
8000feb8:	00e7a023          	sw	a4,0(a5)
8000febc:	41f75713          	srai	a4,a4,0x1f
8000fec0:	00e7a223          	sw	a4,4(a5)
8000fec4:	01812a83          	lw	s5,24(sp)
8000fec8:	01c12483          	lw	s1,28(sp)
8000fecc:	aecff06f          	j	8000f1b8 <_svfprintf_r+0xfc>
8000fed0:	01047713          	andi	a4,s0,16
8000fed4:	00070863          	beqz	a4,8000fee4 <_svfprintf_r+0xe28>
8000fed8:	02412703          	lw	a4,36(sp)
8000fedc:	00e7a023          	sw	a4,0(a5)
8000fee0:	fe5ff06f          	j	8000fec4 <_svfprintf_r+0xe08>
8000fee4:	04047713          	andi	a4,s0,64
8000fee8:	00070863          	beqz	a4,8000fef8 <_svfprintf_r+0xe3c>
8000feec:	02415703          	lhu	a4,36(sp)
8000fef0:	00e79023          	sh	a4,0(a5)
8000fef4:	fd1ff06f          	j	8000fec4 <_svfprintf_r+0xe08>
8000fef8:	20047413          	andi	s0,s0,512
8000fefc:	fc040ee3          	beqz	s0,8000fed8 <_svfprintf_r+0xe1c>
8000ff00:	02414703          	lbu	a4,36(sp)
8000ff04:	00e78023          	sb	a4,0(a5)
8000ff08:	fbdff06f          	j	8000fec4 <_svfprintf_r+0xe08>
8000ff0c:	01046413          	ori	s0,s0,16
8000ff10:	02047793          	andi	a5,s0,32
8000ff14:	04078863          	beqz	a5,8000ff64 <_svfprintf_r+0xea8>
8000ff18:	007a8a93          	addi	s5,s5,7
8000ff1c:	ff8afa93          	andi	s5,s5,-8
8000ff20:	000aac03          	lw	s8,0(s5)
8000ff24:	004aac83          	lw	s9,4(s5)
8000ff28:	008a8793          	addi	a5,s5,8
8000ff2c:	00f12c23          	sw	a5,24(sp)
8000ff30:	bff47413          	andi	s0,s0,-1025
8000ff34:	00000793          	li	a5,0
8000ff38:	0a010ba3          	sb	zero,183(sp)
8000ff3c:	fff00713          	li	a4,-1
8000ff40:	42eb0863          	beq	s6,a4,80010370 <_svfprintf_r+0x12b4>
8000ff44:	00040713          	mv	a4,s0
8000ff48:	019c66b3          	or	a3,s8,s9
8000ff4c:	f7f47413          	andi	s0,s0,-129
8000ff50:	42069063          	bnez	a3,80010370 <_svfprintf_r+0x12b4>
8000ff54:	580b0e63          	beqz	s6,800104f0 <_svfprintf_r+0x1434>
8000ff58:	00100713          	li	a4,1
8000ff5c:	40e79e63          	bne	a5,a4,80010378 <_svfprintf_r+0x12bc>
8000ff60:	d98ff06f          	j	8000f4f8 <_svfprintf_r+0x43c>
8000ff64:	004a8793          	addi	a5,s5,4
8000ff68:	00f12c23          	sw	a5,24(sp)
8000ff6c:	01047793          	andi	a5,s0,16
8000ff70:	00078663          	beqz	a5,8000ff7c <_svfprintf_r+0xec0>
8000ff74:	000aac03          	lw	s8,0(s5)
8000ff78:	0100006f          	j	8000ff88 <_svfprintf_r+0xecc>
8000ff7c:	04047793          	andi	a5,s0,64
8000ff80:	00078863          	beqz	a5,8000ff90 <_svfprintf_r+0xed4>
8000ff84:	000adc03          	lhu	s8,0(s5)
8000ff88:	00000c93          	li	s9,0
8000ff8c:	fa5ff06f          	j	8000ff30 <_svfprintf_r+0xe74>
8000ff90:	20047793          	andi	a5,s0,512
8000ff94:	fe0780e3          	beqz	a5,8000ff74 <_svfprintf_r+0xeb8>
8000ff98:	000acc03          	lbu	s8,0(s5)
8000ff9c:	fedff06f          	j	8000ff88 <_svfprintf_r+0xecc>
8000ffa0:	004a8793          	addi	a5,s5,4
8000ffa4:	00f12c23          	sw	a5,24(sp)
8000ffa8:	ffff87b7          	lui	a5,0xffff8
8000ffac:	8307c793          	xori	a5,a5,-2000
8000ffb0:	0af11c23          	sh	a5,184(sp)
8000ffb4:	800217b7          	lui	a5,0x80021
8000ffb8:	d7c78793          	addi	a5,a5,-644 # 80020d7c <__stack+0xfffe42b0>
8000ffbc:	04f12023          	sw	a5,64(sp)
8000ffc0:	000aac03          	lw	s8,0(s5)
8000ffc4:	00000c93          	li	s9,0
8000ffc8:	00246413          	ori	s0,s0,2
8000ffcc:	00200793          	li	a5,2
8000ffd0:	07800d13          	li	s10,120
8000ffd4:	f65ff06f          	j	8000ff38 <_svfprintf_r+0xe7c>
8000ffd8:	004a8793          	addi	a5,s5,4
8000ffdc:	00f12c23          	sw	a5,24(sp)
8000ffe0:	0a010ba3          	sb	zero,183(sp)
8000ffe4:	fff00793          	li	a5,-1
8000ffe8:	03112623          	sw	a7,44(sp)
8000ffec:	000aa483          	lw	s1,0(s5)
8000fff0:	02fb0663          	beq	s6,a5,8001001c <_svfprintf_r+0xf60>
8000fff4:	000b0613          	mv	a2,s6
8000fff8:	00000593          	li	a1,0
8000fffc:	00048513          	mv	a0,s1
80010000:	cf5fd0ef          	jal	ra,8000dcf4 <memchr>
80010004:	00a12623          	sw	a0,12(sp)
80010008:	02c12883          	lw	a7,44(sp)
8001000c:	de050e63          	beqz	a0,8000f608 <_svfprintf_r+0x54c>
80010010:	40950b33          	sub	s6,a0,s1
80010014:	00012623          	sw	zero,12(sp)
80010018:	df0ff06f          	j	8000f608 <_svfprintf_r+0x54c>
8001001c:	00048513          	mv	a0,s1
80010020:	838ff0ef          	jal	ra,8000f058 <strlen>
80010024:	02c12883          	lw	a7,44(sp)
80010028:	00050b13          	mv	s6,a0
8001002c:	00012623          	sw	zero,12(sp)
80010030:	00000a93          	li	s5,0
80010034:	00000c13          	li	s8,0
80010038:	00000b93          	li	s7,0
8001003c:	00000c93          	li	s9,0
80010040:	03512623          	sw	s5,44(sp)
80010044:	016ad463          	ble	s6,s5,8001004c <_svfprintf_r+0xf90>
80010048:	03612623          	sw	s6,44(sp)
8001004c:	0b714703          	lbu	a4,183(sp)
80010050:	00070863          	beqz	a4,80010060 <_svfprintf_r+0xfa4>
80010054:	02c12783          	lw	a5,44(sp)
80010058:	00178793          	addi	a5,a5,1
8001005c:	02f12623          	sw	a5,44(sp)
80010060:	00247d93          	andi	s11,s0,2
80010064:	000d8863          	beqz	s11,80010074 <_svfprintf_r+0xfb8>
80010068:	02c12783          	lw	a5,44(sp)
8001006c:	00278793          	addi	a5,a5,2
80010070:	02f12623          	sw	a5,44(sp)
80010074:	08447793          	andi	a5,s0,132
80010078:	04f12223          	sw	a5,68(sp)
8001007c:	06079863          	bnez	a5,800100ec <_svfprintf_r+0x1030>
80010080:	02812783          	lw	a5,40(sp)
80010084:	02c12703          	lw	a4,44(sp)
80010088:	40e78e33          	sub	t3,a5,a4
8001008c:	07c05063          	blez	t3,800100ec <_svfprintf_r+0x1030>
80010090:	80020eb7          	lui	t4,0x80020
80010094:	01000f13          	li	t5,16
80010098:	77ce8e93          	addi	t4,t4,1916 # 8002077c <__stack+0xfffe3cb0>
8001009c:	00700f93          	li	t6,7
800100a0:	0d812683          	lw	a3,216(sp)
800100a4:	01d8a023          	sw	t4,0(a7)
800100a8:	0dc12703          	lw	a4,220(sp)
800100ac:	00168693          	addi	a3,a3,1
800100b0:	00888613          	addi	a2,a7,8
800100b4:	47cf4663          	blt	t5,t3,80010520 <_svfprintf_r+0x1464>
800100b8:	00ee0733          	add	a4,t3,a4
800100bc:	01c8a223          	sw	t3,4(a7)
800100c0:	0ce12e23          	sw	a4,220(sp)
800100c4:	0cd12c23          	sw	a3,216(sp)
800100c8:	00700713          	li	a4,7
800100cc:	00060893          	mv	a7,a2
800100d0:	00d75e63          	ble	a3,a4,800100ec <_svfprintf_r+0x1030>
800100d4:	0d410613          	addi	a2,sp,212
800100d8:	00098593          	mv	a1,s3
800100dc:	00090513          	mv	a0,s2
800100e0:	629020ef          	jal	ra,80012f08 <__ssprint_r>
800100e4:	680518e3          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
800100e8:	0fc10893          	addi	a7,sp,252
800100ec:	0b714703          	lbu	a4,183(sp)
800100f0:	04070863          	beqz	a4,80010140 <_svfprintf_r+0x1084>
800100f4:	0b710713          	addi	a4,sp,183
800100f8:	00e8a023          	sw	a4,0(a7)
800100fc:	00100713          	li	a4,1
80010100:	00e8a223          	sw	a4,4(a7)
80010104:	0dc12703          	lw	a4,220(sp)
80010108:	00700693          	li	a3,7
8001010c:	00888893          	addi	a7,a7,8
80010110:	00170713          	addi	a4,a4,1
80010114:	0ce12e23          	sw	a4,220(sp)
80010118:	0d812703          	lw	a4,216(sp)
8001011c:	00170713          	addi	a4,a4,1
80010120:	0ce12c23          	sw	a4,216(sp)
80010124:	00e6de63          	ble	a4,a3,80010140 <_svfprintf_r+0x1084>
80010128:	0d410613          	addi	a2,sp,212
8001012c:	00098593          	mv	a1,s3
80010130:	00090513          	mv	a0,s2
80010134:	5d5020ef          	jal	ra,80012f08 <__ssprint_r>
80010138:	62051ee3          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
8001013c:	0fc10893          	addi	a7,sp,252
80010140:	040d8863          	beqz	s11,80010190 <_svfprintf_r+0x10d4>
80010144:	0b810713          	addi	a4,sp,184
80010148:	00e8a023          	sw	a4,0(a7)
8001014c:	00200713          	li	a4,2
80010150:	00e8a223          	sw	a4,4(a7)
80010154:	0dc12703          	lw	a4,220(sp)
80010158:	00700693          	li	a3,7
8001015c:	00888893          	addi	a7,a7,8
80010160:	00270713          	addi	a4,a4,2
80010164:	0ce12e23          	sw	a4,220(sp)
80010168:	0d812703          	lw	a4,216(sp)
8001016c:	00170713          	addi	a4,a4,1
80010170:	0ce12c23          	sw	a4,216(sp)
80010174:	00e6de63          	ble	a4,a3,80010190 <_svfprintf_r+0x10d4>
80010178:	0d410613          	addi	a2,sp,212
8001017c:	00098593          	mv	a1,s3
80010180:	00090513          	mv	a0,s2
80010184:	585020ef          	jal	ra,80012f08 <__ssprint_r>
80010188:	5e0516e3          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
8001018c:	0fc10893          	addi	a7,sp,252
80010190:	04412783          	lw	a5,68(sp)
80010194:	08000713          	li	a4,128
80010198:	06e79663          	bne	a5,a4,80010204 <_svfprintf_r+0x1148>
8001019c:	02812783          	lw	a5,40(sp)
800101a0:	02c12703          	lw	a4,44(sp)
800101a4:	40e78db3          	sub	s11,a5,a4
800101a8:	05b05e63          	blez	s11,80010204 <_svfprintf_r+0x1148>
800101ac:	01000793          	li	a5,16
800101b0:	00700e13          	li	t3,7
800101b4:	0d812703          	lw	a4,216(sp)
800101b8:	0dc12683          	lw	a3,220(sp)
800101bc:	00888613          	addi	a2,a7,8
800101c0:	00170713          	addi	a4,a4,1
800101c4:	3bb7ca63          	blt	a5,s11,80010578 <_svfprintf_r+0x14bc>
800101c8:	01412783          	lw	a5,20(sp)
800101cc:	01b8a223          	sw	s11,4(a7)
800101d0:	00dd8db3          	add	s11,s11,a3
800101d4:	00f8a023          	sw	a5,0(a7)
800101d8:	0db12e23          	sw	s11,220(sp)
800101dc:	0ce12c23          	sw	a4,216(sp)
800101e0:	00700693          	li	a3,7
800101e4:	00060893          	mv	a7,a2
800101e8:	00e6de63          	ble	a4,a3,80010204 <_svfprintf_r+0x1148>
800101ec:	0d410613          	addi	a2,sp,212
800101f0:	00098593          	mv	a1,s3
800101f4:	00090513          	mv	a0,s2
800101f8:	511020ef          	jal	ra,80012f08 <__ssprint_r>
800101fc:	56051ce3          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010200:	0fc10893          	addi	a7,sp,252
80010204:	416a8ab3          	sub	s5,s5,s6
80010208:	05505e63          	blez	s5,80010264 <_svfprintf_r+0x11a8>
8001020c:	01000d93          	li	s11,16
80010210:	00700813          	li	a6,7
80010214:	01412783          	lw	a5,20(sp)
80010218:	0d812703          	lw	a4,216(sp)
8001021c:	0dc12683          	lw	a3,220(sp)
80010220:	00f8a023          	sw	a5,0(a7)
80010224:	00170713          	addi	a4,a4,1
80010228:	00888613          	addi	a2,a7,8
8001022c:	395dce63          	blt	s11,s5,800105c8 <_svfprintf_r+0x150c>
80010230:	0158a223          	sw	s5,4(a7)
80010234:	00da8ab3          	add	s5,s5,a3
80010238:	0d512e23          	sw	s5,220(sp)
8001023c:	0ce12c23          	sw	a4,216(sp)
80010240:	00700693          	li	a3,7
80010244:	00060893          	mv	a7,a2
80010248:	00e6de63          	ble	a4,a3,80010264 <_svfprintf_r+0x11a8>
8001024c:	0d410613          	addi	a2,sp,212
80010250:	00098593          	mv	a1,s3
80010254:	00090513          	mv	a0,s2
80010258:	4b1020ef          	jal	ra,80012f08 <__ssprint_r>
8001025c:	50051ce3          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010260:	0fc10893          	addi	a7,sp,252
80010264:	10047713          	andi	a4,s0,256
80010268:	0dc12d83          	lw	s11,220(sp)
8001026c:	38071e63          	bnez	a4,80010608 <_svfprintf_r+0x154c>
80010270:	01bb0333          	add	t1,s6,s11
80010274:	0098a023          	sw	s1,0(a7)
80010278:	0168a223          	sw	s6,4(a7)
8001027c:	0c612e23          	sw	t1,220(sp)
80010280:	0d812783          	lw	a5,216(sp)
80010284:	00700713          	li	a4,7
80010288:	00888893          	addi	a7,a7,8
8001028c:	00178793          	addi	a5,a5,1
80010290:	0cf12c23          	sw	a5,216(sp)
80010294:	4af75c63          	ble	a5,a4,8001074c <_svfprintf_r+0x1690>
80010298:	0d410613          	addi	a2,sp,212
8001029c:	00098593          	mv	a1,s3
800102a0:	00090513          	mv	a0,s2
800102a4:	465020ef          	jal	ra,80012f08 <__ssprint_r>
800102a8:	4c0516e3          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
800102ac:	0fc10893          	addi	a7,sp,252
800102b0:	49c0006f          	j	8001074c <_svfprintf_r+0x1690>
800102b4:	01046413          	ori	s0,s0,16
800102b8:	02047793          	andi	a5,s0,32
800102bc:	02078263          	beqz	a5,800102e0 <_svfprintf_r+0x1224>
800102c0:	007a8a93          	addi	s5,s5,7
800102c4:	ff8afa93          	andi	s5,s5,-8
800102c8:	000aac03          	lw	s8,0(s5)
800102cc:	004aac83          	lw	s9,4(s5)
800102d0:	008a8793          	addi	a5,s5,8
800102d4:	00f12c23          	sw	a5,24(sp)
800102d8:	00100793          	li	a5,1
800102dc:	c5dff06f          	j	8000ff38 <_svfprintf_r+0xe7c>
800102e0:	004a8793          	addi	a5,s5,4
800102e4:	00f12c23          	sw	a5,24(sp)
800102e8:	01047793          	andi	a5,s0,16
800102ec:	00078663          	beqz	a5,800102f8 <_svfprintf_r+0x123c>
800102f0:	000aac03          	lw	s8,0(s5)
800102f4:	0100006f          	j	80010304 <_svfprintf_r+0x1248>
800102f8:	04047793          	andi	a5,s0,64
800102fc:	00078863          	beqz	a5,8001030c <_svfprintf_r+0x1250>
80010300:	000adc03          	lhu	s8,0(s5)
80010304:	00000c93          	li	s9,0
80010308:	fd1ff06f          	j	800102d8 <_svfprintf_r+0x121c>
8001030c:	20047793          	andi	a5,s0,512
80010310:	fe0780e3          	beqz	a5,800102f0 <_svfprintf_r+0x1234>
80010314:	000acc03          	lbu	s8,0(s5)
80010318:	fedff06f          	j	80010304 <_svfprintf_r+0x1248>
8001031c:	800217b7          	lui	a5,0x80021
80010320:	d7c78793          	addi	a5,a5,-644 # 80020d7c <__stack+0xfffe42b0>
80010324:	f75fe06f          	j	8000f298 <_svfprintf_r+0x1dc>
80010328:	004a8793          	addi	a5,s5,4
8001032c:	00f12c23          	sw	a5,24(sp)
80010330:	01047793          	andi	a5,s0,16
80010334:	00078663          	beqz	a5,80010340 <_svfprintf_r+0x1284>
80010338:	000aac03          	lw	s8,0(s5)
8001033c:	0100006f          	j	8001034c <_svfprintf_r+0x1290>
80010340:	04047793          	andi	a5,s0,64
80010344:	00078863          	beqz	a5,80010354 <_svfprintf_r+0x1298>
80010348:	000adc03          	lhu	s8,0(s5)
8001034c:	00000c93          	li	s9,0
80010350:	f71fe06f          	j	8000f2c0 <_svfprintf_r+0x204>
80010354:	20047793          	andi	a5,s0,512
80010358:	fe0780e3          	beqz	a5,80010338 <_svfprintf_r+0x127c>
8001035c:	000acc03          	lbu	s8,0(s5)
80010360:	fedff06f          	j	8001034c <_svfprintf_r+0x1290>
80010364:	00040713          	mv	a4,s0
80010368:	00100793          	li	a5,1
8001036c:	bddff06f          	j	8000ff48 <_svfprintf_r+0xe8c>
80010370:	00100713          	li	a4,1
80010374:	96e78c63          	beq	a5,a4,8000f4ec <_svfprintf_r+0x430>
80010378:	00200713          	li	a4,2
8001037c:	12e78e63          	beq	a5,a4,800104b8 <_svfprintf_r+0x13fc>
80010380:	1a010793          	addi	a5,sp,416
80010384:	01dc9693          	slli	a3,s9,0x1d
80010388:	007c7713          	andi	a4,s8,7
8001038c:	003c5c13          	srli	s8,s8,0x3
80010390:	03070713          	addi	a4,a4,48
80010394:	0186ec33          	or	s8,a3,s8
80010398:	003cdc93          	srli	s9,s9,0x3
8001039c:	fee78fa3          	sb	a4,-1(a5)
800103a0:	019c66b3          	or	a3,s8,s9
800103a4:	fff78493          	addi	s1,a5,-1
800103a8:	02069e63          	bnez	a3,800103e4 <_svfprintf_r+0x1328>
800103ac:	00147693          	andi	a3,s0,1
800103b0:	00068a63          	beqz	a3,800103c4 <_svfprintf_r+0x1308>
800103b4:	03000693          	li	a3,48
800103b8:	00d70663          	beq	a4,a3,800103c4 <_svfprintf_r+0x1308>
800103bc:	fed48fa3          	sb	a3,-1(s1)
800103c0:	ffe78493          	addi	s1,a5,-2
800103c4:	1a010793          	addi	a5,sp,416
800103c8:	000b0a93          	mv	s5,s6
800103cc:	00012623          	sw	zero,12(sp)
800103d0:	40978b33          	sub	s6,a5,s1
800103d4:	00000c13          	li	s8,0
800103d8:	00000b93          	li	s7,0
800103dc:	00000c93          	li	s9,0
800103e0:	c61ff06f          	j	80010040 <_svfprintf_r+0xf84>
800103e4:	00048793          	mv	a5,s1
800103e8:	f9dff06f          	j	80010384 <_svfprintf_r+0x12c8>
800103ec:	00000a13          	li	s4,0
800103f0:	1a010d93          	addi	s11,sp,416
800103f4:	40047a93          	andi	s5,s0,1024
800103f8:	00900b93          	li	s7,9
800103fc:	00a00613          	li	a2,10
80010400:	00000693          	li	a3,0
80010404:	000c0513          	mv	a0,s8
80010408:	000c8593          	mv	a1,s9
8001040c:	01112623          	sw	a7,12(sp)
80010410:	70d030ef          	jal	ra,8001431c <__umoddi3>
80010414:	03050513          	addi	a0,a0,48
80010418:	fead8fa3          	sb	a0,-1(s11)
8001041c:	fffd8493          	addi	s1,s11,-1
80010420:	001a0a13          	addi	s4,s4,1
80010424:	00c12883          	lw	a7,12(sp)
80010428:	040a8e63          	beqz	s5,80010484 <_svfprintf_r+0x13c8>
8001042c:	01012783          	lw	a5,16(sp)
80010430:	0007c783          	lbu	a5,0(a5)
80010434:	04fa1863          	bne	s4,a5,80010484 <_svfprintf_r+0x13c8>
80010438:	0ff00793          	li	a5,255
8001043c:	04fa0463          	beq	s4,a5,80010484 <_svfprintf_r+0x13c8>
80010440:	000c9463          	bnez	s9,80010448 <_svfprintf_r+0x138c>
80010444:	058bf063          	bleu	s8,s7,80010484 <_svfprintf_r+0x13c8>
80010448:	03012783          	lw	a5,48(sp)
8001044c:	03812583          	lw	a1,56(sp)
80010450:	01112623          	sw	a7,12(sp)
80010454:	40f484b3          	sub	s1,s1,a5
80010458:	00078613          	mv	a2,a5
8001045c:	00048513          	mv	a0,s1
80010460:	c15fe0ef          	jal	ra,8000f074 <strncpy>
80010464:	01012783          	lw	a5,16(sp)
80010468:	00000a13          	li	s4,0
8001046c:	00c12883          	lw	a7,12(sp)
80010470:	0017c783          	lbu	a5,1(a5)
80010474:	00078863          	beqz	a5,80010484 <_svfprintf_r+0x13c8>
80010478:	01012783          	lw	a5,16(sp)
8001047c:	00178793          	addi	a5,a5,1
80010480:	00f12823          	sw	a5,16(sp)
80010484:	000c0513          	mv	a0,s8
80010488:	000c8593          	mv	a1,s9
8001048c:	00a00613          	li	a2,10
80010490:	00000693          	li	a3,0
80010494:	01112623          	sw	a7,12(sp)
80010498:	251030ef          	jal	ra,80013ee8 <__udivdi3>
8001049c:	00058c93          	mv	s9,a1
800104a0:	00a5e5b3          	or	a1,a1,a0
800104a4:	00050c13          	mv	s8,a0
800104a8:	00c12883          	lw	a7,12(sp)
800104ac:	f0058ce3          	beqz	a1,800103c4 <_svfprintf_r+0x1308>
800104b0:	00048d93          	mv	s11,s1
800104b4:	f49ff06f          	j	800103fc <_svfprintf_r+0x1340>
800104b8:	1a010493          	addi	s1,sp,416
800104bc:	04012703          	lw	a4,64(sp)
800104c0:	00fc7793          	andi	a5,s8,15
800104c4:	fff48493          	addi	s1,s1,-1
800104c8:	00f707b3          	add	a5,a4,a5
800104cc:	0007c783          	lbu	a5,0(a5)
800104d0:	004c5c13          	srli	s8,s8,0x4
800104d4:	00f48023          	sb	a5,0(s1)
800104d8:	01cc9793          	slli	a5,s9,0x1c
800104dc:	0187ec33          	or	s8,a5,s8
800104e0:	004cdc93          	srli	s9,s9,0x4
800104e4:	019c67b3          	or	a5,s8,s9
800104e8:	fc079ae3          	bnez	a5,800104bc <_svfprintf_r+0x1400>
800104ec:	ed9ff06f          	j	800103c4 <_svfprintf_r+0x1308>
800104f0:	1a010493          	addi	s1,sp,416
800104f4:	ec0798e3          	bnez	a5,800103c4 <_svfprintf_r+0x1308>
800104f8:	00177713          	andi	a4,a4,1
800104fc:	ec0704e3          	beqz	a4,800103c4 <_svfprintf_r+0x1308>
80010500:	03000793          	li	a5,48
80010504:	18f10fa3          	sb	a5,415(sp)
80010508:	ff9fe06f          	j	8000f500 <_svfprintf_r+0x444>
8001050c:	2c0d06e3          	beqz	s10,80010fd8 <_svfprintf_r+0x1f1c>
80010510:	13a10e23          	sb	s10,316(sp)
80010514:	0a010ba3          	sb	zero,183(sp)
80010518:	01512c23          	sw	s5,24(sp)
8001051c:	f69fe06f          	j	8000f484 <_svfprintf_r+0x3c8>
80010520:	01070713          	addi	a4,a4,16
80010524:	01e8a223          	sw	t5,4(a7)
80010528:	0ce12e23          	sw	a4,220(sp)
8001052c:	0cd12c23          	sw	a3,216(sp)
80010530:	02dfde63          	ble	a3,t6,8001056c <_svfprintf_r+0x14b0>
80010534:	0d410613          	addi	a2,sp,212
80010538:	00098593          	mv	a1,s3
8001053c:	00090513          	mv	a0,s2
80010540:	05f12c23          	sw	t6,88(sp)
80010544:	05d12a23          	sw	t4,84(sp)
80010548:	05e12823          	sw	t5,80(sp)
8001054c:	05c12423          	sw	t3,72(sp)
80010550:	1b9020ef          	jal	ra,80012f08 <__ssprint_r>
80010554:	220510e3          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010558:	05812f83          	lw	t6,88(sp)
8001055c:	05412e83          	lw	t4,84(sp)
80010560:	05012f03          	lw	t5,80(sp)
80010564:	04812e03          	lw	t3,72(sp)
80010568:	0fc10613          	addi	a2,sp,252
8001056c:	ff0e0e13          	addi	t3,t3,-16
80010570:	00060893          	mv	a7,a2
80010574:	b2dff06f          	j	800100a0 <_svfprintf_r+0xfe4>
80010578:	01412583          	lw	a1,20(sp)
8001057c:	01068693          	addi	a3,a3,16
80010580:	00f8a223          	sw	a5,4(a7)
80010584:	00b8a023          	sw	a1,0(a7)
80010588:	0cd12e23          	sw	a3,220(sp)
8001058c:	0ce12c23          	sw	a4,216(sp)
80010590:	02ee5663          	ble	a4,t3,800105bc <_svfprintf_r+0x1500>
80010594:	0d410613          	addi	a2,sp,212
80010598:	00098593          	mv	a1,s3
8001059c:	00090513          	mv	a0,s2
800105a0:	05c12423          	sw	t3,72(sp)
800105a4:	04f12223          	sw	a5,68(sp)
800105a8:	161020ef          	jal	ra,80012f08 <__ssprint_r>
800105ac:	1c0514e3          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
800105b0:	04812e03          	lw	t3,72(sp)
800105b4:	04412783          	lw	a5,68(sp)
800105b8:	0fc10613          	addi	a2,sp,252
800105bc:	ff0d8d93          	addi	s11,s11,-16
800105c0:	00060893          	mv	a7,a2
800105c4:	bf1ff06f          	j	800101b4 <_svfprintf_r+0x10f8>
800105c8:	01068693          	addi	a3,a3,16
800105cc:	01b8a223          	sw	s11,4(a7)
800105d0:	0cd12e23          	sw	a3,220(sp)
800105d4:	0ce12c23          	sw	a4,216(sp)
800105d8:	02e85263          	ble	a4,a6,800105fc <_svfprintf_r+0x1540>
800105dc:	0d410613          	addi	a2,sp,212
800105e0:	00098593          	mv	a1,s3
800105e4:	00090513          	mv	a0,s2
800105e8:	05012223          	sw	a6,68(sp)
800105ec:	11d020ef          	jal	ra,80012f08 <__ssprint_r>
800105f0:	180512e3          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
800105f4:	04412803          	lw	a6,68(sp)
800105f8:	0fc10613          	addi	a2,sp,252
800105fc:	ff0a8a93          	addi	s5,s5,-16
80010600:	00060893          	mv	a7,a2
80010604:	c11ff06f          	j	80010214 <_svfprintf_r+0x1158>
80010608:	06500713          	li	a4,101
8001060c:	71a75263          	ble	s10,a4,80010d10 <_svfprintf_r+0x1c54>
80010610:	0e012703          	lw	a4,224(sp)
80010614:	09010593          	addi	a1,sp,144
80010618:	0a010513          	addi	a0,sp,160
8001061c:	0ae12023          	sw	a4,160(sp)
80010620:	0e412703          	lw	a4,228(sp)
80010624:	05112223          	sw	a7,68(sp)
80010628:	08012823          	sw	zero,144(sp)
8001062c:	0ae12223          	sw	a4,164(sp)
80010630:	0e812703          	lw	a4,232(sp)
80010634:	08012a23          	sw	zero,148(sp)
80010638:	08012c23          	sw	zero,152(sp)
8001063c:	0ae12423          	sw	a4,168(sp)
80010640:	0ec12703          	lw	a4,236(sp)
80010644:	08012e23          	sw	zero,156(sp)
80010648:	0ae12623          	sw	a4,172(sp)
8001064c:	595040ef          	jal	ra,800153e0 <__eqtf2>
80010650:	04412883          	lw	a7,68(sp)
80010654:	18051263          	bnez	a0,800107d8 <_svfprintf_r+0x171c>
80010658:	800217b7          	lui	a5,0x80021
8001065c:	da478793          	addi	a5,a5,-604 # 80020da4 <__stack+0xfffe42d8>
80010660:	00f8a023          	sw	a5,0(a7)
80010664:	00100793          	li	a5,1
80010668:	00f8a223          	sw	a5,4(a7)
8001066c:	0d812783          	lw	a5,216(sp)
80010670:	001d8d93          	addi	s11,s11,1
80010674:	0db12e23          	sw	s11,220(sp)
80010678:	00178793          	addi	a5,a5,1
8001067c:	0cf12c23          	sw	a5,216(sp)
80010680:	00700713          	li	a4,7
80010684:	00888893          	addi	a7,a7,8
80010688:	00f75e63          	ble	a5,a4,800106a4 <_svfprintf_r+0x15e8>
8001068c:	0d410613          	addi	a2,sp,212
80010690:	00098593          	mv	a1,s3
80010694:	00090513          	mv	a0,s2
80010698:	071020ef          	jal	ra,80012f08 <__ssprint_r>
8001069c:	0c051ce3          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
800106a0:	0fc10893          	addi	a7,sp,252
800106a4:	0bc12783          	lw	a5,188(sp)
800106a8:	0147c663          	blt	a5,s4,800106b4 <_svfprintf_r+0x15f8>
800106ac:	00147793          	andi	a5,s0,1
800106b0:	08078e63          	beqz	a5,8001074c <_svfprintf_r+0x1690>
800106b4:	03412783          	lw	a5,52(sp)
800106b8:	02012703          	lw	a4,32(sp)
800106bc:	00888893          	addi	a7,a7,8
800106c0:	fef8ac23          	sw	a5,-8(a7)
800106c4:	02012783          	lw	a5,32(sp)
800106c8:	fef8ae23          	sw	a5,-4(a7)
800106cc:	0dc12783          	lw	a5,220(sp)
800106d0:	00e787b3          	add	a5,a5,a4
800106d4:	0cf12e23          	sw	a5,220(sp)
800106d8:	0d812783          	lw	a5,216(sp)
800106dc:	00700713          	li	a4,7
800106e0:	00178793          	addi	a5,a5,1
800106e4:	0cf12c23          	sw	a5,216(sp)
800106e8:	00f75e63          	ble	a5,a4,80010704 <_svfprintf_r+0x1648>
800106ec:	0d410613          	addi	a2,sp,212
800106f0:	00098593          	mv	a1,s3
800106f4:	00090513          	mv	a0,s2
800106f8:	011020ef          	jal	ra,80012f08 <__ssprint_r>
800106fc:	06051ce3          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010700:	0fc10893          	addi	a7,sp,252
80010704:	fffa0493          	addi	s1,s4,-1
80010708:	04905263          	blez	s1,8001074c <_svfprintf_r+0x1690>
8001070c:	01000a93          	li	s5,16
80010710:	00700b93          	li	s7,7
80010714:	01412603          	lw	a2,20(sp)
80010718:	0d812783          	lw	a5,216(sp)
8001071c:	0dc12703          	lw	a4,220(sp)
80010720:	00c8a023          	sw	a2,0(a7)
80010724:	00178793          	addi	a5,a5,1
80010728:	00888693          	addi	a3,a7,8
8001072c:	069aca63          	blt	s5,s1,800107a0 <_svfprintf_r+0x16e4>
80010730:	0098a223          	sw	s1,4(a7)
80010734:	00e484b3          	add	s1,s1,a4
80010738:	0c912e23          	sw	s1,220(sp)
8001073c:	0cf12c23          	sw	a5,216(sp)
80010740:	00700713          	li	a4,7
80010744:	00068893          	mv	a7,a3
80010748:	b4f748e3          	blt	a4,a5,80010298 <_svfprintf_r+0x11dc>
8001074c:	00447413          	andi	s0,s0,4
80010750:	7c041263          	bnez	s0,80010f14 <_svfprintf_r+0x1e58>
80010754:	02812d03          	lw	s10,40(sp)
80010758:	02c12783          	lw	a5,44(sp)
8001075c:	00fd5463          	ble	a5,s10,80010764 <_svfprintf_r+0x16a8>
80010760:	00078d13          	mv	s10,a5
80010764:	02412783          	lw	a5,36(sp)
80010768:	01a787b3          	add	a5,a5,s10
8001076c:	02f12223          	sw	a5,36(sp)
80010770:	0dc12783          	lw	a5,220(sp)
80010774:	00078c63          	beqz	a5,8001078c <_svfprintf_r+0x16d0>
80010778:	0d410613          	addi	a2,sp,212
8001077c:	00098593          	mv	a1,s3
80010780:	00090513          	mv	a0,s2
80010784:	784020ef          	jal	ra,80012f08 <__ssprint_r>
80010788:	7e051663          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
8001078c:	00c12783          	lw	a5,12(sp)
80010790:	0c012c23          	sw	zero,216(sp)
80010794:	02079ae3          	bnez	a5,80010fc8 <_svfprintf_r+0x1f0c>
80010798:	0fc10893          	addi	a7,sp,252
8001079c:	f28ff06f          	j	8000fec4 <_svfprintf_r+0xe08>
800107a0:	01070713          	addi	a4,a4,16
800107a4:	0158a223          	sw	s5,4(a7)
800107a8:	0ce12e23          	sw	a4,220(sp)
800107ac:	0cf12c23          	sw	a5,216(sp)
800107b0:	00fbde63          	ble	a5,s7,800107cc <_svfprintf_r+0x1710>
800107b4:	0d410613          	addi	a2,sp,212
800107b8:	00098593          	mv	a1,s3
800107bc:	00090513          	mv	a0,s2
800107c0:	748020ef          	jal	ra,80012f08 <__ssprint_r>
800107c4:	7a051863          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
800107c8:	0fc10693          	addi	a3,sp,252
800107cc:	ff048493          	addi	s1,s1,-16
800107d0:	00068893          	mv	a7,a3
800107d4:	f41ff06f          	j	80010714 <_svfprintf_r+0x1658>
800107d8:	0bc12703          	lw	a4,188(sp)
800107dc:	16e04463          	bgtz	a4,80010944 <_svfprintf_r+0x1888>
800107e0:	800217b7          	lui	a5,0x80021
800107e4:	da478793          	addi	a5,a5,-604 # 80020da4 <__stack+0xfffe42d8>
800107e8:	00f8a023          	sw	a5,0(a7)
800107ec:	00100793          	li	a5,1
800107f0:	00f8a223          	sw	a5,4(a7)
800107f4:	0d812783          	lw	a5,216(sp)
800107f8:	001d8d93          	addi	s11,s11,1
800107fc:	0db12e23          	sw	s11,220(sp)
80010800:	00178793          	addi	a5,a5,1
80010804:	0cf12c23          	sw	a5,216(sp)
80010808:	00700713          	li	a4,7
8001080c:	00888893          	addi	a7,a7,8
80010810:	00f75e63          	ble	a5,a4,8001082c <_svfprintf_r+0x1770>
80010814:	0d410613          	addi	a2,sp,212
80010818:	00098593          	mv	a1,s3
8001081c:	00090513          	mv	a0,s2
80010820:	6e8020ef          	jal	ra,80012f08 <__ssprint_r>
80010824:	74051863          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010828:	0fc10893          	addi	a7,sp,252
8001082c:	0bc12783          	lw	a5,188(sp)
80010830:	00079863          	bnez	a5,80010840 <_svfprintf_r+0x1784>
80010834:	000a1663          	bnez	s4,80010840 <_svfprintf_r+0x1784>
80010838:	00147793          	andi	a5,s0,1
8001083c:	f00788e3          	beqz	a5,8001074c <_svfprintf_r+0x1690>
80010840:	03412783          	lw	a5,52(sp)
80010844:	02012703          	lw	a4,32(sp)
80010848:	00888893          	addi	a7,a7,8
8001084c:	fef8ac23          	sw	a5,-8(a7)
80010850:	02012783          	lw	a5,32(sp)
80010854:	fef8ae23          	sw	a5,-4(a7)
80010858:	0dc12783          	lw	a5,220(sp)
8001085c:	00e787b3          	add	a5,a5,a4
80010860:	0cf12e23          	sw	a5,220(sp)
80010864:	0d812783          	lw	a5,216(sp)
80010868:	00700713          	li	a4,7
8001086c:	00178793          	addi	a5,a5,1
80010870:	0cf12c23          	sw	a5,216(sp)
80010874:	00f75e63          	ble	a5,a4,80010890 <_svfprintf_r+0x17d4>
80010878:	0d410613          	addi	a2,sp,212
8001087c:	00098593          	mv	a1,s3
80010880:	00090513          	mv	a0,s2
80010884:	684020ef          	jal	ra,80012f08 <__ssprint_r>
80010888:	6e051663          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
8001088c:	0fc10893          	addi	a7,sp,252
80010890:	0bc12a83          	lw	s5,188(sp)
80010894:	060ad063          	bgez	s5,800108f4 <_svfprintf_r+0x1838>
80010898:	41500ab3          	neg	s5,s5
8001089c:	00088713          	mv	a4,a7
800108a0:	01000b93          	li	s7,16
800108a4:	00700c13          	li	s8,7
800108a8:	01412603          	lw	a2,20(sp)
800108ac:	0d812783          	lw	a5,216(sp)
800108b0:	0dc12683          	lw	a3,220(sp)
800108b4:	00c72023          	sw	a2,0(a4)
800108b8:	00178793          	addi	a5,a5,1
800108bc:	00888893          	addi	a7,a7,8
800108c0:	055bc663          	blt	s7,s5,8001090c <_svfprintf_r+0x1850>
800108c4:	01572223          	sw	s5,4(a4)
800108c8:	00da8ab3          	add	s5,s5,a3
800108cc:	0d512e23          	sw	s5,220(sp)
800108d0:	0cf12c23          	sw	a5,216(sp)
800108d4:	00700713          	li	a4,7
800108d8:	00f75e63          	ble	a5,a4,800108f4 <_svfprintf_r+0x1838>
800108dc:	0d410613          	addi	a2,sp,212
800108e0:	00098593          	mv	a1,s3
800108e4:	00090513          	mv	a0,s2
800108e8:	620020ef          	jal	ra,80012f08 <__ssprint_r>
800108ec:	68051463          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
800108f0:	0fc10893          	addi	a7,sp,252
800108f4:	0dc12783          	lw	a5,220(sp)
800108f8:	0098a023          	sw	s1,0(a7)
800108fc:	0148a223          	sw	s4,4(a7)
80010900:	014787b3          	add	a5,a5,s4
80010904:	0cf12e23          	sw	a5,220(sp)
80010908:	979ff06f          	j	80010280 <_svfprintf_r+0x11c4>
8001090c:	01068693          	addi	a3,a3,16
80010910:	01772223          	sw	s7,4(a4)
80010914:	0cd12e23          	sw	a3,220(sp)
80010918:	0cf12c23          	sw	a5,216(sp)
8001091c:	00fc5e63          	ble	a5,s8,80010938 <_svfprintf_r+0x187c>
80010920:	0d410613          	addi	a2,sp,212
80010924:	00098593          	mv	a1,s3
80010928:	00090513          	mv	a0,s2
8001092c:	5dc020ef          	jal	ra,80012f08 <__ssprint_r>
80010930:	64051263          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010934:	0fc10893          	addi	a7,sp,252
80010938:	ff0a8a93          	addi	s5,s5,-16
8001093c:	00088713          	mv	a4,a7
80010940:	f69ff06f          	j	800108a8 <_svfprintf_r+0x17ec>
80010944:	000c8a93          	mv	s5,s9
80010948:	019a5463          	ble	s9,s4,80010950 <_svfprintf_r+0x1894>
8001094c:	000a0a93          	mv	s5,s4
80010950:	05505263          	blez	s5,80010994 <_svfprintf_r+0x18d8>
80010954:	0d812703          	lw	a4,216(sp)
80010958:	01ba8db3          	add	s11,s5,s11
8001095c:	0098a023          	sw	s1,0(a7)
80010960:	00170713          	addi	a4,a4,1
80010964:	0158a223          	sw	s5,4(a7)
80010968:	0db12e23          	sw	s11,220(sp)
8001096c:	0ce12c23          	sw	a4,216(sp)
80010970:	00700693          	li	a3,7
80010974:	00888893          	addi	a7,a7,8
80010978:	00e6de63          	ble	a4,a3,80010994 <_svfprintf_r+0x18d8>
8001097c:	0d410613          	addi	a2,sp,212
80010980:	00098593          	mv	a1,s3
80010984:	00090513          	mv	a0,s2
80010988:	580020ef          	jal	ra,80012f08 <__ssprint_r>
8001098c:	5e051463          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010990:	0fc10893          	addi	a7,sp,252
80010994:	000ad463          	bgez	s5,8001099c <_svfprintf_r+0x18e0>
80010998:	00000a93          	li	s5,0
8001099c:	415c8ab3          	sub	s5,s9,s5
800109a0:	05505e63          	blez	s5,800109fc <_svfprintf_r+0x1940>
800109a4:	01000d13          	li	s10,16
800109a8:	00700d93          	li	s11,7
800109ac:	01412783          	lw	a5,20(sp)
800109b0:	0d812703          	lw	a4,216(sp)
800109b4:	0dc12683          	lw	a3,220(sp)
800109b8:	00f8a023          	sw	a5,0(a7)
800109bc:	00170713          	addi	a4,a4,1
800109c0:	00888613          	addi	a2,a7,8
800109c4:	195d4c63          	blt	s10,s5,80010b5c <_svfprintf_r+0x1aa0>
800109c8:	0158a223          	sw	s5,4(a7)
800109cc:	00da8ab3          	add	s5,s5,a3
800109d0:	0d512e23          	sw	s5,220(sp)
800109d4:	0ce12c23          	sw	a4,216(sp)
800109d8:	00700693          	li	a3,7
800109dc:	00060893          	mv	a7,a2
800109e0:	00e6de63          	ble	a4,a3,800109fc <_svfprintf_r+0x1940>
800109e4:	0d410613          	addi	a2,sp,212
800109e8:	00098593          	mv	a1,s3
800109ec:	00090513          	mv	a0,s2
800109f0:	518020ef          	jal	ra,80012f08 <__ssprint_r>
800109f4:	58051063          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
800109f8:	0fc10893          	addi	a7,sp,252
800109fc:	40047793          	andi	a5,s0,1024
80010a00:	01948ab3          	add	s5,s1,s9
80010a04:	02078063          	beqz	a5,80010a24 <_svfprintf_r+0x1968>
80010a08:	00700d13          	li	s10,7
80010a0c:	01448db3          	add	s11,s1,s4
80010a10:	180b9263          	bnez	s7,80010b94 <_svfprintf_r+0x1ad8>
80010a14:	180c1263          	bnez	s8,80010b98 <_svfprintf_r+0x1adc>
80010a18:	014487b3          	add	a5,s1,s4
80010a1c:	0157f463          	bleu	s5,a5,80010a24 <_svfprintf_r+0x1968>
80010a20:	00078a93          	mv	s5,a5
80010a24:	0bc12783          	lw	a5,188(sp)
80010a28:	0147c663          	blt	a5,s4,80010a34 <_svfprintf_r+0x1978>
80010a2c:	00147793          	andi	a5,s0,1
80010a30:	04078a63          	beqz	a5,80010a84 <_svfprintf_r+0x19c8>
80010a34:	03412783          	lw	a5,52(sp)
80010a38:	02012703          	lw	a4,32(sp)
80010a3c:	00888893          	addi	a7,a7,8
80010a40:	fef8ac23          	sw	a5,-8(a7)
80010a44:	02012783          	lw	a5,32(sp)
80010a48:	fef8ae23          	sw	a5,-4(a7)
80010a4c:	0dc12783          	lw	a5,220(sp)
80010a50:	00e787b3          	add	a5,a5,a4
80010a54:	0cf12e23          	sw	a5,220(sp)
80010a58:	0d812783          	lw	a5,216(sp)
80010a5c:	00700713          	li	a4,7
80010a60:	00178793          	addi	a5,a5,1
80010a64:	0cf12c23          	sw	a5,216(sp)
80010a68:	00f75e63          	ble	a5,a4,80010a84 <_svfprintf_r+0x19c8>
80010a6c:	0d410613          	addi	a2,sp,212
80010a70:	00098593          	mv	a1,s3
80010a74:	00090513          	mv	a0,s2
80010a78:	490020ef          	jal	ra,80012f08 <__ssprint_r>
80010a7c:	4e051c63          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010a80:	0fc10893          	addi	a7,sp,252
80010a84:	014484b3          	add	s1,s1,s4
80010a88:	415487b3          	sub	a5,s1,s5
80010a8c:	0bc12483          	lw	s1,188(sp)
80010a90:	409a04b3          	sub	s1,s4,s1
80010a94:	0097d463          	ble	s1,a5,80010a9c <_svfprintf_r+0x19e0>
80010a98:	00078493          	mv	s1,a5
80010a9c:	04905463          	blez	s1,80010ae4 <_svfprintf_r+0x1a28>
80010aa0:	0dc12783          	lw	a5,220(sp)
80010aa4:	0158a023          	sw	s5,0(a7)
80010aa8:	0098a223          	sw	s1,4(a7)
80010aac:	00f487b3          	add	a5,s1,a5
80010ab0:	0cf12e23          	sw	a5,220(sp)
80010ab4:	0d812783          	lw	a5,216(sp)
80010ab8:	00700713          	li	a4,7
80010abc:	00888893          	addi	a7,a7,8
80010ac0:	00178793          	addi	a5,a5,1
80010ac4:	0cf12c23          	sw	a5,216(sp)
80010ac8:	00f75e63          	ble	a5,a4,80010ae4 <_svfprintf_r+0x1a28>
80010acc:	0d410613          	addi	a2,sp,212
80010ad0:	00098593          	mv	a1,s3
80010ad4:	00090513          	mv	a0,s2
80010ad8:	430020ef          	jal	ra,80012f08 <__ssprint_r>
80010adc:	48051c63          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010ae0:	0fc10893          	addi	a7,sp,252
80010ae4:	00048793          	mv	a5,s1
80010ae8:	0004d463          	bgez	s1,80010af0 <_svfprintf_r+0x1a34>
80010aec:	00000793          	li	a5,0
80010af0:	0bc12483          	lw	s1,188(sp)
80010af4:	409a04b3          	sub	s1,s4,s1
80010af8:	40f484b3          	sub	s1,s1,a5
80010afc:	c49058e3          	blez	s1,8001074c <_svfprintf_r+0x1690>
80010b00:	01000a93          	li	s5,16
80010b04:	00700b93          	li	s7,7
80010b08:	01412603          	lw	a2,20(sp)
80010b0c:	0d812783          	lw	a5,216(sp)
80010b10:	0dc12703          	lw	a4,220(sp)
80010b14:	00c8a023          	sw	a2,0(a7)
80010b18:	00178793          	addi	a5,a5,1
80010b1c:	00888693          	addi	a3,a7,8
80010b20:	c09ad8e3          	ble	s1,s5,80010730 <_svfprintf_r+0x1674>
80010b24:	01070713          	addi	a4,a4,16
80010b28:	0158a223          	sw	s5,4(a7)
80010b2c:	0ce12e23          	sw	a4,220(sp)
80010b30:	0cf12c23          	sw	a5,216(sp)
80010b34:	00fbde63          	ble	a5,s7,80010b50 <_svfprintf_r+0x1a94>
80010b38:	0d410613          	addi	a2,sp,212
80010b3c:	00098593          	mv	a1,s3
80010b40:	00090513          	mv	a0,s2
80010b44:	3c4020ef          	jal	ra,80012f08 <__ssprint_r>
80010b48:	42051663          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010b4c:	0fc10693          	addi	a3,sp,252
80010b50:	ff048493          	addi	s1,s1,-16
80010b54:	00068893          	mv	a7,a3
80010b58:	fb1ff06f          	j	80010b08 <_svfprintf_r+0x1a4c>
80010b5c:	01068693          	addi	a3,a3,16
80010b60:	01a8a223          	sw	s10,4(a7)
80010b64:	0cd12e23          	sw	a3,220(sp)
80010b68:	0ce12c23          	sw	a4,216(sp)
80010b6c:	00edde63          	ble	a4,s11,80010b88 <_svfprintf_r+0x1acc>
80010b70:	0d410613          	addi	a2,sp,212
80010b74:	00098593          	mv	a1,s3
80010b78:	00090513          	mv	a0,s2
80010b7c:	38c020ef          	jal	ra,80012f08 <__ssprint_r>
80010b80:	3e051a63          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010b84:	0fc10613          	addi	a2,sp,252
80010b88:	ff0a8a93          	addi	s5,s5,-16
80010b8c:	00060893          	mv	a7,a2
80010b90:	e1dff06f          	j	800109ac <_svfprintf_r+0x18f0>
80010b94:	0c0c0e63          	beqz	s8,80010c70 <_svfprintf_r+0x1bb4>
80010b98:	fffc0c13          	addi	s8,s8,-1
80010b9c:	03812783          	lw	a5,56(sp)
80010ba0:	03012703          	lw	a4,48(sp)
80010ba4:	00888893          	addi	a7,a7,8
80010ba8:	fef8ac23          	sw	a5,-8(a7)
80010bac:	03012783          	lw	a5,48(sp)
80010bb0:	fef8ae23          	sw	a5,-4(a7)
80010bb4:	0dc12783          	lw	a5,220(sp)
80010bb8:	00e787b3          	add	a5,a5,a4
80010bbc:	0cf12e23          	sw	a5,220(sp)
80010bc0:	0d812783          	lw	a5,216(sp)
80010bc4:	00178793          	addi	a5,a5,1
80010bc8:	0cf12c23          	sw	a5,216(sp)
80010bcc:	00fd5e63          	ble	a5,s10,80010be8 <_svfprintf_r+0x1b2c>
80010bd0:	0d410613          	addi	a2,sp,212
80010bd4:	00098593          	mv	a1,s3
80010bd8:	00090513          	mv	a0,s2
80010bdc:	32c020ef          	jal	ra,80012f08 <__ssprint_r>
80010be0:	38051a63          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010be4:	0fc10893          	addi	a7,sp,252
80010be8:	01012783          	lw	a5,16(sp)
80010bec:	415d8733          	sub	a4,s11,s5
80010bf0:	0007cb03          	lbu	s6,0(a5)
80010bf4:	01675463          	ble	s6,a4,80010bfc <_svfprintf_r+0x1b40>
80010bf8:	00070b13          	mv	s6,a4
80010bfc:	05605263          	blez	s6,80010c40 <_svfprintf_r+0x1b84>
80010c00:	0dc12703          	lw	a4,220(sp)
80010c04:	0158a023          	sw	s5,0(a7)
80010c08:	0168a223          	sw	s6,4(a7)
80010c0c:	00eb0733          	add	a4,s6,a4
80010c10:	0ce12e23          	sw	a4,220(sp)
80010c14:	0d812703          	lw	a4,216(sp)
80010c18:	00888893          	addi	a7,a7,8
80010c1c:	00170713          	addi	a4,a4,1
80010c20:	0ce12c23          	sw	a4,216(sp)
80010c24:	00ed5e63          	ble	a4,s10,80010c40 <_svfprintf_r+0x1b84>
80010c28:	0d410613          	addi	a2,sp,212
80010c2c:	00098593          	mv	a1,s3
80010c30:	00090513          	mv	a0,s2
80010c34:	2d4020ef          	jal	ra,80012f08 <__ssprint_r>
80010c38:	32051e63          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010c3c:	0fc10893          	addi	a7,sp,252
80010c40:	000b0713          	mv	a4,s6
80010c44:	000b5463          	bgez	s6,80010c4c <_svfprintf_r+0x1b90>
80010c48:	00000713          	li	a4,0
80010c4c:	01012783          	lw	a5,16(sp)
80010c50:	01000813          	li	a6,16
80010c54:	0007c783          	lbu	a5,0(a5)
80010c58:	40e78b33          	sub	s6,a5,a4
80010c5c:	07604263          	bgtz	s6,80010cc0 <_svfprintf_r+0x1c04>
80010c60:	01012783          	lw	a5,16(sp)
80010c64:	0007c783          	lbu	a5,0(a5)
80010c68:	00fa8ab3          	add	s5,s5,a5
80010c6c:	da5ff06f          	j	80010a10 <_svfprintf_r+0x1954>
80010c70:	01012783          	lw	a5,16(sp)
80010c74:	fffb8b93          	addi	s7,s7,-1
80010c78:	fff78793          	addi	a5,a5,-1
80010c7c:	00f12823          	sw	a5,16(sp)
80010c80:	f1dff06f          	j	80010b9c <_svfprintf_r+0x1ae0>
80010c84:	01068693          	addi	a3,a3,16
80010c88:	0108a223          	sw	a6,4(a7)
80010c8c:	0cd12e23          	sw	a3,220(sp)
80010c90:	0ce12c23          	sw	a4,216(sp)
80010c94:	02ed5263          	ble	a4,s10,80010cb8 <_svfprintf_r+0x1bfc>
80010c98:	0d410613          	addi	a2,sp,212
80010c9c:	00098593          	mv	a1,s3
80010ca0:	00090513          	mv	a0,s2
80010ca4:	05012223          	sw	a6,68(sp)
80010ca8:	260020ef          	jal	ra,80012f08 <__ssprint_r>
80010cac:	2c051463          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010cb0:	04412803          	lw	a6,68(sp)
80010cb4:	0fc10613          	addi	a2,sp,252
80010cb8:	ff0b0b13          	addi	s6,s6,-16
80010cbc:	00060893          	mv	a7,a2
80010cc0:	01412783          	lw	a5,20(sp)
80010cc4:	0d812703          	lw	a4,216(sp)
80010cc8:	0dc12683          	lw	a3,220(sp)
80010ccc:	00f8a023          	sw	a5,0(a7)
80010cd0:	00170713          	addi	a4,a4,1
80010cd4:	00888613          	addi	a2,a7,8
80010cd8:	fb6846e3          	blt	a6,s6,80010c84 <_svfprintf_r+0x1bc8>
80010cdc:	00db07b3          	add	a5,s6,a3
80010ce0:	0168a223          	sw	s6,4(a7)
80010ce4:	0cf12e23          	sw	a5,220(sp)
80010ce8:	0ce12c23          	sw	a4,216(sp)
80010cec:	00060893          	mv	a7,a2
80010cf0:	f6ed58e3          	ble	a4,s10,80010c60 <_svfprintf_r+0x1ba4>
80010cf4:	0d410613          	addi	a2,sp,212
80010cf8:	00098593          	mv	a1,s3
80010cfc:	00090513          	mv	a0,s2
80010d00:	208020ef          	jal	ra,80012f08 <__ssprint_r>
80010d04:	26051863          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010d08:	0fc10893          	addi	a7,sp,252
80010d0c:	f55ff06f          	j	80010c60 <_svfprintf_r+0x1ba4>
80010d10:	0d812783          	lw	a5,216(sp)
80010d14:	00100713          	li	a4,1
80010d18:	0098a023          	sw	s1,0(a7)
80010d1c:	001d8d93          	addi	s11,s11,1
80010d20:	00178793          	addi	a5,a5,1
80010d24:	00888b93          	addi	s7,a7,8
80010d28:	01474663          	blt	a4,s4,80010d34 <_svfprintf_r+0x1c78>
80010d2c:	00147693          	andi	a3,s0,1
80010d30:	1c068663          	beqz	a3,80010efc <_svfprintf_r+0x1e40>
80010d34:	00100713          	li	a4,1
80010d38:	00e8a223          	sw	a4,4(a7)
80010d3c:	0db12e23          	sw	s11,220(sp)
80010d40:	0cf12c23          	sw	a5,216(sp)
80010d44:	00700713          	li	a4,7
80010d48:	00f75e63          	ble	a5,a4,80010d64 <_svfprintf_r+0x1ca8>
80010d4c:	0d410613          	addi	a2,sp,212
80010d50:	00098593          	mv	a1,s3
80010d54:	00090513          	mv	a0,s2
80010d58:	1b0020ef          	jal	ra,80012f08 <__ssprint_r>
80010d5c:	20051c63          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010d60:	0fc10b93          	addi	s7,sp,252
80010d64:	03412783          	lw	a5,52(sp)
80010d68:	02012703          	lw	a4,32(sp)
80010d6c:	008b8b93          	addi	s7,s7,8
80010d70:	fefbac23          	sw	a5,-8(s7)
80010d74:	02012783          	lw	a5,32(sp)
80010d78:	fefbae23          	sw	a5,-4(s7)
80010d7c:	0dc12783          	lw	a5,220(sp)
80010d80:	00e787b3          	add	a5,a5,a4
80010d84:	0cf12e23          	sw	a5,220(sp)
80010d88:	0d812783          	lw	a5,216(sp)
80010d8c:	00700713          	li	a4,7
80010d90:	00178793          	addi	a5,a5,1
80010d94:	0cf12c23          	sw	a5,216(sp)
80010d98:	00f75e63          	ble	a5,a4,80010db4 <_svfprintf_r+0x1cf8>
80010d9c:	0d410613          	addi	a2,sp,212
80010da0:	00098593          	mv	a1,s3
80010da4:	00090513          	mv	a0,s2
80010da8:	160020ef          	jal	ra,80012f08 <__ssprint_r>
80010dac:	1c051463          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010db0:	0fc10b93          	addi	s7,sp,252
80010db4:	0e012783          	lw	a5,224(sp)
80010db8:	09010593          	addi	a1,sp,144
80010dbc:	0a010513          	addi	a0,sp,160
80010dc0:	0af12023          	sw	a5,160(sp)
80010dc4:	0e412783          	lw	a5,228(sp)
80010dc8:	fffa0a93          	addi	s5,s4,-1
80010dcc:	08012823          	sw	zero,144(sp)
80010dd0:	0af12223          	sw	a5,164(sp)
80010dd4:	0e812783          	lw	a5,232(sp)
80010dd8:	08012a23          	sw	zero,148(sp)
80010ddc:	08012c23          	sw	zero,152(sp)
80010de0:	0af12423          	sw	a5,168(sp)
80010de4:	0ec12783          	lw	a5,236(sp)
80010de8:	08012e23          	sw	zero,156(sp)
80010dec:	0af12623          	sw	a5,172(sp)
80010df0:	5f0040ef          	jal	ra,800153e0 <__eqtf2>
80010df4:	08050663          	beqz	a0,80010e80 <_svfprintf_r+0x1dc4>
80010df8:	0dc12783          	lw	a5,220(sp)
80010dfc:	0d812703          	lw	a4,216(sp)
80010e00:	00148493          	addi	s1,s1,1
80010e04:	fff78793          	addi	a5,a5,-1
80010e08:	014787b3          	add	a5,a5,s4
80010e0c:	00170713          	addi	a4,a4,1
80010e10:	009ba023          	sw	s1,0(s7)
80010e14:	015ba223          	sw	s5,4(s7)
80010e18:	0cf12e23          	sw	a5,220(sp)
80010e1c:	0ce12c23          	sw	a4,216(sp)
80010e20:	00700793          	li	a5,7
80010e24:	008b8b93          	addi	s7,s7,8
80010e28:	00e7de63          	ble	a4,a5,80010e44 <_svfprintf_r+0x1d88>
80010e2c:	0d410613          	addi	a2,sp,212
80010e30:	00098593          	mv	a1,s3
80010e34:	00090513          	mv	a0,s2
80010e38:	0d0020ef          	jal	ra,80012f08 <__ssprint_r>
80010e3c:	12051c63          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010e40:	0fc10b93          	addi	s7,sp,252
80010e44:	0c410793          	addi	a5,sp,196
80010e48:	00fba023          	sw	a5,0(s7)
80010e4c:	03c12783          	lw	a5,60(sp)
80010e50:	03c12703          	lw	a4,60(sp)
80010e54:	008b8893          	addi	a7,s7,8
80010e58:	00fba223          	sw	a5,4(s7)
80010e5c:	0dc12783          	lw	a5,220(sp)
80010e60:	00e787b3          	add	a5,a5,a4
80010e64:	0cf12e23          	sw	a5,220(sp)
80010e68:	0d812783          	lw	a5,216(sp)
80010e6c:	00700713          	li	a4,7
80010e70:	00178793          	addi	a5,a5,1
80010e74:	0cf12c23          	sw	a5,216(sp)
80010e78:	8cf75ae3          	ble	a5,a4,8001074c <_svfprintf_r+0x1690>
80010e7c:	c1cff06f          	j	80010298 <_svfprintf_r+0x11dc>
80010e80:	fd5052e3          	blez	s5,80010e44 <_svfprintf_r+0x1d88>
80010e84:	01000493          	li	s1,16
80010e88:	00700c13          	li	s8,7
80010e8c:	01412603          	lw	a2,20(sp)
80010e90:	0d812703          	lw	a4,216(sp)
80010e94:	0dc12783          	lw	a5,220(sp)
80010e98:	00cba023          	sw	a2,0(s7)
80010e9c:	00170713          	addi	a4,a4,1
80010ea0:	008b8693          	addi	a3,s7,8
80010ea4:	0354c063          	blt	s1,s5,80010ec4 <_svfprintf_r+0x1e08>
80010ea8:	00fa87b3          	add	a5,s5,a5
80010eac:	015ba223          	sw	s5,4(s7)
80010eb0:	0cf12e23          	sw	a5,220(sp)
80010eb4:	0ce12c23          	sw	a4,216(sp)
80010eb8:	00700793          	li	a5,7
80010ebc:	00068b93          	mv	s7,a3
80010ec0:	f69ff06f          	j	80010e28 <_svfprintf_r+0x1d6c>
80010ec4:	01078793          	addi	a5,a5,16
80010ec8:	009ba223          	sw	s1,4(s7)
80010ecc:	0cf12e23          	sw	a5,220(sp)
80010ed0:	0ce12c23          	sw	a4,216(sp)
80010ed4:	00ec5e63          	ble	a4,s8,80010ef0 <_svfprintf_r+0x1e34>
80010ed8:	0d410613          	addi	a2,sp,212
80010edc:	00098593          	mv	a1,s3
80010ee0:	00090513          	mv	a0,s2
80010ee4:	024020ef          	jal	ra,80012f08 <__ssprint_r>
80010ee8:	08051663          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010eec:	0fc10693          	addi	a3,sp,252
80010ef0:	ff0a8a93          	addi	s5,s5,-16
80010ef4:	00068b93          	mv	s7,a3
80010ef8:	f95ff06f          	j	80010e8c <_svfprintf_r+0x1dd0>
80010efc:	00e8a223          	sw	a4,4(a7)
80010f00:	0db12e23          	sw	s11,220(sp)
80010f04:	0cf12c23          	sw	a5,216(sp)
80010f08:	00700713          	li	a4,7
80010f0c:	f2f75ce3          	ble	a5,a4,80010e44 <_svfprintf_r+0x1d88>
80010f10:	f1dff06f          	j	80010e2c <_svfprintf_r+0x1d70>
80010f14:	02812783          	lw	a5,40(sp)
80010f18:	02c12703          	lw	a4,44(sp)
80010f1c:	40e78433          	sub	s0,a5,a4
80010f20:	82805ae3          	blez	s0,80010754 <_svfprintf_r+0x1698>
80010f24:	800204b7          	lui	s1,0x80020
80010f28:	01000a93          	li	s5,16
80010f2c:	77c48493          	addi	s1,s1,1916 # 8002077c <__stack+0xfffe3cb0>
80010f30:	00700b93          	li	s7,7
80010f34:	0d812783          	lw	a5,216(sp)
80010f38:	0098a023          	sw	s1,0(a7)
80010f3c:	0dc12703          	lw	a4,220(sp)
80010f40:	00178793          	addi	a5,a5,1
80010f44:	048ac663          	blt	s5,s0,80010f90 <_svfprintf_r+0x1ed4>
80010f48:	0088a223          	sw	s0,4(a7)
80010f4c:	00e40433          	add	s0,s0,a4
80010f50:	0c812e23          	sw	s0,220(sp)
80010f54:	0cf12c23          	sw	a5,216(sp)
80010f58:	00700713          	li	a4,7
80010f5c:	fef75c63          	ble	a5,a4,80010754 <_svfprintf_r+0x1698>
80010f60:	0d410613          	addi	a2,sp,212
80010f64:	00098593          	mv	a1,s3
80010f68:	00090513          	mv	a0,s2
80010f6c:	79d010ef          	jal	ra,80012f08 <__ssprint_r>
80010f70:	fe050263          	beqz	a0,80010754 <_svfprintf_r+0x1698>
80010f74:	00c12783          	lw	a5,12(sp)
80010f78:	00079463          	bnez	a5,80010f80 <_svfprintf_r+0x1ec4>
80010f7c:	f80fe06f          	j	8000f6fc <_svfprintf_r+0x640>
80010f80:	00078593          	mv	a1,a5
80010f84:	00090513          	mv	a0,s2
80010f88:	81cfa0ef          	jal	ra,8000afa4 <_free_r>
80010f8c:	f70fe06f          	j	8000f6fc <_svfprintf_r+0x640>
80010f90:	01070713          	addi	a4,a4,16
80010f94:	0158a223          	sw	s5,4(a7)
80010f98:	0ce12e23          	sw	a4,220(sp)
80010f9c:	0cf12c23          	sw	a5,216(sp)
80010fa0:	00888893          	addi	a7,a7,8
80010fa4:	00fbde63          	ble	a5,s7,80010fc0 <_svfprintf_r+0x1f04>
80010fa8:	0d410613          	addi	a2,sp,212
80010fac:	00098593          	mv	a1,s3
80010fb0:	00090513          	mv	a0,s2
80010fb4:	755010ef          	jal	ra,80012f08 <__ssprint_r>
80010fb8:	fa051ee3          	bnez	a0,80010f74 <_svfprintf_r+0x1eb8>
80010fbc:	0fc10893          	addi	a7,sp,252
80010fc0:	ff040413          	addi	s0,s0,-16
80010fc4:	f71ff06f          	j	80010f34 <_svfprintf_r+0x1e78>
80010fc8:	00c12583          	lw	a1,12(sp)
80010fcc:	00090513          	mv	a0,s2
80010fd0:	fd5f90ef          	jal	ra,8000afa4 <_free_r>
80010fd4:	fc4ff06f          	j	80010798 <_svfprintf_r+0x16dc>
80010fd8:	0dc12783          	lw	a5,220(sp)
80010fdc:	00079463          	bnez	a5,80010fe4 <_svfprintf_r+0x1f28>
80010fe0:	f1cfe06f          	j	8000f6fc <_svfprintf_r+0x640>
80010fe4:	0d410613          	addi	a2,sp,212
80010fe8:	00098593          	mv	a1,s3
80010fec:	00090513          	mv	a0,s2
80010ff0:	719010ef          	jal	ra,80012f08 <__ssprint_r>
80010ff4:	f08fe06f          	j	8000f6fc <_svfprintf_r+0x640>

80010ff8 <__sprint_r>:
80010ff8:	00862783          	lw	a5,8(a2)
80010ffc:	fd010113          	addi	sp,sp,-48
80011000:	02812423          	sw	s0,40(sp)
80011004:	02112623          	sw	ra,44(sp)
80011008:	02912223          	sw	s1,36(sp)
8001100c:	03212023          	sw	s2,32(sp)
80011010:	01312e23          	sw	s3,28(sp)
80011014:	01412c23          	sw	s4,24(sp)
80011018:	01512a23          	sw	s5,20(sp)
8001101c:	01612823          	sw	s6,16(sp)
80011020:	01712623          	sw	s7,12(sp)
80011024:	01812423          	sw	s8,8(sp)
80011028:	00060413          	mv	s0,a2
8001102c:	02079e63          	bnez	a5,80011068 <__sprint_r+0x70>
80011030:	00062223          	sw	zero,4(a2)
80011034:	00000513          	li	a0,0
80011038:	02c12083          	lw	ra,44(sp)
8001103c:	02812403          	lw	s0,40(sp)
80011040:	02412483          	lw	s1,36(sp)
80011044:	02012903          	lw	s2,32(sp)
80011048:	01c12983          	lw	s3,28(sp)
8001104c:	01812a03          	lw	s4,24(sp)
80011050:	01412a83          	lw	s5,20(sp)
80011054:	01012b03          	lw	s6,16(sp)
80011058:	00c12b83          	lw	s7,12(sp)
8001105c:	00812c03          	lw	s8,8(sp)
80011060:	03010113          	addi	sp,sp,48
80011064:	00008067          	ret
80011068:	0645a783          	lw	a5,100(a1)
8001106c:	00058913          	mv	s2,a1
80011070:	01279713          	slli	a4,a5,0x12
80011074:	06075a63          	bgez	a4,800110e8 <__sprint_r+0xf0>
80011078:	00062483          	lw	s1,0(a2)
8001107c:	00050a13          	mv	s4,a0
80011080:	fff00b93          	li	s7,-1
80011084:	00842783          	lw	a5,8(s0)
80011088:	00079a63          	bnez	a5,8001109c <__sprint_r+0xa4>
8001108c:	00000513          	li	a0,0
80011090:	00042423          	sw	zero,8(s0)
80011094:	00042223          	sw	zero,4(s0)
80011098:	fa1ff06f          	j	80011038 <__sprint_r+0x40>
8001109c:	0044a983          	lw	s3,4(s1)
800110a0:	0004ab03          	lw	s6,0(s1)
800110a4:	00000a93          	li	s5,0
800110a8:	0029dc13          	srli	s8,s3,0x2
800110ac:	018ace63          	blt	s5,s8,800110c8 <__sprint_r+0xd0>
800110b0:	00842783          	lw	a5,8(s0)
800110b4:	ffc9f993          	andi	s3,s3,-4
800110b8:	00848493          	addi	s1,s1,8
800110bc:	413789b3          	sub	s3,a5,s3
800110c0:	01342423          	sw	s3,8(s0)
800110c4:	fc1ff06f          	j	80011084 <__sprint_r+0x8c>
800110c8:	000b2583          	lw	a1,0(s6)
800110cc:	00090613          	mv	a2,s2
800110d0:	000a0513          	mv	a0,s4
800110d4:	110010ef          	jal	ra,800121e4 <_fputwc_r>
800110d8:	004b0b13          	addi	s6,s6,4
800110dc:	01750a63          	beq	a0,s7,800110f0 <__sprint_r+0xf8>
800110e0:	001a8a93          	addi	s5,s5,1
800110e4:	fc9ff06f          	j	800110ac <__sprint_r+0xb4>
800110e8:	1d0010ef          	jal	ra,800122b8 <__sfvwrite_r>
800110ec:	fa5ff06f          	j	80011090 <__sprint_r+0x98>
800110f0:	fff00513          	li	a0,-1
800110f4:	f9dff06f          	j	80011090 <__sprint_r+0x98>

800110f8 <_vfiprintf_r>:
800110f8:	ed010113          	addi	sp,sp,-304
800110fc:	12812423          	sw	s0,296(sp)
80011100:	13212023          	sw	s2,288(sp)
80011104:	11312e23          	sw	s3,284(sp)
80011108:	11412c23          	sw	s4,280(sp)
8001110c:	12112623          	sw	ra,300(sp)
80011110:	12912223          	sw	s1,292(sp)
80011114:	11512a23          	sw	s5,276(sp)
80011118:	11612823          	sw	s6,272(sp)
8001111c:	11712623          	sw	s7,268(sp)
80011120:	11812423          	sw	s8,264(sp)
80011124:	11912223          	sw	s9,260(sp)
80011128:	11a12023          	sw	s10,256(sp)
8001112c:	0fb12e23          	sw	s11,252(sp)
80011130:	00050993          	mv	s3,a0
80011134:	00058413          	mv	s0,a1
80011138:	00060a13          	mv	s4,a2
8001113c:	00068913          	mv	s2,a3
80011140:	00050863          	beqz	a0,80011150 <_vfiprintf_r+0x58>
80011144:	03852783          	lw	a5,56(a0)
80011148:	00079463          	bnez	a5,80011150 <_vfiprintf_r+0x58>
8001114c:	b95f90ef          	jal	ra,8000ace0 <__sinit>
80011150:	00c41783          	lh	a5,12(s0)
80011154:	01279713          	slli	a4,a5,0x12
80011158:	02074263          	bltz	a4,8001117c <_vfiprintf_r+0x84>
8001115c:	000026b7          	lui	a3,0x2
80011160:	06442703          	lw	a4,100(s0)
80011164:	00d7e7b3          	or	a5,a5,a3
80011168:	00f41623          	sh	a5,12(s0)
8001116c:	ffffe7b7          	lui	a5,0xffffe
80011170:	fff78793          	addi	a5,a5,-1 # ffffdfff <__stack+0x7ffc1533>
80011174:	00f777b3          	and	a5,a4,a5
80011178:	06f42223          	sw	a5,100(s0)
8001117c:	00c45783          	lhu	a5,12(s0)
80011180:	0087f793          	andi	a5,a5,8
80011184:	06078e63          	beqz	a5,80011200 <_vfiprintf_r+0x108>
80011188:	01042783          	lw	a5,16(s0)
8001118c:	06078a63          	beqz	a5,80011200 <_vfiprintf_r+0x108>
80011190:	00c45783          	lhu	a5,12(s0)
80011194:	00a00713          	li	a4,10
80011198:	01a7f793          	andi	a5,a5,26
8001119c:	06e79e63          	bne	a5,a4,80011218 <_vfiprintf_r+0x120>
800111a0:	00e41783          	lh	a5,14(s0)
800111a4:	0607ca63          	bltz	a5,80011218 <_vfiprintf_r+0x120>
800111a8:	00090693          	mv	a3,s2
800111ac:	000a0613          	mv	a2,s4
800111b0:	00040593          	mv	a1,s0
800111b4:	00098513          	mv	a0,s3
800111b8:	3e5000ef          	jal	ra,80011d9c <__sbprintf>
800111bc:	00050b93          	mv	s7,a0
800111c0:	12c12083          	lw	ra,300(sp)
800111c4:	12812403          	lw	s0,296(sp)
800111c8:	000b8513          	mv	a0,s7
800111cc:	12412483          	lw	s1,292(sp)
800111d0:	12012903          	lw	s2,288(sp)
800111d4:	11c12983          	lw	s3,284(sp)
800111d8:	11812a03          	lw	s4,280(sp)
800111dc:	11412a83          	lw	s5,276(sp)
800111e0:	11012b03          	lw	s6,272(sp)
800111e4:	10c12b83          	lw	s7,268(sp)
800111e8:	10812c03          	lw	s8,264(sp)
800111ec:	10412c83          	lw	s9,260(sp)
800111f0:	10012d03          	lw	s10,256(sp)
800111f4:	0fc12d83          	lw	s11,252(sp)
800111f8:	13010113          	addi	sp,sp,304
800111fc:	00008067          	ret
80011200:	00040593          	mv	a1,s0
80011204:	00098513          	mv	a0,s3
80011208:	dfcf90ef          	jal	ra,8000a804 <__swsetup_r>
8001120c:	f80502e3          	beqz	a0,80011190 <_vfiprintf_r+0x98>
80011210:	fff00b93          	li	s7,-1
80011214:	fadff06f          	j	800111c0 <_vfiprintf_r+0xc8>
80011218:	800207b7          	lui	a5,0x80020
8001121c:	79c78793          	addi	a5,a5,1948 # 8002079c <__stack+0xfffe3cd0>
80011220:	00f12e23          	sw	a5,28(sp)
80011224:	800217b7          	lui	a5,0x80021
80011228:	04c10b13          	addi	s6,sp,76
8001122c:	91878793          	addi	a5,a5,-1768 # 80020918 <__stack+0xfffe3e4c>
80011230:	05612023          	sw	s6,64(sp)
80011234:	04012423          	sw	zero,72(sp)
80011238:	04012223          	sw	zero,68(sp)
8001123c:	000b0713          	mv	a4,s6
80011240:	00012423          	sw	zero,8(sp)
80011244:	00012223          	sw	zero,4(sp)
80011248:	00012623          	sw	zero,12(sp)
8001124c:	00012a23          	sw	zero,20(sp)
80011250:	00000b93          	li	s7,0
80011254:	00f12823          	sw	a5,16(sp)
80011258:	000a0493          	mv	s1,s4
8001125c:	02500693          	li	a3,37
80011260:	0004c783          	lbu	a5,0(s1)
80011264:	00078463          	beqz	a5,8001126c <_vfiprintf_r+0x174>
80011268:	0ad79263          	bne	a5,a3,8001130c <_vfiprintf_r+0x214>
8001126c:	41448ab3          	sub	s5,s1,s4
80011270:	040a8663          	beqz	s5,800112bc <_vfiprintf_r+0x1c4>
80011274:	04812783          	lw	a5,72(sp)
80011278:	01472023          	sw	s4,0(a4)
8001127c:	01572223          	sw	s5,4(a4)
80011280:	015787b3          	add	a5,a5,s5
80011284:	04f12423          	sw	a5,72(sp)
80011288:	04412783          	lw	a5,68(sp)
8001128c:	00700693          	li	a3,7
80011290:	00870713          	addi	a4,a4,8
80011294:	00178793          	addi	a5,a5,1
80011298:	04f12223          	sw	a5,68(sp)
8001129c:	00f6de63          	ble	a5,a3,800112b8 <_vfiprintf_r+0x1c0>
800112a0:	04010613          	addi	a2,sp,64
800112a4:	00040593          	mv	a1,s0
800112a8:	00098513          	mv	a0,s3
800112ac:	d4dff0ef          	jal	ra,80010ff8 <__sprint_r>
800112b0:	260518e3          	bnez	a0,80011d20 <_vfiprintf_r+0xc28>
800112b4:	000b0713          	mv	a4,s6
800112b8:	015b8bb3          	add	s7,s7,s5
800112bc:	0004c783          	lbu	a5,0(s1)
800112c0:	2a0784e3          	beqz	a5,80011d68 <_vfiprintf_r+0xc70>
800112c4:	00148a13          	addi	s4,s1,1
800112c8:	02010da3          	sb	zero,59(sp)
800112cc:	fff00493          	li	s1,-1
800112d0:	00000a93          	li	s5,0
800112d4:	00000d13          	li	s10,0
800112d8:	00a00c13          	li	s8,10
800112dc:	02a00c93          	li	s9,42
800112e0:	05a00813          	li	a6,90
800112e4:	00900593          	li	a1,9
800112e8:	000a4603          	lbu	a2,0(s4)
800112ec:	001a0a13          	addi	s4,s4,1
800112f0:	fe060693          	addi	a3,a2,-32
800112f4:	0cd86ee3          	bltu	a6,a3,80011bd0 <_vfiprintf_r+0xad8>
800112f8:	01c12783          	lw	a5,28(sp)
800112fc:	00269693          	slli	a3,a3,0x2
80011300:	00f686b3          	add	a3,a3,a5
80011304:	0006a683          	lw	a3,0(a3) # 2000 <_HEAP_SIZE+0x1000>
80011308:	00068067          	jr	a3
8001130c:	00148493          	addi	s1,s1,1
80011310:	f51ff06f          	j	80011260 <_vfiprintf_r+0x168>
80011314:	800216b7          	lui	a3,0x80021
80011318:	d9068793          	addi	a5,a3,-624 # 80020d90 <__stack+0xfffe42c4>
8001131c:	00f12423          	sw	a5,8(sp)
80011320:	020d7693          	andi	a3,s10,32
80011324:	6c068063          	beqz	a3,800119e4 <_vfiprintf_r+0x8ec>
80011328:	00790913          	addi	s2,s2,7
8001132c:	ff897913          	andi	s2,s2,-8
80011330:	00092883          	lw	a7,0(s2)
80011334:	00492c83          	lw	s9,4(s2)
80011338:	00890c13          	addi	s8,s2,8
8001133c:	001d7693          	andi	a3,s10,1
80011340:	00068e63          	beqz	a3,8001135c <_vfiprintf_r+0x264>
80011344:	0198e6b3          	or	a3,a7,s9
80011348:	00068a63          	beqz	a3,8001135c <_vfiprintf_r+0x264>
8001134c:	03000693          	li	a3,48
80011350:	02d10e23          	sb	a3,60(sp)
80011354:	02c10ea3          	sb	a2,61(sp)
80011358:	002d6d13          	ori	s10,s10,2
8001135c:	bffd7d13          	andi	s10,s10,-1025
80011360:	31c0006f          	j	8001167c <_vfiprintf_r+0x584>
80011364:	00098513          	mv	a0,s3
80011368:	00e12023          	sw	a4,0(sp)
8001136c:	818fc0ef          	jal	ra,8000d384 <_localeconv_r>
80011370:	00452783          	lw	a5,4(a0)
80011374:	00078513          	mv	a0,a5
80011378:	00f12a23          	sw	a5,20(sp)
8001137c:	cddfd0ef          	jal	ra,8000f058 <strlen>
80011380:	00a12623          	sw	a0,12(sp)
80011384:	00098513          	mv	a0,s3
80011388:	ffdfb0ef          	jal	ra,8000d384 <_localeconv_r>
8001138c:	00852783          	lw	a5,8(a0)
80011390:	00012703          	lw	a4,0(sp)
80011394:	00f12223          	sw	a5,4(sp)
80011398:	00c12783          	lw	a5,12(sp)
8001139c:	f40782e3          	beqz	a5,800112e0 <_vfiprintf_r+0x1e8>
800113a0:	00412783          	lw	a5,4(sp)
800113a4:	f2078ee3          	beqz	a5,800112e0 <_vfiprintf_r+0x1e8>
800113a8:	0007c683          	lbu	a3,0(a5)
800113ac:	f2068ae3          	beqz	a3,800112e0 <_vfiprintf_r+0x1e8>
800113b0:	400d6d13          	ori	s10,s10,1024
800113b4:	f2dff06f          	j	800112e0 <_vfiprintf_r+0x1e8>
800113b8:	03b14683          	lbu	a3,59(sp)
800113bc:	f20692e3          	bnez	a3,800112e0 <_vfiprintf_r+0x1e8>
800113c0:	02000693          	li	a3,32
800113c4:	02d10da3          	sb	a3,59(sp)
800113c8:	f19ff06f          	j	800112e0 <_vfiprintf_r+0x1e8>
800113cc:	001d6d13          	ori	s10,s10,1
800113d0:	f11ff06f          	j	800112e0 <_vfiprintf_r+0x1e8>
800113d4:	00092a83          	lw	s5,0(s2)
800113d8:	00490913          	addi	s2,s2,4
800113dc:	f00ad2e3          	bgez	s5,800112e0 <_vfiprintf_r+0x1e8>
800113e0:	41500ab3          	neg	s5,s5
800113e4:	004d6d13          	ori	s10,s10,4
800113e8:	ef9ff06f          	j	800112e0 <_vfiprintf_r+0x1e8>
800113ec:	02b00693          	li	a3,43
800113f0:	fd5ff06f          	j	800113c4 <_vfiprintf_r+0x2cc>
800113f4:	000a4603          	lbu	a2,0(s4)
800113f8:	001a0693          	addi	a3,s4,1
800113fc:	05961063          	bne	a2,s9,8001143c <_vfiprintf_r+0x344>
80011400:	00092483          	lw	s1,0(s2)
80011404:	00490613          	addi	a2,s2,4
80011408:	0004d463          	bgez	s1,80011410 <_vfiprintf_r+0x318>
8001140c:	fff00493          	li	s1,-1
80011410:	00060913          	mv	s2,a2
80011414:	00068a13          	mv	s4,a3
80011418:	ec9ff06f          	j	800112e0 <_vfiprintf_r+0x1e8>
8001141c:	038484b3          	mul	s1,s1,s8
80011420:	00168693          	addi	a3,a3,1
80011424:	fff6c603          	lbu	a2,-1(a3)
80011428:	00a484b3          	add	s1,s1,a0
8001142c:	fd060513          	addi	a0,a2,-48
80011430:	fea5f6e3          	bleu	a0,a1,8001141c <_vfiprintf_r+0x324>
80011434:	00068a13          	mv	s4,a3
80011438:	eb9ff06f          	j	800112f0 <_vfiprintf_r+0x1f8>
8001143c:	00000493          	li	s1,0
80011440:	fedff06f          	j	8001142c <_vfiprintf_r+0x334>
80011444:	080d6d13          	ori	s10,s10,128
80011448:	e99ff06f          	j	800112e0 <_vfiprintf_r+0x1e8>
8001144c:	000a0693          	mv	a3,s4
80011450:	00000a93          	li	s5,0
80011454:	038a8ab3          	mul	s5,s5,s8
80011458:	fd060613          	addi	a2,a2,-48
8001145c:	00168693          	addi	a3,a3,1
80011460:	01560ab3          	add	s5,a2,s5
80011464:	fff6c603          	lbu	a2,-1(a3)
80011468:	fd060513          	addi	a0,a2,-48
8001146c:	fea5f4e3          	bleu	a0,a1,80011454 <_vfiprintf_r+0x35c>
80011470:	fc5ff06f          	j	80011434 <_vfiprintf_r+0x33c>
80011474:	000a4603          	lbu	a2,0(s4)
80011478:	06800693          	li	a3,104
8001147c:	00d61863          	bne	a2,a3,8001148c <_vfiprintf_r+0x394>
80011480:	001a0a13          	addi	s4,s4,1
80011484:	200d6d13          	ori	s10,s10,512
80011488:	e59ff06f          	j	800112e0 <_vfiprintf_r+0x1e8>
8001148c:	040d6d13          	ori	s10,s10,64
80011490:	e51ff06f          	j	800112e0 <_vfiprintf_r+0x1e8>
80011494:	000a4603          	lbu	a2,0(s4)
80011498:	06c00693          	li	a3,108
8001149c:	00d61863          	bne	a2,a3,800114ac <_vfiprintf_r+0x3b4>
800114a0:	001a0a13          	addi	s4,s4,1
800114a4:	020d6d13          	ori	s10,s10,32
800114a8:	e39ff06f          	j	800112e0 <_vfiprintf_r+0x1e8>
800114ac:	010d6d13          	ori	s10,s10,16
800114b0:	e31ff06f          	j	800112e0 <_vfiprintf_r+0x1e8>
800114b4:	00092683          	lw	a3,0(s2)
800114b8:	00490c13          	addi	s8,s2,4
800114bc:	02010da3          	sb	zero,59(sp)
800114c0:	08d10623          	sb	a3,140(sp)
800114c4:	00100493          	li	s1,1
800114c8:	00000c93          	li	s9,0
800114cc:	08c10913          	addi	s2,sp,140
800114d0:	1ec0006f          	j	800116bc <_vfiprintf_r+0x5c4>
800114d4:	010d6d13          	ori	s10,s10,16
800114d8:	020d7693          	andi	a3,s10,32
800114dc:	04068c63          	beqz	a3,80011534 <_vfiprintf_r+0x43c>
800114e0:	00790913          	addi	s2,s2,7
800114e4:	ff897913          	andi	s2,s2,-8
800114e8:	00092883          	lw	a7,0(s2)
800114ec:	00492c83          	lw	s9,4(s2)
800114f0:	00890c13          	addi	s8,s2,8
800114f4:	000cde63          	bgez	s9,80011510 <_vfiprintf_r+0x418>
800114f8:	411008b3          	neg	a7,a7
800114fc:	011036b3          	snez	a3,a7
80011500:	41900333          	neg	t1,s9
80011504:	40d30cb3          	sub	s9,t1,a3
80011508:	02d00693          	li	a3,45
8001150c:	02d10da3          	sb	a3,59(sp)
80011510:	fff00693          	li	a3,-1
80011514:	50d49463          	bne	s1,a3,80011a1c <_vfiprintf_r+0x924>
80011518:	560c9e63          	bnez	s9,80011a94 <_vfiprintf_r+0x99c>
8001151c:	00900693          	li	a3,9
80011520:	5716ea63          	bltu	a3,a7,80011a94 <_vfiprintf_r+0x99c>
80011524:	03088893          	addi	a7,a7,48
80011528:	0f1107a3          	sb	a7,239(sp)
8001152c:	0ef10913          	addi	s2,sp,239
80011530:	54c0006f          	j	80011a7c <_vfiprintf_r+0x984>
80011534:	010d7693          	andi	a3,s10,16
80011538:	00490c13          	addi	s8,s2,4
8001153c:	00068863          	beqz	a3,8001154c <_vfiprintf_r+0x454>
80011540:	00092883          	lw	a7,0(s2)
80011544:	41f8dc93          	srai	s9,a7,0x1f
80011548:	fadff06f          	j	800114f4 <_vfiprintf_r+0x3fc>
8001154c:	040d7693          	andi	a3,s10,64
80011550:	00092883          	lw	a7,0(s2)
80011554:	00068863          	beqz	a3,80011564 <_vfiprintf_r+0x46c>
80011558:	01089893          	slli	a7,a7,0x10
8001155c:	4108d893          	srai	a7,a7,0x10
80011560:	fe5ff06f          	j	80011544 <_vfiprintf_r+0x44c>
80011564:	200d7693          	andi	a3,s10,512
80011568:	fc068ee3          	beqz	a3,80011544 <_vfiprintf_r+0x44c>
8001156c:	01889893          	slli	a7,a7,0x18
80011570:	4188d893          	srai	a7,a7,0x18
80011574:	fd1ff06f          	j	80011544 <_vfiprintf_r+0x44c>
80011578:	020d7613          	andi	a2,s10,32
8001157c:	00092683          	lw	a3,0(s2)
80011580:	00490913          	addi	s2,s2,4
80011584:	00060a63          	beqz	a2,80011598 <_vfiprintf_r+0x4a0>
80011588:	41fbd793          	srai	a5,s7,0x1f
8001158c:	0176a023          	sw	s7,0(a3)
80011590:	00f6a223          	sw	a5,4(a3)
80011594:	cc5ff06f          	j	80011258 <_vfiprintf_r+0x160>
80011598:	010d7613          	andi	a2,s10,16
8001159c:	00060663          	beqz	a2,800115a8 <_vfiprintf_r+0x4b0>
800115a0:	0176a023          	sw	s7,0(a3)
800115a4:	cb5ff06f          	j	80011258 <_vfiprintf_r+0x160>
800115a8:	040d7613          	andi	a2,s10,64
800115ac:	00060663          	beqz	a2,800115b8 <_vfiprintf_r+0x4c0>
800115b0:	01769023          	sh	s7,0(a3)
800115b4:	ca5ff06f          	j	80011258 <_vfiprintf_r+0x160>
800115b8:	200d7793          	andi	a5,s10,512
800115bc:	fe0782e3          	beqz	a5,800115a0 <_vfiprintf_r+0x4a8>
800115c0:	01768023          	sb	s7,0(a3)
800115c4:	c95ff06f          	j	80011258 <_vfiprintf_r+0x160>
800115c8:	010d6d13          	ori	s10,s10,16
800115cc:	020d7693          	andi	a3,s10,32
800115d0:	04068663          	beqz	a3,8001161c <_vfiprintf_r+0x524>
800115d4:	00790913          	addi	s2,s2,7
800115d8:	ff897913          	andi	s2,s2,-8
800115dc:	00092883          	lw	a7,0(s2)
800115e0:	00492c83          	lw	s9,4(s2)
800115e4:	00890c13          	addi	s8,s2,8
800115e8:	bffd7d13          	andi	s10,s10,-1025
800115ec:	00000693          	li	a3,0
800115f0:	02010da3          	sb	zero,59(sp)
800115f4:	fff00613          	li	a2,-1
800115f8:	42c48863          	beq	s1,a2,80011a28 <_vfiprintf_r+0x930>
800115fc:	000d0613          	mv	a2,s10
80011600:	0198e5b3          	or	a1,a7,s9
80011604:	f7fd7d13          	andi	s10,s10,-129
80011608:	42059063          	bnez	a1,80011a28 <_vfiprintf_r+0x930>
8001160c:	5a048463          	beqz	s1,80011bb4 <_vfiprintf_r+0xabc>
80011610:	00100613          	li	a2,1
80011614:	40c69e63          	bne	a3,a2,80011a30 <_vfiprintf_r+0x938>
80011618:	f0dff06f          	j	80011524 <_vfiprintf_r+0x42c>
8001161c:	010d7693          	andi	a3,s10,16
80011620:	00490c13          	addi	s8,s2,4
80011624:	00068663          	beqz	a3,80011630 <_vfiprintf_r+0x538>
80011628:	00092883          	lw	a7,0(s2)
8001162c:	0100006f          	j	8001163c <_vfiprintf_r+0x544>
80011630:	040d7693          	andi	a3,s10,64
80011634:	00068863          	beqz	a3,80011644 <_vfiprintf_r+0x54c>
80011638:	00095883          	lhu	a7,0(s2)
8001163c:	00000c93          	li	s9,0
80011640:	fa9ff06f          	j	800115e8 <_vfiprintf_r+0x4f0>
80011644:	200d7693          	andi	a3,s10,512
80011648:	fe0680e3          	beqz	a3,80011628 <_vfiprintf_r+0x530>
8001164c:	00094883          	lbu	a7,0(s2)
80011650:	fedff06f          	j	8001163c <_vfiprintf_r+0x544>
80011654:	ffff86b7          	lui	a3,0xffff8
80011658:	8306c693          	xori	a3,a3,-2000
8001165c:	02d11e23          	sh	a3,60(sp)
80011660:	00092883          	lw	a7,0(s2)
80011664:	800216b7          	lui	a3,0x80021
80011668:	d7c68793          	addi	a5,a3,-644 # 80020d7c <__stack+0xfffe42b0>
8001166c:	00490c13          	addi	s8,s2,4
80011670:	00000c93          	li	s9,0
80011674:	002d6d13          	ori	s10,s10,2
80011678:	00f12423          	sw	a5,8(sp)
8001167c:	00200693          	li	a3,2
80011680:	f71ff06f          	j	800115f0 <_vfiprintf_r+0x4f8>
80011684:	02010da3          	sb	zero,59(sp)
80011688:	fff00693          	li	a3,-1
8001168c:	00e12023          	sw	a4,0(sp)
80011690:	00490c13          	addi	s8,s2,4
80011694:	00092903          	lw	s2,0(s2)
80011698:	2cd48463          	beq	s1,a3,80011960 <_vfiprintf_r+0x868>
8001169c:	00048613          	mv	a2,s1
800116a0:	00000593          	li	a1,0
800116a4:	00090513          	mv	a0,s2
800116a8:	e4cfc0ef          	jal	ra,8000dcf4 <memchr>
800116ac:	00000c93          	li	s9,0
800116b0:	00012703          	lw	a4,0(sp)
800116b4:	00050463          	beqz	a0,800116bc <_vfiprintf_r+0x5c4>
800116b8:	412504b3          	sub	s1,a0,s2
800116bc:	01912023          	sw	s9,0(sp)
800116c0:	009cd463          	ble	s1,s9,800116c8 <_vfiprintf_r+0x5d0>
800116c4:	00912023          	sw	s1,0(sp)
800116c8:	03b14683          	lbu	a3,59(sp)
800116cc:	00068863          	beqz	a3,800116dc <_vfiprintf_r+0x5e4>
800116d0:	00012783          	lw	a5,0(sp)
800116d4:	00178793          	addi	a5,a5,1
800116d8:	00f12023          	sw	a5,0(sp)
800116dc:	002d7d93          	andi	s11,s10,2
800116e0:	000d8863          	beqz	s11,800116f0 <_vfiprintf_r+0x5f8>
800116e4:	00012783          	lw	a5,0(sp)
800116e8:	00278793          	addi	a5,a5,2
800116ec:	00f12023          	sw	a5,0(sp)
800116f0:	084d7793          	andi	a5,s10,132
800116f4:	00f12c23          	sw	a5,24(sp)
800116f8:	06079663          	bnez	a5,80011764 <_vfiprintf_r+0x66c>
800116fc:	00012783          	lw	a5,0(sp)
80011700:	40fa86b3          	sub	a3,s5,a5
80011704:	06d05063          	blez	a3,80011764 <_vfiprintf_r+0x66c>
80011708:	800217b7          	lui	a5,0x80021
8001170c:	01000893          	li	a7,16
80011710:	90878813          	addi	a6,a5,-1784 # 80020908 <__stack+0xfffe3e3c>
80011714:	00700313          	li	t1,7
80011718:	04412603          	lw	a2,68(sp)
8001171c:	01072023          	sw	a6,0(a4)
80011720:	04812583          	lw	a1,72(sp)
80011724:	00160613          	addi	a2,a2,1
80011728:	00870513          	addi	a0,a4,8
8001172c:	4ad8cc63          	blt	a7,a3,80011be4 <_vfiprintf_r+0xaec>
80011730:	00d72223          	sw	a3,4(a4)
80011734:	00b686b3          	add	a3,a3,a1
80011738:	04d12423          	sw	a3,72(sp)
8001173c:	04c12223          	sw	a2,68(sp)
80011740:	00700693          	li	a3,7
80011744:	00050713          	mv	a4,a0
80011748:	00c6de63          	ble	a2,a3,80011764 <_vfiprintf_r+0x66c>
8001174c:	04010613          	addi	a2,sp,64
80011750:	00040593          	mv	a1,s0
80011754:	00098513          	mv	a0,s3
80011758:	8a1ff0ef          	jal	ra,80010ff8 <__sprint_r>
8001175c:	5c051263          	bnez	a0,80011d20 <_vfiprintf_r+0xc28>
80011760:	000b0713          	mv	a4,s6
80011764:	03b14683          	lbu	a3,59(sp)
80011768:	04068863          	beqz	a3,800117b8 <_vfiprintf_r+0x6c0>
8001176c:	03b10613          	addi	a2,sp,59
80011770:	00c72023          	sw	a2,0(a4)
80011774:	00100613          	li	a2,1
80011778:	04412683          	lw	a3,68(sp)
8001177c:	00c72223          	sw	a2,4(a4)
80011780:	04812603          	lw	a2,72(sp)
80011784:	00168693          	addi	a3,a3,1
80011788:	04d12223          	sw	a3,68(sp)
8001178c:	00160613          	addi	a2,a2,1
80011790:	04c12423          	sw	a2,72(sp)
80011794:	00700613          	li	a2,7
80011798:	00870713          	addi	a4,a4,8
8001179c:	00d65e63          	ble	a3,a2,800117b8 <_vfiprintf_r+0x6c0>
800117a0:	04010613          	addi	a2,sp,64
800117a4:	00040593          	mv	a1,s0
800117a8:	00098513          	mv	a0,s3
800117ac:	84dff0ef          	jal	ra,80010ff8 <__sprint_r>
800117b0:	56051863          	bnez	a0,80011d20 <_vfiprintf_r+0xc28>
800117b4:	000b0713          	mv	a4,s6
800117b8:	040d8863          	beqz	s11,80011808 <_vfiprintf_r+0x710>
800117bc:	03c10613          	addi	a2,sp,60
800117c0:	00c72023          	sw	a2,0(a4)
800117c4:	00200613          	li	a2,2
800117c8:	04412683          	lw	a3,68(sp)
800117cc:	00c72223          	sw	a2,4(a4)
800117d0:	04812603          	lw	a2,72(sp)
800117d4:	00168693          	addi	a3,a3,1
800117d8:	04d12223          	sw	a3,68(sp)
800117dc:	00260613          	addi	a2,a2,2
800117e0:	04c12423          	sw	a2,72(sp)
800117e4:	00700613          	li	a2,7
800117e8:	00870713          	addi	a4,a4,8
800117ec:	00d65e63          	ble	a3,a2,80011808 <_vfiprintf_r+0x710>
800117f0:	04010613          	addi	a2,sp,64
800117f4:	00040593          	mv	a1,s0
800117f8:	00098513          	mv	a0,s3
800117fc:	ffcff0ef          	jal	ra,80010ff8 <__sprint_r>
80011800:	52051063          	bnez	a0,80011d20 <_vfiprintf_r+0xc28>
80011804:	000b0713          	mv	a4,s6
80011808:	01812783          	lw	a5,24(sp)
8001180c:	08000693          	li	a3,128
80011810:	06d79463          	bne	a5,a3,80011878 <_vfiprintf_r+0x780>
80011814:	00012783          	lw	a5,0(sp)
80011818:	40fa8db3          	sub	s11,s5,a5
8001181c:	05b05e63          	blez	s11,80011878 <_vfiprintf_r+0x780>
80011820:	01000813          	li	a6,16
80011824:	00700893          	li	a7,7
80011828:	01012783          	lw	a5,16(sp)
8001182c:	04412683          	lw	a3,68(sp)
80011830:	04812603          	lw	a2,72(sp)
80011834:	00f72023          	sw	a5,0(a4)
80011838:	00168693          	addi	a3,a3,1
8001183c:	00870593          	addi	a1,a4,8
80011840:	3fb84e63          	blt	a6,s11,80011c3c <_vfiprintf_r+0xb44>
80011844:	01b72223          	sw	s11,4(a4)
80011848:	00cd8db3          	add	s11,s11,a2
8001184c:	05b12423          	sw	s11,72(sp)
80011850:	04d12223          	sw	a3,68(sp)
80011854:	00700613          	li	a2,7
80011858:	00058713          	mv	a4,a1
8001185c:	00d65e63          	ble	a3,a2,80011878 <_vfiprintf_r+0x780>
80011860:	04010613          	addi	a2,sp,64
80011864:	00040593          	mv	a1,s0
80011868:	00098513          	mv	a0,s3
8001186c:	f8cff0ef          	jal	ra,80010ff8 <__sprint_r>
80011870:	4a051863          	bnez	a0,80011d20 <_vfiprintf_r+0xc28>
80011874:	000b0713          	mv	a4,s6
80011878:	409c8cb3          	sub	s9,s9,s1
8001187c:	05905e63          	blez	s9,800118d8 <_vfiprintf_r+0x7e0>
80011880:	01000d93          	li	s11,16
80011884:	00700813          	li	a6,7
80011888:	01012783          	lw	a5,16(sp)
8001188c:	04412683          	lw	a3,68(sp)
80011890:	04812603          	lw	a2,72(sp)
80011894:	00f72023          	sw	a5,0(a4)
80011898:	00168693          	addi	a3,a3,1
8001189c:	00870593          	addi	a1,a4,8
800118a0:	3f9dc263          	blt	s11,s9,80011c84 <_vfiprintf_r+0xb8c>
800118a4:	01972223          	sw	s9,4(a4)
800118a8:	00cc8cb3          	add	s9,s9,a2
800118ac:	05912423          	sw	s9,72(sp)
800118b0:	04d12223          	sw	a3,68(sp)
800118b4:	00700613          	li	a2,7
800118b8:	00058713          	mv	a4,a1
800118bc:	00d65e63          	ble	a3,a2,800118d8 <_vfiprintf_r+0x7e0>
800118c0:	04010613          	addi	a2,sp,64
800118c4:	00040593          	mv	a1,s0
800118c8:	00098513          	mv	a0,s3
800118cc:	f2cff0ef          	jal	ra,80010ff8 <__sprint_r>
800118d0:	44051863          	bnez	a0,80011d20 <_vfiprintf_r+0xc28>
800118d4:	000b0713          	mv	a4,s6
800118d8:	04812683          	lw	a3,72(sp)
800118dc:	00972223          	sw	s1,4(a4)
800118e0:	01272023          	sw	s2,0(a4)
800118e4:	009684b3          	add	s1,a3,s1
800118e8:	04412683          	lw	a3,68(sp)
800118ec:	04912423          	sw	s1,72(sp)
800118f0:	00700613          	li	a2,7
800118f4:	00168693          	addi	a3,a3,1
800118f8:	04d12223          	sw	a3,68(sp)
800118fc:	00870713          	addi	a4,a4,8
80011900:	00d65e63          	ble	a3,a2,8001191c <_vfiprintf_r+0x824>
80011904:	04010613          	addi	a2,sp,64
80011908:	00040593          	mv	a1,s0
8001190c:	00098513          	mv	a0,s3
80011910:	ee8ff0ef          	jal	ra,80010ff8 <__sprint_r>
80011914:	40051663          	bnez	a0,80011d20 <_vfiprintf_r+0xc28>
80011918:	000b0713          	mv	a4,s6
8001191c:	004d7793          	andi	a5,s10,4
80011920:	3a079263          	bnez	a5,80011cc4 <_vfiprintf_r+0xbcc>
80011924:	00012783          	lw	a5,0(sp)
80011928:	00fad463          	ble	a5,s5,80011930 <_vfiprintf_r+0x838>
8001192c:	00078a93          	mv	s5,a5
80011930:	04812783          	lw	a5,72(sp)
80011934:	015b8bb3          	add	s7,s7,s5
80011938:	00078c63          	beqz	a5,80011950 <_vfiprintf_r+0x858>
8001193c:	04010613          	addi	a2,sp,64
80011940:	00040593          	mv	a1,s0
80011944:	00098513          	mv	a0,s3
80011948:	eb0ff0ef          	jal	ra,80010ff8 <__sprint_r>
8001194c:	3c051a63          	bnez	a0,80011d20 <_vfiprintf_r+0xc28>
80011950:	04012223          	sw	zero,68(sp)
80011954:	000c0913          	mv	s2,s8
80011958:	000b0713          	mv	a4,s6
8001195c:	8fdff06f          	j	80011258 <_vfiprintf_r+0x160>
80011960:	00090513          	mv	a0,s2
80011964:	ef4fd0ef          	jal	ra,8000f058 <strlen>
80011968:	00050493          	mv	s1,a0
8001196c:	00000c93          	li	s9,0
80011970:	00012703          	lw	a4,0(sp)
80011974:	d49ff06f          	j	800116bc <_vfiprintf_r+0x5c4>
80011978:	010d6d13          	ori	s10,s10,16
8001197c:	020d7693          	andi	a3,s10,32
80011980:	02068063          	beqz	a3,800119a0 <_vfiprintf_r+0x8a8>
80011984:	00790913          	addi	s2,s2,7
80011988:	ff897913          	andi	s2,s2,-8
8001198c:	00092883          	lw	a7,0(s2)
80011990:	00492c83          	lw	s9,4(s2)
80011994:	00890c13          	addi	s8,s2,8
80011998:	00100693          	li	a3,1
8001199c:	c55ff06f          	j	800115f0 <_vfiprintf_r+0x4f8>
800119a0:	010d7693          	andi	a3,s10,16
800119a4:	00490c13          	addi	s8,s2,4
800119a8:	00068663          	beqz	a3,800119b4 <_vfiprintf_r+0x8bc>
800119ac:	00092883          	lw	a7,0(s2)
800119b0:	0100006f          	j	800119c0 <_vfiprintf_r+0x8c8>
800119b4:	040d7693          	andi	a3,s10,64
800119b8:	00068863          	beqz	a3,800119c8 <_vfiprintf_r+0x8d0>
800119bc:	00095883          	lhu	a7,0(s2)
800119c0:	00000c93          	li	s9,0
800119c4:	fd5ff06f          	j	80011998 <_vfiprintf_r+0x8a0>
800119c8:	200d7693          	andi	a3,s10,512
800119cc:	fe0680e3          	beqz	a3,800119ac <_vfiprintf_r+0x8b4>
800119d0:	00094883          	lbu	a7,0(s2)
800119d4:	fedff06f          	j	800119c0 <_vfiprintf_r+0x8c8>
800119d8:	800216b7          	lui	a3,0x80021
800119dc:	d7c68793          	addi	a5,a3,-644 # 80020d7c <__stack+0xfffe42b0>
800119e0:	93dff06f          	j	8001131c <_vfiprintf_r+0x224>
800119e4:	010d7693          	andi	a3,s10,16
800119e8:	00490c13          	addi	s8,s2,4
800119ec:	00068663          	beqz	a3,800119f8 <_vfiprintf_r+0x900>
800119f0:	00092883          	lw	a7,0(s2)
800119f4:	0100006f          	j	80011a04 <_vfiprintf_r+0x90c>
800119f8:	040d7693          	andi	a3,s10,64
800119fc:	00068863          	beqz	a3,80011a0c <_vfiprintf_r+0x914>
80011a00:	00095883          	lhu	a7,0(s2)
80011a04:	00000c93          	li	s9,0
80011a08:	935ff06f          	j	8001133c <_vfiprintf_r+0x244>
80011a0c:	200d7693          	andi	a3,s10,512
80011a10:	fe0680e3          	beqz	a3,800119f0 <_vfiprintf_r+0x8f8>
80011a14:	00094883          	lbu	a7,0(s2)
80011a18:	fedff06f          	j	80011a04 <_vfiprintf_r+0x90c>
80011a1c:	000d0613          	mv	a2,s10
80011a20:	00100693          	li	a3,1
80011a24:	bddff06f          	j	80011600 <_vfiprintf_r+0x508>
80011a28:	00100613          	li	a2,1
80011a2c:	aec686e3          	beq	a3,a2,80011518 <_vfiprintf_r+0x420>
80011a30:	00200613          	li	a2,2
80011a34:	14c68463          	beq	a3,a2,80011b7c <_vfiprintf_r+0xa84>
80011a38:	0f010693          	addi	a3,sp,240
80011a3c:	01dc9593          	slli	a1,s9,0x1d
80011a40:	0078f613          	andi	a2,a7,7
80011a44:	0038d893          	srli	a7,a7,0x3
80011a48:	03060613          	addi	a2,a2,48
80011a4c:	0115e8b3          	or	a7,a1,a7
80011a50:	003cdc93          	srli	s9,s9,0x3
80011a54:	fec68fa3          	sb	a2,-1(a3)
80011a58:	0198e5b3          	or	a1,a7,s9
80011a5c:	fff68913          	addi	s2,a3,-1
80011a60:	02059663          	bnez	a1,80011a8c <_vfiprintf_r+0x994>
80011a64:	001d7593          	andi	a1,s10,1
80011a68:	00058a63          	beqz	a1,80011a7c <_vfiprintf_r+0x984>
80011a6c:	03000593          	li	a1,48
80011a70:	00b60663          	beq	a2,a1,80011a7c <_vfiprintf_r+0x984>
80011a74:	feb90fa3          	sb	a1,-1(s2)
80011a78:	ffe68913          	addi	s2,a3,-2
80011a7c:	0f010793          	addi	a5,sp,240
80011a80:	00048c93          	mv	s9,s1
80011a84:	412784b3          	sub	s1,a5,s2
80011a88:	c35ff06f          	j	800116bc <_vfiprintf_r+0x5c4>
80011a8c:	00090693          	mv	a3,s2
80011a90:	fadff06f          	j	80011a3c <_vfiprintf_r+0x944>
80011a94:	400d7793          	andi	a5,s10,1024
80011a98:	00000d93          	li	s11,0
80011a9c:	0f010e13          	addi	t3,sp,240
80011aa0:	00f12023          	sw	a5,0(sp)
80011aa4:	00088513          	mv	a0,a7
80011aa8:	00a00613          	li	a2,10
80011aac:	00000693          	li	a3,0
80011ab0:	000c8593          	mv	a1,s9
80011ab4:	02e12223          	sw	a4,36(sp)
80011ab8:	fffe0913          	addi	s2,t3,-1
80011abc:	03c12023          	sw	t3,32(sp)
80011ac0:	01112c23          	sw	a7,24(sp)
80011ac4:	059020ef          	jal	ra,8001431c <__umoddi3>
80011ac8:	02012e03          	lw	t3,32(sp)
80011acc:	00012783          	lw	a5,0(sp)
80011ad0:	03050513          	addi	a0,a0,48
80011ad4:	feae0fa3          	sb	a0,-1(t3)
80011ad8:	001d8d93          	addi	s11,s11,1
80011adc:	01812883          	lw	a7,24(sp)
80011ae0:	02412703          	lw	a4,36(sp)
80011ae4:	06078263          	beqz	a5,80011b48 <_vfiprintf_r+0xa50>
80011ae8:	00412783          	lw	a5,4(sp)
80011aec:	0007c683          	lbu	a3,0(a5)
80011af0:	05b69c63          	bne	a3,s11,80011b48 <_vfiprintf_r+0xa50>
80011af4:	0ff00793          	li	a5,255
80011af8:	04fd8863          	beq	s11,a5,80011b48 <_vfiprintf_r+0xa50>
80011afc:	000c9663          	bnez	s9,80011b08 <_vfiprintf_r+0xa10>
80011b00:	00900793          	li	a5,9
80011b04:	0517f263          	bleu	a7,a5,80011b48 <_vfiprintf_r+0xa50>
80011b08:	00c12783          	lw	a5,12(sp)
80011b0c:	01412583          	lw	a1,20(sp)
80011b10:	03112023          	sw	a7,32(sp)
80011b14:	40f90933          	sub	s2,s2,a5
80011b18:	00078613          	mv	a2,a5
80011b1c:	00090513          	mv	a0,s2
80011b20:	00e12c23          	sw	a4,24(sp)
80011b24:	d50fd0ef          	jal	ra,8000f074 <strncpy>
80011b28:	00412783          	lw	a5,4(sp)
80011b2c:	00000d93          	li	s11,0
80011b30:	01812703          	lw	a4,24(sp)
80011b34:	0017c683          	lbu	a3,1(a5)
80011b38:	02012883          	lw	a7,32(sp)
80011b3c:	00068663          	beqz	a3,80011b48 <_vfiprintf_r+0xa50>
80011b40:	00178793          	addi	a5,a5,1
80011b44:	00f12223          	sw	a5,4(sp)
80011b48:	00088513          	mv	a0,a7
80011b4c:	000c8593          	mv	a1,s9
80011b50:	00a00613          	li	a2,10
80011b54:	00000693          	li	a3,0
80011b58:	00e12c23          	sw	a4,24(sp)
80011b5c:	38c020ef          	jal	ra,80013ee8 <__udivdi3>
80011b60:	00058c93          	mv	s9,a1
80011b64:	00a5e5b3          	or	a1,a1,a0
80011b68:	00050893          	mv	a7,a0
80011b6c:	01812703          	lw	a4,24(sp)
80011b70:	f00586e3          	beqz	a1,80011a7c <_vfiprintf_r+0x984>
80011b74:	00090e13          	mv	t3,s2
80011b78:	f2dff06f          	j	80011aa4 <_vfiprintf_r+0x9ac>
80011b7c:	0f010913          	addi	s2,sp,240
80011b80:	00812783          	lw	a5,8(sp)
80011b84:	00f8f693          	andi	a3,a7,15
80011b88:	fff90913          	addi	s2,s2,-1
80011b8c:	00d786b3          	add	a3,a5,a3
80011b90:	0006c683          	lbu	a3,0(a3)
80011b94:	0048d893          	srli	a7,a7,0x4
80011b98:	00d90023          	sb	a3,0(s2)
80011b9c:	01cc9693          	slli	a3,s9,0x1c
80011ba0:	0116e8b3          	or	a7,a3,a7
80011ba4:	004cdc93          	srli	s9,s9,0x4
80011ba8:	0198e6b3          	or	a3,a7,s9
80011bac:	fc069ae3          	bnez	a3,80011b80 <_vfiprintf_r+0xa88>
80011bb0:	ecdff06f          	j	80011a7c <_vfiprintf_r+0x984>
80011bb4:	0f010913          	addi	s2,sp,240
80011bb8:	ec0692e3          	bnez	a3,80011a7c <_vfiprintf_r+0x984>
80011bbc:	00167613          	andi	a2,a2,1
80011bc0:	ea060ee3          	beqz	a2,80011a7c <_vfiprintf_r+0x984>
80011bc4:	03000693          	li	a3,48
80011bc8:	0ed107a3          	sb	a3,239(sp)
80011bcc:	961ff06f          	j	8001152c <_vfiprintf_r+0x434>
80011bd0:	18060c63          	beqz	a2,80011d68 <_vfiprintf_r+0xc70>
80011bd4:	08c10623          	sb	a2,140(sp)
80011bd8:	02010da3          	sb	zero,59(sp)
80011bdc:	00090c13          	mv	s8,s2
80011be0:	8e5ff06f          	j	800114c4 <_vfiprintf_r+0x3cc>
80011be4:	01058593          	addi	a1,a1,16
80011be8:	01172223          	sw	a7,4(a4)
80011bec:	04b12423          	sw	a1,72(sp)
80011bf0:	04c12223          	sw	a2,68(sp)
80011bf4:	02c35e63          	ble	a2,t1,80011c30 <_vfiprintf_r+0xb38>
80011bf8:	04010613          	addi	a2,sp,64
80011bfc:	00040593          	mv	a1,s0
80011c00:	00098513          	mv	a0,s3
80011c04:	02612623          	sw	t1,44(sp)
80011c08:	03012423          	sw	a6,40(sp)
80011c0c:	03112223          	sw	a7,36(sp)
80011c10:	02d12023          	sw	a3,32(sp)
80011c14:	be4ff0ef          	jal	ra,80010ff8 <__sprint_r>
80011c18:	10051463          	bnez	a0,80011d20 <_vfiprintf_r+0xc28>
80011c1c:	02c12303          	lw	t1,44(sp)
80011c20:	02812803          	lw	a6,40(sp)
80011c24:	02412883          	lw	a7,36(sp)
80011c28:	02012683          	lw	a3,32(sp)
80011c2c:	000b0513          	mv	a0,s6
80011c30:	ff068693          	addi	a3,a3,-16
80011c34:	00050713          	mv	a4,a0
80011c38:	ae1ff06f          	j	80011718 <_vfiprintf_r+0x620>
80011c3c:	01060613          	addi	a2,a2,16
80011c40:	01072223          	sw	a6,4(a4)
80011c44:	04c12423          	sw	a2,72(sp)
80011c48:	04d12223          	sw	a3,68(sp)
80011c4c:	02d8d663          	ble	a3,a7,80011c78 <_vfiprintf_r+0xb80>
80011c50:	04010613          	addi	a2,sp,64
80011c54:	00040593          	mv	a1,s0
80011c58:	00098513          	mv	a0,s3
80011c5c:	03112023          	sw	a7,32(sp)
80011c60:	01012c23          	sw	a6,24(sp)
80011c64:	b94ff0ef          	jal	ra,80010ff8 <__sprint_r>
80011c68:	0a051c63          	bnez	a0,80011d20 <_vfiprintf_r+0xc28>
80011c6c:	02012883          	lw	a7,32(sp)
80011c70:	01812803          	lw	a6,24(sp)
80011c74:	000b0593          	mv	a1,s6
80011c78:	ff0d8d93          	addi	s11,s11,-16
80011c7c:	00058713          	mv	a4,a1
80011c80:	ba9ff06f          	j	80011828 <_vfiprintf_r+0x730>
80011c84:	01060613          	addi	a2,a2,16
80011c88:	01b72223          	sw	s11,4(a4)
80011c8c:	04c12423          	sw	a2,72(sp)
80011c90:	04d12223          	sw	a3,68(sp)
80011c94:	02d85263          	ble	a3,a6,80011cb8 <_vfiprintf_r+0xbc0>
80011c98:	04010613          	addi	a2,sp,64
80011c9c:	00040593          	mv	a1,s0
80011ca0:	00098513          	mv	a0,s3
80011ca4:	01012c23          	sw	a6,24(sp)
80011ca8:	b50ff0ef          	jal	ra,80010ff8 <__sprint_r>
80011cac:	06051a63          	bnez	a0,80011d20 <_vfiprintf_r+0xc28>
80011cb0:	01812803          	lw	a6,24(sp)
80011cb4:	000b0593          	mv	a1,s6
80011cb8:	ff0c8c93          	addi	s9,s9,-16
80011cbc:	00058713          	mv	a4,a1
80011cc0:	bc9ff06f          	j	80011888 <_vfiprintf_r+0x790>
80011cc4:	00012783          	lw	a5,0(sp)
80011cc8:	40fa84b3          	sub	s1,s5,a5
80011ccc:	c4905ce3          	blez	s1,80011924 <_vfiprintf_r+0x82c>
80011cd0:	800217b7          	lui	a5,0x80021
80011cd4:	01000c93          	li	s9,16
80011cd8:	90878913          	addi	s2,a5,-1784 # 80020908 <__stack+0xfffe3e3c>
80011cdc:	00700d93          	li	s11,7
80011ce0:	04412783          	lw	a5,68(sp)
80011ce4:	01272023          	sw	s2,0(a4)
80011ce8:	04812683          	lw	a3,72(sp)
80011cec:	00178793          	addi	a5,a5,1
80011cf0:	049cc063          	blt	s9,s1,80011d30 <_vfiprintf_r+0xc38>
80011cf4:	00972223          	sw	s1,4(a4)
80011cf8:	00d484b3          	add	s1,s1,a3
80011cfc:	04912423          	sw	s1,72(sp)
80011d00:	04f12223          	sw	a5,68(sp)
80011d04:	00700713          	li	a4,7
80011d08:	c0f75ee3          	ble	a5,a4,80011924 <_vfiprintf_r+0x82c>
80011d0c:	04010613          	addi	a2,sp,64
80011d10:	00040593          	mv	a1,s0
80011d14:	00098513          	mv	a0,s3
80011d18:	ae0ff0ef          	jal	ra,80010ff8 <__sprint_r>
80011d1c:	c00504e3          	beqz	a0,80011924 <_vfiprintf_r+0x82c>
80011d20:	00c45783          	lhu	a5,12(s0)
80011d24:	0407f793          	andi	a5,a5,64
80011d28:	c8078c63          	beqz	a5,800111c0 <_vfiprintf_r+0xc8>
80011d2c:	ce4ff06f          	j	80011210 <_vfiprintf_r+0x118>
80011d30:	01068693          	addi	a3,a3,16
80011d34:	01972223          	sw	s9,4(a4)
80011d38:	04d12423          	sw	a3,72(sp)
80011d3c:	04f12223          	sw	a5,68(sp)
80011d40:	00870713          	addi	a4,a4,8
80011d44:	00fdde63          	ble	a5,s11,80011d60 <_vfiprintf_r+0xc68>
80011d48:	04010613          	addi	a2,sp,64
80011d4c:	00040593          	mv	a1,s0
80011d50:	00098513          	mv	a0,s3
80011d54:	aa4ff0ef          	jal	ra,80010ff8 <__sprint_r>
80011d58:	fc0514e3          	bnez	a0,80011d20 <_vfiprintf_r+0xc28>
80011d5c:	000b0713          	mv	a4,s6
80011d60:	ff048493          	addi	s1,s1,-16
80011d64:	f7dff06f          	j	80011ce0 <_vfiprintf_r+0xbe8>
80011d68:	04812783          	lw	a5,72(sp)
80011d6c:	fa078ae3          	beqz	a5,80011d20 <_vfiprintf_r+0xc28>
80011d70:	04010613          	addi	a2,sp,64
80011d74:	00040593          	mv	a1,s0
80011d78:	00098513          	mv	a0,s3
80011d7c:	a7cff0ef          	jal	ra,80010ff8 <__sprint_r>
80011d80:	fa1ff06f          	j	80011d20 <_vfiprintf_r+0xc28>

80011d84 <vfiprintf>:
80011d84:	800217b7          	lui	a5,0x80021
80011d88:	00060693          	mv	a3,a2
80011d8c:	00058613          	mv	a2,a1
80011d90:	00050593          	mv	a1,a0
80011d94:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
80011d98:	b60ff06f          	j	800110f8 <_vfiprintf_r>

80011d9c <__sbprintf>:
80011d9c:	00c5d783          	lhu	a5,12(a1)
80011da0:	b8010113          	addi	sp,sp,-1152
80011da4:	46812c23          	sw	s0,1144(sp)
80011da8:	ffd7f793          	andi	a5,a5,-3
80011dac:	00f11a23          	sh	a5,20(sp)
80011db0:	0645a783          	lw	a5,100(a1)
80011db4:	00058413          	mv	s0,a1
80011db8:	46912a23          	sw	s1,1140(sp)
80011dbc:	06f12623          	sw	a5,108(sp)
80011dc0:	00e5d783          	lhu	a5,14(a1)
80011dc4:	47212823          	sw	s2,1136(sp)
80011dc8:	46112e23          	sw	ra,1148(sp)
80011dcc:	00f11b23          	sh	a5,22(sp)
80011dd0:	01c5a783          	lw	a5,28(a1)
80011dd4:	00050913          	mv	s2,a0
80011dd8:	02012023          	sw	zero,32(sp)
80011ddc:	02f12223          	sw	a5,36(sp)
80011de0:	0245a783          	lw	a5,36(a1)
80011de4:	00810593          	addi	a1,sp,8
80011de8:	02f12623          	sw	a5,44(sp)
80011dec:	07010793          	addi	a5,sp,112
80011df0:	00f12423          	sw	a5,8(sp)
80011df4:	00f12c23          	sw	a5,24(sp)
80011df8:	40000793          	li	a5,1024
80011dfc:	00f12823          	sw	a5,16(sp)
80011e00:	00f12e23          	sw	a5,28(sp)
80011e04:	af4ff0ef          	jal	ra,800110f8 <_vfiprintf_r>
80011e08:	00050493          	mv	s1,a0
80011e0c:	00054c63          	bltz	a0,80011e24 <__sbprintf+0x88>
80011e10:	00810593          	addi	a1,sp,8
80011e14:	00090513          	mv	a0,s2
80011e18:	d2df80ef          	jal	ra,8000ab44 <_fflush_r>
80011e1c:	00050463          	beqz	a0,80011e24 <__sbprintf+0x88>
80011e20:	fff00493          	li	s1,-1
80011e24:	01415783          	lhu	a5,20(sp)
80011e28:	0407f793          	andi	a5,a5,64
80011e2c:	00078863          	beqz	a5,80011e3c <__sbprintf+0xa0>
80011e30:	00c45783          	lhu	a5,12(s0)
80011e34:	0407e793          	ori	a5,a5,64
80011e38:	00f41623          	sh	a5,12(s0)
80011e3c:	47c12083          	lw	ra,1148(sp)
80011e40:	47812403          	lw	s0,1144(sp)
80011e44:	00048513          	mv	a0,s1
80011e48:	47012903          	lw	s2,1136(sp)
80011e4c:	47412483          	lw	s1,1140(sp)
80011e50:	48010113          	addi	sp,sp,1152
80011e54:	00008067          	ret

80011e58 <_wctomb_r>:
80011e58:	800217b7          	lui	a5,0x80021
80011e5c:	e647a783          	lw	a5,-412(a5) # 80020e64 <__stack+0xfffe4398>
80011e60:	0347a783          	lw	a5,52(a5)
80011e64:	00079663          	bnez	a5,80011e70 <_wctomb_r+0x18>
80011e68:	800217b7          	lui	a5,0x80021
80011e6c:	29878793          	addi	a5,a5,664 # 80021298 <__stack+0xfffe47cc>
80011e70:	0e07a303          	lw	t1,224(a5)
80011e74:	00030067          	jr	t1

80011e78 <__ascii_wctomb>:
80011e78:	02058463          	beqz	a1,80011ea0 <__ascii_wctomb+0x28>
80011e7c:	0ff00793          	li	a5,255
80011e80:	00c7fa63          	bleu	a2,a5,80011e94 <__ascii_wctomb+0x1c>
80011e84:	08a00793          	li	a5,138
80011e88:	00f52023          	sw	a5,0(a0)
80011e8c:	fff00513          	li	a0,-1
80011e90:	00008067          	ret
80011e94:	00c58023          	sb	a2,0(a1)
80011e98:	00100513          	li	a0,1
80011e9c:	00008067          	ret
80011ea0:	00000513          	li	a0,0
80011ea4:	00008067          	ret

80011ea8 <_write_r>:
80011ea8:	ff010113          	addi	sp,sp,-16
80011eac:	00812423          	sw	s0,8(sp)
80011eb0:	00912223          	sw	s1,4(sp)
80011eb4:	8003b437          	lui	s0,0x8003b
80011eb8:	00050493          	mv	s1,a0
80011ebc:	00058513          	mv	a0,a1
80011ec0:	00060593          	mv	a1,a2
80011ec4:	00068613          	mv	a2,a3
80011ec8:	00112623          	sw	ra,12(sp)
80011ecc:	ac042423          	sw	zero,-1336(s0) # 8003aac8 <__stack+0xffffdffc>
80011ed0:	d31f40ef          	jal	ra,80006c00 <_write>
80011ed4:	fff00793          	li	a5,-1
80011ed8:	00f51863          	bne	a0,a5,80011ee8 <_write_r+0x40>
80011edc:	ac842783          	lw	a5,-1336(s0)
80011ee0:	00078463          	beqz	a5,80011ee8 <_write_r+0x40>
80011ee4:	00f4a023          	sw	a5,0(s1)
80011ee8:	00c12083          	lw	ra,12(sp)
80011eec:	00812403          	lw	s0,8(sp)
80011ef0:	00412483          	lw	s1,4(sp)
80011ef4:	01010113          	addi	sp,sp,16
80011ef8:	00008067          	ret

80011efc <_calloc_r>:
80011efc:	02c585b3          	mul	a1,a1,a2
80011f00:	ff010113          	addi	sp,sp,-16
80011f04:	00812423          	sw	s0,8(sp)
80011f08:	00112623          	sw	ra,12(sp)
80011f0c:	f14fb0ef          	jal	ra,8000d620 <_malloc_r>
80011f10:	00050413          	mv	s0,a0
80011f14:	04050263          	beqz	a0,80011f58 <_calloc_r+0x5c>
80011f18:	ffc52603          	lw	a2,-4(a0)
80011f1c:	02400713          	li	a4,36
80011f20:	ffc67613          	andi	a2,a2,-4
80011f24:	ffc60613          	addi	a2,a2,-4
80011f28:	06c76263          	bltu	a4,a2,80011f8c <_calloc_r+0x90>
80011f2c:	01300693          	li	a3,19
80011f30:	00050793          	mv	a5,a0
80011f34:	00c6fc63          	bleu	a2,a3,80011f4c <_calloc_r+0x50>
80011f38:	00052023          	sw	zero,0(a0)
80011f3c:	00052223          	sw	zero,4(a0)
80011f40:	01b00793          	li	a5,27
80011f44:	02c7e463          	bltu	a5,a2,80011f6c <_calloc_r+0x70>
80011f48:	00850793          	addi	a5,a0,8
80011f4c:	0007a023          	sw	zero,0(a5)
80011f50:	0007a223          	sw	zero,4(a5)
80011f54:	0007a423          	sw	zero,8(a5)
80011f58:	00040513          	mv	a0,s0
80011f5c:	00c12083          	lw	ra,12(sp)
80011f60:	00812403          	lw	s0,8(sp)
80011f64:	01010113          	addi	sp,sp,16
80011f68:	00008067          	ret
80011f6c:	00052423          	sw	zero,8(a0)
80011f70:	00052623          	sw	zero,12(a0)
80011f74:	01050793          	addi	a5,a0,16
80011f78:	fce61ae3          	bne	a2,a4,80011f4c <_calloc_r+0x50>
80011f7c:	00052823          	sw	zero,16(a0)
80011f80:	01850793          	addi	a5,a0,24
80011f84:	00052a23          	sw	zero,20(a0)
80011f88:	fc5ff06f          	j	80011f4c <_calloc_r+0x50>
80011f8c:	00000593          	li	a1,0
80011f90:	e9cf60ef          	jal	ra,8000862c <memset>
80011f94:	fc5ff06f          	j	80011f58 <_calloc_r+0x5c>

80011f98 <_close_r>:
80011f98:	ff010113          	addi	sp,sp,-16
80011f9c:	00812423          	sw	s0,8(sp)
80011fa0:	00912223          	sw	s1,4(sp)
80011fa4:	8003b437          	lui	s0,0x8003b
80011fa8:	00050493          	mv	s1,a0
80011fac:	00058513          	mv	a0,a1
80011fb0:	00112623          	sw	ra,12(sp)
80011fb4:	ac042423          	sw	zero,-1336(s0) # 8003aac8 <__stack+0xffffdffc>
80011fb8:	cb5f40ef          	jal	ra,80006c6c <_close>
80011fbc:	fff00793          	li	a5,-1
80011fc0:	00f51863          	bne	a0,a5,80011fd0 <_close_r+0x38>
80011fc4:	ac842783          	lw	a5,-1336(s0)
80011fc8:	00078463          	beqz	a5,80011fd0 <_close_r+0x38>
80011fcc:	00f4a023          	sw	a5,0(s1)
80011fd0:	00c12083          	lw	ra,12(sp)
80011fd4:	00812403          	lw	s0,8(sp)
80011fd8:	00412483          	lw	s1,4(sp)
80011fdc:	01010113          	addi	sp,sp,16
80011fe0:	00008067          	ret

80011fe4 <_fclose_r>:
80011fe4:	ff010113          	addi	sp,sp,-16
80011fe8:	00112623          	sw	ra,12(sp)
80011fec:	00812423          	sw	s0,8(sp)
80011ff0:	00912223          	sw	s1,4(sp)
80011ff4:	01212023          	sw	s2,0(sp)
80011ff8:	02059263          	bnez	a1,8001201c <_fclose_r+0x38>
80011ffc:	00000913          	li	s2,0
80012000:	00c12083          	lw	ra,12(sp)
80012004:	00812403          	lw	s0,8(sp)
80012008:	00090513          	mv	a0,s2
8001200c:	00412483          	lw	s1,4(sp)
80012010:	00012903          	lw	s2,0(sp)
80012014:	01010113          	addi	sp,sp,16
80012018:	00008067          	ret
8001201c:	00050493          	mv	s1,a0
80012020:	00058413          	mv	s0,a1
80012024:	00050863          	beqz	a0,80012034 <_fclose_r+0x50>
80012028:	03852783          	lw	a5,56(a0)
8001202c:	00079463          	bnez	a5,80012034 <_fclose_r+0x50>
80012030:	cb1f80ef          	jal	ra,8000ace0 <__sinit>
80012034:	00c41783          	lh	a5,12(s0)
80012038:	fc0782e3          	beqz	a5,80011ffc <_fclose_r+0x18>
8001203c:	00040593          	mv	a1,s0
80012040:	00048513          	mv	a0,s1
80012044:	8f9f80ef          	jal	ra,8000a93c <__sflush_r>
80012048:	02c42783          	lw	a5,44(s0)
8001204c:	00050913          	mv	s2,a0
80012050:	00078c63          	beqz	a5,80012068 <_fclose_r+0x84>
80012054:	01c42583          	lw	a1,28(s0)
80012058:	00048513          	mv	a0,s1
8001205c:	000780e7          	jalr	a5
80012060:	00055463          	bgez	a0,80012068 <_fclose_r+0x84>
80012064:	fff00913          	li	s2,-1
80012068:	00c45783          	lhu	a5,12(s0)
8001206c:	0807f793          	andi	a5,a5,128
80012070:	00078863          	beqz	a5,80012080 <_fclose_r+0x9c>
80012074:	01042583          	lw	a1,16(s0)
80012078:	00048513          	mv	a0,s1
8001207c:	f29f80ef          	jal	ra,8000afa4 <_free_r>
80012080:	03042583          	lw	a1,48(s0)
80012084:	00058c63          	beqz	a1,8001209c <_fclose_r+0xb8>
80012088:	04040793          	addi	a5,s0,64
8001208c:	00f58663          	beq	a1,a5,80012098 <_fclose_r+0xb4>
80012090:	00048513          	mv	a0,s1
80012094:	f11f80ef          	jal	ra,8000afa4 <_free_r>
80012098:	02042823          	sw	zero,48(s0)
8001209c:	04442583          	lw	a1,68(s0)
800120a0:	00058863          	beqz	a1,800120b0 <_fclose_r+0xcc>
800120a4:	00048513          	mv	a0,s1
800120a8:	efdf80ef          	jal	ra,8000afa4 <_free_r>
800120ac:	04042223          	sw	zero,68(s0)
800120b0:	da1f80ef          	jal	ra,8000ae50 <__sfp_lock_acquire>
800120b4:	00041623          	sh	zero,12(s0)
800120b8:	d9df80ef          	jal	ra,8000ae54 <__sfp_lock_release>
800120bc:	f45ff06f          	j	80012000 <_fclose_r+0x1c>

800120c0 <fclose>:
800120c0:	800217b7          	lui	a5,0x80021
800120c4:	00050593          	mv	a1,a0
800120c8:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
800120cc:	f19ff06f          	j	80011fe4 <_fclose_r>

800120d0 <__fputwc>:
800120d0:	fd010113          	addi	sp,sp,-48
800120d4:	02812423          	sw	s0,40(sp)
800120d8:	02912223          	sw	s1,36(sp)
800120dc:	01412c23          	sw	s4,24(sp)
800120e0:	02112623          	sw	ra,44(sp)
800120e4:	03212023          	sw	s2,32(sp)
800120e8:	01312e23          	sw	s3,28(sp)
800120ec:	01512a23          	sw	s5,20(sp)
800120f0:	01612823          	sw	s6,16(sp)
800120f4:	00050a13          	mv	s4,a0
800120f8:	00058493          	mv	s1,a1
800120fc:	00060413          	mv	s0,a2
80012100:	b38fb0ef          	jal	ra,8000d438 <__locale_mb_cur_max>
80012104:	00100793          	li	a5,1
80012108:	04f51a63          	bne	a0,a5,8001215c <__fputwc+0x8c>
8001210c:	fff48793          	addi	a5,s1,-1
80012110:	0fe00713          	li	a4,254
80012114:	04f76463          	bltu	a4,a5,8001215c <__fputwc+0x8c>
80012118:	00910623          	sb	s1,12(sp)
8001211c:	00100993          	li	s3,1
80012120:	00000913          	li	s2,0
80012124:	fff00a93          	li	s5,-1
80012128:	00a00b13          	li	s6,10
8001212c:	07391263          	bne	s2,s3,80012190 <__fputwc+0xc0>
80012130:	00048513          	mv	a0,s1
80012134:	02c12083          	lw	ra,44(sp)
80012138:	02812403          	lw	s0,40(sp)
8001213c:	02412483          	lw	s1,36(sp)
80012140:	02012903          	lw	s2,32(sp)
80012144:	01c12983          	lw	s3,28(sp)
80012148:	01812a03          	lw	s4,24(sp)
8001214c:	01412a83          	lw	s5,20(sp)
80012150:	01012b03          	lw	s6,16(sp)
80012154:	03010113          	addi	sp,sp,48
80012158:	00008067          	ret
8001215c:	05c40693          	addi	a3,s0,92
80012160:	00048613          	mv	a2,s1
80012164:	00c10593          	addi	a1,sp,12
80012168:	000a0513          	mv	a0,s4
8001216c:	4d9010ef          	jal	ra,80013e44 <_wcrtomb_r>
80012170:	fff00793          	li	a5,-1
80012174:	00050993          	mv	s3,a0
80012178:	faf514e3          	bne	a0,a5,80012120 <__fputwc+0x50>
8001217c:	00c45783          	lhu	a5,12(s0)
80012180:	0407e793          	ori	a5,a5,64
80012184:	00f41623          	sh	a5,12(s0)
80012188:	fff00513          	li	a0,-1
8001218c:	fa9ff06f          	j	80012134 <__fputwc+0x64>
80012190:	00c10793          	addi	a5,sp,12
80012194:	012787b3          	add	a5,a5,s2
80012198:	0007c583          	lbu	a1,0(a5)
8001219c:	00842783          	lw	a5,8(s0)
800121a0:	fff78793          	addi	a5,a5,-1
800121a4:	00f42423          	sw	a5,8(s0)
800121a8:	0007d863          	bgez	a5,800121b8 <__fputwc+0xe8>
800121ac:	01842703          	lw	a4,24(s0)
800121b0:	02e7c063          	blt	a5,a4,800121d0 <__fputwc+0x100>
800121b4:	01658e63          	beq	a1,s6,800121d0 <__fputwc+0x100>
800121b8:	00042783          	lw	a5,0(s0)
800121bc:	00178713          	addi	a4,a5,1
800121c0:	00e42023          	sw	a4,0(s0)
800121c4:	00b78023          	sb	a1,0(a5)
800121c8:	00190913          	addi	s2,s2,1
800121cc:	f61ff06f          	j	8001212c <__fputwc+0x5c>
800121d0:	00040613          	mv	a2,s0
800121d4:	000a0513          	mv	a0,s4
800121d8:	329010ef          	jal	ra,80013d00 <__swbuf_r>
800121dc:	ff5516e3          	bne	a0,s5,800121c8 <__fputwc+0xf8>
800121e0:	fa9ff06f          	j	80012188 <__fputwc+0xb8>

800121e4 <_fputwc_r>:
800121e4:	00c61783          	lh	a5,12(a2)
800121e8:	01279713          	slli	a4,a5,0x12
800121ec:	02074063          	bltz	a4,8001220c <_fputwc_r+0x28>
800121f0:	06462703          	lw	a4,100(a2)
800121f4:	000026b7          	lui	a3,0x2
800121f8:	00d7e7b3          	or	a5,a5,a3
800121fc:	00f61623          	sh	a5,12(a2)
80012200:	000027b7          	lui	a5,0x2
80012204:	00f767b3          	or	a5,a4,a5
80012208:	06f62223          	sw	a5,100(a2)
8001220c:	ec5ff06f          	j	800120d0 <__fputwc>

80012210 <fputwc>:
80012210:	fe010113          	addi	sp,sp,-32
80012214:	800217b7          	lui	a5,0x80021
80012218:	00812c23          	sw	s0,24(sp)
8001221c:	e647a403          	lw	s0,-412(a5) # 80020e64 <__stack+0xfffe4398>
80012220:	00912a23          	sw	s1,20(sp)
80012224:	00112e23          	sw	ra,28(sp)
80012228:	00050493          	mv	s1,a0
8001222c:	00058613          	mv	a2,a1
80012230:	00040e63          	beqz	s0,8001224c <fputwc+0x3c>
80012234:	03842783          	lw	a5,56(s0)
80012238:	00079a63          	bnez	a5,8001224c <fputwc+0x3c>
8001223c:	00040513          	mv	a0,s0
80012240:	00b12623          	sw	a1,12(sp)
80012244:	a9df80ef          	jal	ra,8000ace0 <__sinit>
80012248:	00c12603          	lw	a2,12(sp)
8001224c:	00040513          	mv	a0,s0
80012250:	01812403          	lw	s0,24(sp)
80012254:	01c12083          	lw	ra,28(sp)
80012258:	00048593          	mv	a1,s1
8001225c:	01412483          	lw	s1,20(sp)
80012260:	02010113          	addi	sp,sp,32
80012264:	f81ff06f          	j	800121e4 <_fputwc_r>

80012268 <_fstat_r>:
80012268:	ff010113          	addi	sp,sp,-16
8001226c:	00812423          	sw	s0,8(sp)
80012270:	00912223          	sw	s1,4(sp)
80012274:	8003b437          	lui	s0,0x8003b
80012278:	00050493          	mv	s1,a0
8001227c:	00058513          	mv	a0,a1
80012280:	00060593          	mv	a1,a2
80012284:	00112623          	sw	ra,12(sp)
80012288:	ac042423          	sw	zero,-1336(s0) # 8003aac8 <__stack+0xffffdffc>
8001228c:	aa5f40ef          	jal	ra,80006d30 <_fstat>
80012290:	fff00793          	li	a5,-1
80012294:	00f51863          	bne	a0,a5,800122a4 <_fstat_r+0x3c>
80012298:	ac842783          	lw	a5,-1336(s0)
8001229c:	00078463          	beqz	a5,800122a4 <_fstat_r+0x3c>
800122a0:	00f4a023          	sw	a5,0(s1)
800122a4:	00c12083          	lw	ra,12(sp)
800122a8:	00812403          	lw	s0,8(sp)
800122ac:	00412483          	lw	s1,4(sp)
800122b0:	01010113          	addi	sp,sp,16
800122b4:	00008067          	ret

800122b8 <__sfvwrite_r>:
800122b8:	00862783          	lw	a5,8(a2)
800122bc:	00079863          	bnez	a5,800122cc <__sfvwrite_r+0x14>
800122c0:	00000793          	li	a5,0
800122c4:	00078513          	mv	a0,a5
800122c8:	00008067          	ret
800122cc:	00c5d783          	lhu	a5,12(a1)
800122d0:	fb010113          	addi	sp,sp,-80
800122d4:	04812423          	sw	s0,72(sp)
800122d8:	05212023          	sw	s2,64(sp)
800122dc:	03512a23          	sw	s5,52(sp)
800122e0:	04112623          	sw	ra,76(sp)
800122e4:	04912223          	sw	s1,68(sp)
800122e8:	03312e23          	sw	s3,60(sp)
800122ec:	03412c23          	sw	s4,56(sp)
800122f0:	03612823          	sw	s6,48(sp)
800122f4:	03712623          	sw	s7,44(sp)
800122f8:	03812423          	sw	s8,40(sp)
800122fc:	03912223          	sw	s9,36(sp)
80012300:	03a12023          	sw	s10,32(sp)
80012304:	01b12e23          	sw	s11,28(sp)
80012308:	0087f793          	andi	a5,a5,8
8001230c:	00060a93          	mv	s5,a2
80012310:	00058413          	mv	s0,a1
80012314:	00050913          	mv	s2,a0
80012318:	0e078263          	beqz	a5,800123fc <__sfvwrite_r+0x144>
8001231c:	0105a783          	lw	a5,16(a1)
80012320:	0c078e63          	beqz	a5,800123fc <__sfvwrite_r+0x144>
80012324:	00c45783          	lhu	a5,12(s0)
80012328:	000aaa03          	lw	s4,0(s5)
8001232c:	0027f713          	andi	a4,a5,2
80012330:	16071a63          	bnez	a4,800124a4 <__sfvwrite_r+0x1ec>
80012334:	0017f793          	andi	a5,a5,1
80012338:	20078463          	beqz	a5,80012540 <__sfvwrite_r+0x288>
8001233c:	00000b93          	li	s7,0
80012340:	00000513          	li	a0,0
80012344:	00000b13          	li	s6,0
80012348:	00000993          	li	s3,0
8001234c:	36098463          	beqz	s3,800126b4 <__sfvwrite_r+0x3fc>
80012350:	02051263          	bnez	a0,80012374 <__sfvwrite_r+0xbc>
80012354:	00098613          	mv	a2,s3
80012358:	00a00593          	li	a1,10
8001235c:	000b0513          	mv	a0,s6
80012360:	995fb0ef          	jal	ra,8000dcf4 <memchr>
80012364:	00198b93          	addi	s7,s3,1
80012368:	00050663          	beqz	a0,80012374 <__sfvwrite_r+0xbc>
8001236c:	00150513          	addi	a0,a0,1
80012370:	41650bb3          	sub	s7,a0,s6
80012374:	000b8c13          	mv	s8,s7
80012378:	0179f463          	bleu	s7,s3,80012380 <__sfvwrite_r+0xc8>
8001237c:	00098c13          	mv	s8,s3
80012380:	00042503          	lw	a0,0(s0)
80012384:	01042783          	lw	a5,16(s0)
80012388:	01442683          	lw	a3,20(s0)
8001238c:	32a7fe63          	bleu	a0,a5,800126c8 <__sfvwrite_r+0x410>
80012390:	00842483          	lw	s1,8(s0)
80012394:	009684b3          	add	s1,a3,s1
80012398:	3384d863          	ble	s8,s1,800126c8 <__sfvwrite_r+0x410>
8001239c:	000b0593          	mv	a1,s6
800123a0:	00048613          	mv	a2,s1
800123a4:	414000ef          	jal	ra,800127b8 <memmove>
800123a8:	00042783          	lw	a5,0(s0)
800123ac:	00040593          	mv	a1,s0
800123b0:	00090513          	mv	a0,s2
800123b4:	009787b3          	add	a5,a5,s1
800123b8:	00f42023          	sw	a5,0(s0)
800123bc:	f88f80ef          	jal	ra,8000ab44 <_fflush_r>
800123c0:	16051663          	bnez	a0,8001252c <__sfvwrite_r+0x274>
800123c4:	409b8bb3          	sub	s7,s7,s1
800123c8:	00100513          	li	a0,1
800123cc:	000b9a63          	bnez	s7,800123e0 <__sfvwrite_r+0x128>
800123d0:	00040593          	mv	a1,s0
800123d4:	00090513          	mv	a0,s2
800123d8:	f6cf80ef          	jal	ra,8000ab44 <_fflush_r>
800123dc:	14051863          	bnez	a0,8001252c <__sfvwrite_r+0x274>
800123e0:	008aa783          	lw	a5,8(s5)
800123e4:	009b0b33          	add	s6,s6,s1
800123e8:	409989b3          	sub	s3,s3,s1
800123ec:	409784b3          	sub	s1,a5,s1
800123f0:	009aa423          	sw	s1,8(s5)
800123f4:	f4049ce3          	bnez	s1,8001234c <__sfvwrite_r+0x94>
800123f8:	0680006f          	j	80012460 <__sfvwrite_r+0x1a8>
800123fc:	00040593          	mv	a1,s0
80012400:	00090513          	mv	a0,s2
80012404:	c00f80ef          	jal	ra,8000a804 <__swsetup_r>
80012408:	fff00793          	li	a5,-1
8001240c:	f0050ce3          	beqz	a0,80012324 <__sfvwrite_r+0x6c>
80012410:	0540006f          	j	80012464 <__sfvwrite_r+0x1ac>
80012414:	000a2983          	lw	s3,0(s4)
80012418:	004a2483          	lw	s1,4(s4)
8001241c:	008a0a13          	addi	s4,s4,8
80012420:	fe048ae3          	beqz	s1,80012414 <__sfvwrite_r+0x15c>
80012424:	00048693          	mv	a3,s1
80012428:	009b7463          	bleu	s1,s6,80012430 <__sfvwrite_r+0x178>
8001242c:	000b0693          	mv	a3,s6
80012430:	02442783          	lw	a5,36(s0)
80012434:	01c42583          	lw	a1,28(s0)
80012438:	00098613          	mv	a2,s3
8001243c:	00090513          	mv	a0,s2
80012440:	000780e7          	jalr	a5
80012444:	0ea05463          	blez	a0,8001252c <__sfvwrite_r+0x274>
80012448:	008aa783          	lw	a5,8(s5)
8001244c:	00a989b3          	add	s3,s3,a0
80012450:	40a484b3          	sub	s1,s1,a0
80012454:	40a78533          	sub	a0,a5,a0
80012458:	00aaa423          	sw	a0,8(s5)
8001245c:	fc0512e3          	bnez	a0,80012420 <__sfvwrite_r+0x168>
80012460:	00000793          	li	a5,0
80012464:	04c12083          	lw	ra,76(sp)
80012468:	04812403          	lw	s0,72(sp)
8001246c:	04412483          	lw	s1,68(sp)
80012470:	04012903          	lw	s2,64(sp)
80012474:	03c12983          	lw	s3,60(sp)
80012478:	03812a03          	lw	s4,56(sp)
8001247c:	03412a83          	lw	s5,52(sp)
80012480:	03012b03          	lw	s6,48(sp)
80012484:	02c12b83          	lw	s7,44(sp)
80012488:	02812c03          	lw	s8,40(sp)
8001248c:	02412c83          	lw	s9,36(sp)
80012490:	02012d03          	lw	s10,32(sp)
80012494:	01c12d83          	lw	s11,28(sp)
80012498:	00078513          	mv	a0,a5
8001249c:	05010113          	addi	sp,sp,80
800124a0:	00008067          	ret
800124a4:	80000b37          	lui	s6,0x80000
800124a8:	00000993          	li	s3,0
800124ac:	00000493          	li	s1,0
800124b0:	c00b4b13          	xori	s6,s6,-1024
800124b4:	f6dff06f          	j	80012420 <__sfvwrite_r+0x168>
800124b8:	000a2b03          	lw	s6,0(s4)
800124bc:	004a2483          	lw	s1,4(s4)
800124c0:	008a0a13          	addi	s4,s4,8
800124c4:	fe048ae3          	beqz	s1,800124b8 <__sfvwrite_r+0x200>
800124c8:	00c45703          	lhu	a4,12(s0)
800124cc:	00842783          	lw	a5,8(s0)
800124d0:	00042503          	lw	a0,0(s0)
800124d4:	20077693          	andi	a3,a4,512
800124d8:	14068863          	beqz	a3,80012628 <__sfvwrite_r+0x370>
800124dc:	0cf4e263          	bltu	s1,a5,800125a0 <__sfvwrite_r+0x2e8>
800124e0:	48077693          	andi	a3,a4,1152
800124e4:	0a068e63          	beqz	a3,800125a0 <__sfvwrite_r+0x2e8>
800124e8:	01442d83          	lw	s11,20(s0)
800124ec:	01042583          	lw	a1,16(s0)
800124f0:	03bc8db3          	mul	s11,s9,s11
800124f4:	40b509b3          	sub	s3,a0,a1
800124f8:	00198793          	addi	a5,s3,1
800124fc:	009787b3          	add	a5,a5,s1
80012500:	03adcdb3          	div	s11,s11,s10
80012504:	00fdf463          	bleu	a5,s11,8001250c <__sfvwrite_r+0x254>
80012508:	00078d93          	mv	s11,a5
8001250c:	40077713          	andi	a4,a4,1024
80012510:	0e070463          	beqz	a4,800125f8 <__sfvwrite_r+0x340>
80012514:	000d8593          	mv	a1,s11
80012518:	00090513          	mv	a0,s2
8001251c:	904fb0ef          	jal	ra,8000d620 <_malloc_r>
80012520:	04051063          	bnez	a0,80012560 <__sfvwrite_r+0x2a8>
80012524:	00c00793          	li	a5,12
80012528:	00f92023          	sw	a5,0(s2)
8001252c:	00c45783          	lhu	a5,12(s0)
80012530:	0407e793          	ori	a5,a5,64
80012534:	00f41623          	sh	a5,12(s0)
80012538:	fff00793          	li	a5,-1
8001253c:	f29ff06f          	j	80012464 <__sfvwrite_r+0x1ac>
80012540:	80000bb7          	lui	s7,0x80000
80012544:	ffebcc13          	xori	s8,s7,-2
80012548:	00000b13          	li	s6,0
8001254c:	00000493          	li	s1,0
80012550:	fffbcb93          	not	s7,s7
80012554:	00300c93          	li	s9,3
80012558:	00200d13          	li	s10,2
8001255c:	f69ff06f          	j	800124c4 <__sfvwrite_r+0x20c>
80012560:	01042583          	lw	a1,16(s0)
80012564:	00098613          	mv	a2,s3
80012568:	00a12623          	sw	a0,12(sp)
8001256c:	fd9f50ef          	jal	ra,80008544 <memcpy>
80012570:	00c45703          	lhu	a4,12(s0)
80012574:	00c12783          	lw	a5,12(sp)
80012578:	b7f77713          	andi	a4,a4,-1153
8001257c:	08076713          	ori	a4,a4,128
80012580:	00e41623          	sh	a4,12(s0)
80012584:	00f42823          	sw	a5,16(s0)
80012588:	01b42a23          	sw	s11,20(s0)
8001258c:	013787b3          	add	a5,a5,s3
80012590:	413d8db3          	sub	s11,s11,s3
80012594:	00f42023          	sw	a5,0(s0)
80012598:	01b42423          	sw	s11,8(s0)
8001259c:	00048793          	mv	a5,s1
800125a0:	00048993          	mv	s3,s1
800125a4:	00f4f463          	bleu	a5,s1,800125ac <__sfvwrite_r+0x2f4>
800125a8:	00048793          	mv	a5,s1
800125ac:	00042503          	lw	a0,0(s0)
800125b0:	00078613          	mv	a2,a5
800125b4:	000b0593          	mv	a1,s6
800125b8:	00f12623          	sw	a5,12(sp)
800125bc:	1fc000ef          	jal	ra,800127b8 <memmove>
800125c0:	00842703          	lw	a4,8(s0)
800125c4:	00c12783          	lw	a5,12(sp)
800125c8:	40f70733          	sub	a4,a4,a5
800125cc:	00e42423          	sw	a4,8(s0)
800125d0:	00042703          	lw	a4,0(s0)
800125d4:	00f707b3          	add	a5,a4,a5
800125d8:	00f42023          	sw	a5,0(s0)
800125dc:	008aa783          	lw	a5,8(s5)
800125e0:	013b0b33          	add	s6,s6,s3
800125e4:	413484b3          	sub	s1,s1,s3
800125e8:	413789b3          	sub	s3,a5,s3
800125ec:	013aa423          	sw	s3,8(s5)
800125f0:	ec099ae3          	bnez	s3,800124c4 <__sfvwrite_r+0x20c>
800125f4:	e6dff06f          	j	80012460 <__sfvwrite_r+0x1a8>
800125f8:	000d8613          	mv	a2,s11
800125fc:	00090513          	mv	a0,s2
80012600:	260000ef          	jal	ra,80012860 <_realloc_r>
80012604:	00050793          	mv	a5,a0
80012608:	f6051ee3          	bnez	a0,80012584 <__sfvwrite_r+0x2cc>
8001260c:	01042583          	lw	a1,16(s0)
80012610:	00090513          	mv	a0,s2
80012614:	991f80ef          	jal	ra,8000afa4 <_free_r>
80012618:	00c45783          	lhu	a5,12(s0)
8001261c:	f7f7f793          	andi	a5,a5,-129
80012620:	00f41623          	sh	a5,12(s0)
80012624:	f01ff06f          	j	80012524 <__sfvwrite_r+0x26c>
80012628:	01042703          	lw	a4,16(s0)
8001262c:	00a76663          	bltu	a4,a0,80012638 <__sfvwrite_r+0x380>
80012630:	01442683          	lw	a3,20(s0)
80012634:	04d4f663          	bleu	a3,s1,80012680 <__sfvwrite_r+0x3c8>
80012638:	00078993          	mv	s3,a5
8001263c:	00f4f463          	bleu	a5,s1,80012644 <__sfvwrite_r+0x38c>
80012640:	00048993          	mv	s3,s1
80012644:	00098613          	mv	a2,s3
80012648:	000b0593          	mv	a1,s6
8001264c:	16c000ef          	jal	ra,800127b8 <memmove>
80012650:	00842783          	lw	a5,8(s0)
80012654:	00042703          	lw	a4,0(s0)
80012658:	413787b3          	sub	a5,a5,s3
8001265c:	01370733          	add	a4,a4,s3
80012660:	00f42423          	sw	a5,8(s0)
80012664:	00e42023          	sw	a4,0(s0)
80012668:	f6079ae3          	bnez	a5,800125dc <__sfvwrite_r+0x324>
8001266c:	00040593          	mv	a1,s0
80012670:	00090513          	mv	a0,s2
80012674:	cd0f80ef          	jal	ra,8000ab44 <_fflush_r>
80012678:	f60502e3          	beqz	a0,800125dc <__sfvwrite_r+0x324>
8001267c:	eb1ff06f          	j	8001252c <__sfvwrite_r+0x274>
80012680:	000b8793          	mv	a5,s7
80012684:	009c6463          	bltu	s8,s1,8001268c <__sfvwrite_r+0x3d4>
80012688:	00048793          	mv	a5,s1
8001268c:	02d7c7b3          	div	a5,a5,a3
80012690:	02442703          	lw	a4,36(s0)
80012694:	01c42583          	lw	a1,28(s0)
80012698:	000b0613          	mv	a2,s6
8001269c:	00090513          	mv	a0,s2
800126a0:	02d786b3          	mul	a3,a5,a3
800126a4:	000700e7          	jalr	a4
800126a8:	00050993          	mv	s3,a0
800126ac:	f2a048e3          	bgtz	a0,800125dc <__sfvwrite_r+0x324>
800126b0:	e7dff06f          	j	8001252c <__sfvwrite_r+0x274>
800126b4:	000a2b03          	lw	s6,0(s4)
800126b8:	004a2983          	lw	s3,4(s4)
800126bc:	00000513          	li	a0,0
800126c0:	008a0a13          	addi	s4,s4,8
800126c4:	c89ff06f          	j	8001234c <__sfvwrite_r+0x94>
800126c8:	02dc4263          	blt	s8,a3,800126ec <__sfvwrite_r+0x434>
800126cc:	02442783          	lw	a5,36(s0)
800126d0:	01c42583          	lw	a1,28(s0)
800126d4:	000b0613          	mv	a2,s6
800126d8:	00090513          	mv	a0,s2
800126dc:	000780e7          	jalr	a5
800126e0:	00050493          	mv	s1,a0
800126e4:	cea040e3          	bgtz	a0,800123c4 <__sfvwrite_r+0x10c>
800126e8:	e45ff06f          	j	8001252c <__sfvwrite_r+0x274>
800126ec:	000c0613          	mv	a2,s8
800126f0:	000b0593          	mv	a1,s6
800126f4:	0c4000ef          	jal	ra,800127b8 <memmove>
800126f8:	00842783          	lw	a5,8(s0)
800126fc:	000c0493          	mv	s1,s8
80012700:	418787b3          	sub	a5,a5,s8
80012704:	00f42423          	sw	a5,8(s0)
80012708:	00042783          	lw	a5,0(s0)
8001270c:	018787b3          	add	a5,a5,s8
80012710:	00f42023          	sw	a5,0(s0)
80012714:	cb1ff06f          	j	800123c4 <__sfvwrite_r+0x10c>

80012718 <_isatty_r>:
80012718:	ff010113          	addi	sp,sp,-16
8001271c:	00812423          	sw	s0,8(sp)
80012720:	00912223          	sw	s1,4(sp)
80012724:	8003b437          	lui	s0,0x8003b
80012728:	00050493          	mv	s1,a0
8001272c:	00058513          	mv	a0,a1
80012730:	00112623          	sw	ra,12(sp)
80012734:	ac042423          	sw	zero,-1336(s0) # 8003aac8 <__stack+0xffffdffc>
80012738:	e38f40ef          	jal	ra,80006d70 <_isatty>
8001273c:	fff00793          	li	a5,-1
80012740:	00f51863          	bne	a0,a5,80012750 <_isatty_r+0x38>
80012744:	ac842783          	lw	a5,-1336(s0)
80012748:	00078463          	beqz	a5,80012750 <_isatty_r+0x38>
8001274c:	00f4a023          	sw	a5,0(s1)
80012750:	00c12083          	lw	ra,12(sp)
80012754:	00812403          	lw	s0,8(sp)
80012758:	00412483          	lw	s1,4(sp)
8001275c:	01010113          	addi	sp,sp,16
80012760:	00008067          	ret

80012764 <_lseek_r>:
80012764:	ff010113          	addi	sp,sp,-16
80012768:	00812423          	sw	s0,8(sp)
8001276c:	00912223          	sw	s1,4(sp)
80012770:	8003b437          	lui	s0,0x8003b
80012774:	00050493          	mv	s1,a0
80012778:	00058513          	mv	a0,a1
8001277c:	00060593          	mv	a1,a2
80012780:	00068613          	mv	a2,a3
80012784:	00112623          	sw	ra,12(sp)
80012788:	ac042423          	sw	zero,-1336(s0) # 8003aac8 <__stack+0xffffdffc>
8001278c:	d1cf40ef          	jal	ra,80006ca8 <_lseek>
80012790:	fff00793          	li	a5,-1
80012794:	00f51863          	bne	a0,a5,800127a4 <_lseek_r+0x40>
80012798:	ac842783          	lw	a5,-1336(s0)
8001279c:	00078463          	beqz	a5,800127a4 <_lseek_r+0x40>
800127a0:	00f4a023          	sw	a5,0(s1)
800127a4:	00c12083          	lw	ra,12(sp)
800127a8:	00812403          	lw	s0,8(sp)
800127ac:	00412483          	lw	s1,4(sp)
800127b0:	01010113          	addi	sp,sp,16
800127b4:	00008067          	ret

800127b8 <memmove>:
800127b8:	00c50733          	add	a4,a0,a2
800127bc:	00a5e863          	bltu	a1,a0,800127cc <memmove+0x14>
800127c0:	00050793          	mv	a5,a0
800127c4:	02e79a63          	bne	a5,a4,800127f8 <memmove+0x40>
800127c8:	00008067          	ret
800127cc:	00c587b3          	add	a5,a1,a2
800127d0:	40f60633          	sub	a2,a2,a5
800127d4:	fef576e3          	bleu	a5,a0,800127c0 <memmove+0x8>
800127d8:	00c786b3          	add	a3,a5,a2
800127dc:	00069463          	bnez	a3,800127e4 <memmove+0x2c>
800127e0:	00008067          	ret
800127e4:	fff78793          	addi	a5,a5,-1
800127e8:	0007c683          	lbu	a3,0(a5)
800127ec:	fff70713          	addi	a4,a4,-1
800127f0:	00d70023          	sb	a3,0(a4)
800127f4:	fe5ff06f          	j	800127d8 <memmove+0x20>
800127f8:	00158593          	addi	a1,a1,1
800127fc:	fff5c683          	lbu	a3,-1(a1)
80012800:	00178793          	addi	a5,a5,1
80012804:	fed78fa3          	sb	a3,-1(a5)
80012808:	fbdff06f          	j	800127c4 <memmove+0xc>

8001280c <_read_r>:
8001280c:	ff010113          	addi	sp,sp,-16
80012810:	00812423          	sw	s0,8(sp)
80012814:	00912223          	sw	s1,4(sp)
80012818:	8003b437          	lui	s0,0x8003b
8001281c:	00050493          	mv	s1,a0
80012820:	00058513          	mv	a0,a1
80012824:	00060593          	mv	a1,a2
80012828:	00068613          	mv	a2,a3
8001282c:	00112623          	sw	ra,12(sp)
80012830:	ac042423          	sw	zero,-1336(s0) # 8003aac8 <__stack+0xffffdffc>
80012834:	cb8f40ef          	jal	ra,80006cec <_read>
80012838:	fff00793          	li	a5,-1
8001283c:	00f51863          	bne	a0,a5,8001284c <_read_r+0x40>
80012840:	ac842783          	lw	a5,-1336(s0)
80012844:	00078463          	beqz	a5,8001284c <_read_r+0x40>
80012848:	00f4a023          	sw	a5,0(s1)
8001284c:	00c12083          	lw	ra,12(sp)
80012850:	00812403          	lw	s0,8(sp)
80012854:	00412483          	lw	s1,4(sp)
80012858:	01010113          	addi	sp,sp,16
8001285c:	00008067          	ret

80012860 <_realloc_r>:
80012860:	fc010113          	addi	sp,sp,-64
80012864:	02812c23          	sw	s0,56(sp)
80012868:	02112e23          	sw	ra,60(sp)
8001286c:	00058413          	mv	s0,a1
80012870:	02912a23          	sw	s1,52(sp)
80012874:	03212823          	sw	s2,48(sp)
80012878:	03312623          	sw	s3,44(sp)
8001287c:	03412423          	sw	s4,40(sp)
80012880:	03512223          	sw	s5,36(sp)
80012884:	03612023          	sw	s6,32(sp)
80012888:	01712e23          	sw	s7,28(sp)
8001288c:	01812c23          	sw	s8,24(sp)
80012890:	00060593          	mv	a1,a2
80012894:	02041a63          	bnez	s0,800128c8 <_realloc_r+0x68>
80012898:	03812403          	lw	s0,56(sp)
8001289c:	03c12083          	lw	ra,60(sp)
800128a0:	03412483          	lw	s1,52(sp)
800128a4:	03012903          	lw	s2,48(sp)
800128a8:	02c12983          	lw	s3,44(sp)
800128ac:	02812a03          	lw	s4,40(sp)
800128b0:	02412a83          	lw	s5,36(sp)
800128b4:	02012b03          	lw	s6,32(sp)
800128b8:	01c12b83          	lw	s7,28(sp)
800128bc:	01812c03          	lw	s8,24(sp)
800128c0:	04010113          	addi	sp,sp,64
800128c4:	d5dfa06f          	j	8000d620 <_malloc_r>
800128c8:	00050a93          	mv	s5,a0
800128cc:	00c12623          	sw	a2,12(sp)
800128d0:	c48fb0ef          	jal	ra,8000dd18 <__malloc_lock>
800128d4:	00c12583          	lw	a1,12(sp)
800128d8:	ffc42683          	lw	a3,-4(s0)
800128dc:	01600793          	li	a5,22
800128e0:	00b58993          	addi	s3,a1,11
800128e4:	ff840b93          	addi	s7,s0,-8
800128e8:	ffc6f913          	andi	s2,a3,-4
800128ec:	0537f663          	bleu	s3,a5,80012938 <_realloc_r+0xd8>
800128f0:	ff89fb13          	andi	s6,s3,-8
800128f4:	040b5463          	bgez	s6,8001293c <_realloc_r+0xdc>
800128f8:	00c00793          	li	a5,12
800128fc:	00faa023          	sw	a5,0(s5)
80012900:	00000a13          	li	s4,0
80012904:	03c12083          	lw	ra,60(sp)
80012908:	03812403          	lw	s0,56(sp)
8001290c:	000a0513          	mv	a0,s4
80012910:	03412483          	lw	s1,52(sp)
80012914:	03012903          	lw	s2,48(sp)
80012918:	02c12983          	lw	s3,44(sp)
8001291c:	02812a03          	lw	s4,40(sp)
80012920:	02412a83          	lw	s5,36(sp)
80012924:	02012b03          	lw	s6,32(sp)
80012928:	01c12b83          	lw	s7,28(sp)
8001292c:	01812c03          	lw	s8,24(sp)
80012930:	04010113          	addi	sp,sp,64
80012934:	00008067          	ret
80012938:	01000b13          	li	s6,16
8001293c:	fabb6ee3          	bltu	s6,a1,800128f8 <_realloc_r+0x98>
80012940:	45695c63          	ble	s6,s2,80012d98 <_realloc_r+0x538>
80012944:	80021c37          	lui	s8,0x80021
80012948:	404c0713          	addi	a4,s8,1028 # 80021404 <__stack+0xfffe4938>
8001294c:	00872603          	lw	a2,8(a4)
80012950:	012b87b3          	add	a5,s7,s2
80012954:	0047a703          	lw	a4,4(a5)
80012958:	404c0c13          	addi	s8,s8,1028
8001295c:	00f60c63          	beq	a2,a5,80012974 <_realloc_r+0x114>
80012960:	ffe77513          	andi	a0,a4,-2
80012964:	00a78533          	add	a0,a5,a0
80012968:	00452503          	lw	a0,4(a0)
8001296c:	00157513          	andi	a0,a0,1
80012970:	0a051a63          	bnez	a0,80012a24 <_realloc_r+0x1c4>
80012974:	ffc77713          	andi	a4,a4,-4
80012978:	00e909b3          	add	s3,s2,a4
8001297c:	04f61063          	bne	a2,a5,800129bc <_realloc_r+0x15c>
80012980:	010b0513          	addi	a0,s6,16 # 80000010 <__stack+0xfffc3544>
80012984:	0aa9c463          	blt	s3,a0,80012a2c <_realloc_r+0x1cc>
80012988:	016b8bb3          	add	s7,s7,s6
8001298c:	416989b3          	sub	s3,s3,s6
80012990:	017c2423          	sw	s7,8(s8)
80012994:	0019e993          	ori	s3,s3,1
80012998:	013ba223          	sw	s3,4(s7) # 80000004 <__stack+0xfffc3538>
8001299c:	ffc42983          	lw	s3,-4(s0)
800129a0:	000a8513          	mv	a0,s5
800129a4:	00040a13          	mv	s4,s0
800129a8:	0019f993          	andi	s3,s3,1
800129ac:	0169e9b3          	or	s3,s3,s6
800129b0:	ff342e23          	sw	s3,-4(s0)
800129b4:	b68fb0ef          	jal	ra,8000dd1c <__malloc_unlock>
800129b8:	f4dff06f          	j	80012904 <_realloc_r+0xa4>
800129bc:	0769c863          	blt	s3,s6,80012a2c <_realloc_r+0x1cc>
800129c0:	00c7a703          	lw	a4,12(a5)
800129c4:	0087a783          	lw	a5,8(a5)
800129c8:	00e7a623          	sw	a4,12(a5)
800129cc:	00f72423          	sw	a5,8(a4)
800129d0:	004ba703          	lw	a4,4(s7)
800129d4:	416986b3          	sub	a3,s3,s6
800129d8:	00f00613          	li	a2,15
800129dc:	00177713          	andi	a4,a4,1
800129e0:	013b87b3          	add	a5,s7,s3
800129e4:	3ad67e63          	bleu	a3,a2,80012da0 <_realloc_r+0x540>
800129e8:	00eb69b3          	or	s3,s6,a4
800129ec:	013ba223          	sw	s3,4(s7)
800129f0:	016b85b3          	add	a1,s7,s6
800129f4:	0016e693          	ori	a3,a3,1
800129f8:	00d5a223          	sw	a3,4(a1)
800129fc:	0047a703          	lw	a4,4(a5)
80012a00:	00858593          	addi	a1,a1,8
80012a04:	000a8513          	mv	a0,s5
80012a08:	00176713          	ori	a4,a4,1
80012a0c:	00e7a223          	sw	a4,4(a5)
80012a10:	d94f80ef          	jal	ra,8000afa4 <_free_r>
80012a14:	000a8513          	mv	a0,s5
80012a18:	b04fb0ef          	jal	ra,8000dd1c <__malloc_unlock>
80012a1c:	008b8a13          	addi	s4,s7,8
80012a20:	ee5ff06f          	j	80012904 <_realloc_r+0xa4>
80012a24:	00000713          	li	a4,0
80012a28:	00000793          	li	a5,0
80012a2c:	0016f693          	andi	a3,a3,1
80012a30:	28069263          	bnez	a3,80012cb4 <_realloc_r+0x454>
80012a34:	ff842483          	lw	s1,-8(s0)
80012a38:	409b84b3          	sub	s1,s7,s1
80012a3c:	0044aa03          	lw	s4,4(s1)
80012a40:	ffca7a13          	andi	s4,s4,-4
80012a44:	012a0a33          	add	s4,s4,s2
80012a48:	1a078c63          	beqz	a5,80012c00 <_realloc_r+0x3a0>
80012a4c:	014709b3          	add	s3,a4,s4
80012a50:	0ef61663          	bne	a2,a5,80012b3c <_realloc_r+0x2dc>
80012a54:	010b0793          	addi	a5,s6,16
80012a58:	1af9c463          	blt	s3,a5,80012c00 <_realloc_r+0x3a0>
80012a5c:	0084a703          	lw	a4,8(s1)
80012a60:	00c4a783          	lw	a5,12(s1)
80012a64:	ffc90613          	addi	a2,s2,-4
80012a68:	00848a13          	addi	s4,s1,8
80012a6c:	00f72623          	sw	a5,12(a4)
80012a70:	00e7a423          	sw	a4,8(a5)
80012a74:	02400713          	li	a4,36
80012a78:	0ac76a63          	bltu	a4,a2,80012b2c <_realloc_r+0x2cc>
80012a7c:	01300693          	li	a3,19
80012a80:	000a0793          	mv	a5,s4
80012a84:	02c6f263          	bleu	a2,a3,80012aa8 <_realloc_r+0x248>
80012a88:	00042783          	lw	a5,0(s0)
80012a8c:	00f4a423          	sw	a5,8(s1)
80012a90:	00442783          	lw	a5,4(s0)
80012a94:	00f4a623          	sw	a5,12(s1)
80012a98:	01b00793          	li	a5,27
80012a9c:	04c7ea63          	bltu	a5,a2,80012af0 <_realloc_r+0x290>
80012aa0:	00840413          	addi	s0,s0,8
80012aa4:	01048793          	addi	a5,s1,16
80012aa8:	00042703          	lw	a4,0(s0)
80012aac:	00e7a023          	sw	a4,0(a5)
80012ab0:	00442703          	lw	a4,4(s0)
80012ab4:	00e7a223          	sw	a4,4(a5)
80012ab8:	00842703          	lw	a4,8(s0)
80012abc:	00e7a423          	sw	a4,8(a5)
80012ac0:	016487b3          	add	a5,s1,s6
80012ac4:	416989b3          	sub	s3,s3,s6
80012ac8:	00fc2423          	sw	a5,8(s8)
80012acc:	0019e993          	ori	s3,s3,1
80012ad0:	0137a223          	sw	s3,4(a5)
80012ad4:	0044a783          	lw	a5,4(s1)
80012ad8:	0017f793          	andi	a5,a5,1
80012adc:	0167e9b3          	or	s3,a5,s6
80012ae0:	0134a223          	sw	s3,4(s1)
80012ae4:	000a8513          	mv	a0,s5
80012ae8:	a34fb0ef          	jal	ra,8000dd1c <__malloc_unlock>
80012aec:	e19ff06f          	j	80012904 <_realloc_r+0xa4>
80012af0:	00842783          	lw	a5,8(s0)
80012af4:	00f4a823          	sw	a5,16(s1)
80012af8:	00c42783          	lw	a5,12(s0)
80012afc:	00f4aa23          	sw	a5,20(s1)
80012b00:	00e60863          	beq	a2,a4,80012b10 <_realloc_r+0x2b0>
80012b04:	01040413          	addi	s0,s0,16
80012b08:	01848793          	addi	a5,s1,24
80012b0c:	f9dff06f          	j	80012aa8 <_realloc_r+0x248>
80012b10:	01042783          	lw	a5,16(s0)
80012b14:	01840413          	addi	s0,s0,24
80012b18:	00f4ac23          	sw	a5,24(s1)
80012b1c:	ffc42703          	lw	a4,-4(s0)
80012b20:	02048793          	addi	a5,s1,32
80012b24:	00e4ae23          	sw	a4,28(s1)
80012b28:	f81ff06f          	j	80012aa8 <_realloc_r+0x248>
80012b2c:	00040593          	mv	a1,s0
80012b30:	000a0513          	mv	a0,s4
80012b34:	c85ff0ef          	jal	ra,800127b8 <memmove>
80012b38:	f89ff06f          	j	80012ac0 <_realloc_r+0x260>
80012b3c:	0d69c263          	blt	s3,s6,80012c00 <_realloc_r+0x3a0>
80012b40:	00c7a703          	lw	a4,12(a5)
80012b44:	0087a783          	lw	a5,8(a5)
80012b48:	ffc90613          	addi	a2,s2,-4
80012b4c:	00848513          	addi	a0,s1,8
80012b50:	00e7a623          	sw	a4,12(a5)
80012b54:	00f72423          	sw	a5,8(a4)
80012b58:	0084a703          	lw	a4,8(s1)
80012b5c:	00c4a783          	lw	a5,12(s1)
80012b60:	00f72623          	sw	a5,12(a4)
80012b64:	00e7a423          	sw	a4,8(a5)
80012b68:	02400793          	li	a5,36
80012b6c:	08c7e463          	bltu	a5,a2,80012bf4 <_realloc_r+0x394>
80012b70:	01300713          	li	a4,19
80012b74:	02c77263          	bleu	a2,a4,80012b98 <_realloc_r+0x338>
80012b78:	00042703          	lw	a4,0(s0)
80012b7c:	00e4a423          	sw	a4,8(s1)
80012b80:	00442703          	lw	a4,4(s0)
80012b84:	00e4a623          	sw	a4,12(s1)
80012b88:	01b00713          	li	a4,27
80012b8c:	02c76663          	bltu	a4,a2,80012bb8 <_realloc_r+0x358>
80012b90:	00840413          	addi	s0,s0,8
80012b94:	01048513          	addi	a0,s1,16
80012b98:	00042783          	lw	a5,0(s0)
80012b9c:	00f52023          	sw	a5,0(a0)
80012ba0:	00442783          	lw	a5,4(s0)
80012ba4:	00f52223          	sw	a5,4(a0)
80012ba8:	00842783          	lw	a5,8(s0)
80012bac:	00f52423          	sw	a5,8(a0)
80012bb0:	00048b93          	mv	s7,s1
80012bb4:	e1dff06f          	j	800129d0 <_realloc_r+0x170>
80012bb8:	00842703          	lw	a4,8(s0)
80012bbc:	00e4a823          	sw	a4,16(s1)
80012bc0:	00c42703          	lw	a4,12(s0)
80012bc4:	00e4aa23          	sw	a4,20(s1)
80012bc8:	00f60863          	beq	a2,a5,80012bd8 <_realloc_r+0x378>
80012bcc:	01040413          	addi	s0,s0,16
80012bd0:	01848513          	addi	a0,s1,24
80012bd4:	fc5ff06f          	j	80012b98 <_realloc_r+0x338>
80012bd8:	01042783          	lw	a5,16(s0)
80012bdc:	02048513          	addi	a0,s1,32
80012be0:	01840413          	addi	s0,s0,24
80012be4:	00f4ac23          	sw	a5,24(s1)
80012be8:	ffc42783          	lw	a5,-4(s0)
80012bec:	00f4ae23          	sw	a5,28(s1)
80012bf0:	fa9ff06f          	j	80012b98 <_realloc_r+0x338>
80012bf4:	00040593          	mv	a1,s0
80012bf8:	bc1ff0ef          	jal	ra,800127b8 <memmove>
80012bfc:	fb5ff06f          	j	80012bb0 <_realloc_r+0x350>
80012c00:	0b6a4a63          	blt	s4,s6,80012cb4 <_realloc_r+0x454>
80012c04:	00c4a783          	lw	a5,12(s1)
80012c08:	0084a703          	lw	a4,8(s1)
80012c0c:	ffc90613          	addi	a2,s2,-4
80012c10:	00848513          	addi	a0,s1,8
80012c14:	00f72623          	sw	a5,12(a4)
80012c18:	00e7a423          	sw	a4,8(a5)
80012c1c:	02400793          	li	a5,36
80012c20:	08c7e463          	bltu	a5,a2,80012ca8 <_realloc_r+0x448>
80012c24:	01300713          	li	a4,19
80012c28:	02c77263          	bleu	a2,a4,80012c4c <_realloc_r+0x3ec>
80012c2c:	00042703          	lw	a4,0(s0)
80012c30:	00e4a423          	sw	a4,8(s1)
80012c34:	00442703          	lw	a4,4(s0)
80012c38:	00e4a623          	sw	a4,12(s1)
80012c3c:	01b00713          	li	a4,27
80012c40:	02c76663          	bltu	a4,a2,80012c6c <_realloc_r+0x40c>
80012c44:	00840413          	addi	s0,s0,8
80012c48:	01048513          	addi	a0,s1,16
80012c4c:	00042783          	lw	a5,0(s0)
80012c50:	00f52023          	sw	a5,0(a0)
80012c54:	00442783          	lw	a5,4(s0)
80012c58:	00f52223          	sw	a5,4(a0)
80012c5c:	00842783          	lw	a5,8(s0)
80012c60:	00f52423          	sw	a5,8(a0)
80012c64:	000a0993          	mv	s3,s4
80012c68:	f49ff06f          	j	80012bb0 <_realloc_r+0x350>
80012c6c:	00842703          	lw	a4,8(s0)
80012c70:	00e4a823          	sw	a4,16(s1)
80012c74:	00c42703          	lw	a4,12(s0)
80012c78:	00e4aa23          	sw	a4,20(s1)
80012c7c:	00f60863          	beq	a2,a5,80012c8c <_realloc_r+0x42c>
80012c80:	01040413          	addi	s0,s0,16
80012c84:	01848513          	addi	a0,s1,24
80012c88:	fc5ff06f          	j	80012c4c <_realloc_r+0x3ec>
80012c8c:	01042783          	lw	a5,16(s0)
80012c90:	02048513          	addi	a0,s1,32
80012c94:	01840413          	addi	s0,s0,24
80012c98:	00f4ac23          	sw	a5,24(s1)
80012c9c:	ffc42783          	lw	a5,-4(s0)
80012ca0:	00f4ae23          	sw	a5,28(s1)
80012ca4:	fa9ff06f          	j	80012c4c <_realloc_r+0x3ec>
80012ca8:	00040593          	mv	a1,s0
80012cac:	b0dff0ef          	jal	ra,800127b8 <memmove>
80012cb0:	fb5ff06f          	j	80012c64 <_realloc_r+0x404>
80012cb4:	000a8513          	mv	a0,s5
80012cb8:	969fa0ef          	jal	ra,8000d620 <_malloc_r>
80012cbc:	00050a13          	mv	s4,a0
80012cc0:	e20502e3          	beqz	a0,80012ae4 <_realloc_r+0x284>
80012cc4:	ffc42783          	lw	a5,-4(s0)
80012cc8:	ff850713          	addi	a4,a0,-8
80012ccc:	ffe7f793          	andi	a5,a5,-2
80012cd0:	00fb87b3          	add	a5,s7,a5
80012cd4:	00e79a63          	bne	a5,a4,80012ce8 <_realloc_r+0x488>
80012cd8:	ffc52983          	lw	s3,-4(a0)
80012cdc:	ffc9f993          	andi	s3,s3,-4
80012ce0:	012989b3          	add	s3,s3,s2
80012ce4:	cedff06f          	j	800129d0 <_realloc_r+0x170>
80012ce8:	ffc90613          	addi	a2,s2,-4
80012cec:	02400793          	li	a5,36
80012cf0:	08c7ee63          	bltu	a5,a2,80012d8c <_realloc_r+0x52c>
80012cf4:	01300713          	li	a4,19
80012cf8:	08c77463          	bleu	a2,a4,80012d80 <_realloc_r+0x520>
80012cfc:	00042703          	lw	a4,0(s0)
80012d00:	00e52023          	sw	a4,0(a0)
80012d04:	00442703          	lw	a4,4(s0)
80012d08:	00e52223          	sw	a4,4(a0)
80012d0c:	01b00713          	li	a4,27
80012d10:	02c76a63          	bltu	a4,a2,80012d44 <_realloc_r+0x4e4>
80012d14:	00840713          	addi	a4,s0,8
80012d18:	00850793          	addi	a5,a0,8
80012d1c:	00072683          	lw	a3,0(a4)
80012d20:	00d7a023          	sw	a3,0(a5)
80012d24:	00472683          	lw	a3,4(a4)
80012d28:	00d7a223          	sw	a3,4(a5)
80012d2c:	00872703          	lw	a4,8(a4)
80012d30:	00e7a423          	sw	a4,8(a5)
80012d34:	00040593          	mv	a1,s0
80012d38:	000a8513          	mv	a0,s5
80012d3c:	a68f80ef          	jal	ra,8000afa4 <_free_r>
80012d40:	da5ff06f          	j	80012ae4 <_realloc_r+0x284>
80012d44:	00842703          	lw	a4,8(s0)
80012d48:	00e52423          	sw	a4,8(a0)
80012d4c:	00c42703          	lw	a4,12(s0)
80012d50:	00e52623          	sw	a4,12(a0)
80012d54:	00f60863          	beq	a2,a5,80012d64 <_realloc_r+0x504>
80012d58:	01040713          	addi	a4,s0,16
80012d5c:	01050793          	addi	a5,a0,16
80012d60:	fbdff06f          	j	80012d1c <_realloc_r+0x4bc>
80012d64:	01042783          	lw	a5,16(s0)
80012d68:	01840713          	addi	a4,s0,24
80012d6c:	00f52823          	sw	a5,16(a0)
80012d70:	01442683          	lw	a3,20(s0)
80012d74:	01850793          	addi	a5,a0,24
80012d78:	00d52a23          	sw	a3,20(a0)
80012d7c:	fa1ff06f          	j	80012d1c <_realloc_r+0x4bc>
80012d80:	00050793          	mv	a5,a0
80012d84:	00040713          	mv	a4,s0
80012d88:	f95ff06f          	j	80012d1c <_realloc_r+0x4bc>
80012d8c:	00040593          	mv	a1,s0
80012d90:	a29ff0ef          	jal	ra,800127b8 <memmove>
80012d94:	fa1ff06f          	j	80012d34 <_realloc_r+0x4d4>
80012d98:	00090993          	mv	s3,s2
80012d9c:	c35ff06f          	j	800129d0 <_realloc_r+0x170>
80012da0:	00e9e9b3          	or	s3,s3,a4
80012da4:	013ba223          	sw	s3,4(s7)
80012da8:	0047a703          	lw	a4,4(a5)
80012dac:	00176713          	ori	a4,a4,1
80012db0:	00e7a223          	sw	a4,4(a5)
80012db4:	c61ff06f          	j	80012a14 <_realloc_r+0x1b4>

80012db8 <cleanup_glue>:
80012db8:	ff010113          	addi	sp,sp,-16
80012dbc:	00812423          	sw	s0,8(sp)
80012dc0:	00058413          	mv	s0,a1
80012dc4:	0005a583          	lw	a1,0(a1)
80012dc8:	00912223          	sw	s1,4(sp)
80012dcc:	00112623          	sw	ra,12(sp)
80012dd0:	00050493          	mv	s1,a0
80012dd4:	00058463          	beqz	a1,80012ddc <cleanup_glue+0x24>
80012dd8:	fe1ff0ef          	jal	ra,80012db8 <cleanup_glue>
80012ddc:	00040593          	mv	a1,s0
80012de0:	00812403          	lw	s0,8(sp)
80012de4:	00c12083          	lw	ra,12(sp)
80012de8:	00048513          	mv	a0,s1
80012dec:	00412483          	lw	s1,4(sp)
80012df0:	01010113          	addi	sp,sp,16
80012df4:	9b0f806f          	j	8000afa4 <_free_r>

80012df8 <_reclaim_reent>:
80012df8:	800217b7          	lui	a5,0x80021
80012dfc:	e647a783          	lw	a5,-412(a5) # 80020e64 <__stack+0xfffe4398>
80012e00:	10a78263          	beq	a5,a0,80012f04 <_reclaim_reent+0x10c>
80012e04:	04c52783          	lw	a5,76(a0)
80012e08:	fe010113          	addi	sp,sp,-32
80012e0c:	00812c23          	sw	s0,24(sp)
80012e10:	00912a23          	sw	s1,20(sp)
80012e14:	01212823          	sw	s2,16(sp)
80012e18:	00112e23          	sw	ra,28(sp)
80012e1c:	01312623          	sw	s3,12(sp)
80012e20:	00050413          	mv	s0,a0
80012e24:	00000493          	li	s1,0
80012e28:	08000913          	li	s2,128
80012e2c:	04079463          	bnez	a5,80012e74 <_reclaim_reent+0x7c>
80012e30:	04042583          	lw	a1,64(s0)
80012e34:	00058663          	beqz	a1,80012e40 <_reclaim_reent+0x48>
80012e38:	00040513          	mv	a0,s0
80012e3c:	968f80ef          	jal	ra,8000afa4 <_free_r>
80012e40:	14842583          	lw	a1,328(s0)
80012e44:	04058c63          	beqz	a1,80012e9c <_reclaim_reent+0xa4>
80012e48:	14c40493          	addi	s1,s0,332
80012e4c:	04958863          	beq	a1,s1,80012e9c <_reclaim_reent+0xa4>
80012e50:	0005a903          	lw	s2,0(a1)
80012e54:	00040513          	mv	a0,s0
80012e58:	94cf80ef          	jal	ra,8000afa4 <_free_r>
80012e5c:	00090593          	mv	a1,s2
80012e60:	fedff06f          	j	80012e4c <_reclaim_reent+0x54>
80012e64:	009585b3          	add	a1,a1,s1
80012e68:	0005a583          	lw	a1,0(a1)
80012e6c:	00059e63          	bnez	a1,80012e88 <_reclaim_reent+0x90>
80012e70:	00448493          	addi	s1,s1,4
80012e74:	04c42583          	lw	a1,76(s0)
80012e78:	ff2496e3          	bne	s1,s2,80012e64 <_reclaim_reent+0x6c>
80012e7c:	00040513          	mv	a0,s0
80012e80:	924f80ef          	jal	ra,8000afa4 <_free_r>
80012e84:	fadff06f          	j	80012e30 <_reclaim_reent+0x38>
80012e88:	0005a983          	lw	s3,0(a1)
80012e8c:	00040513          	mv	a0,s0
80012e90:	914f80ef          	jal	ra,8000afa4 <_free_r>
80012e94:	00098593          	mv	a1,s3
80012e98:	fd5ff06f          	j	80012e6c <_reclaim_reent+0x74>
80012e9c:	05442583          	lw	a1,84(s0)
80012ea0:	00058663          	beqz	a1,80012eac <_reclaim_reent+0xb4>
80012ea4:	00040513          	mv	a0,s0
80012ea8:	8fcf80ef          	jal	ra,8000afa4 <_free_r>
80012eac:	03842783          	lw	a5,56(s0)
80012eb0:	02078c63          	beqz	a5,80012ee8 <_reclaim_reent+0xf0>
80012eb4:	03c42783          	lw	a5,60(s0)
80012eb8:	00040513          	mv	a0,s0
80012ebc:	000780e7          	jalr	a5
80012ec0:	2e042583          	lw	a1,736(s0)
80012ec4:	02058263          	beqz	a1,80012ee8 <_reclaim_reent+0xf0>
80012ec8:	00040513          	mv	a0,s0
80012ecc:	01812403          	lw	s0,24(sp)
80012ed0:	01c12083          	lw	ra,28(sp)
80012ed4:	01412483          	lw	s1,20(sp)
80012ed8:	01012903          	lw	s2,16(sp)
80012edc:	00c12983          	lw	s3,12(sp)
80012ee0:	02010113          	addi	sp,sp,32
80012ee4:	ed5ff06f          	j	80012db8 <cleanup_glue>
80012ee8:	01c12083          	lw	ra,28(sp)
80012eec:	01812403          	lw	s0,24(sp)
80012ef0:	01412483          	lw	s1,20(sp)
80012ef4:	01012903          	lw	s2,16(sp)
80012ef8:	00c12983          	lw	s3,12(sp)
80012efc:	02010113          	addi	sp,sp,32
80012f00:	00008067          	ret
80012f04:	00008067          	ret

80012f08 <__ssprint_r>:
80012f08:	00862783          	lw	a5,8(a2)
80012f0c:	fd010113          	addi	sp,sp,-48
80012f10:	01312e23          	sw	s3,28(sp)
80012f14:	02112623          	sw	ra,44(sp)
80012f18:	02812423          	sw	s0,40(sp)
80012f1c:	02912223          	sw	s1,36(sp)
80012f20:	03212023          	sw	s2,32(sp)
80012f24:	01412c23          	sw	s4,24(sp)
80012f28:	01512a23          	sw	s5,20(sp)
80012f2c:	01612823          	sw	s6,16(sp)
80012f30:	01712623          	sw	s7,12(sp)
80012f34:	01812423          	sw	s8,8(sp)
80012f38:	01912223          	sw	s9,4(sp)
80012f3c:	01a12023          	sw	s10,0(sp)
80012f40:	00060993          	mv	s3,a2
80012f44:	12078463          	beqz	a5,8001306c <__ssprint_r+0x164>
80012f48:	00062a83          	lw	s5,0(a2)
80012f4c:	00050a13          	mv	s4,a0
80012f50:	00058413          	mv	s0,a1
80012f54:	00000b13          	li	s6,0
80012f58:	00000913          	li	s2,0
80012f5c:	00300b93          	li	s7,3
80012f60:	00200c13          	li	s8,2
80012f64:	08090063          	beqz	s2,80012fe4 <__ssprint_r+0xdc>
80012f68:	00842d03          	lw	s10,8(s0)
80012f6c:	0da96063          	bltu	s2,s10,8001302c <__ssprint_r+0x124>
80012f70:	00c45783          	lhu	a5,12(s0)
80012f74:	4807f713          	andi	a4,a5,1152
80012f78:	0a070a63          	beqz	a4,8001302c <__ssprint_r+0x124>
80012f7c:	00042483          	lw	s1,0(s0)
80012f80:	01042583          	lw	a1,16(s0)
80012f84:	40b48cb3          	sub	s9,s1,a1
80012f88:	01442483          	lw	s1,20(s0)
80012f8c:	001c8713          	addi	a4,s9,1
80012f90:	01270733          	add	a4,a4,s2
80012f94:	029b84b3          	mul	s1,s7,s1
80012f98:	0384c4b3          	div	s1,s1,s8
80012f9c:	00e4f463          	bleu	a4,s1,80012fa4 <__ssprint_r+0x9c>
80012fa0:	00070493          	mv	s1,a4
80012fa4:	4007f793          	andi	a5,a5,1024
80012fa8:	10078263          	beqz	a5,800130ac <__ssprint_r+0x1a4>
80012fac:	00048593          	mv	a1,s1
80012fb0:	000a0513          	mv	a0,s4
80012fb4:	e6cfa0ef          	jal	ra,8000d620 <_malloc_r>
80012fb8:	00050d13          	mv	s10,a0
80012fbc:	02051c63          	bnez	a0,80012ff4 <__ssprint_r+0xec>
80012fc0:	00c00793          	li	a5,12
80012fc4:	00fa2023          	sw	a5,0(s4)
80012fc8:	00c45783          	lhu	a5,12(s0)
80012fcc:	fff00513          	li	a0,-1
80012fd0:	0407e793          	ori	a5,a5,64
80012fd4:	00f41623          	sh	a5,12(s0)
80012fd8:	0009a423          	sw	zero,8(s3)
80012fdc:	0009a223          	sw	zero,4(s3)
80012fe0:	0940006f          	j	80013074 <__ssprint_r+0x16c>
80012fe4:	000aab03          	lw	s6,0(s5)
80012fe8:	004aa903          	lw	s2,4(s5)
80012fec:	008a8a93          	addi	s5,s5,8
80012ff0:	f75ff06f          	j	80012f64 <__ssprint_r+0x5c>
80012ff4:	01042583          	lw	a1,16(s0)
80012ff8:	000c8613          	mv	a2,s9
80012ffc:	d48f50ef          	jal	ra,80008544 <memcpy>
80013000:	00c45783          	lhu	a5,12(s0)
80013004:	b7f7f793          	andi	a5,a5,-1153
80013008:	0807e793          	ori	a5,a5,128
8001300c:	00f41623          	sh	a5,12(s0)
80013010:	01a42823          	sw	s10,16(s0)
80013014:	00942a23          	sw	s1,20(s0)
80013018:	019d0d33          	add	s10,s10,s9
8001301c:	419484b3          	sub	s1,s1,s9
80013020:	01a42023          	sw	s10,0(s0)
80013024:	00942423          	sw	s1,8(s0)
80013028:	00090d13          	mv	s10,s2
8001302c:	01a97463          	bleu	s10,s2,80013034 <__ssprint_r+0x12c>
80013030:	00090d13          	mv	s10,s2
80013034:	00042503          	lw	a0,0(s0)
80013038:	000d0613          	mv	a2,s10
8001303c:	000b0593          	mv	a1,s6
80013040:	f78ff0ef          	jal	ra,800127b8 <memmove>
80013044:	00842783          	lw	a5,8(s0)
80013048:	41a787b3          	sub	a5,a5,s10
8001304c:	00f42423          	sw	a5,8(s0)
80013050:	00042783          	lw	a5,0(s0)
80013054:	01a78d33          	add	s10,a5,s10
80013058:	0089a783          	lw	a5,8(s3)
8001305c:	01a42023          	sw	s10,0(s0)
80013060:	41278933          	sub	s2,a5,s2
80013064:	0129a423          	sw	s2,8(s3)
80013068:	f6091ee3          	bnez	s2,80012fe4 <__ssprint_r+0xdc>
8001306c:	0009a223          	sw	zero,4(s3)
80013070:	00000513          	li	a0,0
80013074:	02c12083          	lw	ra,44(sp)
80013078:	02812403          	lw	s0,40(sp)
8001307c:	02412483          	lw	s1,36(sp)
80013080:	02012903          	lw	s2,32(sp)
80013084:	01c12983          	lw	s3,28(sp)
80013088:	01812a03          	lw	s4,24(sp)
8001308c:	01412a83          	lw	s5,20(sp)
80013090:	01012b03          	lw	s6,16(sp)
80013094:	00c12b83          	lw	s7,12(sp)
80013098:	00812c03          	lw	s8,8(sp)
8001309c:	00412c83          	lw	s9,4(sp)
800130a0:	00012d03          	lw	s10,0(sp)
800130a4:	03010113          	addi	sp,sp,48
800130a8:	00008067          	ret
800130ac:	00048613          	mv	a2,s1
800130b0:	000a0513          	mv	a0,s4
800130b4:	facff0ef          	jal	ra,80012860 <_realloc_r>
800130b8:	00050d13          	mv	s10,a0
800130bc:	f4051ae3          	bnez	a0,80013010 <__ssprint_r+0x108>
800130c0:	01042583          	lw	a1,16(s0)
800130c4:	000a0513          	mv	a0,s4
800130c8:	eddf70ef          	jal	ra,8000afa4 <_free_r>
800130cc:	ef5ff06f          	j	80012fc0 <__ssprint_r+0xb8>

800130d0 <_svfiprintf_r>:
800130d0:	00c5d783          	lhu	a5,12(a1)
800130d4:	ed010113          	addi	sp,sp,-304
800130d8:	12912223          	sw	s1,292(sp)
800130dc:	13212023          	sw	s2,288(sp)
800130e0:	11312e23          	sw	s3,284(sp)
800130e4:	11512a23          	sw	s5,276(sp)
800130e8:	12112623          	sw	ra,300(sp)
800130ec:	12812423          	sw	s0,296(sp)
800130f0:	11412c23          	sw	s4,280(sp)
800130f4:	11612823          	sw	s6,272(sp)
800130f8:	11712623          	sw	s7,268(sp)
800130fc:	11812423          	sw	s8,264(sp)
80013100:	11912223          	sw	s9,260(sp)
80013104:	11a12023          	sw	s10,256(sp)
80013108:	0fb12e23          	sw	s11,252(sp)
8001310c:	0807f793          	andi	a5,a5,128
80013110:	00050a93          	mv	s5,a0
80013114:	00058913          	mv	s2,a1
80013118:	00060993          	mv	s3,a2
8001311c:	00068493          	mv	s1,a3
80013120:	02078c63          	beqz	a5,80013158 <_svfiprintf_r+0x88>
80013124:	0105a783          	lw	a5,16(a1)
80013128:	02079863          	bnez	a5,80013158 <_svfiprintf_r+0x88>
8001312c:	04000593          	li	a1,64
80013130:	cf0fa0ef          	jal	ra,8000d620 <_malloc_r>
80013134:	00a92023          	sw	a0,0(s2)
80013138:	00a92823          	sw	a0,16(s2)
8001313c:	00051a63          	bnez	a0,80013150 <_svfiprintf_r+0x80>
80013140:	00c00793          	li	a5,12
80013144:	00faa023          	sw	a5,0(s5)
80013148:	fff00b93          	li	s7,-1
8001314c:	3210006f          	j	80013c6c <_svfiprintf_r+0xb9c>
80013150:	04000793          	li	a5,64
80013154:	00f92a23          	sw	a5,20(s2)
80013158:	800217b7          	lui	a5,0x80021
8001315c:	a2c78793          	addi	a5,a5,-1492 # 80020a2c <__stack+0xfffe3f60>
80013160:	00f12e23          	sw	a5,28(sp)
80013164:	800217b7          	lui	a5,0x80021
80013168:	04c10b13          	addi	s6,sp,76
8001316c:	ba878793          	addi	a5,a5,-1112 # 80020ba8 <__stack+0xfffe40dc>
80013170:	05612023          	sw	s6,64(sp)
80013174:	04012423          	sw	zero,72(sp)
80013178:	04012223          	sw	zero,68(sp)
8001317c:	000b0713          	mv	a4,s6
80013180:	00012423          	sw	zero,8(sp)
80013184:	00012223          	sw	zero,4(sp)
80013188:	00012623          	sw	zero,12(sp)
8001318c:	00012a23          	sw	zero,20(sp)
80013190:	00000b93          	li	s7,0
80013194:	00f12823          	sw	a5,16(sp)
80013198:	00098413          	mv	s0,s3
8001319c:	02500693          	li	a3,37
800131a0:	00044783          	lbu	a5,0(s0)
800131a4:	00078463          	beqz	a5,800131ac <_svfiprintf_r+0xdc>
800131a8:	0ad79263          	bne	a5,a3,8001324c <_svfiprintf_r+0x17c>
800131ac:	41340a33          	sub	s4,s0,s3
800131b0:	040a0663          	beqz	s4,800131fc <_svfiprintf_r+0x12c>
800131b4:	04812783          	lw	a5,72(sp)
800131b8:	01372023          	sw	s3,0(a4)
800131bc:	01472223          	sw	s4,4(a4)
800131c0:	014787b3          	add	a5,a5,s4
800131c4:	04f12423          	sw	a5,72(sp)
800131c8:	04412783          	lw	a5,68(sp)
800131cc:	00700693          	li	a3,7
800131d0:	00870713          	addi	a4,a4,8
800131d4:	00178793          	addi	a5,a5,1
800131d8:	04f12223          	sw	a5,68(sp)
800131dc:	00f6de63          	ble	a5,a3,800131f8 <_svfiprintf_r+0x128>
800131e0:	04010613          	addi	a2,sp,64
800131e4:	00090593          	mv	a1,s2
800131e8:	000a8513          	mv	a0,s5
800131ec:	d1dff0ef          	jal	ra,80012f08 <__ssprint_r>
800131f0:	260518e3          	bnez	a0,80013c60 <_svfiprintf_r+0xb90>
800131f4:	000b0713          	mv	a4,s6
800131f8:	014b8bb3          	add	s7,s7,s4
800131fc:	00044783          	lbu	a5,0(s0)
80013200:	2e0782e3          	beqz	a5,80013ce4 <_svfiprintf_r+0xc14>
80013204:	00140993          	addi	s3,s0,1
80013208:	02010da3          	sb	zero,59(sp)
8001320c:	fff00413          	li	s0,-1
80013210:	00000a13          	li	s4,0
80013214:	00000d13          	li	s10,0
80013218:	00a00c13          	li	s8,10
8001321c:	02a00c93          	li	s9,42
80013220:	05a00813          	li	a6,90
80013224:	00900593          	li	a1,9
80013228:	0009c603          	lbu	a2,0(s3)
8001322c:	00198993          	addi	s3,s3,1
80013230:	fe060693          	addi	a3,a2,-32
80013234:	0cd86ee3          	bltu	a6,a3,80013b10 <_svfiprintf_r+0xa40>
80013238:	01c12783          	lw	a5,28(sp)
8001323c:	00269693          	slli	a3,a3,0x2
80013240:	00f686b3          	add	a3,a3,a5
80013244:	0006a683          	lw	a3,0(a3) # 2000 <_HEAP_SIZE+0x1000>
80013248:	00068067          	jr	a3
8001324c:	00140413          	addi	s0,s0,1
80013250:	f51ff06f          	j	800131a0 <_svfiprintf_r+0xd0>
80013254:	800216b7          	lui	a3,0x80021
80013258:	d9068793          	addi	a5,a3,-624 # 80020d90 <__stack+0xfffe42c4>
8001325c:	00f12423          	sw	a5,8(sp)
80013260:	020d7693          	andi	a3,s10,32
80013264:	6c068063          	beqz	a3,80013924 <_svfiprintf_r+0x854>
80013268:	00748493          	addi	s1,s1,7
8001326c:	ff84f493          	andi	s1,s1,-8
80013270:	0004a883          	lw	a7,0(s1)
80013274:	0044ac83          	lw	s9,4(s1)
80013278:	00848c13          	addi	s8,s1,8
8001327c:	001d7693          	andi	a3,s10,1
80013280:	00068e63          	beqz	a3,8001329c <_svfiprintf_r+0x1cc>
80013284:	0198e6b3          	or	a3,a7,s9
80013288:	00068a63          	beqz	a3,8001329c <_svfiprintf_r+0x1cc>
8001328c:	03000693          	li	a3,48
80013290:	02d10e23          	sb	a3,60(sp)
80013294:	02c10ea3          	sb	a2,61(sp)
80013298:	002d6d13          	ori	s10,s10,2
8001329c:	bffd7d13          	andi	s10,s10,-1025
800132a0:	31c0006f          	j	800135bc <_svfiprintf_r+0x4ec>
800132a4:	000a8513          	mv	a0,s5
800132a8:	00e12023          	sw	a4,0(sp)
800132ac:	8d8fa0ef          	jal	ra,8000d384 <_localeconv_r>
800132b0:	00452783          	lw	a5,4(a0)
800132b4:	00078513          	mv	a0,a5
800132b8:	00f12a23          	sw	a5,20(sp)
800132bc:	d9dfb0ef          	jal	ra,8000f058 <strlen>
800132c0:	00a12623          	sw	a0,12(sp)
800132c4:	000a8513          	mv	a0,s5
800132c8:	8bcfa0ef          	jal	ra,8000d384 <_localeconv_r>
800132cc:	00852783          	lw	a5,8(a0)
800132d0:	00012703          	lw	a4,0(sp)
800132d4:	00f12223          	sw	a5,4(sp)
800132d8:	00c12783          	lw	a5,12(sp)
800132dc:	f40782e3          	beqz	a5,80013220 <_svfiprintf_r+0x150>
800132e0:	00412783          	lw	a5,4(sp)
800132e4:	f2078ee3          	beqz	a5,80013220 <_svfiprintf_r+0x150>
800132e8:	0007c683          	lbu	a3,0(a5)
800132ec:	f2068ae3          	beqz	a3,80013220 <_svfiprintf_r+0x150>
800132f0:	400d6d13          	ori	s10,s10,1024
800132f4:	f2dff06f          	j	80013220 <_svfiprintf_r+0x150>
800132f8:	03b14683          	lbu	a3,59(sp)
800132fc:	f20692e3          	bnez	a3,80013220 <_svfiprintf_r+0x150>
80013300:	02000693          	li	a3,32
80013304:	02d10da3          	sb	a3,59(sp)
80013308:	f19ff06f          	j	80013220 <_svfiprintf_r+0x150>
8001330c:	001d6d13          	ori	s10,s10,1
80013310:	f11ff06f          	j	80013220 <_svfiprintf_r+0x150>
80013314:	0004aa03          	lw	s4,0(s1)
80013318:	00448493          	addi	s1,s1,4
8001331c:	f00a52e3          	bgez	s4,80013220 <_svfiprintf_r+0x150>
80013320:	41400a33          	neg	s4,s4
80013324:	004d6d13          	ori	s10,s10,4
80013328:	ef9ff06f          	j	80013220 <_svfiprintf_r+0x150>
8001332c:	02b00693          	li	a3,43
80013330:	fd5ff06f          	j	80013304 <_svfiprintf_r+0x234>
80013334:	0009c603          	lbu	a2,0(s3)
80013338:	00198693          	addi	a3,s3,1
8001333c:	05961063          	bne	a2,s9,8001337c <_svfiprintf_r+0x2ac>
80013340:	0004a403          	lw	s0,0(s1)
80013344:	00448613          	addi	a2,s1,4
80013348:	00045463          	bgez	s0,80013350 <_svfiprintf_r+0x280>
8001334c:	fff00413          	li	s0,-1
80013350:	00060493          	mv	s1,a2
80013354:	00068993          	mv	s3,a3
80013358:	ec9ff06f          	j	80013220 <_svfiprintf_r+0x150>
8001335c:	03840433          	mul	s0,s0,s8
80013360:	00168693          	addi	a3,a3,1
80013364:	fff6c603          	lbu	a2,-1(a3)
80013368:	00a40433          	add	s0,s0,a0
8001336c:	fd060513          	addi	a0,a2,-48
80013370:	fea5f6e3          	bleu	a0,a1,8001335c <_svfiprintf_r+0x28c>
80013374:	00068993          	mv	s3,a3
80013378:	eb9ff06f          	j	80013230 <_svfiprintf_r+0x160>
8001337c:	00000413          	li	s0,0
80013380:	fedff06f          	j	8001336c <_svfiprintf_r+0x29c>
80013384:	080d6d13          	ori	s10,s10,128
80013388:	e99ff06f          	j	80013220 <_svfiprintf_r+0x150>
8001338c:	00098693          	mv	a3,s3
80013390:	00000a13          	li	s4,0
80013394:	038a0a33          	mul	s4,s4,s8
80013398:	fd060613          	addi	a2,a2,-48
8001339c:	00168693          	addi	a3,a3,1
800133a0:	01460a33          	add	s4,a2,s4
800133a4:	fff6c603          	lbu	a2,-1(a3)
800133a8:	fd060513          	addi	a0,a2,-48
800133ac:	fea5f4e3          	bleu	a0,a1,80013394 <_svfiprintf_r+0x2c4>
800133b0:	fc5ff06f          	j	80013374 <_svfiprintf_r+0x2a4>
800133b4:	0009c603          	lbu	a2,0(s3)
800133b8:	06800693          	li	a3,104
800133bc:	00d61863          	bne	a2,a3,800133cc <_svfiprintf_r+0x2fc>
800133c0:	00198993          	addi	s3,s3,1
800133c4:	200d6d13          	ori	s10,s10,512
800133c8:	e59ff06f          	j	80013220 <_svfiprintf_r+0x150>
800133cc:	040d6d13          	ori	s10,s10,64
800133d0:	e51ff06f          	j	80013220 <_svfiprintf_r+0x150>
800133d4:	0009c603          	lbu	a2,0(s3)
800133d8:	06c00693          	li	a3,108
800133dc:	00d61863          	bne	a2,a3,800133ec <_svfiprintf_r+0x31c>
800133e0:	00198993          	addi	s3,s3,1
800133e4:	020d6d13          	ori	s10,s10,32
800133e8:	e39ff06f          	j	80013220 <_svfiprintf_r+0x150>
800133ec:	010d6d13          	ori	s10,s10,16
800133f0:	e31ff06f          	j	80013220 <_svfiprintf_r+0x150>
800133f4:	0004a683          	lw	a3,0(s1)
800133f8:	00448c13          	addi	s8,s1,4
800133fc:	02010da3          	sb	zero,59(sp)
80013400:	08d10623          	sb	a3,140(sp)
80013404:	00100413          	li	s0,1
80013408:	00000c93          	li	s9,0
8001340c:	08c10493          	addi	s1,sp,140
80013410:	1ec0006f          	j	800135fc <_svfiprintf_r+0x52c>
80013414:	010d6d13          	ori	s10,s10,16
80013418:	020d7693          	andi	a3,s10,32
8001341c:	04068c63          	beqz	a3,80013474 <_svfiprintf_r+0x3a4>
80013420:	00748493          	addi	s1,s1,7
80013424:	ff84f493          	andi	s1,s1,-8
80013428:	0004a883          	lw	a7,0(s1)
8001342c:	0044ac83          	lw	s9,4(s1)
80013430:	00848c13          	addi	s8,s1,8
80013434:	000cde63          	bgez	s9,80013450 <_svfiprintf_r+0x380>
80013438:	411008b3          	neg	a7,a7
8001343c:	011036b3          	snez	a3,a7
80013440:	41900333          	neg	t1,s9
80013444:	40d30cb3          	sub	s9,t1,a3
80013448:	02d00693          	li	a3,45
8001344c:	02d10da3          	sb	a3,59(sp)
80013450:	fff00693          	li	a3,-1
80013454:	50d41463          	bne	s0,a3,8001395c <_svfiprintf_r+0x88c>
80013458:	560c9e63          	bnez	s9,800139d4 <_svfiprintf_r+0x904>
8001345c:	00900693          	li	a3,9
80013460:	5716ea63          	bltu	a3,a7,800139d4 <_svfiprintf_r+0x904>
80013464:	03088893          	addi	a7,a7,48
80013468:	0f1107a3          	sb	a7,239(sp)
8001346c:	0ef10493          	addi	s1,sp,239
80013470:	54c0006f          	j	800139bc <_svfiprintf_r+0x8ec>
80013474:	010d7693          	andi	a3,s10,16
80013478:	00448c13          	addi	s8,s1,4
8001347c:	00068863          	beqz	a3,8001348c <_svfiprintf_r+0x3bc>
80013480:	0004a883          	lw	a7,0(s1)
80013484:	41f8dc93          	srai	s9,a7,0x1f
80013488:	fadff06f          	j	80013434 <_svfiprintf_r+0x364>
8001348c:	040d7693          	andi	a3,s10,64
80013490:	0004a883          	lw	a7,0(s1)
80013494:	00068863          	beqz	a3,800134a4 <_svfiprintf_r+0x3d4>
80013498:	01089893          	slli	a7,a7,0x10
8001349c:	4108d893          	srai	a7,a7,0x10
800134a0:	fe5ff06f          	j	80013484 <_svfiprintf_r+0x3b4>
800134a4:	200d7693          	andi	a3,s10,512
800134a8:	fc068ee3          	beqz	a3,80013484 <_svfiprintf_r+0x3b4>
800134ac:	01889893          	slli	a7,a7,0x18
800134b0:	4188d893          	srai	a7,a7,0x18
800134b4:	fd1ff06f          	j	80013484 <_svfiprintf_r+0x3b4>
800134b8:	020d7613          	andi	a2,s10,32
800134bc:	0004a683          	lw	a3,0(s1)
800134c0:	00448493          	addi	s1,s1,4
800134c4:	00060a63          	beqz	a2,800134d8 <_svfiprintf_r+0x408>
800134c8:	41fbd793          	srai	a5,s7,0x1f
800134cc:	0176a023          	sw	s7,0(a3)
800134d0:	00f6a223          	sw	a5,4(a3)
800134d4:	cc5ff06f          	j	80013198 <_svfiprintf_r+0xc8>
800134d8:	010d7613          	andi	a2,s10,16
800134dc:	00060663          	beqz	a2,800134e8 <_svfiprintf_r+0x418>
800134e0:	0176a023          	sw	s7,0(a3)
800134e4:	cb5ff06f          	j	80013198 <_svfiprintf_r+0xc8>
800134e8:	040d7613          	andi	a2,s10,64
800134ec:	00060663          	beqz	a2,800134f8 <_svfiprintf_r+0x428>
800134f0:	01769023          	sh	s7,0(a3)
800134f4:	ca5ff06f          	j	80013198 <_svfiprintf_r+0xc8>
800134f8:	200d7793          	andi	a5,s10,512
800134fc:	fe0782e3          	beqz	a5,800134e0 <_svfiprintf_r+0x410>
80013500:	01768023          	sb	s7,0(a3)
80013504:	c95ff06f          	j	80013198 <_svfiprintf_r+0xc8>
80013508:	010d6d13          	ori	s10,s10,16
8001350c:	020d7693          	andi	a3,s10,32
80013510:	04068663          	beqz	a3,8001355c <_svfiprintf_r+0x48c>
80013514:	00748493          	addi	s1,s1,7
80013518:	ff84f493          	andi	s1,s1,-8
8001351c:	0004a883          	lw	a7,0(s1)
80013520:	0044ac83          	lw	s9,4(s1)
80013524:	00848c13          	addi	s8,s1,8
80013528:	bffd7d13          	andi	s10,s10,-1025
8001352c:	00000693          	li	a3,0
80013530:	02010da3          	sb	zero,59(sp)
80013534:	fff00613          	li	a2,-1
80013538:	42c40863          	beq	s0,a2,80013968 <_svfiprintf_r+0x898>
8001353c:	000d0613          	mv	a2,s10
80013540:	0198e5b3          	or	a1,a7,s9
80013544:	f7fd7d13          	andi	s10,s10,-129
80013548:	42059063          	bnez	a1,80013968 <_svfiprintf_r+0x898>
8001354c:	5a040463          	beqz	s0,80013af4 <_svfiprintf_r+0xa24>
80013550:	00100613          	li	a2,1
80013554:	40c69e63          	bne	a3,a2,80013970 <_svfiprintf_r+0x8a0>
80013558:	f0dff06f          	j	80013464 <_svfiprintf_r+0x394>
8001355c:	010d7693          	andi	a3,s10,16
80013560:	00448c13          	addi	s8,s1,4
80013564:	00068663          	beqz	a3,80013570 <_svfiprintf_r+0x4a0>
80013568:	0004a883          	lw	a7,0(s1)
8001356c:	0100006f          	j	8001357c <_svfiprintf_r+0x4ac>
80013570:	040d7693          	andi	a3,s10,64
80013574:	00068863          	beqz	a3,80013584 <_svfiprintf_r+0x4b4>
80013578:	0004d883          	lhu	a7,0(s1)
8001357c:	00000c93          	li	s9,0
80013580:	fa9ff06f          	j	80013528 <_svfiprintf_r+0x458>
80013584:	200d7693          	andi	a3,s10,512
80013588:	fe0680e3          	beqz	a3,80013568 <_svfiprintf_r+0x498>
8001358c:	0004c883          	lbu	a7,0(s1)
80013590:	fedff06f          	j	8001357c <_svfiprintf_r+0x4ac>
80013594:	ffff86b7          	lui	a3,0xffff8
80013598:	8306c693          	xori	a3,a3,-2000
8001359c:	02d11e23          	sh	a3,60(sp)
800135a0:	0004a883          	lw	a7,0(s1)
800135a4:	800216b7          	lui	a3,0x80021
800135a8:	d7c68793          	addi	a5,a3,-644 # 80020d7c <__stack+0xfffe42b0>
800135ac:	00448c13          	addi	s8,s1,4
800135b0:	00000c93          	li	s9,0
800135b4:	002d6d13          	ori	s10,s10,2
800135b8:	00f12423          	sw	a5,8(sp)
800135bc:	00200693          	li	a3,2
800135c0:	f71ff06f          	j	80013530 <_svfiprintf_r+0x460>
800135c4:	02010da3          	sb	zero,59(sp)
800135c8:	fff00693          	li	a3,-1
800135cc:	00e12023          	sw	a4,0(sp)
800135d0:	00448c13          	addi	s8,s1,4
800135d4:	0004a483          	lw	s1,0(s1)
800135d8:	2cd40463          	beq	s0,a3,800138a0 <_svfiprintf_r+0x7d0>
800135dc:	00040613          	mv	a2,s0
800135e0:	00000593          	li	a1,0
800135e4:	00048513          	mv	a0,s1
800135e8:	f0cfa0ef          	jal	ra,8000dcf4 <memchr>
800135ec:	00000c93          	li	s9,0
800135f0:	00012703          	lw	a4,0(sp)
800135f4:	00050463          	beqz	a0,800135fc <_svfiprintf_r+0x52c>
800135f8:	40950433          	sub	s0,a0,s1
800135fc:	01912023          	sw	s9,0(sp)
80013600:	008cd463          	ble	s0,s9,80013608 <_svfiprintf_r+0x538>
80013604:	00812023          	sw	s0,0(sp)
80013608:	03b14683          	lbu	a3,59(sp)
8001360c:	00068863          	beqz	a3,8001361c <_svfiprintf_r+0x54c>
80013610:	00012783          	lw	a5,0(sp)
80013614:	00178793          	addi	a5,a5,1
80013618:	00f12023          	sw	a5,0(sp)
8001361c:	002d7d93          	andi	s11,s10,2
80013620:	000d8863          	beqz	s11,80013630 <_svfiprintf_r+0x560>
80013624:	00012783          	lw	a5,0(sp)
80013628:	00278793          	addi	a5,a5,2
8001362c:	00f12023          	sw	a5,0(sp)
80013630:	084d7793          	andi	a5,s10,132
80013634:	00f12c23          	sw	a5,24(sp)
80013638:	06079663          	bnez	a5,800136a4 <_svfiprintf_r+0x5d4>
8001363c:	00012783          	lw	a5,0(sp)
80013640:	40fa06b3          	sub	a3,s4,a5
80013644:	06d05063          	blez	a3,800136a4 <_svfiprintf_r+0x5d4>
80013648:	800217b7          	lui	a5,0x80021
8001364c:	01000893          	li	a7,16
80013650:	b9878813          	addi	a6,a5,-1128 # 80020b98 <__stack+0xfffe40cc>
80013654:	00700313          	li	t1,7
80013658:	04412603          	lw	a2,68(sp)
8001365c:	01072023          	sw	a6,0(a4)
80013660:	04812583          	lw	a1,72(sp)
80013664:	00160613          	addi	a2,a2,1
80013668:	00870513          	addi	a0,a4,8
8001366c:	4ad8cc63          	blt	a7,a3,80013b24 <_svfiprintf_r+0xa54>
80013670:	00d72223          	sw	a3,4(a4)
80013674:	00b686b3          	add	a3,a3,a1
80013678:	04d12423          	sw	a3,72(sp)
8001367c:	04c12223          	sw	a2,68(sp)
80013680:	00700693          	li	a3,7
80013684:	00050713          	mv	a4,a0
80013688:	00c6de63          	ble	a2,a3,800136a4 <_svfiprintf_r+0x5d4>
8001368c:	04010613          	addi	a2,sp,64
80013690:	00090593          	mv	a1,s2
80013694:	000a8513          	mv	a0,s5
80013698:	871ff0ef          	jal	ra,80012f08 <__ssprint_r>
8001369c:	5c051263          	bnez	a0,80013c60 <_svfiprintf_r+0xb90>
800136a0:	000b0713          	mv	a4,s6
800136a4:	03b14683          	lbu	a3,59(sp)
800136a8:	04068863          	beqz	a3,800136f8 <_svfiprintf_r+0x628>
800136ac:	03b10613          	addi	a2,sp,59
800136b0:	00c72023          	sw	a2,0(a4)
800136b4:	00100613          	li	a2,1
800136b8:	04412683          	lw	a3,68(sp)
800136bc:	00c72223          	sw	a2,4(a4)
800136c0:	04812603          	lw	a2,72(sp)
800136c4:	00168693          	addi	a3,a3,1
800136c8:	04d12223          	sw	a3,68(sp)
800136cc:	00160613          	addi	a2,a2,1
800136d0:	04c12423          	sw	a2,72(sp)
800136d4:	00700613          	li	a2,7
800136d8:	00870713          	addi	a4,a4,8
800136dc:	00d65e63          	ble	a3,a2,800136f8 <_svfiprintf_r+0x628>
800136e0:	04010613          	addi	a2,sp,64
800136e4:	00090593          	mv	a1,s2
800136e8:	000a8513          	mv	a0,s5
800136ec:	81dff0ef          	jal	ra,80012f08 <__ssprint_r>
800136f0:	56051863          	bnez	a0,80013c60 <_svfiprintf_r+0xb90>
800136f4:	000b0713          	mv	a4,s6
800136f8:	040d8863          	beqz	s11,80013748 <_svfiprintf_r+0x678>
800136fc:	03c10613          	addi	a2,sp,60
80013700:	00c72023          	sw	a2,0(a4)
80013704:	00200613          	li	a2,2
80013708:	04412683          	lw	a3,68(sp)
8001370c:	00c72223          	sw	a2,4(a4)
80013710:	04812603          	lw	a2,72(sp)
80013714:	00168693          	addi	a3,a3,1
80013718:	04d12223          	sw	a3,68(sp)
8001371c:	00260613          	addi	a2,a2,2
80013720:	04c12423          	sw	a2,72(sp)
80013724:	00700613          	li	a2,7
80013728:	00870713          	addi	a4,a4,8
8001372c:	00d65e63          	ble	a3,a2,80013748 <_svfiprintf_r+0x678>
80013730:	04010613          	addi	a2,sp,64
80013734:	00090593          	mv	a1,s2
80013738:	000a8513          	mv	a0,s5
8001373c:	fccff0ef          	jal	ra,80012f08 <__ssprint_r>
80013740:	52051063          	bnez	a0,80013c60 <_svfiprintf_r+0xb90>
80013744:	000b0713          	mv	a4,s6
80013748:	01812783          	lw	a5,24(sp)
8001374c:	08000693          	li	a3,128
80013750:	06d79463          	bne	a5,a3,800137b8 <_svfiprintf_r+0x6e8>
80013754:	00012783          	lw	a5,0(sp)
80013758:	40fa0db3          	sub	s11,s4,a5
8001375c:	05b05e63          	blez	s11,800137b8 <_svfiprintf_r+0x6e8>
80013760:	01000813          	li	a6,16
80013764:	00700893          	li	a7,7
80013768:	01012783          	lw	a5,16(sp)
8001376c:	04412683          	lw	a3,68(sp)
80013770:	04812603          	lw	a2,72(sp)
80013774:	00f72023          	sw	a5,0(a4)
80013778:	00168693          	addi	a3,a3,1
8001377c:	00870593          	addi	a1,a4,8
80013780:	3fb84e63          	blt	a6,s11,80013b7c <_svfiprintf_r+0xaac>
80013784:	01b72223          	sw	s11,4(a4)
80013788:	00cd8db3          	add	s11,s11,a2
8001378c:	05b12423          	sw	s11,72(sp)
80013790:	04d12223          	sw	a3,68(sp)
80013794:	00700613          	li	a2,7
80013798:	00058713          	mv	a4,a1
8001379c:	00d65e63          	ble	a3,a2,800137b8 <_svfiprintf_r+0x6e8>
800137a0:	04010613          	addi	a2,sp,64
800137a4:	00090593          	mv	a1,s2
800137a8:	000a8513          	mv	a0,s5
800137ac:	f5cff0ef          	jal	ra,80012f08 <__ssprint_r>
800137b0:	4a051863          	bnez	a0,80013c60 <_svfiprintf_r+0xb90>
800137b4:	000b0713          	mv	a4,s6
800137b8:	408c8cb3          	sub	s9,s9,s0
800137bc:	05905e63          	blez	s9,80013818 <_svfiprintf_r+0x748>
800137c0:	01000d93          	li	s11,16
800137c4:	00700813          	li	a6,7
800137c8:	01012783          	lw	a5,16(sp)
800137cc:	04412683          	lw	a3,68(sp)
800137d0:	04812603          	lw	a2,72(sp)
800137d4:	00f72023          	sw	a5,0(a4)
800137d8:	00168693          	addi	a3,a3,1
800137dc:	00870593          	addi	a1,a4,8
800137e0:	3f9dc263          	blt	s11,s9,80013bc4 <_svfiprintf_r+0xaf4>
800137e4:	01972223          	sw	s9,4(a4)
800137e8:	00cc8cb3          	add	s9,s9,a2
800137ec:	05912423          	sw	s9,72(sp)
800137f0:	04d12223          	sw	a3,68(sp)
800137f4:	00700613          	li	a2,7
800137f8:	00058713          	mv	a4,a1
800137fc:	00d65e63          	ble	a3,a2,80013818 <_svfiprintf_r+0x748>
80013800:	04010613          	addi	a2,sp,64
80013804:	00090593          	mv	a1,s2
80013808:	000a8513          	mv	a0,s5
8001380c:	efcff0ef          	jal	ra,80012f08 <__ssprint_r>
80013810:	44051863          	bnez	a0,80013c60 <_svfiprintf_r+0xb90>
80013814:	000b0713          	mv	a4,s6
80013818:	04812683          	lw	a3,72(sp)
8001381c:	00872223          	sw	s0,4(a4)
80013820:	00972023          	sw	s1,0(a4)
80013824:	00868433          	add	s0,a3,s0
80013828:	04412683          	lw	a3,68(sp)
8001382c:	04812423          	sw	s0,72(sp)
80013830:	00700613          	li	a2,7
80013834:	00168693          	addi	a3,a3,1
80013838:	04d12223          	sw	a3,68(sp)
8001383c:	00870713          	addi	a4,a4,8
80013840:	00d65e63          	ble	a3,a2,8001385c <_svfiprintf_r+0x78c>
80013844:	04010613          	addi	a2,sp,64
80013848:	00090593          	mv	a1,s2
8001384c:	000a8513          	mv	a0,s5
80013850:	eb8ff0ef          	jal	ra,80012f08 <__ssprint_r>
80013854:	40051663          	bnez	a0,80013c60 <_svfiprintf_r+0xb90>
80013858:	000b0713          	mv	a4,s6
8001385c:	004d7793          	andi	a5,s10,4
80013860:	3a079263          	bnez	a5,80013c04 <_svfiprintf_r+0xb34>
80013864:	00012783          	lw	a5,0(sp)
80013868:	00fa5463          	ble	a5,s4,80013870 <_svfiprintf_r+0x7a0>
8001386c:	00078a13          	mv	s4,a5
80013870:	04812783          	lw	a5,72(sp)
80013874:	014b8bb3          	add	s7,s7,s4
80013878:	00078c63          	beqz	a5,80013890 <_svfiprintf_r+0x7c0>
8001387c:	04010613          	addi	a2,sp,64
80013880:	00090593          	mv	a1,s2
80013884:	000a8513          	mv	a0,s5
80013888:	e80ff0ef          	jal	ra,80012f08 <__ssprint_r>
8001388c:	3c051a63          	bnez	a0,80013c60 <_svfiprintf_r+0xb90>
80013890:	04012223          	sw	zero,68(sp)
80013894:	000c0493          	mv	s1,s8
80013898:	000b0713          	mv	a4,s6
8001389c:	8fdff06f          	j	80013198 <_svfiprintf_r+0xc8>
800138a0:	00048513          	mv	a0,s1
800138a4:	fb4fb0ef          	jal	ra,8000f058 <strlen>
800138a8:	00050413          	mv	s0,a0
800138ac:	00000c93          	li	s9,0
800138b0:	00012703          	lw	a4,0(sp)
800138b4:	d49ff06f          	j	800135fc <_svfiprintf_r+0x52c>
800138b8:	010d6d13          	ori	s10,s10,16
800138bc:	020d7693          	andi	a3,s10,32
800138c0:	02068063          	beqz	a3,800138e0 <_svfiprintf_r+0x810>
800138c4:	00748493          	addi	s1,s1,7
800138c8:	ff84f493          	andi	s1,s1,-8
800138cc:	0004a883          	lw	a7,0(s1)
800138d0:	0044ac83          	lw	s9,4(s1)
800138d4:	00848c13          	addi	s8,s1,8
800138d8:	00100693          	li	a3,1
800138dc:	c55ff06f          	j	80013530 <_svfiprintf_r+0x460>
800138e0:	010d7693          	andi	a3,s10,16
800138e4:	00448c13          	addi	s8,s1,4
800138e8:	00068663          	beqz	a3,800138f4 <_svfiprintf_r+0x824>
800138ec:	0004a883          	lw	a7,0(s1)
800138f0:	0100006f          	j	80013900 <_svfiprintf_r+0x830>
800138f4:	040d7693          	andi	a3,s10,64
800138f8:	00068863          	beqz	a3,80013908 <_svfiprintf_r+0x838>
800138fc:	0004d883          	lhu	a7,0(s1)
80013900:	00000c93          	li	s9,0
80013904:	fd5ff06f          	j	800138d8 <_svfiprintf_r+0x808>
80013908:	200d7693          	andi	a3,s10,512
8001390c:	fe0680e3          	beqz	a3,800138ec <_svfiprintf_r+0x81c>
80013910:	0004c883          	lbu	a7,0(s1)
80013914:	fedff06f          	j	80013900 <_svfiprintf_r+0x830>
80013918:	800216b7          	lui	a3,0x80021
8001391c:	d7c68793          	addi	a5,a3,-644 # 80020d7c <__stack+0xfffe42b0>
80013920:	93dff06f          	j	8001325c <_svfiprintf_r+0x18c>
80013924:	010d7693          	andi	a3,s10,16
80013928:	00448c13          	addi	s8,s1,4
8001392c:	00068663          	beqz	a3,80013938 <_svfiprintf_r+0x868>
80013930:	0004a883          	lw	a7,0(s1)
80013934:	0100006f          	j	80013944 <_svfiprintf_r+0x874>
80013938:	040d7693          	andi	a3,s10,64
8001393c:	00068863          	beqz	a3,8001394c <_svfiprintf_r+0x87c>
80013940:	0004d883          	lhu	a7,0(s1)
80013944:	00000c93          	li	s9,0
80013948:	935ff06f          	j	8001327c <_svfiprintf_r+0x1ac>
8001394c:	200d7693          	andi	a3,s10,512
80013950:	fe0680e3          	beqz	a3,80013930 <_svfiprintf_r+0x860>
80013954:	0004c883          	lbu	a7,0(s1)
80013958:	fedff06f          	j	80013944 <_svfiprintf_r+0x874>
8001395c:	000d0613          	mv	a2,s10
80013960:	00100693          	li	a3,1
80013964:	bddff06f          	j	80013540 <_svfiprintf_r+0x470>
80013968:	00100613          	li	a2,1
8001396c:	aec686e3          	beq	a3,a2,80013458 <_svfiprintf_r+0x388>
80013970:	00200613          	li	a2,2
80013974:	14c68463          	beq	a3,a2,80013abc <_svfiprintf_r+0x9ec>
80013978:	0f010693          	addi	a3,sp,240
8001397c:	01dc9593          	slli	a1,s9,0x1d
80013980:	0078f613          	andi	a2,a7,7
80013984:	0038d893          	srli	a7,a7,0x3
80013988:	03060613          	addi	a2,a2,48
8001398c:	0115e8b3          	or	a7,a1,a7
80013990:	003cdc93          	srli	s9,s9,0x3
80013994:	fec68fa3          	sb	a2,-1(a3)
80013998:	0198e5b3          	or	a1,a7,s9
8001399c:	fff68493          	addi	s1,a3,-1
800139a0:	02059663          	bnez	a1,800139cc <_svfiprintf_r+0x8fc>
800139a4:	001d7593          	andi	a1,s10,1
800139a8:	00058a63          	beqz	a1,800139bc <_svfiprintf_r+0x8ec>
800139ac:	03000593          	li	a1,48
800139b0:	00b60663          	beq	a2,a1,800139bc <_svfiprintf_r+0x8ec>
800139b4:	feb48fa3          	sb	a1,-1(s1)
800139b8:	ffe68493          	addi	s1,a3,-2
800139bc:	0f010793          	addi	a5,sp,240
800139c0:	00040c93          	mv	s9,s0
800139c4:	40978433          	sub	s0,a5,s1
800139c8:	c35ff06f          	j	800135fc <_svfiprintf_r+0x52c>
800139cc:	00048693          	mv	a3,s1
800139d0:	fadff06f          	j	8001397c <_svfiprintf_r+0x8ac>
800139d4:	400d7793          	andi	a5,s10,1024
800139d8:	00000d93          	li	s11,0
800139dc:	0f010e13          	addi	t3,sp,240
800139e0:	00f12023          	sw	a5,0(sp)
800139e4:	00088513          	mv	a0,a7
800139e8:	00a00613          	li	a2,10
800139ec:	00000693          	li	a3,0
800139f0:	000c8593          	mv	a1,s9
800139f4:	02e12223          	sw	a4,36(sp)
800139f8:	fffe0493          	addi	s1,t3,-1
800139fc:	03c12023          	sw	t3,32(sp)
80013a00:	01112c23          	sw	a7,24(sp)
80013a04:	119000ef          	jal	ra,8001431c <__umoddi3>
80013a08:	02012e03          	lw	t3,32(sp)
80013a0c:	00012783          	lw	a5,0(sp)
80013a10:	03050513          	addi	a0,a0,48
80013a14:	feae0fa3          	sb	a0,-1(t3)
80013a18:	001d8d93          	addi	s11,s11,1
80013a1c:	01812883          	lw	a7,24(sp)
80013a20:	02412703          	lw	a4,36(sp)
80013a24:	06078263          	beqz	a5,80013a88 <_svfiprintf_r+0x9b8>
80013a28:	00412783          	lw	a5,4(sp)
80013a2c:	0007c683          	lbu	a3,0(a5)
80013a30:	05b69c63          	bne	a3,s11,80013a88 <_svfiprintf_r+0x9b8>
80013a34:	0ff00793          	li	a5,255
80013a38:	04fd8863          	beq	s11,a5,80013a88 <_svfiprintf_r+0x9b8>
80013a3c:	000c9663          	bnez	s9,80013a48 <_svfiprintf_r+0x978>
80013a40:	00900793          	li	a5,9
80013a44:	0517f263          	bleu	a7,a5,80013a88 <_svfiprintf_r+0x9b8>
80013a48:	00c12783          	lw	a5,12(sp)
80013a4c:	01412583          	lw	a1,20(sp)
80013a50:	03112023          	sw	a7,32(sp)
80013a54:	40f484b3          	sub	s1,s1,a5
80013a58:	00078613          	mv	a2,a5
80013a5c:	00048513          	mv	a0,s1
80013a60:	00e12c23          	sw	a4,24(sp)
80013a64:	e10fb0ef          	jal	ra,8000f074 <strncpy>
80013a68:	00412783          	lw	a5,4(sp)
80013a6c:	00000d93          	li	s11,0
80013a70:	01812703          	lw	a4,24(sp)
80013a74:	0017c683          	lbu	a3,1(a5)
80013a78:	02012883          	lw	a7,32(sp)
80013a7c:	00068663          	beqz	a3,80013a88 <_svfiprintf_r+0x9b8>
80013a80:	00178793          	addi	a5,a5,1
80013a84:	00f12223          	sw	a5,4(sp)
80013a88:	00088513          	mv	a0,a7
80013a8c:	000c8593          	mv	a1,s9
80013a90:	00a00613          	li	a2,10
80013a94:	00000693          	li	a3,0
80013a98:	00e12c23          	sw	a4,24(sp)
80013a9c:	44c000ef          	jal	ra,80013ee8 <__udivdi3>
80013aa0:	00058c93          	mv	s9,a1
80013aa4:	00a5e5b3          	or	a1,a1,a0
80013aa8:	00050893          	mv	a7,a0
80013aac:	01812703          	lw	a4,24(sp)
80013ab0:	f00586e3          	beqz	a1,800139bc <_svfiprintf_r+0x8ec>
80013ab4:	00048e13          	mv	t3,s1
80013ab8:	f2dff06f          	j	800139e4 <_svfiprintf_r+0x914>
80013abc:	0f010493          	addi	s1,sp,240
80013ac0:	00812783          	lw	a5,8(sp)
80013ac4:	00f8f693          	andi	a3,a7,15
80013ac8:	fff48493          	addi	s1,s1,-1
80013acc:	00d786b3          	add	a3,a5,a3
80013ad0:	0006c683          	lbu	a3,0(a3)
80013ad4:	0048d893          	srli	a7,a7,0x4
80013ad8:	00d48023          	sb	a3,0(s1)
80013adc:	01cc9693          	slli	a3,s9,0x1c
80013ae0:	0116e8b3          	or	a7,a3,a7
80013ae4:	004cdc93          	srli	s9,s9,0x4
80013ae8:	0198e6b3          	or	a3,a7,s9
80013aec:	fc069ae3          	bnez	a3,80013ac0 <_svfiprintf_r+0x9f0>
80013af0:	ecdff06f          	j	800139bc <_svfiprintf_r+0x8ec>
80013af4:	0f010493          	addi	s1,sp,240
80013af8:	ec0692e3          	bnez	a3,800139bc <_svfiprintf_r+0x8ec>
80013afc:	00167613          	andi	a2,a2,1
80013b00:	ea060ee3          	beqz	a2,800139bc <_svfiprintf_r+0x8ec>
80013b04:	03000693          	li	a3,48
80013b08:	0ed107a3          	sb	a3,239(sp)
80013b0c:	961ff06f          	j	8001346c <_svfiprintf_r+0x39c>
80013b10:	1c060a63          	beqz	a2,80013ce4 <_svfiprintf_r+0xc14>
80013b14:	08c10623          	sb	a2,140(sp)
80013b18:	02010da3          	sb	zero,59(sp)
80013b1c:	00048c13          	mv	s8,s1
80013b20:	8e5ff06f          	j	80013404 <_svfiprintf_r+0x334>
80013b24:	01058593          	addi	a1,a1,16
80013b28:	01172223          	sw	a7,4(a4)
80013b2c:	04b12423          	sw	a1,72(sp)
80013b30:	04c12223          	sw	a2,68(sp)
80013b34:	02c35e63          	ble	a2,t1,80013b70 <_svfiprintf_r+0xaa0>
80013b38:	04010613          	addi	a2,sp,64
80013b3c:	00090593          	mv	a1,s2
80013b40:	000a8513          	mv	a0,s5
80013b44:	02612623          	sw	t1,44(sp)
80013b48:	03012423          	sw	a6,40(sp)
80013b4c:	03112223          	sw	a7,36(sp)
80013b50:	02d12023          	sw	a3,32(sp)
80013b54:	bb4ff0ef          	jal	ra,80012f08 <__ssprint_r>
80013b58:	10051463          	bnez	a0,80013c60 <_svfiprintf_r+0xb90>
80013b5c:	02c12303          	lw	t1,44(sp)
80013b60:	02812803          	lw	a6,40(sp)
80013b64:	02412883          	lw	a7,36(sp)
80013b68:	02012683          	lw	a3,32(sp)
80013b6c:	000b0513          	mv	a0,s6
80013b70:	ff068693          	addi	a3,a3,-16
80013b74:	00050713          	mv	a4,a0
80013b78:	ae1ff06f          	j	80013658 <_svfiprintf_r+0x588>
80013b7c:	01060613          	addi	a2,a2,16
80013b80:	01072223          	sw	a6,4(a4)
80013b84:	04c12423          	sw	a2,72(sp)
80013b88:	04d12223          	sw	a3,68(sp)
80013b8c:	02d8d663          	ble	a3,a7,80013bb8 <_svfiprintf_r+0xae8>
80013b90:	04010613          	addi	a2,sp,64
80013b94:	00090593          	mv	a1,s2
80013b98:	000a8513          	mv	a0,s5
80013b9c:	03112023          	sw	a7,32(sp)
80013ba0:	01012c23          	sw	a6,24(sp)
80013ba4:	b64ff0ef          	jal	ra,80012f08 <__ssprint_r>
80013ba8:	0a051c63          	bnez	a0,80013c60 <_svfiprintf_r+0xb90>
80013bac:	02012883          	lw	a7,32(sp)
80013bb0:	01812803          	lw	a6,24(sp)
80013bb4:	000b0593          	mv	a1,s6
80013bb8:	ff0d8d93          	addi	s11,s11,-16
80013bbc:	00058713          	mv	a4,a1
80013bc0:	ba9ff06f          	j	80013768 <_svfiprintf_r+0x698>
80013bc4:	01060613          	addi	a2,a2,16
80013bc8:	01b72223          	sw	s11,4(a4)
80013bcc:	04c12423          	sw	a2,72(sp)
80013bd0:	04d12223          	sw	a3,68(sp)
80013bd4:	02d85263          	ble	a3,a6,80013bf8 <_svfiprintf_r+0xb28>
80013bd8:	04010613          	addi	a2,sp,64
80013bdc:	00090593          	mv	a1,s2
80013be0:	000a8513          	mv	a0,s5
80013be4:	01012c23          	sw	a6,24(sp)
80013be8:	b20ff0ef          	jal	ra,80012f08 <__ssprint_r>
80013bec:	06051a63          	bnez	a0,80013c60 <_svfiprintf_r+0xb90>
80013bf0:	01812803          	lw	a6,24(sp)
80013bf4:	000b0593          	mv	a1,s6
80013bf8:	ff0c8c93          	addi	s9,s9,-16
80013bfc:	00058713          	mv	a4,a1
80013c00:	bc9ff06f          	j	800137c8 <_svfiprintf_r+0x6f8>
80013c04:	00012783          	lw	a5,0(sp)
80013c08:	40fa0433          	sub	s0,s4,a5
80013c0c:	c4805ce3          	blez	s0,80013864 <_svfiprintf_r+0x794>
80013c10:	800217b7          	lui	a5,0x80021
80013c14:	01000c93          	li	s9,16
80013c18:	b9878493          	addi	s1,a5,-1128 # 80020b98 <__stack+0xfffe40cc>
80013c1c:	00700d93          	li	s11,7
80013c20:	04412783          	lw	a5,68(sp)
80013c24:	00972023          	sw	s1,0(a4)
80013c28:	04812683          	lw	a3,72(sp)
80013c2c:	00178793          	addi	a5,a5,1
80013c30:	068cce63          	blt	s9,s0,80013cac <_svfiprintf_r+0xbdc>
80013c34:	00872223          	sw	s0,4(a4)
80013c38:	00d40433          	add	s0,s0,a3
80013c3c:	04812423          	sw	s0,72(sp)
80013c40:	04f12223          	sw	a5,68(sp)
80013c44:	00700713          	li	a4,7
80013c48:	c0f75ee3          	ble	a5,a4,80013864 <_svfiprintf_r+0x794>
80013c4c:	04010613          	addi	a2,sp,64
80013c50:	00090593          	mv	a1,s2
80013c54:	000a8513          	mv	a0,s5
80013c58:	ab0ff0ef          	jal	ra,80012f08 <__ssprint_r>
80013c5c:	c00504e3          	beqz	a0,80013864 <_svfiprintf_r+0x794>
80013c60:	00c95783          	lhu	a5,12(s2)
80013c64:	0407f793          	andi	a5,a5,64
80013c68:	ce079063          	bnez	a5,80013148 <_svfiprintf_r+0x78>
80013c6c:	12c12083          	lw	ra,300(sp)
80013c70:	12812403          	lw	s0,296(sp)
80013c74:	000b8513          	mv	a0,s7
80013c78:	12412483          	lw	s1,292(sp)
80013c7c:	12012903          	lw	s2,288(sp)
80013c80:	11c12983          	lw	s3,284(sp)
80013c84:	11812a03          	lw	s4,280(sp)
80013c88:	11412a83          	lw	s5,276(sp)
80013c8c:	11012b03          	lw	s6,272(sp)
80013c90:	10c12b83          	lw	s7,268(sp)
80013c94:	10812c03          	lw	s8,264(sp)
80013c98:	10412c83          	lw	s9,260(sp)
80013c9c:	10012d03          	lw	s10,256(sp)
80013ca0:	0fc12d83          	lw	s11,252(sp)
80013ca4:	13010113          	addi	sp,sp,304
80013ca8:	00008067          	ret
80013cac:	01068693          	addi	a3,a3,16
80013cb0:	01972223          	sw	s9,4(a4)
80013cb4:	04d12423          	sw	a3,72(sp)
80013cb8:	04f12223          	sw	a5,68(sp)
80013cbc:	00870713          	addi	a4,a4,8
80013cc0:	00fdde63          	ble	a5,s11,80013cdc <_svfiprintf_r+0xc0c>
80013cc4:	04010613          	addi	a2,sp,64
80013cc8:	00090593          	mv	a1,s2
80013ccc:	000a8513          	mv	a0,s5
80013cd0:	a38ff0ef          	jal	ra,80012f08 <__ssprint_r>
80013cd4:	f80516e3          	bnez	a0,80013c60 <_svfiprintf_r+0xb90>
80013cd8:	000b0713          	mv	a4,s6
80013cdc:	ff040413          	addi	s0,s0,-16
80013ce0:	f41ff06f          	j	80013c20 <_svfiprintf_r+0xb50>
80013ce4:	04812783          	lw	a5,72(sp)
80013ce8:	f6078ce3          	beqz	a5,80013c60 <_svfiprintf_r+0xb90>
80013cec:	04010613          	addi	a2,sp,64
80013cf0:	00090593          	mv	a1,s2
80013cf4:	000a8513          	mv	a0,s5
80013cf8:	a10ff0ef          	jal	ra,80012f08 <__ssprint_r>
80013cfc:	f65ff06f          	j	80013c60 <_svfiprintf_r+0xb90>

80013d00 <__swbuf_r>:
80013d00:	fe010113          	addi	sp,sp,-32
80013d04:	00812c23          	sw	s0,24(sp)
80013d08:	00912a23          	sw	s1,20(sp)
80013d0c:	01212823          	sw	s2,16(sp)
80013d10:	00112e23          	sw	ra,28(sp)
80013d14:	01312623          	sw	s3,12(sp)
80013d18:	00050913          	mv	s2,a0
80013d1c:	00058493          	mv	s1,a1
80013d20:	00060413          	mv	s0,a2
80013d24:	00050863          	beqz	a0,80013d34 <__swbuf_r+0x34>
80013d28:	03852783          	lw	a5,56(a0)
80013d2c:	00079463          	bnez	a5,80013d34 <__swbuf_r+0x34>
80013d30:	fb1f60ef          	jal	ra,8000ace0 <__sinit>
80013d34:	01842783          	lw	a5,24(s0)
80013d38:	00f42423          	sw	a5,8(s0)
80013d3c:	00c45783          	lhu	a5,12(s0)
80013d40:	0087f793          	andi	a5,a5,8
80013d44:	08078a63          	beqz	a5,80013dd8 <__swbuf_r+0xd8>
80013d48:	01042783          	lw	a5,16(s0)
80013d4c:	08078663          	beqz	a5,80013dd8 <__swbuf_r+0xd8>
80013d50:	00c41783          	lh	a5,12(s0)
80013d54:	0ff4f993          	andi	s3,s1,255
80013d58:	0ff4f493          	andi	s1,s1,255
80013d5c:	01279713          	slli	a4,a5,0x12
80013d60:	0a075663          	bgez	a4,80013e0c <__swbuf_r+0x10c>
80013d64:	01042783          	lw	a5,16(s0)
80013d68:	00042503          	lw	a0,0(s0)
80013d6c:	40f50533          	sub	a0,a0,a5
80013d70:	01442783          	lw	a5,20(s0)
80013d74:	00f54a63          	blt	a0,a5,80013d88 <__swbuf_r+0x88>
80013d78:	00040593          	mv	a1,s0
80013d7c:	00090513          	mv	a0,s2
80013d80:	dc5f60ef          	jal	ra,8000ab44 <_fflush_r>
80013d84:	06051263          	bnez	a0,80013de8 <__swbuf_r+0xe8>
80013d88:	00842783          	lw	a5,8(s0)
80013d8c:	00150513          	addi	a0,a0,1
80013d90:	fff78793          	addi	a5,a5,-1
80013d94:	00f42423          	sw	a5,8(s0)
80013d98:	00042783          	lw	a5,0(s0)
80013d9c:	00178713          	addi	a4,a5,1
80013da0:	00e42023          	sw	a4,0(s0)
80013da4:	01378023          	sb	s3,0(a5)
80013da8:	01442783          	lw	a5,20(s0)
80013dac:	00a78c63          	beq	a5,a0,80013dc4 <__swbuf_r+0xc4>
80013db0:	00c45783          	lhu	a5,12(s0)
80013db4:	0017f793          	andi	a5,a5,1
80013db8:	02078a63          	beqz	a5,80013dec <__swbuf_r+0xec>
80013dbc:	00a00793          	li	a5,10
80013dc0:	02f49663          	bne	s1,a5,80013dec <__swbuf_r+0xec>
80013dc4:	00040593          	mv	a1,s0
80013dc8:	00090513          	mv	a0,s2
80013dcc:	d79f60ef          	jal	ra,8000ab44 <_fflush_r>
80013dd0:	00050e63          	beqz	a0,80013dec <__swbuf_r+0xec>
80013dd4:	0140006f          	j	80013de8 <__swbuf_r+0xe8>
80013dd8:	00040593          	mv	a1,s0
80013ddc:	00090513          	mv	a0,s2
80013de0:	a25f60ef          	jal	ra,8000a804 <__swsetup_r>
80013de4:	f60506e3          	beqz	a0,80013d50 <__swbuf_r+0x50>
80013de8:	fff00493          	li	s1,-1
80013dec:	01c12083          	lw	ra,28(sp)
80013df0:	01812403          	lw	s0,24(sp)
80013df4:	00048513          	mv	a0,s1
80013df8:	01012903          	lw	s2,16(sp)
80013dfc:	01412483          	lw	s1,20(sp)
80013e00:	00c12983          	lw	s3,12(sp)
80013e04:	02010113          	addi	sp,sp,32
80013e08:	00008067          	ret
80013e0c:	00002737          	lui	a4,0x2
80013e10:	00e7e7b3          	or	a5,a5,a4
80013e14:	00f41623          	sh	a5,12(s0)
80013e18:	06442783          	lw	a5,100(s0)
80013e1c:	ffffe737          	lui	a4,0xffffe
80013e20:	fff70713          	addi	a4,a4,-1 # ffffdfff <__stack+0x7ffc1533>
80013e24:	00e7f7b3          	and	a5,a5,a4
80013e28:	06f42223          	sw	a5,100(s0)
80013e2c:	f39ff06f          	j	80013d64 <__swbuf_r+0x64>

80013e30 <__swbuf>:
80013e30:	800217b7          	lui	a5,0x80021
80013e34:	00058613          	mv	a2,a1
80013e38:	00050593          	mv	a1,a0
80013e3c:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
80013e40:	ec1ff06f          	j	80013d00 <__swbuf_r>

80013e44 <_wcrtomb_r>:
80013e44:	800217b7          	lui	a5,0x80021
80013e48:	e647a783          	lw	a5,-412(a5) # 80020e64 <__stack+0xfffe4398>
80013e4c:	fe010113          	addi	sp,sp,-32
80013e50:	00812c23          	sw	s0,24(sp)
80013e54:	00912a23          	sw	s1,20(sp)
80013e58:	00112e23          	sw	ra,28(sp)
80013e5c:	00050413          	mv	s0,a0
80013e60:	00068493          	mv	s1,a3
80013e64:	0347a783          	lw	a5,52(a5)
80013e68:	04059863          	bnez	a1,80013eb8 <_wcrtomb_r+0x74>
80013e6c:	00079663          	bnez	a5,80013e78 <_wcrtomb_r+0x34>
80013e70:	800217b7          	lui	a5,0x80021
80013e74:	29878793          	addi	a5,a5,664 # 80021298 <__stack+0xfffe47cc>
80013e78:	0e07a783          	lw	a5,224(a5)
80013e7c:	00048693          	mv	a3,s1
80013e80:	00000613          	li	a2,0
80013e84:	00410593          	addi	a1,sp,4
80013e88:	00040513          	mv	a0,s0
80013e8c:	000780e7          	jalr	a5
80013e90:	fff00793          	li	a5,-1
80013e94:	00f51863          	bne	a0,a5,80013ea4 <_wcrtomb_r+0x60>
80013e98:	0004a023          	sw	zero,0(s1)
80013e9c:	08a00793          	li	a5,138
80013ea0:	00f42023          	sw	a5,0(s0)
80013ea4:	01c12083          	lw	ra,28(sp)
80013ea8:	01812403          	lw	s0,24(sp)
80013eac:	01412483          	lw	s1,20(sp)
80013eb0:	02010113          	addi	sp,sp,32
80013eb4:	00008067          	ret
80013eb8:	00079663          	bnez	a5,80013ec4 <_wcrtomb_r+0x80>
80013ebc:	800217b7          	lui	a5,0x80021
80013ec0:	29878793          	addi	a5,a5,664 # 80021298 <__stack+0xfffe47cc>
80013ec4:	0e07a783          	lw	a5,224(a5)
80013ec8:	00048693          	mv	a3,s1
80013ecc:	fbdff06f          	j	80013e88 <_wcrtomb_r+0x44>

80013ed0 <wcrtomb>:
80013ed0:	800217b7          	lui	a5,0x80021
80013ed4:	00060693          	mv	a3,a2
80013ed8:	00058613          	mv	a2,a1
80013edc:	00050593          	mv	a1,a0
80013ee0:	e647a503          	lw	a0,-412(a5) # 80020e64 <__stack+0xfffe4398>
80013ee4:	f61ff06f          	j	80013e44 <_wcrtomb_r>

80013ee8 <__udivdi3>:
#endif

#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
80013ee8:	00058793          	mv	a5,a1
  d0 = dd.s.low;
80013eec:	00060813          	mv	a6,a2
  d1 = dd.s.high;
80013ef0:	00068893          	mv	a7,a3
  n0 = nn.s.low;
80013ef4:	00050313          	mv	t1,a0
  if (d1 == 0)
80013ef8:	28069663          	bnez	a3,80014184 <__udivdi3+0x29c>
80013efc:	80021737          	lui	a4,0x80021
80013f00:	c6c70713          	addi	a4,a4,-916 # 80020c6c <__stack+0xfffe41a0>
      if (d0 > n1)
80013f04:	0ec5f663          	bleu	a2,a1,80013ff0 <__udivdi3+0x108>
	  count_leading_zeros (bm, d0);
80013f08:	000106b7          	lui	a3,0x10
80013f0c:	0cd67863          	bleu	a3,a2,80013fdc <__udivdi3+0xf4>
80013f10:	0ff00693          	li	a3,255
80013f14:	00c6b6b3          	sltu	a3,a3,a2
80013f18:	00369693          	slli	a3,a3,0x3
80013f1c:	00d658b3          	srl	a7,a2,a3
80013f20:	01170733          	add	a4,a4,a7
80013f24:	00074703          	lbu	a4,0(a4)
80013f28:	00d706b3          	add	a3,a4,a3
80013f2c:	02000713          	li	a4,32
80013f30:	40d70733          	sub	a4,a4,a3
	  if (bm != 0)
80013f34:	00070c63          	beqz	a4,80013f4c <__udivdi3+0x64>
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
80013f38:	00e797b3          	sll	a5,a5,a4
80013f3c:	00d556b3          	srl	a3,a0,a3
	      d0 = d0 << bm;
80013f40:	00e61833          	sll	a6,a2,a4
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
80013f44:	00f6e5b3          	or	a1,a3,a5
	      n0 = n0 << bm;
80013f48:	00e51333          	sll	t1,a0,a4
	  udiv_qrnnd (q0, n0, n1, n0, d0);
80013f4c:	01085513          	srli	a0,a6,0x10
80013f50:	02a5d7b3          	divu	a5,a1,a0
80013f54:	01081613          	slli	a2,a6,0x10
80013f58:	01065613          	srli	a2,a2,0x10
80013f5c:	01035693          	srli	a3,t1,0x10
80013f60:	02a5f733          	remu	a4,a1,a0
80013f64:	02f605b3          	mul	a1,a2,a5
80013f68:	01071713          	slli	a4,a4,0x10
80013f6c:	00d766b3          	or	a3,a4,a3
80013f70:	00078713          	mv	a4,a5
80013f74:	00b6fe63          	bleu	a1,a3,80013f90 <__udivdi3+0xa8>
80013f78:	010686b3          	add	a3,a3,a6
80013f7c:	fff78713          	addi	a4,a5,-1
80013f80:	0106e863          	bltu	a3,a6,80013f90 <__udivdi3+0xa8>
80013f84:	00b6f663          	bleu	a1,a3,80013f90 <__udivdi3+0xa8>
80013f88:	ffe78713          	addi	a4,a5,-2
80013f8c:	010686b3          	add	a3,a3,a6
80013f90:	40b686b3          	sub	a3,a3,a1
80013f94:	02a6f7b3          	remu	a5,a3,a0
80013f98:	01031313          	slli	t1,t1,0x10
80013f9c:	01035313          	srli	t1,t1,0x10
80013fa0:	02a6d6b3          	divu	a3,a3,a0
80013fa4:	01079793          	slli	a5,a5,0x10
80013fa8:	0067e333          	or	t1,a5,t1
80013fac:	02d605b3          	mul	a1,a2,a3
80013fb0:	00068513          	mv	a0,a3
80013fb4:	00b37c63          	bleu	a1,t1,80013fcc <__udivdi3+0xe4>
80013fb8:	00680333          	add	t1,a6,t1
80013fbc:	fff68513          	addi	a0,a3,-1 # ffff <_HEAP_SIZE+0xefff>
80013fc0:	01036663          	bltu	t1,a6,80013fcc <__udivdi3+0xe4>
80013fc4:	00b37463          	bleu	a1,t1,80013fcc <__udivdi3+0xe4>
80013fc8:	ffe68513          	addi	a0,a3,-2
80013fcc:	01071713          	slli	a4,a4,0x10
80013fd0:	00a76733          	or	a4,a4,a0
	      q1 = 0;
80013fd4:	00000593          	li	a1,0
80013fd8:	0e40006f          	j	800140bc <__udivdi3+0x1d4>
	  count_leading_zeros (bm, d0);
80013fdc:	010008b7          	lui	a7,0x1000
80013fe0:	01000693          	li	a3,16
80013fe4:	f3166ce3          	bltu	a2,a7,80013f1c <__udivdi3+0x34>
80013fe8:	01800693          	li	a3,24
80013fec:	f31ff06f          	j	80013f1c <__udivdi3+0x34>
	  if (d0 == 0)
80013ff0:	00061663          	bnez	a2,80013ffc <__udivdi3+0x114>
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
80013ff4:	00100693          	li	a3,1
80013ff8:	02c6d833          	divu	a6,a3,a2
	  count_leading_zeros (bm, d0);
80013ffc:	000106b7          	lui	a3,0x10
80014000:	0cd87263          	bleu	a3,a6,800140c4 <__udivdi3+0x1dc>
80014004:	0ff00693          	li	a3,255
80014008:	0106f463          	bleu	a6,a3,80014010 <__udivdi3+0x128>
8001400c:	00800893          	li	a7,8
80014010:	011856b3          	srl	a3,a6,a7
80014014:	00d70733          	add	a4,a4,a3
80014018:	00074683          	lbu	a3,0(a4)
8001401c:	02000713          	li	a4,32
80014020:	011686b3          	add	a3,a3,a7
80014024:	40d70733          	sub	a4,a4,a3
	  if (bm == 0)
80014028:	0a071863          	bnez	a4,800140d8 <__udivdi3+0x1f0>
	      n1 -= d0;
8001402c:	410787b3          	sub	a5,a5,a6
	      q1 = 1;
80014030:	00100593          	li	a1,1
	  udiv_qrnnd (q0, n0, n1, n0, d0);
80014034:	01085613          	srli	a2,a6,0x10
80014038:	01081893          	slli	a7,a6,0x10
8001403c:	0108d893          	srli	a7,a7,0x10
80014040:	01035693          	srli	a3,t1,0x10
80014044:	02c7f733          	remu	a4,a5,a2
80014048:	02c7d7b3          	divu	a5,a5,a2
8001404c:	01071713          	slli	a4,a4,0x10
80014050:	00d766b3          	or	a3,a4,a3
80014054:	02f88533          	mul	a0,a7,a5
80014058:	00078713          	mv	a4,a5
8001405c:	00a6fe63          	bleu	a0,a3,80014078 <__udivdi3+0x190>
80014060:	010686b3          	add	a3,a3,a6
80014064:	fff78713          	addi	a4,a5,-1
80014068:	0106e863          	bltu	a3,a6,80014078 <__udivdi3+0x190>
8001406c:	00a6f663          	bleu	a0,a3,80014078 <__udivdi3+0x190>
80014070:	ffe78713          	addi	a4,a5,-2
80014074:	010686b3          	add	a3,a3,a6
80014078:	40a686b3          	sub	a3,a3,a0
8001407c:	02c6f7b3          	remu	a5,a3,a2
80014080:	01031313          	slli	t1,t1,0x10
80014084:	01035313          	srli	t1,t1,0x10
80014088:	02c6d6b3          	divu	a3,a3,a2
8001408c:	01079793          	slli	a5,a5,0x10
80014090:	0067e333          	or	t1,a5,t1
80014094:	02d888b3          	mul	a7,a7,a3
80014098:	00068513          	mv	a0,a3
8001409c:	01137c63          	bleu	a7,t1,800140b4 <__udivdi3+0x1cc>
800140a0:	00680333          	add	t1,a6,t1
800140a4:	fff68513          	addi	a0,a3,-1 # ffff <_HEAP_SIZE+0xefff>
800140a8:	01036663          	bltu	t1,a6,800140b4 <__udivdi3+0x1cc>
800140ac:	01137463          	bleu	a7,t1,800140b4 <__udivdi3+0x1cc>
800140b0:	ffe68513          	addi	a0,a3,-2
800140b4:	01071713          	slli	a4,a4,0x10
800140b8:	00a76733          	or	a4,a4,a0
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
800140bc:	00070513          	mv	a0,a4
800140c0:	00008067          	ret
	  count_leading_zeros (bm, d0);
800140c4:	010006b7          	lui	a3,0x1000
800140c8:	01000893          	li	a7,16
800140cc:	f4d862e3          	bltu	a6,a3,80014010 <__udivdi3+0x128>
800140d0:	01800893          	li	a7,24
800140d4:	f3dff06f          	j	80014010 <__udivdi3+0x128>
	      d0 = d0 << bm;
800140d8:	00e81833          	sll	a6,a6,a4
	      n2 = n1 >> b;
800140dc:	00d7d5b3          	srl	a1,a5,a3
	      n0 = n0 << bm;
800140e0:	00e51333          	sll	t1,a0,a4
	      n1 = (n1 << bm) | (n0 >> b);
800140e4:	00d556b3          	srl	a3,a0,a3
	      udiv_qrnnd (q1, n1, n2, n1, d0);
800140e8:	01085513          	srli	a0,a6,0x10
	      n1 = (n1 << bm) | (n0 >> b);
800140ec:	00e797b3          	sll	a5,a5,a4
	      udiv_qrnnd (q1, n1, n2, n1, d0);
800140f0:	02a5f733          	remu	a4,a1,a0
	      n1 = (n1 << bm) | (n0 >> b);
800140f4:	00f6e8b3          	or	a7,a3,a5
	      udiv_qrnnd (q1, n1, n2, n1, d0);
800140f8:	01081793          	slli	a5,a6,0x10
800140fc:	0107d793          	srli	a5,a5,0x10
80014100:	0108d613          	srli	a2,a7,0x10
80014104:	02a5d5b3          	divu	a1,a1,a0
80014108:	01071713          	slli	a4,a4,0x10
8001410c:	00c76733          	or	a4,a4,a2
80014110:	02b786b3          	mul	a3,a5,a1
80014114:	00058613          	mv	a2,a1
80014118:	00d77e63          	bleu	a3,a4,80014134 <__udivdi3+0x24c>
8001411c:	01070733          	add	a4,a4,a6
80014120:	fff58613          	addi	a2,a1,-1
80014124:	01076863          	bltu	a4,a6,80014134 <__udivdi3+0x24c>
80014128:	00d77663          	bleu	a3,a4,80014134 <__udivdi3+0x24c>
8001412c:	ffe58613          	addi	a2,a1,-2
80014130:	01070733          	add	a4,a4,a6
80014134:	40d706b3          	sub	a3,a4,a3
80014138:	02a6f733          	remu	a4,a3,a0
8001413c:	01089893          	slli	a7,a7,0x10
80014140:	0108d893          	srli	a7,a7,0x10
80014144:	02a6d6b3          	divu	a3,a3,a0
80014148:	01071713          	slli	a4,a4,0x10
8001414c:	02d785b3          	mul	a1,a5,a3
80014150:	011767b3          	or	a5,a4,a7
80014154:	00068713          	mv	a4,a3
80014158:	00b7fe63          	bleu	a1,a5,80014174 <__udivdi3+0x28c>
8001415c:	010787b3          	add	a5,a5,a6
80014160:	fff68713          	addi	a4,a3,-1 # ffffff <_HEAP_SIZE+0xffefff>
80014164:	0107e863          	bltu	a5,a6,80014174 <__udivdi3+0x28c>
80014168:	00b7f663          	bleu	a1,a5,80014174 <__udivdi3+0x28c>
8001416c:	ffe68713          	addi	a4,a3,-2
80014170:	010787b3          	add	a5,a5,a6
80014174:	40b787b3          	sub	a5,a5,a1
80014178:	01061593          	slli	a1,a2,0x10
8001417c:	00e5e5b3          	or	a1,a1,a4
80014180:	eb5ff06f          	j	80014034 <__udivdi3+0x14c>
      if (d1 > n1)
80014184:	18d5e663          	bltu	a1,a3,80014310 <__udivdi3+0x428>
	  count_leading_zeros (bm, d1);
80014188:	00010737          	lui	a4,0x10
8001418c:	04e6f463          	bleu	a4,a3,800141d4 <__udivdi3+0x2ec>
80014190:	0ff00813          	li	a6,255
80014194:	00d83733          	sltu	a4,a6,a3
80014198:	00371713          	slli	a4,a4,0x3
8001419c:	80021837          	lui	a6,0x80021
800141a0:	c6c80813          	addi	a6,a6,-916 # 80020c6c <__stack+0xfffe41a0>
800141a4:	00e6d5b3          	srl	a1,a3,a4
800141a8:	010585b3          	add	a1,a1,a6
800141ac:	0005c803          	lbu	a6,0(a1)
800141b0:	02000593          	li	a1,32
800141b4:	00e80833          	add	a6,a6,a4
800141b8:	410585b3          	sub	a1,a1,a6
	  if (bm == 0)
800141bc:	02059663          	bnez	a1,800141e8 <__udivdi3+0x300>
		  q0 = 1;
800141c0:	00100713          	li	a4,1
	      if (n1 > d1 || n0 >= d0)
800141c4:	eef6ece3          	bltu	a3,a5,800140bc <__udivdi3+0x1d4>
800141c8:	00c53533          	sltu	a0,a0,a2
800141cc:	00154713          	xori	a4,a0,1
800141d0:	eedff06f          	j	800140bc <__udivdi3+0x1d4>
	  count_leading_zeros (bm, d1);
800141d4:	010005b7          	lui	a1,0x1000
800141d8:	01000713          	li	a4,16
800141dc:	fcb6e0e3          	bltu	a3,a1,8001419c <__udivdi3+0x2b4>
800141e0:	01800713          	li	a4,24
800141e4:	fb9ff06f          	j	8001419c <__udivdi3+0x2b4>
	      d1 = (d1 << bm) | (d0 >> b);
800141e8:	01065733          	srl	a4,a2,a6
800141ec:	00b696b3          	sll	a3,a3,a1
800141f0:	00d766b3          	or	a3,a4,a3
	      udiv_qrnnd (q0, n1, n2, n1, d1);
800141f4:	0106de93          	srli	t4,a3,0x10
	      n2 = n1 >> b;
800141f8:	0107d733          	srl	a4,a5,a6
	      udiv_qrnnd (q0, n1, n2, n1, d1);
800141fc:	03d778b3          	remu	a7,a4,t4
	      n1 = (n1 << bm) | (n0 >> b);
80014200:	00b797b3          	sll	a5,a5,a1
80014204:	01055833          	srl	a6,a0,a6
80014208:	00f86333          	or	t1,a6,a5
	      udiv_qrnnd (q0, n1, n2, n1, d1);
8001420c:	01069793          	slli	a5,a3,0x10
80014210:	0107d793          	srli	a5,a5,0x10
80014214:	01035813          	srli	a6,t1,0x10
	      d0 = d0 << bm;
80014218:	00b61633          	sll	a2,a2,a1
	      udiv_qrnnd (q0, n1, n2, n1, d1);
8001421c:	03d75733          	divu	a4,a4,t4
80014220:	01089893          	slli	a7,a7,0x10
80014224:	0108e833          	or	a6,a7,a6
80014228:	02e78f33          	mul	t5,a5,a4
8001422c:	00070e13          	mv	t3,a4
80014230:	01e87e63          	bleu	t5,a6,8001424c <__udivdi3+0x364>
80014234:	00d80833          	add	a6,a6,a3
80014238:	fff70e13          	addi	t3,a4,-1 # ffff <_HEAP_SIZE+0xefff>
8001423c:	00d86863          	bltu	a6,a3,8001424c <__udivdi3+0x364>
80014240:	01e87663          	bleu	t5,a6,8001424c <__udivdi3+0x364>
80014244:	ffe70e13          	addi	t3,a4,-2
80014248:	00d80833          	add	a6,a6,a3
8001424c:	41e80833          	sub	a6,a6,t5
80014250:	03d878b3          	remu	a7,a6,t4
80014254:	03d85833          	divu	a6,a6,t4
80014258:	01089893          	slli	a7,a7,0x10
8001425c:	03078eb3          	mul	t4,a5,a6
80014260:	01031793          	slli	a5,t1,0x10
80014264:	0107d793          	srli	a5,a5,0x10
80014268:	00f8e7b3          	or	a5,a7,a5
8001426c:	00080713          	mv	a4,a6
80014270:	01d7fe63          	bleu	t4,a5,8001428c <__udivdi3+0x3a4>
80014274:	00d787b3          	add	a5,a5,a3
80014278:	fff80713          	addi	a4,a6,-1
8001427c:	00d7e863          	bltu	a5,a3,8001428c <__udivdi3+0x3a4>
80014280:	01d7f663          	bleu	t4,a5,8001428c <__udivdi3+0x3a4>
80014284:	ffe80713          	addi	a4,a6,-2
80014288:	00d787b3          	add	a5,a5,a3
8001428c:	010e1e13          	slli	t3,t3,0x10
80014290:	41d787b3          	sub	a5,a5,t4
	      umul_ppmm (m1, m0, q0, d0);
80014294:	00010eb7          	lui	t4,0x10
	      udiv_qrnnd (q0, n1, n2, n1, d1);
80014298:	00ee6733          	or	a4,t3,a4
	      umul_ppmm (m1, m0, q0, d0);
8001429c:	fffe8813          	addi	a6,t4,-1 # ffff <_HEAP_SIZE+0xefff>
800142a0:	01077333          	and	t1,a4,a6
800142a4:	01075893          	srli	a7,a4,0x10
800142a8:	01067833          	and	a6,a2,a6
800142ac:	01065613          	srli	a2,a2,0x10
800142b0:	03030e33          	mul	t3,t1,a6
800142b4:	03088833          	mul	a6,a7,a6
800142b8:	010e5693          	srli	a3,t3,0x10
800142bc:	02c30333          	mul	t1,t1,a2
800142c0:	01030333          	add	t1,t1,a6
800142c4:	006686b3          	add	a3,a3,t1
800142c8:	02c888b3          	mul	a7,a7,a2
800142cc:	0106f463          	bleu	a6,a3,800142d4 <__udivdi3+0x3ec>
800142d0:	01d888b3          	add	a7,a7,t4
800142d4:	0106d613          	srli	a2,a3,0x10
800142d8:	011608b3          	add	a7,a2,a7
	      if (m1 > n1 || (m1 == n1 && m0 > n0))
800142dc:	0317e663          	bltu	a5,a7,80014308 <__udivdi3+0x420>
800142e0:	cf179ae3          	bne	a5,a7,80013fd4 <__udivdi3+0xec>
	      umul_ppmm (m1, m0, q0, d0);
800142e4:	000107b7          	lui	a5,0x10
800142e8:	fff78793          	addi	a5,a5,-1 # ffff <_HEAP_SIZE+0xefff>
800142ec:	00f6f6b3          	and	a3,a3,a5
800142f0:	01069693          	slli	a3,a3,0x10
800142f4:	00fe7e33          	and	t3,t3,a5
	      n0 = n0 << bm;
800142f8:	00b51533          	sll	a0,a0,a1
	      umul_ppmm (m1, m0, q0, d0);
800142fc:	01c686b3          	add	a3,a3,t3
	      q1 = 0;
80014300:	00000593          	li	a1,0
	      if (m1 > n1 || (m1 == n1 && m0 > n0))
80014304:	dad57ce3          	bleu	a3,a0,800140bc <__udivdi3+0x1d4>
		  q0--;
80014308:	fff70713          	addi	a4,a4,-1
8001430c:	cc9ff06f          	j	80013fd4 <__udivdi3+0xec>
	  q1 = 0;
80014310:	00000593          	li	a1,0
	  q0 = 0;
80014314:	00000713          	li	a4,0
80014318:	da5ff06f          	j	800140bc <__udivdi3+0x1d4>

8001431c <__umoddi3>:
  d0 = dd.s.low;
8001431c:	00060893          	mv	a7,a2
  d1 = dd.s.high;
80014320:	00068713          	mv	a4,a3
  n0 = nn.s.low;
80014324:	00050793          	mv	a5,a0
  n1 = nn.s.high;
80014328:	00058813          	mv	a6,a1
  if (d1 == 0)
8001432c:	22069c63          	bnez	a3,80014564 <__umoddi3+0x248>
80014330:	800216b7          	lui	a3,0x80021
80014334:	c6c68693          	addi	a3,a3,-916 # 80020c6c <__stack+0xfffe41a0>
      if (d0 > n1)
80014338:	0cc5fc63          	bleu	a2,a1,80014410 <__umoddi3+0xf4>
	  count_leading_zeros (bm, d0);
8001433c:	00010337          	lui	t1,0x10
80014340:	0a667e63          	bleu	t1,a2,800143fc <__umoddi3+0xe0>
80014344:	0ff00313          	li	t1,255
80014348:	00c37463          	bleu	a2,t1,80014350 <__umoddi3+0x34>
8001434c:	00800713          	li	a4,8
80014350:	00e65333          	srl	t1,a2,a4
80014354:	006686b3          	add	a3,a3,t1
80014358:	0006ce03          	lbu	t3,0(a3)
8001435c:	02000313          	li	t1,32
80014360:	00ee0e33          	add	t3,t3,a4
80014364:	41c30333          	sub	t1,t1,t3
	  if (bm != 0)
80014368:	00030c63          	beqz	t1,80014380 <__umoddi3+0x64>
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
8001436c:	006595b3          	sll	a1,a1,t1
80014370:	01c55e33          	srl	t3,a0,t3
	      d0 = d0 << bm;
80014374:	006618b3          	sll	a7,a2,t1
	      n1 = (n1 << bm) | (n0 >> (W_TYPE_SIZE - bm));
80014378:	00be6833          	or	a6,t3,a1
	      n0 = n0 << bm;
8001437c:	006517b3          	sll	a5,a0,t1
	  udiv_qrnnd (q0, n0, n1, n0, d0);
80014380:	0108d613          	srli	a2,a7,0x10
80014384:	02c87733          	remu	a4,a6,a2
80014388:	01089513          	slli	a0,a7,0x10
8001438c:	01055513          	srli	a0,a0,0x10
80014390:	0107d693          	srli	a3,a5,0x10
80014394:	02c85833          	divu	a6,a6,a2
80014398:	01071713          	slli	a4,a4,0x10
8001439c:	00d766b3          	or	a3,a4,a3
800143a0:	03050833          	mul	a6,a0,a6
800143a4:	0106fa63          	bleu	a6,a3,800143b8 <__umoddi3+0x9c>
800143a8:	011686b3          	add	a3,a3,a7
800143ac:	0116e663          	bltu	a3,a7,800143b8 <__umoddi3+0x9c>
800143b0:	0106f463          	bleu	a6,a3,800143b8 <__umoddi3+0x9c>
800143b4:	011686b3          	add	a3,a3,a7
800143b8:	410686b3          	sub	a3,a3,a6
800143bc:	02c6f733          	remu	a4,a3,a2
800143c0:	01079793          	slli	a5,a5,0x10
800143c4:	0107d793          	srli	a5,a5,0x10
800143c8:	02c6d6b3          	divu	a3,a3,a2
800143cc:	02d506b3          	mul	a3,a0,a3
800143d0:	01071513          	slli	a0,a4,0x10
800143d4:	00f567b3          	or	a5,a0,a5
800143d8:	00d7fa63          	bleu	a3,a5,800143ec <__umoddi3+0xd0>
800143dc:	011787b3          	add	a5,a5,a7
800143e0:	0117e663          	bltu	a5,a7,800143ec <__umoddi3+0xd0>
800143e4:	00d7f463          	bleu	a3,a5,800143ec <__umoddi3+0xd0>
800143e8:	011787b3          	add	a5,a5,a7
800143ec:	40d787b3          	sub	a5,a5,a3
	  rr.s.low = n0 >> bm;
800143f0:	0067d533          	srl	a0,a5,t1
	  *rp = rr.ll;
800143f4:	00000593          	li	a1,0
}
800143f8:	00008067          	ret
	  count_leading_zeros (bm, d0);
800143fc:	01000337          	lui	t1,0x1000
80014400:	01000713          	li	a4,16
80014404:	f46666e3          	bltu	a2,t1,80014350 <__umoddi3+0x34>
80014408:	01800713          	li	a4,24
8001440c:	f45ff06f          	j	80014350 <__umoddi3+0x34>
	  if (d0 == 0)
80014410:	00061663          	bnez	a2,8001441c <__umoddi3+0x100>
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
80014414:	00100613          	li	a2,1
80014418:	031658b3          	divu	a7,a2,a7
	  count_leading_zeros (bm, d0);
8001441c:	00010637          	lui	a2,0x10
80014420:	0ac8f263          	bleu	a2,a7,800144c4 <__umoddi3+0x1a8>
80014424:	0ff00613          	li	a2,255
80014428:	01167463          	bleu	a7,a2,80014430 <__umoddi3+0x114>
8001442c:	00800713          	li	a4,8
80014430:	00e8d633          	srl	a2,a7,a4
80014434:	00c686b3          	add	a3,a3,a2
80014438:	0006ce03          	lbu	t3,0(a3)
8001443c:	02000313          	li	t1,32
80014440:	00ee0e33          	add	t3,t3,a4
80014444:	41c30333          	sub	t1,t1,t3
	  if (bm == 0)
80014448:	08031863          	bnez	t1,800144d8 <__umoddi3+0x1bc>
	      n1 -= d0;
8001444c:	411585b3          	sub	a1,a1,a7
	  udiv_qrnnd (q0, n0, n1, n0, d0);
80014450:	0108d713          	srli	a4,a7,0x10
80014454:	01089513          	slli	a0,a7,0x10
80014458:	01055513          	srli	a0,a0,0x10
8001445c:	0107d613          	srli	a2,a5,0x10
80014460:	02e5f6b3          	remu	a3,a1,a4
80014464:	02e5d5b3          	divu	a1,a1,a4
80014468:	01069693          	slli	a3,a3,0x10
8001446c:	00c6e6b3          	or	a3,a3,a2
80014470:	02b505b3          	mul	a1,a0,a1
80014474:	00b6fa63          	bleu	a1,a3,80014488 <__umoddi3+0x16c>
80014478:	011686b3          	add	a3,a3,a7
8001447c:	0116e663          	bltu	a3,a7,80014488 <__umoddi3+0x16c>
80014480:	00b6f463          	bleu	a1,a3,80014488 <__umoddi3+0x16c>
80014484:	011686b3          	add	a3,a3,a7
80014488:	40b685b3          	sub	a1,a3,a1
8001448c:	02e5f6b3          	remu	a3,a1,a4
80014490:	01079793          	slli	a5,a5,0x10
80014494:	0107d793          	srli	a5,a5,0x10
80014498:	02e5d5b3          	divu	a1,a1,a4
8001449c:	02b505b3          	mul	a1,a0,a1
800144a0:	01069513          	slli	a0,a3,0x10
800144a4:	00f567b3          	or	a5,a0,a5
800144a8:	00b7fa63          	bleu	a1,a5,800144bc <__umoddi3+0x1a0>
800144ac:	011787b3          	add	a5,a5,a7
800144b0:	0117e663          	bltu	a5,a7,800144bc <__umoddi3+0x1a0>
800144b4:	00b7f463          	bleu	a1,a5,800144bc <__umoddi3+0x1a0>
800144b8:	011787b3          	add	a5,a5,a7
800144bc:	40b787b3          	sub	a5,a5,a1
800144c0:	f31ff06f          	j	800143f0 <__umoddi3+0xd4>
	  count_leading_zeros (bm, d0);
800144c4:	01000637          	lui	a2,0x1000
800144c8:	01000713          	li	a4,16
800144cc:	f6c8e2e3          	bltu	a7,a2,80014430 <__umoddi3+0x114>
800144d0:	01800713          	li	a4,24
800144d4:	f5dff06f          	j	80014430 <__umoddi3+0x114>
	      d0 = d0 << bm;
800144d8:	006898b3          	sll	a7,a7,t1
	      n2 = n1 >> b;
800144dc:	01c5d733          	srl	a4,a1,t3
	      n0 = n0 << bm;
800144e0:	006517b3          	sll	a5,a0,t1
	      n1 = (n1 << bm) | (n0 >> b);
800144e4:	01c55e33          	srl	t3,a0,t3
	      udiv_qrnnd (q1, n1, n2, n1, d0);
800144e8:	0108d513          	srli	a0,a7,0x10
800144ec:	02a776b3          	remu	a3,a4,a0
	      n1 = (n1 << bm) | (n0 >> b);
800144f0:	006595b3          	sll	a1,a1,t1
800144f4:	00be6e33          	or	t3,t3,a1
	      udiv_qrnnd (q1, n1, n2, n1, d0);
800144f8:	01089593          	slli	a1,a7,0x10
800144fc:	0105d593          	srli	a1,a1,0x10
80014500:	010e5613          	srli	a2,t3,0x10
80014504:	02a75733          	divu	a4,a4,a0
80014508:	01069693          	slli	a3,a3,0x10
8001450c:	00c6e6b3          	or	a3,a3,a2
80014510:	02e58733          	mul	a4,a1,a4
80014514:	00e6fa63          	bleu	a4,a3,80014528 <__umoddi3+0x20c>
80014518:	011686b3          	add	a3,a3,a7
8001451c:	0116e663          	bltu	a3,a7,80014528 <__umoddi3+0x20c>
80014520:	00e6f463          	bleu	a4,a3,80014528 <__umoddi3+0x20c>
80014524:	011686b3          	add	a3,a3,a7
80014528:	40e68633          	sub	a2,a3,a4
8001452c:	02a676b3          	remu	a3,a2,a0
80014530:	010e1e13          	slli	t3,t3,0x10
80014534:	010e5e13          	srli	t3,t3,0x10
80014538:	02a65633          	divu	a2,a2,a0
8001453c:	01069693          	slli	a3,a3,0x10
80014540:	02c58633          	mul	a2,a1,a2
80014544:	01c6e5b3          	or	a1,a3,t3
80014548:	00c5fa63          	bleu	a2,a1,8001455c <__umoddi3+0x240>
8001454c:	011585b3          	add	a1,a1,a7
80014550:	0115e663          	bltu	a1,a7,8001455c <__umoddi3+0x240>
80014554:	00c5f463          	bleu	a2,a1,8001455c <__umoddi3+0x240>
80014558:	011585b3          	add	a1,a1,a7
8001455c:	40c585b3          	sub	a1,a1,a2
80014560:	ef1ff06f          	j	80014450 <__umoddi3+0x134>
      if (d1 > n1)
80014564:	e8d5eae3          	bltu	a1,a3,800143f8 <__umoddi3+0xdc>
	  count_leading_zeros (bm, d1);
80014568:	00010737          	lui	a4,0x10
8001456c:	04e6fc63          	bleu	a4,a3,800145c4 <__umoddi3+0x2a8>
80014570:	0ff00e93          	li	t4,255
80014574:	00deb733          	sltu	a4,t4,a3
80014578:	00371713          	slli	a4,a4,0x3
8001457c:	80021337          	lui	t1,0x80021
80014580:	00e6d8b3          	srl	a7,a3,a4
80014584:	c6c30313          	addi	t1,t1,-916 # 80020c6c <__stack+0xfffe41a0>
80014588:	006888b3          	add	a7,a7,t1
8001458c:	0008ce83          	lbu	t4,0(a7) # 1000000 <_HEAP_SIZE+0xfff000>
80014590:	02000e13          	li	t3,32
80014594:	00ee8eb3          	add	t4,t4,a4
80014598:	41de0e33          	sub	t3,t3,t4
	  if (bm == 0)
8001459c:	020e1e63          	bnez	t3,800145d8 <__umoddi3+0x2bc>
	      if (n1 > d1 || n0 >= d0)
800145a0:	00b6e463          	bltu	a3,a1,800145a8 <__umoddi3+0x28c>
800145a4:	00c56a63          	bltu	a0,a2,800145b8 <__umoddi3+0x29c>
		  sub_ddmmss (n1, n0, n1, n0, d1, d0);
800145a8:	40c507b3          	sub	a5,a0,a2
800145ac:	40d585b3          	sub	a1,a1,a3
800145b0:	00f53533          	sltu	a0,a0,a5
800145b4:	40a58833          	sub	a6,a1,a0
		  *rp = rr.ll;
800145b8:	00078513          	mv	a0,a5
800145bc:	00080593          	mv	a1,a6
800145c0:	e39ff06f          	j	800143f8 <__umoddi3+0xdc>
	  count_leading_zeros (bm, d1);
800145c4:	010008b7          	lui	a7,0x1000
800145c8:	01000713          	li	a4,16
800145cc:	fb16e8e3          	bltu	a3,a7,8001457c <__umoddi3+0x260>
800145d0:	01800713          	li	a4,24
800145d4:	fa9ff06f          	j	8001457c <__umoddi3+0x260>
	      d1 = (d1 << bm) | (d0 >> b);
800145d8:	01d65733          	srl	a4,a2,t4
800145dc:	01c696b3          	sll	a3,a3,t3
800145e0:	00d766b3          	or	a3,a4,a3
	      n1 = (n1 << bm) | (n0 >> b);
800145e4:	01d557b3          	srl	a5,a0,t4
	      n2 = n1 >> b;
800145e8:	01d5d733          	srl	a4,a1,t4
	      n1 = (n1 << bm) | (n0 >> b);
800145ec:	01c595b3          	sll	a1,a1,t3
800145f0:	00b7e7b3          	or	a5,a5,a1
	      udiv_qrnnd (q0, n1, n2, n1, d1);
800145f4:	0106d593          	srli	a1,a3,0x10
800145f8:	02b77333          	remu	t1,a4,a1
800145fc:	01069f13          	slli	t5,a3,0x10
80014600:	010f5f13          	srli	t5,t5,0x10
80014604:	0107d893          	srli	a7,a5,0x10
	      d0 = d0 << bm;
80014608:	01c61633          	sll	a2,a2,t3
	      n0 = n0 << bm;
8001460c:	01c51533          	sll	a0,a0,t3
	      udiv_qrnnd (q0, n1, n2, n1, d1);
80014610:	02b75733          	divu	a4,a4,a1
80014614:	01031313          	slli	t1,t1,0x10
80014618:	011368b3          	or	a7,t1,a7
8001461c:	02ef0833          	mul	a6,t5,a4
80014620:	00070313          	mv	t1,a4
80014624:	0108fe63          	bleu	a6,a7,80014640 <__umoddi3+0x324>
80014628:	00d888b3          	add	a7,a7,a3
8001462c:	fff70313          	addi	t1,a4,-1 # ffff <_HEAP_SIZE+0xefff>
80014630:	00d8e863          	bltu	a7,a3,80014640 <__umoddi3+0x324>
80014634:	0108f663          	bleu	a6,a7,80014640 <__umoddi3+0x324>
80014638:	ffe70313          	addi	t1,a4,-2
8001463c:	00d888b3          	add	a7,a7,a3
80014640:	410888b3          	sub	a7,a7,a6
80014644:	02b8ffb3          	remu	t6,a7,a1
80014648:	02b8d8b3          	divu	a7,a7,a1
8001464c:	010f9f93          	slli	t6,t6,0x10
80014650:	031f05b3          	mul	a1,t5,a7
80014654:	01079f13          	slli	t5,a5,0x10
80014658:	010f5f13          	srli	t5,t5,0x10
8001465c:	01efef33          	or	t5,t6,t5
80014660:	00088713          	mv	a4,a7
80014664:	00bf7e63          	bleu	a1,t5,80014680 <__umoddi3+0x364>
80014668:	00df0f33          	add	t5,t5,a3
8001466c:	fff88713          	addi	a4,a7,-1 # ffffff <_HEAP_SIZE+0xffefff>
80014670:	00df6863          	bltu	t5,a3,80014680 <__umoddi3+0x364>
80014674:	00bf7663          	bleu	a1,t5,80014680 <__umoddi3+0x364>
80014678:	ffe88713          	addi	a4,a7,-2
8001467c:	00df0f33          	add	t5,t5,a3
80014680:	01031313          	slli	t1,t1,0x10
	      umul_ppmm (m1, m0, q0, d0);
80014684:	000108b7          	lui	a7,0x10
	      udiv_qrnnd (q0, n1, n2, n1, d1);
80014688:	00e36333          	or	t1,t1,a4
	      umul_ppmm (m1, m0, q0, d0);
8001468c:	fff88793          	addi	a5,a7,-1 # ffff <_HEAP_SIZE+0xefff>
80014690:	01065813          	srli	a6,a2,0x10
	      udiv_qrnnd (q0, n1, n2, n1, d1);
80014694:	40bf0f33          	sub	t5,t5,a1
	      umul_ppmm (m1, m0, q0, d0);
80014698:	00f375b3          	and	a1,t1,a5
8001469c:	01035313          	srli	t1,t1,0x10
800146a0:	00f677b3          	and	a5,a2,a5
800146a4:	02f58733          	mul	a4,a1,a5
800146a8:	02f307b3          	mul	a5,t1,a5
800146ac:	030585b3          	mul	a1,a1,a6
800146b0:	03030333          	mul	t1,t1,a6
800146b4:	00f585b3          	add	a1,a1,a5
800146b8:	01075813          	srli	a6,a4,0x10
800146bc:	00b80833          	add	a6,a6,a1
800146c0:	00f87463          	bleu	a5,a6,800146c8 <__umoddi3+0x3ac>
800146c4:	01130333          	add	t1,t1,a7
800146c8:	000107b7          	lui	a5,0x10
800146cc:	fff78793          	addi	a5,a5,-1 # ffff <_HEAP_SIZE+0xefff>
800146d0:	01085593          	srli	a1,a6,0x10
800146d4:	00f87833          	and	a6,a6,a5
800146d8:	01081813          	slli	a6,a6,0x10
800146dc:	00f77733          	and	a4,a4,a5
800146e0:	006585b3          	add	a1,a1,t1
800146e4:	00e80733          	add	a4,a6,a4
	      if (m1 > n1 || (m1 == n1 && m0 > n0))
800146e8:	00bf6663          	bltu	t5,a1,800146f4 <__umoddi3+0x3d8>
800146ec:	00bf1e63          	bne	t5,a1,80014708 <__umoddi3+0x3ec>
800146f0:	00e57c63          	bleu	a4,a0,80014708 <__umoddi3+0x3ec>
		  sub_ddmmss (m1, m0, m1, m0, d1, d0);
800146f4:	40c70633          	sub	a2,a4,a2
800146f8:	00c73733          	sltu	a4,a4,a2
800146fc:	40d585b3          	sub	a1,a1,a3
80014700:	40e585b3          	sub	a1,a1,a4
80014704:	00060713          	mv	a4,a2
		  sub_ddmmss (n1, n0, n1, n0, m1, m0);
80014708:	40e50733          	sub	a4,a0,a4
8001470c:	00e53533          	sltu	a0,a0,a4
80014710:	40bf05b3          	sub	a1,t5,a1
80014714:	40a585b3          	sub	a1,a1,a0
		  rr.s.low = (n1 << b) | (n0 >> bm);
80014718:	01d597b3          	sll	a5,a1,t4
8001471c:	01c75733          	srl	a4,a4,t3
		  *rp = rr.ll;
80014720:	00e7e533          	or	a0,a5,a4
80014724:	01c5d5b3          	srl	a1,a1,t3
  return w;
80014728:	cd1ff06f          	j	800143f8 <__umoddi3+0xdc>

8001472c <__divdf3>:
#include "soft-fp.h"
#include "double.h"

DFtype
__divdf3 (DFtype a, DFtype b)
{
8001472c:	fd010113          	addi	sp,sp,-48
80014730:	02812423          	sw	s0,40(sp)
80014734:	02912223          	sw	s1,36(sp)
80014738:	01612823          	sw	s6,16(sp)
8001473c:	00050413          	mv	s0,a0
80014740:	00050b13          	mv	s6,a0
  FP_DECL_D (B);
  FP_DECL_D (R);
  DFtype r;

  FP_INIT_ROUNDMODE;
  FP_UNPACK_D (A, a);
80014744:	001004b7          	lui	s1,0x100
80014748:	0145d513          	srli	a0,a1,0x14
{
8001474c:	03212023          	sw	s2,32(sp)
80014750:	01312e23          	sw	s3,28(sp)
80014754:	01712623          	sw	s7,12(sp)
  FP_UNPACK_D (A, a);
80014758:	fff48493          	addi	s1,s1,-1 # fffff <_HEAP_SIZE+0xfefff>
{
8001475c:	02112623          	sw	ra,44(sp)
80014760:	01412c23          	sw	s4,24(sp)
80014764:	01512a23          	sw	s5,20(sp)
  FP_UNPACK_D (A, a);
80014768:	7ff57513          	andi	a0,a0,2047
{
8001476c:	00060b93          	mv	s7,a2
80014770:	00068993          	mv	s3,a3
  FP_UNPACK_D (A, a);
80014774:	00b4f4b3          	and	s1,s1,a1
80014778:	01f5d913          	srli	s2,a1,0x1f
8001477c:	0a050463          	beqz	a0,80014824 <__divdf3+0xf8>
80014780:	7ff00793          	li	a5,2047
80014784:	10f50463          	beq	a0,a5,8001488c <__divdf3+0x160>
80014788:	00349493          	slli	s1,s1,0x3
8001478c:	008006b7          	lui	a3,0x800
80014790:	00d4e4b3          	or	s1,s1,a3
80014794:	01db5a93          	srli	s5,s6,0x1d
80014798:	009aeab3          	or	s5,s5,s1
8001479c:	003b1413          	slli	s0,s6,0x3
800147a0:	c0150a13          	addi	s4,a0,-1023
800147a4:	00000b13          	li	s6,0
  FP_UNPACK_D (B, b);
800147a8:	0149d513          	srli	a0,s3,0x14
800147ac:	001004b7          	lui	s1,0x100
800147b0:	fff48493          	addi	s1,s1,-1 # fffff <_HEAP_SIZE+0xfefff>
800147b4:	7ff57513          	andi	a0,a0,2047
800147b8:	0134f4b3          	and	s1,s1,s3
800147bc:	000b8f93          	mv	t6,s7
800147c0:	01f9d993          	srli	s3,s3,0x1f
800147c4:	10050063          	beqz	a0,800148c4 <__divdf3+0x198>
800147c8:	7ff00793          	li	a5,2047
800147cc:	16f50063          	beq	a0,a5,8001492c <__divdf3+0x200>
800147d0:	008007b7          	lui	a5,0x800
800147d4:	00349493          	slli	s1,s1,0x3
800147d8:	00f4e4b3          	or	s1,s1,a5
800147dc:	01dbd793          	srli	a5,s7,0x1d
800147e0:	0097e7b3          	or	a5,a5,s1
800147e4:	003b9f93          	slli	t6,s7,0x3
800147e8:	c0150513          	addi	a0,a0,-1023
800147ec:	00000713          	li	a4,0
  FP_DIV_D (R, A, B);
800147f0:	002b1693          	slli	a3,s6,0x2
800147f4:	00e6e6b3          	or	a3,a3,a4
800147f8:	fff68693          	addi	a3,a3,-1 # 7fffff <_HEAP_SIZE+0x7fefff>
800147fc:	00e00593          	li	a1,14
80014800:	01394633          	xor	a2,s2,s3
80014804:	40aa0533          	sub	a0,s4,a0
80014808:	14d5ee63          	bltu	a1,a3,80014964 <__divdf3+0x238>
8001480c:	800215b7          	lui	a1,0x80021
80014810:	00269693          	slli	a3,a3,0x2
80014814:	bb858593          	addi	a1,a1,-1096 # 80020bb8 <__stack+0xfffe40ec>
80014818:	00b686b3          	add	a3,a3,a1
8001481c:	0006a683          	lw	a3,0(a3)
80014820:	00068067          	jr	a3
  FP_UNPACK_D (A, a);
80014824:	0164eab3          	or	s5,s1,s6
80014828:	060a8e63          	beqz	s5,800148a4 <__divdf3+0x178>
8001482c:	04048063          	beqz	s1,8001486c <__divdf3+0x140>
80014830:	00048513          	mv	a0,s1
80014834:	495030ef          	jal	ra,800184c8 <__clzsi2>
80014838:	ff550793          	addi	a5,a0,-11
8001483c:	01c00713          	li	a4,28
80014840:	02f74e63          	blt	a4,a5,8001487c <__divdf3+0x150>
80014844:	01d00a93          	li	s5,29
80014848:	ff850413          	addi	s0,a0,-8
8001484c:	40fa8ab3          	sub	s5,s5,a5
80014850:	008494b3          	sll	s1,s1,s0
80014854:	015b5ab3          	srl	s5,s6,s5
80014858:	009aeab3          	or	s5,s5,s1
8001485c:	008b1433          	sll	s0,s6,s0
80014860:	c0d00a13          	li	s4,-1011
80014864:	40aa0a33          	sub	s4,s4,a0
80014868:	f3dff06f          	j	800147a4 <__divdf3+0x78>
8001486c:	000b0513          	mv	a0,s6
80014870:	459030ef          	jal	ra,800184c8 <__clzsi2>
80014874:	02050513          	addi	a0,a0,32
80014878:	fc1ff06f          	j	80014838 <__divdf3+0x10c>
8001487c:	fd850493          	addi	s1,a0,-40
80014880:	009b1ab3          	sll	s5,s6,s1
80014884:	00000413          	li	s0,0
80014888:	fd9ff06f          	j	80014860 <__divdf3+0x134>
8001488c:	0164eab3          	or	s5,s1,s6
80014890:	020a8263          	beqz	s5,800148b4 <__divdf3+0x188>
80014894:	00048a93          	mv	s5,s1
80014898:	7ff00a13          	li	s4,2047
8001489c:	00300b13          	li	s6,3
800148a0:	f09ff06f          	j	800147a8 <__divdf3+0x7c>
800148a4:	00000413          	li	s0,0
800148a8:	00000a13          	li	s4,0
800148ac:	00100b13          	li	s6,1
800148b0:	ef9ff06f          	j	800147a8 <__divdf3+0x7c>
800148b4:	00000413          	li	s0,0
800148b8:	7ff00a13          	li	s4,2047
800148bc:	00200b13          	li	s6,2
800148c0:	ee9ff06f          	j	800147a8 <__divdf3+0x7c>
  FP_UNPACK_D (B, b);
800148c4:	0174e7b3          	or	a5,s1,s7
800148c8:	06078e63          	beqz	a5,80014944 <__divdf3+0x218>
800148cc:	04048063          	beqz	s1,8001490c <__divdf3+0x1e0>
800148d0:	00048513          	mv	a0,s1
800148d4:	3f5030ef          	jal	ra,800184c8 <__clzsi2>
800148d8:	ff550713          	addi	a4,a0,-11
800148dc:	01c00793          	li	a5,28
800148e0:	02e7ce63          	blt	a5,a4,8001491c <__divdf3+0x1f0>
800148e4:	01d00793          	li	a5,29
800148e8:	ff850f93          	addi	t6,a0,-8
800148ec:	40e787b3          	sub	a5,a5,a4
800148f0:	01f494b3          	sll	s1,s1,t6
800148f4:	00fbd7b3          	srl	a5,s7,a5
800148f8:	0097e7b3          	or	a5,a5,s1
800148fc:	01fb9fb3          	sll	t6,s7,t6
80014900:	c0d00613          	li	a2,-1011
80014904:	40a60533          	sub	a0,a2,a0
80014908:	ee5ff06f          	j	800147ec <__divdf3+0xc0>
8001490c:	000b8513          	mv	a0,s7
80014910:	3b9030ef          	jal	ra,800184c8 <__clzsi2>
80014914:	02050513          	addi	a0,a0,32
80014918:	fc1ff06f          	j	800148d8 <__divdf3+0x1ac>
8001491c:	fd850793          	addi	a5,a0,-40
80014920:	00fb97b3          	sll	a5,s7,a5
80014924:	00000f93          	li	t6,0
80014928:	fd9ff06f          	j	80014900 <__divdf3+0x1d4>
8001492c:	0174e7b3          	or	a5,s1,s7
80014930:	02078263          	beqz	a5,80014954 <__divdf3+0x228>
80014934:	00048793          	mv	a5,s1
80014938:	7ff00513          	li	a0,2047
8001493c:	00300713          	li	a4,3
80014940:	eb1ff06f          	j	800147f0 <__divdf3+0xc4>
80014944:	00000f93          	li	t6,0
80014948:	00000513          	li	a0,0
8001494c:	00100713          	li	a4,1
80014950:	ea1ff06f          	j	800147f0 <__divdf3+0xc4>
80014954:	00000f93          	li	t6,0
80014958:	7ff00513          	li	a0,2047
8001495c:	00200713          	li	a4,2
80014960:	e91ff06f          	j	800147f0 <__divdf3+0xc4>
  FP_DIV_D (R, A, B);
80014964:	0157e663          	bltu	a5,s5,80014970 <__divdf3+0x244>
80014968:	36fa9063          	bne	s5,a5,80014cc8 <__divdf3+0x59c>
8001496c:	35f46e63          	bltu	s0,t6,80014cc8 <__divdf3+0x59c>
80014970:	01fa9593          	slli	a1,s5,0x1f
80014974:	00145693          	srli	a3,s0,0x1
80014978:	01f41713          	slli	a4,s0,0x1f
8001497c:	001ada93          	srli	s5,s5,0x1
80014980:	00d5e433          	or	s0,a1,a3
80014984:	00879793          	slli	a5,a5,0x8
80014988:	018fd813          	srli	a6,t6,0x18
8001498c:	00f86833          	or	a6,a6,a5
80014990:	01085e93          	srli	t4,a6,0x10
80014994:	03dad5b3          	divu	a1,s5,t4
80014998:	01081e13          	slli	t3,a6,0x10
8001499c:	010e5e13          	srli	t3,t3,0x10
800149a0:	01045693          	srli	a3,s0,0x10
800149a4:	008f9893          	slli	a7,t6,0x8
800149a8:	03daf4b3          	remu	s1,s5,t4
800149ac:	00058f93          	mv	t6,a1
800149b0:	02be07b3          	mul	a5,t3,a1
800149b4:	01049493          	slli	s1,s1,0x10
800149b8:	0096e6b3          	or	a3,a3,s1
800149bc:	00f6fe63          	bleu	a5,a3,800149d8 <__divdf3+0x2ac>
800149c0:	010686b3          	add	a3,a3,a6
800149c4:	fff58f93          	addi	t6,a1,-1
800149c8:	0106e863          	bltu	a3,a6,800149d8 <__divdf3+0x2ac>
800149cc:	00f6f663          	bleu	a5,a3,800149d8 <__divdf3+0x2ac>
800149d0:	ffe58f93          	addi	t6,a1,-2
800149d4:	010686b3          	add	a3,a3,a6
800149d8:	40f686b3          	sub	a3,a3,a5
800149dc:	03d6d333          	divu	t1,a3,t4
800149e0:	01041413          	slli	s0,s0,0x10
800149e4:	01045413          	srli	s0,s0,0x10
800149e8:	03d6f6b3          	remu	a3,a3,t4
800149ec:	00030793          	mv	a5,t1
800149f0:	026e05b3          	mul	a1,t3,t1
800149f4:	01069693          	slli	a3,a3,0x10
800149f8:	00d466b3          	or	a3,s0,a3
800149fc:	00b6fe63          	bleu	a1,a3,80014a18 <__divdf3+0x2ec>
80014a00:	010686b3          	add	a3,a3,a6
80014a04:	fff30793          	addi	a5,t1,-1
80014a08:	0106e863          	bltu	a3,a6,80014a18 <__divdf3+0x2ec>
80014a0c:	00b6f663          	bleu	a1,a3,80014a18 <__divdf3+0x2ec>
80014a10:	ffe30793          	addi	a5,t1,-2
80014a14:	010686b3          	add	a3,a3,a6
80014a18:	40b68433          	sub	s0,a3,a1
80014a1c:	010f9f93          	slli	t6,t6,0x10
80014a20:	000105b7          	lui	a1,0x10
80014a24:	00ffefb3          	or	t6,t6,a5
80014a28:	fff58313          	addi	t1,a1,-1 # ffff <_HEAP_SIZE+0xefff>
80014a2c:	010fd693          	srli	a3,t6,0x10
80014a30:	006ff7b3          	and	a5,t6,t1
80014a34:	0108df13          	srli	t5,a7,0x10
80014a38:	0068f333          	and	t1,a7,t1
80014a3c:	026783b3          	mul	t2,a5,t1
80014a40:	026684b3          	mul	s1,a3,t1
80014a44:	02ff07b3          	mul	a5,t5,a5
80014a48:	03e682b3          	mul	t0,a3,t5
80014a4c:	009786b3          	add	a3,a5,s1
80014a50:	0103d793          	srli	a5,t2,0x10
80014a54:	00d787b3          	add	a5,a5,a3
80014a58:	0097f463          	bleu	s1,a5,80014a60 <__divdf3+0x334>
80014a5c:	00b282b3          	add	t0,t0,a1
80014a60:	0107d693          	srli	a3,a5,0x10
80014a64:	005686b3          	add	a3,a3,t0
80014a68:	000102b7          	lui	t0,0x10
80014a6c:	fff28293          	addi	t0,t0,-1 # ffff <_HEAP_SIZE+0xefff>
80014a70:	0057f5b3          	and	a1,a5,t0
80014a74:	01059593          	slli	a1,a1,0x10
80014a78:	0053f3b3          	and	t2,t2,t0
80014a7c:	007585b3          	add	a1,a1,t2
80014a80:	00d46863          	bltu	s0,a3,80014a90 <__divdf3+0x364>
80014a84:	000f8793          	mv	a5,t6
80014a88:	04d41463          	bne	s0,a3,80014ad0 <__divdf3+0x3a4>
80014a8c:	04b77263          	bleu	a1,a4,80014ad0 <__divdf3+0x3a4>
80014a90:	01170733          	add	a4,a4,a7
80014a94:	011732b3          	sltu	t0,a4,a7
80014a98:	010282b3          	add	t0,t0,a6
80014a9c:	00540433          	add	s0,s0,t0
80014aa0:	ffff8793          	addi	a5,t6,-1
80014aa4:	00886663          	bltu	a6,s0,80014ab0 <__divdf3+0x384>
80014aa8:	02881463          	bne	a6,s0,80014ad0 <__divdf3+0x3a4>
80014aac:	03176263          	bltu	a4,a7,80014ad0 <__divdf3+0x3a4>
80014ab0:	00d46663          	bltu	s0,a3,80014abc <__divdf3+0x390>
80014ab4:	00869e63          	bne	a3,s0,80014ad0 <__divdf3+0x3a4>
80014ab8:	00b77c63          	bleu	a1,a4,80014ad0 <__divdf3+0x3a4>
80014abc:	01170733          	add	a4,a4,a7
80014ac0:	ffef8793          	addi	a5,t6,-2
80014ac4:	01173fb3          	sltu	t6,a4,a7
80014ac8:	010f8fb3          	add	t6,t6,a6
80014acc:	01f40433          	add	s0,s0,t6
80014ad0:	40b705b3          	sub	a1,a4,a1
80014ad4:	40d40433          	sub	s0,s0,a3
80014ad8:	00b73733          	sltu	a4,a4,a1
80014adc:	40e40433          	sub	s0,s0,a4
80014ae0:	fff00f93          	li	t6,-1
80014ae4:	12880463          	beq	a6,s0,80014c0c <__divdf3+0x4e0>
80014ae8:	03d452b3          	divu	t0,s0,t4
80014aec:	0105d693          	srli	a3,a1,0x10
80014af0:	03d47433          	remu	s0,s0,t4
80014af4:	00028713          	mv	a4,t0
80014af8:	025e0fb3          	mul	t6,t3,t0
80014afc:	01041413          	slli	s0,s0,0x10
80014b00:	0086e433          	or	s0,a3,s0
80014b04:	01f47e63          	bleu	t6,s0,80014b20 <__divdf3+0x3f4>
80014b08:	01040433          	add	s0,s0,a6
80014b0c:	fff28713          	addi	a4,t0,-1
80014b10:	01046863          	bltu	s0,a6,80014b20 <__divdf3+0x3f4>
80014b14:	01f47663          	bleu	t6,s0,80014b20 <__divdf3+0x3f4>
80014b18:	ffe28713          	addi	a4,t0,-2
80014b1c:	01040433          	add	s0,s0,a6
80014b20:	41f40433          	sub	s0,s0,t6
80014b24:	03d456b3          	divu	a3,s0,t4
80014b28:	01059593          	slli	a1,a1,0x10
80014b2c:	0105d593          	srli	a1,a1,0x10
80014b30:	03d47433          	remu	s0,s0,t4
80014b34:	02de0e33          	mul	t3,t3,a3
80014b38:	01041413          	slli	s0,s0,0x10
80014b3c:	0085e433          	or	s0,a1,s0
80014b40:	00068593          	mv	a1,a3
80014b44:	01c47e63          	bleu	t3,s0,80014b60 <__divdf3+0x434>
80014b48:	01040433          	add	s0,s0,a6
80014b4c:	fff68593          	addi	a1,a3,-1
80014b50:	01046863          	bltu	s0,a6,80014b60 <__divdf3+0x434>
80014b54:	01c47663          	bleu	t3,s0,80014b60 <__divdf3+0x434>
80014b58:	ffe68593          	addi	a1,a3,-2
80014b5c:	01040433          	add	s0,s0,a6
80014b60:	01071713          	slli	a4,a4,0x10
80014b64:	00b765b3          	or	a1,a4,a1
80014b68:	01059713          	slli	a4,a1,0x10
80014b6c:	01075713          	srli	a4,a4,0x10
80014b70:	41c40433          	sub	s0,s0,t3
80014b74:	0105de13          	srli	t3,a1,0x10
80014b78:	02670eb3          	mul	t4,a4,t1
80014b7c:	026e0333          	mul	t1,t3,t1
80014b80:	03cf0e33          	mul	t3,t5,t3
80014b84:	02ef0f33          	mul	t5,t5,a4
80014b88:	010ed713          	srli	a4,t4,0x10
80014b8c:	006f0f33          	add	t5,t5,t1
80014b90:	01e70733          	add	a4,a4,t5
80014b94:	00677663          	bleu	t1,a4,80014ba0 <__divdf3+0x474>
80014b98:	000106b7          	lui	a3,0x10
80014b9c:	00de0e33          	add	t3,t3,a3
80014ba0:	01075313          	srli	t1,a4,0x10
80014ba4:	01c30333          	add	t1,t1,t3
80014ba8:	00010e37          	lui	t3,0x10
80014bac:	fffe0e13          	addi	t3,t3,-1 # ffff <_HEAP_SIZE+0xefff>
80014bb0:	01c776b3          	and	a3,a4,t3
80014bb4:	01069693          	slli	a3,a3,0x10
80014bb8:	01cefeb3          	and	t4,t4,t3
80014bbc:	01d686b3          	add	a3,a3,t4
80014bc0:	00646863          	bltu	s0,t1,80014bd0 <__divdf3+0x4a4>
80014bc4:	00058f93          	mv	t6,a1
80014bc8:	04641063          	bne	s0,t1,80014c08 <__divdf3+0x4dc>
80014bcc:	04068063          	beqz	a3,80014c0c <__divdf3+0x4e0>
80014bd0:	00880433          	add	s0,a6,s0
80014bd4:	fff58f93          	addi	t6,a1,-1
80014bd8:	03046463          	bltu	s0,a6,80014c00 <__divdf3+0x4d4>
80014bdc:	00646663          	bltu	s0,t1,80014be8 <__divdf3+0x4bc>
80014be0:	02641463          	bne	s0,t1,80014c08 <__divdf3+0x4dc>
80014be4:	02d8f063          	bleu	a3,a7,80014c04 <__divdf3+0x4d8>
80014be8:	00189713          	slli	a4,a7,0x1
80014bec:	011738b3          	sltu	a7,a4,a7
80014bf0:	01088833          	add	a6,a7,a6
80014bf4:	ffe58f93          	addi	t6,a1,-2
80014bf8:	01040433          	add	s0,s0,a6
80014bfc:	00070893          	mv	a7,a4
80014c00:	00641463          	bne	s0,t1,80014c08 <__divdf3+0x4dc>
80014c04:	01168463          	beq	a3,a7,80014c0c <__divdf3+0x4e0>
80014c08:	001fef93          	ori	t6,t6,1
  FP_PACK_D (r, R);
80014c0c:	3ff50693          	addi	a3,a0,1023
80014c10:	10d05a63          	blez	a3,80014d24 <__divdf3+0x5f8>
80014c14:	007ff713          	andi	a4,t6,7
80014c18:	02070063          	beqz	a4,80014c38 <__divdf3+0x50c>
80014c1c:	00fff713          	andi	a4,t6,15
80014c20:	00400593          	li	a1,4
80014c24:	00b70a63          	beq	a4,a1,80014c38 <__divdf3+0x50c>
80014c28:	004f8593          	addi	a1,t6,4
80014c2c:	01f5bfb3          	sltu	t6,a1,t6
80014c30:	01f787b3          	add	a5,a5,t6
80014c34:	00058f93          	mv	t6,a1
80014c38:	00779713          	slli	a4,a5,0x7
80014c3c:	00075a63          	bgez	a4,80014c50 <__divdf3+0x524>
80014c40:	ff000737          	lui	a4,0xff000
80014c44:	fff70713          	addi	a4,a4,-1 # feffffff <__stack+0x7efc3533>
80014c48:	00e7f7b3          	and	a5,a5,a4
80014c4c:	40050693          	addi	a3,a0,1024
80014c50:	7fe00713          	li	a4,2046
80014c54:	18d74a63          	blt	a4,a3,80014de8 <__divdf3+0x6bc>
80014c58:	01d79713          	slli	a4,a5,0x1d
80014c5c:	003fdf93          	srli	t6,t6,0x3
80014c60:	01f76733          	or	a4,a4,t6
80014c64:	0037d793          	srli	a5,a5,0x3
80014c68:	001005b7          	lui	a1,0x100
80014c6c:	fff58593          	addi	a1,a1,-1 # fffff <_HEAP_SIZE+0xfefff>
80014c70:	00b7f7b3          	and	a5,a5,a1
80014c74:	801005b7          	lui	a1,0x80100
80014c78:	fff58593          	addi	a1,a1,-1 # 800fffff <__stack+0xc3533>
80014c7c:	7ff6f693          	andi	a3,a3,2047
80014c80:	01469693          	slli	a3,a3,0x14
80014c84:	00b7f7b3          	and	a5,a5,a1
  FP_HANDLE_EXCEPTIONS;

  return r;
}
80014c88:	02c12083          	lw	ra,44(sp)
80014c8c:	02812403          	lw	s0,40(sp)
  FP_PACK_D (r, R);
80014c90:	01f61613          	slli	a2,a2,0x1f
80014c94:	00d7e7b3          	or	a5,a5,a3
80014c98:	00c7e6b3          	or	a3,a5,a2
}
80014c9c:	02412483          	lw	s1,36(sp)
80014ca0:	02012903          	lw	s2,32(sp)
80014ca4:	01c12983          	lw	s3,28(sp)
80014ca8:	01812a03          	lw	s4,24(sp)
80014cac:	01412a83          	lw	s5,20(sp)
80014cb0:	01012b03          	lw	s6,16(sp)
80014cb4:	00c12b83          	lw	s7,12(sp)
80014cb8:	00070513          	mv	a0,a4
80014cbc:	00068593          	mv	a1,a3
80014cc0:	03010113          	addi	sp,sp,48
80014cc4:	00008067          	ret
  FP_DIV_D (R, A, B);
80014cc8:	fff50513          	addi	a0,a0,-1
80014ccc:	00000713          	li	a4,0
80014cd0:	cb5ff06f          	j	80014984 <__divdf3+0x258>
  FP_UNPACK_D (A, a);
80014cd4:	00090613          	mv	a2,s2
  FP_DIV_D (R, A, B);
80014cd8:	000a8793          	mv	a5,s5
80014cdc:	00040f93          	mv	t6,s0
80014ce0:	000b0713          	mv	a4,s6
  FP_PACK_D (r, R);
80014ce4:	00200693          	li	a3,2
80014ce8:	10d70063          	beq	a4,a3,80014de8 <__divdf3+0x6bc>
80014cec:	00300693          	li	a3,3
80014cf0:	0ed70263          	beq	a4,a3,80014dd4 <__divdf3+0x6a8>
80014cf4:	00100693          	li	a3,1
80014cf8:	f0d71ae3          	bne	a4,a3,80014c0c <__divdf3+0x4e0>
80014cfc:	00000793          	li	a5,0
80014d00:	00000713          	li	a4,0
80014d04:	0940006f          	j	80014d98 <__divdf3+0x66c>
  FP_UNPACK_D (B, b);
80014d08:	00098613          	mv	a2,s3
  FP_DIV_D (R, A, B);
80014d0c:	fd9ff06f          	j	80014ce4 <__divdf3+0x5b8>
80014d10:	000807b7          	lui	a5,0x80
80014d14:	00000f93          	li	t6,0
80014d18:	00000613          	li	a2,0
80014d1c:	00300713          	li	a4,3
80014d20:	fc5ff06f          	j	80014ce4 <__divdf3+0x5b8>
  FP_PACK_D (r, R);
80014d24:	00100593          	li	a1,1
80014d28:	40d585b3          	sub	a1,a1,a3
80014d2c:	03800713          	li	a4,56
80014d30:	fcb746e3          	blt	a4,a1,80014cfc <__divdf3+0x5d0>
80014d34:	01f00713          	li	a4,31
80014d38:	06b74463          	blt	a4,a1,80014da0 <__divdf3+0x674>
80014d3c:	41e50513          	addi	a0,a0,1054
80014d40:	00a79733          	sll	a4,a5,a0
80014d44:	00bfd6b3          	srl	a3,t6,a1
80014d48:	00af9533          	sll	a0,t6,a0
80014d4c:	00d76733          	or	a4,a4,a3
80014d50:	00a03533          	snez	a0,a0
80014d54:	00a76733          	or	a4,a4,a0
80014d58:	00b7d7b3          	srl	a5,a5,a1
80014d5c:	00777693          	andi	a3,a4,7
80014d60:	02068063          	beqz	a3,80014d80 <__divdf3+0x654>
80014d64:	00f77693          	andi	a3,a4,15
80014d68:	00400593          	li	a1,4
80014d6c:	00b68a63          	beq	a3,a1,80014d80 <__divdf3+0x654>
80014d70:	00470693          	addi	a3,a4,4
80014d74:	00e6b733          	sltu	a4,a3,a4
80014d78:	00e787b3          	add	a5,a5,a4
80014d7c:	00068713          	mv	a4,a3
80014d80:	00879693          	slli	a3,a5,0x8
80014d84:	0606ca63          	bltz	a3,80014df8 <__divdf3+0x6cc>
80014d88:	01d79693          	slli	a3,a5,0x1d
80014d8c:	00375713          	srli	a4,a4,0x3
80014d90:	00e6e733          	or	a4,a3,a4
80014d94:	0037d793          	srli	a5,a5,0x3
80014d98:	00000693          	li	a3,0
80014d9c:	ecdff06f          	j	80014c68 <__divdf3+0x53c>
80014da0:	fe100713          	li	a4,-31
80014da4:	40d70733          	sub	a4,a4,a3
80014da8:	02000813          	li	a6,32
80014dac:	00e7d733          	srl	a4,a5,a4
80014db0:	00000693          	li	a3,0
80014db4:	01058663          	beq	a1,a6,80014dc0 <__divdf3+0x694>
80014db8:	43e50513          	addi	a0,a0,1086
80014dbc:	00a796b3          	sll	a3,a5,a0
80014dc0:	01f6e533          	or	a0,a3,t6
80014dc4:	00a03533          	snez	a0,a0
80014dc8:	00a76733          	or	a4,a4,a0
80014dcc:	00000793          	li	a5,0
80014dd0:	f8dff06f          	j	80014d5c <__divdf3+0x630>
80014dd4:	000807b7          	lui	a5,0x80
80014dd8:	00000713          	li	a4,0
80014ddc:	7ff00693          	li	a3,2047
80014de0:	00000613          	li	a2,0
80014de4:	e85ff06f          	j	80014c68 <__divdf3+0x53c>
80014de8:	00000793          	li	a5,0
80014dec:	00000713          	li	a4,0
80014df0:	7ff00693          	li	a3,2047
80014df4:	e75ff06f          	j	80014c68 <__divdf3+0x53c>
80014df8:	00000793          	li	a5,0
80014dfc:	00000713          	li	a4,0
80014e00:	00100693          	li	a3,1
80014e04:	e65ff06f          	j	80014c68 <__divdf3+0x53c>

80014e08 <__muldf3>:
#include "soft-fp.h"
#include "double.h"

DFtype
__muldf3 (DFtype a, DFtype b)
{
80014e08:	fd010113          	addi	sp,sp,-48
80014e0c:	03212023          	sw	s2,32(sp)
80014e10:	01512a23          	sw	s5,20(sp)
  FP_DECL_D (B);
  FP_DECL_D (R);
  DFtype r;

  FP_INIT_ROUNDMODE;
  FP_UNPACK_D (A, a);
80014e14:	00100937          	lui	s2,0x100
80014e18:	0145da93          	srli	s5,a1,0x14
{
80014e1c:	01312e23          	sw	s3,28(sp)
80014e20:	01412c23          	sw	s4,24(sp)
80014e24:	01612823          	sw	s6,16(sp)
80014e28:	01712623          	sw	s7,12(sp)
  FP_UNPACK_D (A, a);
80014e2c:	fff90913          	addi	s2,s2,-1 # fffff <_HEAP_SIZE+0xfefff>
{
80014e30:	02112623          	sw	ra,44(sp)
80014e34:	02812423          	sw	s0,40(sp)
80014e38:	02912223          	sw	s1,36(sp)
  FP_UNPACK_D (A, a);
80014e3c:	7ffafa93          	andi	s5,s5,2047
{
80014e40:	00050b13          	mv	s6,a0
80014e44:	00060b93          	mv	s7,a2
80014e48:	00068a13          	mv	s4,a3
  FP_UNPACK_D (A, a);
80014e4c:	00b97933          	and	s2,s2,a1
80014e50:	01f5d993          	srli	s3,a1,0x1f
80014e54:	0a0a8663          	beqz	s5,80014f00 <__muldf3+0xf8>
80014e58:	7ff00793          	li	a5,2047
80014e5c:	10fa8463          	beq	s5,a5,80014f64 <__muldf3+0x15c>
80014e60:	00800437          	lui	s0,0x800
80014e64:	00391913          	slli	s2,s2,0x3
80014e68:	00896933          	or	s2,s2,s0
80014e6c:	01d55413          	srli	s0,a0,0x1d
80014e70:	01246433          	or	s0,s0,s2
80014e74:	00351493          	slli	s1,a0,0x3
80014e78:	c01a8a93          	addi	s5,s5,-1023
80014e7c:	00000b13          	li	s6,0
  FP_UNPACK_D (B, b);
80014e80:	014a5513          	srli	a0,s4,0x14
80014e84:	00100937          	lui	s2,0x100
80014e88:	fff90913          	addi	s2,s2,-1 # fffff <_HEAP_SIZE+0xfefff>
80014e8c:	7ff57513          	andi	a0,a0,2047
80014e90:	01497933          	and	s2,s2,s4
80014e94:	000b8713          	mv	a4,s7
80014e98:	01fa5a13          	srli	s4,s4,0x1f
80014e9c:	10050263          	beqz	a0,80014fa0 <__muldf3+0x198>
80014ea0:	7ff00793          	li	a5,2047
80014ea4:	16f50263          	beq	a0,a5,80015008 <__muldf3+0x200>
80014ea8:	008007b7          	lui	a5,0x800
80014eac:	00391913          	slli	s2,s2,0x3
80014eb0:	00f96933          	or	s2,s2,a5
80014eb4:	01dbd793          	srli	a5,s7,0x1d
80014eb8:	0127e7b3          	or	a5,a5,s2
80014ebc:	003b9713          	slli	a4,s7,0x3
80014ec0:	c0150513          	addi	a0,a0,-1023
80014ec4:	00000693          	li	a3,0
  FP_MUL_D (R, A, B);
80014ec8:	002b1593          	slli	a1,s6,0x2
80014ecc:	00d5e5b3          	or	a1,a1,a3
80014ed0:	00aa8533          	add	a0,s5,a0
80014ed4:	fff58593          	addi	a1,a1,-1
80014ed8:	00e00893          	li	a7,14
80014edc:	0149c633          	xor	a2,s3,s4
80014ee0:	00150813          	addi	a6,a0,1
80014ee4:	14b8ee63          	bltu	a7,a1,80015040 <__muldf3+0x238>
80014ee8:	80021537          	lui	a0,0x80021
80014eec:	00259593          	slli	a1,a1,0x2
80014ef0:	bf450513          	addi	a0,a0,-1036 # 80020bf4 <__stack+0xfffe4128>
80014ef4:	00a585b3          	add	a1,a1,a0
80014ef8:	0005a583          	lw	a1,0(a1)
80014efc:	00058067          	jr	a1
  FP_UNPACK_D (A, a);
80014f00:	00a96433          	or	s0,s2,a0
80014f04:	06040e63          	beqz	s0,80014f80 <__muldf3+0x178>
80014f08:	04090063          	beqz	s2,80014f48 <__muldf3+0x140>
80014f0c:	00090513          	mv	a0,s2
80014f10:	5b8030ef          	jal	ra,800184c8 <__clzsi2>
80014f14:	ff550793          	addi	a5,a0,-11
80014f18:	01c00713          	li	a4,28
80014f1c:	02f74c63          	blt	a4,a5,80014f54 <__muldf3+0x14c>
80014f20:	01d00413          	li	s0,29
80014f24:	ff850493          	addi	s1,a0,-8
80014f28:	40f40433          	sub	s0,s0,a5
80014f2c:	00991933          	sll	s2,s2,s1
80014f30:	008b5433          	srl	s0,s6,s0
80014f34:	01246433          	or	s0,s0,s2
80014f38:	009b14b3          	sll	s1,s6,s1
80014f3c:	c0d00a93          	li	s5,-1011
80014f40:	40aa8ab3          	sub	s5,s5,a0
80014f44:	f39ff06f          	j	80014e7c <__muldf3+0x74>
80014f48:	580030ef          	jal	ra,800184c8 <__clzsi2>
80014f4c:	02050513          	addi	a0,a0,32
80014f50:	fc5ff06f          	j	80014f14 <__muldf3+0x10c>
80014f54:	fd850413          	addi	s0,a0,-40
80014f58:	008b1433          	sll	s0,s6,s0
80014f5c:	00000493          	li	s1,0
80014f60:	fddff06f          	j	80014f3c <__muldf3+0x134>
80014f64:	00a96433          	or	s0,s2,a0
80014f68:	02040463          	beqz	s0,80014f90 <__muldf3+0x188>
80014f6c:	00050493          	mv	s1,a0
80014f70:	00090413          	mv	s0,s2
80014f74:	7ff00a93          	li	s5,2047
80014f78:	00300b13          	li	s6,3
80014f7c:	f05ff06f          	j	80014e80 <__muldf3+0x78>
80014f80:	00000493          	li	s1,0
80014f84:	00000a93          	li	s5,0
80014f88:	00100b13          	li	s6,1
80014f8c:	ef5ff06f          	j	80014e80 <__muldf3+0x78>
80014f90:	00000493          	li	s1,0
80014f94:	7ff00a93          	li	s5,2047
80014f98:	00200b13          	li	s6,2
80014f9c:	ee5ff06f          	j	80014e80 <__muldf3+0x78>
  FP_UNPACK_D (B, b);
80014fa0:	017967b3          	or	a5,s2,s7
80014fa4:	06078e63          	beqz	a5,80015020 <__muldf3+0x218>
80014fa8:	04090063          	beqz	s2,80014fe8 <__muldf3+0x1e0>
80014fac:	00090513          	mv	a0,s2
80014fb0:	518030ef          	jal	ra,800184c8 <__clzsi2>
80014fb4:	ff550693          	addi	a3,a0,-11
80014fb8:	01c00793          	li	a5,28
80014fbc:	02d7ce63          	blt	a5,a3,80014ff8 <__muldf3+0x1f0>
80014fc0:	01d00793          	li	a5,29
80014fc4:	ff850713          	addi	a4,a0,-8
80014fc8:	40d787b3          	sub	a5,a5,a3
80014fcc:	00e91933          	sll	s2,s2,a4
80014fd0:	00fbd7b3          	srl	a5,s7,a5
80014fd4:	0127e7b3          	or	a5,a5,s2
80014fd8:	00eb9733          	sll	a4,s7,a4
80014fdc:	c0d00693          	li	a3,-1011
80014fe0:	40a68533          	sub	a0,a3,a0
80014fe4:	ee1ff06f          	j	80014ec4 <__muldf3+0xbc>
80014fe8:	000b8513          	mv	a0,s7
80014fec:	4dc030ef          	jal	ra,800184c8 <__clzsi2>
80014ff0:	02050513          	addi	a0,a0,32
80014ff4:	fc1ff06f          	j	80014fb4 <__muldf3+0x1ac>
80014ff8:	fd850793          	addi	a5,a0,-40
80014ffc:	00fb97b3          	sll	a5,s7,a5
80015000:	00000713          	li	a4,0
80015004:	fd9ff06f          	j	80014fdc <__muldf3+0x1d4>
80015008:	017967b3          	or	a5,s2,s7
8001500c:	02078263          	beqz	a5,80015030 <__muldf3+0x228>
80015010:	00090793          	mv	a5,s2
80015014:	7ff00513          	li	a0,2047
80015018:	00300693          	li	a3,3
8001501c:	eadff06f          	j	80014ec8 <__muldf3+0xc0>
80015020:	00000713          	li	a4,0
80015024:	00000513          	li	a0,0
80015028:	00100693          	li	a3,1
8001502c:	e9dff06f          	j	80014ec8 <__muldf3+0xc0>
80015030:	00000713          	li	a4,0
80015034:	7ff00513          	li	a0,2047
80015038:	00200693          	li	a3,2
8001503c:	e8dff06f          	j	80014ec8 <__muldf3+0xc0>
80015040:	00010fb7          	lui	t6,0x10
80015044:	ffff8f13          	addi	t5,t6,-1 # ffff <_HEAP_SIZE+0xefff>
  FP_MUL_D (R, A, B);
80015048:	0104d693          	srli	a3,s1,0x10
8001504c:	01075313          	srli	t1,a4,0x10
80015050:	01e4f4b3          	and	s1,s1,t5
80015054:	01e77733          	and	a4,a4,t5
80015058:	029308b3          	mul	a7,t1,s1
8001505c:	029705b3          	mul	a1,a4,s1
80015060:	02e682b3          	mul	t0,a3,a4
80015064:	00588e33          	add	t3,a7,t0
80015068:	0105d893          	srli	a7,a1,0x10
8001506c:	01c888b3          	add	a7,a7,t3
80015070:	02668eb3          	mul	t4,a3,t1
80015074:	0058f463          	bleu	t0,a7,8001507c <__muldf3+0x274>
80015078:	01fe8eb3          	add	t4,t4,t6
8001507c:	0108d913          	srli	s2,a7,0x10
80015080:	01e8f8b3          	and	a7,a7,t5
80015084:	0107df93          	srli	t6,a5,0x10
80015088:	01e5f5b3          	and	a1,a1,t5
8001508c:	01e7f3b3          	and	t2,a5,t5
80015090:	01089893          	slli	a7,a7,0x10
80015094:	00b888b3          	add	a7,a7,a1
80015098:	027687b3          	mul	a5,a3,t2
8001509c:	029385b3          	mul	a1,t2,s1
800150a0:	029f84b3          	mul	s1,t6,s1
800150a4:	00f48e33          	add	t3,s1,a5
800150a8:	0105d493          	srli	s1,a1,0x10
800150ac:	01c484b3          	add	s1,s1,t3
800150b0:	03f686b3          	mul	a3,a3,t6
800150b4:	00f4f663          	bleu	a5,s1,800150c0 <__muldf3+0x2b8>
800150b8:	000107b7          	lui	a5,0x10
800150bc:	00f686b3          	add	a3,a3,a5
800150c0:	0104df13          	srli	t5,s1,0x10
800150c4:	000109b7          	lui	s3,0x10
800150c8:	00df0f33          	add	t5,t5,a3
800150cc:	fff98693          	addi	a3,s3,-1 # ffff <_HEAP_SIZE+0xefff>
800150d0:	00d4f4b3          	and	s1,s1,a3
800150d4:	00d5f5b3          	and	a1,a1,a3
800150d8:	01045793          	srli	a5,s0,0x10
800150dc:	01049493          	slli	s1,s1,0x10
800150e0:	00d47433          	and	s0,s0,a3
800150e4:	00b484b3          	add	s1,s1,a1
800150e8:	028706b3          	mul	a3,a4,s0
800150ec:	00990933          	add	s2,s2,s1
800150f0:	02e78e33          	mul	t3,a5,a4
800150f4:	028305b3          	mul	a1,t1,s0
800150f8:	02f30733          	mul	a4,t1,a5
800150fc:	01c58333          	add	t1,a1,t3
80015100:	0106d593          	srli	a1,a3,0x10
80015104:	006585b3          	add	a1,a1,t1
80015108:	01c5f463          	bleu	t3,a1,80015110 <__muldf3+0x308>
8001510c:	01370733          	add	a4,a4,s3
80015110:	0105d313          	srli	t1,a1,0x10
80015114:	000109b7          	lui	s3,0x10
80015118:	00e302b3          	add	t0,t1,a4
8001511c:	fff98713          	addi	a4,s3,-1 # ffff <_HEAP_SIZE+0xefff>
80015120:	00e5f5b3          	and	a1,a1,a4
80015124:	00e6f6b3          	and	a3,a3,a4
80015128:	02838333          	mul	t1,t2,s0
8001512c:	01059593          	slli	a1,a1,0x10
80015130:	00d585b3          	add	a1,a1,a3
80015134:	02778733          	mul	a4,a5,t2
80015138:	028f8433          	mul	s0,t6,s0
8001513c:	02ff8e33          	mul	t3,t6,a5
80015140:	00e40433          	add	s0,s0,a4
80015144:	01035793          	srli	a5,t1,0x10
80015148:	00878433          	add	s0,a5,s0
8001514c:	00e47463          	bleu	a4,s0,80015154 <__muldf3+0x34c>
80015150:	013e0e33          	add	t3,t3,s3
80015154:	000107b7          	lui	a5,0x10
80015158:	fff78793          	addi	a5,a5,-1 # ffff <_HEAP_SIZE+0xefff>
8001515c:	00f476b3          	and	a3,s0,a5
80015160:	00f37333          	and	t1,t1,a5
80015164:	01069693          	slli	a3,a3,0x10
80015168:	012e8eb3          	add	t4,t4,s2
8001516c:	006686b3          	add	a3,a3,t1
80015170:	009eb4b3          	sltu	s1,t4,s1
80015174:	01e686b3          	add	a3,a3,t5
80015178:	009687b3          	add	a5,a3,s1
8001517c:	00be8eb3          	add	t4,t4,a1
80015180:	00beb5b3          	sltu	a1,t4,a1
80015184:	00578333          	add	t1,a5,t0
80015188:	00b30fb3          	add	t6,t1,a1
8001518c:	01e6b6b3          	sltu	a3,a3,t5
80015190:	0097b7b3          	sltu	a5,a5,s1
80015194:	00f6e7b3          	or	a5,a3,a5
80015198:	01045413          	srli	s0,s0,0x10
8001519c:	00533333          	sltu	t1,t1,t0
800151a0:	00bfb5b3          	sltu	a1,t6,a1
800151a4:	008787b3          	add	a5,a5,s0
800151a8:	00b365b3          	or	a1,t1,a1
800151ac:	00b787b3          	add	a5,a5,a1
800151b0:	01c787b3          	add	a5,a5,t3
800151b4:	017fd713          	srli	a4,t6,0x17
800151b8:	00979793          	slli	a5,a5,0x9
800151bc:	00e7e7b3          	or	a5,a5,a4
800151c0:	009e9713          	slli	a4,t4,0x9
800151c4:	01176733          	or	a4,a4,a7
800151c8:	00e03733          	snez	a4,a4
800151cc:	017ede93          	srli	t4,t4,0x17
800151d0:	009f9693          	slli	a3,t6,0x9
800151d4:	01d76733          	or	a4,a4,t4
800151d8:	00d76733          	or	a4,a4,a3
800151dc:	00779693          	slli	a3,a5,0x7
800151e0:	1006da63          	bgez	a3,800152f4 <__muldf3+0x4ec>
800151e4:	00175693          	srli	a3,a4,0x1
800151e8:	00177713          	andi	a4,a4,1
800151ec:	00e6e733          	or	a4,a3,a4
800151f0:	01f79693          	slli	a3,a5,0x1f
800151f4:	00d76733          	or	a4,a4,a3
800151f8:	0017d793          	srli	a5,a5,0x1
  FP_PACK_D (r, R);
800151fc:	3ff80593          	addi	a1,a6,1023
80015200:	0eb05e63          	blez	a1,800152fc <__muldf3+0x4f4>
80015204:	00777693          	andi	a3,a4,7
80015208:	02068063          	beqz	a3,80015228 <__muldf3+0x420>
8001520c:	00f77693          	andi	a3,a4,15
80015210:	00400513          	li	a0,4
80015214:	00a68a63          	beq	a3,a0,80015228 <__muldf3+0x420>
80015218:	00470693          	addi	a3,a4,4
8001521c:	00e6b733          	sltu	a4,a3,a4
80015220:	00e787b3          	add	a5,a5,a4
80015224:	00068713          	mv	a4,a3
80015228:	00779693          	slli	a3,a5,0x7
8001522c:	0006da63          	bgez	a3,80015240 <__muldf3+0x438>
80015230:	ff0006b7          	lui	a3,0xff000
80015234:	fff68693          	addi	a3,a3,-1 # feffffff <__stack+0x7efc3533>
80015238:	00d7f7b3          	and	a5,a5,a3
8001523c:	40080593          	addi	a1,a6,1024
80015240:	7fe00693          	li	a3,2046
80015244:	16b6ce63          	blt	a3,a1,800153c0 <__muldf3+0x5b8>
80015248:	00375693          	srli	a3,a4,0x3
8001524c:	01d79713          	slli	a4,a5,0x1d
80015250:	00d76733          	or	a4,a4,a3
80015254:	0037d793          	srli	a5,a5,0x3
80015258:	001006b7          	lui	a3,0x100
8001525c:	fff68693          	addi	a3,a3,-1 # fffff <_HEAP_SIZE+0xfefff>
80015260:	00d7f7b3          	and	a5,a5,a3
80015264:	7ff5f693          	andi	a3,a1,2047
80015268:	801005b7          	lui	a1,0x80100
8001526c:	fff58593          	addi	a1,a1,-1 # 800fffff <__stack+0xc3533>
80015270:	01469693          	slli	a3,a3,0x14
80015274:	00b7f7b3          	and	a5,a5,a1
  FP_HANDLE_EXCEPTIONS;

  return r;
}
80015278:	02c12083          	lw	ra,44(sp)
8001527c:	02812403          	lw	s0,40(sp)
  FP_PACK_D (r, R);
80015280:	01f61613          	slli	a2,a2,0x1f
80015284:	00d7e7b3          	or	a5,a5,a3
80015288:	00c7e6b3          	or	a3,a5,a2
}
8001528c:	02412483          	lw	s1,36(sp)
80015290:	02012903          	lw	s2,32(sp)
80015294:	01c12983          	lw	s3,28(sp)
80015298:	01812a03          	lw	s4,24(sp)
8001529c:	01412a83          	lw	s5,20(sp)
800152a0:	01012b03          	lw	s6,16(sp)
800152a4:	00c12b83          	lw	s7,12(sp)
800152a8:	00070513          	mv	a0,a4
800152ac:	00068593          	mv	a1,a3
800152b0:	03010113          	addi	sp,sp,48
800152b4:	00008067          	ret
  FP_UNPACK_D (A, a);
800152b8:	00098613          	mv	a2,s3
  FP_MUL_D (R, A, B);
800152bc:	00040793          	mv	a5,s0
800152c0:	00048713          	mv	a4,s1
800152c4:	000b0693          	mv	a3,s6
  FP_PACK_D (r, R);
800152c8:	00200593          	li	a1,2
800152cc:	0eb68a63          	beq	a3,a1,800153c0 <__muldf3+0x5b8>
800152d0:	00300593          	li	a1,3
800152d4:	0cb68c63          	beq	a3,a1,800153ac <__muldf3+0x5a4>
800152d8:	00100593          	li	a1,1
800152dc:	f2b690e3          	bne	a3,a1,800151fc <__muldf3+0x3f4>
800152e0:	00000793          	li	a5,0
800152e4:	00000713          	li	a4,0
800152e8:	0880006f          	j	80015370 <__muldf3+0x568>
  FP_UNPACK_D (B, b);
800152ec:	000a0613          	mv	a2,s4
800152f0:	fd9ff06f          	j	800152c8 <__muldf3+0x4c0>
  FP_MUL_D (R, A, B);
800152f4:	00050813          	mv	a6,a0
800152f8:	f05ff06f          	j	800151fc <__muldf3+0x3f4>
  FP_PACK_D (r, R);
800152fc:	00100513          	li	a0,1
80015300:	40b50533          	sub	a0,a0,a1
80015304:	03800693          	li	a3,56
80015308:	fca6cce3          	blt	a3,a0,800152e0 <__muldf3+0x4d8>
8001530c:	01f00693          	li	a3,31
80015310:	06a6c463          	blt	a3,a0,80015378 <__muldf3+0x570>
80015314:	41e80813          	addi	a6,a6,1054
80015318:	010796b3          	sll	a3,a5,a6
8001531c:	00a755b3          	srl	a1,a4,a0
80015320:	01071733          	sll	a4,a4,a6
80015324:	00b6e6b3          	or	a3,a3,a1
80015328:	00e03733          	snez	a4,a4
8001532c:	00e6e733          	or	a4,a3,a4
80015330:	00a7d7b3          	srl	a5,a5,a0
80015334:	00777693          	andi	a3,a4,7
80015338:	02068063          	beqz	a3,80015358 <__muldf3+0x550>
8001533c:	00f77693          	andi	a3,a4,15
80015340:	00400593          	li	a1,4
80015344:	00b68a63          	beq	a3,a1,80015358 <__muldf3+0x550>
80015348:	00470693          	addi	a3,a4,4
8001534c:	00e6b733          	sltu	a4,a3,a4
80015350:	00e787b3          	add	a5,a5,a4
80015354:	00068713          	mv	a4,a3
80015358:	00879693          	slli	a3,a5,0x8
8001535c:	0606ca63          	bltz	a3,800153d0 <__muldf3+0x5c8>
80015360:	01d79693          	slli	a3,a5,0x1d
80015364:	00375713          	srli	a4,a4,0x3
80015368:	00e6e733          	or	a4,a3,a4
8001536c:	0037d793          	srli	a5,a5,0x3
80015370:	00000593          	li	a1,0
80015374:	ee5ff06f          	j	80015258 <__muldf3+0x450>
80015378:	fe100693          	li	a3,-31
8001537c:	40b686b3          	sub	a3,a3,a1
80015380:	02000893          	li	a7,32
80015384:	00d7d6b3          	srl	a3,a5,a3
80015388:	00000593          	li	a1,0
8001538c:	01150663          	beq	a0,a7,80015398 <__muldf3+0x590>
80015390:	43e80813          	addi	a6,a6,1086
80015394:	010795b3          	sll	a1,a5,a6
80015398:	00e5e733          	or	a4,a1,a4
8001539c:	00e03733          	snez	a4,a4
800153a0:	00e6e733          	or	a4,a3,a4
800153a4:	00000793          	li	a5,0
800153a8:	f8dff06f          	j	80015334 <__muldf3+0x52c>
800153ac:	000807b7          	lui	a5,0x80
800153b0:	00000713          	li	a4,0
800153b4:	7ff00593          	li	a1,2047
800153b8:	00000613          	li	a2,0
800153bc:	e9dff06f          	j	80015258 <__muldf3+0x450>
800153c0:	00000793          	li	a5,0
800153c4:	00000713          	li	a4,0
800153c8:	7ff00593          	li	a1,2047
800153cc:	e8dff06f          	j	80015258 <__muldf3+0x450>
800153d0:	00000793          	li	a5,0
800153d4:	00000713          	li	a4,0
800153d8:	00100593          	li	a1,1
800153dc:	e7dff06f          	j	80015258 <__muldf3+0x450>

800153e0 <__eqtf2>:
#include "soft-fp.h"
#include "quad.h"

CMPtype
__eqtf2 (TFtype a, TFtype b)
{
800153e0:	00c52783          	lw	a5,12(a0)
800153e4:	0005af03          	lw	t5,0(a1)
800153e8:	0045af83          	lw	t6,4(a1)
800153ec:	0085a283          	lw	t0,8(a1)
800153f0:	00c5a583          	lw	a1,12(a1)
  FP_DECL_Q (A);
  FP_DECL_Q (B);
  CMPtype r;

  FP_INIT_EXCEPTIONS;
  FP_UNPACK_RAW_Q (A, a);
800153f4:	00008737          	lui	a4,0x8
800153f8:	0107d693          	srli	a3,a5,0x10
800153fc:	fff70713          	addi	a4,a4,-1 # 7fff <_HEAP_SIZE+0x6fff>
80015400:	01079813          	slli	a6,a5,0x10
  FP_UNPACK_RAW_Q (B, b);
80015404:	01059e93          	slli	t4,a1,0x10
  FP_UNPACK_RAW_Q (A, a);
80015408:	01f7d613          	srli	a2,a5,0x1f
8001540c:	00e6f6b3          	and	a3,a3,a4
  FP_UNPACK_RAW_Q (B, b);
80015410:	0105d793          	srli	a5,a1,0x10
{
80015414:	ff010113          	addi	sp,sp,-16
80015418:	00052883          	lw	a7,0(a0)
8001541c:	00452303          	lw	t1,4(a0)
80015420:	00852e03          	lw	t3,8(a0)
  FP_UNPACK_RAW_Q (A, a);
80015424:	01085813          	srli	a6,a6,0x10
  FP_UNPACK_RAW_Q (B, b);
80015428:	010ede93          	srli	t4,t4,0x10
8001542c:	00e7f7b3          	and	a5,a5,a4
80015430:	01f5d593          	srli	a1,a1,0x1f
  FP_CMP_EQ_Q (r, A, B, 1);
80015434:	02e69063          	bne	a3,a4,80015454 <__eqtf2+0x74>
80015438:	0068e733          	or	a4,a7,t1
8001543c:	01c76733          	or	a4,a4,t3
80015440:	01076733          	or	a4,a4,a6
80015444:	00100513          	li	a0,1
80015448:	04071a63          	bnez	a4,8001549c <__eqtf2+0xbc>
8001544c:	04d79863          	bne	a5,a3,8001549c <__eqtf2+0xbc>
80015450:	0080006f          	j	80015458 <__eqtf2+0x78>
80015454:	00e79c63          	bne	a5,a4,8001546c <__eqtf2+0x8c>
80015458:	01ff6733          	or	a4,t5,t6
8001545c:	00576733          	or	a4,a4,t0
80015460:	01d76733          	or	a4,a4,t4
80015464:	00100513          	li	a0,1
80015468:	02071a63          	bnez	a4,8001549c <__eqtf2+0xbc>
8001546c:	00100513          	li	a0,1
80015470:	02d79663          	bne	a5,a3,8001549c <__eqtf2+0xbc>
80015474:	03e89463          	bne	a7,t5,8001549c <__eqtf2+0xbc>
80015478:	03f31263          	bne	t1,t6,8001549c <__eqtf2+0xbc>
8001547c:	025e1063          	bne	t3,t0,8001549c <__eqtf2+0xbc>
80015480:	01d81e63          	bne	a6,t4,8001549c <__eqtf2+0xbc>
80015484:	02b60063          	beq	a2,a1,800154a4 <__eqtf2+0xc4>
80015488:	00079a63          	bnez	a5,8001549c <__eqtf2+0xbc>
8001548c:	0068e533          	or	a0,a7,t1
80015490:	01c56533          	or	a0,a0,t3
80015494:	01056533          	or	a0,a0,a6
80015498:	00a03533          	snez	a0,a0
  FP_HANDLE_EXCEPTIONS;

  return r;
}
8001549c:	01010113          	addi	sp,sp,16
800154a0:	00008067          	ret
  FP_CMP_EQ_Q (r, A, B, 1);
800154a4:	00000513          	li	a0,0
800154a8:	ff5ff06f          	j	8001549c <__eqtf2+0xbc>

800154ac <__getf2>:
#include "soft-fp.h"
#include "quad.h"

CMPtype
__getf2 (TFtype a, TFtype b)
{
800154ac:	00c52783          	lw	a5,12(a0)
800154b0:	00c5a883          	lw	a7,12(a1)
800154b4:	00052f03          	lw	t5,0(a0)
800154b8:	00452603          	lw	a2,4(a0)
800154bc:	00852803          	lw	a6,8(a0)
  FP_DECL_Q (A);
  FP_DECL_Q (B);
  CMPtype r;

  FP_INIT_EXCEPTIONS;
  FP_UNPACK_RAW_Q (A, a);
800154c0:	00008537          	lui	a0,0x8
800154c4:	0107d713          	srli	a4,a5,0x10
800154c8:	fff50513          	addi	a0,a0,-1 # 7fff <_HEAP_SIZE+0x6fff>
  FP_UNPACK_RAW_Q (B, b);
800154cc:	01089e93          	slli	t4,a7,0x10
800154d0:	0108d693          	srli	a3,a7,0x10
{
800154d4:	0005a283          	lw	t0,0(a1)
800154d8:	0045a303          	lw	t1,4(a1)
800154dc:	0085ae03          	lw	t3,8(a1)
  FP_UNPACK_RAW_Q (A, a);
800154e0:	00a77733          	and	a4,a4,a0
800154e4:	01079593          	slli	a1,a5,0x10
{
800154e8:	ff010113          	addi	sp,sp,-16
  FP_UNPACK_RAW_Q (A, a);
800154ec:	0105d593          	srli	a1,a1,0x10
800154f0:	01f7d793          	srli	a5,a5,0x1f
  FP_UNPACK_RAW_Q (B, b);
800154f4:	010ede93          	srli	t4,t4,0x10
800154f8:	00a6f6b3          	and	a3,a3,a0
800154fc:	01f8d893          	srli	a7,a7,0x1f
  FP_CMP_Q (r, A, B, -2, 2);
80015500:	02a71063          	bne	a4,a0,80015520 <__getf2+0x74>
80015504:	00cf6fb3          	or	t6,t5,a2
80015508:	010fefb3          	or	t6,t6,a6
8001550c:	00bfefb3          	or	t6,t6,a1
80015510:	ffe00513          	li	a0,-2
80015514:	0e0f8063          	beqz	t6,800155f4 <__getf2+0x148>
  FP_HANDLE_EXCEPTIONS;

  return r;
}
80015518:	01010113          	addi	sp,sp,16
8001551c:	00008067          	ret
  FP_CMP_Q (r, A, B, -2, 2);
80015520:	02a69863          	bne	a3,a0,80015550 <__getf2+0xa4>
80015524:	0062efb3          	or	t6,t0,t1
80015528:	01cfefb3          	or	t6,t6,t3
8001552c:	01dfefb3          	or	t6,t6,t4
80015530:	ffe00513          	li	a0,-2
80015534:	fe0f92e3          	bnez	t6,80015518 <__getf2+0x6c>
80015538:	04071263          	bnez	a4,8001557c <__getf2+0xd0>
8001553c:	00cf6533          	or	a0,t5,a2
80015540:	01056533          	or	a0,a0,a6
80015544:	00b56533          	or	a0,a0,a1
80015548:	00153513          	seqz	a0,a0
8001554c:	02c0006f          	j	80015578 <__getf2+0xcc>
80015550:	0a071463          	bnez	a4,800155f8 <__getf2+0x14c>
80015554:	00cf6533          	or	a0,t5,a2
80015558:	01056533          	or	a0,a0,a6
8001555c:	00b56533          	or	a0,a0,a1
80015560:	00153513          	seqz	a0,a0
80015564:	00069a63          	bnez	a3,80015578 <__getf2+0xcc>
80015568:	0062efb3          	or	t6,t0,t1
8001556c:	01cfefb3          	or	t6,t6,t3
80015570:	01dfefb3          	or	t6,t6,t4
80015574:	060f8c63          	beqz	t6,800155ec <__getf2+0x140>
80015578:	00051a63          	bnez	a0,8001558c <__getf2+0xe0>
8001557c:	01178e63          	beq	a5,a7,80015598 <__getf2+0xec>
80015580:	00100513          	li	a0,1
80015584:	f8078ae3          	beqz	a5,80015518 <__getf2+0x6c>
80015588:	0080006f          	j	80015590 <__getf2+0xe4>
8001558c:	f80896e3          	bnez	a7,80015518 <__getf2+0x6c>
80015590:	fff00513          	li	a0,-1
80015594:	f85ff06f          	j	80015518 <__getf2+0x6c>
80015598:	fee6c4e3          	blt	a3,a4,80015580 <__getf2+0xd4>
8001559c:	00d75a63          	ble	a3,a4,800155b0 <__getf2+0x104>
800155a0:	fff00513          	li	a0,-1
800155a4:	f6078ae3          	beqz	a5,80015518 <__getf2+0x6c>
800155a8:	00100513          	li	a0,1
800155ac:	f6dff06f          	j	80015518 <__getf2+0x6c>
800155b0:	fcbee8e3          	bltu	t4,a1,80015580 <__getf2+0xd4>
800155b4:	03d59663          	bne	a1,t4,800155e0 <__getf2+0x134>
800155b8:	fd0e64e3          	bltu	t3,a6,80015580 <__getf2+0xd4>
800155bc:	05c81463          	bne	a6,t3,80015604 <__getf2+0x158>
800155c0:	fcc360e3          	bltu	t1,a2,80015580 <__getf2+0xd4>
800155c4:	00661463          	bne	a2,t1,800155cc <__getf2+0x120>
800155c8:	fbe2ece3          	bltu	t0,t5,80015580 <__getf2+0xd4>
800155cc:	fc666ae3          	bltu	a2,t1,800155a0 <__getf2+0xf4>
800155d0:	00000513          	li	a0,0
800155d4:	f46612e3          	bne	a2,t1,80015518 <__getf2+0x6c>
800155d8:	fc5f64e3          	bltu	t5,t0,800155a0 <__getf2+0xf4>
800155dc:	f3dff06f          	j	80015518 <__getf2+0x6c>
800155e0:	fdd5e0e3          	bltu	a1,t4,800155a0 <__getf2+0xf4>
800155e4:	00000513          	li	a0,0
800155e8:	f31ff06f          	j	80015518 <__getf2+0x6c>
800155ec:	fe051ce3          	bnez	a0,800155e4 <__getf2+0x138>
800155f0:	f91ff06f          	j	80015580 <__getf2+0xd4>
800155f4:	f2e688e3          	beq	a3,a4,80015524 <__getf2+0x78>
800155f8:	00000513          	li	a0,0
800155fc:	f60686e3          	beqz	a3,80015568 <__getf2+0xbc>
80015600:	f7dff06f          	j	8001557c <__getf2+0xd0>
80015604:	f9c86ee3          	bltu	a6,t3,800155a0 <__getf2+0xf4>
80015608:	fddff06f          	j	800155e4 <__getf2+0x138>

8001560c <__letf2>:
#include "soft-fp.h"
#include "quad.h"

CMPtype
__letf2 (TFtype a, TFtype b)
{
8001560c:	00c52783          	lw	a5,12(a0)
80015610:	00c5a883          	lw	a7,12(a1)
80015614:	00052f03          	lw	t5,0(a0)
80015618:	00452603          	lw	a2,4(a0)
8001561c:	00852803          	lw	a6,8(a0)
  FP_DECL_Q (A);
  FP_DECL_Q (B);
  CMPtype r;

  FP_INIT_EXCEPTIONS;
  FP_UNPACK_RAW_Q (A, a);
80015620:	00008537          	lui	a0,0x8
80015624:	0107d713          	srli	a4,a5,0x10
80015628:	fff50513          	addi	a0,a0,-1 # 7fff <_HEAP_SIZE+0x6fff>
  FP_UNPACK_RAW_Q (B, b);
8001562c:	01089e93          	slli	t4,a7,0x10
80015630:	0108d693          	srli	a3,a7,0x10
{
80015634:	0005a283          	lw	t0,0(a1)
80015638:	0045a303          	lw	t1,4(a1)
8001563c:	0085ae03          	lw	t3,8(a1)
  FP_UNPACK_RAW_Q (A, a);
80015640:	00a77733          	and	a4,a4,a0
80015644:	01079593          	slli	a1,a5,0x10
{
80015648:	ff010113          	addi	sp,sp,-16
  FP_UNPACK_RAW_Q (A, a);
8001564c:	0105d593          	srli	a1,a1,0x10
80015650:	01f7d793          	srli	a5,a5,0x1f
  FP_UNPACK_RAW_Q (B, b);
80015654:	010ede93          	srli	t4,t4,0x10
80015658:	00a6f6b3          	and	a3,a3,a0
8001565c:	01f8d893          	srli	a7,a7,0x1f
  FP_CMP_Q (r, A, B, 2, 2);
80015660:	02a71063          	bne	a4,a0,80015680 <__letf2+0x74>
80015664:	00cf6fb3          	or	t6,t5,a2
80015668:	010fefb3          	or	t6,t6,a6
8001566c:	00bfefb3          	or	t6,t6,a1
80015670:	00200513          	li	a0,2
80015674:	0e0f8063          	beqz	t6,80015754 <__letf2+0x148>
  FP_HANDLE_EXCEPTIONS;

  return r;
}
80015678:	01010113          	addi	sp,sp,16
8001567c:	00008067          	ret
  FP_CMP_Q (r, A, B, 2, 2);
80015680:	02a69863          	bne	a3,a0,800156b0 <__letf2+0xa4>
80015684:	0062efb3          	or	t6,t0,t1
80015688:	01cfefb3          	or	t6,t6,t3
8001568c:	01dfefb3          	or	t6,t6,t4
80015690:	00200513          	li	a0,2
80015694:	fe0f92e3          	bnez	t6,80015678 <__letf2+0x6c>
80015698:	04071263          	bnez	a4,800156dc <__letf2+0xd0>
8001569c:	00cf6533          	or	a0,t5,a2
800156a0:	01056533          	or	a0,a0,a6
800156a4:	00b56533          	or	a0,a0,a1
800156a8:	00153513          	seqz	a0,a0
800156ac:	02c0006f          	j	800156d8 <__letf2+0xcc>
800156b0:	0a071463          	bnez	a4,80015758 <__letf2+0x14c>
800156b4:	00cf6533          	or	a0,t5,a2
800156b8:	01056533          	or	a0,a0,a6
800156bc:	00b56533          	or	a0,a0,a1
800156c0:	00153513          	seqz	a0,a0
800156c4:	00069a63          	bnez	a3,800156d8 <__letf2+0xcc>
800156c8:	0062efb3          	or	t6,t0,t1
800156cc:	01cfefb3          	or	t6,t6,t3
800156d0:	01dfefb3          	or	t6,t6,t4
800156d4:	060f8c63          	beqz	t6,8001574c <__letf2+0x140>
800156d8:	00051a63          	bnez	a0,800156ec <__letf2+0xe0>
800156dc:	01178e63          	beq	a5,a7,800156f8 <__letf2+0xec>
800156e0:	00100513          	li	a0,1
800156e4:	f8078ae3          	beqz	a5,80015678 <__letf2+0x6c>
800156e8:	0080006f          	j	800156f0 <__letf2+0xe4>
800156ec:	f80896e3          	bnez	a7,80015678 <__letf2+0x6c>
800156f0:	fff00513          	li	a0,-1
800156f4:	f85ff06f          	j	80015678 <__letf2+0x6c>
800156f8:	fee6c4e3          	blt	a3,a4,800156e0 <__letf2+0xd4>
800156fc:	00d75a63          	ble	a3,a4,80015710 <__letf2+0x104>
80015700:	fff00513          	li	a0,-1
80015704:	f6078ae3          	beqz	a5,80015678 <__letf2+0x6c>
80015708:	00100513          	li	a0,1
8001570c:	f6dff06f          	j	80015678 <__letf2+0x6c>
80015710:	fcbee8e3          	bltu	t4,a1,800156e0 <__letf2+0xd4>
80015714:	03d59663          	bne	a1,t4,80015740 <__letf2+0x134>
80015718:	fd0e64e3          	bltu	t3,a6,800156e0 <__letf2+0xd4>
8001571c:	05c81463          	bne	a6,t3,80015764 <__letf2+0x158>
80015720:	fcc360e3          	bltu	t1,a2,800156e0 <__letf2+0xd4>
80015724:	00661463          	bne	a2,t1,8001572c <__letf2+0x120>
80015728:	fbe2ece3          	bltu	t0,t5,800156e0 <__letf2+0xd4>
8001572c:	fc666ae3          	bltu	a2,t1,80015700 <__letf2+0xf4>
80015730:	00000513          	li	a0,0
80015734:	f46612e3          	bne	a2,t1,80015678 <__letf2+0x6c>
80015738:	fc5f64e3          	bltu	t5,t0,80015700 <__letf2+0xf4>
8001573c:	f3dff06f          	j	80015678 <__letf2+0x6c>
80015740:	fdd5e0e3          	bltu	a1,t4,80015700 <__letf2+0xf4>
80015744:	00000513          	li	a0,0
80015748:	f31ff06f          	j	80015678 <__letf2+0x6c>
8001574c:	fe051ce3          	bnez	a0,80015744 <__letf2+0x138>
80015750:	f91ff06f          	j	800156e0 <__letf2+0xd4>
80015754:	f2e688e3          	beq	a3,a4,80015684 <__letf2+0x78>
80015758:	00000513          	li	a0,0
8001575c:	f60686e3          	beqz	a3,800156c8 <__letf2+0xbc>
80015760:	f7dff06f          	j	800156dc <__letf2+0xd0>
80015764:	f9c86ee3          	bltu	a6,t3,80015700 <__letf2+0xf4>
80015768:	fddff06f          	j	80015744 <__letf2+0x138>

8001576c <__multf3>:
#include "soft-fp.h"
#include "quad.h"

TFtype
__multf3 (TFtype a, TFtype b)
{
8001576c:	f4010113          	addi	sp,sp,-192
80015770:	0b312623          	sw	s3,172(sp)
80015774:	00c5a983          	lw	s3,12(a1)
80015778:	0005a683          	lw	a3,0(a1)
8001577c:	0045a783          	lw	a5,4(a1)
80015780:	00a12623          	sw	a0,12(sp)
80015784:	0085a503          	lw	a0,8(a1)
80015788:	01099713          	slli	a4,s3,0x10
8001578c:	0b212823          	sw	s2,176(sp)
80015790:	0b412423          	sw	s4,168(sp)
80015794:	0b512223          	sw	s5,164(sp)
80015798:	0b612023          	sw	s6,160(sp)
8001579c:	00062a03          	lw	s4,0(a2) # 1000000 <_HEAP_SIZE+0xfff000>
800157a0:	00462b03          	lw	s6,4(a2)
800157a4:	00862a83          	lw	s5,8(a2)
800157a8:	00c62903          	lw	s2,12(a2)
  FP_DECL_Q (B);
  FP_DECL_Q (R);
  TFtype r;

  FP_INIT_ROUNDMODE;
  FP_UNPACK_Q (A, a);
800157ac:	00008637          	lui	a2,0x8
{
800157b0:	0a912a23          	sw	s1,180(sp)
800157b4:	01075713          	srli	a4,a4,0x10
  FP_UNPACK_Q (A, a);
800157b8:	0109d493          	srli	s1,s3,0x10
800157bc:	fff60613          	addi	a2,a2,-1 # 7fff <_HEAP_SIZE+0x6fff>
800157c0:	07312623          	sw	s3,108(sp)
{
800157c4:	0a112e23          	sw	ra,188(sp)
800157c8:	0a812c23          	sw	s0,184(sp)
800157cc:	09712e23          	sw	s7,156(sp)
800157d0:	09812c23          	sw	s8,152(sp)
800157d4:	09912a23          	sw	s9,148(sp)
800157d8:	09a12823          	sw	s10,144(sp)
800157dc:	09b12623          	sw	s11,140(sp)
  FP_UNPACK_Q (A, a);
800157e0:	06d12023          	sw	a3,96(sp)
800157e4:	06f12223          	sw	a5,100(sp)
800157e8:	06a12423          	sw	a0,104(sp)
800157ec:	02d12823          	sw	a3,48(sp)
800157f0:	02f12a23          	sw	a5,52(sp)
800157f4:	02a12c23          	sw	a0,56(sp)
800157f8:	02e12e23          	sw	a4,60(sp)
800157fc:	00c4f4b3          	and	s1,s1,a2
80015800:	01f9d993          	srli	s3,s3,0x1f
80015804:	12048863          	beqz	s1,80015934 <__multf3+0x1c8>
80015808:	24c48863          	beq	s1,a2,80015a58 <__multf3+0x2ec>
8001580c:	000107b7          	lui	a5,0x10
80015810:	00f767b3          	or	a5,a4,a5
80015814:	02f12e23          	sw	a5,60(sp)
80015818:	03010613          	addi	a2,sp,48
8001581c:	03c10793          	addi	a5,sp,60
80015820:	0007a703          	lw	a4,0(a5) # 10000 <_HEAP_SIZE+0xf000>
80015824:	ffc7a683          	lw	a3,-4(a5)
80015828:	ffc78793          	addi	a5,a5,-4
8001582c:	00371713          	slli	a4,a4,0x3
80015830:	01d6d693          	srli	a3,a3,0x1d
80015834:	00d76733          	or	a4,a4,a3
80015838:	00e7a223          	sw	a4,4(a5)
8001583c:	fef612e3          	bne	a2,a5,80015820 <__multf3+0xb4>
80015840:	03012783          	lw	a5,48(sp)
80015844:	ffffc537          	lui	a0,0xffffc
80015848:	00150513          	addi	a0,a0,1 # ffffc001 <__stack+0x7ffbf535>
8001584c:	00379793          	slli	a5,a5,0x3
80015850:	02f12823          	sw	a5,48(sp)
80015854:	00a484b3          	add	s1,s1,a0
80015858:	00000b93          	li	s7,0
8001585c:	01091793          	slli	a5,s2,0x10
  FP_UNPACK_Q (B, b);
80015860:	00008737          	lui	a4,0x8
80015864:	01095513          	srli	a0,s2,0x10
80015868:	0107d793          	srli	a5,a5,0x10
8001586c:	fff70713          	addi	a4,a4,-1 # 7fff <_HEAP_SIZE+0x6fff>
80015870:	07212623          	sw	s2,108(sp)
80015874:	07412023          	sw	s4,96(sp)
80015878:	07612223          	sw	s6,100(sp)
8001587c:	07512423          	sw	s5,104(sp)
80015880:	05412023          	sw	s4,64(sp)
80015884:	05612223          	sw	s6,68(sp)
80015888:	05512423          	sw	s5,72(sp)
8001588c:	04f12623          	sw	a5,76(sp)
80015890:	00e57533          	and	a0,a0,a4
80015894:	01f95913          	srli	s2,s2,0x1f
80015898:	1e050463          	beqz	a0,80015a80 <__multf3+0x314>
8001589c:	30e50663          	beq	a0,a4,80015ba8 <__multf3+0x43c>
800158a0:	00010ab7          	lui	s5,0x10
800158a4:	0157eab3          	or	s5,a5,s5
800158a8:	05512623          	sw	s5,76(sp)
800158ac:	04010613          	addi	a2,sp,64
800158b0:	04c10793          	addi	a5,sp,76
800158b4:	0007a703          	lw	a4,0(a5)
800158b8:	ffc7a683          	lw	a3,-4(a5)
800158bc:	ffc78793          	addi	a5,a5,-4
800158c0:	00371713          	slli	a4,a4,0x3
800158c4:	01d6d693          	srli	a3,a3,0x1d
800158c8:	00d76733          	or	a4,a4,a3
800158cc:	00e7a223          	sw	a4,4(a5)
800158d0:	fef612e3          	bne	a2,a5,800158b4 <__multf3+0x148>
800158d4:	04012783          	lw	a5,64(sp)
800158d8:	00379793          	slli	a5,a5,0x3
800158dc:	04f12023          	sw	a5,64(sp)
800158e0:	ffffc7b7          	lui	a5,0xffffc
800158e4:	00178793          	addi	a5,a5,1 # ffffc001 <__stack+0x7ffbf535>
800158e8:	00f50533          	add	a0,a0,a5
800158ec:	00000713          	li	a4,0
  FP_MUL_Q (R, A, B);
800158f0:	0129c7b3          	xor	a5,s3,s2
800158f4:	00f12823          	sw	a5,16(sp)
800158f8:	009507b3          	add	a5,a0,s1
800158fc:	02f12023          	sw	a5,32(sp)
80015900:	00178793          	addi	a5,a5,1
80015904:	00f12e23          	sw	a5,28(sp)
80015908:	002b9793          	slli	a5,s7,0x2
8001590c:	00e7e7b3          	or	a5,a5,a4
80015910:	fff78793          	addi	a5,a5,-1
80015914:	00e00693          	li	a3,14
80015918:	2af6ec63          	bltu	a3,a5,80015bd0 <__multf3+0x464>
8001591c:	800216b7          	lui	a3,0x80021
80015920:	00279793          	slli	a5,a5,0x2
80015924:	c3068693          	addi	a3,a3,-976 # 80020c30 <__stack+0xfffe4164>
80015928:	00d787b3          	add	a5,a5,a3
8001592c:	0007a783          	lw	a5,0(a5)
80015930:	00078067          	jr	a5
  FP_UNPACK_Q (A, a);
80015934:	00d7e633          	or	a2,a5,a3
80015938:	00a66633          	or	a2,a2,a0
8001593c:	00e66633          	or	a2,a2,a4
80015940:	12060a63          	beqz	a2,80015a74 <__multf3+0x308>
80015944:	04070e63          	beqz	a4,800159a0 <__multf3+0x234>
80015948:	00070513          	mv	a0,a4
8001594c:	37d020ef          	jal	ra,800184c8 <__clzsi2>
80015950:	ff450713          	addi	a4,a0,-12
80015954:	40575793          	srai	a5,a4,0x5
80015958:	01f77713          	andi	a4,a4,31
8001595c:	06070c63          	beqz	a4,800159d4 <__multf3+0x268>
80015960:	ffc00693          	li	a3,-4
80015964:	02d786b3          	mul	a3,a5,a3
80015968:	02000813          	li	a6,32
8001596c:	00279593          	slli	a1,a5,0x2
80015970:	ff000e13          	li	t3,-16
80015974:	40e80833          	sub	a6,a6,a4
80015978:	ffc68693          	addi	a3,a3,-4
8001597c:	09c69463          	bne	a3,t3,80015a04 <__multf3+0x298>
80015980:	08010693          	addi	a3,sp,128
80015984:	00b685b3          	add	a1,a3,a1
80015988:	03012683          	lw	a3,48(sp)
8001598c:	fff78793          	addi	a5,a5,-1
80015990:	00e69733          	sll	a4,a3,a4
80015994:	fae5a823          	sw	a4,-80(a1)
80015998:	fff00693          	li	a3,-1
8001599c:	0a80006f          	j	80015a44 <__multf3+0x2d8>
800159a0:	00050863          	beqz	a0,800159b0 <__multf3+0x244>
800159a4:	325020ef          	jal	ra,800184c8 <__clzsi2>
800159a8:	02050513          	addi	a0,a0,32
800159ac:	fa5ff06f          	j	80015950 <__multf3+0x1e4>
800159b0:	00078a63          	beqz	a5,800159c4 <__multf3+0x258>
800159b4:	00078513          	mv	a0,a5
800159b8:	311020ef          	jal	ra,800184c8 <__clzsi2>
800159bc:	04050513          	addi	a0,a0,64
800159c0:	f91ff06f          	j	80015950 <__multf3+0x1e4>
800159c4:	00068513          	mv	a0,a3
800159c8:	301020ef          	jal	ra,800184c8 <__clzsi2>
800159cc:	06050513          	addi	a0,a0,96
800159d0:	f81ff06f          	j	80015950 <__multf3+0x1e4>
800159d4:	ffc00613          	li	a2,-4
800159d8:	02c78633          	mul	a2,a5,a2
800159dc:	03010713          	addi	a4,sp,48
800159e0:	00300693          	li	a3,3
800159e4:	00c705b3          	add	a1,a4,a2
800159e8:	00c5a583          	lw	a1,12(a1)
800159ec:	fff68693          	addi	a3,a3,-1
800159f0:	ffc70713          	addi	a4,a4,-4
800159f4:	00b72823          	sw	a1,16(a4)
800159f8:	fef6d6e3          	ble	a5,a3,800159e4 <__multf3+0x278>
800159fc:	fff78793          	addi	a5,a5,-1
80015a00:	f99ff06f          	j	80015998 <__multf3+0x22c>
80015a04:	03010613          	addi	a2,sp,48
80015a08:	00d60333          	add	t1,a2,a3
80015a0c:	00d588b3          	add	a7,a1,a3
80015a10:	011608b3          	add	a7,a2,a7
80015a14:	00c32603          	lw	a2,12(t1)
80015a18:	01032303          	lw	t1,16(t1)
80015a1c:	01065633          	srl	a2,a2,a6
80015a20:	00e31333          	sll	t1,t1,a4
80015a24:	00666633          	or	a2,a2,t1
80015a28:	00c8a823          	sw	a2,16(a7)
80015a2c:	f4dff06f          	j	80015978 <__multf3+0x20c>
80015a30:	00279713          	slli	a4,a5,0x2
80015a34:	03010613          	addi	a2,sp,48
80015a38:	00e60733          	add	a4,a2,a4
80015a3c:	00072023          	sw	zero,0(a4)
80015a40:	fff78793          	addi	a5,a5,-1
80015a44:	fed796e3          	bne	a5,a3,80015a30 <__multf3+0x2c4>
80015a48:	ffffc4b7          	lui	s1,0xffffc
80015a4c:	01148493          	addi	s1,s1,17 # ffffc011 <__stack+0x7ffbf545>
80015a50:	40a484b3          	sub	s1,s1,a0
80015a54:	e05ff06f          	j	80015858 <__multf3+0xec>
80015a58:	00d7e7b3          	or	a5,a5,a3
80015a5c:	00a7e7b3          	or	a5,a5,a0
80015a60:	00e7e7b3          	or	a5,a5,a4
80015a64:	00200b93          	li	s7,2
80015a68:	de078ae3          	beqz	a5,8001585c <__multf3+0xf0>
80015a6c:	00300b93          	li	s7,3
80015a70:	dedff06f          	j	8001585c <__multf3+0xf0>
80015a74:	00000493          	li	s1,0
80015a78:	00100b93          	li	s7,1
80015a7c:	de1ff06f          	j	8001585c <__multf3+0xf0>
  FP_UNPACK_Q (B, b);
80015a80:	016a6733          	or	a4,s4,s6
80015a84:	01576733          	or	a4,a4,s5
80015a88:	00f76733          	or	a4,a4,a5
80015a8c:	12070c63          	beqz	a4,80015bc4 <__multf3+0x458>
80015a90:	04078e63          	beqz	a5,80015aec <__multf3+0x380>
80015a94:	00078513          	mv	a0,a5
80015a98:	231020ef          	jal	ra,800184c8 <__clzsi2>
80015a9c:	ff450713          	addi	a4,a0,-12
80015aa0:	40575793          	srai	a5,a4,0x5
80015aa4:	01f77713          	andi	a4,a4,31
80015aa8:	06070e63          	beqz	a4,80015b24 <__multf3+0x3b8>
80015aac:	ffc00693          	li	a3,-4
80015ab0:	02d786b3          	mul	a3,a5,a3
80015ab4:	02000813          	li	a6,32
80015ab8:	00279593          	slli	a1,a5,0x2
80015abc:	ff000e13          	li	t3,-16
80015ac0:	40e80833          	sub	a6,a6,a4
80015ac4:	ffc68693          	addi	a3,a3,-4
80015ac8:	09c69663          	bne	a3,t3,80015b54 <__multf3+0x3e8>
80015acc:	08010693          	addi	a3,sp,128
80015ad0:	00b685b3          	add	a1,a3,a1
80015ad4:	04012683          	lw	a3,64(sp)
80015ad8:	fff78793          	addi	a5,a5,-1
80015adc:	00e69733          	sll	a4,a3,a4
80015ae0:	fce5a023          	sw	a4,-64(a1)
80015ae4:	fff00693          	li	a3,-1
80015ae8:	0ac0006f          	j	80015b94 <__multf3+0x428>
80015aec:	000a8a63          	beqz	s5,80015b00 <__multf3+0x394>
80015af0:	000a8513          	mv	a0,s5
80015af4:	1d5020ef          	jal	ra,800184c8 <__clzsi2>
80015af8:	02050513          	addi	a0,a0,32
80015afc:	fa1ff06f          	j	80015a9c <__multf3+0x330>
80015b00:	000b0a63          	beqz	s6,80015b14 <__multf3+0x3a8>
80015b04:	000b0513          	mv	a0,s6
80015b08:	1c1020ef          	jal	ra,800184c8 <__clzsi2>
80015b0c:	04050513          	addi	a0,a0,64
80015b10:	f8dff06f          	j	80015a9c <__multf3+0x330>
80015b14:	000a0513          	mv	a0,s4
80015b18:	1b1020ef          	jal	ra,800184c8 <__clzsi2>
80015b1c:	06050513          	addi	a0,a0,96
80015b20:	f7dff06f          	j	80015a9c <__multf3+0x330>
80015b24:	ffc00613          	li	a2,-4
80015b28:	02c78633          	mul	a2,a5,a2
80015b2c:	04010713          	addi	a4,sp,64
80015b30:	00300693          	li	a3,3
80015b34:	00c705b3          	add	a1,a4,a2
80015b38:	00c5a583          	lw	a1,12(a1)
80015b3c:	fff68693          	addi	a3,a3,-1
80015b40:	ffc70713          	addi	a4,a4,-4
80015b44:	00b72823          	sw	a1,16(a4)
80015b48:	fef6d6e3          	ble	a5,a3,80015b34 <__multf3+0x3c8>
80015b4c:	fff78793          	addi	a5,a5,-1
80015b50:	f95ff06f          	j	80015ae4 <__multf3+0x378>
80015b54:	04010613          	addi	a2,sp,64
80015b58:	00d60333          	add	t1,a2,a3
80015b5c:	00d588b3          	add	a7,a1,a3
80015b60:	011608b3          	add	a7,a2,a7
80015b64:	00c32603          	lw	a2,12(t1)
80015b68:	01032303          	lw	t1,16(t1)
80015b6c:	01065633          	srl	a2,a2,a6
80015b70:	00e31333          	sll	t1,t1,a4
80015b74:	00666633          	or	a2,a2,t1
80015b78:	00c8a823          	sw	a2,16(a7)
80015b7c:	f49ff06f          	j	80015ac4 <__multf3+0x358>
80015b80:	00279713          	slli	a4,a5,0x2
80015b84:	04010613          	addi	a2,sp,64
80015b88:	00e60733          	add	a4,a2,a4
80015b8c:	00072023          	sw	zero,0(a4)
80015b90:	fff78793          	addi	a5,a5,-1
80015b94:	fed796e3          	bne	a5,a3,80015b80 <__multf3+0x414>
80015b98:	ffffc7b7          	lui	a5,0xffffc
80015b9c:	01178793          	addi	a5,a5,17 # ffffc011 <__stack+0x7ffbf545>
80015ba0:	40a78533          	sub	a0,a5,a0
80015ba4:	d49ff06f          	j	800158ec <__multf3+0x180>
80015ba8:	016a6a33          	or	s4,s4,s6
80015bac:	015a6ab3          	or	s5,s4,s5
80015bb0:	00faeab3          	or	s5,s5,a5
80015bb4:	00200713          	li	a4,2
80015bb8:	d20a8ce3          	beqz	s5,800158f0 <__multf3+0x184>
80015bbc:	00300713          	li	a4,3
80015bc0:	d31ff06f          	j	800158f0 <__multf3+0x184>
80015bc4:	00000513          	li	a0,0
80015bc8:	00100713          	li	a4,1
80015bcc:	d25ff06f          	j	800158f0 <__multf3+0x184>
  FP_MUL_Q (R, A, B);
80015bd0:	03012703          	lw	a4,48(sp)
80015bd4:	04012e03          	lw	t3,64(sp)
80015bd8:	00010537          	lui	a0,0x10
80015bdc:	fff50693          	addi	a3,a0,-1 # ffff <_HEAP_SIZE+0xefff>
80015be0:	01075f93          	srli	t6,a4,0x10
80015be4:	010e5a93          	srli	s5,t3,0x10
80015be8:	00d77733          	and	a4,a4,a3
80015bec:	00de7e33          	and	t3,t3,a3
80015bf0:	02ea87b3          	mul	a5,s5,a4
80015bf4:	02ee0633          	mul	a2,t3,a4
80015bf8:	03cf8833          	mul	a6,t6,t3
80015bfc:	010785b3          	add	a1,a5,a6
80015c00:	01065793          	srli	a5,a2,0x10
80015c04:	00b787b3          	add	a5,a5,a1
80015c08:	035f8b33          	mul	s6,t6,s5
80015c0c:	0107f463          	bleu	a6,a5,80015c14 <__multf3+0x4a8>
80015c10:	00ab0b33          	add	s6,s6,a0
80015c14:	04412f03          	lw	t5,68(sp)
80015c18:	0107d293          	srli	t0,a5,0x10
80015c1c:	00d7f7b3          	and	a5,a5,a3
80015c20:	00d67633          	and	a2,a2,a3
80015c24:	01079793          	slli	a5,a5,0x10
80015c28:	00c787b3          	add	a5,a5,a2
80015c2c:	010f5493          	srli	s1,t5,0x10
80015c30:	00df7f33          	and	t5,t5,a3
80015c34:	02f12223          	sw	a5,36(sp)
80015c38:	06f12023          	sw	a5,96(sp)
80015c3c:	02ef06b3          	mul	a3,t5,a4
80015c40:	02e487b3          	mul	a5,s1,a4
80015c44:	03ef8633          	mul	a2,t6,t5
80015c48:	00c78533          	add	a0,a5,a2
80015c4c:	0106d793          	srli	a5,a3,0x10
80015c50:	00a787b3          	add	a5,a5,a0
80015c54:	029f8a33          	mul	s4,t6,s1
80015c58:	00c7f663          	bleu	a2,a5,80015c64 <__multf3+0x4f8>
80015c5c:	00010637          	lui	a2,0x10
80015c60:	00ca0a33          	add	s4,s4,a2
80015c64:	00010637          	lui	a2,0x10
80015c68:	fff60593          	addi	a1,a2,-1 # ffff <_HEAP_SIZE+0xefff>
80015c6c:	00b7f533          	and	a0,a5,a1
80015c70:	0107dd93          	srli	s11,a5,0x10
80015c74:	03412783          	lw	a5,52(sp)
80015c78:	00b6f6b3          	and	a3,a3,a1
80015c7c:	01051513          	slli	a0,a0,0x10
80015c80:	0107d913          	srli	s2,a5,0x10
80015c84:	00b7f5b3          	and	a1,a5,a1
80015c88:	00d50533          	add	a0,a0,a3
80015c8c:	02ba87b3          	mul	a5,s5,a1
80015c90:	00a282b3          	add	t0,t0,a0
80015c94:	02be06b3          	mul	a3,t3,a1
80015c98:	03c90333          	mul	t1,s2,t3
80015c9c:	00678833          	add	a6,a5,t1
80015ca0:	0106d793          	srli	a5,a3,0x10
80015ca4:	010787b3          	add	a5,a5,a6
80015ca8:	032a88b3          	mul	a7,s5,s2
80015cac:	0067f463          	bleu	t1,a5,80015cb4 <__multf3+0x548>
80015cb0:	00c888b3          	add	a7,a7,a2
80015cb4:	0107d993          	srli	s3,a5,0x10
80015cb8:	011989b3          	add	s3,s3,a7
80015cbc:	000108b7          	lui	a7,0x10
80015cc0:	fff88613          	addi	a2,a7,-1 # ffff <_HEAP_SIZE+0xefff>
80015cc4:	00c7f833          	and	a6,a5,a2
80015cc8:	00c6f6b3          	and	a3,a3,a2
80015ccc:	01081813          	slli	a6,a6,0x10
80015cd0:	00d80833          	add	a6,a6,a3
80015cd4:	03e58633          	mul	a2,a1,t5
80015cd8:	03e907b3          	mul	a5,s2,t5
80015cdc:	01065e93          	srli	t4,a2,0x10
80015ce0:	02b486b3          	mul	a3,s1,a1
80015ce4:	00f686b3          	add	a3,a3,a5
80015ce8:	00de86b3          	add	a3,t4,a3
80015cec:	03248333          	mul	t1,s1,s2
80015cf0:	00f6f463          	bleu	a5,a3,80015cf8 <__multf3+0x58c>
80015cf4:	01130333          	add	t1,t1,a7
80015cf8:	0106d793          	srli	a5,a3,0x10
80015cfc:	04812e83          	lw	t4,72(sp)
80015d00:	006787b3          	add	a5,a5,t1
80015d04:	000103b7          	lui	t2,0x10
80015d08:	02f12423          	sw	a5,40(sp)
80015d0c:	fff38793          	addi	a5,t2,-1 # ffff <_HEAP_SIZE+0xefff>
80015d10:	010ed413          	srli	s0,t4,0x10
80015d14:	00fefeb3          	and	t4,t4,a5
80015d18:	02e408b3          	mul	a7,s0,a4
80015d1c:	00f67633          	and	a2,a2,a5
80015d20:	00f6f6b3          	and	a3,a3,a5
80015d24:	01069693          	slli	a3,a3,0x10
80015d28:	00c686b3          	add	a3,a3,a2
80015d2c:	02ee8333          	mul	t1,t4,a4
80015d30:	03df8bb3          	mul	s7,t6,t4
80015d34:	017887b3          	add	a5,a7,s7
80015d38:	01035893          	srli	a7,t1,0x10
80015d3c:	00f888b3          	add	a7,a7,a5
80015d40:	028f8633          	mul	a2,t6,s0
80015d44:	0178f463          	bleu	s7,a7,80015d4c <__multf3+0x5e0>
80015d48:	00760633          	add	a2,a2,t2
80015d4c:	0108d793          	srli	a5,a7,0x10
80015d50:	00010c37          	lui	s8,0x10
80015d54:	00c787b3          	add	a5,a5,a2
80015d58:	fffc0613          	addi	a2,s8,-1 # ffff <_HEAP_SIZE+0xefff>
80015d5c:	02f12623          	sw	a5,44(sp)
80015d60:	00c8f7b3          	and	a5,a7,a2
80015d64:	03812883          	lw	a7,56(sp)
80015d68:	00c37333          	and	t1,t1,a2
80015d6c:	01079793          	slli	a5,a5,0x10
80015d70:	0108d393          	srli	t2,a7,0x10
80015d74:	00c8f633          	and	a2,a7,a2
80015d78:	006787b3          	add	a5,a5,t1
80015d7c:	03c608b3          	mul	a7,a2,t3
80015d80:	03c38cb3          	mul	s9,t2,t3
80015d84:	0108dd13          	srli	s10,a7,0x10
80015d88:	02ca8333          	mul	t1,s5,a2
80015d8c:	01930333          	add	t1,t1,s9
80015d90:	006d0333          	add	t1,s10,t1
80015d94:	027a8bb3          	mul	s7,s5,t2
80015d98:	01937463          	bleu	s9,t1,80015da0 <__multf3+0x634>
80015d9c:	018b8bb3          	add	s7,s7,s8
80015da0:	01035c13          	srli	s8,t1,0x10
80015da4:	017c0bb3          	add	s7,s8,s7
80015da8:	00010c37          	lui	s8,0x10
80015dac:	005b02b3          	add	t0,s6,t0
80015db0:	fffc0c93          	addi	s9,s8,-1 # ffff <_HEAP_SIZE+0xefff>
80015db4:	00a2b533          	sltu	a0,t0,a0
80015db8:	01937333          	and	t1,t1,s9
80015dbc:	00ad8db3          	add	s11,s11,a0
80015dc0:	01031313          	slli	t1,t1,0x10
80015dc4:	0198f8b3          	and	a7,a7,s9
80015dc8:	014d8a33          	add	s4,s11,s4
80015dcc:	011308b3          	add	a7,t1,a7
80015dd0:	01028333          	add	t1,t0,a6
80015dd4:	01033833          	sltu	a6,t1,a6
80015dd8:	00612a23          	sw	t1,20(sp)
80015ddc:	06612223          	sw	t1,100(sp)
80015de0:	013a0333          	add	t1,s4,s3
80015de4:	01030b33          	add	s6,t1,a6
80015de8:	013339b3          	sltu	s3,t1,s3
80015dec:	010b3833          	sltu	a6,s6,a6
80015df0:	0109e833          	or	a6,s3,a6
80015df4:	00aa3533          	sltu	a0,s4,a0
80015df8:	00a80533          	add	a0,a6,a0
80015dfc:	02812803          	lw	a6,40(sp)
80015e00:	00db02b3          	add	t0,s6,a3
80015e04:	02812983          	lw	s3,40(sp)
80015e08:	00d2b6b3          	sltu	a3,t0,a3
80015e0c:	01050533          	add	a0,a0,a6
80015e10:	02c12303          	lw	t1,44(sp)
80015e14:	00d50833          	add	a6,a0,a3
80015e18:	00f282b3          	add	t0,t0,a5
80015e1c:	01353533          	sltu	a0,a0,s3
80015e20:	00d836b3          	sltu	a3,a6,a3
80015e24:	00f2b7b3          	sltu	a5,t0,a5
80015e28:	00680db3          	add	s11,a6,t1
80015e2c:	00d566b3          	or	a3,a0,a3
80015e30:	02c12503          	lw	a0,44(sp)
80015e34:	00fd8333          	add	t1,s11,a5
80015e38:	011282b3          	add	t0,t0,a7
80015e3c:	0112b8b3          	sltu	a7,t0,a7
80015e40:	00f337b3          	sltu	a5,t1,a5
80015e44:	00512c23          	sw	t0,24(sp)
80015e48:	06512423          	sw	t0,104(sp)
80015e4c:	017302b3          	add	t0,t1,s7
80015e50:	04c12303          	lw	t1,76(sp)
80015e54:	01128d33          	add	s10,t0,a7
80015e58:	00adbdb3          	sltu	s11,s11,a0
80015e5c:	00fde7b3          	or	a5,s11,a5
80015e60:	0172bbb3          	sltu	s7,t0,s7
80015e64:	011d38b3          	sltu	a7,s10,a7
80015e68:	00f686b3          	add	a3,a3,a5
80015e6c:	01035293          	srli	t0,t1,0x10
80015e70:	011bea33          	or	s4,s7,a7
80015e74:	01937333          	and	t1,t1,s9
80015e78:	02e307b3          	mul	a5,t1,a4
80015e7c:	01468a33          	add	s4,a3,s4
80015e80:	02e28733          	mul	a4,t0,a4
80015e84:	0107d893          	srli	a7,a5,0x10
80015e88:	026f86b3          	mul	a3,t6,t1
80015e8c:	00d70733          	add	a4,a4,a3
80015e90:	00e888b3          	add	a7,a7,a4
80015e94:	025f8fb3          	mul	t6,t6,t0
80015e98:	00d8f463          	bleu	a3,a7,80015ea0 <__multf3+0x734>
80015e9c:	018f8fb3          	add	t6,t6,s8
80015ea0:	03c12983          	lw	s3,60(sp)
80015ea4:	000106b7          	lui	a3,0x10
80015ea8:	fff68513          	addi	a0,a3,-1 # ffff <_HEAP_SIZE+0xefff>
80015eac:	0108d713          	srli	a4,a7,0x10
80015eb0:	00a8f8b3          	and	a7,a7,a0
80015eb4:	01f70733          	add	a4,a4,t6
80015eb8:	00a7f7b3          	and	a5,a5,a0
80015ebc:	0109df93          	srli	t6,s3,0x10
80015ec0:	01089893          	slli	a7,a7,0x10
80015ec4:	00a9f9b3          	and	s3,s3,a0
80015ec8:	00f888b3          	add	a7,a7,a5
80015ecc:	03fa8b33          	mul	s6,s5,t6
80015ed0:	00070d93          	mv	s11,a4
80015ed4:	033e07b3          	mul	a5,t3,s3
80015ed8:	033a8ab3          	mul	s5,s5,s3
80015edc:	0107d813          	srli	a6,a5,0x10
80015ee0:	03cf8e33          	mul	t3,t6,t3
80015ee4:	01ca8ab3          	add	s5,s5,t3
80015ee8:	01580ab3          	add	s5,a6,s5
80015eec:	01caf463          	bleu	t3,s5,80015ef4 <__multf3+0x788>
80015ef0:	00db0b33          	add	s6,s6,a3
80015ef4:	010ad813          	srli	a6,s5,0x10
80015ef8:	01680733          	add	a4,a6,s6
80015efc:	00010b37          	lui	s6,0x10
80015f00:	02e12423          	sw	a4,40(sp)
80015f04:	fffb0713          	addi	a4,s6,-1 # ffff <_HEAP_SIZE+0xefff>
80015f08:	00eaf833          	and	a6,s5,a4
80015f0c:	00e7f7b3          	and	a5,a5,a4
80015f10:	01081813          	slli	a6,a6,0x10
80015f14:	00f80833          	add	a6,a6,a5
80015f18:	02be86b3          	mul	a3,t4,a1
80015f1c:	03d90e33          	mul	t3,s2,t4
80015f20:	0106d513          	srli	a0,a3,0x10
80015f24:	02b407b3          	mul	a5,s0,a1
80015f28:	01c787b3          	add	a5,a5,t3
80015f2c:	00f507b3          	add	a5,a0,a5
80015f30:	02890733          	mul	a4,s2,s0
80015f34:	01c7f463          	bleu	t3,a5,80015f3c <__multf3+0x7d0>
80015f38:	01670733          	add	a4,a4,s6
80015f3c:	0107d513          	srli	a0,a5,0x10
80015f40:	00e50733          	add	a4,a0,a4
80015f44:	00010b37          	lui	s6,0x10
80015f48:	02e12623          	sw	a4,44(sp)
80015f4c:	fffb0713          	addi	a4,s6,-1 # ffff <_HEAP_SIZE+0xefff>
80015f50:	00e7f533          	and	a0,a5,a4
80015f54:	00e6f6b3          	and	a3,a3,a4
80015f58:	03e38e33          	mul	t3,t2,t5
80015f5c:	01051513          	slli	a0,a0,0x10
80015f60:	00d50533          	add	a0,a0,a3
80015f64:	03e60733          	mul	a4,a2,t5
80015f68:	02c487b3          	mul	a5,s1,a2
80015f6c:	01075693          	srli	a3,a4,0x10
80015f70:	01c787b3          	add	a5,a5,t3
80015f74:	00f687b3          	add	a5,a3,a5
80015f78:	02748ab3          	mul	s5,s1,t2
80015f7c:	01c7f463          	bleu	t3,a5,80015f84 <__multf3+0x818>
80015f80:	016a8ab3          	add	s5,s5,s6
80015f84:	000106b7          	lui	a3,0x10
80015f88:	fff68e13          	addi	t3,a3,-1 # ffff <_HEAP_SIZE+0xefff>
80015f8c:	01c7f6b3          	and	a3,a5,t3
80015f90:	0107db93          	srli	s7,a5,0x10
80015f94:	011d07b3          	add	a5,s10,a7
80015f98:	01c77733          	and	a4,a4,t3
80015f9c:	0117b8b3          	sltu	a7,a5,a7
80015fa0:	01ba0a33          	add	s4,s4,s11
80015fa4:	01069693          	slli	a3,a3,0x10
80015fa8:	00e686b3          	add	a3,a3,a4
80015fac:	011a0d33          	add	s10,s4,a7
80015fb0:	02812703          	lw	a4,40(sp)
80015fb4:	011d38b3          	sltu	a7,s10,a7
80015fb8:	01ba3a33          	sltu	s4,s4,s11
80015fbc:	010787b3          	add	a5,a5,a6
80015fc0:	011a6a33          	or	s4,s4,a7
80015fc4:	02812883          	lw	a7,40(sp)
80015fc8:	0107b833          	sltu	a6,a5,a6
80015fcc:	00ed0b33          	add	s6,s10,a4
80015fd0:	02c12703          	lw	a4,44(sp)
80015fd4:	010b0cb3          	add	s9,s6,a6
80015fd8:	00a787b3          	add	a5,a5,a0
80015fdc:	011b3b33          	sltu	s6,s6,a7
80015fe0:	010cb833          	sltu	a6,s9,a6
80015fe4:	00a7b533          	sltu	a0,a5,a0
80015fe8:	00ec8733          	add	a4,s9,a4
80015fec:	010b6b33          	or	s6,s6,a6
80015ff0:	02c12803          	lw	a6,44(sp)
80015ff4:	00a70c33          	add	s8,a4,a0
80015ff8:	015b8bb3          	add	s7,s7,s5
80015ffc:	00d787b3          	add	a5,a5,a3
80016000:	00d7b6b3          	sltu	a3,a5,a3
80016004:	017c0ab3          	add	s5,s8,s7
80016008:	00da8e33          	add	t3,s5,a3
8001600c:	01073733          	sltu	a4,a4,a6
80016010:	00ac3533          	sltu	a0,s8,a0
80016014:	00a76733          	or	a4,a4,a0
80016018:	00de36b3          	sltu	a3,t3,a3
8001601c:	016a0a33          	add	s4,s4,s6
80016020:	017abab3          	sltu	s5,s5,s7
80016024:	00ea0a33          	add	s4,s4,a4
80016028:	00daeab3          	or	s5,s5,a3
8001602c:	015a06b3          	add	a3,s4,s5
80016030:	02ce8833          	mul	a6,t4,a2
80016034:	06f12623          	sw	a5,108(sp)
80016038:	03d38a33          	mul	s4,t2,t4
8001603c:	01085513          	srli	a0,a6,0x10
80016040:	02c40733          	mul	a4,s0,a2
80016044:	01470733          	add	a4,a4,s4
80016048:	00e50733          	add	a4,a0,a4
8001604c:	027408b3          	mul	a7,s0,t2
80016050:	01477663          	bleu	s4,a4,8001605c <__multf3+0x8f0>
80016054:	00010537          	lui	a0,0x10
80016058:	00a888b3          	add	a7,a7,a0
8001605c:	00010a37          	lui	s4,0x10
80016060:	01075513          	srli	a0,a4,0x10
80016064:	fffa0a93          	addi	s5,s4,-1 # ffff <_HEAP_SIZE+0xefff>
80016068:	011508b3          	add	a7,a0,a7
8001606c:	01577533          	and	a0,a4,s5
80016070:	01587833          	and	a6,a6,s5
80016074:	01051513          	slli	a0,a0,0x10
80016078:	02690ab3          	mul	s5,s2,t1
8001607c:	01050533          	add	a0,a0,a6
80016080:	02b30833          	mul	a6,t1,a1
80016084:	02b285b3          	mul	a1,t0,a1
80016088:	01085713          	srli	a4,a6,0x10
8001608c:	015585b3          	add	a1,a1,s5
80016090:	00b70733          	add	a4,a4,a1
80016094:	02590933          	mul	s2,s2,t0
80016098:	01577463          	bleu	s5,a4,800160a0 <__multf3+0x934>
8001609c:	01490933          	add	s2,s2,s4
800160a0:	00010ab7          	lui	s5,0x10
800160a4:	01075593          	srli	a1,a4,0x10
800160a8:	fffa8a13          	addi	s4,s5,-1 # ffff <_HEAP_SIZE+0xefff>
800160ac:	01487833          	and	a6,a6,s4
800160b0:	01258933          	add	s2,a1,s2
800160b4:	014775b3          	and	a1,a4,s4
800160b8:	01059593          	slli	a1,a1,0x10
800160bc:	03e98733          	mul	a4,s3,t5
800160c0:	010585b3          	add	a1,a1,a6
800160c4:	03ef8f33          	mul	t5,t6,t5
800160c8:	01075813          	srli	a6,a4,0x10
800160cc:	03f48a33          	mul	s4,s1,t6
800160d0:	033484b3          	mul	s1,s1,s3
800160d4:	01e484b3          	add	s1,s1,t5
800160d8:	009804b3          	add	s1,a6,s1
800160dc:	01e4f463          	bleu	t5,s1,800160e4 <__multf3+0x978>
800160e0:	015a0a33          	add	s4,s4,s5
800160e4:	0104db13          	srli	s6,s1,0x10
800160e8:	014b0b33          	add	s6,s6,s4
800160ec:	00010a37          	lui	s4,0x10
800160f0:	fffa0f13          	addi	t5,s4,-1 # ffff <_HEAP_SIZE+0xefff>
800160f4:	01e4f833          	and	a6,s1,t5
800160f8:	01e77733          	and	a4,a4,t5
800160fc:	026384b3          	mul	s1,t2,t1
80016100:	01081813          	slli	a6,a6,0x10
80016104:	00e80833          	add	a6,a6,a4
80016108:	02660f33          	mul	t5,a2,t1
8001610c:	02c28633          	mul	a2,t0,a2
80016110:	010f5713          	srli	a4,t5,0x10
80016114:	00960633          	add	a2,a2,s1
80016118:	00c70633          	add	a2,a4,a2
8001611c:	025383b3          	mul	t2,t2,t0
80016120:	00967463          	bleu	s1,a2,80016128 <__multf3+0x9bc>
80016124:	014383b3          	add	t2,t2,s4
80016128:	00010a37          	lui	s4,0x10
8001612c:	01065713          	srli	a4,a2,0x10
80016130:	fffa0493          	addi	s1,s4,-1 # ffff <_HEAP_SIZE+0xefff>
80016134:	007703b3          	add	t2,a4,t2
80016138:	00967733          	and	a4,a2,s1
8001613c:	009f7f33          	and	t5,t5,s1
80016140:	01071713          	slli	a4,a4,0x10
80016144:	01e70733          	add	a4,a4,t5
80016148:	03340633          	mul	a2,s0,s3
8001614c:	033e8f33          	mul	t5,t4,s3
80016150:	03df8eb3          	mul	t4,t6,t4
80016154:	010f5a93          	srli	s5,t5,0x10
80016158:	01d60633          	add	a2,a2,t4
8001615c:	00ca8633          	add	a2,s5,a2
80016160:	03f404b3          	mul	s1,s0,t6
80016164:	01d67463          	bleu	t4,a2,8001616c <__multf3+0xa00>
80016168:	014484b3          	add	s1,s1,s4
8001616c:	01065c13          	srli	s8,a2,0x10
80016170:	00010cb7          	lui	s9,0x10
80016174:	009c0c33          	add	s8,s8,s1
80016178:	00ae0e33          	add	t3,t3,a0
8001617c:	fffc8493          	addi	s1,s9,-1 # ffff <_HEAP_SIZE+0xefff>
80016180:	00ae3533          	sltu	a0,t3,a0
80016184:	011686b3          	add	a3,a3,a7
80016188:	00967633          	and	a2,a2,s1
8001618c:	00a68db3          	add	s11,a3,a0
80016190:	009f7f33          	and	t5,t5,s1
80016194:	00be0e33          	add	t3,t3,a1
80016198:	01061613          	slli	a2,a2,0x10
8001619c:	01e60633          	add	a2,a2,t5
800161a0:	00be35b3          	sltu	a1,t3,a1
800161a4:	012d8f33          	add	t5,s11,s2
800161a8:	010e0e33          	add	t3,t3,a6
800161ac:	00bf0d33          	add	s10,t5,a1
800161b0:	016d0eb3          	add	t4,s10,s6
800161b4:	07c12823          	sw	t3,112(sp)
800161b8:	010e3e33          	sltu	t3,t3,a6
800161bc:	01ce8a33          	add	s4,t4,t3
800161c0:	0116b6b3          	sltu	a3,a3,a7
800161c4:	00bd35b3          	sltu	a1,s10,a1
800161c8:	00adb533          	sltu	a0,s11,a0
800161cc:	012f3933          	sltu	s2,t5,s2
800161d0:	00a6e533          	or	a0,a3,a0
800161d4:	00b96933          	or	s2,s2,a1
800161d8:	016ebeb3          	sltu	t4,t4,s6
800161dc:	01ca3e33          	sltu	t3,s4,t3
800161e0:	01250533          	add	a0,a0,s2
800161e4:	01ceeeb3          	or	t4,t4,t3
800161e8:	00ea0833          	add	a6,s4,a4
800161ec:	01d50533          	add	a0,a0,t4
800161f0:	00e83733          	sltu	a4,a6,a4
800161f4:	00750533          	add	a0,a0,t2
800161f8:	00e506b3          	add	a3,a0,a4
800161fc:	007533b3          	sltu	t2,a0,t2
80016200:	03330533          	mul	a0,t1,s3
80016204:	00c80833          	add	a6,a6,a2
80016208:	00e6b733          	sltu	a4,a3,a4
8001620c:	00c83633          	sltu	a2,a6,a2
80016210:	018686b3          	add	a3,a3,s8
80016214:	00c685b3          	add	a1,a3,a2
80016218:	0186bc33          	sltu	s8,a3,s8
8001621c:	00c5b633          	sltu	a2,a1,a2
80016220:	07012a23          	sw	a6,116(sp)
80016224:	00e3e733          	or	a4,t2,a4
80016228:	026f8333          	mul	t1,t6,t1
8001622c:	01055693          	srli	a3,a0,0x10
80016230:	00cc6633          	or	a2,s8,a2
80016234:	033289b3          	mul	s3,t0,s3
80016238:	006989b3          	add	s3,s3,t1
8001623c:	03f28fb3          	mul	t6,t0,t6
80016240:	013682b3          	add	t0,a3,s3
80016244:	0062f463          	bleu	t1,t0,8001624c <__multf3+0xae0>
80016248:	019f8fb3          	add	t6,t6,s9
8001624c:	0092f6b3          	and	a3,t0,s1
80016250:	01069693          	slli	a3,a3,0x10
80016254:	009574b3          	and	s1,a0,s1
80016258:	009684b3          	add	s1,a3,s1
8001625c:	0102d293          	srli	t0,t0,0x10
80016260:	009585b3          	add	a1,a1,s1
80016264:	00e282b3          	add	t0,t0,a4
80016268:	01412683          	lw	a3,20(sp)
8001626c:	02412703          	lw	a4,36(sp)
80016270:	00c282b3          	add	t0,t0,a2
80016274:	0095b4b3          	sltu	s1,a1,s1
80016278:	009282b3          	add	t0,t0,s1
8001627c:	01f28fb3          	add	t6,t0,t6
80016280:	00d762b3          	or	t0,a4,a3
80016284:	01812703          	lw	a4,24(sp)
80016288:	00d79793          	slli	a5,a5,0xd
8001628c:	07f12e23          	sw	t6,124(sp)
80016290:	005762b3          	or	t0,a4,t0
80016294:	06b12c23          	sw	a1,120(sp)
80016298:	0057e7b3          	or	a5,a5,t0
8001629c:	06010713          	addi	a4,sp,96
800162a0:	00000613          	li	a2,0
800162a4:	00400513          	li	a0,4
800162a8:	00c72683          	lw	a3,12(a4)
800162ac:	01072583          	lw	a1,16(a4)
800162b0:	00160613          	addi	a2,a2,1
800162b4:	0136d693          	srli	a3,a3,0x13
800162b8:	00d59593          	slli	a1,a1,0xd
800162bc:	00b6e6b3          	or	a3,a3,a1
800162c0:	00d72023          	sw	a3,0(a4)
800162c4:	00470713          	addi	a4,a4,4
800162c8:	fea610e3          	bne	a2,a0,800162a8 <__multf3+0xb3c>
800162cc:	06012703          	lw	a4,96(sp)
800162d0:	06812683          	lw	a3,104(sp)
800162d4:	00f037b3          	snez	a5,a5
800162d8:	00e7e7b3          	or	a5,a5,a4
800162dc:	04d12c23          	sw	a3,88(sp)
800162e0:	06c12703          	lw	a4,108(sp)
800162e4:	06412683          	lw	a3,100(sp)
800162e8:	04f12823          	sw	a5,80(sp)
800162ec:	04e12e23          	sw	a4,92(sp)
800162f0:	04d12a23          	sw	a3,84(sp)
800162f4:	00b71693          	slli	a3,a4,0xb
800162f8:	2406d463          	bgez	a3,80016540 <__multf3+0xdd4>
800162fc:	01f79793          	slli	a5,a5,0x1f
80016300:	05010713          	addi	a4,sp,80
80016304:	00000613          	li	a2,0
80016308:	00300513          	li	a0,3
8001630c:	00072683          	lw	a3,0(a4)
80016310:	00472583          	lw	a1,4(a4)
80016314:	00160613          	addi	a2,a2,1
80016318:	0016d693          	srli	a3,a3,0x1
8001631c:	01f59593          	slli	a1,a1,0x1f
80016320:	00b6e6b3          	or	a3,a3,a1
80016324:	00d72023          	sw	a3,0(a4)
80016328:	00470713          	addi	a4,a4,4
8001632c:	fea610e3          	bne	a2,a0,8001630c <__multf3+0xba0>
80016330:	05c12703          	lw	a4,92(sp)
80016334:	00f037b3          	snez	a5,a5
80016338:	00175713          	srli	a4,a4,0x1
8001633c:	04e12e23          	sw	a4,92(sp)
80016340:	05012703          	lw	a4,80(sp)
80016344:	00f767b3          	or	a5,a4,a5
80016348:	04f12823          	sw	a5,80(sp)
  FP_PACK_Q (r, R);
8001634c:	01c12703          	lw	a4,28(sp)
80016350:	000047b7          	lui	a5,0x4
80016354:	fff78793          	addi	a5,a5,-1 # 3fff <_HEAP_SIZE+0x2fff>
80016358:	00f707b3          	add	a5,a4,a5
8001635c:	20f05463          	blez	a5,80016564 <__multf3+0xdf8>
80016360:	05012703          	lw	a4,80(sp)
80016364:	00777693          	andi	a3,a4,7
80016368:	04068463          	beqz	a3,800163b0 <__multf3+0xc44>
8001636c:	00f77693          	andi	a3,a4,15
80016370:	00400613          	li	a2,4
80016374:	02c68e63          	beq	a3,a2,800163b0 <__multf3+0xc44>
80016378:	05412683          	lw	a3,84(sp)
8001637c:	00470713          	addi	a4,a4,4
80016380:	04e12823          	sw	a4,80(sp)
80016384:	00473713          	sltiu	a4,a4,4
80016388:	00d706b3          	add	a3,a4,a3
8001638c:	00e6b733          	sltu	a4,a3,a4
80016390:	04d12a23          	sw	a3,84(sp)
80016394:	05812683          	lw	a3,88(sp)
80016398:	00d706b3          	add	a3,a4,a3
8001639c:	04d12c23          	sw	a3,88(sp)
800163a0:	00e6b6b3          	sltu	a3,a3,a4
800163a4:	05c12703          	lw	a4,92(sp)
800163a8:	00e686b3          	add	a3,a3,a4
800163ac:	04d12e23          	sw	a3,92(sp)
800163b0:	05c12703          	lw	a4,92(sp)
800163b4:	00b71693          	slli	a3,a4,0xb
800163b8:	0206d063          	bgez	a3,800163d8 <__multf3+0xc6c>
800163bc:	fff007b7          	lui	a5,0xfff00
800163c0:	fff78793          	addi	a5,a5,-1 # ffefffff <__stack+0x7fec3533>
800163c4:	00f77733          	and	a4,a4,a5
800163c8:	04e12e23          	sw	a4,92(sp)
800163cc:	01c12703          	lw	a4,28(sp)
800163d0:	000047b7          	lui	a5,0x4
800163d4:	00f707b3          	add	a5,a4,a5
800163d8:	05010713          	addi	a4,sp,80
800163dc:	00000613          	li	a2,0
800163e0:	00300513          	li	a0,3
800163e4:	00072683          	lw	a3,0(a4)
800163e8:	00472583          	lw	a1,4(a4)
800163ec:	00160613          	addi	a2,a2,1
800163f0:	0036d693          	srli	a3,a3,0x3
800163f4:	01d59593          	slli	a1,a1,0x1d
800163f8:	00b6e6b3          	or	a3,a3,a1
800163fc:	00d72023          	sw	a3,0(a4)
80016400:	00470713          	addi	a4,a4,4
80016404:	fea610e3          	bne	a2,a0,800163e4 <__multf3+0xc78>
80016408:	00008737          	lui	a4,0x8
8001640c:	ffe70693          	addi	a3,a4,-2 # 7ffe <_HEAP_SIZE+0x6ffe>
80016410:	12f6ce63          	blt	a3,a5,8001654c <__multf3+0xde0>
80016414:	05c12703          	lw	a4,92(sp)
80016418:	00375713          	srli	a4,a4,0x3
8001641c:	04e12e23          	sw	a4,92(sp)
80016420:	05c12703          	lw	a4,92(sp)
80016424:	800106b7          	lui	a3,0x80010
80016428:	fff68693          	addi	a3,a3,-1 # 8000ffff <__stack+0xfffd3533>
8001642c:	06e11623          	sh	a4,108(sp)
80016430:	00008737          	lui	a4,0x8
80016434:	fff70713          	addi	a4,a4,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016438:	00e7f7b3          	and	a5,a5,a4
8001643c:	06c12703          	lw	a4,108(sp)
80016440:	01079793          	slli	a5,a5,0x10
  FP_HANDLE_EXCEPTIONS;

  return r;
}
80016444:	0bc12083          	lw	ra,188(sp)
  FP_PACK_Q (r, R);
80016448:	00d77733          	and	a4,a4,a3
8001644c:	00f767b3          	or	a5,a4,a5
80016450:	01012703          	lw	a4,16(sp)
80016454:	800006b7          	lui	a3,0x80000
80016458:	fff6c693          	not	a3,a3
8001645c:	01f71713          	slli	a4,a4,0x1f
80016460:	00d7f7b3          	and	a5,a5,a3
80016464:	00e7e7b3          	or	a5,a5,a4
  return r;
80016468:	00c12683          	lw	a3,12(sp)
8001646c:	05012703          	lw	a4,80(sp)
}
80016470:	0b812403          	lw	s0,184(sp)
  return r;
80016474:	00f6a623          	sw	a5,12(a3) # 8000000c <__stack+0xfffc3540>
80016478:	00e6a023          	sw	a4,0(a3)
8001647c:	05412703          	lw	a4,84(sp)
}
80016480:	0b412483          	lw	s1,180(sp)
80016484:	0b012903          	lw	s2,176(sp)
  return r;
80016488:	00e6a223          	sw	a4,4(a3)
8001648c:	05812703          	lw	a4,88(sp)
}
80016490:	0ac12983          	lw	s3,172(sp)
80016494:	0a812a03          	lw	s4,168(sp)
  return r;
80016498:	00e6a423          	sw	a4,8(a3)
}
8001649c:	0a412a83          	lw	s5,164(sp)
800164a0:	0a012b03          	lw	s6,160(sp)
800164a4:	09c12b83          	lw	s7,156(sp)
800164a8:	09812c03          	lw	s8,152(sp)
800164ac:	09412c83          	lw	s9,148(sp)
800164b0:	09012d03          	lw	s10,144(sp)
800164b4:	08c12d83          	lw	s11,140(sp)
800164b8:	00068513          	mv	a0,a3
800164bc:	0c010113          	addi	sp,sp,192
800164c0:	00008067          	ret
  FP_UNPACK_Q (A, a);
800164c4:	01312823          	sw	s3,16(sp)
  FP_MUL_Q (R, A, B);
800164c8:	03012783          	lw	a5,48(sp)
800164cc:	04f12823          	sw	a5,80(sp)
800164d0:	03412783          	lw	a5,52(sp)
800164d4:	04f12a23          	sw	a5,84(sp)
800164d8:	03812783          	lw	a5,56(sp)
800164dc:	04f12c23          	sw	a5,88(sp)
800164e0:	03c12783          	lw	a5,60(sp)
800164e4:	04f12e23          	sw	a5,92(sp)
  FP_PACK_Q (r, R);
800164e8:	00200793          	li	a5,2
800164ec:	28fb8063          	beq	s7,a5,8001676c <__multf3+0x1000>
800164f0:	00300793          	li	a5,3
800164f4:	28fb8a63          	beq	s7,a5,80016788 <__multf3+0x101c>
800164f8:	00100793          	li	a5,1
800164fc:	e4fb98e3          	bne	s7,a5,8001634c <__multf3+0xbe0>
80016500:	04012e23          	sw	zero,92(sp)
80016504:	04012c23          	sw	zero,88(sp)
80016508:	04012a23          	sw	zero,84(sp)
8001650c:	04012823          	sw	zero,80(sp)
80016510:	21c0006f          	j	8001672c <__multf3+0xfc0>
  FP_UNPACK_Q (B, b);
80016514:	01212823          	sw	s2,16(sp)
  FP_MUL_Q (R, A, B);
80016518:	04012783          	lw	a5,64(sp)
8001651c:	00070b93          	mv	s7,a4
80016520:	04f12823          	sw	a5,80(sp)
80016524:	04412783          	lw	a5,68(sp)
80016528:	04f12a23          	sw	a5,84(sp)
8001652c:	04812783          	lw	a5,72(sp)
80016530:	04f12c23          	sw	a5,88(sp)
80016534:	04c12783          	lw	a5,76(sp)
80016538:	04f12e23          	sw	a5,92(sp)
8001653c:	fadff06f          	j	800164e8 <__multf3+0xd7c>
80016540:	02012783          	lw	a5,32(sp)
80016544:	00f12e23          	sw	a5,28(sp)
80016548:	e05ff06f          	j	8001634c <__multf3+0xbe0>
  FP_PACK_Q (r, R);
8001654c:	04012e23          	sw	zero,92(sp)
80016550:	04012c23          	sw	zero,88(sp)
80016554:	04012a23          	sw	zero,84(sp)
80016558:	04012823          	sw	zero,80(sp)
8001655c:	fff70793          	addi	a5,a4,-1
80016560:	ec1ff06f          	j	80016420 <__multf3+0xcb4>
80016564:	00100693          	li	a3,1
80016568:	40f687b3          	sub	a5,a3,a5
8001656c:	07400713          	li	a4,116
80016570:	1cf74263          	blt	a4,a5,80016734 <__multf3+0xfc8>
80016574:	4057d613          	srai	a2,a5,0x5
80016578:	01f7f693          	andi	a3,a5,31
8001657c:	00000713          	li	a4,0
80016580:	00000793          	li	a5,0
80016584:	00271593          	slli	a1,a4,0x2
80016588:	02c71263          	bne	a4,a2,800165ac <__multf3+0xe40>
8001658c:	04069863          	bnez	a3,800165dc <__multf3+0xe70>
80016590:	00300513          	li	a0,3
80016594:	05010613          	addi	a2,sp,80
80016598:	40e50533          	sub	a0,a0,a4
8001659c:	02d55463          	ble	a3,a0,800165c4 <__multf3+0xe58>
800165a0:	00400693          	li	a3,4
800165a4:	40e68733          	sub	a4,a3,a4
800165a8:	0840006f          	j	8001662c <__multf3+0xec0>
800165ac:	05010513          	addi	a0,sp,80
800165b0:	00b505b3          	add	a1,a0,a1
800165b4:	0005a583          	lw	a1,0(a1)
800165b8:	00170713          	addi	a4,a4,1
800165bc:	00b7e7b3          	or	a5,a5,a1
800165c0:	fc5ff06f          	j	80016584 <__multf3+0xe18>
800165c4:	00b60833          	add	a6,a2,a1
800165c8:	00082803          	lw	a6,0(a6)
800165cc:	00168693          	addi	a3,a3,1
800165d0:	00460613          	addi	a2,a2,4
800165d4:	ff062e23          	sw	a6,-4(a2)
800165d8:	fc5ff06f          	j	8001659c <__multf3+0xe30>
800165dc:	08010613          	addi	a2,sp,128
800165e0:	00b60633          	add	a2,a2,a1
800165e4:	fd062603          	lw	a2,-48(a2)
800165e8:	02000813          	li	a6,32
800165ec:	40d80833          	sub	a6,a6,a3
800165f0:	01061633          	sll	a2,a2,a6
800165f4:	00c7e7b3          	or	a5,a5,a2
800165f8:	00300613          	li	a2,3
800165fc:	05010893          	addi	a7,sp,80
80016600:	00000313          	li	t1,0
80016604:	40e60633          	sub	a2,a2,a4
80016608:	02c34663          	blt	t1,a2,80016634 <__multf3+0xec8>
8001660c:	00400593          	li	a1,4
80016610:	40e58733          	sub	a4,a1,a4
80016614:	00261613          	slli	a2,a2,0x2
80016618:	08010593          	addi	a1,sp,128
8001661c:	00c58633          	add	a2,a1,a2
80016620:	05c12583          	lw	a1,92(sp)
80016624:	00d5d6b3          	srl	a3,a1,a3
80016628:	fcd62823          	sw	a3,-48(a2)
8001662c:	00400613          	li	a2,4
80016630:	0400006f          	j	80016670 <__multf3+0xf04>
80016634:	00b88e33          	add	t3,a7,a1
80016638:	000e2503          	lw	a0,0(t3)
8001663c:	004e2e03          	lw	t3,4(t3)
80016640:	00130313          	addi	t1,t1,1
80016644:	00d55533          	srl	a0,a0,a3
80016648:	010e1e33          	sll	t3,t3,a6
8001664c:	01c56533          	or	a0,a0,t3
80016650:	00a8a023          	sw	a0,0(a7)
80016654:	00488893          	addi	a7,a7,4
80016658:	fb1ff06f          	j	80016608 <__multf3+0xe9c>
8001665c:	00271693          	slli	a3,a4,0x2
80016660:	05010593          	addi	a1,sp,80
80016664:	00d586b3          	add	a3,a1,a3
80016668:	0006a023          	sw	zero,0(a3)
8001666c:	00170713          	addi	a4,a4,1
80016670:	fec716e3          	bne	a4,a2,8001665c <__multf3+0xef0>
80016674:	05012683          	lw	a3,80(sp)
80016678:	00f037b3          	snez	a5,a5
8001667c:	00d7e7b3          	or	a5,a5,a3
80016680:	04f12823          	sw	a5,80(sp)
80016684:	0077f693          	andi	a3,a5,7
80016688:	04068263          	beqz	a3,800166cc <__multf3+0xf60>
8001668c:	00f7f693          	andi	a3,a5,15
80016690:	02e68e63          	beq	a3,a4,800166cc <__multf3+0xf60>
80016694:	05412703          	lw	a4,84(sp)
80016698:	00478793          	addi	a5,a5,4 # 4004 <_HEAP_SIZE+0x3004>
8001669c:	04f12823          	sw	a5,80(sp)
800166a0:	0047b793          	sltiu	a5,a5,4
800166a4:	00e78733          	add	a4,a5,a4
800166a8:	00f737b3          	sltu	a5,a4,a5
800166ac:	04e12a23          	sw	a4,84(sp)
800166b0:	05812703          	lw	a4,88(sp)
800166b4:	00e78733          	add	a4,a5,a4
800166b8:	04e12c23          	sw	a4,88(sp)
800166bc:	00f73733          	sltu	a4,a4,a5
800166c0:	05c12783          	lw	a5,92(sp)
800166c4:	00f70733          	add	a4,a4,a5
800166c8:	04e12e23          	sw	a4,92(sp)
800166cc:	05c12783          	lw	a5,92(sp)
800166d0:	00c79713          	slli	a4,a5,0xc
800166d4:	00075e63          	bgez	a4,800166f0 <__multf3+0xf84>
800166d8:	04012e23          	sw	zero,92(sp)
800166dc:	04012c23          	sw	zero,88(sp)
800166e0:	04012a23          	sw	zero,84(sp)
800166e4:	04012823          	sw	zero,80(sp)
800166e8:	00100793          	li	a5,1
800166ec:	d35ff06f          	j	80016420 <__multf3+0xcb4>
800166f0:	05010793          	addi	a5,sp,80
800166f4:	00000693          	li	a3,0
800166f8:	00300593          	li	a1,3
800166fc:	0007a703          	lw	a4,0(a5)
80016700:	0047a603          	lw	a2,4(a5)
80016704:	00168693          	addi	a3,a3,1
80016708:	00375713          	srli	a4,a4,0x3
8001670c:	01d61613          	slli	a2,a2,0x1d
80016710:	00c76733          	or	a4,a4,a2
80016714:	00e7a023          	sw	a4,0(a5)
80016718:	00478793          	addi	a5,a5,4
8001671c:	feb690e3          	bne	a3,a1,800166fc <__multf3+0xf90>
80016720:	05c12783          	lw	a5,92(sp)
80016724:	0037d793          	srli	a5,a5,0x3
80016728:	04f12e23          	sw	a5,92(sp)
8001672c:	00000793          	li	a5,0
80016730:	cf1ff06f          	j	80016420 <__multf3+0xcb4>
80016734:	05412783          	lw	a5,84(sp)
80016738:	05012703          	lw	a4,80(sp)
8001673c:	00f76733          	or	a4,a4,a5
80016740:	05812783          	lw	a5,88(sp)
80016744:	00f76733          	or	a4,a4,a5
80016748:	05c12783          	lw	a5,92(sp)
8001674c:	00f76733          	or	a4,a4,a5
80016750:	00000793          	li	a5,0
80016754:	cc0706e3          	beqz	a4,80016420 <__multf3+0xcb4>
80016758:	04012e23          	sw	zero,92(sp)
8001675c:	04012c23          	sw	zero,88(sp)
80016760:	04012a23          	sw	zero,84(sp)
80016764:	04012823          	sw	zero,80(sp)
80016768:	cb9ff06f          	j	80016420 <__multf3+0xcb4>
8001676c:	000087b7          	lui	a5,0x8
80016770:	04012e23          	sw	zero,92(sp)
80016774:	04012c23          	sw	zero,88(sp)
80016778:	04012a23          	sw	zero,84(sp)
8001677c:	04012823          	sw	zero,80(sp)
80016780:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016784:	c9dff06f          	j	80016420 <__multf3+0xcb4>
80016788:	000087b7          	lui	a5,0x8
8001678c:	04f12e23          	sw	a5,92(sp)
80016790:	04012c23          	sw	zero,88(sp)
80016794:	04012a23          	sw	zero,84(sp)
80016798:	04012823          	sw	zero,80(sp)
8001679c:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
800167a0:	00012823          	sw	zero,16(sp)
800167a4:	c7dff06f          	j	80016420 <__multf3+0xcb4>

800167a8 <__subtf3>:
#include "soft-fp.h"
#include "quad.h"

TFtype
__subtf3 (TFtype a, TFtype b)
{
800167a8:	fa010113          	addi	sp,sp,-96
800167ac:	0085a783          	lw	a5,8(a1)
800167b0:	05212823          	sw	s2,80(sp)
800167b4:	00c5a903          	lw	s2,12(a1)
800167b8:	0005a683          	lw	a3,0(a1)
800167bc:	0045a703          	lw	a4,4(a1)
800167c0:	04912a23          	sw	s1,84(sp)
  FP_DECL_Q (B);
  FP_DECL_Q (R);
  TFtype r;

  FP_INIT_ROUNDMODE;
  FP_UNPACK_SEMIRAW_Q (A, a);
800167c4:	02f12c23          	sw	a5,56(sp)
{
800167c8:	00050493          	mv	s1,a0
  FP_UNPACK_SEMIRAW_Q (A, a);
800167cc:	00f12c23          	sw	a5,24(sp)
{
800167d0:	00062e03          	lw	t3,0(a2)
  FP_UNPACK_SEMIRAW_Q (A, a);
800167d4:	01091793          	slli	a5,s2,0x10
{
800167d8:	00462303          	lw	t1,4(a2)
800167dc:	00862883          	lw	a7,8(a2)
800167e0:	00c62503          	lw	a0,12(a2)
800167e4:	04812c23          	sw	s0,88(sp)
  FP_UNPACK_SEMIRAW_Q (A, a);
800167e8:	0107d793          	srli	a5,a5,0x10
800167ec:	00191413          	slli	s0,s2,0x1
800167f0:	03212e23          	sw	s2,60(sp)
{
800167f4:	04112e23          	sw	ra,92(sp)
800167f8:	05312623          	sw	s3,76(sp)
800167fc:	05412423          	sw	s4,72(sp)
80016800:	05512223          	sw	s5,68(sp)
  FP_UNPACK_SEMIRAW_Q (A, a);
80016804:	02d12823          	sw	a3,48(sp)
80016808:	02e12a23          	sw	a4,52(sp)
8001680c:	00d12823          	sw	a3,16(sp)
80016810:	00e12a23          	sw	a4,20(sp)
80016814:	00f12e23          	sw	a5,28(sp)
80016818:	01145413          	srli	s0,s0,0x11
8001681c:	01f95913          	srli	s2,s2,0x1f
80016820:	01010813          	addi	a6,sp,16
80016824:	01c10593          	addi	a1,sp,28
80016828:	0005a783          	lw	a5,0(a1)
8001682c:	ffc5a703          	lw	a4,-4(a1)
80016830:	ffc58593          	addi	a1,a1,-4
80016834:	00379793          	slli	a5,a5,0x3
80016838:	01d75713          	srli	a4,a4,0x1d
8001683c:	00e7e7b3          	or	a5,a5,a4
80016840:	00f5a223          	sw	a5,4(a1)
80016844:	feb812e3          	bne	a6,a1,80016828 <__subtf3+0x80>
80016848:	01012683          	lw	a3,16(sp)
  FP_UNPACK_SEMIRAW_Q (B, b);
8001684c:	01051793          	slli	a5,a0,0x10
80016850:	00151613          	slli	a2,a0,0x1
  FP_UNPACK_SEMIRAW_Q (A, a);
80016854:	00369693          	slli	a3,a3,0x3
  FP_UNPACK_SEMIRAW_Q (B, b);
80016858:	0107d793          	srli	a5,a5,0x10
8001685c:	02612a23          	sw	t1,52(sp)
80016860:	03112c23          	sw	a7,56(sp)
80016864:	02a12e23          	sw	a0,60(sp)
80016868:	02612223          	sw	t1,36(sp)
8001686c:	03112423          	sw	a7,40(sp)
  FP_UNPACK_SEMIRAW_Q (A, a);
80016870:	00d12823          	sw	a3,16(sp)
  FP_UNPACK_SEMIRAW_Q (B, b);
80016874:	03c12823          	sw	t3,48(sp)
80016878:	03c12023          	sw	t3,32(sp)
8001687c:	02f12623          	sw	a5,44(sp)
80016880:	01165613          	srli	a2,a2,0x11
80016884:	01f55513          	srli	a0,a0,0x1f
80016888:	02010893          	addi	a7,sp,32
8001688c:	02c10313          	addi	t1,sp,44
80016890:	00032783          	lw	a5,0(t1)
80016894:	ffc32703          	lw	a4,-4(t1)
80016898:	ffc30313          	addi	t1,t1,-4
8001689c:	00379793          	slli	a5,a5,0x3
800168a0:	01d75713          	srli	a4,a4,0x1d
800168a4:	00e7e7b3          	or	a5,a5,a4
800168a8:	00f32223          	sw	a5,4(t1)
800168ac:	fe6892e3          	bne	a7,t1,80016890 <__subtf3+0xe8>
800168b0:	02012783          	lw	a5,32(sp)
  FP_SUB_Q (R, A, B);
800168b4:	00008737          	lui	a4,0x8
800168b8:	fff70713          	addi	a4,a4,-1 # 7fff <_HEAP_SIZE+0x6fff>
  FP_UNPACK_SEMIRAW_Q (B, b);
800168bc:	00379793          	slli	a5,a5,0x3
800168c0:	02f12023          	sw	a5,32(sp)
  FP_SUB_Q (R, A, B);
800168c4:	02e61063          	bne	a2,a4,800168e4 <__subtf3+0x13c>
800168c8:	02812e03          	lw	t3,40(sp)
800168cc:	02412703          	lw	a4,36(sp)
800168d0:	01c76733          	or	a4,a4,t3
800168d4:	02c12e03          	lw	t3,44(sp)
800168d8:	01c76733          	or	a4,a4,t3
800168dc:	00f76733          	or	a4,a4,a5
800168e0:	00071463          	bnez	a4,800168e8 <__subtf3+0x140>
800168e4:	00154513          	xori	a0,a0,1
800168e8:	40c40733          	sub	a4,s0,a2
800168ec:	112518e3          	bne	a0,s2,800171fc <__subtf3+0xa54>
800168f0:	30e05463          	blez	a4,80016bf8 <__subtf3+0x450>
800168f4:	14061863          	bnez	a2,80016a44 <__subtf3+0x29c>
800168f8:	02412503          	lw	a0,36(sp)
800168fc:	02812583          	lw	a1,40(sp)
80016900:	02c12803          	lw	a6,44(sp)
80016904:	00b56633          	or	a2,a0,a1
80016908:	01066633          	or	a2,a2,a6
8001690c:	00f66633          	or	a2,a2,a5
80016910:	02061463          	bnez	a2,80016938 <__subtf3+0x190>
80016914:	01412783          	lw	a5,20(sp)
80016918:	02d12823          	sw	a3,48(sp)
8001691c:	00070413          	mv	s0,a4
80016920:	02f12a23          	sw	a5,52(sp)
80016924:	01812783          	lw	a5,24(sp)
80016928:	02f12c23          	sw	a5,56(sp)
8001692c:	01c12783          	lw	a5,28(sp)
80016930:	02f12e23          	sw	a5,60(sp)
80016934:	3080006f          	j	80016c3c <__subtf3+0x494>
80016938:	fff70613          	addi	a2,a4,-1
8001693c:	0c061e63          	bnez	a2,80016a18 <__subtf3+0x270>
80016940:	01412703          	lw	a4,20(sp)
80016944:	00f687b3          	add	a5,a3,a5
80016948:	00d7b6b3          	sltu	a3,a5,a3
8001694c:	00e50633          	add	a2,a0,a4
80016950:	02f12823          	sw	a5,48(sp)
80016954:	00d607b3          	add	a5,a2,a3
80016958:	00d7b6b3          	sltu	a3,a5,a3
8001695c:	02f12a23          	sw	a5,52(sp)
80016960:	01812783          	lw	a5,24(sp)
80016964:	00e63733          	sltu	a4,a2,a4
80016968:	00d766b3          	or	a3,a4,a3
8001696c:	00f58733          	add	a4,a1,a5
80016970:	00d70633          	add	a2,a4,a3
80016974:	00f737b3          	sltu	a5,a4,a5
80016978:	01c12703          	lw	a4,28(sp)
8001697c:	00d636b3          	sltu	a3,a2,a3
80016980:	00d7e7b3          	or	a5,a5,a3
80016984:	00e80833          	add	a6,a6,a4
80016988:	010787b3          	add	a5,a5,a6
8001698c:	02c12c23          	sw	a2,56(sp)
80016990:	02f12e23          	sw	a5,60(sp)
80016994:	00100413          	li	s0,1
80016998:	03c12783          	lw	a5,60(sp)
8001699c:	00c79713          	slli	a4,a5,0xc
800169a0:	28075e63          	bgez	a4,80016c3c <__subtf3+0x494>
800169a4:	fff80737          	lui	a4,0xfff80
800169a8:	fff70713          	addi	a4,a4,-1 # fff7ffff <__stack+0x7ff43533>
800169ac:	00e7f7b3          	and	a5,a5,a4
800169b0:	02f12e23          	sw	a5,60(sp)
800169b4:	03012783          	lw	a5,48(sp)
800169b8:	00140413          	addi	s0,s0,1 # 800001 <_HEAP_SIZE+0x7ff001>
800169bc:	03010713          	addi	a4,sp,48
800169c0:	01f79793          	slli	a5,a5,0x1f
800169c4:	00000613          	li	a2,0
800169c8:	00300513          	li	a0,3
800169cc:	00072683          	lw	a3,0(a4)
800169d0:	00472583          	lw	a1,4(a4)
800169d4:	00160613          	addi	a2,a2,1
800169d8:	0016d693          	srli	a3,a3,0x1
800169dc:	01f59593          	slli	a1,a1,0x1f
800169e0:	00b6e6b3          	or	a3,a3,a1
800169e4:	00d72023          	sw	a3,0(a4)
800169e8:	00470713          	addi	a4,a4,4
800169ec:	fea610e3          	bne	a2,a0,800169cc <__subtf3+0x224>
800169f0:	03c12703          	lw	a4,60(sp)
800169f4:	00f037b3          	snez	a5,a5
800169f8:	00175713          	srli	a4,a4,0x1
800169fc:	02e12e23          	sw	a4,60(sp)
80016a00:	03012703          	lw	a4,48(sp)
80016a04:	00f767b3          	or	a5,a4,a5
80016a08:	02f12823          	sw	a5,48(sp)
80016a0c:	000087b7          	lui	a5,0x8
80016a10:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016a14:	7d00006f          	j	800171e4 <__subtf3+0xa3c>
80016a18:	000087b7          	lui	a5,0x8
80016a1c:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016a20:	eef70ae3          	beq	a4,a5,80016914 <__subtf3+0x16c>
80016a24:	07400793          	li	a5,116
80016a28:	06c7d263          	ble	a2,a5,80016a8c <__subtf3+0x2e4>
80016a2c:	00100793          	li	a5,1
80016a30:	02012623          	sw	zero,44(sp)
80016a34:	02012423          	sw	zero,40(sp)
80016a38:	02012223          	sw	zero,36(sp)
80016a3c:	02f12023          	sw	a5,32(sp)
80016a40:	14c0006f          	j	80016b8c <__subtf3+0x3e4>
80016a44:	000087b7          	lui	a5,0x8
80016a48:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016a4c:	02f41263          	bne	s0,a5,80016a70 <__subtf3+0x2c8>
80016a50:	01412783          	lw	a5,20(sp)
80016a54:	02d12823          	sw	a3,48(sp)
80016a58:	02f12a23          	sw	a5,52(sp)
80016a5c:	01812783          	lw	a5,24(sp)
80016a60:	02f12c23          	sw	a5,56(sp)
80016a64:	01c12783          	lw	a5,28(sp)
80016a68:	02f12e23          	sw	a5,60(sp)
80016a6c:	1d00006f          	j	80016c3c <__subtf3+0x494>
80016a70:	02c12783          	lw	a5,44(sp)
80016a74:	000806b7          	lui	a3,0x80
80016a78:	00d7e7b3          	or	a5,a5,a3
80016a7c:	02f12623          	sw	a5,44(sp)
80016a80:	07400793          	li	a5,116
80016a84:	fae7c4e3          	blt	a5,a4,80016a2c <__subtf3+0x284>
80016a88:	00070613          	mv	a2,a4
80016a8c:	40565693          	srai	a3,a2,0x5
80016a90:	01f67713          	andi	a4,a2,31
80016a94:	00000793          	li	a5,0
80016a98:	00000613          	li	a2,0
80016a9c:	00279593          	slli	a1,a5,0x2
80016aa0:	02d79063          	bne	a5,a3,80016ac0 <__subtf3+0x318>
80016aa4:	04071463          	bnez	a4,80016aec <__subtf3+0x344>
80016aa8:	00300693          	li	a3,3
80016aac:	40f686b3          	sub	a3,a3,a5
80016ab0:	02e6d263          	ble	a4,a3,80016ad4 <__subtf3+0x32c>
80016ab4:	00400713          	li	a4,4
80016ab8:	40f707b3          	sub	a5,a4,a5
80016abc:	07c0006f          	j	80016b38 <__subtf3+0x390>
80016ac0:	00b885b3          	add	a1,a7,a1
80016ac4:	0005a583          	lw	a1,0(a1)
80016ac8:	00178793          	addi	a5,a5,1
80016acc:	00b66633          	or	a2,a2,a1
80016ad0:	fcdff06f          	j	80016a9c <__subtf3+0x2f4>
80016ad4:	00b30533          	add	a0,t1,a1
80016ad8:	00052503          	lw	a0,0(a0) # 10000 <_HEAP_SIZE+0xf000>
80016adc:	00170713          	addi	a4,a4,1
80016ae0:	00430313          	addi	t1,t1,4
80016ae4:	fea32e23          	sw	a0,-4(t1)
80016ae8:	fc9ff06f          	j	80016ab0 <__subtf3+0x308>
80016aec:	04010693          	addi	a3,sp,64
80016af0:	00b686b3          	add	a3,a3,a1
80016af4:	fe06a683          	lw	a3,-32(a3) # 7ffe0 <_HEAP_SIZE+0x7efe0>
80016af8:	02000813          	li	a6,32
80016afc:	40e80833          	sub	a6,a6,a4
80016b00:	010696b3          	sll	a3,a3,a6
80016b04:	00d66633          	or	a2,a2,a3
80016b08:	00300693          	li	a3,3
80016b0c:	00000e13          	li	t3,0
80016b10:	40f686b3          	sub	a3,a3,a5
80016b14:	02de4663          	blt	t3,a3,80016b40 <__subtf3+0x398>
80016b18:	00400593          	li	a1,4
80016b1c:	40f587b3          	sub	a5,a1,a5
80016b20:	00269693          	slli	a3,a3,0x2
80016b24:	04010593          	addi	a1,sp,64
80016b28:	00d586b3          	add	a3,a1,a3
80016b2c:	02c12583          	lw	a1,44(sp)
80016b30:	00e5d733          	srl	a4,a1,a4
80016b34:	fee6a023          	sw	a4,-32(a3)
80016b38:	00400693          	li	a3,4
80016b3c:	03c0006f          	j	80016b78 <__subtf3+0x3d0>
80016b40:	00b30eb3          	add	t4,t1,a1
80016b44:	000ea503          	lw	a0,0(t4)
80016b48:	004eae83          	lw	t4,4(t4)
80016b4c:	001e0e13          	addi	t3,t3,1
80016b50:	00e55533          	srl	a0,a0,a4
80016b54:	010e9eb3          	sll	t4,t4,a6
80016b58:	01d56533          	or	a0,a0,t4
80016b5c:	00a32023          	sw	a0,0(t1)
80016b60:	00430313          	addi	t1,t1,4
80016b64:	fb1ff06f          	j	80016b14 <__subtf3+0x36c>
80016b68:	00279713          	slli	a4,a5,0x2
80016b6c:	00e88733          	add	a4,a7,a4
80016b70:	00072023          	sw	zero,0(a4)
80016b74:	00178793          	addi	a5,a5,1
80016b78:	fed798e3          	bne	a5,a3,80016b68 <__subtf3+0x3c0>
80016b7c:	02012783          	lw	a5,32(sp)
80016b80:	00c03633          	snez	a2,a2
80016b84:	00c7e633          	or	a2,a5,a2
80016b88:	02c12023          	sw	a2,32(sp)
80016b8c:	01012683          	lw	a3,16(sp)
80016b90:	02012783          	lw	a5,32(sp)
80016b94:	01412703          	lw	a4,20(sp)
80016b98:	02812583          	lw	a1,40(sp)
80016b9c:	00f687b3          	add	a5,a3,a5
80016ba0:	00d7b6b3          	sltu	a3,a5,a3
80016ba4:	02f12823          	sw	a5,48(sp)
80016ba8:	02412783          	lw	a5,36(sp)
80016bac:	02c12503          	lw	a0,44(sp)
80016bb0:	00f707b3          	add	a5,a4,a5
80016bb4:	00d78633          	add	a2,a5,a3
80016bb8:	00e7b733          	sltu	a4,a5,a4
80016bbc:	00d637b3          	sltu	a5,a2,a3
80016bc0:	00f767b3          	or	a5,a4,a5
80016bc4:	01812703          	lw	a4,24(sp)
80016bc8:	01c12683          	lw	a3,28(sp)
80016bcc:	02c12a23          	sw	a2,52(sp)
80016bd0:	00b705b3          	add	a1,a4,a1
80016bd4:	00f58633          	add	a2,a1,a5
80016bd8:	00e5b733          	sltu	a4,a1,a4
80016bdc:	00f637b3          	sltu	a5,a2,a5
80016be0:	00a686b3          	add	a3,a3,a0
80016be4:	00f76733          	or	a4,a4,a5
80016be8:	00e68733          	add	a4,a3,a4
80016bec:	02c12c23          	sw	a2,56(sp)
80016bf0:	02e12e23          	sw	a4,60(sp)
80016bf4:	da5ff06f          	j	80016998 <__subtf3+0x1f0>
80016bf8:	3e070063          	beqz	a4,80016fd8 <__subtf3+0x830>
80016bfc:	24041663          	bnez	s0,80016e48 <__subtf3+0x6a0>
80016c00:	01412883          	lw	a7,20(sp)
80016c04:	01812503          	lw	a0,24(sp)
80016c08:	01c12e03          	lw	t3,28(sp)
80016c0c:	00a8e333          	or	t1,a7,a0
80016c10:	01c36333          	or	t1,t1,t3
80016c14:	00d36333          	or	t1,t1,a3
80016c18:	18031e63          	bnez	t1,80016db4 <__subtf3+0x60c>
80016c1c:	02f12823          	sw	a5,48(sp)
80016c20:	02412783          	lw	a5,36(sp)
80016c24:	00060413          	mv	s0,a2
80016c28:	02f12a23          	sw	a5,52(sp)
80016c2c:	02812783          	lw	a5,40(sp)
80016c30:	02f12c23          	sw	a5,56(sp)
80016c34:	02c12783          	lw	a5,44(sp)
80016c38:	02f12e23          	sw	a5,60(sp)
  FP_PACK_SEMIRAW_Q (r, R);
80016c3c:	03012783          	lw	a5,48(sp)
80016c40:	0077f713          	andi	a4,a5,7
80016c44:	04070463          	beqz	a4,80016c8c <__subtf3+0x4e4>
80016c48:	00f7f713          	andi	a4,a5,15
80016c4c:	00400693          	li	a3,4
80016c50:	02d70e63          	beq	a4,a3,80016c8c <__subtf3+0x4e4>
80016c54:	03412703          	lw	a4,52(sp)
80016c58:	00478793          	addi	a5,a5,4
80016c5c:	02f12823          	sw	a5,48(sp)
80016c60:	0047b793          	sltiu	a5,a5,4
80016c64:	00e78733          	add	a4,a5,a4
80016c68:	00f737b3          	sltu	a5,a4,a5
80016c6c:	02e12a23          	sw	a4,52(sp)
80016c70:	03812703          	lw	a4,56(sp)
80016c74:	00e78733          	add	a4,a5,a4
80016c78:	02e12c23          	sw	a4,56(sp)
80016c7c:	00f73733          	sltu	a4,a4,a5
80016c80:	03c12783          	lw	a5,60(sp)
80016c84:	00f70733          	add	a4,a4,a5
80016c88:	02e12e23          	sw	a4,60(sp)
80016c8c:	03c12783          	lw	a5,60(sp)
80016c90:	00c79713          	slli	a4,a5,0xc
80016c94:	02075263          	bgez	a4,80016cb8 <__subtf3+0x510>
80016c98:	00008737          	lui	a4,0x8
80016c9c:	00140413          	addi	s0,s0,1
80016ca0:	fff70713          	addi	a4,a4,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016ca4:	7ae408e3          	beq	s0,a4,80017c54 <__subtf3+0x14ac>
80016ca8:	fff80737          	lui	a4,0xfff80
80016cac:	fff70713          	addi	a4,a4,-1 # fff7ffff <__stack+0x7ff43533>
80016cb0:	00e7f7b3          	and	a5,a5,a4
80016cb4:	02f12e23          	sw	a5,60(sp)
80016cb8:	03010793          	addi	a5,sp,48
80016cbc:	00000693          	li	a3,0
80016cc0:	00300593          	li	a1,3
80016cc4:	0007a703          	lw	a4,0(a5)
80016cc8:	0047a603          	lw	a2,4(a5)
80016ccc:	00168693          	addi	a3,a3,1
80016cd0:	00375713          	srli	a4,a4,0x3
80016cd4:	01d61613          	slli	a2,a2,0x1d
80016cd8:	00c76733          	or	a4,a4,a2
80016cdc:	00e7a023          	sw	a4,0(a5)
80016ce0:	00478793          	addi	a5,a5,4
80016ce4:	feb690e3          	bne	a3,a1,80016cc4 <__subtf3+0x51c>
80016ce8:	03c12783          	lw	a5,60(sp)
80016cec:	000086b7          	lui	a3,0x8
80016cf0:	0037d713          	srli	a4,a5,0x3
80016cf4:	02e12e23          	sw	a4,60(sp)
80016cf8:	fff68793          	addi	a5,a3,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016cfc:	02f41a63          	bne	s0,a5,80016d30 <__subtf3+0x588>
80016d00:	03412603          	lw	a2,52(sp)
80016d04:	03012783          	lw	a5,48(sp)
80016d08:	00c7e7b3          	or	a5,a5,a2
80016d0c:	03812603          	lw	a2,56(sp)
80016d10:	00c7e7b3          	or	a5,a5,a2
80016d14:	00e7e7b3          	or	a5,a5,a4
80016d18:	00078c63          	beqz	a5,80016d30 <__subtf3+0x588>
80016d1c:	02d12e23          	sw	a3,60(sp)
80016d20:	02012c23          	sw	zero,56(sp)
80016d24:	02012a23          	sw	zero,52(sp)
80016d28:	02012823          	sw	zero,48(sp)
80016d2c:	00000913          	li	s2,0
80016d30:	03c12783          	lw	a5,60(sp)
80016d34:	80010737          	lui	a4,0x80010
80016d38:	fff70713          	addi	a4,a4,-1 # 8000ffff <__stack+0xfffd3533>
80016d3c:	00f11623          	sh	a5,12(sp)
80016d40:	000087b7          	lui	a5,0x8
80016d44:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016d48:	00f47433          	and	s0,s0,a5
80016d4c:	01041793          	slli	a5,s0,0x10
80016d50:	00c12403          	lw	s0,12(sp)
  FP_HANDLE_EXCEPTIONS;

  return r;
}
80016d54:	05c12083          	lw	ra,92(sp)
80016d58:	00048513          	mv	a0,s1
  FP_PACK_SEMIRAW_Q (r, R);
80016d5c:	00e47433          	and	s0,s0,a4
80016d60:	00f46433          	or	s0,s0,a5
80016d64:	01f91793          	slli	a5,s2,0x1f
80016d68:	80000937          	lui	s2,0x80000
80016d6c:	fff94913          	not	s2,s2
80016d70:	01247433          	and	s0,s0,s2
80016d74:	00f46933          	or	s2,s0,a5
  return r;
80016d78:	03012783          	lw	a5,48(sp)
}
80016d7c:	05812403          	lw	s0,88(sp)
  return r;
80016d80:	0124a623          	sw	s2,12(s1)
80016d84:	00f4a023          	sw	a5,0(s1)
80016d88:	03412783          	lw	a5,52(sp)
}
80016d8c:	05012903          	lw	s2,80(sp)
80016d90:	04c12983          	lw	s3,76(sp)
  return r;
80016d94:	00f4a223          	sw	a5,4(s1)
80016d98:	03812783          	lw	a5,56(sp)
}
80016d9c:	04812a03          	lw	s4,72(sp)
80016da0:	04412a83          	lw	s5,68(sp)
  return r;
80016da4:	00f4a423          	sw	a5,8(s1)
}
80016da8:	05412483          	lw	s1,84(sp)
80016dac:	06010113          	addi	sp,sp,96
80016db0:	00008067          	ret
  FP_SUB_Q (R, A, B);
80016db4:	fff00313          	li	t1,-1
80016db8:	06671063          	bne	a4,t1,80016e18 <__subtf3+0x670>
80016dbc:	02412583          	lw	a1,36(sp)
80016dc0:	00f686b3          	add	a3,a3,a5
80016dc4:	00f6b7b3          	sltu	a5,a3,a5
80016dc8:	00b88833          	add	a6,a7,a1
80016dcc:	00f80733          	add	a4,a6,a5
80016dd0:	00f737b3          	sltu	a5,a4,a5
80016dd4:	02e12a23          	sw	a4,52(sp)
80016dd8:	02812703          	lw	a4,40(sp)
80016ddc:	00b835b3          	sltu	a1,a6,a1
80016de0:	00f5e7b3          	or	a5,a1,a5
80016de4:	02d12823          	sw	a3,48(sp)
80016de8:	00e506b3          	add	a3,a0,a4
80016dec:	00f685b3          	add	a1,a3,a5
80016df0:	00f5b7b3          	sltu	a5,a1,a5
80016df4:	00e6b733          	sltu	a4,a3,a4
80016df8:	00f76733          	or	a4,a4,a5
80016dfc:	02c12783          	lw	a5,44(sp)
80016e00:	02b12c23          	sw	a1,56(sp)
80016e04:	00fe0e33          	add	t3,t3,a5
80016e08:	01c70733          	add	a4,a4,t3
80016e0c:	02e12e23          	sw	a4,60(sp)
  FP_UNPACK_SEMIRAW_Q (B, b);
80016e10:	00060413          	mv	s0,a2
80016e14:	b85ff06f          	j	80016998 <__subtf3+0x1f0>
  FP_SUB_Q (R, A, B);
80016e18:	000086b7          	lui	a3,0x8
80016e1c:	fff68693          	addi	a3,a3,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016e20:	ded60ee3          	beq	a2,a3,80016c1c <__subtf3+0x474>
80016e24:	fff74713          	not	a4,a4
80016e28:	07400793          	li	a5,116
80016e2c:	04e7d263          	ble	a4,a5,80016e70 <__subtf3+0x6c8>
80016e30:	00100793          	li	a5,1
80016e34:	00012e23          	sw	zero,28(sp)
80016e38:	00012c23          	sw	zero,24(sp)
80016e3c:	00012a23          	sw	zero,20(sp)
80016e40:	00f12823          	sw	a5,16(sp)
80016e44:	12c0006f          	j	80016f70 <__subtf3+0x7c8>
80016e48:	000086b7          	lui	a3,0x8
80016e4c:	fff68693          	addi	a3,a3,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016e50:	dcd606e3          	beq	a2,a3,80016c1c <__subtf3+0x474>
80016e54:	01c12783          	lw	a5,28(sp)
80016e58:	000806b7          	lui	a3,0x80
80016e5c:	00d7e7b3          	or	a5,a5,a3
80016e60:	00f12e23          	sw	a5,28(sp)
80016e64:	f8c00793          	li	a5,-116
80016e68:	fcf744e3          	blt	a4,a5,80016e30 <__subtf3+0x688>
80016e6c:	40e00733          	neg	a4,a4
80016e70:	40575693          	srai	a3,a4,0x5
80016e74:	00000513          	li	a0,0
80016e78:	01f77713          	andi	a4,a4,31
80016e7c:	00000793          	li	a5,0
80016e80:	00279893          	slli	a7,a5,0x2
80016e84:	02d79063          	bne	a5,a3,80016ea4 <__subtf3+0x6fc>
80016e88:	04071463          	bnez	a4,80016ed0 <__subtf3+0x728>
80016e8c:	00300693          	li	a3,3
80016e90:	40f686b3          	sub	a3,a3,a5
80016e94:	02e6d263          	ble	a4,a3,80016eb8 <__subtf3+0x710>
80016e98:	00400713          	li	a4,4
80016e9c:	40f707b3          	sub	a5,a4,a5
80016ea0:	07c0006f          	j	80016f1c <__subtf3+0x774>
80016ea4:	011808b3          	add	a7,a6,a7
80016ea8:	0008a883          	lw	a7,0(a7)
80016eac:	00178793          	addi	a5,a5,1
80016eb0:	01156533          	or	a0,a0,a7
80016eb4:	fcdff06f          	j	80016e80 <__subtf3+0x6d8>
80016eb8:	01158333          	add	t1,a1,a7
80016ebc:	00032303          	lw	t1,0(t1)
80016ec0:	00170713          	addi	a4,a4,1
80016ec4:	00458593          	addi	a1,a1,4
80016ec8:	fe65ae23          	sw	t1,-4(a1)
80016ecc:	fc9ff06f          	j	80016e94 <__subtf3+0x6ec>
80016ed0:	04010693          	addi	a3,sp,64
80016ed4:	011686b3          	add	a3,a3,a7
80016ed8:	fd06a683          	lw	a3,-48(a3) # 7ffd0 <_HEAP_SIZE+0x7efd0>
80016edc:	02000e13          	li	t3,32
80016ee0:	40ee0e33          	sub	t3,t3,a4
80016ee4:	01c696b3          	sll	a3,a3,t3
80016ee8:	00d56533          	or	a0,a0,a3
80016eec:	00300693          	li	a3,3
80016ef0:	00000e93          	li	t4,0
80016ef4:	40f686b3          	sub	a3,a3,a5
80016ef8:	02dec663          	blt	t4,a3,80016f24 <__subtf3+0x77c>
80016efc:	00400593          	li	a1,4
80016f00:	40f587b3          	sub	a5,a1,a5
80016f04:	00269693          	slli	a3,a3,0x2
80016f08:	04010593          	addi	a1,sp,64
80016f0c:	00d586b3          	add	a3,a1,a3
80016f10:	01c12583          	lw	a1,28(sp)
80016f14:	00e5d733          	srl	a4,a1,a4
80016f18:	fce6a823          	sw	a4,-48(a3)
80016f1c:	00400693          	li	a3,4
80016f20:	03c0006f          	j	80016f5c <__subtf3+0x7b4>
80016f24:	01158f33          	add	t5,a1,a7
80016f28:	000f2303          	lw	t1,0(t5)
80016f2c:	004f2f03          	lw	t5,4(t5)
80016f30:	001e8e93          	addi	t4,t4,1
80016f34:	00e35333          	srl	t1,t1,a4
80016f38:	01cf1f33          	sll	t5,t5,t3
80016f3c:	01e36333          	or	t1,t1,t5
80016f40:	0065a023          	sw	t1,0(a1)
80016f44:	00458593          	addi	a1,a1,4
80016f48:	fb1ff06f          	j	80016ef8 <__subtf3+0x750>
80016f4c:	00279713          	slli	a4,a5,0x2
80016f50:	00e80733          	add	a4,a6,a4
80016f54:	00072023          	sw	zero,0(a4)
80016f58:	00178793          	addi	a5,a5,1
80016f5c:	fed798e3          	bne	a5,a3,80016f4c <__subtf3+0x7a4>
80016f60:	01012783          	lw	a5,16(sp)
80016f64:	00a03533          	snez	a0,a0
80016f68:	00a7e533          	or	a0,a5,a0
80016f6c:	00a12823          	sw	a0,16(sp)
80016f70:	02012683          	lw	a3,32(sp)
80016f74:	01012783          	lw	a5,16(sp)
80016f78:	02412703          	lw	a4,36(sp)
80016f7c:	01812503          	lw	a0,24(sp)
80016f80:	00f687b3          	add	a5,a3,a5
80016f84:	00d7b6b3          	sltu	a3,a5,a3
80016f88:	02f12823          	sw	a5,48(sp)
80016f8c:	01412783          	lw	a5,20(sp)
80016f90:	01c12803          	lw	a6,28(sp)
80016f94:	00f707b3          	add	a5,a4,a5
80016f98:	00d785b3          	add	a1,a5,a3
80016f9c:	00e7b733          	sltu	a4,a5,a4
80016fa0:	00d5b7b3          	sltu	a5,a1,a3
80016fa4:	00f767b3          	or	a5,a4,a5
80016fa8:	02812703          	lw	a4,40(sp)
80016fac:	02c12683          	lw	a3,44(sp)
80016fb0:	02b12a23          	sw	a1,52(sp)
80016fb4:	00a70533          	add	a0,a4,a0
80016fb8:	00f505b3          	add	a1,a0,a5
80016fbc:	00e53733          	sltu	a4,a0,a4
80016fc0:	00f5b7b3          	sltu	a5,a1,a5
80016fc4:	010686b3          	add	a3,a3,a6
80016fc8:	00f76733          	or	a4,a4,a5
80016fcc:	02b12c23          	sw	a1,56(sp)
80016fd0:	00e68733          	add	a4,a3,a4
80016fd4:	e39ff06f          	j	80016e0c <__subtf3+0x664>
80016fd8:	00008f37          	lui	t5,0x8
80016fdc:	00140593          	addi	a1,s0,1
80016fe0:	ffff0e93          	addi	t4,t5,-1 # 7fff <_HEAP_SIZE+0x6fff>
80016fe4:	01d5f2b3          	and	t0,a1,t4
80016fe8:	00100f93          	li	t6,1
80016fec:	02412603          	lw	a2,36(sp)
80016ff0:	02812703          	lw	a4,40(sp)
80016ff4:	02c12503          	lw	a0,44(sp)
80016ff8:	01412e03          	lw	t3,20(sp)
80016ffc:	01812883          	lw	a7,24(sp)
80017000:	01c12303          	lw	t1,28(sp)
80017004:	03010813          	addi	a6,sp,48
80017008:	145fc663          	blt	t6,t0,80017154 <__subtf3+0x9ac>
8001700c:	011e65b3          	or	a1,t3,a7
80017010:	0065e5b3          	or	a1,a1,t1
80017014:	00d5e5b3          	or	a1,a1,a3
80017018:	0a041663          	bnez	s0,800170c4 <__subtf3+0x91c>
8001701c:	00059c63          	bnez	a1,80017034 <__subtf3+0x88c>
80017020:	02f12823          	sw	a5,48(sp)
80017024:	02c12a23          	sw	a2,52(sp)
80017028:	02e12c23          	sw	a4,56(sp)
8001702c:	02a12e23          	sw	a0,60(sp)
80017030:	c0dff06f          	j	80016c3c <__subtf3+0x494>
80017034:	00e665b3          	or	a1,a2,a4
80017038:	00a5e5b3          	or	a1,a1,a0
8001703c:	00f5e5b3          	or	a1,a1,a5
80017040:	00059c63          	bnez	a1,80017058 <__subtf3+0x8b0>
80017044:	02d12823          	sw	a3,48(sp)
80017048:	03c12a23          	sw	t3,52(sp)
8001704c:	03112c23          	sw	a7,56(sp)
80017050:	02612e23          	sw	t1,60(sp)
80017054:	be9ff06f          	j	80016c3c <__subtf3+0x494>
80017058:	00f687b3          	add	a5,a3,a5
8001705c:	01c60633          	add	a2,a2,t3
80017060:	02f12823          	sw	a5,48(sp)
80017064:	00d7b7b3          	sltu	a5,a5,a3
80017068:	00f606b3          	add	a3,a2,a5
8001706c:	02d12a23          	sw	a3,52(sp)
80017070:	01c63633          	sltu	a2,a2,t3
80017074:	00f6b6b3          	sltu	a3,a3,a5
80017078:	00d666b3          	or	a3,a2,a3
8001707c:	011705b3          	add	a1,a4,a7
80017080:	00d587b3          	add	a5,a1,a3
80017084:	0115b733          	sltu	a4,a1,a7
80017088:	00d7b6b3          	sltu	a3,a5,a3
8001708c:	00d766b3          	or	a3,a4,a3
80017090:	00650733          	add	a4,a0,t1
80017094:	00e68733          	add	a4,a3,a4
80017098:	02f12c23          	sw	a5,56(sp)
8001709c:	00c71793          	slli	a5,a4,0xc
800170a0:	0007c663          	bltz	a5,800170ac <__subtf3+0x904>
800170a4:	02e12e23          	sw	a4,60(sp)
800170a8:	b95ff06f          	j	80016c3c <__subtf3+0x494>
800170ac:	fff806b7          	lui	a3,0xfff80
800170b0:	fff68693          	addi	a3,a3,-1 # fff7ffff <__stack+0x7ff43533>
800170b4:	00d77733          	and	a4,a4,a3
800170b8:	02e12e23          	sw	a4,60(sp)
800170bc:	00100413          	li	s0,1
800170c0:	b7dff06f          	j	80016c3c <__subtf3+0x494>
800170c4:	00059e63          	bnez	a1,800170e0 <__subtf3+0x938>
800170c8:	02f12823          	sw	a5,48(sp)
800170cc:	02c12a23          	sw	a2,52(sp)
800170d0:	02e12c23          	sw	a4,56(sp)
800170d4:	02a12e23          	sw	a0,60(sp)
800170d8:	000e8413          	mv	s0,t4
800170dc:	b61ff06f          	j	80016c3c <__subtf3+0x494>
800170e0:	00e66733          	or	a4,a2,a4
800170e4:	00a76733          	or	a4,a4,a0
800170e8:	00f767b3          	or	a5,a4,a5
800170ec:	00079c63          	bnez	a5,80017104 <__subtf3+0x95c>
800170f0:	02d12823          	sw	a3,48(sp)
800170f4:	03c12a23          	sw	t3,52(sp)
800170f8:	03112c23          	sw	a7,56(sp)
800170fc:	02612e23          	sw	t1,60(sp)
80017100:	fd9ff06f          	j	800170d8 <__subtf3+0x930>
80017104:	03e12e23          	sw	t5,60(sp)
80017108:	02012c23          	sw	zero,56(sp)
8001710c:	02012a23          	sw	zero,52(sp)
80017110:	02012823          	sw	zero,48(sp)
80017114:	03c10793          	addi	a5,sp,60
80017118:	0007a703          	lw	a4,0(a5)
8001711c:	ffc7a683          	lw	a3,-4(a5)
80017120:	ffc78793          	addi	a5,a5,-4
80017124:	00371713          	slli	a4,a4,0x3
80017128:	01d6d693          	srli	a3,a3,0x1d
8001712c:	00d76733          	or	a4,a4,a3
80017130:	00e7a223          	sw	a4,4(a5)
80017134:	fef812e3          	bne	a6,a5,80017118 <__subtf3+0x970>
80017138:	03012783          	lw	a5,48(sp)
8001713c:	00008437          	lui	s0,0x8
80017140:	fff40413          	addi	s0,s0,-1 # 7fff <_HEAP_SIZE+0x6fff>
80017144:	00379793          	slli	a5,a5,0x3
80017148:	02f12823          	sw	a5,48(sp)
8001714c:	00000913          	li	s2,0
80017150:	aedff06f          	j	80016c3c <__subtf3+0x494>
80017154:	00f687b3          	add	a5,a3,a5
80017158:	01c60633          	add	a2,a2,t3
8001715c:	02f12823          	sw	a5,48(sp)
80017160:	00d7b7b3          	sltu	a5,a5,a3
80017164:	00f606b3          	add	a3,a2,a5
80017168:	02d12a23          	sw	a3,52(sp)
8001716c:	01c63633          	sltu	a2,a2,t3
80017170:	00f6b6b3          	sltu	a3,a3,a5
80017174:	00d666b3          	or	a3,a2,a3
80017178:	01170733          	add	a4,a4,a7
8001717c:	00d70633          	add	a2,a4,a3
80017180:	00d636b3          	sltu	a3,a2,a3
80017184:	01173733          	sltu	a4,a4,a7
80017188:	00d766b3          	or	a3,a4,a3
8001718c:	00650733          	add	a4,a0,t1
80017190:	00e68733          	add	a4,a3,a4
80017194:	02c12c23          	sw	a2,56(sp)
80017198:	02e12e23          	sw	a4,60(sp)
8001719c:	00080793          	mv	a5,a6
800171a0:	00000693          	li	a3,0
800171a4:	00300513          	li	a0,3
800171a8:	0007a703          	lw	a4,0(a5)
800171ac:	0047a603          	lw	a2,4(a5)
800171b0:	00168693          	addi	a3,a3,1
800171b4:	00175713          	srli	a4,a4,0x1
800171b8:	01f61613          	slli	a2,a2,0x1f
800171bc:	00c76733          	or	a4,a4,a2
800171c0:	00e7a023          	sw	a4,0(a5)
800171c4:	00478793          	addi	a5,a5,4
800171c8:	fea690e3          	bne	a3,a0,800171a8 <__subtf3+0xa00>
800171cc:	03c12783          	lw	a5,60(sp)
800171d0:	00058413          	mv	s0,a1
800171d4:	0017d793          	srli	a5,a5,0x1
800171d8:	02f12e23          	sw	a5,60(sp)
800171dc:	000087b7          	lui	a5,0x8
800171e0:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
800171e4:	a4f41ce3          	bne	s0,a5,80016c3c <__subtf3+0x494>
800171e8:	02012e23          	sw	zero,60(sp)
800171ec:	02012c23          	sw	zero,56(sp)
800171f0:	02012a23          	sw	zero,52(sp)
800171f4:	02012823          	sw	zero,48(sp)
800171f8:	a45ff06f          	j	80016c3c <__subtf3+0x494>
800171fc:	28e05463          	blez	a4,80017484 <__subtf3+0xcdc>
80017200:	0e061063          	bnez	a2,800172e0 <__subtf3+0xb38>
80017204:	02412503          	lw	a0,36(sp)
80017208:	02812583          	lw	a1,40(sp)
8001720c:	02c12e03          	lw	t3,44(sp)
80017210:	00b56833          	or	a6,a0,a1
80017214:	01c86833          	or	a6,a6,t3
80017218:	00f86833          	or	a6,a6,a5
8001721c:	ee080c63          	beqz	a6,80016914 <__subtf3+0x16c>
80017220:	fff70613          	addi	a2,a4,-1
80017224:	08061863          	bnez	a2,800172b4 <__subtf3+0xb0c>
80017228:	01412883          	lw	a7,20(sp)
8001722c:	40f687b3          	sub	a5,a3,a5
80017230:	00f6b733          	sltu	a4,a3,a5
80017234:	40a88833          	sub	a6,a7,a0
80017238:	0108b333          	sltu	t1,a7,a6
8001723c:	40e80833          	sub	a6,a6,a4
80017240:	02f12823          	sw	a5,48(sp)
80017244:	03012a23          	sw	a6,52(sp)
80017248:	00000713          	li	a4,0
8001724c:	00f6f663          	bleu	a5,a3,80017258 <__subtf3+0xab0>
80017250:	41150733          	sub	a4,a0,a7
80017254:	00173713          	seqz	a4,a4
80017258:	01812803          	lw	a6,24(sp)
8001725c:	00676733          	or	a4,a4,t1
80017260:	40b806b3          	sub	a3,a6,a1
80017264:	00d83533          	sltu	a0,a6,a3
80017268:	40e686b3          	sub	a3,a3,a4
8001726c:	02d12c23          	sw	a3,56(sp)
80017270:	00070663          	beqz	a4,8001727c <__subtf3+0xad4>
80017274:	410585b3          	sub	a1,a1,a6
80017278:	0015b613          	seqz	a2,a1
8001727c:	01c12783          	lw	a5,28(sp)
80017280:	00a66633          	or	a2,a2,a0
80017284:	00100413          	li	s0,1
80017288:	41c787b3          	sub	a5,a5,t3
8001728c:	40c78633          	sub	a2,a5,a2
80017290:	02c12e23          	sw	a2,60(sp)
80017294:	03c12783          	lw	a5,60(sp)
80017298:	00c79713          	slli	a4,a5,0xc
8001729c:	9a0750e3          	bgez	a4,80016c3c <__subtf3+0x494>
800172a0:	00080737          	lui	a4,0x80
800172a4:	fff70713          	addi	a4,a4,-1 # 7ffff <_HEAP_SIZE+0x7efff>
800172a8:	00e7f7b3          	and	a5,a5,a4
800172ac:	02f12e23          	sw	a5,60(sp)
800172b0:	7340006f          	j	800179e4 <__subtf3+0x123c>
800172b4:	000087b7          	lui	a5,0x8
800172b8:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
800172bc:	e4f70c63          	beq	a4,a5,80016914 <__subtf3+0x16c>
800172c0:	07400793          	li	a5,116
800172c4:	04c7d263          	ble	a2,a5,80017308 <__subtf3+0xb60>
800172c8:	00100793          	li	a5,1
800172cc:	02012623          	sw	zero,44(sp)
800172d0:	02012423          	sw	zero,40(sp)
800172d4:	02012223          	sw	zero,36(sp)
800172d8:	02f12023          	sw	a5,32(sp)
800172dc:	12c0006f          	j	80017408 <__subtf3+0xc60>
800172e0:	000087b7          	lui	a5,0x8
800172e4:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
800172e8:	f6f40463          	beq	s0,a5,80016a50 <__subtf3+0x2a8>
800172ec:	02c12783          	lw	a5,44(sp)
800172f0:	000806b7          	lui	a3,0x80
800172f4:	00d7e7b3          	or	a5,a5,a3
800172f8:	02f12623          	sw	a5,44(sp)
800172fc:	07400793          	li	a5,116
80017300:	fce7c4e3          	blt	a5,a4,800172c8 <__subtf3+0xb20>
80017304:	00070613          	mv	a2,a4
80017308:	40565713          	srai	a4,a2,0x5
8001730c:	00000693          	li	a3,0
80017310:	01f67613          	andi	a2,a2,31
80017314:	00000793          	li	a5,0
80017318:	00279593          	slli	a1,a5,0x2
8001731c:	02e79063          	bne	a5,a4,8001733c <__subtf3+0xb94>
80017320:	04061463          	bnez	a2,80017368 <__subtf3+0xbc0>
80017324:	00300713          	li	a4,3
80017328:	40f70733          	sub	a4,a4,a5
8001732c:	02c75263          	ble	a2,a4,80017350 <__subtf3+0xba8>
80017330:	00400713          	li	a4,4
80017334:	40f707b3          	sub	a5,a4,a5
80017338:	07c0006f          	j	800173b4 <__subtf3+0xc0c>
8001733c:	00b885b3          	add	a1,a7,a1
80017340:	0005a583          	lw	a1,0(a1)
80017344:	00178793          	addi	a5,a5,1
80017348:	00b6e6b3          	or	a3,a3,a1
8001734c:	fcdff06f          	j	80017318 <__subtf3+0xb70>
80017350:	00b30533          	add	a0,t1,a1
80017354:	00052503          	lw	a0,0(a0)
80017358:	00160613          	addi	a2,a2,1
8001735c:	00430313          	addi	t1,t1,4
80017360:	fea32e23          	sw	a0,-4(t1)
80017364:	fc9ff06f          	j	8001732c <__subtf3+0xb84>
80017368:	04010713          	addi	a4,sp,64
8001736c:	00b70733          	add	a4,a4,a1
80017370:	fe072703          	lw	a4,-32(a4)
80017374:	02000813          	li	a6,32
80017378:	40c80833          	sub	a6,a6,a2
8001737c:	01071733          	sll	a4,a4,a6
80017380:	00e6e6b3          	or	a3,a3,a4
80017384:	00300713          	li	a4,3
80017388:	00000e13          	li	t3,0
8001738c:	40f70733          	sub	a4,a4,a5
80017390:	02ee4663          	blt	t3,a4,800173bc <__subtf3+0xc14>
80017394:	00400593          	li	a1,4
80017398:	40f587b3          	sub	a5,a1,a5
8001739c:	00271713          	slli	a4,a4,0x2
800173a0:	04010593          	addi	a1,sp,64
800173a4:	00e58733          	add	a4,a1,a4
800173a8:	02c12583          	lw	a1,44(sp)
800173ac:	00c5d633          	srl	a2,a1,a2
800173b0:	fec72023          	sw	a2,-32(a4)
800173b4:	00400613          	li	a2,4
800173b8:	03c0006f          	j	800173f4 <__subtf3+0xc4c>
800173bc:	00b30eb3          	add	t4,t1,a1
800173c0:	000ea503          	lw	a0,0(t4)
800173c4:	004eae83          	lw	t4,4(t4)
800173c8:	001e0e13          	addi	t3,t3,1
800173cc:	00c55533          	srl	a0,a0,a2
800173d0:	010e9eb3          	sll	t4,t4,a6
800173d4:	01d56533          	or	a0,a0,t4
800173d8:	00a32023          	sw	a0,0(t1)
800173dc:	00430313          	addi	t1,t1,4
800173e0:	fb1ff06f          	j	80017390 <__subtf3+0xbe8>
800173e4:	00279713          	slli	a4,a5,0x2
800173e8:	00e88733          	add	a4,a7,a4
800173ec:	00072023          	sw	zero,0(a4)
800173f0:	00178793          	addi	a5,a5,1
800173f4:	fec798e3          	bne	a5,a2,800173e4 <__subtf3+0xc3c>
800173f8:	02012783          	lw	a5,32(sp)
800173fc:	00d036b3          	snez	a3,a3
80017400:	00d7e6b3          	or	a3,a5,a3
80017404:	02d12023          	sw	a3,32(sp)
80017408:	01412683          	lw	a3,20(sp)
8001740c:	01012583          	lw	a1,16(sp)
80017410:	02012703          	lw	a4,32(sp)
80017414:	02412783          	lw	a5,36(sp)
80017418:	40e58733          	sub	a4,a1,a4
8001741c:	40f687b3          	sub	a5,a3,a5
80017420:	00f6b633          	sltu	a2,a3,a5
80017424:	00e5b6b3          	sltu	a3,a1,a4
80017428:	40d786b3          	sub	a3,a5,a3
8001742c:	02d12a23          	sw	a3,52(sp)
80017430:	02e12823          	sw	a4,48(sp)
80017434:	00000693          	li	a3,0
80017438:	00e5f463          	bleu	a4,a1,80017440 <__subtf3+0xc98>
8001743c:	0017b693          	seqz	a3,a5
80017440:	00c6e6b3          	or	a3,a3,a2
80017444:	02812703          	lw	a4,40(sp)
80017448:	01812603          	lw	a2,24(sp)
8001744c:	40e60733          	sub	a4,a2,a4
80017450:	40d707b3          	sub	a5,a4,a3
80017454:	02f12c23          	sw	a5,56(sp)
80017458:	00e635b3          	sltu	a1,a2,a4
8001745c:	00000613          	li	a2,0
80017460:	00068463          	beqz	a3,80017468 <__subtf3+0xcc0>
80017464:	00173613          	seqz	a2,a4
80017468:	01c12783          	lw	a5,28(sp)
8001746c:	02c12703          	lw	a4,44(sp)
80017470:	00b66633          	or	a2,a2,a1
80017474:	40e787b3          	sub	a5,a5,a4
80017478:	40c787b3          	sub	a5,a5,a2
8001747c:	02f12e23          	sw	a5,60(sp)
80017480:	e15ff06f          	j	80017294 <__subtf3+0xaec>
80017484:	28070e63          	beqz	a4,80017720 <__subtf3+0xf78>
80017488:	0e041c63          	bnez	s0,80017580 <__subtf3+0xdd8>
8001748c:	01412303          	lw	t1,20(sp)
80017490:	01812883          	lw	a7,24(sp)
80017494:	01c12e83          	lw	t4,28(sp)
80017498:	01136e33          	or	t3,t1,a7
8001749c:	01de6e33          	or	t3,t3,t4
800174a0:	00de6e33          	or	t3,t3,a3
800174a4:	020e1663          	bnez	t3,800174d0 <__subtf3+0xd28>
800174a8:	02f12823          	sw	a5,48(sp)
800174ac:	02412783          	lw	a5,36(sp)
800174b0:	00060413          	mv	s0,a2
800174b4:	02f12a23          	sw	a5,52(sp)
800174b8:	02812783          	lw	a5,40(sp)
800174bc:	02f12c23          	sw	a5,56(sp)
800174c0:	02c12783          	lw	a5,44(sp)
800174c4:	02f12e23          	sw	a5,60(sp)
800174c8:	00050913          	mv	s2,a0
800174cc:	f70ff06f          	j	80016c3c <__subtf3+0x494>
800174d0:	fff00e13          	li	t3,-1
800174d4:	07c71e63          	bne	a4,t3,80017550 <__subtf3+0xda8>
800174d8:	02412803          	lw	a6,36(sp)
800174dc:	40d786b3          	sub	a3,a5,a3
800174e0:	00d7b733          	sltu	a4,a5,a3
800174e4:	406805b3          	sub	a1,a6,t1
800174e8:	00b83e33          	sltu	t3,a6,a1
800174ec:	40e585b3          	sub	a1,a1,a4
800174f0:	02d12823          	sw	a3,48(sp)
800174f4:	02b12a23          	sw	a1,52(sp)
800174f8:	00000713          	li	a4,0
800174fc:	00d7f663          	bleu	a3,a5,80017508 <__subtf3+0xd60>
80017500:	41030733          	sub	a4,t1,a6
80017504:	00173713          	seqz	a4,a4
80017508:	02812803          	lw	a6,40(sp)
8001750c:	01c76733          	or	a4,a4,t3
80017510:	00000693          	li	a3,0
80017514:	411805b3          	sub	a1,a6,a7
80017518:	00b83333          	sltu	t1,a6,a1
8001751c:	40e585b3          	sub	a1,a1,a4
80017520:	02b12c23          	sw	a1,56(sp)
80017524:	00070663          	beqz	a4,80017530 <__subtf3+0xd88>
80017528:	410888b3          	sub	a7,a7,a6
8001752c:	0018b693          	seqz	a3,a7
80017530:	02c12783          	lw	a5,44(sp)
80017534:	0066e8b3          	or	a7,a3,t1
80017538:	41d787b3          	sub	a5,a5,t4
8001753c:	411787b3          	sub	a5,a5,a7
80017540:	02f12e23          	sw	a5,60(sp)
  FP_UNPACK_SEMIRAW_Q (B, b);
80017544:	00060413          	mv	s0,a2
80017548:	00050913          	mv	s2,a0
8001754c:	d49ff06f          	j	80017294 <__subtf3+0xaec>
  FP_SUB_Q (R, A, B);
80017550:	000086b7          	lui	a3,0x8
80017554:	fff68693          	addi	a3,a3,-1 # 7fff <_HEAP_SIZE+0x6fff>
80017558:	f4d608e3          	beq	a2,a3,800174a8 <__subtf3+0xd00>
8001755c:	fff74713          	not	a4,a4
80017560:	07400793          	li	a5,116
80017564:	04e7d263          	ble	a4,a5,800175a8 <__subtf3+0xe00>
80017568:	00100793          	li	a5,1
8001756c:	00012e23          	sw	zero,28(sp)
80017570:	00012c23          	sw	zero,24(sp)
80017574:	00012a23          	sw	zero,20(sp)
80017578:	00f12823          	sw	a5,16(sp)
8001757c:	12c0006f          	j	800176a8 <__subtf3+0xf00>
80017580:	000086b7          	lui	a3,0x8
80017584:	fff68693          	addi	a3,a3,-1 # 7fff <_HEAP_SIZE+0x6fff>
80017588:	f2d600e3          	beq	a2,a3,800174a8 <__subtf3+0xd00>
8001758c:	01c12783          	lw	a5,28(sp)
80017590:	000806b7          	lui	a3,0x80
80017594:	00d7e7b3          	or	a5,a5,a3
80017598:	00f12e23          	sw	a5,28(sp)
8001759c:	f8c00793          	li	a5,-116
800175a0:	fcf744e3          	blt	a4,a5,80017568 <__subtf3+0xdc0>
800175a4:	40e00733          	neg	a4,a4
800175a8:	40575693          	srai	a3,a4,0x5
800175ac:	00000893          	li	a7,0
800175b0:	01f77713          	andi	a4,a4,31
800175b4:	00000793          	li	a5,0
800175b8:	00279313          	slli	t1,a5,0x2
800175bc:	02d79063          	bne	a5,a3,800175dc <__subtf3+0xe34>
800175c0:	04071463          	bnez	a4,80017608 <__subtf3+0xe60>
800175c4:	00300693          	li	a3,3
800175c8:	40f686b3          	sub	a3,a3,a5
800175cc:	02e6d263          	ble	a4,a3,800175f0 <__subtf3+0xe48>
800175d0:	00400713          	li	a4,4
800175d4:	40f707b3          	sub	a5,a4,a5
800175d8:	07c0006f          	j	80017654 <__subtf3+0xeac>
800175dc:	00680333          	add	t1,a6,t1
800175e0:	00032303          	lw	t1,0(t1)
800175e4:	00178793          	addi	a5,a5,1
800175e8:	0068e8b3          	or	a7,a7,t1
800175ec:	fcdff06f          	j	800175b8 <__subtf3+0xe10>
800175f0:	00658e33          	add	t3,a1,t1
800175f4:	000e2e03          	lw	t3,0(t3)
800175f8:	00170713          	addi	a4,a4,1
800175fc:	00458593          	addi	a1,a1,4
80017600:	ffc5ae23          	sw	t3,-4(a1)
80017604:	fc9ff06f          	j	800175cc <__subtf3+0xe24>
80017608:	04010693          	addi	a3,sp,64
8001760c:	006686b3          	add	a3,a3,t1
80017610:	fd06a683          	lw	a3,-48(a3) # 7ffd0 <_HEAP_SIZE+0x7efd0>
80017614:	02000e93          	li	t4,32
80017618:	40ee8eb3          	sub	t4,t4,a4
8001761c:	01d696b3          	sll	a3,a3,t4
80017620:	00d8e8b3          	or	a7,a7,a3
80017624:	00300693          	li	a3,3
80017628:	00000f13          	li	t5,0
8001762c:	40f686b3          	sub	a3,a3,a5
80017630:	02df4663          	blt	t5,a3,8001765c <__subtf3+0xeb4>
80017634:	00400593          	li	a1,4
80017638:	40f587b3          	sub	a5,a1,a5
8001763c:	00269693          	slli	a3,a3,0x2
80017640:	04010593          	addi	a1,sp,64
80017644:	00d586b3          	add	a3,a1,a3
80017648:	01c12583          	lw	a1,28(sp)
8001764c:	00e5d733          	srl	a4,a1,a4
80017650:	fce6a823          	sw	a4,-48(a3)
80017654:	00400693          	li	a3,4
80017658:	03c0006f          	j	80017694 <__subtf3+0xeec>
8001765c:	00658fb3          	add	t6,a1,t1
80017660:	000fae03          	lw	t3,0(t6)
80017664:	004faf83          	lw	t6,4(t6)
80017668:	001f0f13          	addi	t5,t5,1
8001766c:	00ee5e33          	srl	t3,t3,a4
80017670:	01df9fb3          	sll	t6,t6,t4
80017674:	01fe6e33          	or	t3,t3,t6
80017678:	01c5a023          	sw	t3,0(a1)
8001767c:	00458593          	addi	a1,a1,4
80017680:	fb1ff06f          	j	80017630 <__subtf3+0xe88>
80017684:	00279713          	slli	a4,a5,0x2
80017688:	00e80733          	add	a4,a6,a4
8001768c:	00072023          	sw	zero,0(a4)
80017690:	00178793          	addi	a5,a5,1
80017694:	fed798e3          	bne	a5,a3,80017684 <__subtf3+0xedc>
80017698:	01012783          	lw	a5,16(sp)
8001769c:	011038b3          	snez	a7,a7
800176a0:	0117e8b3          	or	a7,a5,a7
800176a4:	01112823          	sw	a7,16(sp)
800176a8:	02412683          	lw	a3,36(sp)
800176ac:	02012803          	lw	a6,32(sp)
800176b0:	01012703          	lw	a4,16(sp)
800176b4:	01412783          	lw	a5,20(sp)
800176b8:	40e80733          	sub	a4,a6,a4
800176bc:	40f687b3          	sub	a5,a3,a5
800176c0:	00f6b5b3          	sltu	a1,a3,a5
800176c4:	00e836b3          	sltu	a3,a6,a4
800176c8:	40d786b3          	sub	a3,a5,a3
800176cc:	02d12a23          	sw	a3,52(sp)
800176d0:	02e12823          	sw	a4,48(sp)
800176d4:	00000693          	li	a3,0
800176d8:	00e87463          	bleu	a4,a6,800176e0 <__subtf3+0xf38>
800176dc:	0017b693          	seqz	a3,a5
800176e0:	00b6e6b3          	or	a3,a3,a1
800176e4:	01812703          	lw	a4,24(sp)
800176e8:	02812583          	lw	a1,40(sp)
800176ec:	40e58733          	sub	a4,a1,a4
800176f0:	40d707b3          	sub	a5,a4,a3
800176f4:	02f12c23          	sw	a5,56(sp)
800176f8:	00e5b833          	sltu	a6,a1,a4
800176fc:	00000593          	li	a1,0
80017700:	00068463          	beqz	a3,80017708 <__subtf3+0xf60>
80017704:	00173593          	seqz	a1,a4
80017708:	02c12783          	lw	a5,44(sp)
8001770c:	01c12703          	lw	a4,28(sp)
80017710:	0105e5b3          	or	a1,a1,a6
80017714:	40e787b3          	sub	a5,a5,a4
80017718:	40b787b3          	sub	a5,a5,a1
8001771c:	e25ff06f          	j	80017540 <__subtf3+0xd98>
80017720:	00008fb7          	lui	t6,0x8
80017724:	00140813          	addi	a6,s0,1
80017728:	ffff8293          	addi	t0,t6,-1 # 7fff <_HEAP_SIZE+0x6fff>
8001772c:	00587833          	and	a6,a6,t0
80017730:	00100f13          	li	t5,1
80017734:	02412583          	lw	a1,36(sp)
80017738:	01412603          	lw	a2,20(sp)
8001773c:	01812883          	lw	a7,24(sp)
80017740:	01c12e83          	lw	t4,28(sp)
80017744:	02812303          	lw	t1,40(sp)
80017748:	02c12e03          	lw	t3,44(sp)
8001774c:	1d0f4e63          	blt	t5,a6,80017928 <__subtf3+0x1180>
80017750:	0065e833          	or	a6,a1,t1
80017754:	01166f33          	or	t5,a2,a7
80017758:	01c86833          	or	a6,a6,t3
8001775c:	01df6f33          	or	t5,t5,t4
80017760:	00f86833          	or	a6,a6,a5
80017764:	00df6f33          	or	t5,t5,a3
80017768:	10041863          	bnez	s0,80017878 <__subtf3+0x10d0>
8001776c:	020f1263          	bnez	t5,80017790 <__subtf3+0xfe8>
80017770:	02f12823          	sw	a5,48(sp)
80017774:	02b12a23          	sw	a1,52(sp)
80017778:	02612c23          	sw	t1,56(sp)
8001777c:	03c12e23          	sw	t3,60(sp)
80017780:	d40814e3          	bnez	a6,800174c8 <__subtf3+0xd20>
80017784:	00000413          	li	s0,0
80017788:	00000913          	li	s2,0
8001778c:	d00ff06f          	j	80016c8c <__subtf3+0x4e4>
80017790:	00081c63          	bnez	a6,800177a8 <__subtf3+0x1000>
80017794:	02d12823          	sw	a3,48(sp)
80017798:	02c12a23          	sw	a2,52(sp)
8001779c:	03112c23          	sw	a7,56(sp)
800177a0:	03d12e23          	sw	t4,60(sp)
800177a4:	c98ff06f          	j	80016c3c <__subtf3+0x494>
800177a8:	40f68833          	sub	a6,a3,a5
800177ac:	40b602b3          	sub	t0,a2,a1
800177b0:	0106bfb3          	sltu	t6,a3,a6
800177b4:	00563f33          	sltu	t5,a2,t0
800177b8:	41f282b3          	sub	t0,t0,t6
800177bc:	03012823          	sw	a6,48(sp)
800177c0:	02512a23          	sw	t0,52(sp)
800177c4:	00000f93          	li	t6,0
800177c8:	0106f663          	bleu	a6,a3,800177d4 <__subtf3+0x102c>
800177cc:	40c58fb3          	sub	t6,a1,a2
800177d0:	001fbf93          	seqz	t6,t6
800177d4:	406883b3          	sub	t2,a7,t1
800177d8:	01efefb3          	or	t6,t6,t5
800177dc:	41f38a33          	sub	s4,t2,t6
800177e0:	03412c23          	sw	s4,56(sp)
800177e4:	0078bab3          	sltu	s5,a7,t2
800177e8:	00000993          	li	s3,0
800177ec:	000f8463          	beqz	t6,800177f4 <__subtf3+0x104c>
800177f0:	0013b993          	seqz	s3,t2
800177f4:	41ce8f33          	sub	t5,t4,t3
800177f8:	0159e9b3          	or	s3,s3,s5
800177fc:	413f0f33          	sub	t5,t5,s3
80017800:	03e12e23          	sw	t5,60(sp)
80017804:	00cf1f93          	slli	t6,t5,0xc
80017808:	040fde63          	bgez	t6,80017864 <__subtf3+0x10bc>
8001780c:	40d786b3          	sub	a3,a5,a3
80017810:	40c58633          	sub	a2,a1,a2
80017814:	00d7b833          	sltu	a6,a5,a3
80017818:	41060833          	sub	a6,a2,a6
8001781c:	03012a23          	sw	a6,52(sp)
80017820:	02d12823          	sw	a3,48(sp)
80017824:	00c5b5b3          	sltu	a1,a1,a2
80017828:	00000813          	li	a6,0
8001782c:	00d7f463          	bleu	a3,a5,80017834 <__subtf3+0x108c>
80017830:	00163813          	seqz	a6,a2
80017834:	411307b3          	sub	a5,t1,a7
80017838:	00b865b3          	or	a1,a6,a1
8001783c:	00f336b3          	sltu	a3,t1,a5
80017840:	40b787b3          	sub	a5,a5,a1
80017844:	02f12c23          	sw	a5,56(sp)
80017848:	00058463          	beqz	a1,80017850 <__subtf3+0x10a8>
8001784c:	0013b713          	seqz	a4,t2
80017850:	41de07b3          	sub	a5,t3,t4
80017854:	00d76733          	or	a4,a4,a3
80017858:	40e78733          	sub	a4,a5,a4
8001785c:	02e12e23          	sw	a4,60(sp)
80017860:	c69ff06f          	j	800174c8 <__subtf3+0xd20>
80017864:	00586833          	or	a6,a6,t0
80017868:	01486833          	or	a6,a6,s4
8001786c:	01e86833          	or	a6,a6,t5
80017870:	f0080ae3          	beqz	a6,80017784 <__subtf3+0xfdc>
80017874:	bc8ff06f          	j	80016c3c <__subtf3+0x494>
80017878:	03010393          	addi	t2,sp,48
8001787c:	040f1e63          	bnez	t5,800178d8 <__subtf3+0x1130>
80017880:	02081e63          	bnez	a6,800178bc <__subtf3+0x1114>
80017884:	03f12e23          	sw	t6,60(sp)
80017888:	02012c23          	sw	zero,56(sp)
8001788c:	02012a23          	sw	zero,52(sp)
80017890:	02012823          	sw	zero,48(sp)
80017894:	03c10793          	addi	a5,sp,60
80017898:	0007a703          	lw	a4,0(a5)
8001789c:	ffc7a683          	lw	a3,-4(a5)
800178a0:	ffc78793          	addi	a5,a5,-4
800178a4:	00371713          	slli	a4,a4,0x3
800178a8:	01d6d693          	srli	a3,a3,0x1d
800178ac:	00d76733          	or	a4,a4,a3
800178b0:	00e7a223          	sw	a4,4(a5)
800178b4:	fef392e3          	bne	t2,a5,80017898 <__subtf3+0x10f0>
800178b8:	881ff06f          	j	80017138 <__subtf3+0x990>
800178bc:	02f12823          	sw	a5,48(sp)
800178c0:	02b12a23          	sw	a1,52(sp)
800178c4:	02612c23          	sw	t1,56(sp)
800178c8:	03c12e23          	sw	t3,60(sp)
800178cc:	00050913          	mv	s2,a0
800178d0:	00028413          	mv	s0,t0
800178d4:	b68ff06f          	j	80016c3c <__subtf3+0x494>
800178d8:	00081c63          	bnez	a6,800178f0 <__subtf3+0x1148>
800178dc:	02d12823          	sw	a3,48(sp)
800178e0:	02c12a23          	sw	a2,52(sp)
800178e4:	03112c23          	sw	a7,56(sp)
800178e8:	03d12e23          	sw	t4,60(sp)
800178ec:	fe5ff06f          	j	800178d0 <__subtf3+0x1128>
800178f0:	03f12e23          	sw	t6,60(sp)
800178f4:	02012c23          	sw	zero,56(sp)
800178f8:	02012a23          	sw	zero,52(sp)
800178fc:	02012823          	sw	zero,48(sp)
80017900:	03c10793          	addi	a5,sp,60
80017904:	0007a703          	lw	a4,0(a5)
80017908:	ffc7a683          	lw	a3,-4(a5)
8001790c:	ffc78793          	addi	a5,a5,-4
80017910:	00371713          	slli	a4,a4,0x3
80017914:	01d6d693          	srli	a3,a3,0x1d
80017918:	00d76733          	or	a4,a4,a3
8001791c:	00e7a223          	sw	a4,4(a5)
80017920:	fef392e3          	bne	t2,a5,80017904 <__subtf3+0x115c>
80017924:	815ff06f          	j	80017138 <__subtf3+0x990>
80017928:	40f68833          	sub	a6,a3,a5
8001792c:	40b602b3          	sub	t0,a2,a1
80017930:	0106bfb3          	sltu	t6,a3,a6
80017934:	00563f33          	sltu	t5,a2,t0
80017938:	41f282b3          	sub	t0,t0,t6
8001793c:	03012823          	sw	a6,48(sp)
80017940:	02512a23          	sw	t0,52(sp)
80017944:	00000f93          	li	t6,0
80017948:	0106f663          	bleu	a6,a3,80017954 <__subtf3+0x11ac>
8001794c:	40c58fb3          	sub	t6,a1,a2
80017950:	001fbf93          	seqz	t6,t6
80017954:	406883b3          	sub	t2,a7,t1
80017958:	01efefb3          	or	t6,t6,t5
8001795c:	41f38a33          	sub	s4,t2,t6
80017960:	03412c23          	sw	s4,56(sp)
80017964:	0078bab3          	sltu	s5,a7,t2
80017968:	00000993          	li	s3,0
8001796c:	000f8463          	beqz	t6,80017974 <__subtf3+0x11cc>
80017970:	0013b993          	seqz	s3,t2
80017974:	41ce8f33          	sub	t5,t4,t3
80017978:	0159e9b3          	or	s3,s3,s5
8001797c:	413f0f33          	sub	t5,t5,s3
80017980:	03e12e23          	sw	t5,60(sp)
80017984:	00cf1f93          	slli	t6,t5,0xc
80017988:	0a0fdc63          	bgez	t6,80017a40 <__subtf3+0x1298>
8001798c:	40d786b3          	sub	a3,a5,a3
80017990:	40c58633          	sub	a2,a1,a2
80017994:	00d7b833          	sltu	a6,a5,a3
80017998:	41060833          	sub	a6,a2,a6
8001799c:	03012a23          	sw	a6,52(sp)
800179a0:	02d12823          	sw	a3,48(sp)
800179a4:	00c5b5b3          	sltu	a1,a1,a2
800179a8:	00000813          	li	a6,0
800179ac:	00d7f463          	bleu	a3,a5,800179b4 <__subtf3+0x120c>
800179b0:	00163813          	seqz	a6,a2
800179b4:	411307b3          	sub	a5,t1,a7
800179b8:	00b865b3          	or	a1,a6,a1
800179bc:	00f336b3          	sltu	a3,t1,a5
800179c0:	40b787b3          	sub	a5,a5,a1
800179c4:	02f12c23          	sw	a5,56(sp)
800179c8:	00058463          	beqz	a1,800179d0 <__subtf3+0x1228>
800179cc:	0013b713          	seqz	a4,t2
800179d0:	41de07b3          	sub	a5,t3,t4
800179d4:	00d76733          	or	a4,a4,a3
800179d8:	40e78733          	sub	a4,a5,a4
800179dc:	02e12e23          	sw	a4,60(sp)
800179e0:	00050913          	mv	s2,a0
800179e4:	03c12503          	lw	a0,60(sp)
800179e8:	06050663          	beqz	a0,80017a54 <__subtf3+0x12ac>
800179ec:	2dd000ef          	jal	ra,800184c8 <__clzsi2>
800179f0:	ff450513          	addi	a0,a0,-12
800179f4:	02000693          	li	a3,32
800179f8:	02d56833          	rem	a6,a0,a3
800179fc:	02d547b3          	div	a5,a0,a3
80017a00:	08080663          	beqz	a6,80017a8c <__subtf3+0x12e4>
80017a04:	ffc00713          	li	a4,-4
80017a08:	00279593          	slli	a1,a5,0x2
80017a0c:	ff000e13          	li	t3,-16
80017a10:	410686b3          	sub	a3,a3,a6
80017a14:	02e78733          	mul	a4,a5,a4
80017a18:	ffc70713          	addi	a4,a4,-4
80017a1c:	0bc71063          	bne	a4,t3,80017abc <__subtf3+0x1314>
80017a20:	04010713          	addi	a4,sp,64
80017a24:	00b705b3          	add	a1,a4,a1
80017a28:	03012703          	lw	a4,48(sp)
80017a2c:	fff78793          	addi	a5,a5,-1
80017a30:	01071833          	sll	a6,a4,a6
80017a34:	ff05a823          	sw	a6,-16(a1)
80017a38:	fff00693          	li	a3,-1
80017a3c:	0c00006f          	j	80017afc <__subtf3+0x1354>
80017a40:	00586833          	or	a6,a6,t0
80017a44:	01486833          	or	a6,a6,s4
80017a48:	01e86833          	or	a6,a6,t5
80017a4c:	d2080ce3          	beqz	a6,80017784 <__subtf3+0xfdc>
80017a50:	f95ff06f          	j	800179e4 <__subtf3+0x123c>
80017a54:	03812503          	lw	a0,56(sp)
80017a58:	00050863          	beqz	a0,80017a68 <__subtf3+0x12c0>
80017a5c:	26d000ef          	jal	ra,800184c8 <__clzsi2>
80017a60:	02050513          	addi	a0,a0,32
80017a64:	f8dff06f          	j	800179f0 <__subtf3+0x1248>
80017a68:	03412503          	lw	a0,52(sp)
80017a6c:	00050863          	beqz	a0,80017a7c <__subtf3+0x12d4>
80017a70:	259000ef          	jal	ra,800184c8 <__clzsi2>
80017a74:	04050513          	addi	a0,a0,64
80017a78:	f79ff06f          	j	800179f0 <__subtf3+0x1248>
80017a7c:	03012503          	lw	a0,48(sp)
80017a80:	249000ef          	jal	ra,800184c8 <__clzsi2>
80017a84:	06050513          	addi	a0,a0,96
80017a88:	f69ff06f          	j	800179f0 <__subtf3+0x1248>
80017a8c:	ffc00613          	li	a2,-4
80017a90:	02c78633          	mul	a2,a5,a2
80017a94:	03010713          	addi	a4,sp,48
80017a98:	00300693          	li	a3,3
80017a9c:	00c705b3          	add	a1,a4,a2
80017aa0:	00c5a583          	lw	a1,12(a1)
80017aa4:	fff68693          	addi	a3,a3,-1
80017aa8:	ffc70713          	addi	a4,a4,-4
80017aac:	00b72823          	sw	a1,16(a4)
80017ab0:	fef6d6e3          	ble	a5,a3,80017a9c <__subtf3+0x12f4>
80017ab4:	fff78793          	addi	a5,a5,-1
80017ab8:	f81ff06f          	j	80017a38 <__subtf3+0x1290>
80017abc:	03010613          	addi	a2,sp,48
80017ac0:	00e60333          	add	t1,a2,a4
80017ac4:	00e588b3          	add	a7,a1,a4
80017ac8:	011608b3          	add	a7,a2,a7
80017acc:	00c32603          	lw	a2,12(t1)
80017ad0:	01032303          	lw	t1,16(t1)
80017ad4:	00d65633          	srl	a2,a2,a3
80017ad8:	01031333          	sll	t1,t1,a6
80017adc:	00666633          	or	a2,a2,t1
80017ae0:	00c8a823          	sw	a2,16(a7)
80017ae4:	f35ff06f          	j	80017a18 <__subtf3+0x1270>
80017ae8:	00279713          	slli	a4,a5,0x2
80017aec:	03010613          	addi	a2,sp,48
80017af0:	00e60733          	add	a4,a2,a4
80017af4:	00072023          	sw	zero,0(a4)
80017af8:	fff78793          	addi	a5,a5,-1
80017afc:	fed796e3          	bne	a5,a3,80017ae8 <__subtf3+0x1340>
80017b00:	12854e63          	blt	a0,s0,80017c3c <__subtf3+0x1494>
80017b04:	40850433          	sub	s0,a0,s0
80017b08:	02000713          	li	a4,32
80017b0c:	00140413          	addi	s0,s0,1
80017b10:	02e447b3          	div	a5,s0,a4
80017b14:	00000513          	li	a0,0
80017b18:	02e46433          	rem	s0,s0,a4
80017b1c:	00000713          	li	a4,0
80017b20:	02f74a63          	blt	a4,a5,80017b54 <__subtf3+0x13ac>
80017b24:	00078713          	mv	a4,a5
80017b28:	0007d463          	bgez	a5,80017b30 <__subtf3+0x1388>
80017b2c:	00000713          	li	a4,0
80017b30:	00279313          	slli	t1,a5,0x2
80017b34:	04041a63          	bnez	s0,80017b88 <__subtf3+0x13e0>
80017b38:	00300693          	li	a3,3
80017b3c:	03010713          	addi	a4,sp,48
80017b40:	40f686b3          	sub	a3,a3,a5
80017b44:	0286d663          	ble	s0,a3,80017b70 <__subtf3+0x13c8>
80017b48:	00400713          	li	a4,4
80017b4c:	40f707b3          	sub	a5,a4,a5
80017b50:	08c0006f          	j	80017bdc <__subtf3+0x1434>
80017b54:	00271693          	slli	a3,a4,0x2
80017b58:	03010613          	addi	a2,sp,48
80017b5c:	00d606b3          	add	a3,a2,a3
80017b60:	0006a683          	lw	a3,0(a3)
80017b64:	00170713          	addi	a4,a4,1
80017b68:	00d56533          	or	a0,a0,a3
80017b6c:	fb5ff06f          	j	80017b20 <__subtf3+0x1378>
80017b70:	00670633          	add	a2,a4,t1
80017b74:	00062603          	lw	a2,0(a2)
80017b78:	00140413          	addi	s0,s0,1
80017b7c:	00470713          	addi	a4,a4,4
80017b80:	fec72e23          	sw	a2,-4(a4)
80017b84:	fc1ff06f          	j	80017b44 <__subtf3+0x139c>
80017b88:	00271713          	slli	a4,a4,0x2
80017b8c:	04010693          	addi	a3,sp,64
80017b90:	00e68733          	add	a4,a3,a4
80017b94:	ff072703          	lw	a4,-16(a4)
80017b98:	02000613          	li	a2,32
80017b9c:	40860633          	sub	a2,a2,s0
80017ba0:	00c71733          	sll	a4,a4,a2
80017ba4:	00e56533          	or	a0,a0,a4
80017ba8:	00300713          	li	a4,3
80017bac:	03010593          	addi	a1,sp,48
80017bb0:	00000813          	li	a6,0
80017bb4:	40f70733          	sub	a4,a4,a5
80017bb8:	02e84663          	blt	a6,a4,80017be4 <__subtf3+0x143c>
80017bbc:	00400693          	li	a3,4
80017bc0:	40f687b3          	sub	a5,a3,a5
80017bc4:	00271713          	slli	a4,a4,0x2
80017bc8:	04010693          	addi	a3,sp,64
80017bcc:	00e68733          	add	a4,a3,a4
80017bd0:	03c12683          	lw	a3,60(sp)
80017bd4:	0086d433          	srl	s0,a3,s0
80017bd8:	fe872823          	sw	s0,-16(a4)
80017bdc:	00300693          	li	a3,3
80017be0:	0400006f          	j	80017c20 <__subtf3+0x1478>
80017be4:	006588b3          	add	a7,a1,t1
80017be8:	0008a683          	lw	a3,0(a7)
80017bec:	0048a883          	lw	a7,4(a7)
80017bf0:	00180813          	addi	a6,a6,1
80017bf4:	0086d6b3          	srl	a3,a3,s0
80017bf8:	00c898b3          	sll	a7,a7,a2
80017bfc:	0116e6b3          	or	a3,a3,a7
80017c00:	00d5a023          	sw	a3,0(a1)
80017c04:	00458593          	addi	a1,a1,4
80017c08:	fb1ff06f          	j	80017bb8 <__subtf3+0x1410>
80017c0c:	00279713          	slli	a4,a5,0x2
80017c10:	03010613          	addi	a2,sp,48
80017c14:	00e60733          	add	a4,a2,a4
80017c18:	00072023          	sw	zero,0(a4)
80017c1c:	00178793          	addi	a5,a5,1
80017c20:	fef6d6e3          	ble	a5,a3,80017c0c <__subtf3+0x1464>
80017c24:	03012703          	lw	a4,48(sp)
80017c28:	00a037b3          	snez	a5,a0
80017c2c:	00000413          	li	s0,0
80017c30:	00f767b3          	or	a5,a4,a5
80017c34:	02f12823          	sw	a5,48(sp)
80017c38:	804ff06f          	j	80016c3c <__subtf3+0x494>
80017c3c:	03c12783          	lw	a5,60(sp)
80017c40:	fff80737          	lui	a4,0xfff80
80017c44:	fff70713          	addi	a4,a4,-1 # fff7ffff <__stack+0x7ff43533>
80017c48:	40a40433          	sub	s0,s0,a0
80017c4c:	00e7f7b3          	and	a5,a5,a4
80017c50:	e19fe06f          	j	80016a68 <__subtf3+0x2c0>
  FP_PACK_SEMIRAW_Q (r, R);
80017c54:	02012e23          	sw	zero,60(sp)
80017c58:	02012c23          	sw	zero,56(sp)
80017c5c:	02012a23          	sw	zero,52(sp)
80017c60:	02012823          	sw	zero,48(sp)
80017c64:	854ff06f          	j	80016cb8 <__subtf3+0x510>

80017c68 <__fixtfsi>:
#include "soft-fp.h"
#include "quad.h"

SItype
__fixtfsi (TFtype a)
{
80017c68:	00452703          	lw	a4,4(a0)
80017c6c:	00852783          	lw	a5,8(a0)
80017c70:	00c52603          	lw	a2,12(a0)
80017c74:	00052683          	lw	a3,0(a0)
80017c78:	fe010113          	addi	sp,sp,-32
  FP_DECL_EX;
  FP_DECL_Q (A);
  USItype r;

  FP_INIT_EXCEPTIONS;
  FP_UNPACK_RAW_Q (A, a);
80017c7c:	00e12223          	sw	a4,4(sp)
80017c80:	00f12423          	sw	a5,8(sp)
80017c84:	00e12a23          	sw	a4,20(sp)
80017c88:	00f12c23          	sw	a5,24(sp)
  FP_TO_INT_Q (r, A, SI_BITS, 1);
80017c8c:	00004737          	lui	a4,0x4
  FP_UNPACK_RAW_Q (A, a);
80017c90:	00161793          	slli	a5,a2,0x1
80017c94:	00d12023          	sw	a3,0(sp)
80017c98:	00d12823          	sw	a3,16(sp)
80017c9c:	00c12623          	sw	a2,12(sp)
80017ca0:	0117d693          	srli	a3,a5,0x11
  FP_TO_INT_Q (r, A, SI_BITS, 1);
80017ca4:	ffe70793          	addi	a5,a4,-2 # 3ffe <_HEAP_SIZE+0x2ffe>
80017ca8:	00000513          	li	a0,0
80017cac:	02d7d063          	ble	a3,a5,80017ccc <__fixtfsi+0x64>
80017cb0:	01d70793          	addi	a5,a4,29
80017cb4:	01061593          	slli	a1,a2,0x10
80017cb8:	01f65613          	srli	a2,a2,0x1f
80017cbc:	00d7dc63          	ble	a3,a5,80017cd4 <__fixtfsi+0x6c>
80017cc0:	80000537          	lui	a0,0x80000
80017cc4:	fff54513          	not	a0,a0
80017cc8:	00a60533          	add	a0,a2,a0
  FP_HANDLE_EXCEPTIONS;

  return r;
}
80017ccc:	02010113          	addi	sp,sp,32
80017cd0:	00008067          	ret
  FP_TO_INT_Q (r, A, SI_BITS, 1);
80017cd4:	000107b7          	lui	a5,0x10
80017cd8:	0105d593          	srli	a1,a1,0x10
80017cdc:	00f5e5b3          	or	a1,a1,a5
80017ce0:	06f70793          	addi	a5,a4,111
80017ce4:	40d787b3          	sub	a5,a5,a3
80017ce8:	4057d713          	srai	a4,a5,0x5
80017cec:	00b12e23          	sw	a1,28(sp)
80017cf0:	01f7f793          	andi	a5,a5,31
80017cf4:	0a079263          	bnez	a5,80017d98 <__fixtfsi+0x130>
80017cf8:	00300593          	li	a1,3
80017cfc:	01010693          	addi	a3,sp,16
80017d00:	00271513          	slli	a0,a4,0x2
80017d04:	40e585b3          	sub	a1,a1,a4
80017d08:	02f5de63          	ble	a5,a1,80017d44 <__fixtfsi+0xdc>
80017d0c:	00400793          	li	a5,4
80017d10:	40e78733          	sub	a4,a5,a4
80017d14:	01010693          	addi	a3,sp,16
80017d18:	00271793          	slli	a5,a4,0x2
80017d1c:	00f687b3          	add	a5,a3,a5
80017d20:	00400693          	li	a3,4
80017d24:	0007a023          	sw	zero,0(a5) # 10000 <_HEAP_SIZE+0xf000>
80017d28:	00170713          	addi	a4,a4,1
80017d2c:	00478793          	addi	a5,a5,4
80017d30:	fed71ae3          	bne	a4,a3,80017d24 <__fixtfsi+0xbc>
80017d34:	01012503          	lw	a0,16(sp)
80017d38:	f8060ae3          	beqz	a2,80017ccc <__fixtfsi+0x64>
80017d3c:	40a00533          	neg	a0,a0
80017d40:	f8dff06f          	j	80017ccc <__fixtfsi+0x64>
80017d44:	00a68833          	add	a6,a3,a0
80017d48:	00082803          	lw	a6,0(a6)
80017d4c:	00178793          	addi	a5,a5,1
80017d50:	00468693          	addi	a3,a3,4
80017d54:	ff06ae23          	sw	a6,-4(a3)
80017d58:	fb1ff06f          	j	80017d08 <__fixtfsi+0xa0>
80017d5c:	ff052683          	lw	a3,-16(a0) # 7ffffff0 <__stack+0xfffc3524>
80017d60:	ff072303          	lw	t1,-16(a4)
80017d64:	011696b3          	sll	a3,a3,a7
80017d68:	00f35333          	srl	t1,t1,a5
80017d6c:	0066e6b3          	or	a3,a3,t1
80017d70:	00d12823          	sw	a3,16(sp)
80017d74:	00100693          	li	a3,1
80017d78:	ff06c2e3          	blt	a3,a6,80017d5c <__fixtfsi+0xf4>
80017d7c:	00168713          	addi	a4,a3,1
80017d80:	02010513          	addi	a0,sp,32
80017d84:	00269693          	slli	a3,a3,0x2
80017d88:	00d506b3          	add	a3,a0,a3
80017d8c:	00f5d7b3          	srl	a5,a1,a5
80017d90:	fef6a823          	sw	a5,-16(a3)
80017d94:	f81ff06f          	j	80017d14 <__fixtfsi+0xac>
80017d98:	00170513          	addi	a0,a4,1
80017d9c:	02010893          	addi	a7,sp,32
80017da0:	00300813          	li	a6,3
80017da4:	00251513          	slli	a0,a0,0x2
80017da8:	40e80833          	sub	a6,a6,a4
80017dac:	00a88533          	add	a0,a7,a0
80017db0:	00271713          	slli	a4,a4,0x2
80017db4:	02000893          	li	a7,32
80017db8:	02010313          	addi	t1,sp,32
80017dbc:	00000693          	li	a3,0
80017dc0:	40f888b3          	sub	a7,a7,a5
80017dc4:	00e30733          	add	a4,t1,a4
80017dc8:	fb1ff06f          	j	80017d78 <__fixtfsi+0x110>

80017dcc <__floatsitf>:
#include "soft-fp.h"
#include "quad.h"

TFtype
__floatsitf (SItype i)
{
80017dcc:	fd010113          	addi	sp,sp,-48
80017dd0:	02912223          	sw	s1,36(sp)
80017dd4:	02112623          	sw	ra,44(sp)
80017dd8:	02812423          	sw	s0,40(sp)
80017ddc:	03212023          	sw	s2,32(sp)
80017de0:	00050493          	mv	s1,a0
  FP_DECL_Q (A);
  TFtype a;

  FP_FROM_INT_Q (A, i, SI_BITS, USItype);
80017de4:	14058663          	beqz	a1,80017f30 <__floatsitf+0x164>
80017de8:	00058413          	mv	s0,a1
80017dec:	01f5d913          	srli	s2,a1,0x1f
80017df0:	0005d463          	bgez	a1,80017df8 <__floatsitf+0x2c>
80017df4:	40b00433          	neg	s0,a1
80017df8:	00040513          	mv	a0,s0
80017dfc:	6cc000ef          	jal	ra,800184c8 <__clzsi2>
80017e00:	05150593          	addi	a1,a0,81
80017e04:	000047b7          	lui	a5,0x4
80017e08:	01e78793          	addi	a5,a5,30 # 401e <_HEAP_SIZE+0x301e>
80017e0c:	4055d713          	srai	a4,a1,0x5
80017e10:	00812823          	sw	s0,16(sp)
80017e14:	00012a23          	sw	zero,20(sp)
80017e18:	00012c23          	sw	zero,24(sp)
80017e1c:	00012e23          	sw	zero,28(sp)
80017e20:	01f5f593          	andi	a1,a1,31
80017e24:	40a787b3          	sub	a5,a5,a0
80017e28:	02058c63          	beqz	a1,80017e60 <__floatsitf+0x94>
80017e2c:	00200693          	li	a3,2
80017e30:	0ed71c63          	bne	a4,a3,80017f28 <__floatsitf+0x15c>
80017e34:	02000693          	li	a3,32
80017e38:	40b686b3          	sub	a3,a3,a1
80017e3c:	00d456b3          	srl	a3,s0,a3
80017e40:	00d12e23          	sw	a3,28(sp)
80017e44:	fff70693          	addi	a3,a4,-1
80017e48:	02010613          	addi	a2,sp,32
80017e4c:	00271713          	slli	a4,a4,0x2
80017e50:	00e60733          	add	a4,a2,a4
80017e54:	00b41433          	sll	s0,s0,a1
80017e58:	fe872823          	sw	s0,-16(a4)
80017e5c:	0340006f          	j	80017e90 <__floatsitf+0xc4>
80017e60:	00300693          	li	a3,3
80017e64:	40e686b3          	sub	a3,a3,a4
80017e68:	02010613          	addi	a2,sp,32
80017e6c:	00269693          	slli	a3,a3,0x2
80017e70:	00d606b3          	add	a3,a2,a3
80017e74:	ff06a683          	lw	a3,-16(a3)
80017e78:	00200613          	li	a2,2
80017e7c:	00d12e23          	sw	a3,28(sp)
80017e80:	00200693          	li	a3,2
80017e84:	00c71663          	bne	a4,a2,80017e90 <__floatsitf+0xc4>
80017e88:	00812c23          	sw	s0,24(sp)
80017e8c:	00100693          	li	a3,1
80017e90:	01010613          	addi	a2,sp,16
80017e94:	00269713          	slli	a4,a3,0x2
80017e98:	00e60733          	add	a4,a2,a4
80017e9c:	fff00613          	li	a2,-1
80017ea0:	00072023          	sw	zero,0(a4)
80017ea4:	fff68693          	addi	a3,a3,-1
80017ea8:	ffc70713          	addi	a4,a4,-4
80017eac:	fec69ae3          	bne	a3,a2,80017ea0 <__floatsitf+0xd4>
  FP_PACK_RAW_Q (a, A);
80017eb0:	01c12703          	lw	a4,28(sp)
80017eb4:	800106b7          	lui	a3,0x80010
80017eb8:	fff68693          	addi	a3,a3,-1 # 8000ffff <__stack+0xfffd3533>
80017ebc:	00e11623          	sh	a4,12(sp)
80017ec0:	00008737          	lui	a4,0x8
80017ec4:	fff70713          	addi	a4,a4,-1 # 7fff <_HEAP_SIZE+0x6fff>
80017ec8:	00e7f7b3          	and	a5,a5,a4
80017ecc:	01079713          	slli	a4,a5,0x10
80017ed0:	00c12783          	lw	a5,12(sp)
80017ed4:	01f91913          	slli	s2,s2,0x1f

  return a;
}
80017ed8:	02c12083          	lw	ra,44(sp)
  FP_PACK_RAW_Q (a, A);
80017edc:	00d7f7b3          	and	a5,a5,a3
80017ee0:	00e7e7b3          	or	a5,a5,a4
80017ee4:	80000737          	lui	a4,0x80000
80017ee8:	fff74713          	not	a4,a4
80017eec:	00e7f7b3          	and	a5,a5,a4
  return a;
80017ef0:	01012703          	lw	a4,16(sp)
}
80017ef4:	02812403          	lw	s0,40(sp)
  FP_PACK_RAW_Q (a, A);
80017ef8:	0127e7b3          	or	a5,a5,s2
  return a;
80017efc:	00e4a023          	sw	a4,0(s1)
80017f00:	01412703          	lw	a4,20(sp)
80017f04:	00f4a623          	sw	a5,12(s1)
}
80017f08:	00048513          	mv	a0,s1
  return a;
80017f0c:	00e4a223          	sw	a4,4(s1)
80017f10:	01812703          	lw	a4,24(sp)
}
80017f14:	02012903          	lw	s2,32(sp)
  return a;
80017f18:	00e4a423          	sw	a4,8(s1)
}
80017f1c:	02412483          	lw	s1,36(sp)
80017f20:	03010113          	addi	sp,sp,48
80017f24:	00008067          	ret
  FP_FROM_INT_Q (A, i, SI_BITS, USItype);
80017f28:	00300713          	li	a4,3
80017f2c:	f19ff06f          	j	80017e44 <__floatsitf+0x78>
80017f30:	00012e23          	sw	zero,28(sp)
80017f34:	00012c23          	sw	zero,24(sp)
80017f38:	00012a23          	sw	zero,20(sp)
80017f3c:	00012823          	sw	zero,16(sp)
80017f40:	00000793          	li	a5,0
80017f44:	00000913          	li	s2,0
80017f48:	f69ff06f          	j	80017eb0 <__floatsitf+0xe4>

80017f4c <__extenddftf2>:
  FP_DECL_D (A);
  FP_DECL_Q (R);
  TFtype r;

  FP_INIT_EXCEPTIONS;
  FP_UNPACK_RAW_D (A, a);
80017f4c:	01465793          	srli	a5,a2,0x14
80017f50:	00100737          	lui	a4,0x100
80017f54:	fff70713          	addi	a4,a4,-1 # fffff <_HEAP_SIZE+0xfefff>
80017f58:	7ff7f793          	andi	a5,a5,2047
{
80017f5c:	fd010113          	addi	sp,sp,-48
  FP_UNPACK_RAW_D (A, a);
80017f60:	00c77733          	and	a4,a4,a2
#if (2 * _FP_W_TYPE_SIZE) < _FP_FRACBITS_Q
  FP_EXTEND (Q, D, 4, 2, R, A);
80017f64:	00178693          	addi	a3,a5,1
{
80017f68:	02812423          	sw	s0,40(sp)
80017f6c:	02912223          	sw	s1,36(sp)
  FP_UNPACK_RAW_D (A, a);
80017f70:	01f65413          	srli	s0,a2,0x1f
{
80017f74:	02112623          	sw	ra,44(sp)
  FP_EXTEND (Q, D, 4, 2, R, A);
80017f78:	00b12823          	sw	a1,16(sp)
80017f7c:	00e12a23          	sw	a4,20(sp)
80017f80:	00012e23          	sw	zero,28(sp)
80017f84:	00012c23          	sw	zero,24(sp)
80017f88:	7ff6f693          	andi	a3,a3,2047
80017f8c:	00100613          	li	a2,1
{
80017f90:	00050493          	mv	s1,a0
  FP_EXTEND (Q, D, 4, 2, R, A);
80017f94:	0ad65463          	ble	a3,a2,8001803c <__extenddftf2+0xf0>
80017f98:	000046b7          	lui	a3,0x4
80017f9c:	c0068693          	addi	a3,a3,-1024 # 3c00 <_HEAP_SIZE+0x2c00>
80017fa0:	0045d513          	srli	a0,a1,0x4
80017fa4:	00d787b3          	add	a5,a5,a3
80017fa8:	00475693          	srli	a3,a4,0x4
80017fac:	01c71713          	slli	a4,a4,0x1c
80017fb0:	00a76733          	or	a4,a4,a0
80017fb4:	01c59593          	slli	a1,a1,0x1c
80017fb8:	00d12e23          	sw	a3,28(sp)
80017fbc:	00e12c23          	sw	a4,24(sp)
80017fc0:	00b12a23          	sw	a1,20(sp)
80017fc4:	00012823          	sw	zero,16(sp)
#else
  FP_EXTEND (Q, D, 2, 1, R, A);
#endif
  FP_PACK_RAW_Q (r, R);
80017fc8:	01c12703          	lw	a4,28(sp)
80017fcc:	00008537          	lui	a0,0x8
80017fd0:	fff50513          	addi	a0,a0,-1 # 7fff <_HEAP_SIZE+0x6fff>
80017fd4:	00e11623          	sh	a4,12(sp)
80017fd8:	00c12703          	lw	a4,12(sp)
80017fdc:	800106b7          	lui	a3,0x80010
80017fe0:	00a7f7b3          	and	a5,a5,a0
80017fe4:	fff68693          	addi	a3,a3,-1 # 8000ffff <__stack+0xfffd3533>
80017fe8:	00d77733          	and	a4,a4,a3
80017fec:	01079793          	slli	a5,a5,0x10
80017ff0:	00f767b3          	or	a5,a4,a5
80017ff4:	80000737          	lui	a4,0x80000
80017ff8:	fff74713          	not	a4,a4
80017ffc:	00e7f7b3          	and	a5,a5,a4
80018000:	01f41413          	slli	s0,s0,0x1f
80018004:	0087e433          	or	s0,a5,s0
  FP_HANDLE_EXCEPTIONS;

  return r;
80018008:	01012783          	lw	a5,16(sp)
8001800c:	0084a623          	sw	s0,12(s1)
}
80018010:	02c12083          	lw	ra,44(sp)
  return r;
80018014:	00f4a023          	sw	a5,0(s1)
80018018:	01412783          	lw	a5,20(sp)
}
8001801c:	02812403          	lw	s0,40(sp)
80018020:	00048513          	mv	a0,s1
  return r;
80018024:	00f4a223          	sw	a5,4(s1)
80018028:	01812783          	lw	a5,24(sp)
8001802c:	00f4a423          	sw	a5,8(s1)
}
80018030:	02412483          	lw	s1,36(sp)
80018034:	03010113          	addi	sp,sp,48
80018038:	00008067          	ret
8001803c:	00b76533          	or	a0,a4,a1
  FP_EXTEND (Q, D, 4, 2, R, A);
80018040:	0e079a63          	bnez	a5,80018134 <__extenddftf2+0x1e8>
80018044:	f80502e3          	beqz	a0,80017fc8 <__extenddftf2+0x7c>
80018048:	06070063          	beqz	a4,800180a8 <__extenddftf2+0x15c>
8001804c:	00070513          	mv	a0,a4
80018050:	478000ef          	jal	ra,800184c8 <__clzsi2>
80018054:	03150693          	addi	a3,a0,49
80018058:	4056d713          	srai	a4,a3,0x5
8001805c:	01f6f693          	andi	a3,a3,31
80018060:	04068a63          	beqz	a3,800180b4 <__extenddftf2+0x168>
80018064:	ffc00613          	li	a2,-4
80018068:	02c70633          	mul	a2,a4,a2
8001806c:	02000813          	li	a6,32
80018070:	01010793          	addi	a5,sp,16
80018074:	ff000313          	li	t1,-16
80018078:	40d80833          	sub	a6,a6,a3
8001807c:	ffc60613          	addi	a2,a2,-4
80018080:	ffc78793          	addi	a5,a5,-4
80018084:	08661663          	bne	a2,t1,80018110 <__extenddftf2+0x1c4>
80018088:	02010793          	addi	a5,sp,32
8001808c:	fff70613          	addi	a2,a4,-1 # 7fffffff <__stack+0xfffc3533>
80018090:	00271713          	slli	a4,a4,0x2
80018094:	00e78733          	add	a4,a5,a4
80018098:	01012783          	lw	a5,16(sp)
8001809c:	00d796b3          	sll	a3,a5,a3
800180a0:	fed72823          	sw	a3,-16(a4)
800180a4:	03c0006f          	j	800180e0 <__extenddftf2+0x194>
800180a8:	420000ef          	jal	ra,800184c8 <__clzsi2>
800180ac:	02050513          	addi	a0,a0,32
800180b0:	fa5ff06f          	j	80018054 <__extenddftf2+0x108>
800180b4:	ffc00613          	li	a2,-4
800180b8:	02c70633          	mul	a2,a4,a2
800180bc:	01010693          	addi	a3,sp,16
800180c0:	00300793          	li	a5,3
800180c4:	00c685b3          	add	a1,a3,a2
800180c8:	00c5a583          	lw	a1,12(a1)
800180cc:	fff78793          	addi	a5,a5,-1
800180d0:	ffc68693          	addi	a3,a3,-4
800180d4:	00b6a823          	sw	a1,16(a3)
800180d8:	fee7d6e3          	ble	a4,a5,800180c4 <__extenddftf2+0x178>
800180dc:	fff70613          	addi	a2,a4,-1
800180e0:	01010793          	addi	a5,sp,16
800180e4:	00261713          	slli	a4,a2,0x2
800180e8:	00e78733          	add	a4,a5,a4
800180ec:	fff00793          	li	a5,-1
800180f0:	00072023          	sw	zero,0(a4)
800180f4:	fff60613          	addi	a2,a2,-1
800180f8:	ffc70713          	addi	a4,a4,-4
800180fc:	fef61ae3          	bne	a2,a5,800180f0 <__extenddftf2+0x1a4>
80018100:	000047b7          	lui	a5,0x4
80018104:	c0c78793          	addi	a5,a5,-1012 # 3c0c <_HEAP_SIZE+0x2c0c>
80018108:	40a787b3          	sub	a5,a5,a0
8001810c:	ebdff06f          	j	80017fc8 <__extenddftf2+0x7c>
80018110:	01010593          	addi	a1,sp,16
80018114:	00c588b3          	add	a7,a1,a2
80018118:	00c8a583          	lw	a1,12(a7)
8001811c:	0108a883          	lw	a7,16(a7)
80018120:	0105d5b3          	srl	a1,a1,a6
80018124:	00d898b3          	sll	a7,a7,a3
80018128:	0115e5b3          	or	a1,a1,a7
8001812c:	00b7a823          	sw	a1,16(a5)
80018130:	f4dff06f          	j	8001807c <__extenddftf2+0x130>
80018134:	000087b7          	lui	a5,0x8
80018138:	02050863          	beqz	a0,80018168 <__extenddftf2+0x21c>
8001813c:	01c71793          	slli	a5,a4,0x1c
80018140:	0045d693          	srli	a3,a1,0x4
80018144:	00d7e7b3          	or	a5,a5,a3
80018148:	00f12c23          	sw	a5,24(sp)
8001814c:	00475713          	srli	a4,a4,0x4
80018150:	000087b7          	lui	a5,0x8
80018154:	01c59593          	slli	a1,a1,0x1c
80018158:	00f76733          	or	a4,a4,a5
8001815c:	00b12a23          	sw	a1,20(sp)
80018160:	00012823          	sw	zero,16(sp)
80018164:	00e12e23          	sw	a4,28(sp)
80018168:	fff78793          	addi	a5,a5,-1 # 7fff <_HEAP_SIZE+0x6fff>
8001816c:	e5dff06f          	j	80017fc8 <__extenddftf2+0x7c>

80018170 <__trunctfdf2>:
#include "double.h"
#include "quad.h"

DFtype
__trunctfdf2 (TFtype a)
{
80018170:	00c52583          	lw	a1,12(a0)
80018174:	00852783          	lw	a5,8(a0)
80018178:	00452703          	lw	a4,4(a0)
8001817c:	fe010113          	addi	sp,sp,-32
80018180:	00052683          	lw	a3,0(a0)
  FP_DECL_Q (A);
  FP_DECL_D (R);
  DFtype r;

  FP_INIT_ROUNDMODE;
  FP_UNPACK_SEMIRAW_Q (A, a);
80018184:	00f12423          	sw	a5,8(sp)
80018188:	00f12c23          	sw	a5,24(sp)
8001818c:	01059793          	slli	a5,a1,0x10
80018190:	00e12223          	sw	a4,4(sp)
80018194:	00e12a23          	sw	a4,20(sp)
80018198:	0107d793          	srli	a5,a5,0x10
8001819c:	00159713          	slli	a4,a1,0x1
800181a0:	00b12623          	sw	a1,12(sp)
800181a4:	00d12023          	sw	a3,0(sp)
800181a8:	00d12823          	sw	a3,16(sp)
800181ac:	00f12e23          	sw	a5,28(sp)
800181b0:	01175713          	srli	a4,a4,0x11
800181b4:	01f5d593          	srli	a1,a1,0x1f
800181b8:	01010313          	addi	t1,sp,16
800181bc:	01c10613          	addi	a2,sp,28
800181c0:	00062783          	lw	a5,0(a2)
800181c4:	ffc62683          	lw	a3,-4(a2)
800181c8:	ffc60613          	addi	a2,a2,-4
800181cc:	00379793          	slli	a5,a5,0x3
800181d0:	01d6d693          	srli	a3,a3,0x1d
800181d4:	00d7e7b3          	or	a5,a5,a3
800181d8:	00f62223          	sw	a5,4(a2)
800181dc:	fec312e3          	bne	t1,a2,800181c0 <__trunctfdf2+0x50>
800181e0:	01012683          	lw	a3,16(sp)
#if (2 * _FP_W_TYPE_SIZE) < _FP_FRACBITS_Q
  FP_TRUNC (D, Q, 2, 4, R, A);
800181e4:	00170793          	addi	a5,a4,1
  FP_UNPACK_SEMIRAW_Q (A, a);
800181e8:	00369513          	slli	a0,a3,0x3
  FP_TRUNC (D, Q, 2, 4, R, A);
800181ec:	000086b7          	lui	a3,0x8
800181f0:	fff68693          	addi	a3,a3,-1 # 7fff <_HEAP_SIZE+0x6fff>
800181f4:	00d7f7b3          	and	a5,a5,a3
  FP_UNPACK_SEMIRAW_Q (A, a);
800181f8:	00a12823          	sw	a0,16(sp)
  FP_TRUNC (D, Q, 2, 4, R, A);
800181fc:	00100693          	li	a3,1
80018200:	1af6dc63          	ble	a5,a3,800183b8 <__trunctfdf2+0x248>
80018204:	ffffc7b7          	lui	a5,0xffffc
80018208:	40078793          	addi	a5,a5,1024 # ffffc400 <__stack+0x7ffbf934>
8001820c:	00f70733          	add	a4,a4,a5
80018210:	7fe00793          	li	a5,2046
80018214:	1ee7ce63          	blt	a5,a4,80018410 <__trunctfdf2+0x2a0>
80018218:	06e05863          	blez	a4,80018288 <__trunctfdf2+0x118>
8001821c:	01812803          	lw	a6,24(sp)
80018220:	01c12603          	lw	a2,28(sp)
80018224:	01412783          	lw	a5,20(sp)
80018228:	01c85693          	srli	a3,a6,0x1c
8001822c:	00461613          	slli	a2,a2,0x4
80018230:	00d66633          	or	a2,a2,a3
80018234:	00479693          	slli	a3,a5,0x4
80018238:	00a6e6b3          	or	a3,a3,a0
8001823c:	01c7d793          	srli	a5,a5,0x1c
80018240:	00481813          	slli	a6,a6,0x4
80018244:	00d036b3          	snez	a3,a3
80018248:	0107e7b3          	or	a5,a5,a6
8001824c:	00f6e6b3          	or	a3,a3,a5
80018250:	00c12a23          	sw	a2,20(sp)
80018254:	00d12823          	sw	a3,16(sp)
80018258:	01012683          	lw	a3,16(sp)
8001825c:	01412783          	lw	a5,20(sp)
#else
  FP_TRUNC (D, Q, 1, 2, R, A);
#endif
  FP_PACK_SEMIRAW_D (r, R);
80018260:	0076f613          	andi	a2,a3,7
80018264:	1a060c63          	beqz	a2,8001841c <__trunctfdf2+0x2ac>
80018268:	00f6f613          	andi	a2,a3,15
8001826c:	00400513          	li	a0,4
80018270:	1aa60663          	beq	a2,a0,8001841c <__trunctfdf2+0x2ac>
80018274:	00468613          	addi	a2,a3,4
80018278:	00d636b3          	sltu	a3,a2,a3
8001827c:	00d787b3          	add	a5,a5,a3
80018280:	00060693          	mv	a3,a2
80018284:	1980006f          	j	8001841c <__trunctfdf2+0x2ac>
  FP_TRUNC (D, Q, 2, 4, R, A);
80018288:	fcc00793          	li	a5,-52
8001828c:	00f75a63          	ble	a5,a4,800182a0 <__trunctfdf2+0x130>
80018290:	00012a23          	sw	zero,20(sp)
80018294:	00d12823          	sw	a3,16(sp)
80018298:	00000713          	li	a4,0
8001829c:	fbdff06f          	j	80018258 <__trunctfdf2+0xe8>
800182a0:	01c12783          	lw	a5,28(sp)
800182a4:	000806b7          	lui	a3,0x80
800182a8:	00000893          	li	a7,0
800182ac:	00d7e7b3          	or	a5,a5,a3
800182b0:	00f12e23          	sw	a5,28(sp)
800182b4:	03d00793          	li	a5,61
800182b8:	40e78733          	sub	a4,a5,a4
800182bc:	40575513          	srai	a0,a4,0x5
800182c0:	00030793          	mv	a5,t1
800182c4:	01f77713          	andi	a4,a4,31
800182c8:	00000693          	li	a3,0
800182cc:	0007a803          	lw	a6,0(a5)
800182d0:	00168693          	addi	a3,a3,1 # 80001 <_HEAP_SIZE+0x7f001>
800182d4:	00478793          	addi	a5,a5,4
800182d8:	0108e8b3          	or	a7,a7,a6
800182dc:	fed518e3          	bne	a0,a3,800182cc <__trunctfdf2+0x15c>
800182e0:	00269e93          	slli	t4,a3,0x2
800182e4:	02071a63          	bnez	a4,80018318 <__trunctfdf2+0x1a8>
800182e8:	00300793          	li	a5,3
800182ec:	40d787b3          	sub	a5,a5,a3
800182f0:	00e7d863          	ble	a4,a5,80018300 <__trunctfdf2+0x190>
800182f4:	00400793          	li	a5,4
800182f8:	40d786b3          	sub	a3,a5,a3
800182fc:	0680006f          	j	80018364 <__trunctfdf2+0x1f4>
80018300:	01d60533          	add	a0,a2,t4
80018304:	00052503          	lw	a0,0(a0)
80018308:	00170713          	addi	a4,a4,1
8001830c:	00460613          	addi	a2,a2,4
80018310:	fea62e23          	sw	a0,-4(a2)
80018314:	fddff06f          	j	800182f0 <__trunctfdf2+0x180>
80018318:	02010793          	addi	a5,sp,32
8001831c:	01d787b3          	add	a5,a5,t4
80018320:	ff07a783          	lw	a5,-16(a5)
80018324:	02000813          	li	a6,32
80018328:	40e80833          	sub	a6,a6,a4
8001832c:	010797b3          	sll	a5,a5,a6
80018330:	00f8e8b3          	or	a7,a7,a5
80018334:	00300793          	li	a5,3
80018338:	00000e13          	li	t3,0
8001833c:	40d787b3          	sub	a5,a5,a3
80018340:	04fe4863          	blt	t3,a5,80018390 <__trunctfdf2+0x220>
80018344:	00400613          	li	a2,4
80018348:	40d606b3          	sub	a3,a2,a3
8001834c:	00279793          	slli	a5,a5,0x2
80018350:	02010613          	addi	a2,sp,32
80018354:	00f607b3          	add	a5,a2,a5
80018358:	01c12603          	lw	a2,28(sp)
8001835c:	00e65733          	srl	a4,a2,a4
80018360:	fee7a823          	sw	a4,-16(a5)
80018364:	00400713          	li	a4,4
80018368:	00269793          	slli	a5,a3,0x2
8001836c:	00f307b3          	add	a5,t1,a5
80018370:	0007a023          	sw	zero,0(a5)
80018374:	00168693          	addi	a3,a3,1
80018378:	fee698e3          	bne	a3,a4,80018368 <__trunctfdf2+0x1f8>
8001837c:	01012703          	lw	a4,16(sp)
80018380:	011037b3          	snez	a5,a7
80018384:	00f767b3          	or	a5,a4,a5
80018388:	00f12823          	sw	a5,16(sp)
8001838c:	f0dff06f          	j	80018298 <__trunctfdf2+0x128>
80018390:	01d60f33          	add	t5,a2,t4
80018394:	000f2503          	lw	a0,0(t5)
80018398:	004f2f03          	lw	t5,4(t5)
8001839c:	001e0e13          	addi	t3,t3,1
800183a0:	00e55533          	srl	a0,a0,a4
800183a4:	010f1f33          	sll	t5,t5,a6
800183a8:	01e56533          	or	a0,a0,t5
800183ac:	00a62023          	sw	a0,0(a2)
800183b0:	00460613          	addi	a2,a2,4
800183b4:	f8dff06f          	j	80018340 <__trunctfdf2+0x1d0>
800183b8:	01412603          	lw	a2,20(sp)
800183bc:	01812783          	lw	a5,24(sp)
800183c0:	01c12803          	lw	a6,28(sp)
800183c4:	00f666b3          	or	a3,a2,a5
800183c8:	0106e6b3          	or	a3,a3,a6
800183cc:	00a6e6b3          	or	a3,a3,a0
800183d0:	00071863          	bnez	a4,800183e0 <__trunctfdf2+0x270>
800183d4:	00d036b3          	snez	a3,a3
800183d8:	00000793          	li	a5,0
800183dc:	e85ff06f          	j	80018260 <__trunctfdf2+0xf0>
800183e0:	0c068a63          	beqz	a3,800184b4 <__trunctfdf2+0x344>
800183e4:	01c65693          	srli	a3,a2,0x1c
800183e8:	00481813          	slli	a6,a6,0x4
800183ec:	00479613          	slli	a2,a5,0x4
800183f0:	01c7d793          	srli	a5,a5,0x1c
800183f4:	00400737          	lui	a4,0x400
800183f8:	00c6e6b3          	or	a3,a3,a2
800183fc:	0107e7b3          	or	a5,a5,a6
80018400:	00e7e7b3          	or	a5,a5,a4
80018404:	ff86f693          	andi	a3,a3,-8
80018408:	7ff00713          	li	a4,2047
8001840c:	e55ff06f          	j	80018260 <__trunctfdf2+0xf0>
80018410:	00000793          	li	a5,0
80018414:	00000693          	li	a3,0
80018418:	7ff00713          	li	a4,2047
  FP_PACK_SEMIRAW_D (r, R);
8001841c:	00879613          	slli	a2,a5,0x8
80018420:	00065e63          	bgez	a2,8001843c <__trunctfdf2+0x2cc>
80018424:	00170713          	addi	a4,a4,1 # 400001 <_HEAP_SIZE+0x3ff001>
80018428:	7ff00613          	li	a2,2047
8001842c:	08c70863          	beq	a4,a2,800184bc <__trunctfdf2+0x34c>
80018430:	ff800637          	lui	a2,0xff800
80018434:	fff60613          	addi	a2,a2,-1 # ff7fffff <__stack+0x7f7c3533>
80018438:	00c7f7b3          	and	a5,a5,a2
8001843c:	01d79613          	slli	a2,a5,0x1d
80018440:	0036d693          	srli	a3,a3,0x3
80018444:	00d666b3          	or	a3,a2,a3
80018448:	7ff00613          	li	a2,2047
8001844c:	0037d793          	srli	a5,a5,0x3
80018450:	00c71e63          	bne	a4,a2,8001846c <__trunctfdf2+0x2fc>
80018454:	00f6e6b3          	or	a3,a3,a5
80018458:	00000793          	li	a5,0
8001845c:	00068863          	beqz	a3,8001846c <__trunctfdf2+0x2fc>
80018460:	000807b7          	lui	a5,0x80
80018464:	00000693          	li	a3,0
80018468:	00000593          	li	a1,0
8001846c:	00100637          	lui	a2,0x100
80018470:	fff60613          	addi	a2,a2,-1 # fffff <_HEAP_SIZE+0xfefff>
80018474:	00c7f7b3          	and	a5,a5,a2
80018478:	80100637          	lui	a2,0x80100
8001847c:	7ff77713          	andi	a4,a4,2047
80018480:	fff60613          	addi	a2,a2,-1 # 800fffff <__stack+0xc3533>
80018484:	01471713          	slli	a4,a4,0x14
80018488:	00c7f7b3          	and	a5,a5,a2
8001848c:	00e7e7b3          	or	a5,a5,a4
80018490:	80000737          	lui	a4,0x80000
80018494:	fff74713          	not	a4,a4
80018498:	01f59593          	slli	a1,a1,0x1f
8001849c:	00e7f7b3          	and	a5,a5,a4
800184a0:	00b7e733          	or	a4,a5,a1
  FP_HANDLE_EXCEPTIONS;

  return r;
}
800184a4:	00068513          	mv	a0,a3
800184a8:	00070593          	mv	a1,a4
800184ac:	02010113          	addi	sp,sp,32
800184b0:	00008067          	ret
800184b4:	00000793          	li	a5,0
800184b8:	f61ff06f          	j	80018418 <__trunctfdf2+0x2a8>
800184bc:	00000793          	li	a5,0
800184c0:	00000693          	li	a3,0
800184c4:	f79ff06f          	j	8001843c <__trunctfdf2+0x2cc>

800184c8 <__clzsi2>:
  count_leading_zeros (ret, x);
800184c8:	000107b7          	lui	a5,0x10
800184cc:	02f57a63          	bleu	a5,a0,80018500 <__clzsi2+0x38>
800184d0:	0ff00793          	li	a5,255
800184d4:	00a7b7b3          	sltu	a5,a5,a0
800184d8:	00379793          	slli	a5,a5,0x3
800184dc:	02000713          	li	a4,32
800184e0:	40f70733          	sub	a4,a4,a5
800184e4:	00f557b3          	srl	a5,a0,a5
800184e8:	80021537          	lui	a0,0x80021
800184ec:	c6c50513          	addi	a0,a0,-916 # 80020c6c <__stack+0xfffe41a0>
800184f0:	00a787b3          	add	a5,a5,a0
800184f4:	0007c503          	lbu	a0,0(a5) # 10000 <_HEAP_SIZE+0xf000>
}
800184f8:	40a70533          	sub	a0,a4,a0
800184fc:	00008067          	ret
  count_leading_zeros (ret, x);
80018500:	01000737          	lui	a4,0x1000
80018504:	01000793          	li	a5,16
80018508:	fce56ae3          	bltu	a0,a4,800184dc <__clzsi2+0x14>
8001850c:	01800793          	li	a5,24
80018510:	fcdff06f          	j	800184dc <__clzsi2+0x14>
